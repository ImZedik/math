//
//  javaobjectimpl.hpp
//  math
//
//  Created by Derek Li on 10/12/23.
//

#ifndef javaobjectimpl_hpp
#define javaobjectimpl_hpp

#include <stdio.h>
#include "javaobject.hpp"

class List;
class IBorderListener;
class Object;
class Class;
class SecurityManager;
class Permission;
class PermissionCollection;
class Enumeration;
class Stream;
class ThreadGroup;
class Thread;
class Throwable;
class arr_C;
class CharSequence;
class Object_interface;
class Locale;
class Enum;
class ObjectStreamClass;
class ObjectStreamField;
class GenericsFactory;
class Type;
class TypeSignature;
class AbstractRepository;
class Tree;
class Reifier;
class Map;
class FieldAccessor;
class AnnotatedType;
class AccessibleObject;
class AccessibleObject_interface;
class AbstractStringBuilder;
class arr_B;
class ObjectOutputStream_PutField;
class ObjectOutput;
class Boolean;
class Exception;
class Externalizable;
class OutputStream;
class ReferenceQueue;
class Reference;
class Consumer;
class ConcurrentMap;
class ObjectStreamField_interface;
class ObjectStreamClass_FieldReflector;
class ProtectionDomain;
class ClassLoader;
class Module;
class ModuleDescriptor;
class Set;
class Optional;
class Function;
class Predicate;
class Supplier;
class Runnable;
class InputStream;
class ByteOrder;
class Buffer;
class RuntimeException;
class ScopedMemoryAccess_Scope;
class ShortBuffer;
class arr_S;
class IntBuffer;
class arr_I;
class LongBuffer;
class arr_J;
class FloatBuffer;
class arr_F;
class DoubleBuffer;
class arr_D;
class ModuleDescriptor_Builder;
class ModuleDescriptor_Version;
class ModuleDescriptor_Exports;
class ModuleDescriptor_Opens;
class ModuleDescriptor_Provides;
class ModuleDescriptor_Requires;
class ModuleLayer;
class Configuration;
class ModuleFinder;
class Collection;
class ResolvedModule;
class ModuleReference;
class ModuleReader;
class ServicesCatalog;
class ServicesCatalog_ServiceProvider_interface;
class ModuleLayer_Controller;
class LayerInstantiationException;
class URL;
class InetAddress;
class InetAddress_InetAddressHolder;
class NetworkInterface;
class InetAddress_NameService;
class InetAddressImpl;
class URLStreamHandler;
class URLConnection;
class Class_interface;
class ContentHandler;
class FileNameMap;
class ContentHandlerFactory;
class Proxy;
class Proxy_Type;
class SocketAddress;
class URI;
class CharsetEncoder;
class CodingErrorAction;
class CoderResult;
class Charset;
class Iterator;
class CharsetDecoder;
class SortedMap;
class URLStreamHandlerFactory;
class NamedPackage;
class Void;
class CodeSource;
class Certificate_interface;
class NativeLibrary;
class File;
class Path;
class AssertionStatusDirectives;
class ConcurrentHashMap_CollectionView;
class ConcurrentHashMap_Node_interface;
class ConcurrentHashMap_Node;
class BiFunction;
class ToDoubleBiFunction;
class DoubleBinaryOperator;
class ToLongBiFunction;
class LongBinaryOperator;
class ToIntBiFunction;
class IntBinaryOperator;
class ToDoubleFunction;
class ToLongFunction;
class ToIntFunction;
class Map_Entry;
class AbstractMap;
class MethodTypeSignature;
class FormalTypeParameter_interface;
class TypeSignature_interface;
class ReturnType;
class FieldTypeSignature_interface;
class Visitor;
class GenericDeclRepository;
class ConstructorAccessor;
class Executable;
class TypeVariable;
class Parameter_interface;
class MethodHandle;
class MethodType;
class MethodTypeForm;
class LambdaForm;
class LambdaForm_BasicType;
class Wrapper;
class ClassCastException;
class Number;
class LambdaForm_Name;
class LambdaForm_Name_interface;
class LambdaForm_NamedFunction;
class MemberName;
class MemberName_Factory;
class ReflectiveOperationException;
class MethodHandleImpl_Intrinsic;
class LambdaFormEditor;
class LambdaFormBuffer;
class BoundMethodHandle;
class ClassSpecializer_SpeciesData;
class ClassSpecializer;
class ClassSpecializer_Factory;
class MethodVisitor;
class AnnotationVisitor;
class Label;
class ByteVector;
class Label_interface;
class TypePath;
class Attribute;
class String_interface;
class FieldVisitor;
class ModuleVisitor;
class RecordComponentVisitor;
class Handle;
class ClassVisitor;
class ClassReader;
class Attribute_interface;
class Context;
class ConstantDynamic;
class SymbolTable;
class Symbol;
class LambdaFormEditor_TransformKey;
class SoftReference;
class LambdaForm_BasicType_interface;
class PerfCounter;
class Invokers;
class VarHandle_AccessMode;
class WrongMethodTypeException;
class CallSite;
class VarHandle;
class VarHandle_AccessDescriptor;
class VarHandle_TypesAndInvokers;
class VarHandle_AccessType;
class VarForm;
class IndexOutOfBoundsException;
class Method;
class MethodAccessor;
class Long;
class MethodHandles_Lookup;
class MethodHandleInfo;
class MethodHandles_Lookup_ClassDefiner;
class MethodHandles_Lookup_ClassFile;
class DirectMethodHandle;
class LambdaForm_Kind;
class MethodHandles_Lookup_ClassOption_interface;
class BigInteger;
class Random;
class ClassNotFoundException;
class ObjectInputStream_GetField;
class ObjectInputValidation;
class ObjectInputFilter;
class Locale_FilteringMode;
class LocaleExtensions;
class Character;
class Extension;
class BaseLocale;
class LocaleResources;
class ResourceBundle;
class ResourceBundle_Control;
class ResourceBundle_CacheKey;
class ServiceLoader;
class ServicesCatalog_ServiceProvider;
class ServiceLoader_Provider;
class Calendar;
class Date;
class Instant;
class TemporalAccessor;
class Clock;
class Duration;
class BigDecimal;
class MathContext;
class RoundingMode;
class BigDecimal_interface;
class MutableBigInteger;
class TemporalUnit;
class TemporalAmount;
class Temporal;
class DataInput;
class DataOutput;
class ZoneId;
class ZoneOffset;
class ZoneRules;
class LocalDateTime;
class LocalDate;
class ZonedDateTime;
class OffsetDateTime;
class LocalTime;
class DateTimeFormatter;
class Chronology;
class Appendable;
class ParsePosition;
class DateTimeException;
class DateTimeParseContext;
class ResolverStyle;
class Parsed;
class TemporalField;
class Period;
class ChronoLocalDate;
class DecimalStyle;
class DateTimeFormatterBuilder_DayPeriod;
class FormatStyle;
class TemporalQuery;
class TemporalField_interface;
class TemporalQuery_interface;
class DateTimeFormatterBuilder_CompositePrinterParser;
class Format;
class FieldPosition;
class AttributedCharacterIterator_Attribute;
class Format_FieldDelegate;
class AttributedCharacterIterator;
class AttributedCharacterIterator_interface;
class TemporalAdjuster;
class OffsetTime;
class ObjectInput;
class Comparator;
class Month;
class TextStyle;
class DayOfWeek;
class IsoEra;
class Era;
class AbstractChronology;
class ChronoField;
class ZoneOffsetTransition;
class CalendarDate;
class TimeZone;
class Era_interface;
class CalendarSystem;
class Locale_IsoCountryCode;
class FilterOutputStream;
class Writer;
class Throwable_PrintStreamOrWriter;
class StackTraceElement_interface;
class Thread_interface;
class Thread_UncaughtExceptionHandler;
class Interruptible;
class Thread_State;
class ThreadGroup_interface;
class FileDescriptor;
class Closeable;
class PhantomReference;
class ReflectionFactory;
class ClassRepository;
class ClassSignature;
class ClassTypeSignature;
class ClassTypeSignature_interface;
class Class_ReflectionData;
class Class_EnclosingMethodInfo;
class Field_interface;
class Method_interface;
class PublicMethods_MethodList;
class Class_AnnotationData;
class ConstantPool;
class Member;
class ConstantPool_Tag;
class AnnotationType;
class RetentionPolicy;
class CharSequence_interface;
class Iterable;
class Vec3i;
class EnumFacing;
class EnumFacing_Axis;
class EnumFacing_Plane;
class EnumFacing_AxisDirection;
class AxisAlignedBB;
class Vec3;
class MovingObjectPosition;
class ChunkCoordIntPair;
class Chunk;
class EnumSkyBlock;
class TileEntity;
class CrashReportCategory;
class IBlockState;
class Callable;
class StackTraceElement;
class StackFrameInfo;
class CrashReport;
class NBTBase;
class NBTSizeTracker;
class NBTTagList;
class Packet;
class IChunkProvider;
class ExtendedBlockStorage_interface;
class Chunk_EnumCreateEntityType;
class WorldChunkManager;
class BiomeGenBase;
class BiomeDecorator;
class WorldGenerator;
class WorldGenAbstractTree;
class BlockFlower_EnumFlowerType;
class BlockFlower_EnumFlowerColor;
class BlockState;
class UnmodifiableIterator;
class ImmutableCollection_Builder;
class AbstractCollection;
class UnmodifiableListIterator;
class Item;
class ItemStack;
class Multimap;
class DamageSource;
class PotionEffect;
class BaseAttributeMap;
class IAttribute;
class IAttributeInstance;
class Potion;
class AttributeModifier;
class UUID;
class CombatTracker;
class IChatComponent;
class CombatEntry;
class EnumCreatureAttribute;
class Team;
class Team_EnumVisible;
class Explosion;
class StatBase;
class IScoreObjectiveCriteria;
class Scoreboard;
class ScoreObjective;
class IScoreObjectiveCriteria_EnumRenderType;
class ScorePlayerTeam;
class EnumChatFormatting;
class Score;
class TileEntitySign;
class CommandResultStats;
class CommandResultStats_Type;
class ICommandSender;
class CommandBlockLogic;
class ByteBuf;
class ByteBufProcessor;
class ByteBufAllocator;
class ScatteringByteChannel;
class GatheringByteChannel;
class IMerchant;
class IInventory;
class InventoryBasic;
class IInvBasic;
class PathNavigate;
class PathFinder;
class IBlockAccess;
class PathEntity;
class PathPoint;
class EntityLookHelper;
class EntityMoveHelper;
class EntityJumpHelper;
class EntitySenses;
class DifficultyInstance;
class EnumDifficulty;
class IEntityLivingData;
class GameProfile;
class ForwardingObject;
class FoodStats;
class ItemFood;
class EnumAction;
class WorldSettings_GameType;
class PlayerCapabilities;
class InventoryEnderChest;
class TileEntityEnderChest;
class IInteractionObject;
class EntityPlayer_EnumStatus;
class LockCode;
class EnumPlayerModelParts;
class Enchantment;
class EnumRarity;
class CreativeTabs;
class EnumEnchantmentType;
class EnumEnchantmentType_interface;
class ResourceLocation;
class Block_EnumOffsetType;
class IProperty;
class EnumWorldBlockLayer;
class EnumCreatureType;
class ChunkPrimer;
class BiomeGenBase_TempCategory;
class BiomeGenBase_Height;
class IWorldAccess;
class Material;
class MapColor;
class StructureBoundingBox;
class NBTTagIntArray;
class ISaveHandler;
class MapStorage;
class WorldSavedData;
class VillageCollection;
class WorldProvider;
class Village;
class VillageDoorInfo;
class EnumParticleTypes;
class GameRules;
class GameRules_ValueType;
class WorldInfo;
class WorldType;
class WorldSettings;
class Block_SoundType;
class HoverEvent;
class HoverEvent_Action;
class EntityTracker;
class IProgressUpdate;
class WeightedRandom_Item;
class BlockEventData;
class PlayerManager;
class PlayerManager_PlayerInstance;
class Teleporter;
class MinecraftServer;
class ServerConfigurationManager;
class ServerScoreboard;
class ScoreboardSaveData;
class JsonElement;
class JsonArray;
class JsonNull;
class JsonPrimitive;
class UserListEntry;
class UserList;
class BanList;
class BanEntry;
class UserListWhitelist;
class WorldServer_interface;
class StatFileWriter;
class Achievement;
class IStatStringFormat;
class IJsonSerializable;
class UserListOps;
class EnumConnectionState;
class EnumPacketDirection;
class Integer;
class ChannelHandlerContext;
class GenericFutureListener_interface;
class SecretKey;
class INetHandler;
class GenericFutureListener;
class ChannelHandlerAdapter;
class CommandHandler;
class ICommand;
class ISaveFormat;
class ServerStatusResponse;
class ServerStatusResponse_MinecraftProtocolVersionIdentifier;
class ServerStatusResponse_PlayerCountData;
class GameProfile_interface;
class ICommandManager;
class MinecraftSessionService;
class GameProfileRepository;
class PlayerProfileCache;
class PlayerProfileCache_ProfileEntry;
class ListenableFuture;
class PlayerUsageSnooper;
class NetworkSystem;
class KeyPair;
class PublicKey;
class PrivateKey;
class Container;
class Slot;
class ICrafting;
class ItemStack_interface;
class InventoryPlayer;
class C15PacketClientSettings;
class EntityPlayer_EnumChatVisibility;
class DataWatcher;
class DataWatcher_WatchableObject;
class Rotations;
class PacketBuffer;
class NetHandlerPlayClient;
class NetworkPlayerInfo;
class ServerData;
class ServerData_ServerResourceMode;
class IntegratedServer;
class TextureManager;
class ITextureObject;
class ITickableTextureObject;
class AbstractTexture;
class IResourceManager;
class ResourcePackRepository;
class IResourcePack;
class LanguageManager;
class SortedSet;
class Language;
class TextureMap;
class TextureAtlasSprite;
class BufferedImage_interface;
class AnimationMetadataSection;
class AnimationFrame;
class IIconCreator;
class SoundHandler;
class ISound;
class SoundList;
class SoundCategory;
class SoundEventAccessorComposite;
class ISoundEventAccessor;
class SoundPoolEntry;
class SoundCategory_interface;
class MusicTicker_MusicType;
class IStream;
class SkinManager;
class SkinManager_SkinAvailableCallback;
class MinecraftProfileTexture;
class MinecraftProfileTexture_Type;
class BlockRendererDispatcher;
class WorldRenderer;
class WorldRenderer_State;
class VertexFormat;
class VertexFormatElement;
class VertexFormatElement_EnumUsage;
class VertexFormatElement_EnumType;
class IBakedModel;
class BlockModelRenderer;
class BitSet;
class IntStream;
class BlockModelRenderer_AmbientOcclusionFace;
class BlockModelShapes;
class BlockStateMapper;
class IStateMapper;
class Block_interface;
class ModelManager;
class ModelResourceLocation;
class RenderManager;
class Render;
class ICamera;
class FontRenderer;
class GameSettings;
class KeyBinding;
class GameSettings_Options;
class RenderItem;
class ItemModelMesher;
class ItemMeshDefinition;
class BakedQuad;
class ItemCameraTransforms_TransformType;
class ItemTransformVec3f;
class ItemRenderer;
class Raster;
class DataBuffer;
class Point2D;
class SampleModel;
class Line2D;
class RectangularShape;
class Dimension2D;
class Dimension;
class Graphics;
class Color;
class ColorSpace;
class Font;
class AffineTransform;
class Shape;
class Point2D_interface;
class AttributeValues;
class Hashtable_Entry_interface;
class Dictionary;
class EAttribute;
class Point2D_Double;
class GraphicAttribute;
class Graphics2D;
class Image;
class GraphicsConfiguration;
class VolatileImage;
class ImageCapabilities;
class ImageProducer;
class GraphicsDevice;
class DisplayMode;
class GraphicsConfigTemplate;
class GraphicsConfiguration_interface;
class Window;
class Toolkit;
class Clipboard;
class Transferable;
class ClipboardOwner;
class DataFlavor;
class MimeType;
class MimeTypeParameterList;
class DataFlavor_interface;
class Reader;
class FlavorListener;
class InputMethodHighlight;
class Insets;
class EventQueue;
class Event;
class Component;
class ComponentFactory;
class Cursor;
class FocusEvent_Cause;
class PropertyChangeListener;
class ComponentOrientation;
class BufferCapabilities;
class AttributeValue;
class BufferStrategy;
class InputContext;
class Character_Subset_interface;
class LayoutManager;
class FocusTraversalPolicy;
class ContainerPeer;
class Container_EventTargetFilter;
class ContainerListener;
class Accessible;
class Region;
class SpanIterator;
class RegionIterator;
class AccessibleContext;
class AccessibleComponent;
class AccessibleSelection;
class AccessibleStateSet;
class AccessibleBundle;
class AccessibleState_interface;
class AccessibleRole;
class AccessibleAction;
class AccessibleText;
class AccessibleEditableText;
class AccessibleValue;
class AccessibleRelationSet;
class AccessibleRelation;
class AccessibleRelation_interface;
class AccessibleTable;
class PointerInfo;
class FontMetrics;
class CharacterIterator;
class LineMetrics;
class FontRenderContext;
class ImageObserver;
class TextHitInfo;
class ComponentListener;
class FocusListener;
class KeyListener;
class MouseListener;
class MouseMotionListener;
class InputMethodListener;
class HierarchyListener;
class HierarchyBoundsListener;
class MouseWheelListener;
class ComponentPeer;
class AccessControlContext;
class DomainCombiner;
class Debug;
class Permission_interface;
class ProtectionDomain_interface;
class DropTarget;
class FlavorMap;
class DropTargetContext;
class DropTargetContextPeer;
class DropTargetListener;
class DropTarget_DropTargetAutoScroller;
class Component_BaselineResizeBehavior;
class InputMethodRequests;
class RequestFocusController;
class MenuContainer;
class MenuShortcut;
class ActionListener;
class MenuComponent;
class ColorModel;
class EventObject;
class EventQueueItem;
class PlatformLogger;
class System_Logger_Level;
class PlatformLogger_Level;
class FwDispatcher;
class EventDispatchThread;
class Conditional;
class EventFilter;
class SecondaryLoop;
class Dialog_ModalExclusionType;
class PropertyChangeSupport;
class PropertyChangeListener_interface;
class PropertyChangeEvent;
class Frame;
class MenuBar;
class Properties_LineReader;
class BufferedWriter;
class PrintJob;
class JobAttributes;
class JobAttributes_DefaultSelectionType;
class JobAttributes_DestinationType;
class JobAttributes_DialogType;
class JobAttributes_MultipleDocumentHandlingType;
class arr_arr_I;
class JobAttributes_SidesType;
class PageAttributes;
class PageAttributes_ColorType;
class PageAttributes_OriginType;
class PageAttributes_MediaType;
class PageAttributes_OrientationRequestedType;
class PageAttributes_PrintQualityType;
class AWTEventListener;
class DragSource;
class DragGestureEvent;
class DragSourceListener;
class DragGestureRecognizer;
class DragGestureListener;
class DragSourceContext;
class DragSourceMotionListener;
class DragSourceEvent;
class DragSourceDropEvent;
class Dialog_ModalityType;
class WeakReference;
class Dialog;
class AtomicLong;
class LongUnaryOperator;
class AppContext;
class WindowListener;
class WindowFocusListener;
class WindowStateListener;
class AbstractList;
class Window_Type;
class GraphicsDevice_WindowTranslucency;
class BufferedImageOp;
class Paint;
class RenderedImage;
class RenderableImage;
class GlyphVector;
class GlyphMetrics;
class GlyphJustificationInfo;
class Composite;
class Stroke;
class RenderingHints_Key;
class RenderingHints;
class Annotation;
class NumericShaper;
class NumericShaper_Range;
class TransformAttribute;
class EAttribute_interface;
class Font2D;
class CharToGlyphMapper;
class FontStrike;
class PathIterator;
class Path2D;
class Point2D_Float;
class StrikeMetrics;
class FontStrikeDesc;
class FontLineMetrics;
class FontPeer;
class Polygon;
class Crossings;
class Vector;
class SimpleTexture;
class ModelBase;
class ModelRenderer;
class TextureOffset;
class RendererLivingEntity;
class LayerRenderer;
class FrameTimer;
class Gui;
class Framebuffer;
class MusicTicker;
class Session;
class Session_Type;
class Minecraft_Test;
class Minecraft;
class Entity;
class Block;
class World;
class WorldBorder;
class EnumBorderStatus;
class String;
class PrintStream;
class Locale_Category;
class ObjectInputStream;
class Field;
class FieldRepository;
class StringBuilder;
class StringBuffer;
class ObjectOutputStream;
class IOException;
class ByteBuffer;
class CharBuffer;
class IllegalArgumentException;
class Package;
class ConcurrentHashMap;
class ConcurrentHashMap_KeySetView;
class Constructor;
class ConstructorRepository;
class IllegalAccessException;
class BoundMethodHandle_SpeciesData;
class ClassWriter;
class SymbolTable_Entry;
class LambdaFormEditor_Transform;
class MethodRepository;
class IsoChronology;
class DateTimeParseException;
class Format_Field;
class BaseCalendar_Date;
class AbstractCalendar;
class Gregorian_Date;
class PrintWriter;
class PhantomCleanable;
class BlockPos;
class NBTTagCompound;
class ImmutableCollection_ArrayBasedBuilder;
class ImmutableCollection;
class EntityItem;
class EntityLivingBase;
class EntityArrow;
class EntityFireball;
class AnimalChest;
class EntityLiving;
class ForwardingMultimap;
class EntityHanging;
class BlockBush;
class EntityWeatherEffect;
class WorldServer;
class BiomeGenBase_SpawnListEntry;
class UserListBans;
class JsonObject;
class IPBanEntry;
class StatisticsFile;
class ChannelInboundHandlerAdapter;
class ServerCommandManager;
class DynamicTexture;
class ThreadDownloadImageData;
class BufferedImage;
class WritableRaster;
class Point;
class Rectangle2D;
class Hashtable;
class AWTEvent;
class ComponentEvent;
class BufferCapabilities_FlipContents;
class ContainerEvent;
class AccessibleState;
class FocusEvent;
class InputMethodEvent;
class HierarchyEvent;
class MenuItem;
class ActionEvent;
class PaintEvent;
class InvocationEvent;
class Properties;
class DragSourceDragEvent;
class WindowEvent;
class IdentityArrayList;
class Path2D_Float;
class Rectangle2D_Float;
class RenderPlayer;
class ModelBiped;
class GuiScreen;
class GuiButton;
class WorldClient;
class BaseCalendar;
class Gregorian;
class BlockFlower;
class ImmutableList;
class ImmutableList_Builder;
class EntityPlayer;
class EntityCreature;
class PropertyMap;
class EntityItemFrame;
class EntityLightningBolt;
class EntityPlayerMP;
class SimpleChannelInboundHandler;
class AbstractClientPlayer;
class Rectangle;
class InputEvent;
class MouseEvent;
class Menu;
class PeerEvent;
class GeneralPath;
class EntityPlayerSP;
class ModelPlayer;
class EntityAgeable;
class NetworkManager;
class KeyEvent;
class MouseWheelEvent;
class PopupMenu;
class EntityAnimal;
class EntityHorse;


/**
 * Classpath: `java.util.List`
 * Package name: `java.util`
 */
class List : public JavaObject {
protected:
    const inline static char *className = "java.util.List";
public:
    STATICINITIALIZE;

    List(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.world.border.IBorderListener`
 * Package name: `net.minecraft.world.border`
 */
class IBorderListener : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.border.IBorderListener";
public:
    STATICINITIALIZE;

    IBorderListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.Object`
 * Package name: `java.lang`
 */
class Object : public JavaObject {
protected:
    const inline static char *className = "java.lang.Object";
public:
    STATICINITIALIZE;

    Object(jobject object) : JavaObject(object) {}


    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()V`
     * Throws: `java.lang.Throwable`
     */
    void finalize();

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `(JI)V`
     * Throws: `java.lang.InterruptedException`
     */
    void wait(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()V`
     * Throws: `java.lang.InterruptedException`
     */
    void wait();

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `(J)V`
     * Throws: `java.lang.InterruptedException`
     */
    void wait(long arg0);

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getClass();

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.CloneNotSupportedException`
     */
    Object clone();

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()V`
     */
    void notify();

    /**
     * Declaring class: `java.lang.Object`
     * Signature: `()V`
     */
    void notifyAll();
};


/**
 * Classpath: `java.lang.Class`
 * Package name: `java.lang`
 */
class Class : public Object {
protected:
    const inline static char *className = "java.lang.Class";
public:
    STATICINITIALIZE;

    Class(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.SecurityManager;Ljava.lang.ClassLoader;Z)V`
     */
    void checkPackageAccess(SecurityManager arg0, ClassLoader arg1, bool arg2);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;ZLjava.lang.ClassLoader;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    static Class forName(String arg0, bool arg1, ClassLoader arg2);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    static Class forName(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;)Ljava.lang.Class;`
     */
    static Class forName(Module arg0, String arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;ZLjava.lang.ClassLoader;Ljava.lang.Class;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    static Class forName0(String arg0, bool arg1, ClassLoader arg2, Class arg3);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Module;`
     */
    Module getModule();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.security.ProtectionDomain;`
     */
    ProtectionDomain getProtectionDomain();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool isAssignableFrom(Class arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool isInstance(Object arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()I`
     */
    int getModifiers();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isInterface();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isHidden();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getSuperclass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object cast(Object arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class componentType();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getClassLoader0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getComponentType();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isAnnotation();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isEnum();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isRecord();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getClassLoader();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.SecurityManager;ILjava.lang.Class;Z)V`
     */
    void checkMemberAccess(SecurityManager arg0, int arg1, Class arg2, bool arg3);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljdk.internal.reflect.ReflectionFactory;`
     */
    static ReflectionFactory getReflectionFactory();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `([Ljava.lang.Class;I)Ljava.lang.reflect.Constructor;`
     * Throws: `java.lang.NoSuchMethodException`
     */
    Constructor getConstructor0(Class_interface arg0, int arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.InstantiationException, java.lang.IllegalAccessException`
     */
    Object newInstance();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String initClassName();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Lsun.reflect.generics.repository.ClassRepository;`
     */
    ClassRepository getGenericInfo();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class elementType();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class$ReflectionData;`
     */
    Class_ReflectionData reflectionData();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class$EnclosingMethodInfo;`
     */
    Class_EnclosingMethodInfo getEnclosingMethodInfo();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Lsun.reflect.generics.factory.GenericsFactory;`
     */
    GenericsFactory getFactory();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.reflect.Type;)Ljava.lang.Class;`
     */
    static Class toClass(Type arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     * Throws: `java.lang.SecurityException`
     */
    Class getEnclosingClass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `([Ljava.lang.Object;[Ljava.lang.Object;)Z`
     */
    static bool arrayContentsEq(Object_interface arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getDeclaringClass0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getSimpleName0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getSimpleName();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getSimpleBinaryName();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getCanonicalName0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getCanonicalName();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isLocalOrAnonymousClass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getSimpleBinaryName0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isTopLevelClass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool hasEnclosingMethodInfo();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.lang.reflect.Field;`
     */
    Field getField0(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;`
     */
    Method getMethod0(String arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.String;`
     */
    String methodToString(String arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `([Ljava.lang.reflect.Field;Ljava.lang.String;)Ljava.lang.reflect.Field;`
     */
    static Field searchFields(Field_interface arg0, String arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `([Ljava.lang.reflect.Method;Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;`
     */
    static Method searchMethods(Method_interface arg0, String arg1, Class_interface arg2);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String resolveName(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;Ljava.lang.Class;)Z`
     */
    bool isOpenToCaller(String arg0, Class arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.io.InputStream;`
     */
    InputStream getResourceAsStream(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.net.URL;`
     */
    URL getResource(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.security.ProtectionDomain;`
     */
    ProtectionDomain protectionDomain();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.security.ProtectionDomain;`
     */
    ProtectionDomain getProtectionDomain0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getPackageName();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.ref.SoftReference;I)Ljava.lang.Class$ReflectionData;`
     */
    Class_ReflectionData newReflectionData(SoftReference arg0, int arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String getGenericSignature0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.util.Collection;[Ljava.lang.reflect.Field;)V`
     */
    static void addAll(Collection arg0, Field_interface arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Class;Z)Ljava.lang.PublicMethods$MethodList;`
     */
    PublicMethods_MethodList getMethodsRecursive(String arg0, Class_interface arg1, bool arg2);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    static bool desiredAssertionStatus0(Class arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool desiredAssertionStatus();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isRecord0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.SecurityException`
     */
    Method getMethod(String arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.util.Map;`
     */
    Map enumConstantDirectory();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.String;`
     */
    String cannotCastMsg(Object arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class$AnnotationData;`
     */
    Class_AnnotationData annotationData();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(I)Ljava.lang.Class$AnnotationData;`
     */
    Class_AnnotationData createAnnotationData(int arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljdk.internal.reflect.ConstantPool;`
     */
    ConstantPool getConstantPool();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Lsun.reflect.annotation.AnnotationType;Lsun.reflect.annotation.AnnotationType;)Z`
     */
    bool casAnnotationType(AnnotationType arg0, AnnotationType arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getNestHost0();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getNestHost();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.SecurityManager;Ljava.lang.ClassLoader;[Ljava.lang.Class;)V`
     */
    static void checkPackageAccessForPermittedSubclasses(SecurityManager arg0, ClassLoader arg1, Class_interface arg2);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     */
    Class arrayType();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool isDirectSubType(Class arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()V`
     */
    static void registerNatives();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.String;`
     */
    String toGenericString();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.reflect.TypeVariable;)Ljava.lang.String;`
     */
    static String typeVarBounds(TypeVariable arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isSynthetic();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getClassData();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type getGenericSuperclass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Package;`
     */
    Package getPackage();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `([Ljava.lang.Object;)V`
     */
    void setSigners(Object_interface arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.reflect.Method;`
     * Throws: `java.lang.SecurityException`
     */
    Method getEnclosingMethod();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.reflect.Constructor;`
     * Throws: `java.lang.SecurityException`
     */
    Constructor getEnclosingConstructor();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.Class;`
     * Throws: `java.lang.SecurityException`
     */
    Class getDeclaringClass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isAnonymousClass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isLocalClass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isMemberClass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.lang.reflect.Field;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.SecurityException`
     */
    Field getField(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `([Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.SecurityException`
     */
    Constructor getConstructor(Class_interface arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.lang.reflect.Field;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.SecurityException`
     */
    Field getDeclaredField(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.SecurityException`
     */
    Method getDeclaredMethod(String arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Class;)Ljava.util.List;`
     */
    List getDeclaredPublicMethods(String arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `([Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.SecurityException`
     */
    Constructor getDeclaredConstructor(Class_interface arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     */
    static Class getPrimitiveClass(String arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Class;`
     */
    Class asSubclass(Class arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Lsun.reflect.annotation.AnnotationType;`
     */
    AnnotationType getAnnotationType();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.util.Map;`
     */
    Map getDeclaredAnnotationMap();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedSuperclass();

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool isNestmateOf(Class arg0);

    /**
     * Declaring class: `java.lang.Class`
     * Signature: `()Z`
     */
    bool isSealed();
};


/**
 * Classpath: `java.lang.SecurityManager`
 * Package name: `java.lang`
 */
class SecurityManager : public Object {
protected:
    const inline static char *className = "java.lang.SecurityManager";
public:
    STATICINITIALIZE;

    SecurityManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkPackageAccess(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.security.Permission;Ljava.lang.Object;)V`
     */
    void checkPermission(Permission arg0, Object arg1);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.security.Permission;)V`
     */
    void checkPermission(Permission arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()V`
     */
    void checkCreateClassLoader();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()V`
     */
    void checkPropertiesAccess();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkPropertyAccess(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()Ljava.lang.ThreadGroup;`
     */
    ThreadGroup getThreadGroup();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.module.ModuleDescriptor;)Ljava.util.Set;`
     */
    static Set nonExportedPkgs(ModuleDescriptor arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()Ljava.lang.ThreadGroup;`
     */
    static ThreadGroup getRootGroup();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.ModuleLayer;)V`
     */
    static void addNonExportedPackages(ModuleLayer arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getSecurityContext();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.Thread;)V`
     */
    void checkAccess(Thread arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.ThreadGroup;)V`
     */
    void checkAccess(ThreadGroup arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(I)V`
     */
    void checkExit(int arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkExec(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkLink(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.io.FileDescriptor;)V`
     */
    void checkRead(FileDescriptor arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkRead(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    void checkRead(String arg0, Object arg1);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.io.FileDescriptor;)V`
     */
    void checkWrite(FileDescriptor arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkWrite(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkDelete(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;ILjava.lang.Object;)V`
     */
    void checkConnect(String arg0, int arg1, Object arg2);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void checkConnect(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(I)V`
     */
    void checkListen(int arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void checkAccept(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.net.InetAddress;)V`
     */
    void checkMulticast(InetAddress arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.net.InetAddress;B)V`
     */
    void checkMulticast(InetAddress arg0, byte arg1);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()V`
     */
    void checkPrintJobAccess();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()V`
     */
    static void invalidatePackageAccessCache();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkPackageDefinition(String arg0);

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `()V`
     */
    void checkSetFactory();

    /**
     * Declaring class: `java.lang.SecurityManager`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkSecurityAccess(String arg0);
};


/**
 * Classpath: `java.security.Permission`
 * Package name: `java.security`
 */
class Permission : public Object {
protected:
    const inline static char *className = "java.security.Permission";
public:
    STATICINITIALIZE;

    Permission(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.security.Permission`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.security.Permission`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.security.Permission`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.security.Permission`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.security.Permission`
     * Signature: `(Ljava.security.Permission;)Z`
     */
    bool implies(Permission arg0);

    /**
     * Declaring class: `java.security.Permission`
     * Signature: `()Ljava.lang.String;`
     */
    String getActions();

    /**
     * Declaring class: `java.security.Permission`
     * Signature: `()Ljava.security.PermissionCollection;`
     */
    PermissionCollection newPermissionCollection();
};


/**
 * Classpath: `java.security.PermissionCollection`
 * Package name: `java.security`
 */
class PermissionCollection : public Object {
protected:
    const inline static char *className = "java.security.PermissionCollection";
public:
    STATICINITIALIZE;

    PermissionCollection(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.security.PermissionCollection`
     * Signature: `(Ljava.security.Permission;)V`
     */
    void add(Permission arg0);

    /**
     * Declaring class: `java.security.PermissionCollection`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.security.PermissionCollection`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration elements();

    /**
     * Declaring class: `java.security.PermissionCollection`
     * Signature: `()V`
     */
    void setReadOnly();

    /**
     * Declaring class: `java.security.PermissionCollection`
     * Signature: `(Ljava.security.Permission;)Z`
     */
    bool implies(Permission arg0);

    /**
     * Declaring class: `java.security.PermissionCollection`
     * Signature: `()Z`
     */
    bool isReadOnly();

    /**
     * Declaring class: `java.security.PermissionCollection`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream elementsAsStream();
};


/**
 * Classpath: `java.util.Enumeration`
 * Package name: `java.util`
 */
class Enumeration : public JavaObject {
protected:
    const inline static char *className = "java.util.Enumeration";
public:
    STATICINITIALIZE;

    Enumeration(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.stream.Stream`
 * Package name: `java.util.stream`
 */
class Stream : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.Stream";
public:
    STATICINITIALIZE;

    Stream(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.ThreadGroup`
 * Package name: `java.lang`
 */
class ThreadGroup : public Object {
protected:
    const inline static char *className = "java.lang.ThreadGroup";
public:
    STATICINITIALIZE;

    ThreadGroup(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.ThreadGroup;)V`
     */
    void add(ThreadGroup arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.Thread;)V`
     */
    void add(Thread arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.ThreadGroup;)V`
     */
    void remove(ThreadGroup arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.Thread;)V`
     */
    void remove(Thread arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void list();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.io.PrintStream;I)V`
     */
    void list(PrintStream arg0, int arg1);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()Ljava.lang.ThreadGroup;`
     */
    ThreadGroup getParent();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void checkAccess();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Z)V`
     */
    void setDaemon(bool arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void addUnstarted();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()Z`
     */
    bool isDaemon();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.Thread;)V`
     */
    void threadStartFailed(Thread arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.Thread;)V`
     */
    void threadTerminated(Thread arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void resume();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void interrupt();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()I`
     */
    int getMaxPriority();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()I`
     */
    int activeCount();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `([Ljava.lang.ThreadGroup;Z)I`
     */
    int enumerate(ThreadGroup_interface arg0, bool arg1);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `([Ljava.lang.Thread;IZ)I`
     */
    int enumerate(Thread_interface arg0, int arg1, bool arg2);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `([Ljava.lang.ThreadGroup;)I`
     */
    int enumerate(ThreadGroup_interface arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `([Ljava.lang.Thread;)I`
     */
    int enumerate(Thread_interface arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `([Ljava.lang.Thread;Z)I`
     */
    int enumerate(Thread_interface arg0, bool arg1);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `([Ljava.lang.ThreadGroup;IZ)I`
     */
    int enumerate(ThreadGroup_interface arg0, int arg1, bool arg2);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void stop();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void suspend();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.ThreadGroup;)Ljava.lang.Void;`
     */
    static Void checkParentAccess(ThreadGroup arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(I)V`
     */
    void setMaxPriority(int arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()I`
     */
    int activeGroupCount();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Z)Z`
     */
    bool stopOrSuspend(bool arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()V`
     */
    void destroy();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `()Z`
     */
    bool isDestroyed();

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Ljava.lang.ThreadGroup;)Z`
     */
    bool parentOf(ThreadGroup arg0);

    /**
     * Declaring class: `java.lang.ThreadGroup`
     * Signature: `(Z)Z`
     */
    bool allowThreadSuspension(bool arg0);
};


/**
 * Classpath: `java.lang.Thread`
 * Package name: `java.lang`
 */
class Thread : public Object {
protected:
    const inline static char *className = "java.lang.Thread";
public:
    STATICINITIALIZE;

    Thread(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void exit();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.Throwable;)V`
     */
    void dispatchUncaughtException(Throwable arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.CloneNotSupportedException`
     */
    Object clone();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.Thread;`
     */
    static Thread currentThread();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    static void onSpinWait();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     * Throws: `java.lang.InterruptedException`
     */
    void join();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(JI)V`
     * Throws: `java.lang.InterruptedException`
     */
    void join(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(J)V`
     * Throws: `java.lang.InterruptedException`
     */
    void join(long arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void start();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    static void registerNatives();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.ThreadGroup;`
     */
    ThreadGroup getThreadGroup();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.ClassLoader;)V`
     */
    void setContextClassLoader(ClassLoader arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    static bool holdsLock(Object arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void checkAccess();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    static void dumpStack();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(I)V`
     */
    void setPriority(int arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Z)V`
     */
    void setDaemon(bool arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(J)V`
     * Throws: `java.lang.InterruptedException`
     */
    static void sleep(long arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(JI)V`
     * Throws: `java.lang.InterruptedException`
     */
    static void sleep(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    static bool isCCLOverridden(Class arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Z`
     */
    bool isDaemon();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()I`
     */
    int getPriority();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getContextClassLoader();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()J`
     */
    static long nextThreadID();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()I`
     */
    static int nextThreadNum();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void start0();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void resume();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void stop0(Object arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Z`
     */
    static bool interrupted();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void interrupt0();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void interrupt();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    static void clearInterruptEvent();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void suspend0();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void resume0();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(I)V`
     */
    void setPriority0(int arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setNativeName(String arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()I`
     */
    static int activeCount();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `([Ljava.lang.Thread;)I`
     */
    static int enumerate(Thread_interface arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Z`
     */
    bool isAlive();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.ref.ReferenceQueue;Ljava.util.concurrent.ConcurrentMap;)V`
     */
    static void processQueue(ReferenceQueue arg0, ConcurrentMap arg1);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    static bool auditSubclass(Class arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.Thread$UncaughtExceptionHandler;)V`
     */
    static void setDefaultUncaughtExceptionHandler(Thread_UncaughtExceptionHandler arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.Thread$UncaughtExceptionHandler;`
     */
    Thread_UncaughtExceptionHandler getUncaughtExceptionHandler();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Lsun.nio.ch.Interruptible;)V`
     */
    static void blockedOn(Interruptible arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    static void yield();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void stop();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Z`
     */
    bool isInterrupted();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()V`
     */
    void suspend();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setName(String arg0);

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()I`
     */
    int countStackFrames();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.util.Map;`
     */
    static Map getAllStackTraces();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()J`
     */
    long getId();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.Thread$State;`
     */
    Thread_State getState();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `()Ljava.lang.Thread$UncaughtExceptionHandler;`
     */
    static Thread_UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();

    /**
     * Declaring class: `java.lang.Thread`
     * Signature: `(Ljava.lang.Thread$UncaughtExceptionHandler;)V`
     */
    void setUncaughtExceptionHandler(Thread_UncaughtExceptionHandler arg0);
};


/**
 * Classpath: `java.lang.Throwable`
 * Package name: `java.lang`
 */
class Throwable : public Object {
protected:
    const inline static char *className = "java.lang.Throwable";
public:
    STATICINITIALIZE;

    Throwable(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `()V`
     */
    void printStackTrace();

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.io.PrintStream;)V`
     */
    void printStackTrace(PrintStream arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.io.PrintWriter;)V`
     */
    void printStackTrace(PrintWriter arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.lang.Throwable$PrintStreamOrWriter;)V`
     */
    void printStackTrace(Throwable_PrintStreamOrWriter arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(I)Ljava.lang.Throwable;`
     */
    Throwable fillInStackTrace(int arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `()Ljava.lang.Throwable;`
     */
    Throwable fillInStackTrace();

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `()Ljava.lang.Throwable;`
     */
    Throwable getCause();

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.lang.Throwable;)Ljava.lang.Throwable;`
     */
    Throwable initCause(Throwable arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `()Ljava.lang.String;`
     */
    String getMessage();

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `()Ljava.lang.String;`
     */
    String getLocalizedMessage();

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.lang.Throwable$PrintStreamOrWriter;[Ljava.lang.StackTraceElement;Ljava.lang.String;Ljava.lang.String;Ljava.util.Set;)V`
     */
    void printEnclosedStackTrace(Throwable_PrintStreamOrWriter arg0, StackTraceElement_interface arg1, String arg2, String arg3, Set arg4);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.util.List;)I`
     * Throws: `java.io.IOException`
     */
    int validateSuppressedExceptionsList(List arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.lang.Throwable;)V`
     */
    void setCause(Throwable arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `([Ljava.lang.StackTraceElement;)V`
     */
    void setStackTrace(StackTraceElement_interface arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.lang.Throwable`
     * Signature: `(Ljava.lang.Throwable;)V`
     */
    void addSuppressed(Throwable arg0);
};


/**
 * Classpath: `[C`
 */
class arr_C : public Object {
protected:
    const inline static char *className = "[C";
public:
    STATICINITIALIZE;

    arr_C(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.CharSequence`
 * Package name: `java.lang`
 */
class CharSequence : public JavaObject {
protected:
    const inline static char *className = "java.lang.CharSequence";
public:
    STATICINITIALIZE;

    CharSequence(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Ljava.lang.Object;`
 */
class Object_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Object;";
public:
    STATICINITIALIZE;

    Object_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.util.Locale`
 * Package name: `java.util`
 */
class Locale : public Object {
protected:
    const inline static char *className = "java.util.Locale";
public:
    STATICINITIALIZE;

    Locale(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale$Category;)Ljava.util.Locale;`
     */
    static Locale getDefault(Locale_Category arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Locale;`
     */
    static Locale getDefault();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.List;Ljava.util.Collection;)Ljava.util.Locale;`
     */
    static Locale lookup(List arg0, Collection arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.List;Ljava.util.Collection;)Ljava.util.List;`
     */
    static List filter(List arg0, Collection arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.List;Ljava.util.Collection;Ljava.util.Locale$FilteringMode;)Ljava.util.List;`
     */
    static List filter(List arg0, Collection arg1, Locale_FilteringMode arg2);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.util.Locale;`
     */
    static Locale getInstance(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Lsun.util.locale.LocaleExtensions;)Ljava.util.Locale;`
     */
    static Locale getInstance(String arg0, String arg1, String arg2, String arg3, LocaleExtensions arg4);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Lsun.util.locale.BaseLocale;Lsun.util.locale.LocaleExtensions;)Ljava.util.Locale;`
     */
    static Locale getInstance(BaseLocale arg0, LocaleExtensions arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.ObjectStreamException`
     */
    Object readResolve();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getLanguage();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayName();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayName(Locale arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String convertOldISOCodes(String arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Lsun.util.locale.LocaleExtensions;`
     */
    static LocaleExtensions getCompatibilityExtensions(String arg0, String arg1, String arg2, String arg3);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Locale;`
     */
    static Locale getDisplayLocale();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Locale;`
     */
    static Locale getFormatLocale();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Locale;`
     */
    static Locale initDefault();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale$Category;)Ljava.util.Locale;`
     */
    static Locale initDefault(Locale_Category arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;)Ljava.util.Optional;`
     */
    static Optional getDefaultExtensions(String arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getScript();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getCountry();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getVariant();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Lsun.util.locale.LocaleExtensions;`
     */
    LocaleExtensions getLocaleExtensions();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale;)V`
     */
    static void setDefault(Locale arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale$Category;Ljava.util.Locale;)V`
     */
    static void setDefault(Locale_Category arg0, Locale arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Z`
     */
    bool hasExtensions();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Set;`
     */
    Set getUnicodeLocaleAttributes();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isUnicodeExtensionKey(String arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getUnicodeLocaleType(String arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Set;`
     */
    Set getUnicodeLocaleKeys();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Lsun.util.locale.BaseLocale;`
     */
    BaseLocale getBaseLocale();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    static String getISO3Code(String arg0, String arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayLanguage(Locale arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayLanguage();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.util.Locale;I)Ljava.lang.String;`
     */
    String getDisplayString(String arg0, String arg1, Locale arg2, int arg3);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayScript();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayScript(Locale arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayCountry();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayCountry(Locale arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayVariant(Locale arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayVariant();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `([Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    static String formatList(String_interface arg0, String arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.List;Ljava.util.Collection;Ljava.util.Locale$FilteringMode;)Ljava.util.List;`
     */
    static List filterTags(List arg0, Collection arg1, Locale_FilteringMode arg2);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.List;Ljava.util.Collection;)Ljava.util.List;`
     */
    static List filterTags(List arg0, Collection arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.List;Ljava.util.Collection;)Ljava.lang.String;`
     */
    static String lookupTag(List arg0, Collection arg1);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;Lsun.util.locale.provider.LocaleResources;Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayKeyTypeExtensionString(String arg0, LocaleResources arg1, Locale arg2);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(B)Ljava.util.Locale;`
     */
    static Locale createConstant(byte arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.util.Locale$IsoCountryCode;)Ljava.util.Set;`
     */
    static Set getISOCountries(Locale_IsoCountryCode arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale stripExtensions();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(C)Ljava.lang.String;`
     */
    String getExtension(char arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.util.Set;`
     */
    Set getExtensionKeys();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     */
    String toLanguageTag();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `(Ljava.lang.String;)Ljava.util.Locale;`
     */
    static Locale forLanguageTag(String arg0);

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     * Throws: `java.util.MissingResourceException`
     */
    String getISO3Language();

    /**
     * Declaring class: `java.util.Locale`
     * Signature: `()Ljava.lang.String;`
     * Throws: `java.util.MissingResourceException`
     */
    String getISO3Country();
};


/**
 * Classpath: `java.lang.Enum`
 * Package name: `java.lang`
 */
class Enum : public Object {
protected:
    const inline static char *className = "java.lang.Enum";
public:
    STATICINITIALIZE;

    Enum(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()Ljava.lang.String;`
     */
    String name();

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()V`
     */
    void finalize();

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.CloneNotSupportedException`
     */
    Object clone();

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Ljava.lang.Enum;`
     */
    static Enum valueOf(Class arg0, String arg1);

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getDeclaringClass();

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()I`
     */
    int ordinal();

    /**
     * Declaring class: `java.lang.Enum`
     * Signature: `()V`
     * Throws: `java.io.ObjectStreamException`
     */
    void readObjectNoData();
};


/**
 * Classpath: `java.io.ObjectStreamClass`
 * Package name: `java.io`
 */
class ObjectStreamClass : public Object {
protected:
    const inline static char *className = "java.io.ObjectStreamClass";
public:
    STATICINITIALIZE;

    ObjectStreamClass(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;Z)Ljava.io.ObjectStreamClass;`
     */
    static ObjectStreamClass lookup(Class arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Ljava.io.ObjectStreamClass;`
     */
    static ObjectStreamClass lookup(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool isEnum();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool isRecord();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.InstantiationException, java.lang.reflect.InvocationTargetException, java.lang.UnsupportedOperationException`
     */
    Object newInstance();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.String;)Ljava.io.ObjectStreamField;`
     */
    ObjectStreamField getField(String arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.String;Ljava.lang.Class;)Ljava.io.ObjectStreamField;`
     */
    ObjectStreamField getField(String arg0, Class arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.ref.ReferenceQueue;Ljava.util.concurrent.ConcurrentMap;)V`
     */
    static void processQueue(ReferenceQueue arg0, ConcurrentMap arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()V`
     * Throws: `java.io.InvalidClassException`
     */
    void checkInitialized();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Z`
     */
    static bool packageEquals(Class arg0, Class arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    static bool hasStaticInitializer(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()V`
     */
    void requireInitialized();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()J`
     */
    long getSerialVersionUID();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `([Ljava.io.ObjectStreamField;Ljava.io.ObjectStreamClass;)Ljava.io.ObjectStreamClass$FieldReflector;`
     * Throws: `java.io.InvalidClassException`
     */
    static ObjectStreamClass_FieldReflector getReflector(ObjectStreamField_interface arg0, ObjectStreamClass arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.security.ProtectionDomain;`
     */
    ProtectionDomain noPermissionsDomain();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Z`
     */
    static bool classNamesEqual(String arg0, String arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()V`
     * Throws: `java.io.InvalidClassException`
     */
    void computeFieldOffsets();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Throwable;)V`
     * Throws: `java.io.IOException`
     */
    static void throwMiscException(Throwable arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Ljava.io.ObjectStreamClass;`
     * Throws: `java.io.InvalidClassException`
     */
    ObjectStreamClass getVariantFor(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;[B)V`
     */
    void setPrimFieldValues(Object arg0, arr_B arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;)V`
     */
    void setObjFieldValues(Object arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()V`
     */
    static void initNative();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Ljava.io.ObjectStreamClass;`
     */
    static ObjectStreamClass lookupAny(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.io.ObjectStreamClass;`
     */
    ObjectStreamClass getLocalDesc();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;)V`
     */
    void checkObjFieldValueTypes(Object arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     */
    static Constructor getExternalizableConstructor(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     */
    static Constructor getSerializableConstructor(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle canonicalRecordCtr(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle getRecordConstructor();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;[Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.reflect.Method;`
     */
    static Method getInheritableMethod(Class arg0, String arg1, Class_interface arg2, Class arg3);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;[Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.reflect.Method;`
     */
    static Method getPrivateMethod(Class arg0, String arg1, Class_interface arg2, Class arg3);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `([Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.String;`
     */
    static String getMethodSignature(Class_interface arg0, Class arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Long;`
     */
    static Long getDeclaredSUID(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;)J`
     */
    static long computeDefaultSUID(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool isSerializable();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool hasWriteObjectData();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readNonProxy(ObjectInputStream arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.lang.Class;`
     */
    Class forClass();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.lang.ClassNotFoundException;`
     */
    ClassNotFoundException getResolveException();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Class;Ljava.lang.ClassNotFoundException;Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.InvalidClassException`
     */
    void initProxy(Class arg0, ClassNotFoundException arg1, ObjectStreamClass arg2);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.io.ObjectStreamClass;Ljava.lang.Class;Ljava.lang.ClassNotFoundException;Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.InvalidClassException`
     */
    void initNonProxy(ObjectStreamClass arg0, Class arg1, ClassNotFoundException arg2, ObjectStreamClass arg3);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()V`
     * Throws: `java.io.InvalidClassException`
     */
    void checkDeserialize();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool isInstantiable();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool isExternalizable();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool hasReadResolveMethod();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.io.IOException, java.lang.UnsupportedOperationException`
     */
    Object invokeReadResolve(Object arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool hasBlockExternalData();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool hasReadObjectMethod();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool hasReadObjectNoDataMethod();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.lang.UnsupportedOperationException`
     */
    void invokeReadObject(Object arg0, ObjectInputStream arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;)V`
     * Throws: `java.io.IOException, java.lang.UnsupportedOperationException`
     */
    void invokeReadObjectNoData(Object arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeNonProxy(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool hasWriteReplaceMethod();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.io.IOException, java.lang.UnsupportedOperationException`
     */
    Object invokeWriteReplace(Object arg0);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool isProxy();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Ljava.io.ObjectStreamClass;`
     */
    ObjectStreamClass getSuperDesc();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()V`
     * Throws: `java.io.InvalidClassException`
     */
    void checkSerialize();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()Z`
     */
    bool hasWriteObjectMethod();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException, java.lang.UnsupportedOperationException`
     */
    void invokeWriteObject(Object arg0, ObjectOutputStream arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()V`
     * Throws: `java.io.InvalidClassException`
     */
    void checkDefaultSerialize();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()I`
     */
    int getPrimDataSize();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;[B)V`
     */
    void getPrimFieldValues(Object arg0, arr_B arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `()I`
     */
    int getNumObjFields();

    /**
     * Declaring class: `java.io.ObjectStreamClass`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;)V`
     */
    void getObjFieldValues(Object arg0, Object_interface arg1);
};


/**
 * Classpath: `java.io.ObjectStreamField`
 * Package name: `java.io`
 */
class ObjectStreamField : public Object {
protected:
    const inline static char *className = "java.io.ObjectStreamField";
public:
    STATICINITIALIZE;

    ObjectStreamField(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Z`
     */
    bool isPrimitive();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Ljava.lang.reflect.Field;`
     */
    Field getField();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getType();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Ljava.lang.String;`
     */
    String getSignature();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.String;`
     */
    static String getPrimitiveSignature(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `(Ljava.lang.StringBuilder;Ljava.lang.Class;)Ljava.lang.StringBuilder;`
     */
    static StringBuilder appendClassSignature(StringBuilder arg0, Class arg1);

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.String;`
     */
    static String getClassSignature(Class arg0);

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()C`
     */
    char getTypeCode();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Ljava.lang.String;`
     */
    String getTypeString();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()I`
     */
    int getOffset();

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `(I)V`
     */
    void setOffset(int arg0);

    /**
     * Declaring class: `java.io.ObjectStreamField`
     * Signature: `()Z`
     */
    bool isUnshared();
};


/**
 * Classpath: `sun.reflect.generics.factory.GenericsFactory`
 * Package name: `sun.reflect.generics.factory`
 */
class GenericsFactory : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.factory.GenericsFactory";
public:
    STATICINITIALIZE;

    GenericsFactory(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.reflect.Type`
 * Package name: `java.lang.reflect`
 */
class Type : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.Type";
public:
    STATICINITIALIZE;

    Type(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.reflect.generics.tree.TypeSignature`
 * Package name: `sun.reflect.generics.tree`
 */
class TypeSignature : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.tree.TypeSignature";
public:
    STATICINITIALIZE;

    TypeSignature(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.reflect.generics.repository.AbstractRepository`
 * Package name: `sun.reflect.generics.repository`
 */
class AbstractRepository : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.repository.AbstractRepository";
public:
    STATICINITIALIZE;

    AbstractRepository(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.reflect.generics.repository.AbstractRepository`
     * Signature: `()Lsun.reflect.generics.factory.GenericsFactory;`
     */
    GenericsFactory getFactory();

    /**
     * Declaring class: `sun.reflect.generics.repository.AbstractRepository`
     * Signature: `(Ljava.lang.String;)Lsun.reflect.generics.tree.Tree;`
     */
    Tree parse(String arg0);

    /**
     * Declaring class: `sun.reflect.generics.repository.AbstractRepository`
     * Signature: `()Lsun.reflect.generics.visitor.Reifier;`
     */
    Reifier getReifier();

    /**
     * Declaring class: `sun.reflect.generics.repository.AbstractRepository`
     * Signature: `()Lsun.reflect.generics.tree.Tree;`
     */
    Tree getTree();
};


/**
 * Classpath: `sun.reflect.generics.tree.Tree`
 * Package name: `sun.reflect.generics.tree`
 */
class Tree : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.tree.Tree";
public:
    STATICINITIALIZE;

    Tree(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.reflect.generics.visitor.Reifier`
 * Package name: `sun.reflect.generics.visitor`
 */
class Reifier : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.visitor.Reifier";
public:
    STATICINITIALIZE;

    Reifier(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.reflect.generics.visitor.Reifier`
     * Signature: `()Lsun.reflect.generics.factory.GenericsFactory;`
     */
    GenericsFactory getFactory();

    /**
     * Declaring class: `sun.reflect.generics.visitor.Reifier`
     * Signature: `(Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.visitor.Reifier;`
     */
    static Reifier make(GenericsFactory arg0);

    /**
     * Declaring class: `sun.reflect.generics.visitor.Reifier`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type getResult();
};


/**
 * Classpath: `java.util.Map`
 * Package name: `java.util`
 */
class Map : public JavaObject {
protected:
    const inline static char *className = "java.util.Map";
public:
    STATICINITIALIZE;

    Map(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `jdk.internal.reflect.FieldAccessor`
 * Package name: `jdk.internal.reflect`
 */
class FieldAccessor : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.reflect.FieldAccessor";
public:
    STATICINITIALIZE;

    FieldAccessor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.reflect.AnnotatedType`
 * Package name: `java.lang.reflect`
 */
class AnnotatedType : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.AnnotatedType";
public:
    STATICINITIALIZE;

    AnnotatedType(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.reflect.AccessibleObject`
 * Package name: `java.lang.reflect`
 */
class AccessibleObject : public Object {
protected:
    const inline static char *className = "java.lang.reflect.AccessibleObject";
public:
    STATICINITIALIZE;

    AccessibleObject(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `()V`
     */
    static void checkPermission();

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Z)V`
     */
    void setAccessible(bool arg0);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `([Ljava.lang.reflect.AccessibleObject;Z)V`
     */
    static void setAccessible(AccessibleObject_interface arg0, bool arg1);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;Ljava.lang.Class;I)V`
     * Throws: `java.lang.IllegalAccessException`
     */
    void checkAccess(Class arg0, Class arg1, Class arg2, int arg3);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)V`
     */
    void checkCanSetAccessible(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void checkCanSetAccessible(Class arg0);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;Z)Z`
     */
    bool checkCanSetAccessible(Class arg0, Class arg1, bool arg2);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Z)Z`
     */
    bool setAccessible0(bool arg0);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Z`
     */
    bool isSubclassOf(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `()Z`
     */
    static bool printStackTraceWhenAccessFails();

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;Ljava.lang.Class;I)Z`
     */
    bool verifyAccess(Class arg0, Class arg1, Class arg2, int arg3);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool isAccessChecked(Class arg0);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Z`
     */
    bool isAccessChecked(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;Ljava.lang.Class;I)Z`
     */
    bool slowVerifyAccess(Class arg0, Class arg1, Class arg2, int arg3);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `()Z`
     */
    bool trySetAccessible();

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `()Ljava.lang.String;`
     */
    String toShortString();

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `()Z`
     */
    bool isAccessible();

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool canAccess(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.AccessibleObject`
     * Signature: `()Ljava.lang.reflect.AccessibleObject;`
     */
    AccessibleObject getRoot();
};


/**
 * Classpath: `[Ljava.lang.reflect.AccessibleObject;`
 */
class AccessibleObject_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.AccessibleObject;";
public:
    STATICINITIALIZE;

    AccessibleObject_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.AbstractStringBuilder`
 * Package name: `java.lang`
 */
class AbstractStringBuilder : public Object {
protected:
    const inline static char *className = "java.lang.AbstractStringBuilder";
public:
    STATICINITIALIZE;

    AbstractStringBuilder(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.AbstractStringBuilder;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(AbstractStringBuilder arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(CharSequence arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `([C)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(arr_C arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(Object arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.StringBuffer;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(StringBuffer arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(String arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(J)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(long arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(F)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(float arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(D)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(double arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(C)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(char arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Z)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(bool arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `([CII)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder append(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `()V`
     */
    void inflate();

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(II[CI)V`
     */
    void getChars(int arg0, int arg1, arr_C arg2, int arg3);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.AbstractStringBuilder;)I`
     */
    int compareTo(AbstractStringBuilder arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.String;)I`
     */
    int indexOf(String arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int indexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ILjava.lang.String;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, String arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ILjava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, CharSequence arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I[C)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, arr_C arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ILjava.lang.Object;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, Object arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I[CII)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(IZ)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, bool arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(IF)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, float arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ID)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, double arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(IJ)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, long arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ILjava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, CharSequence arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(II)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(IC)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder insert(int arg0, char arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `()Z`
     */
    bool isLatin1();

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)I`
     */
    int codePointAt(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)I`
     */
    int codePointBefore(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(II)I`
     */
    int codePointCount(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(II)I`
     */
    int offsetByCodePoints(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `([BIB)V`
     */
    void getBytes(arr_B arg0, int arg1, byte arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `()B`
     */
    byte getCoder();

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.String;)I`
     */
    int lastIndexOf(String arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int lastIndexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)Ljava.lang.String;`
     */
    String substring(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(II)Ljava.lang.String;`
     */
    String substring(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(IILjava.lang.String;)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder replace(int arg0, int arg1, String arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(II)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder delete_(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)V`
     */
    void setLength(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)I`
     */
    int newCapacity(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `()I`
     */
    int capacity();

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)V`
     */
    void ensureCapacity(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `()V`
     */
    void trimToSize();

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(IC)V`
     */
    void setCharAt(int arg0, char arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder appendCodePoint(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder deleteCharAt(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `()Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder reverse();

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `([CII)V`
     */
    void initBytes(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I)V`
     */
    void ensureCapacityInternal(int arg0);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(III)V`
     */
    static void checkRangeSIOOBE(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(III)V`
     */
    static void checkRange(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `()Ljava.lang.AbstractStringBuilder;`
     */
    AbstractStringBuilder appendNull();

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ILjava.lang.String;)V`
     */
    void putStringAt(int arg0, String arg1);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ILjava.lang.String;II)V`
     */
    void putStringAt(int arg0, String arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(I[CII)V`
     */
    void putCharsAt(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(ILjava.lang.CharSequence;II)V`
     */
    void putCharsAt(int arg0, CharSequence arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.CharSequence;II)V`
     */
    void appendChars(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void appendChars(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `([CII)V`
     */
    void appendChars(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.AbstractStringBuilder`
     * Signature: `(II)V`
     */
    void shift(int arg0, int arg1);
};


/**
 * Classpath: `[B`
 */
class arr_B : public Object {
protected:
    const inline static char *className = "[B";
public:
    STATICINITIALIZE;

    arr_B(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.io.ObjectOutputStream$PutField`
 * Enclosing class: `java.io.ObjectOutputStream`
 * Package name: `java.io`
 */
class ObjectOutputStream_PutField : public Object {
protected:
    const inline static char *className = "java.io.ObjectOutputStream$PutField";
public:
    STATICINITIALIZE;

    ObjectOutputStream_PutField(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;F)V`
     */
    void put(String arg0, float arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;J)V`
     */
    void put(String arg0, long arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void put(String arg0, int arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;D)V`
     */
    void put(String arg0, double arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    void put(String arg0, Object arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    void put(String arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;B)V`
     */
    void put(String arg0, byte arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;C)V`
     */
    void put(String arg0, char arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.lang.String;S)V`
     */
    void put(String arg0, short arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream$PutField`
     * Signature: `(Ljava.io.ObjectOutput;)V`
     * Throws: `java.io.IOException`
     */
    void write(ObjectOutput arg0);
};


/**
 * Classpath: `java.io.ObjectOutput`
 * Package name: `java.io`
 */
class ObjectOutput : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectOutput";
public:
    STATICINITIALIZE;

    ObjectOutput(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.Boolean`
 * Package name: `java.lang`
 */
class Boolean : public Object {
protected:
    const inline static char *className = "java.lang.Boolean";
public:
    STATICINITIALIZE;

    Boolean(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(Z)Ljava.lang.String;`
     */
    static String toString(bool arg0);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(Z)I`
     */
    static int hashCode(bool arg0);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool getBoolean(String arg0);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(ZZ)I`
     */
    static int compare(bool arg0, bool arg1);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `()Z`
     */
    bool booleanValue();

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Boolean;`
     */
    static Boolean valueOf(String arg0);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(Z)Ljava.lang.Boolean;`
     */
    static Boolean valueOf(bool arg0);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool parseBoolean(String arg0);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(ZZ)Z`
     */
    static bool logicalAnd(bool arg0, bool arg1);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(ZZ)Z`
     */
    static bool logicalOr(bool arg0, bool arg1);

    /**
     * Declaring class: `java.lang.Boolean`
     * Signature: `(ZZ)Z`
     */
    static bool logicalXor(bool arg0, bool arg1);
};


/**
 * Classpath: `java.lang.Exception`
 * Package name: `java.lang`
 */
class Exception : public Throwable {
protected:
    const inline static char *className = "java.lang.Exception";
public:
    STATICINITIALIZE;

    Exception(jobject object) : Throwable(object) {}

};


/**
 * Classpath: `java.io.Externalizable`
 * Package name: `java.io`
 */
class Externalizable : public JavaObject {
protected:
    const inline static char *className = "java.io.Externalizable";
public:
    STATICINITIALIZE;

    Externalizable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.io.OutputStream`
 * Package name: `java.io`
 */
class OutputStream : public Object {
protected:
    const inline static char *className = "java.io.OutputStream";
public:
    STATICINITIALIZE;

    OutputStream(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.OutputStream`
     * Signature: `([B)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_B arg0);

    /**
     * Declaring class: `java.io.OutputStream`
     * Signature: `([BII)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.OutputStream`
     * Signature: `(I)V`
     * Throws: `java.io.IOException`
     */
    void write(int arg0);

    /**
     * Declaring class: `java.io.OutputStream`
     * Signature: `()Ljava.io.OutputStream;`
     */
    static OutputStream nullOutputStream();
};


/**
 * Classpath: `java.lang.ref.ReferenceQueue`
 * Package name: `java.lang.ref`
 */
class ReferenceQueue : public Object {
protected:
    const inline static char *className = "java.lang.ref.ReferenceQueue";
public:
    STATICINITIALIZE;

    ReferenceQueue(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.ref.ReferenceQueue`
     * Signature: `(J)Ljava.lang.ref.Reference;`
     * Throws: `java.lang.IllegalArgumentException, java.lang.InterruptedException`
     */
    Reference remove(long arg0);

    /**
     * Declaring class: `java.lang.ref.ReferenceQueue`
     * Signature: `()Ljava.lang.ref.Reference;`
     * Throws: `java.lang.InterruptedException`
     */
    Reference remove();

    /**
     * Declaring class: `java.lang.ref.ReferenceQueue`
     * Signature: `(Ljava.util.function.Consumer;)V`
     */
    void forEach(Consumer arg0);

    /**
     * Declaring class: `java.lang.ref.ReferenceQueue`
     * Signature: `(Ljava.lang.ref.Reference;)Z`
     */
    bool enqueue(Reference arg0);

    /**
     * Declaring class: `java.lang.ref.ReferenceQueue`
     * Signature: `()Ljava.lang.ref.Reference;`
     */
    Reference poll();

    /**
     * Declaring class: `java.lang.ref.ReferenceQueue`
     * Signature: `()Ljava.lang.ref.Reference;`
     */
    Reference reallyPoll();
};


/**
 * Classpath: `java.lang.ref.Reference`
 * Package name: `java.lang.ref`
 */
class Reference : public Object {
protected:
    const inline static char *className = "java.lang.ref.Reference";
public:
    STATICINITIALIZE;

    Reference(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Ljava.lang.Object;`
     */
    Object get();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool refersTo0(Object arg0);

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.CloneNotSupportedException`
     */
    Object clone();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `(Ljava.lang.Object;)V`
     */
    static void reachabilityFence(Object arg0);

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Z`
     */
    bool enqueue();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()V`
     */
    static void waitForReferencePendingList();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Ljava.lang.ref.Reference;`
     */
    static Reference getAndClearReferencePendingList();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()V`
     */
    void enqueueFromPending();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Z`
     */
    static bool hasReferencePendingList();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()V`
     */
    void clear0();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()V`
     */
    static void processPendingReferences();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Z`
     * Throws: `java.lang.InterruptedException`
     */
    static bool waitForReferenceProcessing();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool refersTo(Object arg0);

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getFromInactiveFinalReference();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()V`
     */
    void clearInactiveFinalReference();

    /**
     * Declaring class: `java.lang.ref.Reference`
     * Signature: `()Z`
     */
    bool isEnqueued();
};


/**
 * Classpath: `java.util.function.Consumer`
 * Package name: `java.util.function`
 */
class Consumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Consumer";
public:
    STATICINITIALIZE;

    Consumer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.concurrent.ConcurrentMap`
 * Package name: `java.util.concurrent`
 */
class ConcurrentMap : public JavaObject {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentMap";
public:
    STATICINITIALIZE;

    ConcurrentMap(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Ljava.io.ObjectStreamField;`
 */
class ObjectStreamField_interface : public Object {
protected:
    const inline static char *className = "[Ljava.io.ObjectStreamField;";
public:
    STATICINITIALIZE;

    ObjectStreamField_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.io.ObjectStreamClass$FieldReflector`
 * Enclosing class: `java.io.ObjectStreamClass`
 * Package name: `java.io`
 */
class ObjectStreamClass_FieldReflector : public Object {
protected:
    const inline static char *className = "java.io.ObjectStreamClass$FieldReflector";
public:
    STATICINITIALIZE;

    ObjectStreamClass_FieldReflector(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.ObjectStreamClass$FieldReflector`
     * Signature: `(Ljava.lang.Object;[B)V`
     */
    void setPrimFieldValues(Object arg0, arr_B arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass$FieldReflector`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;)V`
     */
    void checkObjectFieldValueTypes(Object arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass$FieldReflector`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;Z)V`
     */
    void setObjFieldValues(Object arg0, Object_interface arg1, bool arg2);

    /**
     * Declaring class: `java.io.ObjectStreamClass$FieldReflector`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;)V`
     */
    void setObjFieldValues(Object arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass$FieldReflector`
     * Signature: `(Ljava.lang.Object;[B)V`
     */
    void getPrimFieldValues(Object arg0, arr_B arg1);

    /**
     * Declaring class: `java.io.ObjectStreamClass$FieldReflector`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;)V`
     */
    void getObjFieldValues(Object arg0, Object_interface arg1);
};


/**
 * Classpath: `java.security.ProtectionDomain`
 * Package name: `java.security`
 */
class ProtectionDomain : public Object {
protected:
    const inline static char *className = "java.security.ProtectionDomain";
public:
    STATICINITIALIZE;

    ProtectionDomain(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getClassLoader();

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `()Ljava.security.CodeSource;`
     */
    CodeSource getCodeSource();

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `(Ljava.security.Permission;)Z`
     */
    bool implies(Permission arg0);

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `()Z`
     */
    static bool seeAllp();

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `()Ljava.security.PermissionCollection;`
     */
    PermissionCollection mergePermissions();

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `()Ljava.security.PermissionCollection;`
     */
    PermissionCollection getPermissions();

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `()Z`
     */
    bool staticPermissionsOnly();

    /**
     * Declaring class: `java.security.ProtectionDomain`
     * Signature: `(Ljava.security.Permission;)Z`
     */
    bool impliesWithAltFilePerm(Permission arg0);
};


/**
 * Classpath: `java.lang.ClassLoader`
 * Package name: `java.lang`
 */
class ClassLoader : public Object {
protected:
    const inline static char *className = "java.lang.ClassLoader";
public:
    STATICINITIALIZE;

    ClassLoader(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.String;`
     */
    String name();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Z)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    Class loadClass(String arg0, bool arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    Class loadClass(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;)Ljava.lang.Class;`
     */
    Class loadClass(Module arg0, String arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;Ljava.lang.String;)J`
     */
    static long findNative(ClassLoader arg0, String arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    static ClassLoader getPlatformClassLoader();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    static ClassLoader getSystemClassLoader();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;Ljava.security.ProtectionDomain;)V`
     */
    void checkPackageAccess(Class arg0, ProtectionDomain arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.ClassLoader;`
     */
    static ClassLoader getClassLoader(Class arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;Ljava.lang.Class;)V`
     */
    static void checkClassLoaderPermission(ClassLoader arg0, Class arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Package;`
     */
    Package definePackage(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.net.URL;)Ljava.lang.Package;`
     */
    Package definePackage(String arg0, String arg1, String arg2, String arg3, String arg4, String arg5, String arg6, URL arg7);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Package;`
     */
    Package definePackage(Class arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.net.URL;`
     */
    URL findResource(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.net.URL;`
     * Throws: `java.io.IOException`
     */
    URL findResource(String arg0, String arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.io.InputStream;`
     */
    static InputStream getSystemResourceAsStream(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.io.InputStream;`
     */
    InputStream getResourceAsStream(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.net.URL;`
     */
    static URL getSystemResource(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.net.URL;`
     */
    URL getResource(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream packages();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool desiredAssertionStatus(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()V`
     */
    static void registerNatives();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Package;`
     */
    Package getPackage(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;[Ljava.lang.Object;)V`
     */
    void setSigners(Class arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.Void;`
     */
    static Void checkCreateClassLoader();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Void;`
     */
    static Void checkCreateClassLoader(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;)Ljava.lang.String;`
     */
    static String nameAndId(ClassLoader arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object getClassLoadingLock(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     */
    Class findLoadedClass(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     */
    static Class findBootstrapClassOrNull(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    Class findClass(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.Class;`
     */
    Class findClass(String arg0, String arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void resolveClass(Class arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `([BII)Ljava.lang.Class;`
     * Throws: `java.lang.ClassFormatError`
     */
    Class defineClass(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.nio.ByteBuffer;Ljava.security.ProtectionDomain;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassFormatError`
     */
    Class defineClass(String arg0, ByteBuffer arg1, ProtectionDomain arg2);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;[BIILjava.security.ProtectionDomain;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassFormatError`
     */
    Class defineClass(String arg0, arr_B arg1, int arg2, int arg3, ProtectionDomain arg4);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;[BII)Ljava.lang.Class;`
     * Throws: `java.lang.ClassFormatError`
     */
    Class defineClass(String arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool checkName(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    static ClassLoader getBuiltinPlatformClassLoader();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.security.CodeSource;)V`
     */
    void checkCerts(String arg0, CodeSource arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.NamedPackage;`
     */
    NamedPackage getNamedPackage(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.security.ProtectionDomain;)Ljava.security.ProtectionDomain;`
     */
    ProtectionDomain preDefineClass(String arg0, ProtectionDomain arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.security.ProtectionDomain;)Ljava.lang.String;`
     */
    String defineClassSourceLocation(ProtectionDomain arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;Ljava.lang.String;[BIILjava.security.ProtectionDomain;Ljava.lang.String;)Ljava.lang.Class;`
     */
    static Class defineClass1(ClassLoader arg0, String arg1, arr_B arg2, int arg3, int arg4, ProtectionDomain arg5, String arg6);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;Ljava.security.ProtectionDomain;)V`
     */
    void postDefineClass(Class arg0, ProtectionDomain arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;Ljava.lang.String;Ljava.nio.ByteBuffer;IILjava.security.ProtectionDomain;Ljava.lang.String;)Ljava.lang.Class;`
     */
    static Class defineClass2(ClassLoader arg0, String arg1, ByteBuffer arg2, int arg3, int arg4, ProtectionDomain arg5, String arg6);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `([Ljava.security.cert.Certificate;[Ljava.security.cert.Certificate;)Z`
     */
    bool compareCerts(Certificate_interface arg0, Certificate_interface arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     */
    static Class findBootstrapClass(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     */
    Class findLoadedClass0(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.util.Enumeration;`
     * Throws: `java.io.IOException`
     */
    Enumeration getResources(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.util.Enumeration;`
     * Throws: `java.io.IOException`
     */
    Enumeration findResources(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    static ClassLoader getBuiltinAppClassLoader();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;)Z`
     */
    bool isAncestor(ClassLoader arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;Ljava.lang.ClassLoader;)Z`
     */
    static bool needsClassLoaderPermissionCheck(ClassLoader arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.lang.NamedPackage;Ljava.lang.Module;)Ljava.lang.Package;`
     */
    Package toPackage(String arg0, NamedPackage arg1, Module arg2);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Package;`
     */
    Package getDefinedPackage(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Ljdk.internal.loader.NativeLibrary;`
     */
    static NativeLibrary loadLibrary(Class arg0, String arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;Ljava.io.File;)Ljdk.internal.loader.NativeLibrary;`
     */
    static NativeLibrary loadLibrary(Class arg0, File arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String findLibrary(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()V`
     */
    void initializeJavaAssertionMaps();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.AssertionStatusDirectives;`
     */
    static AssertionStatusDirectives retrieveDirectives();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)Z`
     */
    bool trySetObjectField(String arg0, Object arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void addClass(Class arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.ClassLoader;Ljava.lang.Class;Ljava.lang.String;[BIILjava.security.ProtectionDomain;ZILjava.lang.Object;)Ljava.lang.Class;`
     */
    static Class defineClass0(ClassLoader arg0, Class arg1, String arg2, arr_B arg3, int arg4, int arg5, ProtectionDomain arg6, bool arg7, int arg8, Object arg9);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    Class findSystemClass(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.util.stream.Stream;`
     */
    Stream resources(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Z`
     */
    static bool registerAsParallelCapable();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Z`
     */
    bool isRegisteredAsParallelCapable();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;)Ljava.util.Enumeration;`
     * Throws: `java.io.IOException`
     */
    static Enumeration getSystemResources(String arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getParent();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.Module;`
     */
    Module getUnnamedModule();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    static ClassLoader initSystemClassLoader();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Z)V`
     */
    void setDefaultAssertionStatus(bool arg0);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    void setPackageAssertionStatus(String arg0, bool arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    void setClassAssertionStatus(String arg0, bool arg1);

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()V`
     */
    void clearAssertionStatus();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()Ljava.util.concurrent.ConcurrentHashMap;`
     */
    ConcurrentHashMap createOrGetClassLoaderValueMap();

    /**
     * Declaring class: `java.lang.ClassLoader`
     * Signature: `()V`
     */
    void resetArchivedStates();
};


/**
 * Classpath: `java.lang.Module`
 * Package name: `java.lang`
 */
class Module : public Object {
protected:
    const inline static char *className = "java.lang.Module";
public:
    STATICINITIALIZE;

    Module(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;)Ljava.lang.Module;`
     */
    Module addReads(Module arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Module;`
     */
    Module addExports(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Module;`
     */
    Module addOpens(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Module;`
     */
    Module addUses(Class arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getClassLoader();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.module.ModuleDescriptor;`
     */
    ModuleDescriptor getDescriptor();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Z`
     */
    bool isNamed();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)Ljava.io.InputStream;`
     * Throws: `java.io.IOException`
     */
    InputStream getResourceAsStream(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool isOpen(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Z`
     */
    bool isOpen(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.util.Set;`
     */
    Set getPackages();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;ZLjava.lang.String;Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    static void defineModule0(Module arg0, bool arg1, String arg2, String arg3, Object_interface arg4);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.Module;`
     */
    Module implAddEnableNativeAccess();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Module;`
     */
    Module getCallerModule(Class arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;Z)V`
     */
    void implAddReads(Module arg0, bool arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;)V`
     */
    void implAddReads(Module arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;)Z`
     */
    bool canRead(Module arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;Ljava.lang.Module;)V`
     */
    static void addReads0(Module arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;Z)Z`
     */
    bool implIsExportedOrOpen(String arg0, Module arg1, bool arg2);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;Z)Z`
     */
    bool isStaticallyExportedOrOpen(String arg0, Module arg1, bool arg2);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;Z)Z`
     */
    bool isReflectivelyExportedOrOpen(String arg0, Module arg1, bool arg2);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.util.Set;Ljava.lang.Module;)Z`
     */
    bool allows(Set arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;ZZ)V`
     */
    void implAddExportsOrOpens(String arg0, Module arg1, bool arg2, bool arg3);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;)V`
     */
    static void addExportsToAll0(Module arg0, String arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;)V`
     */
    static void addExportsToAllUnnamed0(Module arg0, String arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;Ljava.lang.Module;)V`
     */
    static void addExports0(Module arg0, String arg1, Module arg2);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.util.Set;Ljava.util.Set;)V`
     */
    void implAddOpensToAllUnnamed(Set arg0, Set arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.util.Set;Ljava.util.Map;)V`
     */
    void implAddOpensToAllUnnamed(Set arg0, Map arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)V`
     */
    void implAddOpensToAllUnnamed(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void implAddUses(Class arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool canUse(Class arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.ModuleLayer;Ljava.lang.module.ResolvedModule;)Ljava.lang.Module;`
     */
    static Module findModule(ModuleLayer arg0, ResolvedModule arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.util.Map;Ljava.util.Map;Ljava.util.List;)Ljava.lang.Module;`
     */
    static Module findModule(String arg0, Map arg1, Map arg2, List arg3);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;Ljava.util.Map;)V`
     */
    static void initExports(Module arg0, Map arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;Ljava.util.Map;Ljava.util.Map;Ljava.util.List;)V`
     */
    static void initExportsAndOpens(Module arg0, Map arg1, Map arg2, List arg3);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.Class;`
     */
    Class moduleInfoClass();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.io.InputStream;)Ljava.lang.Class;`
     * Throws: `java.io.IOException`
     */
    Class loadModuleInfoClass(InputStream arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.Class;`
     */
    Class loadModuleInfoClass();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Ljava.lang.ModuleLayer;`
     */
    ModuleLayer getLayer();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()V`
     */
    static void implAddEnableNativeAccessAllUnnamed();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()Z`
     */
    bool implIsEnableNativeAccess();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `()V`
     */
    void implAddReadsAllUnnamed();

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.Module;)V`
     */
    void implAddReadsNoSync(Module arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Z`
     */
    bool isExported(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool isExported(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Z`
     */
    bool isReflectivelyExported(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Z`
     */
    bool isReflectivelyOpened(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)V`
     */
    void implAddExports(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)V`
     */
    void implAddExports(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)V`
     */
    void implAddExportsToAllUnnamed(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)V`
     */
    void implAddExportsNoSync(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)V`
     */
    void implAddExportsNoSync(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;)V`
     */
    void implAddOpens(String arg0);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)V`
     */
    void implAddOpens(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.Module`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.util.function.Function;Ljava.lang.ModuleLayer;)Ljava.util.Map;`
     */
    static Map defineModules(Configuration arg0, Function arg1, ModuleLayer arg2);
};


/**
 * Classpath: `java.lang.module.ModuleDescriptor`
 * Package name: `java.lang.module`
 */
class ModuleDescriptor : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor";
public:
    STATICINITIALIZE;

    ModuleDescriptor(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Set;`
     */
    Set modifiers();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.lang.String;`
     */
    String name();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.String;`
     */
    static String toString(Set arg0, String arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Optional;`
     */
    Optional version();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.util.Set;Ljava.util.Set;)I`
     */
    static int compare(Set arg0, Set arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)I`
     */
    static int compare(Object arg0, Object arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String packageName(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Set;`
     */
    Set packages();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Z`
     */
    bool isOpen();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.io.InputStream;)Ljava.lang.module.ModuleDescriptor;`
     * Throws: `java.io.IOException`
     */
    static ModuleDescriptor read(InputStream arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.io.InputStream;Ljava.util.function.Supplier;)Ljava.lang.module.ModuleDescriptor;`
     * Throws: `java.io.IOException`
     */
    static ModuleDescriptor read(InputStream arg0, Supplier arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.nio.ByteBuffer;)Ljava.lang.module.ModuleDescriptor;`
     */
    static ModuleDescriptor read(ByteBuffer arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.nio.ByteBuffer;Ljava.util.function.Supplier;)Ljava.lang.module.ModuleDescriptor;`
     */
    static ModuleDescriptor read(ByteBuffer arg0, Supplier arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Set;`
     */
    Set exports();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Set;`
     */
    Set opens();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Z`
     */
    bool isAutomatic();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Set;`
     */
    Set uses();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Set;`
     */
    Set provides();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Set;`
     */
    Set requires_();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Optional;`
     */
    Optional mainClass();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.util.Set;)J`
     */
    static long modsValue(Set arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.lang.String;`
     */
    String toNameAndVersion();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `()Ljava.util.Optional;`
     */
    Optional rawVersion();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    static ModuleDescriptor_Builder newModule(String arg0, Set arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    static ModuleDescriptor_Builder newModule(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    static ModuleDescriptor_Builder newOpenModule(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    static ModuleDescriptor_Builder newAutomaticModule(String arg0);
};


/**
 * Classpath: `java.util.Set`
 * Package name: `java.util`
 */
class Set : public JavaObject {
protected:
    const inline static char *className = "java.util.Set";
public:
    STATICINITIALIZE;

    Set(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.Optional`
 * Package name: `java.util`
 */
class Optional : public Object {
protected:
    const inline static char *className = "java.util.Optional";
public:
    STATICINITIALIZE;

    Optional(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()Ljava.lang.Object;`
     */
    Object get();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Function;)Ljava.util.Optional;`
     */
    Optional map(Function arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream stream();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.lang.Object;)Ljava.util.Optional;`
     */
    static Optional of(Object arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Predicate;)Ljava.util.Optional;`
     */
    Optional filter(Predicate arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()Ljava.util.Optional;`
     */
    static Optional empty();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Function;)Ljava.util.Optional;`
     */
    Optional flatMap(Function arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()Z`
     */
    bool isPresent();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object orElse(Object arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Supplier;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object orElseThrow(Supplier arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `()Ljava.lang.Object;`
     */
    Object orElseThrow();

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.lang.Object;)Ljava.util.Optional;`
     */
    static Optional ofNullable(Object arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Consumer;)V`
     */
    void ifPresent(Consumer arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Consumer;Ljava.lang.Runnable;)V`
     */
    void ifPresentOrElse(Consumer arg0, Runnable arg1);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Supplier;)Ljava.util.Optional;`
     */
    Optional or_(Supplier arg0);

    /**
     * Declaring class: `java.util.Optional`
     * Signature: `(Ljava.util.function.Supplier;)Ljava.lang.Object;`
     */
    Object orElseGet(Supplier arg0);
};


/**
 * Classpath: `java.util.function.Function`
 * Package name: `java.util.function`
 */
class Function : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Function";
public:
    STATICINITIALIZE;

    Function(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.Predicate`
 * Package name: `java.util.function`
 */
class Predicate : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Predicate";
public:
    STATICINITIALIZE;

    Predicate(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.Supplier`
 * Package name: `java.util.function`
 */
class Supplier : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Supplier";
public:
    STATICINITIALIZE;

    Supplier(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.Runnable`
 * Package name: `java.lang`
 */
class Runnable : public JavaObject {
protected:
    const inline static char *className = "java.lang.Runnable";
public:
    STATICINITIALIZE;

    Runnable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.io.InputStream`
 * Package name: `java.io`
 */
class InputStream : public Object {
protected:
    const inline static char *className = "java.io.InputStream";
public:
    STATICINITIALIZE;

    InputStream(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `([BII)I`
     * Throws: `java.io.IOException`
     */
    int read(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `([B)I`
     * Throws: `java.io.IOException`
     */
    int read(arr_B arg0);

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `()I`
     * Throws: `java.io.IOException`
     */
    int read();

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `(I)V`
     */
    void mark(int arg0);

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `([BII)I`
     * Throws: `java.io.IOException`
     */
    int readNBytes(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `(Ljava.io.OutputStream;)J`
     * Throws: `java.io.IOException`
     */
    long transferTo(OutputStream arg0);

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `(J)J`
     * Throws: `java.io.IOException`
     */
    long skip(long arg0);

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `()I`
     * Throws: `java.io.IOException`
     */
    int available();

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `()Z`
     */
    bool markSupported();

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void reset();

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `()Ljava.io.InputStream;`
     */
    static InputStream nullInputStream();

    /**
     * Declaring class: `java.io.InputStream`
     * Signature: `(J)V`
     * Throws: `java.io.IOException`
     */
    void skipNBytes(long arg0);
};


/**
 * Classpath: `java.nio.ByteOrder`
 * Package name: `java.nio`
 */
class ByteOrder : public Object {
protected:
    const inline static char *className = "java.nio.ByteOrder";
public:
    STATICINITIALIZE;

    ByteOrder(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.nio.ByteOrder`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.ByteOrder`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    static ByteOrder nativeOrder();
};


/**
 * Classpath: `java.nio.Buffer`
 * Package name: `java.nio`
 */
class Buffer : public Object {
protected:
    const inline static char *className = "java.nio.Buffer";
public:
    STATICINITIALIZE;

    Buffer(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(II)I`
     */
    int checkIndex(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)I`
     */
    int checkIndex(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.nio.Buffer;`
     */
    Buffer clear();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int position();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)Ljava.nio.Buffer;`
     */
    Buffer position(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)Ljava.nio.Buffer;`
     */
    Buffer limit(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int limit();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int remaining();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object array();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int capacity();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.nio.Buffer;`
     */
    Buffer mark();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.nio.Buffer;`
     */
    Buffer reset();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)Ljava.lang.IllegalArgumentException;`
     */
    static IllegalArgumentException createCapacityException(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)Ljava.lang.IllegalArgumentException;`
     */
    IllegalArgumentException createPositionException(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)Ljava.lang.IllegalArgumentException;`
     */
    IllegalArgumentException createLimitException(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljdk.internal.misc.ScopedMemoryAccess$Scope;`
     */
    ScopedMemoryAccess_Scope scope();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.lang.IllegalArgumentException;`
     */
    static IllegalArgumentException createSameBufferException();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.nio.Buffer;`
     */
    Buffer flip();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.nio.Buffer;`
     */
    Buffer rewind();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Z`
     */
    bool hasRemaining();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Z`
     */
    bool isReadOnly();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(II)Ljava.nio.Buffer;`
     */
    Buffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.nio.Buffer;`
     */
    Buffer slice();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()Ljava.nio.Buffer;`
     */
    Buffer duplicate();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int nextGetIndex();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)I`
     */
    int nextGetIndex(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `(I)I`
     */
    int nextPutIndex(int arg0);

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int nextPutIndex();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()I`
     */
    int markValue();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()V`
     */
    void discardMark();

    /**
     * Declaring class: `java.nio.Buffer`
     * Signature: `()V`
     */
    void checkScope();
};


/**
 * Classpath: `java.lang.RuntimeException`
 * Package name: `java.lang`
 */
class RuntimeException : public Exception {
protected:
    const inline static char *className = "java.lang.RuntimeException";
public:
    STATICINITIALIZE;

    RuntimeException(jobject object) : Exception(object) {}

};


/**
 * Classpath: `jdk.internal.misc.ScopedMemoryAccess$Scope`
 * Enclosing class: `jdk.internal.misc.ScopedMemoryAccess`
 * Package name: `jdk.internal.misc`
 */
class ScopedMemoryAccess_Scope : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.misc.ScopedMemoryAccess$Scope";
public:
    STATICINITIALIZE;

    ScopedMemoryAccess_Scope(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.nio.ShortBuffer`
 * Package name: `java.nio`
 */
class ShortBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.ShortBuffer";
public:
    STATICINITIALIZE;

    ShortBuffer(jobject object) : Buffer(object) {}


    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()S`
     */
    short get();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I[S)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer get(int arg0, arr_S arg1);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I)S`
     */
    short get(int arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I[SII)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer get(int arg0, arr_S arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `([SII)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer get(arr_S arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `([S)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer get(arr_S arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `([S)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(arr_S arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I[SII)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(int arg0, arr_S arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I[S)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(int arg0, arr_S arg1);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `([SII)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(arr_S arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(ILjava.nio.ShortBuffer;II)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(int arg0, ShortBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(Ljava.nio.ShortBuffer;)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(ShortBuffer arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(IS)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(int arg0, short arg1);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(S)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer put(short arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(SS)I`
     */
    static int compare(short arg0, short arg1);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer clear();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `([S)Ljava.nio.ShortBuffer;`
     */
    static ShortBuffer wrap(arr_S arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `([SII)Ljava.nio.ShortBuffer;`
     */
    static ShortBuffer wrap(arr_S arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer position(int arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer limit(int arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer mark();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer reset();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer flip();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer rewind();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(II)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer slice();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer duplicate();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(Ljava.nio.ShortBuffer;)I`
     */
    int mismatch(ShortBuffer arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I)Ljava.nio.ShortBuffer;`
     */
    static ShortBuffer allocate(int arg0);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I[SII)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer getArray(int arg0, arr_S arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(ILjava.nio.ShortBuffer;II)V`
     */
    void putBuffer(int arg0, ShortBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `(I[SII)Ljava.nio.ShortBuffer;`
     */
    ShortBuffer putArray(int arg0, arr_S arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer asReadOnlyBuffer();

    /**
     * Declaring class: `java.nio.ShortBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer compact();
};


/**
 * Classpath: `[S`
 */
class arr_S : public Object {
protected:
    const inline static char *className = "[S";
public:
    STATICINITIALIZE;

    arr_S(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.nio.IntBuffer`
 * Package name: `java.nio`
 */
class IntBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.IntBuffer";
public:
    STATICINITIALIZE;

    IntBuffer(jobject object) : Buffer(object) {}


    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()I`
     */
    int get();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I[I)Ljava.nio.IntBuffer;`
     */
    IntBuffer get(int arg0, arr_I arg1);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I)I`
     */
    int get(int arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I[III)Ljava.nio.IntBuffer;`
     */
    IntBuffer get(int arg0, arr_I arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `([III)Ljava.nio.IntBuffer;`
     */
    IntBuffer get(arr_I arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `([I)Ljava.nio.IntBuffer;`
     */
    IntBuffer get(arr_I arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `([I)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(arr_I arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I[III)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(int arg0, arr_I arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I[I)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(int arg0, arr_I arg1);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `([III)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(arr_I arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(ILjava.nio.IntBuffer;II)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(int arg0, IntBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(Ljava.nio.IntBuffer;)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(IntBuffer arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(II)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I)Ljava.nio.IntBuffer;`
     */
    IntBuffer put(int arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(II)I`
     */
    static int compare(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer clear();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `([I)Ljava.nio.IntBuffer;`
     */
    static IntBuffer wrap(arr_I arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `([III)Ljava.nio.IntBuffer;`
     */
    static IntBuffer wrap(arr_I arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I)Ljava.nio.IntBuffer;`
     */
    IntBuffer position(int arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I)Ljava.nio.IntBuffer;`
     */
    IntBuffer limit(int arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer mark();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer reset();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer flip();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer rewind();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(II)Ljava.nio.IntBuffer;`
     */
    IntBuffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer slice();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer duplicate();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(Ljava.nio.IntBuffer;)I`
     */
    int mismatch(IntBuffer arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I)Ljava.nio.IntBuffer;`
     */
    static IntBuffer allocate(int arg0);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I[III)Ljava.nio.IntBuffer;`
     */
    IntBuffer getArray(int arg0, arr_I arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(ILjava.nio.IntBuffer;II)V`
     */
    void putBuffer(int arg0, IntBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `(I[III)Ljava.nio.IntBuffer;`
     */
    IntBuffer putArray(int arg0, arr_I arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer asReadOnlyBuffer();

    /**
     * Declaring class: `java.nio.IntBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer compact();
};


/**
 * Classpath: `[I`
 */
class arr_I : public Object {
protected:
    const inline static char *className = "[I";
public:
    STATICINITIALIZE;

    arr_I(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.nio.LongBuffer`
 * Package name: `java.nio`
 */
class LongBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.LongBuffer";
public:
    STATICINITIALIZE;

    LongBuffer(jobject object) : Buffer(object) {}


    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()J`
     */
    long get();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I[J)Ljava.nio.LongBuffer;`
     */
    LongBuffer get(int arg0, arr_J arg1);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I)J`
     */
    long get(int arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I[JII)Ljava.nio.LongBuffer;`
     */
    LongBuffer get(int arg0, arr_J arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `([JII)Ljava.nio.LongBuffer;`
     */
    LongBuffer get(arr_J arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `([J)Ljava.nio.LongBuffer;`
     */
    LongBuffer get(arr_J arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `([J)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(arr_J arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I[JII)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(int arg0, arr_J arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I[J)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(int arg0, arr_J arg1);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `([JII)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(arr_J arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(ILjava.nio.LongBuffer;II)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(int arg0, LongBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(Ljava.nio.LongBuffer;)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(LongBuffer arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(IJ)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(int arg0, long arg1);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(J)Ljava.nio.LongBuffer;`
     */
    LongBuffer put(long arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(JJ)I`
     */
    static int compare(long arg0, long arg1);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer clear();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `([J)Ljava.nio.LongBuffer;`
     */
    static LongBuffer wrap(arr_J arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `([JII)Ljava.nio.LongBuffer;`
     */
    static LongBuffer wrap(arr_J arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I)Ljava.nio.LongBuffer;`
     */
    LongBuffer position(int arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I)Ljava.nio.LongBuffer;`
     */
    LongBuffer limit(int arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer mark();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer reset();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer flip();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer rewind();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(II)Ljava.nio.LongBuffer;`
     */
    LongBuffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer slice();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer duplicate();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(Ljava.nio.LongBuffer;)I`
     */
    int mismatch(LongBuffer arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I)Ljava.nio.LongBuffer;`
     */
    static LongBuffer allocate(int arg0);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I[JII)Ljava.nio.LongBuffer;`
     */
    LongBuffer getArray(int arg0, arr_J arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(ILjava.nio.LongBuffer;II)V`
     */
    void putBuffer(int arg0, LongBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `(I[JII)Ljava.nio.LongBuffer;`
     */
    LongBuffer putArray(int arg0, arr_J arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer asReadOnlyBuffer();

    /**
     * Declaring class: `java.nio.LongBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer compact();
};


/**
 * Classpath: `[J`
 */
class arr_J : public Object {
protected:
    const inline static char *className = "[J";
public:
    STATICINITIALIZE;

    arr_J(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.nio.FloatBuffer`
 * Package name: `java.nio`
 */
class FloatBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.FloatBuffer";
public:
    STATICINITIALIZE;

    FloatBuffer(jobject object) : Buffer(object) {}


    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()F`
     */
    float get();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I[F)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer get(int arg0, arr_F arg1);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I)F`
     */
    float get(int arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I[FII)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer get(int arg0, arr_F arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `([FII)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer get(arr_F arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `([F)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer get(arr_F arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `([F)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(arr_F arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I[FII)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(int arg0, arr_F arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I[F)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(int arg0, arr_F arg1);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `([FII)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(arr_F arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(ILjava.nio.FloatBuffer;II)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(int arg0, FloatBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(Ljava.nio.FloatBuffer;)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(FloatBuffer arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(IF)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(int arg0, float arg1);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(F)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer put(float arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(FF)I`
     */
    static int compare(float arg0, float arg1);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer clear();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `([F)Ljava.nio.FloatBuffer;`
     */
    static FloatBuffer wrap(arr_F arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `([FII)Ljava.nio.FloatBuffer;`
     */
    static FloatBuffer wrap(arr_F arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer position(int arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer limit(int arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer mark();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer reset();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer flip();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer rewind();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(II)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer slice();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer duplicate();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(Ljava.nio.FloatBuffer;)I`
     */
    int mismatch(FloatBuffer arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I)Ljava.nio.FloatBuffer;`
     */
    static FloatBuffer allocate(int arg0);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I[FII)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer getArray(int arg0, arr_F arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(ILjava.nio.FloatBuffer;II)V`
     */
    void putBuffer(int arg0, FloatBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `(I[FII)Ljava.nio.FloatBuffer;`
     */
    FloatBuffer putArray(int arg0, arr_F arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer asReadOnlyBuffer();

    /**
     * Declaring class: `java.nio.FloatBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer compact();
};


/**
 * Classpath: `[F`
 */
class arr_F : public Object {
protected:
    const inline static char *className = "[F";
public:
    STATICINITIALIZE;

    arr_F(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.nio.DoubleBuffer`
 * Package name: `java.nio`
 */
class DoubleBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.DoubleBuffer";
public:
    STATICINITIALIZE;

    DoubleBuffer(jobject object) : Buffer(object) {}


    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()D`
     */
    double get();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I[D)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer get(int arg0, arr_D arg1);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I)D`
     */
    double get(int arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I[DII)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer get(int arg0, arr_D arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `([DII)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer get(arr_D arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `([D)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer get(arr_D arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `([D)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(arr_D arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I[DII)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(int arg0, arr_D arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I[D)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(int arg0, arr_D arg1);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `([DII)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(arr_D arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(ILjava.nio.DoubleBuffer;II)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(int arg0, DoubleBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(Ljava.nio.DoubleBuffer;)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(DoubleBuffer arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(ID)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(int arg0, double arg1);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(D)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer put(double arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(DD)I`
     */
    static int compare(double arg0, double arg1);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer clear();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `([D)Ljava.nio.DoubleBuffer;`
     */
    static DoubleBuffer wrap(arr_D arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `([DII)Ljava.nio.DoubleBuffer;`
     */
    static DoubleBuffer wrap(arr_D arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer position(int arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer limit(int arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer mark();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer reset();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer flip();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer rewind();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(II)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer slice();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer duplicate();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(Ljava.nio.DoubleBuffer;)I`
     */
    int mismatch(DoubleBuffer arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I)Ljava.nio.DoubleBuffer;`
     */
    static DoubleBuffer allocate(int arg0);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I[DII)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer getArray(int arg0, arr_D arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(ILjava.nio.DoubleBuffer;II)V`
     */
    void putBuffer(int arg0, DoubleBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `(I[DII)Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer putArray(int arg0, arr_D arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer asReadOnlyBuffer();

    /**
     * Declaring class: `java.nio.DoubleBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer compact();
};


/**
 * Classpath: `[D`
 */
class arr_D : public Object {
protected:
    const inline static char *className = "[D";
public:
    STATICINITIALIZE;

    arr_D(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.module.ModuleDescriptor$Builder`
 * Enclosing class: `java.lang.module.ModuleDescriptor`
 * Package name: `java.lang.module`
 */
class ModuleDescriptor_Builder : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Builder";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Builder(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder version(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.module.ModuleDescriptor$Version;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder version(ModuleDescriptor_Version arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `()Ljava.util.Set;`
     */
    Set packages();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder packages(Set arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder exports(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder exports(Set arg0, String arg1, Set arg2);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder exports(String arg0, Set arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder exports(Set arg0, String arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.module.ModuleDescriptor$Exports;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder exports(ModuleDescriptor_Exports arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder opens(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder opens(Set arg0, String arg1, Set arg2);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder opens(String arg0, Set arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.module.ModuleDescriptor$Opens;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder opens(ModuleDescriptor_Opens arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder opens(Set arg0, String arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder uses(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.module.ModuleDescriptor$Provides;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder provides(ModuleDescriptor_Provides arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;Ljava.util.List;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder provides(String arg0, List arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `()Ljava.lang.module.ModuleDescriptor;`
     */
    ModuleDescriptor build();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.module.ModuleDescriptor$Requires;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder requires_(ModuleDescriptor_Requires arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;Ljava.lang.module.ModuleDescriptor$Version;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder requires_(Set arg0, String arg1, ModuleDescriptor_Version arg2);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder requires_(String arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder requires_(Set arg0, String arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.util.Set;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder requires_(Set arg0, String arg1, String arg2);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Builder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;`
     */
    ModuleDescriptor_Builder mainClass(String arg0);
};


/**
 * Classpath: `java.lang.module.ModuleDescriptor$Version`
 * Enclosing class: `java.lang.module.ModuleDescriptor`
 * Package name: `java.lang.module`
 */
class ModuleDescriptor_Version : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Version";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Version(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)I`
     */
    int cmp(Object arg0, Object arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `(Ljava.lang.String;ILjava.util.List;)I`
     */
    static int takeNumber(String arg0, int arg1, List arg2);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `(Ljava.lang.String;ILjava.util.List;)I`
     */
    static int takeString(String arg0, int arg1, List arg2);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `(Ljava.util.List;Ljava.util.List;)I`
     */
    int compareTokens(List arg0, List arg1);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Version`
     * Signature: `(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Version;`
     */
    static ModuleDescriptor_Version parse(String arg0);
};


/**
 * Classpath: `java.lang.module.ModuleDescriptor$Exports`
 * Enclosing class: `java.lang.module.ModuleDescriptor`
 * Package name: `java.lang.module`
 */
class ModuleDescriptor_Exports : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Exports";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Exports(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Exports`
     * Signature: `()Ljava.util.Set;`
     */
    Set modifiers();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Exports`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Exports`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Exports`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Exports`
     * Signature: `()Ljava.lang.String;`
     */
    String source();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Exports`
     * Signature: `()Z`
     */
    bool isQualified();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Exports`
     * Signature: `()Ljava.util.Set;`
     */
    Set targets();
};


/**
 * Classpath: `java.lang.module.ModuleDescriptor$Opens`
 * Enclosing class: `java.lang.module.ModuleDescriptor`
 * Package name: `java.lang.module`
 */
class ModuleDescriptor_Opens : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Opens";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Opens(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Opens`
     * Signature: `()Ljava.util.Set;`
     */
    Set modifiers();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Opens`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Opens`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Opens`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Opens`
     * Signature: `()Ljava.lang.String;`
     */
    String source();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Opens`
     * Signature: `()Z`
     */
    bool isQualified();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Opens`
     * Signature: `()Ljava.util.Set;`
     */
    Set targets();
};


/**
 * Classpath: `java.lang.module.ModuleDescriptor$Provides`
 * Enclosing class: `java.lang.module.ModuleDescriptor`
 * Package name: `java.lang.module`
 */
class ModuleDescriptor_Provides : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Provides";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Provides(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Provides`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Provides`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Provides`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Provides`
     * Signature: `()Ljava.lang.String;`
     */
    String service();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Provides`
     * Signature: `()Ljava.util.List;`
     */
    List providers();
};


/**
 * Classpath: `java.lang.module.ModuleDescriptor$Requires`
 * Enclosing class: `java.lang.module.ModuleDescriptor`
 * Package name: `java.lang.module`
 */
class ModuleDescriptor_Requires : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Requires";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Requires(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Requires`
     * Signature: `()Ljava.util.Set;`
     */
    Set modifiers();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Requires`
     * Signature: `()Ljava.lang.String;`
     */
    String name();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Requires`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Requires`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Requires`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Requires`
     * Signature: `()Ljava.util.Optional;`
     */
    Optional compiledVersion();

    /**
     * Declaring class: `java.lang.module.ModuleDescriptor$Requires`
     * Signature: `()Ljava.util.Optional;`
     */
    Optional rawCompiledVersion();
};


/**
 * Classpath: `java.lang.ModuleLayer`
 * Package name: `java.lang`
 */
class ModuleLayer : public Object {
protected:
    const inline static char *className = "java.lang.ModuleLayer";
public:
    STATICINITIALIZE;

    ModuleLayer(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljava.lang.ModuleLayer;`
     */
    static ModuleLayer empty();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljava.lang.ModuleLayer;`
     */
    static ModuleLayer boot();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljava.util.Set;`
     */
    Set modules();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljava.lang.module.Configuration;`
     */
    Configuration configuration();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljava.util.List;`
     */
    List parents();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.String;)Ljava.util.Optional;`
     */
    Optional findModule(String arg0);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljdk.internal.module.ServicesCatalog;`
     */
    ServicesCatalog getServicesCatalog();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.ClassLoader;)V`
     */
    void bindToLoader(ClassLoader arg0);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream layers();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.ClassLoader;)Ljava.util.stream.Stream;`
     */
    static Stream layers(ClassLoader arg0);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.util.function.Function;)Ljava.lang.ModuleLayer;`
     */
    ModuleLayer defineModules(Configuration arg0, Function arg1);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.util.List;Ljava.util.function.Function;)Ljava.lang.ModuleLayer$Controller;`
     */
    static ModuleLayer_Controller defineModules(Configuration arg0, List arg1, Function arg2);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.LayerInstantiationException;`
     */
    static LayerInstantiationException fail(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.util.List;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer$Controller;`
     */
    static ModuleLayer_Controller defineModulesWithOneLoader(Configuration arg0, List arg1, ClassLoader arg2);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer;`
     */
    ModuleLayer defineModulesWithOneLoader(Configuration arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.util.List;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer$Controller;`
     */
    static ModuleLayer_Controller defineModulesWithManyLoaders(Configuration arg0, List arg1, ClassLoader arg2);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer;`
     */
    ModuleLayer defineModulesWithManyLoaders(Configuration arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.util.List;)V`
     */
    static void checkConfiguration(Configuration arg0, List arg1);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()V`
     */
    static void checkCreateClassLoaderPermission();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `()V`
     */
    static void checkGetClassLoaderPermission();

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.module.Configuration;Ljava.util.function.Function;)V`
     */
    static void checkForDuplicatePkgs(Configuration arg0, Function arg1);

    /**
     * Declaring class: `java.lang.ModuleLayer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.ClassLoader;`
     */
    ClassLoader findLoader(String arg0);
};


/**
 * Classpath: `java.lang.module.Configuration`
 * Package name: `java.lang.module`
 */
class Configuration : public Object {
protected:
    const inline static char *className = "java.lang.module.Configuration";
public:
    STATICINITIALIZE;

    Configuration(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `()Ljava.lang.module.Configuration;`
     */
    static Configuration empty();

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `(Ljava.lang.module.ModuleFinder;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;`
     */
    Configuration resolve(ModuleFinder arg0, ModuleFinder arg1, Collection arg2);

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `(Ljava.lang.module.ModuleFinder;Ljava.util.List;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;`
     */
    static Configuration resolve(ModuleFinder arg0, List arg1, ModuleFinder arg2, Collection arg3);

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `()Ljava.util.Set;`
     */
    Set modules();

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `(Ljava.lang.module.ResolvedModule;)Ljava.util.Set;`
     */
    Set reads(ResolvedModule arg0);

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `()Ljava.util.List;`
     */
    List parents();

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `(Ljava.lang.String;)Ljava.util.Optional;`
     */
    Optional findModule(String arg0);

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `(Ljava.lang.module.ModuleFinder;Ljava.util.Collection;Ljava.io.PrintStream;)Ljava.lang.module.Configuration;`
     */
    static Configuration resolveAndBind(ModuleFinder arg0, Collection arg1, PrintStream arg2);

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `(Ljava.lang.module.ModuleFinder;Ljava.util.List;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;`
     */
    static Configuration resolveAndBind(ModuleFinder arg0, List arg1, ModuleFinder arg2, Collection arg3);

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `(Ljava.lang.module.ModuleFinder;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;`
     */
    Configuration resolveAndBind(ModuleFinder arg0, ModuleFinder arg1, Collection arg2);

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `()Ljava.util.Set;`
     */
    Set descriptors();

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream configurations();

    /**
     * Declaring class: `java.lang.module.Configuration`
     * Signature: `()Ljava.lang.String;`
     */
    String targetPlatform();
};


/**
 * Classpath: `java.lang.module.ModuleFinder`
 * Package name: `java.lang.module`
 */
class ModuleFinder : public JavaObject {
protected:
    const inline static char *className = "java.lang.module.ModuleFinder";
public:
    STATICINITIALIZE;

    ModuleFinder(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.Collection`
 * Package name: `java.util`
 */
class Collection : public JavaObject {
protected:
    const inline static char *className = "java.util.Collection";
public:
    STATICINITIALIZE;

    Collection(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.module.ResolvedModule`
 * Package name: `java.lang.module`
 */
class ResolvedModule : public Object {
protected:
    const inline static char *className = "java.lang.module.ResolvedModule";
public:
    STATICINITIALIZE;

    ResolvedModule(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `()Ljava.lang.String;`
     */
    String name();

    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `()Ljava.lang.module.ModuleDescriptor;`
     */
    ModuleDescriptor descriptor();

    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `()Ljava.util.Set;`
     */
    Set reads();

    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `()Ljava.lang.module.ModuleReference;`
     */
    ModuleReference reference();

    /**
     * Declaring class: `java.lang.module.ResolvedModule`
     * Signature: `()Ljava.lang.module.Configuration;`
     */
    Configuration configuration();
};


/**
 * Classpath: `java.lang.module.ModuleReference`
 * Package name: `java.lang.module`
 */
class ModuleReference : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleReference";
public:
    STATICINITIALIZE;

    ModuleReference(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.module.ModuleReference`
     * Signature: `()Ljava.lang.module.ModuleDescriptor;`
     */
    ModuleDescriptor descriptor();

    /**
     * Declaring class: `java.lang.module.ModuleReference`
     * Signature: `()Ljava.util.Optional;`
     */
    Optional location();

    /**
     * Declaring class: `java.lang.module.ModuleReference`
     * Signature: `()Ljava.lang.module.ModuleReader;`
     * Throws: `java.io.IOException`
     */
    ModuleReader open();
};


/**
 * Classpath: `java.lang.module.ModuleReader`
 * Package name: `java.lang.module`
 */
class ModuleReader : public JavaObject {
protected:
    const inline static char *className = "java.lang.module.ModuleReader";
public:
    STATICINITIALIZE;

    ModuleReader(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `jdk.internal.module.ServicesCatalog`
 * Package name: `jdk.internal.module`
 */
class ServicesCatalog : public Object {
protected:
    const inline static char *className = "jdk.internal.module.ServicesCatalog";
public:
    STATICINITIALIZE;

    ServicesCatalog(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `(Ljava.lang.Module;)V`
     */
    void register_(Module arg0);

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `(Ljava.lang.ClassLoader;)Ljdk.internal.module.ServicesCatalog;`
     */
    static ServicesCatalog getServicesCatalog(ClassLoader arg0);

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `(Ljava.lang.Module;Ljava.lang.Class;Ljava.lang.Class;)V`
     */
    void addProvider(Module arg0, Class arg1, Class arg2);

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `()Ljdk.internal.module.ServicesCatalog;`
     */
    static ServicesCatalog create();

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `(Ljava.lang.ClassLoader;Ljdk.internal.module.ServicesCatalog;)V`
     */
    static void putServicesCatalog(ClassLoader arg0, ServicesCatalog arg1);

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `(Ljava.lang.String;[Ljdk.internal.module.ServicesCatalog$ServiceProvider;)V`
     */
    void addProviders(String arg0, ServicesCatalog_ServiceProvider_interface arg1);

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `(Ljava.lang.String;)Ljava.util.List;`
     */
    List findServices(String arg0);

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog`
     * Signature: `(Ljava.lang.ClassLoader;)Ljdk.internal.module.ServicesCatalog;`
     */
    static ServicesCatalog getServicesCatalogOrNull(ClassLoader arg0);
};


/**
 * Classpath: `[Ljdk.internal.module.ServicesCatalog$ServiceProvider;`
 */
class ServicesCatalog_ServiceProvider_interface : public Object {
protected:
    const inline static char *className = "[Ljdk.internal.module.ServicesCatalog$ServiceProvider;";
public:
    STATICINITIALIZE;

    ServicesCatalog_ServiceProvider_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.ModuleLayer$Controller`
 * Enclosing class: `java.lang.ModuleLayer`
 * Package name: `java.lang`
 */
class ModuleLayer_Controller : public Object {
protected:
    const inline static char *className = "java.lang.ModuleLayer$Controller";
public:
    STATICINITIALIZE;

    ModuleLayer_Controller(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.ModuleLayer$Controller`
     * Signature: `(Ljava.lang.Module;Ljava.lang.Module;)Ljava.lang.ModuleLayer$Controller;`
     */
    ModuleLayer_Controller addReads(Module arg0, Module arg1);

    /**
     * Declaring class: `java.lang.ModuleLayer$Controller`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.ModuleLayer$Controller;`
     */
    ModuleLayer_Controller addExports(Module arg0, String arg1, Module arg2);

    /**
     * Declaring class: `java.lang.ModuleLayer$Controller`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.ModuleLayer$Controller;`
     */
    ModuleLayer_Controller addOpens(Module arg0, String arg1, Module arg2);

    /**
     * Declaring class: `java.lang.ModuleLayer$Controller`
     * Signature: `()Ljava.lang.ModuleLayer;`
     */
    ModuleLayer layer();

    /**
     * Declaring class: `java.lang.ModuleLayer$Controller`
     * Signature: `(Ljava.lang.Module;)V`
     */
    void ensureInLayer(Module arg0);
};


/**
 * Classpath: `java.lang.LayerInstantiationException`
 * Package name: `java.lang`
 */
class LayerInstantiationException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.LayerInstantiationException";
public:
    STATICINITIALIZE;

    LayerInstantiationException(jobject object) : RuntimeException(object) {}

};


/**
 * Classpath: `java.net.URL`
 * Package name: `java.net`
 */
class URL : public Object {
protected:
    const inline static char *className = "java.net.URL";
public:
    STATICINITIALIZE;

    URL(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String toLowerCase(String arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.io.InputStream;`
     * Throws: `java.io.IOException`
     */
    InputStream openStream();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void set(String arg0, String arg1, int arg2, String arg3, String arg4, String arg5, String arg6, String arg7);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.net.InetAddress;`
     */
    InetAddress getHostAddress();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.ObjectStreamException`
     */
    Object readResolve();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.SecurityManager;)V`
     */
    void checkSpecifyHandler(SecurityManager arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;)Ljava.net.URLStreamHandler;`
     */
    static URLStreamHandler getURLStreamHandler(String arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool isBuiltinStreamHandler(String arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.net.URLStreamHandler;)Z`
     */
    bool isBuiltinStreamHandler(URLStreamHandler arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool isValidProtocol(String arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getHost();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()I`
     */
    int getPort();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()I`
     */
    int getDefaultPort();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.net.URL;)Z`
     */
    bool sameFile(URL arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String toExternalForm();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.net.URLConnection;`
     * Throws: `java.io.IOException`
     */
    URLConnection openConnection();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.net.Proxy;)Ljava.net.URLConnection;`
     * Throws: `java.io.IOException`
     */
    URLConnection openConnection(Proxy arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object getContent();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `([Ljava.lang.Class;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object getContent(Class_interface arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isOverrideable(String arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;)Ljava.net.URLStreamHandler;`
     */
    static URLStreamHandler lookupViaProviders(String arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.lang.String;)Ljava.net.URLStreamHandler;`
     */
    static URLStreamHandler lookupViaProperty(String arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getProtocol();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.net.URL;`
     * Throws: `java.io.InvalidObjectException`
     */
    URL fabricateNewURL();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.net.URLStreamHandler;)Ljava.net.URL;`
     */
    URL setDeserializedFields(URLStreamHandler arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getAuthority();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getFile();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getRef();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()V`
     */
    void resetState();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(I)V`
     */
    void setSerializedHashCode(int arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.net.URI;)Ljava.net.URL;`
     * Throws: `java.net.MalformedURLException`
     */
    static URL fromURI(URI arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getQuery();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getPath();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.lang.String;`
     */
    String getUserInfo();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.net.URI;`
     * Throws: `java.net.URISyntaxException`
     */
    URI toURI();

    /**
     * Declaring class: `java.net.URL`
     * Signature: `(Ljava.net.URLStreamHandlerFactory;)V`
     */
    static void setURLStreamHandlerFactory(URLStreamHandlerFactory arg0);

    /**
     * Declaring class: `java.net.URL`
     * Signature: `()Ljava.util.Iterator;`
     */
    static Iterator providers();
};


/**
 * Classpath: `java.net.InetAddress`
 * Package name: `java.net`
 */
class InetAddress : public Object {
protected:
    const inline static char *className = "java.net.InetAddress";
public:
    STATICINITIALIZE;

    InetAddress(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()V`
     */
    static void init();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.lang.String;`
     */
    String getHostAddress();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.ObjectStreamException`
     */
    Object readResolve();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.lang.String;)Ljava.net.InetAddress;`
     * Throws: `java.net.UnknownHostException`
     */
    static InetAddress getByName(String arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.lang.String;Ljava.net.InetAddress;)Ljava.net.InetAddress;`
     * Throws: `java.net.UnknownHostException`
     */
    static InetAddress getByName(String arg0, InetAddress arg1);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.lang.String;`
     */
    String getHostName();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Z)Ljava.lang.String;`
     */
    String getHostName(bool arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.net.InetAddress$InetAddressHolder;`
     */
    InetAddress_InetAddressHolder holder();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()V`
     */
    void readObjectNoData();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(I)Z`
     * Throws: `java.io.IOException`
     */
    bool isReachable(int arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.net.NetworkInterface;II)Z`
     * Throws: `java.io.IOException`
     */
    bool isReachable(NetworkInterface arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.net.InetAddress;Z)Ljava.lang.String;`
     */
    static String getHostFromNameService(InetAddress arg0, bool arg1);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.lang.String;)I`
     * Throws: `java.net.UnknownHostException`
     */
    static int checkNumericZone(String arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.lang.String;[B)Ljava.net.InetAddress;`
     * Throws: `java.net.UnknownHostException`
     */
    static InetAddress getByAddress(String arg0, arr_B arg1);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `([B)Ljava.net.InetAddress;`
     * Throws: `java.net.UnknownHostException`
     */
    static InetAddress getByAddress(arr_B arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.net.InetAddress;`
     */
    static InetAddress anyLocalAddress();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.net.InetAddress$NameService;`
     */
    static InetAddress_NameService createNameService();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isMulticastAddress();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isAnyLocalAddress();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isLoopbackAddress();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isSiteLocalAddress();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isMCGlobal();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isMCNodeLocal();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isMCLinkLocal();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isMCSiteLocal();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isMCOrgLocal();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.lang.String;`
     */
    String getCanonicalHostName();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.net.InetAddress;`
     */
    static InetAddress getLoopbackAddress();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `(Ljava.lang.String;)Ljava.net.InetAddressImpl;`
     */
    static InetAddressImpl loadImpl(String arg0);

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Ljava.net.InetAddress;`
     * Throws: `java.net.UnknownHostException`
     */
    static InetAddress getLocalHost();

    /**
     * Declaring class: `java.net.InetAddress`
     * Signature: `()Z`
     */
    bool isLinkLocalAddress();
};


/**
 * Classpath: `java.net.InetAddress$InetAddressHolder`
 * Enclosing class: `java.net.InetAddress`
 * Package name: `java.net`
 */
class InetAddress_InetAddressHolder : public Object {
protected:
    const inline static char *className = "java.net.InetAddress$InetAddressHolder";
public:
    STATICINITIALIZE;

    InetAddress_InetAddressHolder(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.InetAddress$InetAddressHolder`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void init(String arg0, int arg1);

    /**
     * Declaring class: `java.net.InetAddress$InetAddressHolder`
     * Signature: `()I`
     */
    int getAddress();

    /**
     * Declaring class: `java.net.InetAddress$InetAddressHolder`
     * Signature: `()Ljava.lang.String;`
     */
    String getHostName();

    /**
     * Declaring class: `java.net.InetAddress$InetAddressHolder`
     * Signature: `()I`
     */
    int getFamily();

    /**
     * Declaring class: `java.net.InetAddress$InetAddressHolder`
     * Signature: `()Ljava.lang.String;`
     */
    String getOriginalHostName();
};


/**
 * Classpath: `java.net.NetworkInterface`
 * Package name: `java.net`
 */
class NetworkInterface : public Object {
protected:
    const inline static char *className = "java.net.NetworkInterface";
public:
    STATICINITIALIZE;

    NetworkInterface(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.net.NetworkInterface;`
     */
    static NetworkInterface getDefault();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.net.NetworkInterface;`
     */
    NetworkInterface getParent();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()V`
     */
    static void init();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.String;)Ljava.net.NetworkInterface;`
     * Throws: `java.net.SocketException`
     */
    static NetworkInterface getByName(String arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()I`
     */
    int getIndex();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration getInetAddresses();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.net.InetAddress;)Z`
     * Throws: `java.net.SocketException`
     */
    static bool isBoundInetAddress(InetAddress arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.util.Enumeration;`
     * Throws: `java.net.SocketException`
     */
    static Enumeration getNetworkInterfaces();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayName();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.util.stream.Stream;`
     * Throws: `java.net.SocketException`
     */
    static Stream networkInterfaces();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream inetAddresses();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `([Ljava.lang.Object;)Ljava.util.Enumeration;`
     */
    static Enumeration enumerationFromArray(Object_interface arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `([Ljava.lang.Object;)Ljava.util.stream.Stream;`
     */
    static Stream streamFromArray(Object_interface arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.String;)Ljava.net.NetworkInterface;`
     * Throws: `java.net.SocketException`
     */
    static NetworkInterface getByName0(String arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(I)Ljava.net.NetworkInterface;`
     * Throws: `java.net.SocketException`
     */
    static NetworkInterface getByIndex0(int arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.net.InetAddress;)Ljava.net.NetworkInterface;`
     * Throws: `java.net.SocketException`
     */
    static NetworkInterface getByInetAddress0(InetAddress arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.net.InetAddress;)Z`
     * Throws: `java.net.SocketException`
     */
    static bool boundInetAddress0(InetAddress arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.String;I)Z`
     * Throws: `java.net.SocketException`
     */
    static bool isUp0(String arg0, int arg1);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.String;I)Z`
     * Throws: `java.net.SocketException`
     */
    static bool isLoopback0(String arg0, int arg1);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.String;I)Z`
     * Throws: `java.net.SocketException`
     */
    static bool isP2P0(String arg0, int arg1);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.String;I)Z`
     * Throws: `java.net.SocketException`
     */
    static bool supportsMulticast0(String arg0, int arg1);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.lang.String;I)I`
     * Throws: `java.net.SocketException`
     */
    static int getMTU0(String arg0, int arg1);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.util.List;`
     */
    List getInterfaceAddresses();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration getSubInterfaces();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream subInterfaces();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(I)Ljava.net.NetworkInterface;`
     * Throws: `java.net.SocketException`
     */
    static NetworkInterface getByIndex(int arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `(Ljava.net.InetAddress;)Ljava.net.NetworkInterface;`
     * Throws: `java.net.SocketException`
     */
    static NetworkInterface getByInetAddress(InetAddress arg0);

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Z`
     * Throws: `java.net.SocketException`
     */
    bool isUp();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Z`
     * Throws: `java.net.SocketException`
     */
    bool isLoopback();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Z`
     * Throws: `java.net.SocketException`
     */
    bool isPointToPoint();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Z`
     * Throws: `java.net.SocketException`
     */
    bool supportsMulticast();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()I`
     * Throws: `java.net.SocketException`
     */
    int getMTU();

    /**
     * Declaring class: `java.net.NetworkInterface`
     * Signature: `()Z`
     */
    bool isVirtual();
};


/**
 * Classpath: `java.net.InetAddress$NameService`
 * Enclosing class: `java.net.InetAddress`
 * Package name: `java.net`
 */
class InetAddress_NameService : public JavaObject {
protected:
    const inline static char *className = "java.net.InetAddress$NameService";
public:
    STATICINITIALIZE;

    InetAddress_NameService(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.net.InetAddressImpl`
 * Package name: `java.net`
 */
class InetAddressImpl : public JavaObject {
protected:
    const inline static char *className = "java.net.InetAddressImpl";
public:
    STATICINITIALIZE;

    InetAddressImpl(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.net.URLStreamHandler`
 * Package name: `java.net`
 */
class URLStreamHandler : public Object {
protected:
    const inline static char *className = "java.net.URLStreamHandler";
public:
    STATICINITIALIZE;

    URLStreamHandler(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;Ljava.net.URL;)Z`
     */
    bool equals(URL arg0, URL arg1);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;)I`
     */
    int hashCode(URL arg0);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;)Ljava.net.InetAddress;`
     */
    InetAddress getHostAddress(URL arg0);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;Ljava.lang.String;II)V`
     */
    void parseURL(URL arg0, String arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `()I`
     */
    int getDefaultPort();

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;Ljava.net.URL;)Z`
     */
    bool sameFile(URL arg0, URL arg1);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;)Ljava.lang.String;`
     */
    String toExternalForm(URL arg0);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;)Ljava.net.URLConnection;`
     * Throws: `java.io.IOException`
     */
    URLConnection openConnection(URL arg0);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;Ljava.net.Proxy;)Ljava.net.URLConnection;`
     * Throws: `java.io.IOException`
     */
    URLConnection openConnection(URL arg0, Proxy arg1);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;Ljava.net.URL;)Z`
     */
    bool hostsEqual(URL arg0, URL arg1);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void setURL(URL arg0, String arg1, String arg2, int arg3, String arg4, String arg5, String arg6, String arg7, String arg8);

    /**
     * Declaring class: `java.net.URLStreamHandler`
     * Signature: `(Ljava.net.URL;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;)V`
     */
    void setURL(URL arg0, String arg1, String arg2, int arg3, String arg4, String arg5);
};


/**
 * Classpath: `java.net.URLConnection`
 * Package name: `java.net`
 */
class URLConnection : public Object {
protected:
    const inline static char *className = "java.net.URLConnection";
public:
    STATICINITIALIZE;

    URLConnection(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void connect();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.io.InputStream;`
     * Throws: `java.io.IOException`
     */
    InputStream getInputStream();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object getContent();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `([Ljava.lang.Class;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object getContent(Class_interface arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `([IILjava.io.InputStream;)I`
     * Throws: `java.io.IOException`
     */
    static int readBytes(arr_I arg0, int arg1, InputStream arg2);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void setRequestProperty(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.net.URL;`
     */
    URL getURL();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Z)V`
     */
    void setUseCaches(bool arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()I`
     */
    int getContentLength();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.security.Permission;`
     * Throws: `java.io.IOException`
     */
    Permission getPermission();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Z`
     */
    bool getDefaultUseCaches();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool getDefaultUseCaches(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()J`
     */
    long getContentLengthLong();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;J)J`
     */
    long getHeaderFieldLong(String arg0, long arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getHeaderField(int arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getHeaderField(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;J)J`
     */
    long getHeaderFieldDate(String arg0, long arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.net.ContentHandler;`
     * Throws: `java.net.UnknownServiceException`
     */
    ContentHandler getContentHandler();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()V`
     */
    void checkConnected();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.lang.String;`
     */
    String getContentType();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String stripOffParameters(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.net.ContentHandler;`
     */
    ContentHandler lookupContentHandlerViaProvider(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.net.ContentHandler;`
     */
    ContentHandler lookupContentHandlerClassFor(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String typeToPackageName(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.lang.String;`
     */
    String getContentHandlerPkgPrefixes();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.net.FileNameMap;`
     */
    static FileNameMap getFileNameMap();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.io.InputStream;)Z`
     * Throws: `java.io.IOException`
     */
    static bool checkfpx(InputStream arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.io.InputStream;J)J`
     * Throws: `java.io.IOException`
     */
    static long skipForward(InputStream arg0, long arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.net.FileNameMap;)V`
     */
    static void setFileNameMap(FileNameMap arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(I)V`
     */
    void setConnectTimeout(int arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()I`
     */
    int getConnectTimeout();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(I)V`
     */
    void setReadTimeout(int arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()I`
     */
    int getReadTimeout();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.lang.String;`
     */
    String getContentEncoding();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()J`
     */
    long getExpiration();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()J`
     */
    long getDate();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()J`
     */
    long getLastModified();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.util.Map;`
     */
    Map getHeaderFields();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int getHeaderFieldInt(String arg0, int arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getHeaderFieldKey(int arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.io.OutputStream;`
     * Throws: `java.io.IOException`
     */
    OutputStream getOutputStream();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Z)V`
     */
    void setDoInput(bool arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Z`
     */
    bool getDoInput();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Z)V`
     */
    void setDoOutput(bool arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Z`
     */
    bool getDoOutput();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Z)V`
     */
    void setAllowUserInteraction(bool arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Z`
     */
    bool getAllowUserInteraction();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Z)V`
     */
    static void setDefaultAllowUserInteraction(bool arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Z`
     */
    static bool getDefaultAllowUserInteraction();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Z`
     */
    bool getUseCaches();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(J)V`
     */
    void setIfModifiedSince(long arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()J`
     */
    long getIfModifiedSince();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    static void setDefaultUseCaches(String arg0, bool arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Z)V`
     */
    void setDefaultUseCaches(bool arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void addRequestProperty(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getRequestProperty(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `()Ljava.util.Map;`
     */
    Map getRequestProperties();

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    static void setDefaultRequestProperty(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String getDefaultRequestProperty(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.net.ContentHandlerFactory;)V`
     */
    static void setContentHandlerFactory(ContentHandlerFactory arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String guessContentTypeFromName(String arg0);

    /**
     * Declaring class: `java.net.URLConnection`
     * Signature: `(Ljava.io.InputStream;)Ljava.lang.String;`
     * Throws: `java.io.IOException`
     */
    static String guessContentTypeFromStream(InputStream arg0);
};


/**
 * Classpath: `[Ljava.lang.Class;`
 */
class Class_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Class;";
public:
    STATICINITIALIZE;

    Class_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.net.ContentHandler`
 * Package name: `java.net`
 */
class ContentHandler : public Object {
protected:
    const inline static char *className = "java.net.ContentHandler";
public:
    STATICINITIALIZE;

    ContentHandler(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.ContentHandler`
     * Signature: `(Ljava.net.URLConnection;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object getContent(URLConnection arg0);

    /**
     * Declaring class: `java.net.ContentHandler`
     * Signature: `(Ljava.net.URLConnection;[Ljava.lang.Class;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object getContent(URLConnection arg0, Class_interface arg1);
};


/**
 * Classpath: `java.net.FileNameMap`
 * Package name: `java.net`
 */
class FileNameMap : public JavaObject {
protected:
    const inline static char *className = "java.net.FileNameMap";
public:
    STATICINITIALIZE;

    FileNameMap(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.net.ContentHandlerFactory`
 * Package name: `java.net`
 */
class ContentHandlerFactory : public JavaObject {
protected:
    const inline static char *className = "java.net.ContentHandlerFactory";
public:
    STATICINITIALIZE;

    ContentHandlerFactory(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.net.Proxy`
 * Package name: `java.net`
 */
class Proxy : public Object {
protected:
    const inline static char *className = "java.net.Proxy";
public:
    STATICINITIALIZE;

    Proxy(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.Proxy`
     * Signature: `()Ljava.net.Proxy$Type;`
     */
    Proxy_Type type();

    /**
     * Declaring class: `java.net.Proxy`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.net.Proxy`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.net.Proxy`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.net.Proxy`
     * Signature: `()Ljava.net.SocketAddress;`
     */
    SocketAddress address();
};


/**
 * Classpath: `java.net.Proxy$Type`
 * Enclosing class: `java.net.Proxy`
 * Package name: `java.net`
 */
class Proxy_Type : public Enum {
protected:
    const inline static char *className = "java.net.Proxy$Type";
public:
    STATICINITIALIZE;

    Proxy_Type(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.net.Proxy$Type`
     * Signature: `(Ljava.lang.String;)Ljava.net.Proxy$Type;`
     */
    static Proxy_Type valueOf(String arg0);
};


/**
 * Classpath: `java.net.SocketAddress`
 * Package name: `java.net`
 */
class SocketAddress : public Object {
protected:
    const inline static char *className = "java.net.SocketAddress";
public:
    STATICINITIALIZE;

    SocketAddress(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.net.URI`
 * Package name: `java.net`
 */
class URI : public Object {
protected:
    const inline static char *className = "java.net.URI";
public:
    STATICINITIALIZE;

    URI(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String toString(String arg0, String arg1, String arg2, String arg3, String arg4, int arg5, String arg6, String arg7, String arg8);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)I`
     */
    static int compare(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(ILjava.lang.String;)I`
     */
    static int hash(int arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(C)I`
     */
    static int decode(char arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(CC)B`
     */
    static byte decode(char arg0, char arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Z)Ljava.lang.String;`
     */
    static String decode(String arg0, bool arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String decode(String arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String encode(String arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `([C[I)V`
     */
    static void split(arr_C arg0, arr_I arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `([C[I)I`
     */
    static int join(arr_C arg0, arr_I arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Z`
     */
    bool isAbsolute();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;)Ljava.net.URI;`
     */
    URI resolve(String arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.net.URI;Ljava.net.URI;)Ljava.net.URI;`
     */
    static URI resolve(URI arg0, URI arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.net.URI;)Ljava.net.URI;`
     */
    URI resolve(URI arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(CJJ)Z`
     */
    static bool match(char arg0, long arg1, long arg2);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.net.URI;`
     */
    URI normalize();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String normalize(String arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.net.URI;)Ljava.net.URI;`
     */
    static URI normalize(URI arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getScheme();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Z`
     */
    bool isOpaque();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getRawFragment();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getRawQuery();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getRawPath();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getHost();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()I`
     */
    int getPort();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;)Ljava.net.URI;`
     */
    static URI create(String arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getAuthority();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getQuery();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getPath();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getUserInfo();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(C)I`
     */
    static int toLower(char arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.net.URL;`
     * Throws: `java.net.MalformedURLException`
     */
    URL toURL();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Z`
     */
    static bool equal(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getRawAuthority();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.net.URI;Ljava.net.URI;)Ljava.net.URI;`
     */
    static URI relativize(URI arg0, URI arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.net.URI;)Ljava.net.URI;`
     */
    URI relativize(URI arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     * Throws: `java.net.URISyntaxException`
     */
    static void checkPath(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Z`
     */
    static bool validSchemeAndPath(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.StringBuilder;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;)V`
     */
    void appendSchemeSpecificPart(StringBuilder arg0, String arg1, String arg2, String arg3, String arg4, int arg5, String arg6, String arg7);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getRawSchemeSpecificPart();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Z`
     */
    static bool equalIgnoringCase(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(ILjava.lang.String;)I`
     */
    static int hashIgnoringCase(int arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)I`
     */
    static int compareIgnoringCase(String arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String defineString();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Z)I`
     */
    static int percentNormalizedComparison(String arg0, String arg1, bool arg2);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(ILjava.lang.String;)I`
     */
    static int normalizedHash(int arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(C)I`
     */
    static int toUpper(char arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;JJ)Ljava.lang.String;`
     */
    static String quote(String arg0, long arg1, long arg2);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.StringBuilder;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;I)V`
     */
    void appendAuthority(StringBuilder arg0, String arg1, String arg2, String arg3, int arg4);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.StringBuilder;Ljava.lang.String;)V`
     */
    void appendFragment(StringBuilder arg0, String arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Z)Ljava.lang.String;`
     */
    static String resolvePath(String arg0, String arg1, bool arg2);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.String;)I`
     */
    static int needsNormalization(String arg0);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `([C[I)V`
     */
    static void removeDots(arr_C arg0, arr_I arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `([C[I)V`
     */
    static void maybeAddLeadingDot(arr_C arg0, arr_I arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.lang.StringBuilder;B)V`
     */
    static void appendEscape(StringBuilder arg0, byte arg1);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `(Ljava.nio.charset.CharsetEncoder;Ljava.lang.StringBuilder;C)V`
     */
    static void appendEncoded(CharsetEncoder arg0, StringBuilder arg1, char arg2);

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.net.URI;`
     * Throws: `java.net.URISyntaxException`
     */
    URI parseServerAuthority();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getSchemeSpecificPart();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getRawUserInfo();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String getFragment();

    /**
     * Declaring class: `java.net.URI`
     * Signature: `()Ljava.lang.String;`
     */
    String toASCIIString();
};


/**
 * Classpath: `java.nio.charset.CharsetEncoder`
 * Package name: `java.nio.charset`
 */
class CharsetEncoder : public Object {
protected:
    const inline static char *className = "java.nio.charset.CharsetEncoder";
public:
    STATICINITIALIZE;

    CharsetEncoder(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetEncoder;`
     */
    CharsetEncoder onMalformedInput(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetEncoder;`
     */
    CharsetEncoder onUnmappableCharacter(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `()F`
     */
    float maxBytesPerChar();

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.CharBuffer;Ljava.nio.ByteBuffer;Z)Ljava.nio.charset.CoderResult;`
     */
    CoderResult encode(CharBuffer arg0, ByteBuffer arg1, bool arg2);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.CharBuffer;)Ljava.nio.ByteBuffer;`
     * Throws: `java.nio.charset.CharacterCodingException`
     */
    ByteBuffer encode(CharBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.ByteBuffer;)Ljava.nio.charset.CoderResult;`
     */
    CoderResult flush(ByteBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.lang.CharSequence;)Z`
     */
    bool canEncode(CharSequence arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(C)Z`
     */
    bool canEncode(char arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.CharBuffer;)Z`
     */
    bool canEncode(CharBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `()Ljava.nio.charset.Charset;`
     */
    Charset charset();

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `()Ljava.nio.charset.CharsetEncoder;`
     */
    CharsetEncoder reset();

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.ByteBuffer;)Ljava.nio.charset.CoderResult;`
     */
    CoderResult implFlush(ByteBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `([B)Z`
     */
    bool isLegalReplacement(arr_B arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.CharBuffer;Ljava.nio.ByteBuffer;)Ljava.nio.charset.CoderResult;`
     */
    CoderResult encodeLoop(CharBuffer arg0, ByteBuffer arg1);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `()Ljava.nio.charset.CodingErrorAction;`
     */
    CodingErrorAction malformedInputAction();

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `()Ljava.nio.charset.CodingErrorAction;`
     */
    CodingErrorAction unmappableCharacterAction();

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `()F`
     */
    float averageBytesPerChar();

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `([B)Ljava.nio.charset.CharsetEncoder;`
     */
    CharsetEncoder replaceWith(arr_B arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `([B)V`
     */
    void implReplaceWith(arr_B arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)V`
     */
    void implOnMalformedInput(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)V`
     */
    void implOnUnmappableCharacter(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `(II)V`
     */
    void throwIllegalStateException(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.charset.CharsetEncoder`
     * Signature: `()V`
     */
    void implReset();
};


/**
 * Classpath: `java.nio.charset.CodingErrorAction`
 * Package name: `java.nio.charset`
 */
class CodingErrorAction : public Object {
protected:
    const inline static char *className = "java.nio.charset.CodingErrorAction";
public:
    STATICINITIALIZE;

    CodingErrorAction(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.nio.charset.CodingErrorAction`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `java.nio.charset.CoderResult`
 * Package name: `java.nio.charset`
 */
class CoderResult : public Object {
protected:
    const inline static char *className = "java.nio.charset.CoderResult";
public:
    STATICINITIALIZE;

    CoderResult(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()I`
     */
    int length();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()Z`
     */
    bool isUnderflow();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()V`
     * Throws: `java.nio.charset.CharacterCodingException`
     */
    void throwException();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()Z`
     */
    bool isOverflow();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()Z`
     */
    bool isError();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `(I)Ljava.nio.charset.CoderResult;`
     */
    static CoderResult malformedForLength(int arg0);

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()Z`
     */
    bool isMalformed();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `()Z`
     */
    bool isUnmappable();

    /**
     * Declaring class: `java.nio.charset.CoderResult`
     * Signature: `(I)Ljava.nio.charset.CoderResult;`
     */
    static CoderResult unmappableForLength(int arg0);
};


/**
 * Classpath: `java.nio.charset.Charset`
 * Package name: `java.nio.charset`
 */
class Charset : public Object {
protected:
    const inline static char *className = "java.nio.charset.Charset";
public:
    STATICINITIALIZE;

    Charset(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.lang.String;`
     */
    String name();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.util.Iterator;Ljava.util.Map;)V`
     */
    static void put(Iterator arg0, Map arg1);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     */
    static Charset forName(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;Ljava.nio.charset.Charset;)V`
     */
    static void cache(String arg0, Charset arg1);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.nio.charset.CharsetDecoder;`
     */
    CharsetDecoder newDecoder();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.nio.ByteBuffer;)Ljava.nio.CharBuffer;`
     */
    CharBuffer decode(ByteBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.nio.charset.CharsetEncoder;`
     */
    CharsetEncoder newEncoder();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer encode(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.nio.CharBuffer;)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer encode(CharBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.nio.charset.Charset;`
     */
    static Charset defaultCharset();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Z`
     */
    bool canEncode();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.nio.charset.Charset;)Z`
     */
    bool contains(Charset arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     */
    static Charset lookup(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Z`
     */
    bool isRegistered();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)V`
     */
    static void checkName(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     */
    static Charset lookupViaProviders(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.util.Iterator;`
     */
    static Iterator providers();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     */
    static Charset lookup2(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     */
    static Charset lookupExtendedCharset(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.util.Set;`
     */
    Set aliases();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isSupported(String arg0);

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.util.SortedMap;`
     */
    static SortedMap availableCharsets();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `()Ljava.lang.String;`
     */
    String displayName();

    /**
     * Declaring class: `java.nio.charset.Charset`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String displayName(Locale arg0);
};


/**
 * Classpath: `java.util.Iterator`
 * Package name: `java.util`
 */
class Iterator : public JavaObject {
protected:
    const inline static char *className = "java.util.Iterator";
public:
    STATICINITIALIZE;

    Iterator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.nio.charset.CharsetDecoder`
 * Package name: `java.nio.charset`
 */
class CharsetDecoder : public Object {
protected:
    const inline static char *className = "java.nio.charset.CharsetDecoder";
public:
    STATICINITIALIZE;

    CharsetDecoder(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()F`
     */
    float maxCharsPerByte();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetDecoder;`
     */
    CharsetDecoder onMalformedInput(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetDecoder;`
     */
    CharsetDecoder onUnmappableCharacter(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.ByteBuffer;)Ljava.nio.CharBuffer;`
     * Throws: `java.nio.charset.CharacterCodingException`
     */
    CharBuffer decode(ByteBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.ByteBuffer;Ljava.nio.CharBuffer;Z)Ljava.nio.charset.CoderResult;`
     */
    CoderResult decode(ByteBuffer arg0, CharBuffer arg1, bool arg2);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.CharBuffer;)Ljava.nio.charset.CoderResult;`
     */
    CoderResult flush(CharBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Ljava.nio.charset.Charset;`
     */
    Charset charset();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Ljava.lang.String;`
     */
    String replacement();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Ljava.nio.charset.CharsetDecoder;`
     */
    CharsetDecoder reset();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.CharBuffer;)Ljava.nio.charset.CoderResult;`
     */
    CoderResult implFlush(CharBuffer arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Ljava.nio.charset.CodingErrorAction;`
     */
    CodingErrorAction malformedInputAction();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Ljava.nio.charset.CodingErrorAction;`
     */
    CodingErrorAction unmappableCharacterAction();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.CharsetDecoder;`
     */
    CharsetDecoder replaceWith(String arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.lang.String;)V`
     */
    void implReplaceWith(String arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)V`
     */
    void implOnMalformedInput(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.charset.CodingErrorAction;)V`
     */
    void implOnUnmappableCharacter(CodingErrorAction arg0);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(II)V`
     */
    void throwIllegalStateException(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()V`
     */
    void implReset();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `(Ljava.nio.ByteBuffer;Ljava.nio.CharBuffer;)Ljava.nio.charset.CoderResult;`
     */
    CoderResult decodeLoop(ByteBuffer arg0, CharBuffer arg1);

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()F`
     */
    float averageCharsPerByte();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Z`
     */
    bool isAutoDetecting();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Z`
     */
    bool isCharsetDetected();

    /**
     * Declaring class: `java.nio.charset.CharsetDecoder`
     * Signature: `()Ljava.nio.charset.Charset;`
     */
    Charset detectedCharset();
};


/**
 * Classpath: `java.util.SortedMap`
 * Package name: `java.util`
 */
class SortedMap : public JavaObject {
protected:
    const inline static char *className = "java.util.SortedMap";
public:
    STATICINITIALIZE;

    SortedMap(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.net.URLStreamHandlerFactory`
 * Package name: `java.net`
 */
class URLStreamHandlerFactory : public JavaObject {
protected:
    const inline static char *className = "java.net.URLStreamHandlerFactory";
public:
    STATICINITIALIZE;

    URLStreamHandlerFactory(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.NamedPackage`
 * Package name: `java.lang`
 */
class NamedPackage : public Object {
protected:
    const inline static char *className = "java.lang.NamedPackage";
public:
    STATICINITIALIZE;

    NamedPackage(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.NamedPackage`
     * Signature: `()Ljava.lang.Module;`
     */
    Module module();

    /**
     * Declaring class: `java.lang.NamedPackage`
     * Signature: `()Ljava.lang.String;`
     */
    String packageName();

    /**
     * Declaring class: `java.lang.NamedPackage`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Package;`
     */
    static Package toPackage(String arg0, Module arg1);

    /**
     * Declaring class: `java.lang.NamedPackage`
     * Signature: `()Ljava.net.URI;`
     */
    URI location();
};


/**
 * Classpath: `java.lang.Void`
 * Package name: `java.lang`
 */
class Void : public Object {
protected:
    const inline static char *className = "java.lang.Void";
public:
    STATICINITIALIZE;

    Void(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.security.CodeSource`
 * Package name: `java.security`
 */
class CodeSource : public Object {
protected:
    const inline static char *className = "java.security.CodeSource";
public:
    STATICINITIALIZE;

    CodeSource(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `()Ljava.net.URL;`
     */
    URL getLocation();

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `(Ljava.security.CodeSource;)Z`
     */
    bool implies(CodeSource arg0);

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `(Ljava.security.CodeSource;Z)Z`
     */
    bool matchCerts(CodeSource arg0, bool arg1);

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `(Ljava.security.CodeSource;)Z`
     */
    bool matchLocation(CodeSource arg0);

    /**
     * Declaring class: `java.security.CodeSource`
     * Signature: `()Ljava.lang.String;`
     */
    String getLocationNoFragString();
};


/**
 * Classpath: `[Ljava.security.cert.Certificate;`
 */
class Certificate_interface : public Object {
protected:
    const inline static char *className = "[Ljava.security.cert.Certificate;";
public:
    STATICINITIALIZE;

    Certificate_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `jdk.internal.loader.NativeLibrary`
 * Package name: `jdk.internal.loader`
 */
class NativeLibrary : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.loader.NativeLibrary";
public:
    STATICINITIALIZE;

    NativeLibrary(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.io.File`
 * Package name: `java.io`
 */
class File : public Object {
protected:
    const inline static char *className = "java.io.File";
public:
    STATICINITIALIZE;

    File(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `()J`
     */
    long length();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool isHidden();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool isAbsolute();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.lang.String;`
     */
    String getParent();

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool delete_();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool setReadOnly();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool canRead();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.lang.String;`
     */
    String getPath();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.net.URI;`
     */
    URI toURI();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.net.URL;`
     * Throws: `java.net.MalformedURLException`
     */
    URL toURL();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool exists();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     * Throws: `java.io.IOException`
     */
    bool createNewFile();

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Ljava.io.File;)Z`
     */
    bool renameTo(File arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool isInvalid();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.lang.String;`
     */
    String getAbsolutePath();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.lang.String;`
     * Throws: `java.io.IOException`
     */
    String getCanonicalPath();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool isDirectory();

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Ljava.lang.String;Z)Ljava.lang.String;`
     */
    static String slashify(String arg0, bool arg1);

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.io.File;`
     */
    File getAbsoluteFile();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool mkdir();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.io.File;`
     * Throws: `java.io.IOException`
     */
    File getCanonicalFile();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.io.File;`
     */
    File getParentFile();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool mkdirs();

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Z)Z`
     */
    bool setWritable(bool arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(ZZ)Z`
     */
    bool setWritable(bool arg0, bool arg1);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Z)Z`
     */
    bool setReadable(bool arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(ZZ)Z`
     */
    bool setReadable(bool arg0, bool arg1);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(ZZ)Z`
     */
    bool setExecutable(bool arg0, bool arg1);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Z)Z`
     */
    bool setExecutable(bool arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.io.File;)Ljava.io.File;`
     * Throws: `java.io.IOException`
     */
    static File createTempFile(String arg0, String arg1, File arg2);

    /**
     * Declaring class: `java.io.File`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.io.File;`
     * Throws: `java.io.IOException`
     */
    static File createTempFile(String arg0, String arg1);

    /**
     * Declaring class: `java.io.File`
     * Signature: `()I`
     */
    int getPrefixLength();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool canWrite();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool isFile();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()J`
     */
    long lastModified();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()V`
     */
    void deleteOnExit();

    /**
     * Declaring class: `java.io.File`
     * Signature: `(J)Z`
     */
    bool setLastModified(long arg0);

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Z`
     */
    bool canExecute();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()J`
     */
    long getTotalSpace();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()J`
     */
    long getFreeSpace();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()J`
     */
    long getUsableSpace();

    /**
     * Declaring class: `java.io.File`
     * Signature: `()Ljava.nio.file.Path;`
     */
    Path toPath();
};


/**
 * Classpath: `java.nio.file.Path`
 * Package name: `java.nio.file`
 */
class Path : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.Path";
public:
    STATICINITIALIZE;

    Path(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.AssertionStatusDirectives`
 * Package name: `java.lang`
 */
class AssertionStatusDirectives : public Object {
protected:
    const inline static char *className = "java.lang.AssertionStatusDirectives";
public:
    STATICINITIALIZE;

    AssertionStatusDirectives(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.util.concurrent.ConcurrentHashMap$CollectionView`
 * Enclosing class: `java.util.concurrent.ConcurrentHashMap`
 * Package name: `java.util.concurrent`
 */
class ConcurrentHashMap_CollectionView : public Object {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap$CollectionView";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_CollectionView(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap$CollectionView`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap$CollectionView`
     * Signature: `()Ljava.util.concurrent.ConcurrentHashMap;`
     */
    ConcurrentHashMap getMap();
};


/**
 * Classpath: `[Ljava.util.concurrent.ConcurrentHashMap$Node;`
 */
class ConcurrentHashMap_Node_interface : public Object {
protected:
    const inline static char *className = "[Ljava.util.concurrent.ConcurrentHashMap$Node;";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_Node_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.util.concurrent.ConcurrentHashMap$Node`
 * Enclosing class: `java.util.concurrent.ConcurrentHashMap`
 * Package name: `java.util.concurrent`
 */
class ConcurrentHashMap_Node : public Object {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap$Node";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_Node(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap$Node`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap$Node`
     * Signature: `(ILjava.lang.Object;)Ljava.util.concurrent.ConcurrentHashMap$Node;`
     */
    ConcurrentHashMap_Node find(int arg0, Object arg1);
};


/**
 * Classpath: `java.util.function.BiFunction`
 * Package name: `java.util.function`
 */
class BiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.BiFunction";
public:
    STATICINITIALIZE;

    BiFunction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.ToDoubleBiFunction`
 * Package name: `java.util.function`
 */
class ToDoubleBiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToDoubleBiFunction";
public:
    STATICINITIALIZE;

    ToDoubleBiFunction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.DoubleBinaryOperator`
 * Package name: `java.util.function`
 */
class DoubleBinaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleBinaryOperator";
public:
    STATICINITIALIZE;

    DoubleBinaryOperator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.ToLongBiFunction`
 * Package name: `java.util.function`
 */
class ToLongBiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToLongBiFunction";
public:
    STATICINITIALIZE;

    ToLongBiFunction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.LongBinaryOperator`
 * Package name: `java.util.function`
 */
class LongBinaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongBinaryOperator";
public:
    STATICINITIALIZE;

    LongBinaryOperator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.ToIntBiFunction`
 * Package name: `java.util.function`
 */
class ToIntBiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToIntBiFunction";
public:
    STATICINITIALIZE;

    ToIntBiFunction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.IntBinaryOperator`
 * Package name: `java.util.function`
 */
class IntBinaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntBinaryOperator";
public:
    STATICINITIALIZE;

    IntBinaryOperator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.ToDoubleFunction`
 * Package name: `java.util.function`
 */
class ToDoubleFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToDoubleFunction";
public:
    STATICINITIALIZE;

    ToDoubleFunction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.ToLongFunction`
 * Package name: `java.util.function`
 */
class ToLongFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToLongFunction";
public:
    STATICINITIALIZE;

    ToLongFunction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.function.ToIntFunction`
 * Package name: `java.util.function`
 */
class ToIntFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToIntFunction";
public:
    STATICINITIALIZE;

    ToIntFunction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.Map$Entry`
 * Enclosing class: `java.util.Map`
 * Package name: `java.util`
 */
class Map_Entry : public JavaObject {
protected:
    const inline static char *className = "java.util.Map$Entry";
public:
    STATICINITIALIZE;

    Map_Entry(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.AbstractMap`
 * Package name: `java.util`
 */
class AbstractMap : public Object {
protected:
    const inline static char *className = "java.util.AbstractMap";
public:
    STATICINITIALIZE;

    AbstractMap(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.AbstractMap`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.AbstractMap`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.CloneNotSupportedException`
     */
    Object clone();

    /**
     * Declaring class: `java.util.AbstractMap`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)Z`
     */
    static bool eq(Object arg0, Object arg1);
};


/**
 * Classpath: `sun.reflect.generics.tree.MethodTypeSignature`
 * Package name: `sun.reflect.generics.tree`
 */
class MethodTypeSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.MethodTypeSignature";
public:
    STATICINITIALIZE;

    MethodTypeSignature(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.reflect.generics.tree.MethodTypeSignature`
     * Signature: `([Lsun.reflect.generics.tree.FormalTypeParameter;[Lsun.reflect.generics.tree.TypeSignature;Lsun.reflect.generics.tree.ReturnType;[Lsun.reflect.generics.tree.FieldTypeSignature;)Lsun.reflect.generics.tree.MethodTypeSignature;`
     */
    static MethodTypeSignature make(FormalTypeParameter_interface arg0, TypeSignature_interface arg1, ReturnType arg2, FieldTypeSignature_interface arg3);

    /**
     * Declaring class: `sun.reflect.generics.tree.MethodTypeSignature`
     * Signature: `()Lsun.reflect.generics.tree.ReturnType;`
     */
    ReturnType getReturnType();

    /**
     * Declaring class: `sun.reflect.generics.tree.MethodTypeSignature`
     * Signature: `(Lsun.reflect.generics.visitor.Visitor;)V`
     */
    void accept(Visitor arg0);
};


/**
 * Classpath: `[Lsun.reflect.generics.tree.FormalTypeParameter;`
 */
class FormalTypeParameter_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.FormalTypeParameter;";
public:
    STATICINITIALIZE;

    FormalTypeParameter_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `[Lsun.reflect.generics.tree.TypeSignature;`
 */
class TypeSignature_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.TypeSignature;";
public:
    STATICINITIALIZE;

    TypeSignature_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `sun.reflect.generics.tree.ReturnType`
 * Package name: `sun.reflect.generics.tree`
 */
class ReturnType : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ReturnType";
public:
    STATICINITIALIZE;

    ReturnType(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Lsun.reflect.generics.tree.FieldTypeSignature;`
 */
class FieldTypeSignature_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.FieldTypeSignature;";
public:
    STATICINITIALIZE;

    FieldTypeSignature_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `sun.reflect.generics.visitor.Visitor`
 * Package name: `sun.reflect.generics.visitor`
 */
class Visitor : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.visitor.Visitor";
public:
    STATICINITIALIZE;

    Visitor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.reflect.generics.repository.GenericDeclRepository`
 * Package name: `sun.reflect.generics.repository`
 */
class GenericDeclRepository : public AbstractRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.GenericDeclRepository";
public:
    STATICINITIALIZE;

    GenericDeclRepository(jobject object) : AbstractRepository(object) {}

};


/**
 * Classpath: `jdk.internal.reflect.ConstructorAccessor`
 * Package name: `jdk.internal.reflect`
 */
class ConstructorAccessor : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.reflect.ConstructorAccessor";
public:
    STATICINITIALIZE;

    ConstructorAccessor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.reflect.Executable`
 * Package name: `java.lang.reflect`
 */
class Executable : public AccessibleObject {
protected:
    const inline static char *className = "java.lang.reflect.Executable";
public:
    STATICINITIALIZE;

    Executable(jobject object) : AccessibleObject(object) {}


    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Lsun.reflect.generics.repository.ConstructorRepository;`
     */
    ConstructorRepository getGenericInfo();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Ljava.util.Map;`
     */
    Map declaredAnnotations();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Ljava.lang.String;`
     */
    String toGenericString();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(Ljava.lang.reflect.TypeVariable;)Ljava.lang.String;`
     */
    static String typeVarBounds(TypeVariable arg0);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Z`
     */
    bool hasRealParameterData();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Z`
     */
    bool isVarArgs();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()I`
     */
    int getParameterCount();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `([Ljava.lang.Class;[Ljava.lang.Class;)Z`
     */
    bool equalParamTypes(Class_interface arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(IZ[Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.String;`
     */
    String sharedToString(int arg0, bool arg1, Class_interface arg2, Class_interface arg3);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(IZ)Ljava.lang.String;`
     */
    String sharedToGenericString(int arg0, bool arg1);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(Ljava.lang.reflect.Type;)Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedReturnType0(Type arg0);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Z`
     */
    bool hasGenericInformation();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void specificToStringHeader(StringBuilder arg0);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void specificToGenericStringHeader(StringBuilder arg0);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedReturnType();

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(I[Ljava.lang.Class;)Z`
     */
    bool handleParameterNumberMismatch(int arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(Ljava.lang.StringBuilder;IZ)V`
     */
    void printModifiersIfNonzero(StringBuilder arg0, int arg1, bool arg2);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `([Ljava.lang.reflect.Parameter;)V`
     */
    void verifyParameters(Parameter_interface arg0);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Type;`
     */
    Type parameterize(Class arg0);

    /**
     * Declaring class: `java.lang.reflect.Executable`
     * Signature: `()Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedReceiverType();
};


/**
 * Classpath: `java.lang.reflect.TypeVariable`
 * Package name: `java.lang.reflect`
 */
class TypeVariable : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.TypeVariable";
public:
    STATICINITIALIZE;

    TypeVariable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Ljava.lang.reflect.Parameter;`
 */
class Parameter_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.Parameter;";
public:
    STATICINITIALIZE;

    Parameter_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.invoke.MethodHandle`
 * Package name: `java.lang.invoke`
 */
class MethodHandle : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandle";
public:
    STATICINITIALIZE;

    MethodHandle(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object invokeBasic(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    static Object linkToVirtual(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    static Object linkToStatic(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    static Object linkToSpecial(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    static Object linkToInterface(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    static Object linkToNative(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object invoke(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object invokeExact(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType type();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Z)Z`
     */
    bool viewAsTypeChecks(MethodType arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName internalMemberName();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.util.function.Function;)V`
     */
    void updateForm(Function arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.Object;`
     */
    Object internalProperties();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle rebind();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle copyWith(MethodType arg0, LambdaForm arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle viewAsType(MethodType arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Z`
     */
    bool isCrackable();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asType(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object invokeWithArguments(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.util.List;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object invokeWithArguments(List arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asTypeCached(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asTypeUncached(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(ILjava.lang.Class;I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asSpreader(int arg0, Class arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.Class;I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asSpreader(Class arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.Class;II)Ljava.lang.invoke.MethodType;`
     */
    MethodType asSpreaderChecks(Class arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.Class;I)V`
     */
    void spreadArrayChecks(Class arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Z`
     */
    bool isVarargsCollector();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asVarargsCollector(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.Class;I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asCollector(Class arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(ILjava.lang.Class;I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asCollector(int arg0, Class arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.Class;II)Z`
     */
    bool asCollectorChecks(Class arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(ILjava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentL(int arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.String;`
     */
    String debugString();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.String;`
     */
    String standardString();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm internalForm();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Z)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle withVarargs(bool arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()V`
     */
    void customize();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle asFixedArity();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle bindTo(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle setVarargs(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.Class;`
     */
    Class internalCallerClass();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.invoke.MethodHandleImpl$Intrinsic;`
     */
    MethodHandleImpl_Intrinsic intrinsicName();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.Object;`
     */
    Object intrinsicData();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle withInternalMemberName(MemberName arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Z`
     */
    bool isInvokeSpecial();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()Ljava.lang.Object;`
     */
    Object internalValues();

    /**
     * Declaring class: `java.lang.invoke.MethodHandle`
     * Signature: `()V`
     */
    void maybeCustomize();
};


/**
 * Classpath: `java.lang.invoke.MethodType`
 * Package name: `java.lang.invoke`
 */
class MethodType : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodType";
public:
    STATICINITIALIZE;

    MethodType(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.Class;`
     */
    Class returnType();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.invoke.MethodType;)Z`
     */
    bool equals(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType basicType();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType wrap();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(I)Ljava.lang.Class;`
     */
    Class parameterType(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(ILjava.util.List;)Ljava.lang.invoke.MethodType;`
     */
    MethodType insertParameterTypes(int arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(I[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    MethodType insertParameterTypes(int arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    MethodType changeReturnType(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.MethodTypeForm;`
     */
    MethodTypeForm form();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType methodType(Class arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType methodType(Class arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType methodType(Class arg0, Class arg1, Class_interface arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;Ljava.util.List;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType methodType(Class arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType methodType(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType methodType(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(II)Ljava.lang.invoke.MethodType;`
     */
    MethodType dropParameterTypes(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.util.List;)Ljava.lang.invoke.MethodType;`
     */
    MethodType appendParameterTypes(List arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `([Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    MethodType appendParameterTypes(Class_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType invokerType();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(IZ)Ljava.lang.invoke.MethodType;`
     */
    static MethodType genericMethodType(int arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(I)Ljava.lang.invoke.MethodType;`
     */
    static MethodType genericMethodType(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.Invokers;`
     */
    Invokers invokers();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.invoke.MethodType;)Z`
     */
    bool isConvertibleTo(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(II[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    MethodType replaceParameterTypes(int arg0, int arg1, Class_interface arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Z`
     */
    static bool canConvert(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;II)Ljava.lang.invoke.MethodType;`
     */
    MethodType asSpreaderType(Class arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.Class;`
     */
    Class lastParameterType();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;II)Ljava.lang.invoke.MethodType;`
     */
    MethodType asCollectorType(Class arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.Class;`
     */
    Class leadingReferenceParameter();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.invoke.MethodType;Z)Z`
     */
    bool isViewableAs(MethodType arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType erase();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.invoke.MethodType;`
     * Throws: `java.lang.IllegalArgumentException, java.lang.TypeNotPresentException`
     */
    static MethodType fromDescriptor(String arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;[Ljava.lang.Class;Z)Ljava.lang.invoke.MethodType;`
     */
    static MethodType makeImpl(Class arg0, Class_interface arg1, bool arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.String;`
     */
    String toMethodDescriptorString();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.Class;`
     */
    Class rtype();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(I)V`
     */
    static void checkSlotCount(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `([Ljava.lang.Class;)I`
     */
    static int checkPtypes(Class_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.IndexOutOfBoundsException;`
     */
    static IndexOutOfBoundsException newIndexOutOfBoundsException(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()I`
     */
    int parameterSlotCount();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Z`
     */
    bool isGeneric();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Z`
     */
    bool hasPrimitives();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType unwrap();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType wrapWithPrims(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodType;`
     */
    static MethodType unwrapWithNoPrims(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `([Ljava.lang.Class;[Ljava.lang.Class;)Z`
     */
    bool canConvertParameters(Class_interface arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.invoke.MethodType;)Z`
     */
    bool explicitCastEquivalentToAsType(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Z`
     */
    static bool explicitCastEquivalentToAsType(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(ILjava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    MethodType changeParameterType(int arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.invoke.MethodTypeForm;)V`
     */
    void setForm(MethodTypeForm arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Z`
     */
    bool hasWrappers();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType generic();

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(ILjava.util.List;)Z`
     */
    bool effectivelyIdenticalParameters(int arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.invoke.MethodType;`
     * Throws: `java.lang.IllegalArgumentException, java.lang.TypeNotPresentException`
     */
    static MethodType fromMethodDescriptorString(String arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.String;`
     */
    static String toFieldDescriptorString(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodType`
     * Signature: `()Ljava.lang.Object;`
     */
    Object readResolve();
};


/**
 * Classpath: `java.lang.invoke.MethodTypeForm`
 * Package name: `java.lang.invoke`
 */
class MethodTypeForm : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodTypeForm";
public:
    STATICINITIALIZE;

    MethodTypeForm(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType basicType();

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm cachedLambdaForm(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `(ILjava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm setCachedLambdaForm(int arg0, LambdaForm arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `()I`
     */
    int parameterCount();

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodTypeForm;`
     */
    static MethodTypeForm findForm(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `()I`
     */
    int parameterSlotCount();

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `()Z`
     */
    bool hasPrimitives();

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType erasedType();

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `(Ljava.lang.Class;I)Ljava.lang.Class;`
     */
    static Class canonicalize(Class arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `(Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.MethodType;`
     */
    static MethodType canonicalize(MethodType arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `(I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle cachedMethodHandle(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodTypeForm`
     * Signature: `(ILjava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle setCachedMethodHandle(int arg0, MethodHandle arg1);
};


/**
 * Classpath: `java.lang.invoke.LambdaForm`
 * Package name: `java.lang.invoke`
 */
class LambdaForm : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm";
public:
    STATICINITIALIZE;

    LambdaForm(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    LambdaForm_BasicType returnType();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm;)Z`
     */
    bool equals(LambdaForm arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)Z`
     */
    bool contains(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     */
    static LambdaForm_NamedFunction identity(LambdaForm_BasicType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    LambdaForm_BasicType parameterType(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm$Name;`
     */
    LambdaForm_Name parameter(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType methodType();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()V`
     */
    void compileToBytecode();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Z`
     */
    static bool debugNames();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm;Ljava.lang.String;)V`
     */
    static void associateWithDebugName(LambdaForm arg0, String arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm uncustomize();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()V`
     */
    void prepare();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.invoke.LambdaFormEditor;`
     */
    LambdaFormEditor editor();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm customize(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I[Ljava.lang.invoke.LambdaForm$Name;)Z`
     */
    static bool namesOK(int arg0, LambdaForm_Name_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()I`
     */
    int arity();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I[Ljava.lang.invoke.LambdaForm$Name;)I`
     */
    static int fixResult(int arg0, LambdaForm_Name_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()I`
     */
    int normalize();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Z`
     */
    bool nameRefsAreLegal();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.String;`
     */
    String basicTypeSignature();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.String;`
     */
    static String basicTypeSignature(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isValidSignature(String arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     */
    static LambdaForm_NamedFunction constantZero(LambdaForm_BasicType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.String;`
     */
    String generateDebugName();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaForm$Name;`
     */
    static LambdaForm_Name internArgument(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)I`
     */
    int lastUseIndex(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(ILjava.lang.String;I)Z`
     */
    bool isMatchingIdiom(int arg0, String arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Z`
     */
    bool forceInterpretation();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    static void traceInterpreter(String arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;[Ljava.lang.Object;)V`
     */
    static void traceInterpreter(String arg0, Object arg1, Object_interface arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter failedCompilationCounter();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.String;)I`
     */
    static int signatureArity(String arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;Ljava.lang.Class;Ljava.lang.Object;)Z`
     */
    static bool valueMatches(LambdaForm_BasicType arg0, Class arg1, Object arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Object;)Z`
     */
    static bool checkInt(Class arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Object;)Z`
     */
    static bool checkRef(Class arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object interpretWithArgumentsTracing(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()V`
     */
    void checkInvocationCounter();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `([Ljava.lang.Object;)Z`
     */
    bool arityCheck(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;[Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object interpretName(LambdaForm_Name arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `([Ljava.lang.Object;Ljava.lang.Object;)Z`
     */
    bool resultCheck(Object_interface arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)Z`
     */
    static bool argumentTypesMatch(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.String;`
     */
    String lambdaName();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)I`
     */
    int useCount(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm$Name;`
     */
    static LambdaForm_Name argument(int arg0, LambdaForm_BasicType arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;)V`
     */
    static void createFormsFor(LambdaForm_BasicType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Ljava.lang.Object;`
     */
    Object parameterConstraint(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()I`
     */
    int expressionCount();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Z`
     */
    bool isSelectAlternative(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Z`
     */
    bool isGuardWithCatch(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Z`
     */
    bool isTryFinally(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Z`
     */
    bool isTableSwitch(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)Z`
     */
    bool isLoop(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object interpretWithArguments(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String shortenSignature(String arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm identityForm(LambdaForm_BasicType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm zeroForm(LambdaForm_BasicType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(I)I`
     */
    static int identity_I(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(J)J`
     */
    static long identity_J(long arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(F)F`
     */
    static float identity_F(float arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(D)D`
     */
    static double identity_D(double arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object identity_L(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()V`
     */
    static void identity_V();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()I`
     */
    static int zero_I();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()J`
     */
    static long zero_J();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()F`
     */
    static float zero_F();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()D`
     */
    static double zero_D();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm`
     * Signature: `()Ljava.lang.Object;`
     */
    static Object zero_L();
};


/**
 * Classpath: `java.lang.invoke.LambdaForm$BasicType`
 * Enclosing class: `java.lang.invoke.LambdaForm`
 * Package name: `java.lang.invoke`
 */
class LambdaForm_BasicType : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$BasicType";
public:
    STATICINITIALIZE;

    LambdaForm_BasicType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(C)Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    static LambdaForm_BasicType basicType(char arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(B)Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    static LambdaForm_BasicType basicType(byte arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    static LambdaForm_BasicType basicType(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(Lsun.invoke.util.Wrapper;)Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    static LambdaForm_BasicType basicType(Wrapper arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(Ljava.lang.String;)Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    static LambdaForm_BasicType valueOf(String arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(Ljava.lang.Class;)C`
     */
    static char basicTypeChar(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `()C`
     */
    char basicTypeChar();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(C)Z`
     */
    static bool isArgBasicTypeChar(char arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `(C)Z`
     */
    static bool isBasicTypeChar(char arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `()Z`
     */
    static bool checkBasicType();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `()Ljava.lang.Class;`
     */
    Class basicTypeClass();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `()Lsun.invoke.util.Wrapper;`
     */
    Wrapper basicTypeWrapper();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$BasicType`
     * Signature: `()I`
     */
    int basicTypeSlots();
};


/**
 * Classpath: `sun.invoke.util.Wrapper`
 * Package name: `sun.invoke.util`
 */
class Wrapper : public Enum {
protected:
    const inline static char *className = "sun.invoke.util.Wrapper";
public:
    STATICINITIALIZE;

    Wrapper(jobject object) : Enum(object) {}


    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.Object;`
     */
    Object cast(Object arg0, Class arg1);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Class;Z)Ljava.lang.Object;`
     */
    Object convert(Object arg0, Class arg1, bool arg2);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.Object;`
     */
    Object convert(Object arg0, Class arg1);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.String;)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper valueOf(String arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object wrap(Object arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(I)Ljava.lang.Object;`
     */
    Object wrap(int arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper forPrimitiveType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(C)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper forPrimitiveType(char arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.String;`
     */
    String basicTypeString();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.Class;`
     */
    Class arrayType();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.Class;`
     */
    Class primitiveType();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.String;)Ljava.lang.RuntimeException;`
     */
    static RuntimeException newIllegalArgumentException(String arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.RuntimeException;`
     */
    static RuntimeException newIllegalArgumentException(String arg0, Object arg1);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(C)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper forBasicType(char arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper forBasicType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)C`
     */
    static char basicTypeChar(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()C`
     */
    char basicTypeChar();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isSubwordOrInt();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.Object;`
     */
    Object zero();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Object;`
     */
    Object zero(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Lsun.invoke.util.Wrapper;)Z`
     */
    bool isConvertibleFrom(Wrapper arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Class;`
     */
    Class wrapperType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.Class;`
     */
    Class wrapperType();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    static bool isWrapperType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper forWrapperType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Class;`
     */
    static Class asPrimitiveType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)I`
     */
    static int hashWrap(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(C)I`
     */
    static int hashChar(char arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.Class;`
     */
    static Class forceType(Class arg0, Class arg1);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.ClassCastException;`
     */
    static ClassCastException newClassCastException(Class arg0, Class arg1);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Number;`
     */
    static Number numberValue(Object arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(B)Z`
     */
    static bool boolValue(byte arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    static bool checkConvertibleFrom();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.String;`
     */
    String detailString();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()I`
     */
    int bitWidth();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()I`
     */
    int stackSlots();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isUnsigned();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    static bool isPrimitiveType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(I)Ljava.lang.Object;`
     */
    Object makeArray(int arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `([Ljava.lang.Object;ILjava.lang.Object;II)V`
     */
    void copyArrayUnboxing(Object_interface arg0, int arg1, Object arg2, int arg3, int arg4);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Object;I[Ljava.lang.Object;II)V`
     */
    void copyArrayBoxing(Object arg0, int arg1, Object_interface arg2, int arg3, int arg4);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isNumeric();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isDoubleWord();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Class;`
     */
    static Class asWrapperType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.String;`
     */
    String wrapperSimpleName();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Ljava.lang.String;`
     */
    String primitiveSimpleName();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isIntegral();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isSingleWord();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isOther();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isFloating();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `()Z`
     */
    bool isSigned();

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper findPrimitiveType(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)I`
     */
    static int hashPrim(Class arg0);

    /**
     * Declaring class: `sun.invoke.util.Wrapper`
     * Signature: `(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;`
     */
    static Wrapper findWrapperType(Class arg0);
};


/**
 * Classpath: `java.lang.ClassCastException`
 * Package name: `java.lang`
 */
class ClassCastException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.ClassCastException";
public:
    STATICINITIALIZE;

    ClassCastException(jobject object) : RuntimeException(object) {}

};


/**
 * Classpath: `java.lang.Number`
 * Package name: `java.lang`
 */
class Number : public Object {
protected:
    const inline static char *className = "java.lang.Number";
public:
    STATICINITIALIZE;

    Number(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Number`
     * Signature: `()B`
     */
    byte byteValue();

    /**
     * Declaring class: `java.lang.Number`
     * Signature: `()S`
     */
    short shortValue();

    /**
     * Declaring class: `java.lang.Number`
     * Signature: `()I`
     */
    int intValue();

    /**
     * Declaring class: `java.lang.Number`
     * Signature: `()J`
     */
    long longValue();

    /**
     * Declaring class: `java.lang.Number`
     * Signature: `()F`
     */
    float floatValue();

    /**
     * Declaring class: `java.lang.Number`
     * Signature: `()D`
     */
    double doubleValue();
};


/**
 * Classpath: `java.lang.invoke.LambdaForm$Name`
 * Enclosing class: `java.lang.invoke.LambdaForm`
 * Package name: `java.lang.invoke`
 */
class LambdaForm_Name : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$Name";
public:
    STATICINITIALIZE;

    LambdaForm_Name(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()I`
     */
    int index();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    LambdaForm_BasicType type();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)Z`
     */
    bool equals(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Z`
     */
    bool refersTo(Class arg0, String arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Ljava.lang.String;`
     */
    String debugString();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm$Name;`
     */
    LambdaForm_Name newIndex(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Z`
     */
    bool isParam();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(I)Z`
     */
    bool initIndex(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm$Name;`
     */
    LambdaForm_Name cloneWithIndex(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `([Ljava.lang.invoke.LambdaForm$Name;[Ljava.lang.invoke.LambdaForm$Name;II)Ljava.lang.invoke.LambdaForm$Name;`
     */
    LambdaForm_Name replaceNames(LambdaForm_Name_interface arg0, LambdaForm_Name_interface arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()V`
     */
    void internArguments();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Z`
     */
    bool isInvokeBasic();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)I`
     */
    int lastUseIndex(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Z`
     */
    bool isConstantZero();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Ljava.lang.String;`
     */
    String exprString();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)I`
     */
    int useCount(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;Ljava.lang.Object;)Z`
     */
    static bool typesMatch(LambdaForm_BasicType arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.invoke.LambdaForm$NamedFunction;[Ljava.lang.Object;)Z`
     */
    bool typesMatch(LambdaForm_NamedFunction arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()C`
     */
    char typeChar();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;Ljava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaForm$Name;`
     */
    LambdaForm_Name replaceName(LambdaForm_Name arg0, LambdaForm_Name arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `()Z`
     */
    bool isLinkerMethodInvoke();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Name`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.invoke.LambdaForm$Name;`
     */
    LambdaForm_Name withConstraint(Object arg0);
};


/**
 * Classpath: `[Ljava.lang.invoke.LambdaForm$Name;`
 */
class LambdaForm_Name_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.invoke.LambdaForm$Name;";
public:
    STATICINITIALIZE;

    LambdaForm_Name_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.invoke.LambdaForm$NamedFunction`
 * Enclosing class: `java.lang.invoke.LambdaForm`
 * Package name: `java.lang.invoke`
 */
class LambdaForm_NamedFunction : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$NamedFunction";
public:
    STATICINITIALIZE;

    LambdaForm_NamedFunction(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    LambdaForm_BasicType returnType();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()V`
     */
    void resolve();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm$BasicType;`
     */
    LambdaForm_BasicType parameterType(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName member();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType methodType();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object invokeWithArguments(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.invoke.MethodHandleImpl$Intrinsic;`
     */
    MethodHandleImpl_Intrinsic intrinsicName();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.Object;`
     */
    Object intrinsicData();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()I`
     */
    int arity();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `(Ljava.lang.invoke.MemberName;)Z`
     */
    static bool isInvokeBasic(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Z`
     */
    bool isConstantZero();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Z`
     */
    bool isIdentity();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle invoker();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle resolvedHandle();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.Throwable`
     */
    Object invokeWithArgumentsTracing(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `(Ljava.lang.invoke.MethodTypeForm;)Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle computeInvoker(MethodTypeForm arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Z`
     */
    bool assertMemberIsConsistent();

    /**
     * Declaring class: `java.lang.invoke.LambdaForm$NamedFunction`
     * Signature: `()Ljava.lang.Class;`
     */
    Class memberDeclaringClassOrNull();
};


/**
 * Classpath: `java.lang.invoke.MemberName`
 * Package name: `java.lang.invoke`
 */
class MemberName : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MemberName";
public:
    STATICINITIALIZE;

    MemberName(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.invoke.MemberName;)Z`
     */
    bool equals(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName clone();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getClassLoader();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isMethod();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MemberName$Factory;`
     */
    static MemberName_Factory getFactory();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getReturnType();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isConstructor();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isStatic();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Object;I)V`
     */
    void init(Class arg0, String arg1, Object arg2, int arg3);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isPublic();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.String;`
     */
    String message();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Z`
     */
    bool refersTo(Class arg0, String arg1);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isProtected();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getType();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isBridge();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.String;`
     */
    String getSignature();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isFinal();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isResolved();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()B`
     */
    byte getReferenceKind();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isAbstract();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType getMethodType();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType getMethodOrFieldType();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isField();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName asSpecial();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName asConstructor();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isInvocable();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType getInvocationType();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isMethodHandleInvoke();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getFieldType();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isVolatile();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isGetter();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isVarargs();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.IllegalAccessException;`
     */
    IllegalAccessException makeAccessException(String arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.ReflectiveOperationException;`
     */
    ReflectiveOperationException makeAccessException();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()V`
     */
    void expandFromVM();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isSetter();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isType();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool staticIsConsistent();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isObjectPublicMethod();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(II)Z`
     */
    bool testFlags(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isMethodHandleInvokeName(String arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isVarHandleMethodInvokeName(String arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isPrivate();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isNative();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(I)Z`
     */
    bool testAllFlags(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(I)Z`
     */
    bool testAnyFlags(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(IIB)I`
     */
    static int flagsMods(int arg0, int arg1, byte arg2);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isVarHandleMethodInvoke();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(BB)Ljava.lang.invoke.MemberName;`
     */
    MemberName changeReferenceKind(byte arg0, byte arg1);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(I)Z`
     */
    bool referenceKindIsConsistentWith(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Z)V`
     */
    void initResolved(bool arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     */
    static MemberName makeMethodHandleInvoke(String arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.MemberName;`
     */
    static MemberName makeMethodHandleInvoke(String arg0, MethodType arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     */
    static MemberName makeVarHandleMethodInvoke(String arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.MemberName;`
     */
    static MemberName makeVarHandleMethodInvoke(String arg0, MethodType arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.String;`
     */
    String getMethodDescriptor();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool referenceKindIsConsistent();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool vminfoIsConsistent();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool canBeStaticallyBound();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isFieldOrMethod();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isPackage();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isCallerSensitive();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool isTrustedFinalField();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool isAccessibleFrom(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName asNormalOriginal();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName asSetter();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName getDefinition();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `()Z`
     */
    bool hasReceiverTypeDispatch();

    /**
     * Declaring class: `java.lang.invoke.MemberName`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void checkForTypeAlias(Class arg0);
};


/**
 * Classpath: `java.lang.invoke.MemberName$Factory`
 * Enclosing class: `java.lang.invoke.MemberName`
 * Package name: `java.lang.invoke`
 */
class MemberName_Factory : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MemberName$Factory";
public:
    STATICINITIALIZE;

    MemberName_Factory(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(Ljava.lang.Class;ZLjava.lang.Class;)Ljava.util.List;`
     */
    List getFields(Class arg0, bool arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(Ljava.lang.Class;ZLjava.lang.String;Ljava.lang.Class;Ljava.lang.Class;)Ljava.util.List;`
     */
    List getFields(Class arg0, bool arg1, String arg2, Class arg3, Class arg4);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(Ljava.lang.Class;ZLjava.lang.Class;)Ljava.util.List;`
     */
    List getMethods(Class arg0, bool arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(Ljava.lang.Class;ZLjava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.Class;)Ljava.util.List;`
     */
    List getMethods(Class arg0, bool arg1, String arg2, MethodType arg3, Class arg4);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Ljava.util.List;`
     */
    List getConstructors(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(BLjava.lang.invoke.MemberName;Ljava.lang.Class;IZ)Ljava.lang.invoke.MemberName;`
     */
    MemberName resolve(byte arg0, MemberName arg1, Class arg2, int arg3, bool arg4);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(BLjava.lang.invoke.MemberName;Ljava.lang.Class;I)Ljava.lang.invoke.MemberName;`
     */
    MemberName resolveOrNull(byte arg0, MemberName arg1, Class arg2, int arg3);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(BLjava.lang.invoke.MemberName;Ljava.lang.Class;ILjava.lang.Class;)Ljava.lang.invoke.MemberName;`
     * Throws: `java.lang.IllegalAccessException, java.lang.ReflectiveOperationException`
     */
    MemberName resolveOrFail(byte arg0, MemberName arg1, Class arg2, int arg3, Class arg4);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Object;ILjava.lang.Class;)Ljava.util.List;`
     */
    List getMembers(Class arg0, String arg1, Object arg2, int arg3, Class arg4);

    /**
     * Declaring class: `java.lang.invoke.MemberName$Factory`
     * Signature: `(Ljava.lang.Class;ZLjava.lang.Class;)Ljava.util.List;`
     */
    List getNestedTypes(Class arg0, bool arg1, Class arg2);
};


/**
 * Classpath: `java.lang.ReflectiveOperationException`
 * Package name: `java.lang`
 */
class ReflectiveOperationException : public Exception {
protected:
    const inline static char *className = "java.lang.ReflectiveOperationException";
public:
    STATICINITIALIZE;

    ReflectiveOperationException(jobject object) : Exception(object) {}

};


/**
 * Classpath: `java.lang.invoke.MethodHandleImpl$Intrinsic`
 * Enclosing class: `java.lang.invoke.MethodHandleImpl`
 * Package name: `java.lang.invoke`
 */
class MethodHandleImpl_Intrinsic : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandleImpl$Intrinsic";
public:
    STATICINITIALIZE;

    MethodHandleImpl_Intrinsic(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.invoke.MethodHandleImpl$Intrinsic`
     * Signature: `(Ljava.lang.String;)Ljava.lang.invoke.MethodHandleImpl$Intrinsic;`
     */
    static MethodHandleImpl_Intrinsic valueOf(String arg0);
};


/**
 * Classpath: `java.lang.invoke.LambdaFormEditor`
 * Package name: `java.lang.invoke`
 */
class LambdaFormEditor : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormEditor";
public:
    STATICINITIALIZE;

    LambdaFormEditor(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `()Ljava.lang.invoke.LambdaFormBuffer;`
     */
    LambdaFormBuffer buffer();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(ILjava.lang.Class;I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm spreadArgumentsForm(int arg0, Class arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(ILjava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm collectArgumentsForm(int arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.BoundMethodHandle;ILjava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentL(BoundMethodHandle arg0, int arg1, Object arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaFormEditor;`
     */
    static LambdaFormEditor lambdaFormEditor(LambdaForm arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(II)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm dupArgumentForm(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm addArgumentForm(int arg0, LambdaForm_BasicType arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(I[I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm permuteArgumentsForm(int arg0, arr_I arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.BoundMethodHandle;II)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentI(BoundMethodHandle arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.BoundMethodHandle;IJ)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentJ(BoundMethodHandle arg0, int arg1, long arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.BoundMethodHandle;IF)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentF(BoundMethodHandle arg0, int arg1, float arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.BoundMethodHandle;ID)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentD(BoundMethodHandle arg0, int arg1, double arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;Z)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm filterReturnForm(LambdaForm_BasicType arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;[I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm filterRepeatedArgumentForm(LambdaForm_BasicType arg0, arr_I arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm filterArgumentForm(int arg0, LambdaForm_BasicType arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm collectReturnValueForm(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(IZLjava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm foldArgumentsForm(int arg0, bool arg1, MethodType arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(IZLjava.lang.invoke.MethodType;[I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm foldArgumentsForm(int arg0, bool arg1, MethodType arg2, arr_I arg3);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(ILjava.lang.invoke.MethodType;[I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm filterArgumentsForm(int arg0, MethodType arg1, arr_I arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    BoundMethodHandle_SpeciesData newSpeciesData(LambdaForm_BasicType arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    BoundMethodHandle_SpeciesData oldSpeciesData();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.BoundMethodHandle;ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.MethodType;`
     */
    MethodType bindArgumentType(BoundMethodHandle arg0, int arg1, LambdaForm_BasicType arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm bindArgumentForm(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.LambdaFormEditor$TransformKey;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm getInCache(LambdaFormEditor_TransformKey arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.LambdaFormEditor$TransformKey;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm putInCache(LambdaFormEditor_TransformKey arg0, LambdaForm arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(ILjava.lang.invoke.MethodType;ZZ)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm makeArgumentCombinationForm(int arg0, MethodType arg1, bool arg2, bool arg3);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(ILjava.lang.invoke.MethodType;[IZZ)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm makeArgumentCombinationForm(int arg0, MethodType arg1, arr_I arg2, bool arg3, bool arg4);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.LambdaForm;Ljava.lang.invoke.LambdaForm$BasicType;[I)Z`
     */
    bool formParametersMatch(LambdaForm arg0, LambdaForm_BasicType arg1, arr_I arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(Ljava.lang.invoke.MethodType;[I)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm makeRepeatedFilterForm(MethodType arg0, arr_I arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `([I[Ljava.lang.invoke.LambdaForm$BasicType;[Ljava.lang.invoke.LambdaForm$Name;I)Z`
     */
    static bool permutedTypesMatch(arr_I arg0, LambdaForm_BasicType_interface arg1, LambdaForm_Name_interface arg2, int arg3);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor`
     * Signature: `(I[Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm noteLoopLocalTypesForm(int arg0, LambdaForm_BasicType_interface arg1);
};


/**
 * Classpath: `java.lang.invoke.LambdaFormBuffer`
 * Package name: `java.lang.invoke`
 */
class LambdaFormBuffer : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormBuffer";
public:
    STATICINITIALIZE;

    LambdaFormBuffer(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm$Name;`
     */
    LambdaForm_Name name(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;[Ljava.lang.invoke.LambdaForm$Name;)I`
     */
    static int indexOf(LambdaForm_Name arg0, LambdaForm_Name_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(Ljava.lang.invoke.LambdaForm$NamedFunction;Ljava.util.List;)I`
     */
    static int indexOf(LambdaForm_NamedFunction arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)I`
     */
    int lastIndexOf(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(ILjava.lang.invoke.LambdaForm$Name;)V`
     */
    void replaceName(int arg0, LambdaForm_Name arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm lambdaForm();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()V`
     */
    void startEdit();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(Ljava.util.List;Ljava.util.List;[Ljava.lang.Object;)Ljava.lang.invoke.LambdaFormBuffer;`
     */
    LambdaFormBuffer replaceFunctions(List arg0, List arg1, Object_interface arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;`
     */
    LambdaFormBuffer renameParameter(int arg0, LambdaForm_Name arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;`
     */
    LambdaFormBuffer replaceParameterByNewExpression(int arg0, LambdaForm_Name arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;`
     */
    LambdaFormBuffer insertParameter(int arg0, LambdaForm_Name arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()Ljava.lang.invoke.LambdaForm;`
     */
    LambdaForm endEdit();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(II)Ljava.lang.invoke.LambdaFormBuffer;`
     */
    LambdaFormBuffer replaceParameterByCopy(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;`
     */
    LambdaFormBuffer insertExpression(int arg0, LambdaForm_Name arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)V`
     */
    void setResult(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(ILjava.lang.invoke.LambdaForm$Name;)V`
     */
    void changeName(int arg0, LambdaForm_Name arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `([Ljava.lang.invoke.LambdaForm$Name;)V`
     */
    void setNames(LambdaForm_Name_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()Z`
     */
    bool inTrans();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()I`
     */
    int resultIndex();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()I`
     */
    int ownedCount();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()Z`
     */
    bool verifyArity();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()Z`
     */
    bool verifyFirstChange();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(II)V`
     */
    void growNames(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `()V`
     */
    void clearDuplicatesAndNulls();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(II)V`
     */
    void noteDuplicate(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormBuffer`
     * Signature: `(ILjava.lang.invoke.LambdaForm$Name;Z)V`
     */
    void insertName(int arg0, LambdaForm_Name arg1, bool arg2);
};


/**
 * Classpath: `java.lang.invoke.BoundMethodHandle`
 * Package name: `java.lang.invoke`
 */
class BoundMethodHandle : public MethodHandle {
protected:
    const inline static char *className = "java.lang.invoke.BoundMethodHandle";
public:
    STATICINITIALIZE;

    BoundMethodHandle(jobject object) : MethodHandle(object) {}


    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(I)Ljava.lang.Object;`
     */
    Object arg(int arg0);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    static BoundMethodHandle makeReinvoker(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.Object;`
     */
    Object internalProperties();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle rebind();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle copyWith(MethodType arg0, LambdaForm arg1);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.LambdaFormEditor;`
     */
    LambdaFormEditor editor();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;Ljava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle copyWithExtendL(MethodType arg0, LambdaForm arg1, Object arg2);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(ILjava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentL(int arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.String;`
     */
    String internalValues();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(II)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentI(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(IJ)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentJ(int arg0, long arg1);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(IF)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentF(int arg0, float arg1);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(ID)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle bindArgumentD(int arg0, double arg1);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    BoundMethodHandle_SpeciesData speciesData();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    static BoundMethodHandle_SpeciesData speciesDataFor(LambdaForm arg0);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Z`
     */
    bool tooComplex();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()I`
     */
    int fieldCount();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;I)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle copyWithExtendI(MethodType arg0, LambdaForm arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;J)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle copyWithExtendJ(MethodType arg0, LambdaForm arg1, long arg2);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;F)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle copyWithExtendF(MethodType arg0, LambdaForm arg1, float arg2);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;D)Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle copyWithExtendD(MethodType arg0, LambdaForm arg1, double arg2);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    static BoundMethodHandle_SpeciesData speciesData_LL();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    static BoundMethodHandle_SpeciesData speciesData_LLLL();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    static BoundMethodHandle_SpeciesData speciesData_LLL();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    static BoundMethodHandle_SpeciesData speciesData_LLLLL();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    static BoundMethodHandle_SpeciesData speciesData_L();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;Ljava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    static BoundMethodHandle bindSingle(MethodType arg0, LambdaForm arg1, Object arg2);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;Ljava.lang.invoke.LambdaForm$BasicType;Ljava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;`
     */
    static BoundMethodHandle bindSingle(MethodType arg0, LambdaForm arg1, LambdaForm_BasicType arg2, Object arg3);
};


/**
 * Classpath: `java.lang.invoke.ClassSpecializer$SpeciesData`
 * Enclosing class: `java.lang.invoke.ClassSpecializer`
 * Package name: `java.lang.invoke`
 */
class ClassSpecializer_SpeciesData : public Object {
protected:
    const inline static char *className = "java.lang.invoke.ClassSpecializer$SpeciesData";
public:
    STATICINITIALIZE;

    ClassSpecializer_SpeciesData(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle factory();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.Object;`
     */
    Object key();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Z`
     */
    bool isResolved();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle getter(int arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()I`
     */
    int fieldCount();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.util.List;`
     */
    List fieldTypes();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.String;`
     */
    String deriveTypeString();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(Ljava.lang.Object;)Ljava.util.List;`
     */
    List deriveFieldTypes(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.invoke.ClassSpecializer;`
     */
    ClassSpecializer outer();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.String;`
     */
    String deriveClassName();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(Ljava.lang.invoke.MemberName;I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle deriveTransformHelper(MemberName arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(Ljava.lang.invoke.MemberName;ILjava.util.List;Ljava.util.List;)Ljava.util.List;`
     */
    List deriveTransformHelperArguments(MemberName arg0, int arg1, List arg2, List arg3);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.Class;`
     */
    Class speciesCode();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.util.List;`
     */
    List getters();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(I)Ljava.lang.invoke.MethodType;`
     */
    MethodType transformHelperType(int arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.util.List;`
     */
    List getterFunctions();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle transformHelper(int arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `()Ljava.lang.Class;`
     */
    Class deriveSuperClass();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$SpeciesData`
     * Signature: `(I)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     */
    LambdaForm_NamedFunction getterFunction(int arg0);
};


/**
 * Classpath: `java.lang.invoke.ClassSpecializer`
 * Package name: `java.lang.invoke`
 */
class ClassSpecializer : public Object {
protected:
    const inline static char *className = "java.lang.invoke.ClassSpecializer";
public:
    STATICINITIALIZE;

    ClassSpecializer(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.String;`
     */
    static String className_(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.invoke.ClassSpecializer$Factory;`
     */
    ClassSpecializer_Factory factory();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.Class;`
     */
    Class keyType();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.invoke.ClassSpecializer$SpeciesData;`
     */
    ClassSpecializer_SpeciesData topSpecies();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;`
     */
    ClassSpecializer_SpeciesData findSpecies(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.invoke.ClassSpecializer$Factory;`
     */
    ClassSpecializer_Factory makeFactory();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object topSpeciesKey();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;`
     */
    ClassSpecializer_SpeciesData newSpeciesData(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.Class;`
     */
    Class topClass();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.Class;`
     */
    Class metaType();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType baseConstructorType();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `()Ljava.util.List;`
     */
    List transformMethods();

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)Ljava.lang.RuntimeException;`
     */
    static RuntimeException newIAE(String arg0, Throwable arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String classBCName(String arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.String;`
     */
    static String classBCName(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.String;`
     */
    static String classSig(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String classSig(String arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     */
    static Constructor reflectConstructor(Class arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Ljava.lang.reflect.Field;`
     */
    static Field reflectField(Class arg0, String arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.String;`
     */
    static String methodSig(MethodType arg0);
};


/**
 * Classpath: `java.lang.invoke.ClassSpecializer$Factory`
 * Enclosing class: `java.lang.invoke.ClassSpecializer`
 * Package name: `java.lang.invoke`
 */
class ClassSpecializer_Factory : public Object {
protected:
    const inline static char *className = "java.lang.invoke.ClassSpecializer$Factory";
public:
    STATICINITIALIZE;

    ClassSpecializer_Factory(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;Ljava.util.List;I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle findGetter(Class arg0, List arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.invoke.ClassSpecializer$SpeciesData;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;`
     */
    ClassSpecializer_SpeciesData loadSpecies(ClassSpecializer_SpeciesData arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;I)Ljava.lang.String;`
     */
    String chooseFieldName(Class arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.invoke.ClassSpecializer$SpeciesData;Ljava.lang.Class;)V`
     */
    void linkSpeciesDataToCode(ClassSpecializer_SpeciesData arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.ClassSpecializer$SpeciesData;Z)V`
     */
    void linkCodeToSpeciesData(Class arg0, ClassSpecializer_SpeciesData arg1, bool arg2);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.ClassSpecializer$SpeciesData;)Ljava.lang.Class;`
     */
    Class generateConcreteSpeciesCode(String arg0, ClassSpecializer_SpeciesData arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;`
     */
    ClassSpecializer_SpeciesData loadSpeciesDataFromCode(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(ILjdk.internal.org.objectweb.asm.MethodVisitor;)V`
     */
    void emitIntConstant(int arg0, MethodVisitor arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;Ljava.util.List;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle findFactory(Class arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;Ljava.util.List;)Ljava.util.List;`
     */
    List findFactories(Class arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;Ljava.util.List;)Ljava.util.List;`
     */
    List findGetters(Class arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.util.List;Ljava.util.List;)Ljava.util.List;`
     */
    List makeNominalGetters(List arg0, List arg1);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;`
     */
    ClassSpecializer_SpeciesData readSpeciesDataFromCode(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(C)I`
     */
    int typeLoadOp(char arg0);

    /**
     * Declaring class: `java.lang.invoke.ClassSpecializer$Factory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Field;`
     */
    Field reflectSDField(Class arg0);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.MethodVisitor`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class MethodVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.MethodVisitor";
public:
    STATICINITIALIZE;

    MethodVisitor(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(II[Ljava.lang.Object;I[Ljava.lang.Object;)V`
     */
    void visitFrame(int arg0, int arg1, Object_interface arg2, int arg3, Object_interface arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(II)V`
     */
    void visitMaxs(int arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `()V`
     */
    void visitEnd();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `()V`
     */
    void visitCode();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void visitLdcInsn(Object arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void visitMethodInsn(int arg0, String arg1, String arg2, String arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)V`
     */
    void visitMethodInsn(int arg0, String arg1, String arg2, String arg3, bool arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjava.lang.String;)V`
     */
    void visitTypeInsn(int arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(II)V`
     */
    void visitVarInsn(int arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void visitFieldInsn(int arg0, String arg1, String arg2, String arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(I)V`
     */
    void visitInsn(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(II)V`
     */
    void visitIntInsn(int arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitAnnotation(String arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.Label;)V`
     */
    void visitJumpInsn(int arg0, Label arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Label;)V`
     */
    void visitLabel(Label arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Label;Ljdk.internal.org.objectweb.asm.Label;Ljdk.internal.org.objectweb.asm.Label;Ljava.lang.String;)V`
     */
    void visitTryCatchBlock(Label arg0, Label arg1, Label arg2, String arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(IILjdk.internal.org.objectweb.asm.Label;[Ljdk.internal.org.objectweb.asm.Label;)V`
     */
    void visitTableSwitchInsn(int arg0, int arg1, Label arg2, Label_interface arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Attribute;)V`
     */
    void visitAttribute(Attribute arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void visitParameter(String arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `()Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitAnnotationDefault();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(IZ)V`
     */
    void visitAnnotableParameterCount(int arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitParameterAnnotation(int arg0, String arg1, bool arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)V`
     */
    void visitInvokeDynamicInsn(String arg0, String arg1, Handle arg2, Object_interface arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(II)V`
     */
    void visitIincInsn(int arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Label;[I[Ljdk.internal.org.objectweb.asm.Label;)V`
     */
    void visitLookupSwitchInsn(Label arg0, arr_I arg1, Label_interface arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void visitMultiANewArrayInsn(String arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitInsnAnnotation(int arg0, TypePath arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitTryCatchAnnotation(int arg0, TypePath arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Label;Ljdk.internal.org.objectweb.asm.Label;I)V`
     */
    void visitLocalVariable(String arg0, String arg1, String arg2, Label arg3, Label arg4, int arg5);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;[Ljdk.internal.org.objectweb.asm.Label;[Ljdk.internal.org.objectweb.asm.Label;[ILjava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitLocalVariableAnnotation(int arg0, TypePath arg1, Label_interface arg2, Label_interface arg3, arr_I arg4, String arg5, bool arg6);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.MethodVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.Label;)V`
     */
    void visitLineNumber(int arg0, Label arg1);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.AnnotationVisitor`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class AnnotationVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.AnnotationVisitor";
public:
    STATICINITIALIZE;

    AnnotationVisitor(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.AnnotationVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    void visit(String arg0, Object arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.AnnotationVisitor`
     * Signature: `()V`
     */
    void visitEnd();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.AnnotationVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitAnnotation(String arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.AnnotationVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void visitEnum(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.AnnotationVisitor`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitArray(String arg0);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.Label`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class Label : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Label";
public:
    STATICINITIALIZE;

    Label(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ByteVector;IZ)V`
     */
    void put(ByteVector arg0, int arg1, bool arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `([BI)Z`
     */
    bool resolve(arr_B arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `(Ljdk.internal.org.objectweb.asm.MethodVisitor;Z)V`
     */
    void accept(MethodVisitor arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `()I`
     */
    int getOffset();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `()Ljdk.internal.org.objectweb.asm.Label;`
     */
    Label getCanonicalInstance();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `(S)V`
     */
    void markSubroutine(short arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Label;)V`
     */
    void addSubroutineRetSuccessors(Label arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `(III)V`
     */
    void addForwardReference(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Label;`
     */
    Label pushSuccessors(Label arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Label`
     * Signature: `(I)V`
     */
    void addLineNumber(int arg0);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.ByteVector`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class ByteVector : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ByteVector";
public:
    STATICINITIALIZE;

    ByteVector(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(I)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector putByte(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(I)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector putShort(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(I)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector putInt(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(J)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector putLong(long arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(Ljava.lang.String;II)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector encodeUtf8(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `([BII)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector putByteArray(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(III)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector put122(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector putUTF8(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(III)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector put112(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(II)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector put12(int arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(I)V`
     */
    void enlarge(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ByteVector`
     * Signature: `(II)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector put11(int arg0, int arg1);
};


/**
 * Classpath: `[Ljdk.internal.org.objectweb.asm.Label;`
 */
class Label_interface : public Object {
protected:
    const inline static char *className = "[Ljdk.internal.org.objectweb.asm.Label;";
public:
    STATICINITIALIZE;

    Label_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.TypePath`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class TypePath : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.TypePath";
public:
    STATICINITIALIZE;

    TypePath(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.TypePath`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.TypePath;`
     */
    static TypePath fromString(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.TypePath`
     * Signature: `(Ljdk.internal.org.objectweb.asm.TypePath;Ljdk.internal.org.objectweb.asm.ByteVector;)V`
     */
    static void put(TypePath arg0, ByteVector arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.TypePath`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.TypePath`
     * Signature: `()I`
     */
    int getLength();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.TypePath`
     * Signature: `(I)I`
     */
    int getStep(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.TypePath`
     * Signature: `(I)I`
     */
    int getStepArgument(int arg0);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.Attribute`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class Attribute : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Attribute";
public:
    STATICINITIALIZE;

    Attribute(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassWriter;[BIII)Ljdk.internal.org.objectweb.asm.ByteVector;`
     */
    ByteVector write(ClassWriter arg0, arr_B arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassReader;II[CI[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Attribute;`
     */
    Attribute read(ClassReader arg0, int arg1, int arg2, arr_C arg3, int arg4, Label_interface arg5);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `()I`
     */
    int getAttributeCount();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable;)I`
     */
    int computeAttributesSize(SymbolTable arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable;II)I`
     */
    static int computeAttributesSize(SymbolTable arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable;[BIII)I`
     */
    int computeAttributesSize(SymbolTable arg0, arr_B arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable;[BIIILjdk.internal.org.objectweb.asm.ByteVector;)V`
     */
    void putAttributes(SymbolTable arg0, arr_B arg1, int arg2, int arg3, int arg4, ByteVector arg5);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable;Ljdk.internal.org.objectweb.asm.ByteVector;)V`
     */
    void putAttributes(SymbolTable arg0, ByteVector arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable;IILjdk.internal.org.objectweb.asm.ByteVector;)V`
     */
    static void putAttributes(SymbolTable arg0, int arg1, int arg2, ByteVector arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `()Z`
     */
    bool isCodeAttribute();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Attribute`
     * Signature: `()Z`
     */
    bool isUnknown();
};


/**
 * Classpath: `[Ljava.lang.String;`
 */
class String_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.String;";
public:
    STATICINITIALIZE;

    String_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.FieldVisitor`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class FieldVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.FieldVisitor";
public:
    STATICINITIALIZE;

    FieldVisitor(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.FieldVisitor`
     * Signature: `()V`
     */
    void visitEnd();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.FieldVisitor`
     * Signature: `(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitAnnotation(String arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.FieldVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.FieldVisitor`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Attribute;)V`
     */
    void visitAttribute(Attribute arg0);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.ModuleVisitor`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class ModuleVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ModuleVisitor";
public:
    STATICINITIALIZE;

    ModuleVisitor(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `()V`
     */
    void visitEnd();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitMainClass(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitPackage(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `(Ljava.lang.String;ILjava.lang.String;)V`
     */
    void visitRequire(String arg0, int arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `(Ljava.lang.String;I[Ljava.lang.String;)V`
     */
    void visitExport(String arg0, int arg1, String_interface arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `(Ljava.lang.String;I[Ljava.lang.String;)V`
     */
    void visitOpen(String arg0, int arg1, String_interface arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitUse(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ModuleVisitor`
     * Signature: `(Ljava.lang.String;[Ljava.lang.String;)V`
     */
    void visitProvide(String arg0, String_interface arg1);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.RecordComponentVisitor`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class RecordComponentVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.RecordComponentVisitor";
public:
    STATICINITIALIZE;

    RecordComponentVisitor(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.RecordComponentVisitor`
     * Signature: `()V`
     */
    void visitEnd();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.RecordComponentVisitor`
     * Signature: `(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitAnnotation(String arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.RecordComponentVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.RecordComponentVisitor`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Attribute;)V`
     */
    void visitAttribute(Attribute arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.RecordComponentVisitor`
     * Signature: `()Ljdk.internal.org.objectweb.asm.RecordComponentVisitor;`
     */
    RecordComponentVisitor getDelegate();
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.Handle`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class Handle : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Handle";
public:
    STATICINITIALIZE;

    Handle(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `()Z`
     */
    bool isInterface();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `()Ljava.lang.String;`
     */
    String getOwner();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `()I`
     */
    int getTag();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Handle`
     * Signature: `()Ljava.lang.String;`
     */
    String getDesc();
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.ClassVisitor`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class ClassVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ClassVisitor";
public:
    STATICINITIALIZE;

    ClassVisitor(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)V`
     */
    void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String_interface arg5);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void visitSource(String arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.MethodVisitor;`
     */
    MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String_interface arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `()V`
     */
    void visitEnd();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.FieldVisitor;`
     */
    FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitAnnotation(String arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;ILjava.lang.String;)Ljdk.internal.org.objectweb.asm.ModuleVisitor;`
     */
    ModuleVisitor visitModule(String arg0, int arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitNestHost(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void visitOuterClass(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Attribute;)V`
     */
    void visitAttribute(Attribute arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitNestMember(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitPermittedSubclassExperimental(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;I)V`
     */
    void visitInnerClass(String arg0, String arg1, String arg2, int arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassVisitor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.RecordComponentVisitor;`
     */
    RecordComponentVisitor visitRecordComponent(String arg0, String arg1, String arg2);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.ClassReader`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class ClassReader : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ClassReader";
public:
    STATICINITIALIZE;

    ClassReader(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassVisitor;I)V`
     */
    void accept(ClassVisitor arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassVisitor;[Ljdk.internal.org.objectweb.asm.Attribute;I)V`
     */
    void accept(ClassVisitor arg0, Attribute_interface arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I)I`
     */
    int readInt(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `()Ljava.lang.String;`
     */
    String getClassName();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I)I`
     */
    int getItem(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `()I`
     */
    int getItemCount();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `()I`
     */
    int getMaxStringLength();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I)I`
     */
    int readUnsignedShort(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljava.lang.String;`
     */
    String readClass(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljava.lang.String;`
     */
    String readUTF8(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I)J`
     */
    long readLong(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(II[C)Ljava.lang.String;`
     */
    String readUtf(int arg0, int arg1, arr_C arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljava.lang.String;`
     */
    String readUtf(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I)I`
     */
    int readByte(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `()I`
     */
    int getFirstAttributeOffset();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljava.lang.Object;`
     */
    Object readConst(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I)S`
     */
    short readShort(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `([Ljdk.internal.org.objectweb.asm.Attribute;Ljava.lang.String;II[CI[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Attribute;`
     */
    Attribute readAttribute(Attribute_interface arg0, String arg1, int arg2, int arg3, arr_C arg4, int arg5, Label_interface arg6);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;IILjava.lang.String;)V`
     */
    void readModuleAttributes(ClassVisitor arg0, Context arg1, int arg2, int arg3, String arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.AnnotationVisitor;IZ[C)I`
     */
    int readElementValues(AnnotationVisitor arg0, int arg1, bool arg2, arr_C arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Context;I)I`
     */
    int readTypeAnnotationTarget(Context arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;I)I`
     */
    int readRecordComponent(ClassVisitor arg0, Context arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;I)I`
     */
    int readField(ClassVisitor arg0, Context arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;I)I`
     */
    int readMethod(ClassVisitor arg0, Context arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljava.lang.String;`
     */
    String readModule(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljava.lang.String;`
     */
    String readPackage(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.AnnotationVisitor;ILjava.lang.String;[C)I`
     */
    int readElementValue(AnnotationVisitor arg0, int arg1, String arg2, arr_C arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.MethodVisitor;Ljdk.internal.org.objectweb.asm.Context;IZ)V`
     */
    void readParameterAnnotations(MethodVisitor arg0, Context arg1, int arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.MethodVisitor;Ljdk.internal.org.objectweb.asm.Context;I)V`
     */
    void readCode(MethodVisitor arg0, Context arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Label;`
     */
    Label createLabel(int arg0, Label_interface arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[Ljdk.internal.org.objectweb.asm.Label;)V`
     */
    void createDebugLabel(int arg0, Label_interface arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Context;)V`
     */
    void computeImplicitFrame(Context arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `([II)I`
     */
    int getTypeAnnotationBytecodeOffset(arr_I arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(IZZLjdk.internal.org.objectweb.asm.Context;)I`
     */
    int readStackMapFrame(int arg0, bool arg1, bool arg2, Context arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Label;`
     */
    Label readLabel(int arg0, Label_interface arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[Ljava.lang.Object;I[C[Ljdk.internal.org.objectweb.asm.Label;)I`
     */
    int readVerificationTypeInfo(int arg0, Object_interface arg1, int arg2, arr_C arg3, Label_interface arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljava.lang.String;`
     */
    String readStringish(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `(I[C)Ljdk.internal.org.objectweb.asm.ConstantDynamic;`
     */
    ConstantDynamic readConstantDynamic(int arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `()I`
     */
    int getAccess();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassReader`
     * Signature: `()Ljava.lang.String;`
     */
    String getSuperName();
};


/**
 * Classpath: `[Ljdk.internal.org.objectweb.asm.Attribute;`
 */
class Attribute_interface : public Object {
protected:
    const inline static char *className = "[Ljdk.internal.org.objectweb.asm.Attribute;";
public:
    STATICINITIALIZE;

    Attribute_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.Context`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class Context : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Context";
public:
    STATICINITIALIZE;

    Context(jobject object) : Object(object) {}

};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.ConstantDynamic`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class ConstantDynamic : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ConstantDynamic";
public:
    STATICINITIALIZE;

    ConstantDynamic(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `()Ljava.lang.String;`
     */
    String getDescriptor();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `()I`
     */
    int getSize();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `()Ljdk.internal.org.objectweb.asm.Handle;`
     */
    Handle getBootstrapMethod();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `()I`
     */
    int getBootstrapMethodArgumentCount();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ConstantDynamic`
     * Signature: `(I)Ljava.lang.Object;`
     */
    Object getBootstrapMethodArgument(int arg0);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.SymbolTable`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class SymbolTable : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.SymbolTable";
public:
    STATICINITIALIZE;

    SymbolTable(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;)V`
     */
    void add(SymbolTable_Entry arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(I)Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;`
     */
    SymbolTable_Entry get(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;)Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;`
     */
    SymbolTable_Entry put(SymbolTable_Entry arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(II)I`
     */
    static int hash(int arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;I)I`
     */
    static int hash(int arg0, String arg1, String arg2, String arg3, int arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)I`
     */
    static int hash(int arg0, String arg1, String arg2, String arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;)I`
     */
    static int hash(int arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;)I`
     */
    static int hash(int arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;I)I`
     */
    static int hash(int arg0, String arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;I)I`
     */
    static int hash(int arg0, String arg1, String arg2, int arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(IJ)I`
     */
    static int hash(int arg0, long arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(I)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol getType(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `()Ljava.lang.String;`
     */
    String getClassName();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;)I`
     */
    int setMajorVersionAndClassName(int arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;)I`
     */
    int addConstantUtf8(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;)V`
     */
    void addConstantUtf8(int arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantClass(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantModule(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;)V`
     */
    void addConstantNameAndType(int arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)I`
     */
    int addConstantNameAndType(String arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `()I`
     */
    int computeBootstrapMethodsSize();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `()I`
     */
    int getConstantPoolLength();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `()I`
     */
    int getConstantPoolCount();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ByteVector;)V`
     */
    void putConstantPool(ByteVector arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ByteVector;)V`
     */
    void putBootstrapMethods(ByteVector arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstant(Object arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantMethodType(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantPackage(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void addConstantMethodHandle(int arg0, int arg1, String arg2, String arg3, String arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantMethodHandle(int arg0, String arg1, String arg2, String arg3, bool arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantInvokeDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantFieldref(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantMethodref(String arg0, String arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;`
     */
    SymbolTable_Entry addConstantMemberReference(int arg0, String arg1, String arg2, String arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void addConstantMemberReference(int arg0, int arg1, String arg2, String arg3, String arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(II)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantIntegerOrFloat(int arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(III)V`
     */
    void addConstantIntegerOrFloat(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(IJ)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantLongOrDouble(int arg0, long arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(IIJ)V`
     */
    void addConstantLongOrDouble(int arg0, int arg1, long arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(IILjava.lang.String;Ljava.lang.String;I)V`
     */
    void addConstantDynamicOrInvokeDynamicReference(int arg0, int arg1, String arg2, String arg3, int arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;I)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantDynamicOrInvokeDynamicReference(int arg0, String arg1, String arg2, int arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(IILjava.lang.String;)V`
     */
    void addConstantUtf8Reference(int arg0, int arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(ILjava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantUtf8Reference(int arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljdk.internal.org.objectweb.asm.ClassReader;[C)V`
     */
    void copyBootstrapMethods(ClassReader arg0, arr_C arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(I)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantInteger(int arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(F)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantFloat(float arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(J)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantLong(long arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(D)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantDouble(double arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addConstantString(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addBootstrapMethod(Handle arg0, Object_interface arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(III)Ljdk.internal.org.objectweb.asm.Symbol;`
     */
    Symbol addBootstrapMethod(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;)I`
     */
    int addTypeInternal(SymbolTable_Entry arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;)I`
     */
    int addType(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `()Ljdk.internal.org.objectweb.asm.ClassReader;`
     */
    ClassReader getSource();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `()I`
     */
    int getMajorVersion();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int addUninitializedType(String arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.SymbolTable`
     * Signature: `(II)I`
     */
    int addMergedType(int arg0, int arg1);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.Symbol`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class Symbol : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Symbol";
public:
    STATICINITIALIZE;

    Symbol(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.Symbol`
     * Signature: `()I`
     */
    int getArgumentsAndReturnSizes();
};


/**
 * Classpath: `java.lang.invoke.LambdaFormEditor$TransformKey`
 * Enclosing class: `java.lang.invoke.LambdaFormEditor`
 * Package name: `java.lang.invoke`
 */
class LambdaFormEditor_TransformKey : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormEditor$TransformKey";
public:
    STATICINITIALIZE;

    LambdaFormEditor_TransformKey(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(Ljava.lang.invoke.LambdaFormEditor$Transform;)Z`
     */
    bool equals(LambdaFormEditor_Transform arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(Ljava.lang.invoke.LambdaFormEditor$TransformKey;)Z`
     */
    bool equals(LambdaFormEditor_TransformKey arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(BI)Ljava.lang.invoke.LambdaFormEditor$TransformKey;`
     */
    static LambdaFormEditor_TransformKey of(byte arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(BII)Ljava.lang.invoke.LambdaFormEditor$TransformKey;`
     */
    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(BIII)Ljava.lang.invoke.LambdaFormEditor$TransformKey;`
     */
    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(B[I)Ljava.lang.invoke.LambdaFormEditor$TransformKey;`
     */
    static LambdaFormEditor_TransformKey of(byte arg0, arr_I arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(BI[I)Ljava.lang.invoke.LambdaFormEditor$TransformKey;`
     */
    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, arr_I arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(BII[B)Ljava.lang.invoke.LambdaFormEditor$TransformKey;`
     */
    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, int arg2, arr_B arg3);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaFormEditor$Transform;`
     */
    LambdaFormEditor_Transform withResult(LambdaForm arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(II)J`
     */
    static long packedBytes(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(IIII)J`
     */
    static long packedBytes(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `([B)J`
     */
    static long packedBytes(arr_B arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(III)J`
     */
    static long packedBytes(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(I)B`
     */
    static byte bval(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(I)Z`
     */
    static bool inRange(int arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$TransformKey`
     * Signature: `(B[I[B)Ljava.lang.invoke.LambdaFormEditor$TransformKey;`
     */
    static LambdaFormEditor_TransformKey ofBothArrays(byte arg0, arr_I arg1, arr_B arg2);
};


/**
 * Classpath: `java.lang.ref.SoftReference`
 * Package name: `java.lang.ref`
 */
class SoftReference : public Reference {
protected:
    const inline static char *className = "java.lang.ref.SoftReference";
public:
    STATICINITIALIZE;

    SoftReference(jobject object) : Reference(object) {}


    /**
     * Declaring class: `java.lang.ref.SoftReference`
     * Signature: `()Ljava.lang.Object;`
     */
    Object get();
};


/**
 * Classpath: `[Ljava.lang.invoke.LambdaForm$BasicType;`
 */
class LambdaForm_BasicType_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.invoke.LambdaForm$BasicType;";
public:
    STATICINITIALIZE;

    LambdaForm_BasicType_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `jdk.internal.perf.PerfCounter`
 * Package name: `jdk.internal.perf`
 */
class PerfCounter : public Object {
protected:
    const inline static char *className = "jdk.internal.perf.PerfCounter";
public:
    STATICINITIALIZE;

    PerfCounter(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `(J)V`
     */
    void add(long arg0);

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()J`
     */
    long get();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter getParentDelegationTime();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `(J)V`
     */
    void addTime(long arg0);

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter getFindClassTime();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `(J)V`
     */
    void addElapsedTimeFrom(long arg0);

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter getFindClasses();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()V`
     */
    void increment();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `(J)V`
     */
    void set(long arg0);

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter newPerfCounter(String arg0);

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter getZipFileOpenTime();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter getZipFileCount();

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter newConstantPerfCounter(String arg0);

    /**
     * Declaring class: `jdk.internal.perf.PerfCounter`
     * Signature: `()Ljdk.internal.perf.PerfCounter;`
     */
    static PerfCounter getReadClassBytesTime();
};


/**
 * Classpath: `java.lang.invoke.Invokers`
 * Package name: `java.lang.invoke`
 */
class Invokers : public Object {
protected:
    const inline static char *className = "java.lang.invoke.Invokers";
public:
    STATICINITIALIZE;

    Invokers(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(B)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     */
    static LambdaForm_NamedFunction getFunction(byte arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(B)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     */
    static LambdaForm_NamedFunction createFunction(byte arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     * Throws: `java.lang.ReflectiveOperationException`
     */
    static LambdaForm_NamedFunction getNamedFunction(String arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle spreadInvoker(int arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)V`
     */
    static void maybeCustomize(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     */
    static MemberName linkToTargetMethod(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     */
    static MemberName linkToCallSiteMethod(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;[Ljava.lang.Object;)Ljava.lang.invoke.MemberName;`
     */
    static MemberName methodHandleInvokeLinkerMethod(String arg0, MethodType arg1, Object_interface arg2);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     */
    static MemberName varHandleInvokeLinkerMethod(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle exactInvoker();

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle genericInvoker();

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle varHandleMethodExactInvoker(VarHandle_AccessMode arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle varHandleMethodInvoker(VarHandle_AccessMode arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle basicInvoker();

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     */
    static MemberName invokeBasicMethod(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle cachedInvoker(int arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Z)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle makeExactOrGeneralInvoker(bool arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(ILjava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle setCachedInvoker(int arg0, MethodHandle arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)Z`
     */
    bool checkInvoker(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(ZLjava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle cachedVHInvoker(bool arg0, VarHandle_AccessMode arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessMode;Z)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle makeVarHandleMethodInvoker(VarHandle_AccessMode arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(ZLjava.lang.invoke.VarHandle$AccessMode;Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle setCachedVHInvoker(bool arg0, VarHandle_AccessMode arg1, MethodHandle arg2);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;ZI)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm invokeHandleForm(MethodType arg0, bool arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)V`
     */
    void maybeCompileToBytecode(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm varHandleMethodInvokerHandleForm(MethodType arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)Z`
     */
    bool checkVarHandleInvoker(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;I)Ljava.lang.Class;`
     */
    static Class impliedRestargType(MethodType arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm varHandleMethodGenericLinkerHandleForm(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.WrongMethodTypeException;`
     */
    static WrongMethodTypeException newWrongMethodTypeException(MethodType arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm callSiteForm(MethodType arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;)V`
     */
    static void checkExactType(MethodHandle arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle checkGenericType(MethodHandle arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.CallSite;)Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle getCallSiteTarget(CallSite arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)V`
     */
    static void checkCustomized(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.VarHandle;Ljava.lang.invoke.VarHandle$AccessDescriptor;)Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle checkVarHandleGenericType(VarHandle arg0, VarHandle_AccessDescriptor arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.VarHandle;Ljava.lang.invoke.VarHandle$AccessDescriptor;)Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle checkVarHandleExactType(VarHandle arg0, VarHandle_AccessDescriptor arg1);

    /**
     * Declaring class: `java.lang.invoke.Invokers`
     * Signature: `(Ljava.lang.invoke.VarHandle;)Ljava.lang.invoke.VarHandle;`
     */
    static VarHandle directVarHandleTarget(VarHandle arg0);
};


/**
 * Classpath: `java.lang.invoke.VarHandle$AccessMode`
 * Enclosing class: `java.lang.invoke.VarHandle`
 * Package name: `java.lang.invoke`
 */
class VarHandle_AccessMode : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$AccessMode";
public:
    STATICINITIALIZE;

    VarHandle_AccessMode(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.invoke.VarHandle$AccessMode`
     * Signature: `()Ljava.lang.String;`
     */
    String methodName();

    /**
     * Declaring class: `java.lang.invoke.VarHandle$AccessMode`
     * Signature: `(Ljava.lang.String;)Ljava.lang.invoke.VarHandle$AccessMode;`
     */
    static VarHandle_AccessMode valueOf(String arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle$AccessMode`
     * Signature: `(Ljava.lang.String;)Ljava.lang.invoke.VarHandle$AccessMode;`
     */
    static VarHandle_AccessMode valueFromMethodName(String arg0);
};


/**
 * Classpath: `java.lang.invoke.WrongMethodTypeException`
 * Package name: `java.lang.invoke`
 */
class WrongMethodTypeException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.invoke.WrongMethodTypeException";
public:
    STATICINITIALIZE;

    WrongMethodTypeException(jobject object) : RuntimeException(object) {}

};


/**
 * Classpath: `java.lang.invoke.CallSite`
 * Package name: `java.lang.invoke`
 */
class CallSite : public Object {
protected:
    const inline static char *className = "java.lang.invoke.CallSite";
public:
    STATICINITIALIZE;

    CallSite(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)V`
     */
    void setTargetNormal(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)V`
     */
    void setTargetVolatile(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()Ljava.lang.invoke.MethodType;`
     */
    MethodType type();

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `(Ljava.lang.invoke.MethodHandle;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.invoke.CallSite;`
     */
    static CallSite makeSite(MethodHandle arg0, String arg1, MethodType arg2, Object arg3, Class arg4);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle dynamicInvoker();

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle makeUninitializedCallSite(MethodType arg0);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.WrongMethodTypeException;`
     */
    static WrongMethodTypeException wrongTargetType(MethodHandle arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle getTargetHandle();

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle getTarget();

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object uninitializedCallSite(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    static MethodHandle uninitializedCallSiteHandle();

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)V`
     */
    void checkTargetChange(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()J`
     */
    static long getTargetOffset();

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)V`
     */
    void setTarget(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle makeDynamicInvoker();

    /**
     * Declaring class: `java.lang.invoke.CallSite`
     * Signature: `()Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle getTargetVolatile();
};


/**
 * Classpath: `java.lang.invoke.VarHandle`
 * Package name: `java.lang.invoke`
 */
class VarHandle : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle";
public:
    STATICINITIALIZE;

    VarHandle(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object get(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.invoke.VarHandle;`
     */
    VarHandle target();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()V`
     */
    static void fullFence();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)V`
     */
    void set(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.Class;`
     */
    Class varType();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.util.List;`
     */
    List coordinateTypes();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodType;`
     */
    MethodType accessModeType(VarHandle_AccessMode arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(I)Ljava.lang.invoke.MethodType;`
     */
    MethodType accessModeType(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessDescriptor;)V`
     */
    void throwWrongMethodTypeException(VarHandle_AccessDescriptor arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.invoke.VarHandle$TypesAndInvokers;`
     */
    VarHandle_TypesAndInvokers getTypesAndInvokers();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessType;)Ljava.lang.invoke.MethodType;`
     */
    MethodType accessModeTypeUncached(VarHandle_AccessType arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(I)Ljava.lang.invoke.MethodType;`
     */
    MethodType accessModeTypeUncached(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessMode;)Z`
     */
    bool isAccessModeSupported(VarHandle_AccessMode arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle getMethodHandle(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle getMethodHandleUncached(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()V`
     */
    static void loadLoadFence();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()V`
     */
    static void storeStoreFence();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.RuntimeException;`
     */
    RuntimeException unsupported();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.invoke.VarHandle;`
     */
    VarHandle asDirect();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Z`
     */
    bool hasInvokeExactBehavior();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getVolatile(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)V`
     */
    void setVolatile(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getOpaque(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)V`
     */
    void setOpaque(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)V`
     */
    void setRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Z`
     */
    bool compareAndSet(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object compareAndExchange(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object compareAndExchangeAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object compareAndExchangeRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Z`
     */
    bool weakCompareAndSetPlain(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Z`
     */
    bool weakCompareAndSet(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Z`
     */
    bool weakCompareAndSetAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Z`
     */
    bool weakCompareAndSetRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndSet(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndSetAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndSetRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndAdd(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndAddAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndAddRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseOr(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseOrAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseOrRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseAnd(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseAndAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseAndRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseXor(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseXorAcquire(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object getAndBitwiseXorRelease(Object_interface arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.invoke.VarHandle;`
     */
    VarHandle withInvokeExactBehavior();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()Ljava.lang.invoke.VarHandle;`
     */
    VarHandle withInvokeBehavior();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessDescriptor;)V`
     */
    void checkExactAccessMode(VarHandle_AccessDescriptor arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle toMethodHandle(VarHandle_AccessMode arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `(Ljava.lang.invoke.VarForm;)V`
     */
    void updateVarForm(VarForm arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()V`
     */
    static void acquireFence();

    /**
     * Declaring class: `java.lang.invoke.VarHandle`
     * Signature: `()V`
     */
    static void releaseFence();
};


/**
 * Classpath: `java.lang.invoke.VarHandle$AccessDescriptor`
 * Enclosing class: `java.lang.invoke.VarHandle`
 * Package name: `java.lang.invoke`
 */
class VarHandle_AccessDescriptor : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$AccessDescriptor";
public:
    STATICINITIALIZE;

    VarHandle_AccessDescriptor(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.invoke.VarHandle$TypesAndInvokers`
 * Enclosing class: `java.lang.invoke.VarHandle`
 * Package name: `java.lang.invoke`
 */
class VarHandle_TypesAndInvokers : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$TypesAndInvokers";
public:
    STATICINITIALIZE;

    VarHandle_TypesAndInvokers(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.invoke.VarHandle$AccessType`
 * Enclosing class: `java.lang.invoke.VarHandle`
 * Package name: `java.lang.invoke`
 */
class VarHandle_AccessType : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$AccessType";
public:
    STATICINITIALIZE;

    VarHandle_AccessType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.invoke.VarHandle$AccessType`
     * Signature: `(Ljava.lang.String;)Ljava.lang.invoke.VarHandle$AccessType;`
     */
    static VarHandle_AccessType valueOf(String arg0);

    /**
     * Declaring class: `java.lang.invoke.VarHandle$AccessType`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;`
     */
    MethodType accessModeType(Class arg0, Class arg1, Class_interface arg2);

    /**
     * Declaring class: `java.lang.invoke.VarHandle$AccessType`
     * Signature: `([Ljava.lang.Class;Ljava.lang.Class;[Ljava.lang.Class;)I`
     */
    static int fillParameters(Class_interface arg0, Class arg1, Class_interface arg2);
};


/**
 * Classpath: `java.lang.invoke.VarForm`
 * Package name: `java.lang.invoke`
 */
class VarForm : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarForm";
public:
    STATICINITIALIZE;

    VarForm(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.VarForm`
     * Signature: `(I)Ljava.lang.invoke.MethodType;`
     */
    MethodType getMethodType(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarForm`
     * Signature: `(I)Ljava.lang.invoke.MemberName;`
     */
    MemberName getMemberNameOrNull(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarForm`
     * Signature: `(I)Ljava.lang.invoke.MemberName;`
     */
    MemberName getMemberName(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarForm`
     * Signature: `(Ljava.lang.Class;[Ljava.lang.Class;)V`
     */
    void initMethodTypes(Class arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.invoke.VarForm`
     * Signature: `(I)Ljava.lang.invoke.MemberName;`
     */
    MemberName resolveMemberName(int arg0);

    /**
     * Declaring class: `java.lang.invoke.VarForm`
     * Signature: `(I)Ljava.lang.invoke.MethodType;`
     */
    MethodType getMethodType_V(int arg0);
};


/**
 * Classpath: `java.lang.IndexOutOfBoundsException`
 * Package name: `java.lang`
 */
class IndexOutOfBoundsException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.IndexOutOfBoundsException";
public:
    STATICINITIALIZE;

    IndexOutOfBoundsException(jobject object) : RuntimeException(object) {}

};


/**
 * Classpath: `java.lang.reflect.Method`
 * Package name: `java.lang.reflect`
 */
class Method : public Executable {
protected:
    const inline static char *className = "java.lang.reflect.Method";
public:
    STATICINITIALIZE;

    Method(jobject object) : Executable(object) {}


    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException`
     */
    Object invoke(Object arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Lsun.reflect.generics.repository.MethodRepository;`
     */
    MethodRepository getGenericInfo();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Lsun.reflect.generics.factory.GenericsFactory;`
     */
    GenericsFactory getFactory();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getReturnType();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.String;`
     */
    String toGenericString();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(Z)V`
     */
    void setAccessible(bool arg0);

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void checkCanSetAccessible(Class arg0);

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.String;`
     */
    String toShortString();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.reflect.Method;`
     */
    Method getRoot();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.String;`
     */
    String getGenericSignature();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.reflect.Method;`
     */
    Method copy();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Z`
     */
    bool isVarArgs();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()I`
     */
    int getParameterCount();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Z`
     */
    bool isDefault();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.String;`
     */
    String toShortSignature();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type getGenericReturnType();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljdk.internal.reflect.MethodAccessor;`
     */
    MethodAccessor acquireMethodAccessor();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljdk.internal.reflect.MethodAccessor;`
     */
    MethodAccessor getMethodAccessor();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(Ljdk.internal.reflect.MethodAccessor;)V`
     */
    void setMethodAccessor(MethodAccessor arg0);

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.reflect.Method;`
     */
    Method leafCopy();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Z`
     */
    bool hasGenericInformation();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void specificToStringHeader(StringBuilder arg0);

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void specificToGenericStringHeader(StringBuilder arg0);

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Z`
     */
    bool isBridge();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getDefaultValue();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `()Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedReturnType();

    /**
     * Declaring class: `java.lang.reflect.Method`
     * Signature: `(I[Ljava.lang.Class;)Z`
     */
    bool handleParameterNumberMismatch(int arg0, Class_interface arg1);
};


/**
 * Classpath: `jdk.internal.reflect.MethodAccessor`
 * Package name: `jdk.internal.reflect`
 */
class MethodAccessor : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.reflect.MethodAccessor";
public:
    STATICINITIALIZE;

    MethodAccessor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.Long`
 * Package name: `java.lang`
 */
class Long : public Number {
protected:
    const inline static char *className = "java.lang.Long";
public:
    STATICINITIALIZE;

    Long(jobject object) : Number(object) {}


    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)I`
     */
    static int numberOfLeadingZeros(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)I`
     */
    static int numberOfTrailingZeros(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)I`
     */
    static int bitCount(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)Ljava.lang.String;`
     */
    static String toString(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI)Ljava.lang.String;`
     */
    static String toString(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)I`
     */
    static int hashCode(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)J`
     */
    static long min(long arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)J`
     */
    static long max(long arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)I`
     */
    static int signum(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)J`
     */
    static long reverseBytes(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI[B)I`
     */
    static int getChars(long arg0, int arg1, arr_B arg2);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;J)Ljava.lang.Long;`
     */
    static Long getLong(String arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Long;`
     */
    static Long getLong(String arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;Ljava.lang.Long;)Ljava.lang.Long;`
     */
    static Long getLong(String arg0, Long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)I`
     */
    static int compare(long arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()B`
     */
    byte byteValue();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()S`
     */
    short shortValue();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()I`
     */
    int intValue();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()J`
     */
    long longValue();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()F`
     */
    float floatValue();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `()D`
     */
    double doubleValue();

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;I)Ljava.lang.Long;`
     * Throws: `java.lang.NumberFormatException`
     */
    static Long valueOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)Ljava.lang.Long;`
     */
    static Long valueOf(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Long;`
     * Throws: `java.lang.NumberFormatException`
     */
    static Long valueOf(String arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)Ljava.lang.String;`
     */
    static String toHexString(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Long;`
     * Throws: `java.lang.NumberFormatException`
     */
    static Long decode(String arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Long;`
     */
    Long resolveConstantDesc(MethodHandles_Lookup arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)J`
     */
    static long reverse(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)I`
     */
    static int stringSize(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)J`
     */
    static long sum(long arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)I`
     */
    static int compareUnsigned(long arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI)Ljava.lang.String;`
     */
    static String toStringUTF16(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI)Ljava.lang.String;`
     */
    static String toUnsignedString(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)Ljava.lang.String;`
     */
    static String toUnsignedString(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI)Ljava.lang.String;`
     */
    static String toUnsignedString0(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.CharSequence;III)J`
     * Throws: `java.lang.NumberFormatException`
     */
    static long parseLong(CharSequence arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;I)J`
     * Throws: `java.lang.NumberFormatException`
     */
    static long parseLong(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;)J`
     * Throws: `java.lang.NumberFormatException`
     */
    static long parseLong(String arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)Ljava.lang.String;`
     */
    static String toOctalString(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)Ljava.lang.String;`
     */
    static String toBinaryString(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)J`
     */
    static long divideUnsigned(long arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)J`
     */
    static long remainderUnsigned(long arg0, long arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)J`
     */
    static long highestOneBit(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)J`
     */
    static long lowestOneBit(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI)J`
     */
    static long rotateLeft(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI)J`
     */
    static long rotateRight(long arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(J)Ljava.math.BigInteger;`
     */
    static BigInteger toUnsignedBigInteger(long arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI[BII)V`
     */
    static void formatUnsignedLong0(long arg0, int arg1, arr_B arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JI[BII)V`
     */
    static void formatUnsignedLong0UTF16(long arg0, int arg1, arr_B arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;I)J`
     * Throws: `java.lang.NumberFormatException`
     */
    static long parseUnsignedLong(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.CharSequence;III)J`
     * Throws: `java.lang.NumberFormatException`
     */
    static long parseUnsignedLong(CharSequence arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(Ljava.lang.String;)J`
     * Throws: `java.lang.NumberFormatException`
     */
    static long parseUnsignedLong(String arg0);

    /**
     * Declaring class: `java.lang.Long`
     * Signature: `(JJ)Ljava.lang.String;`
     */
    static String fastUUID(long arg0, long arg1);
};


/**
 * Classpath: `java.lang.invoke.MethodHandles$Lookup`
 * Enclosing class: `java.lang.invoke.MethodHandles`
 * Package name: `java.lang.invoke`
 */
class MethodHandles_Lookup : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandles$Lookup";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.ReflectiveOperationException`
     */
    MethodHandle linkMethodHandleConstant(byte arg0, Class arg1, String arg2, Object arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException, java.lang.IllegalAccessException`
     */
    Class findClass(String arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `([B)Ljava.lang.Class;`
     * Throws: `java.lang.IllegalAccessException`
     */
    Class defineClass(arr_B arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandles$Lookup;`
     */
    MethodHandles_Lookup in(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)V`
     * Throws: `java.lang.IllegalAccessException`
     */
    void checkAccess(byte arg0, Class arg1, MemberName arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     */
    MemberName resolveOrNull(byte arg0, Class arg1, String arg2, MethodType arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.invoke.MemberName;)Ljava.lang.invoke.MemberName;`
     */
    MemberName resolveOrNull(byte arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.invoke.MemberName;)Ljava.lang.invoke.MemberName;`
     * Throws: `java.lang.ReflectiveOperationException`
     */
    MemberName resolveOrFail(byte arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MemberName;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.IllegalAccessException`
     */
    MemberName resolveOrFail(byte arg0, Class arg1, String arg2, Class arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.IllegalAccessException`
     */
    MemberName resolveOrFail(byte arg0, Class arg1, String arg2, MethodType arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Class;`
     * Throws: `java.lang.IllegalAccessException`
     */
    Class ensureInitialized(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandleInfo;`
     */
    MethodHandleInfo revealDirect(MethodHandle arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.IllegalAccessException;`
     */
    IllegalAccessException makeAccessException(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()Ljava.lang.Class;`
     */
    Class lookupClass();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()Ljava.lang.Class;`
     */
    Class previousLookupClass();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.IllegalAccessException`
     */
    MethodHandle findVirtual(Class arg0, String arg1, MethodType arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.IllegalAccessException`
     */
    MethodHandle findStatic(Class arg0, String arg1, MethodType arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()I`
     */
    int lookupModes();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;I)Ljava.lang.invoke.MethodHandles$Lookup;`
     */
    static MethodHandles_Lookup newLookup(Class arg0, Class arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)V`
     */
    static void checkUnprivilegedlookupClass(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool isClassAccessible(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()V`
     */
    void ensureDefineClassPermission();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `([B)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;`
     */
    MethodHandles_Lookup_ClassDefiner makeClassDefiner(arr_B arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()Z`
     */
    bool hasFullPrivilegeAccess();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `([B)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;`
     */
    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(arr_B arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `([BLjava.util.Set;Z)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;`
     */
    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(arr_B arg0, Set arg1, bool arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.String;[B)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;`
     */
    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(String arg0, arr_B arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.invoke.MethodHandles$Lookup$ClassFile;Ljava.util.Set;Z)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;`
     */
    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(MethodHandles_Lookup_ClassFile arg0, Set arg1, bool arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandles$Lookup;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandles_Lookup findBoundCallerLookup(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectMethod(byte arg0, Class arg1, MemberName arg2, MethodHandles_Lookup arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle findVirtualForMH(String arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle findVirtualForVH(String arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectConstructor(Class arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Class;`
     * Throws: `java.lang.IllegalAccessException`
     */
    Class accessClass(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)V`
     */
    void checkSecurityManager(Class arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void checkSecurityManager(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)V`
     * Throws: `java.lang.IllegalAccessException`
     */
    void checkSpecialCaller(Class arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectField(byte arg0, Class arg1, MemberName arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BBLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.VarHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    VarHandle getFieldVarHandle(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectMethodNoRestrictInvokeSpecial(Class arg0, MemberName arg1, MethodHandles_Lookup arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Method;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle unreflectForMH(Method arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Method;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle unreflectForVH(Method arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectMethodNoSecurityManager(byte arg0, Class arg1, MemberName arg2, MethodHandles_Lookup arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectConstructorNoSecurityManager(Class arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Field;Z)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle unreflectField(Field arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectFieldNoSecurityManager(byte arg0, Class arg1, MemberName arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BBLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.VarHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    VarHandle getFieldVarHandleNoSecurityManager(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;)V`
     * Throws: `java.lang.IllegalAccessException`
     */
    void checkSymbolicClass(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()Ljava.lang.Class;`
     */
    Class lookupClassOrNull();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.String;)V`
     * Throws: `java.lang.NoSuchMethodException`
     */
    void checkMethodName(byte arg0, String arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(I)I`
     */
    static int fixmods(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.String;`
     */
    String accessFailedMessage(Class arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;ZZLjava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectMethodCommon(byte arg0, Class arg1, MemberName arg2, bool arg3, bool arg4, MethodHandles_Lookup arg5);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)V`
     * Throws: `java.lang.IllegalAccessException`
     */
    void checkMethod(byte arg0, Class arg1, MemberName arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.invoke.MemberName;)Z`
     */
    bool restrictProtectedReceiver(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.invoke.MemberName;Ljava.lang.invoke.DirectMethodHandle;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle restrictReceiver(MemberName arg0, DirectMethodHandle arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle maybeBindCaller(MemberName arg0, MethodHandle arg1, MethodHandles_Lookup arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectFieldCommon(byte arg0, Class arg1, MemberName arg2, bool arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)V`
     * Throws: `java.lang.IllegalAccessException`
     */
    void checkField(byte arg0, Class arg1, MemberName arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BBLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.VarHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    VarHandle getFieldVarHandleCommon(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4, bool arg5);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle getDirectConstructorCommon(Class arg0, MemberName arg1, bool arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.ReflectiveOperationException`
     */
    MethodHandle getDirectMethodForConstant(byte arg0, Class arg1, MemberName arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Z`
     */
    bool canBeCached(byte arg0, Class arg1, MemberName arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(I)Ljava.lang.invoke.MethodHandles$Lookup;`
     */
    MethodHandles_Lookup dropLookupMode(int arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `([BZ[Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;)Ljava.lang.invoke.MethodHandles$Lookup;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandles_Lookup defineHiddenClass(arr_B arg0, bool arg1, MethodHandles_Lookup_ClassOption_interface arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `([BLjava.lang.Object;Z[Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;)Ljava.lang.invoke.MethodHandles$Lookup;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandles_Lookup defineHiddenClassWithClassData(arr_B arg0, Object arg1, bool arg2, MethodHandles_Lookup_ClassOption_interface arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()Ljava.security.ProtectionDomain;`
     */
    ProtectionDomain lookupClassProtectionDomain();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.IllegalAccessException`
     */
    MethodHandle findConstructor(Class arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.IllegalAccessException`
     */
    MethodHandle findSpecial(Class arg0, String arg1, MethodType arg2, Class arg3);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.IllegalAccessException`
     */
    MethodHandle findGetter(Class arg0, String arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.IllegalAccessException`
     */
    MethodHandle findSetter(Class arg0, String arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.VarHandle;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.IllegalAccessException`
     */
    VarHandle findVarHandle(Class arg0, String arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.IllegalAccessException`
     */
    MethodHandle findStaticGetter(Class arg0, String arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.IllegalAccessException`
     */
    MethodHandle findStaticSetter(Class arg0, String arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.VarHandle;`
     * Throws: `java.lang.NoSuchFieldException, java.lang.IllegalAccessException`
     */
    VarHandle findStaticVarHandle(Class arg0, String arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.Object;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.NoSuchMethodException, java.lang.IllegalAccessException`
     */
    MethodHandle bind(Object arg0, String arg1, MethodType arg2);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Method;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle unreflect(Method arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Method;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle unreflectSpecial(Method arg0, Class arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Constructor;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle unreflectConstructor(Constructor arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Field;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle unreflectGetter(Field arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Field;)Ljava.lang.invoke.MethodHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    MethodHandle unreflectSetter(Field arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `(Ljava.lang.reflect.Field;)Ljava.lang.invoke.VarHandle;`
     * Throws: `java.lang.IllegalAccessException`
     */
    VarHandle unreflectVarHandle(Field arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup`
     * Signature: `()Z`
     */
    bool hasPrivateAccess();
};


/**
 * Classpath: `java.lang.invoke.MethodHandleInfo`
 * Package name: `java.lang.invoke`
 */
class MethodHandleInfo : public JavaObject {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandleInfo";
public:
    STATICINITIALIZE;

    MethodHandleInfo(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.invoke.MethodHandles$Lookup$ClassDefiner`
 * Enclosing class: `java.lang.invoke.MethodHandles$Lookup`
 * Package name: `java.lang.invoke`
 */
class MethodHandles_Lookup_ClassDefiner : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandles$Lookup$ClassDefiner";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup_ClassDefiner(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassDefiner`
     * Signature: `()Ljava.lang.String;`
     */
    String className_();

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassDefiner`
     * Signature: `(ZLjava.lang.Object;)Ljava.lang.Class;`
     */
    Class defineClass(bool arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassDefiner`
     * Signature: `(Z)Ljava.lang.Class;`
     */
    Class defineClass(bool arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassDefiner`
     * Signature: `(ZLjava.lang.Object;)Ljava.lang.invoke.MethodHandles$Lookup;`
     */
    MethodHandles_Lookup defineClassAsLookup(bool arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassDefiner`
     * Signature: `(Z)Ljava.lang.invoke.MethodHandles$Lookup;`
     */
    MethodHandles_Lookup defineClassAsLookup(bool arg0);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassDefiner`
     * Signature: `()Z`
     */
    bool isNestmate();
};


/**
 * Classpath: `java.lang.invoke.MethodHandles$Lookup$ClassFile`
 * Enclosing class: `java.lang.invoke.MethodHandles$Lookup`
 * Package name: `java.lang.invoke`
 */
class MethodHandles_Lookup_ClassFile : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandles$Lookup$ClassFile";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup_ClassFile(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassFile`
     * Signature: `([BLjava.lang.String;)Ljava.lang.invoke.MethodHandles$Lookup$ClassFile;`
     */
    static MethodHandles_Lookup_ClassFile newInstance(arr_B arg0, String arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassFile`
     * Signature: `([BI)I`
     */
    static int readInt(arr_B arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassFile`
     * Signature: `(Ljava.lang.String;[B)Ljava.lang.invoke.MethodHandles$Lookup$ClassFile;`
     */
    static MethodHandles_Lookup_ClassFile newInstanceNoCheck(String arg0, arr_B arg1);

    /**
     * Declaring class: `java.lang.invoke.MethodHandles$Lookup$ClassFile`
     * Signature: `([BI)I`
     */
    static int readUnsignedShort(arr_B arg0, int arg1);
};


/**
 * Classpath: `java.lang.invoke.DirectMethodHandle`
 * Package name: `java.lang.invoke`
 */
class DirectMethodHandle : public MethodHandle {
protected:
    const inline static char *className = "java.lang.invoke.DirectMethodHandle";
public:
    STATICINITIALIZE;

    DirectMethodHandle(jobject object) : MethodHandle(object) {}


    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.InstantiationException`
     */
    static Object allocateInstance(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.Class;)Ljava.lang.invoke.DirectMethodHandle;`
     */
    static DirectMethodHandle make(byte arg0, Class arg1, MemberName arg2, Class arg3);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.DirectMethodHandle;`
     */
    static DirectMethodHandle make(Class arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.DirectMethodHandle;`
     */
    static DirectMethodHandle make(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)J`
     */
    static long fieldOffset(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm preparedLambdaForm(MemberName arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm preparedLambdaForm(MethodType arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm preparedLambdaForm(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm preparedFieldLambdaForm(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(BZLjava.lang.Class;)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm preparedFieldLambdaForm(byte arg0, bool arg1, Class arg2);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.DirectMethodHandle;`
     */
    static DirectMethodHandle makeAllocator(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `()Ljava.lang.invoke.MemberName;`
     */
    MemberName internalMemberName();

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object internalMemberName(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;)Z`
     */
    static bool shouldBeInitialized(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.LambdaForm;Ljava.lang.invoke.MemberName;)V`
     */
    static void maybeCompile(LambdaForm arg0, MemberName arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm makePreparedLambdaForm(MethodType arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(B)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     */
    static LambdaForm_NamedFunction getFunction(byte arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.LambdaForm$Name;)Ljava.lang.Object;`
     */
    static Object findDirectMethodHandle(LambdaForm_Name arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)V`
     */
    static void ensureInitialized(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `()V`
     */
    void ensureInitialized();

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MemberName;)Z`
     */
    static bool checkInitialized(MemberName arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object staticBase(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)J`
     */
    static long staticOffset(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object checkCast(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object checkCast(Object arg0, Object arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Class;)I`
     */
    static int ftypeKind(Class arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(BZI)I`
     */
    static int afIndex(byte arg0, bool arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(BZI)Ljava.lang.invoke.LambdaForm;`
     */
    static LambdaForm makePreparedFieldLambdaForm(byte arg0, bool arg1, int arg2);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(ZZLsun.invoke.util.Wrapper;)Ljava.lang.invoke.LambdaForm$Kind;`
     */
    static LambdaForm_Kind getFieldKind(bool arg0, bool arg1, Wrapper arg2);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(B)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     */
    static LambdaForm_NamedFunction createFunction(byte arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm$NamedFunction;`
     * Throws: `java.lang.ReflectiveOperationException`
     */
    static LambdaForm_NamedFunction getNamedFunction(String arg0, MethodType arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object internalMemberNameEnsureInit(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object checkBase(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object constructorMethod(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object checkReceiver(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `()Ljava.lang.String;`
     */
    String internalProperties();

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `()Ljava.lang.invoke.BoundMethodHandle;`
     */
    BoundMethodHandle rebind();

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle copyWith(MethodType arg0, LambdaForm arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle viewAsType(MethodType arg0, bool arg1);

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `()Z`
     */
    bool isCrackable();

    /**
     * Declaring class: `java.lang.invoke.DirectMethodHandle`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object nullCheck(Object arg0);
};


/**
 * Classpath: `java.lang.invoke.LambdaForm$Kind`
 * Enclosing class: `java.lang.invoke.LambdaForm`
 * Package name: `java.lang.invoke`
 */
class LambdaForm_Kind : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$Kind";
public:
    STATICINITIALIZE;

    LambdaForm_Kind(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaForm$Kind`
     * Signature: `(Ljava.lang.String;)Ljava.lang.invoke.LambdaForm$Kind;`
     */
    static LambdaForm_Kind valueOf(String arg0);
};


/**
 * Classpath: `[Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;`
 */
class MethodHandles_Lookup_ClassOption_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup_ClassOption_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.math.BigInteger`
 * Package name: `java.math`
 */
class BigInteger : public Number {
protected:
    const inline static char *className = "java.math.BigInteger";
public:
    STATICINITIALIZE;

    BigInteger(jobject object) : Number(object) {}


    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger subtract(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger xor_(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger add(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(J)Ljava.math.BigInteger;`
     */
    BigInteger add(long arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int bitCount();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.lang.String;`
     */
    String toString(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;Ljava.lang.StringBuilder;II)V`
     */
    static void toString(BigInteger arg0, StringBuilder arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger abs();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger sqrt();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger pow(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger min(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger max(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int signum();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[IIII)I`
     */
    static int implMulAdd(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[IIII)V`
     */
    static void shiftRightImplWorker(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[IIII)V`
     */
    static void shiftLeftImplWorker(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)I`
     */
    int getInt(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int intValue();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()J`
     */
    long longValue();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()F`
     */
    float floatValue();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()D`
     */
    double doubleValue();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I)Ljava.math.BigInteger;`
     */
    static BigInteger valueOf(arr_I arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(J)Ljava.math.BigInteger;`
     */
    static BigInteger valueOf(long arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger mod(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()V`
     */
    void checkRange();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger setBit(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([CII)I`
     */
    int parseInt(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger shiftLeft(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(J)Ljava.math.BigInteger;`
     */
    BigInteger multiply(long arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger multiply(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;Z)Ljava.math.BigInteger;`
     */
    BigInteger multiply(BigInteger arg0, bool arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int signBit();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger negate();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger and_(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger not_();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger or_(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()V`
     */
    static void reportOverflow();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([III)V`
     */
    static void destructiveMulAdd(arr_I arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(IILjava.util.Random;)Ljava.math.BigInteger;`
     */
    static BigInteger smallPrime(int arg0, int arg1, Random arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(IILjava.util.Random;)Ljava.math.BigInteger;`
     */
    static BigInteger largePrime(int arg0, int arg1, Random arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger remainder(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(ILjava.util.Random;)Z`
     */
    bool primeToCertainty(int arg0, Random arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)I`
     */
    static int getPrimeSearchLen(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int bitLength();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([II)I`
     */
    static int bitLength(arr_I arg0, int arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Z`
     */
    bool testBit(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(ILjava.util.Random;)Z`
     */
    bool passesMillerRabin(int arg0, Random arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Z`
     */
    bool passesLucasLehmer();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(ILjava.math.BigInteger;)I`
     */
    static int jacobiSymbol(int arg0, BigInteger arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(ILjava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    static BigInteger lucasLehmerSequence(int arg0, BigInteger arg1, BigInteger arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Z)Ljava.math.BigInteger;`
     */
    BigInteger square(bool arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger square();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger shiftRight(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int getLowestSetBit();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger modPow(BigInteger arg0, BigInteger arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)I`
     */
    int compareMagnitude(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(J)I`
     */
    int compareMagnitude(long arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([III)Ljava.math.BigInteger;`
     */
    static BigInteger multiplyByInt(arr_I arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    static BigInteger multiplyKaratsuba(BigInteger arg0, BigInteger arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    static BigInteger multiplyToomCook3(BigInteger arg0, BigInteger arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([II)V`
     */
    static void multiplyToLenCheck(arr_I arg0, int arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger getLower(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger getUpper(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(IIII)Ljava.math.BigInteger;`
     */
    BigInteger getToomSlice(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger exactDivideBy3();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger squareKaratsuba();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger squareToomCook3();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([II[II)V`
     * Throws: `java.lang.RuntimeException`
     */
    static void implSquareToLenChecks(arr_I arg0, int arg1, arr_I arg2, int arg3);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[IIII)I`
     */
    static int mulAdd(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([IIII)I`
     */
    static int addOne(arr_I arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([III)V`
     */
    static void primitiveLeftShift(arr_I arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger divideKnuth(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger divideBurnikelZiegler(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger remainderKnuth(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger remainderBurnikelZiegler(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)I`
     */
    static int bitLengthForInt(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([III)V`
     */
    static void primitiveRightShift(arr_I arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger oddModPow(BigInteger arg0, BigInteger arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;I)Ljava.math.BigInteger;`
     */
    BigInteger modPow2(BigInteger arg0, int arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger modInverse(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger divide(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[I[II[I)V`
     * Throws: `java.lang.RuntimeException`
     */
    static void implMontgomeryMultiplyChecks(arr_I arg0, arr_I arg1, arr_I arg2, int arg3, arr_I arg4);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[II)I`
     */
    static int subN(arr_I arg0, arr_I arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[II)I`
     */
    static int intArrayCmpToLen(arr_I arg0, arr_I arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `([I[IIII)V`
     */
    static void implMulAddCheck(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger mod2(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger shiftRightImpl(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int intLength();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.lang.StringBuilder;I)V`
     */
    static void padWithZeros(StringBuilder arg0, int arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(ILjava.lang.StringBuilder;I)V`
     */
    void smallToString(int arg0, StringBuilder arg1, int arg2);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(II)Ljava.math.BigInteger;`
     */
    static BigInteger getRadixConversionCache(int arg0, int arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int signInt();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int firstNonzeroIntNum();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(ILjava.util.Random;)Ljava.math.BigInteger;`
     */
    static BigInteger probablePrime(int arg0, Random arg1);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger nextProbablePrime();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger gcd(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(Ljava.math.BigInteger;)Ljava.math.BigInteger;`
     */
    BigInteger andNot(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger clearBit(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger flipBit(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `(I)Z`
     */
    bool isProbablePrime(int arg0);

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()J`
     */
    long longValueExact();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()I`
     */
    int intValueExact();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()S`
     */
    short shortValueExact();

    /**
     * Declaring class: `java.math.BigInteger`
     * Signature: `()B`
     */
    byte byteValueExact();
};


/**
 * Classpath: `java.util.Random`
 * Package name: `java.util`
 */
class Random : public Object {
protected:
    const inline static char *className = "java.util.Random";
public:
    STATICINITIALIZE;

    Random(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.Random`
     * Signature: `(I)I`
     */
    int next(int arg0);

    /**
     * Declaring class: `java.util.Random`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.Random`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Random`
     * Signature: `(J)V`
     */
    void setSeed(long arg0);

    /**
     * Declaring class: `java.util.Random`
     * Signature: `()J`
     */
    static long seedUniquifier();

    /**
     * Declaring class: `java.util.Random`
     * Signature: `(J)J`
     */
    static long initialScramble(long arg0);

    /**
     * Declaring class: `java.util.Random`
     * Signature: `(J)V`
     */
    void resetSeed(long arg0);
};


/**
 * Classpath: `java.lang.ClassNotFoundException`
 * Package name: `java.lang`
 */
class ClassNotFoundException : public ReflectiveOperationException {
protected:
    const inline static char *className = "java.lang.ClassNotFoundException";
public:
    STATICINITIALIZE;

    ClassNotFoundException(jobject object) : ReflectiveOperationException(object) {}


    /**
     * Declaring class: `java.lang.ClassNotFoundException`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.lang.ClassNotFoundException`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.lang.ClassNotFoundException`
     * Signature: `()Ljava.lang.Throwable;`
     */
    Throwable getException();
};


/**
 * Classpath: `java.io.ObjectInputStream$GetField`
 * Enclosing class: `java.io.ObjectInputStream`
 * Package name: `java.io`
 */
class ObjectInputStream_GetField : public Object {
protected:
    const inline static char *className = "java.io.ObjectInputStream$GetField";
public:
    STATICINITIALIZE;

    ObjectInputStream_GetField(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;J)J`
     * Throws: `java.io.IOException`
     */
    long get(String arg0, long arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;I)I`
     * Throws: `java.io.IOException`
     */
    int get(String arg0, int arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;S)S`
     * Throws: `java.io.IOException`
     */
    short get(String arg0, short arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;F)F`
     * Throws: `java.io.IOException`
     */
    float get(String arg0, float arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;D)D`
     * Throws: `java.io.IOException`
     */
    double get(String arg0, double arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object get(String arg0, Object arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;Z)Z`
     * Throws: `java.io.IOException`
     */
    bool get(String arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;B)B`
     * Throws: `java.io.IOException`
     */
    byte get(String arg0, byte arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;C)C`
     * Throws: `java.io.IOException`
     */
    char get(String arg0, char arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `()Ljava.io.ObjectStreamClass;`
     */
    ObjectStreamClass getObjectStreamClass();

    /**
     * Declaring class: `java.io.ObjectInputStream$GetField`
     * Signature: `(Ljava.lang.String;)Z`
     * Throws: `java.io.IOException`
     */
    bool defaulted(String arg0);
};


/**
 * Classpath: `java.io.ObjectInputValidation`
 * Package name: `java.io`
 */
class ObjectInputValidation : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectInputValidation";
public:
    STATICINITIALIZE;

    ObjectInputValidation(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.io.ObjectInputFilter`
 * Package name: `java.io`
 */
class ObjectInputFilter : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectInputFilter";
public:
    STATICINITIALIZE;

    ObjectInputFilter(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.Locale$FilteringMode`
 * Enclosing class: `java.util.Locale`
 * Package name: `java.util`
 */
class Locale_FilteringMode : public Enum {
protected:
    const inline static char *className = "java.util.Locale$FilteringMode";
public:
    STATICINITIALIZE;

    Locale_FilteringMode(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.util.Locale$FilteringMode`
     * Signature: `(Ljava.lang.String;)Ljava.util.Locale$FilteringMode;`
     */
    static Locale_FilteringMode valueOf(String arg0);
};


/**
 * Classpath: `sun.util.locale.LocaleExtensions`
 * Package name: `sun.util.locale`
 */
class LocaleExtensions : public Object {
protected:
    const inline static char *className = "sun.util.locale.LocaleExtensions";
public:
    STATICINITIALIZE;

    LocaleExtensions(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `(C)Z`
     */
    static bool isValidKey(char arg0);

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `(Ljava.lang.Character;)Ljava.lang.String;`
     */
    String getExtensionValue(Character arg0);

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `()Ljava.util.Set;`
     */
    Set getKeys();

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `()Ljava.util.Set;`
     */
    Set getUnicodeLocaleAttributes();

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getUnicodeLocaleType(String arg0);

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `()Ljava.util.Set;`
     */
    Set getUnicodeLocaleKeys();

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `()Ljava.lang.String;`
     */
    String getID();

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `(Ljava.util.SortedMap;)Ljava.lang.String;`
     */
    static String toID(SortedMap arg0);

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isValidUnicodeLocaleKey(String arg0);

    /**
     * Declaring class: `sun.util.locale.LocaleExtensions`
     * Signature: `(Ljava.lang.Character;)Lsun.util.locale.Extension;`
     */
    Extension getExtension(Character arg0);
};


/**
 * Classpath: `java.lang.Character`
 * Package name: `java.lang`
 */
class Character : public Object {
protected:
    const inline static char *className = "java.lang.Character";
public:
    STATICINITIALIZE;

    Character(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getName(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isJavaIdentifierStart(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isJavaIdentifierStart(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isJavaIdentifierPart(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isJavaIdentifierPart(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String toString(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Ljava.lang.String;`
     */
    static String toString(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)I`
     */
    static int hashCode(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)C`
     */
    static char reverseBytes(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isDigit(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isDigit(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isLowerCase(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isLowerCase(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isUpperCase(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isUpperCase(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isWhitespace(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isWhitespace(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(CC)I`
     */
    static int compare(char arg0, char arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `()C`
     */
    char charValue();

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Ljava.lang.Character;`
     */
    static Character valueOf(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I[CI)I`
     */
    static int toChars(int arg0, arr_C arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isHighSurrogate(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isLowSurrogate(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isSurrogate(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isSupplementaryCodePoint(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)C`
     */
    static char highSurrogate(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)C`
     */
    static char lowSurrogate(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(CC)I`
     */
    static int toCodePoint(char arg0, char arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CI)I`
     */
    static int codePointAt(arr_C arg0, int arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CII)I`
     */
    static int codePointAt(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(Ljava.lang.CharSequence;I)I`
     */
    static int codePointAt(CharSequence arg0, int arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(Ljava.lang.CharSequence;I)I`
     */
    static int codePointBefore(CharSequence arg0, int arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CI)I`
     */
    static int codePointBefore(arr_C arg0, int arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CII)I`
     */
    static int codePointBefore(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CII)I`
     */
    static int codePointCount(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(Ljava.lang.CharSequence;II)I`
     */
    static int codePointCount(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(Ljava.lang.CharSequence;II)I`
     */
    static int offsetByCodePoints(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CIIII)I`
     */
    static int offsetByCodePoints(arr_C arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)I`
     */
    static int toLowerCase(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)C`
     */
    static char toLowerCase(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)C`
     */
    static char toUpperCase(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)I`
     */
    static int toUpperCase(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isBmpCodePoint(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)I`
     */
    static int getType(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)I`
     */
    static int getType(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isLetter(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isLetter(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isLetterOrDigit(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isLetterOrDigit(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CII)I`
     */
    static int codePointAtImpl(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CII)I`
     */
    static int codePointBeforeImpl(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isValidCodePoint(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I[CI)V`
     */
    static void toSurrogates(int arg0, arr_C arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CII)I`
     */
    static int codePointCountImpl(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `([CIIII)I`
     */
    static int offsetByCodePointsImpl(arr_C arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isTitleCase(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isTitleCase(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isDefined(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isDefined(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isIdeographic(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isUnicodeIdentifierStart(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isUnicodeIdentifierStart(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isUnicodeIdentifierPart(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isUnicodeIdentifierPart(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isIdentifierIgnorable(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isIdentifierIgnorable(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)I`
     */
    static int toTitleCase(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)C`
     */
    static char toTitleCase(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(II)I`
     */
    static int digit(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(CI)I`
     */
    static int digit(char arg0, int arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)I`
     */
    static int getNumericValue(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)I`
     */
    static int getNumericValue(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isSpaceChar(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isSpaceChar(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isISOControl(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isISOControl(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)B`
     */
    static byte getDirectionality(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)B`
     */
    static byte getDirectionality(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isMirrored(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isMirrored(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)I`
     */
    static int toUpperCaseEx(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(CC)Z`
     */
    static bool isSurrogatePair(char arg0, char arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)I`
     */
    static int charCount(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isJavaLetter(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isJavaLetterOrDigit(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(I)Z`
     */
    static bool isAlphabetic(int arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(C)Z`
     */
    static bool isSpace(char arg0);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(II)C`
     */
    static char forDigit(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Character`
     * Signature: `(Ljava.lang.String;)I`
     */
    static int codePointOf(String arg0);
};


/**
 * Classpath: `sun.util.locale.Extension`
 * Package name: `sun.util.locale`
 */
class Extension : public Object {
protected:
    const inline static char *className = "sun.util.locale.Extension";
public:
    STATICINITIALIZE;

    Extension(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.util.locale.Extension`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.util.locale.Extension`
     * Signature: `()Ljava.lang.String;`
     */
    String getValue();

    /**
     * Declaring class: `sun.util.locale.Extension`
     * Signature: `()C`
     */
    char getKey();

    /**
     * Declaring class: `sun.util.locale.Extension`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setValue(String arg0);

    /**
     * Declaring class: `sun.util.locale.Extension`
     * Signature: `()Ljava.lang.String;`
     */
    String getID();
};


/**
 * Classpath: `sun.util.locale.BaseLocale`
 * Package name: `sun.util.locale`
 */
class BaseLocale : public Object {
protected:
    const inline static char *className = "sun.util.locale.BaseLocale";
public:
    STATICINITIALIZE;

    BaseLocale(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Lsun.util.locale.BaseLocale;`
     */
    static BaseLocale getInstance(String arg0, String arg1, String arg2, String arg3);

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `()Ljava.lang.String;`
     */
    String getLanguage();

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String convertOldISOCodes(String arg0);

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `()Ljava.lang.String;`
     */
    String getScript();

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `()Ljava.lang.String;`
     */
    String getVariant();

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `()Ljava.lang.String;`
     */
    String getRegion();

    /**
     * Declaring class: `sun.util.locale.BaseLocale`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Lsun.util.locale.BaseLocale;`
     */
    static BaseLocale createInstance(String arg0, String arg1);
};


/**
 * Classpath: `sun.util.locale.provider.LocaleResources`
 * Package name: `sun.util.locale.provider`
 */
class LocaleResources : public Object {
protected:
    const inline static char *className = "sun.util.locale.provider.LocaleResources";
public:
    STATICINITIALIZE;

    LocaleResources(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    static void trace(String arg0, Object_interface arg1);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getLocaleName(String arg0);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getCurrencyName(String arg0);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `()V`
     */
    void removeEmptyReferences();

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object getBreakIteratorInfo(String arg0);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getCalendarData(String arg0);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `()Ljava.lang.String;`
     */
    String getCollationData();

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object getTimeZoneNames(String arg0);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `()Ljava.util.Set;`
     */
    Set getZoneIDs();

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `()Ljava.util.ResourceBundle;`
     */
    ResourceBundle getJavaTimeFormatData();

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;IILjava.lang.String;)Ljava.lang.String;`
     */
    String getDateTimePattern(String arg0, int arg1, int arg2, String arg3);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(IILjava.util.Calendar;)Ljava.lang.String;`
     */
    String getDateTimePattern(int arg0, int arg1, Calendar arg2);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;)Ljava.lang.String;`
     */
    String getDateTimePattern(String arg0, String arg1, int arg2, String arg3);

    /**
     * Declaring class: `sun.util.locale.provider.LocaleResources`
     * Signature: `(IILjava.lang.String;)Ljava.lang.String;`
     */
    String getJavaTimeDateTimePattern(int arg0, int arg1, String arg2);
};


/**
 * Classpath: `java.util.ResourceBundle`
 * Package name: `java.util`
 */
class ResourceBundle : public Object {
protected:
    const inline static char *className = "java.util.ResourceBundle";
public:
    STATICINITIALIZE;

    ResourceBundle(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    static void trace(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool containsKey(String arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `()Ljava.util.Set;`
     */
    Set keySet();

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle;)V`
     */
    void setParent(ResourceBundle arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object getObject(String arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getString(String arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration getKeys();

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Module;)Ljava.lang.ClassLoader;`
     */
    static ClassLoader getLoader(Module arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object handleGetObject(String arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;)Ljava.util.ResourceBundle$Control;`
     */
    static ResourceBundle_Control getDefaultControl(Module arg0, String arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Ljava.util.ResourceBundle$Control;`
     */
    static ResourceBundle_Control getDefaultControl(Class arg0, String arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Class;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundleImpl(String arg0, Locale arg1, Class arg2, ResourceBundle_Control arg3);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Class;Ljava.lang.ClassLoader;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundleImpl(String arg0, Locale arg1, Class arg2, ClassLoader arg3, ResourceBundle_Control arg4);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Module;Ljava.lang.Module;Ljava.lang.String;Ljava.util.Locale;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundleImpl(Module arg0, Module arg1, String arg2, Locale arg3, ResourceBundle_Control arg4);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Class;)V`
     */
    static void checkNamedModule(Class arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Module;Ljava.lang.String;Ljava.util.Locale;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundleFromModule(Class arg0, Module arg1, String arg2, Locale arg3, ResourceBundle_Control arg4);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle;)Z`
     */
    static bool isValidBundle(ResourceBundle arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle;)Z`
     */
    static bool hasValidParentChain(ResourceBundle arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.List;)Z`
     */
    static bool checkList(List arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Module;Ljava.lang.Module;Ljava.util.ResourceBundle$CacheKey;Ljava.util.List;Ljava.util.List;ILjava.util.ResourceBundle$Control;Ljava.util.ResourceBundle;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle findBundle(Module arg0, Module arg1, ResourceBundle_CacheKey arg2, List arg3, List arg4, int arg5, ResourceBundle_Control arg6, ResourceBundle arg7);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Throwable;)V`
     */
    static void throwMissingResourceException(String arg0, Locale arg1, Throwable arg2);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle$CacheKey;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle findBundleInCache(ResourceBundle_CacheKey arg0, ResourceBundle_Control arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle$CacheKey;Ljava.util.List;Ljava.util.ResourceBundle$Control;Z)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle loadBundle(ResourceBundle_CacheKey arg0, List arg1, ResourceBundle_Control arg2, bool arg3);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle$CacheKey;Ljava.util.List;Ljava.util.ResourceBundle$Control;Ljava.lang.Module;Ljava.lang.Module;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle loadBundle(ResourceBundle_CacheKey arg0, List arg1, ResourceBundle_Control arg2, Module arg3, Module arg4);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle$CacheKey;Ljava.util.ResourceBundle;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle putBundleInCache(ResourceBundle_CacheKey arg0, ResourceBundle arg1, ResourceBundle_Control arg2);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale getLocale();

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.util.ServiceLoader;Ljava.util.ResourceBundle$CacheKey;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle loadBundleFromProviders(String arg0, Locale arg1, ServiceLoader arg2, ResourceBundle_CacheKey arg3);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.Class;`
     */
    static Class getResourceBundleProviderType(String arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Module;)Ljava.lang.ClassLoader;`
     */
    static ClassLoader getLoaderForControl(Module arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.util.ResourceBundle$CacheKey;Ljava.util.ResourceBundle$Control;)V`
     */
    static void setExpirationTime(ResourceBundle_CacheKey arg0, ResourceBundle_Control arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `()Ljava.util.Set;`
     */
    Set handleKeySet();

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `()Ljava.lang.String;`
     */
    String getBaseBundleName();

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0, ResourceBundle_Control arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.ClassLoader;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0, Locale arg1, ClassLoader arg2, ResourceBundle_Control arg3);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0, Locale arg1, ResourceBundle_Control arg2);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.ClassLoader;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0, Locale arg1, ClassLoader arg2);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Module;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0, Locale arg1, Module arg2);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.lang.Module;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0, Module arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;)Ljava.util.ResourceBundle;`
     */
    static ResourceBundle getBundle(String arg0, Locale arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Module;Ljava.lang.String;)Ljava.util.ServiceLoader;`
     */
    static ServiceLoader getServiceLoader(Module arg0, String arg1);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `()V`
     */
    static void clearCache();

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.ClassLoader;)V`
     */
    static void clearCache(ClassLoader arg0);

    /**
     * Declaring class: `java.util.ResourceBundle`
     * Signature: `(Ljava.lang.Throwable;)V`
     * Throws: `java.lang.Throwable`
     */
    static void uncheckedThrow(Throwable arg0);
};


/**
 * Classpath: `java.util.ResourceBundle$Control`
 * Enclosing class: `java.util.ResourceBundle`
 * Package name: `java.util`
 */
class ResourceBundle_Control : public Object {
protected:
    const inline static char *className = "java.util.ResourceBundle$Control";
public:
    STATICINITIALIZE;

    ResourceBundle_Control(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.util.List;)Ljava.util.ResourceBundle$Control;`
     */
    static ResourceBundle_Control getControl(List arg0);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;)Ljava.util.List;`
     */
    List getFormats(String arg0);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;)Ljava.util.List;`
     */
    List getCandidateLocales(String arg0, Locale arg1);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;)Ljava.util.Locale;`
     */
    Locale getFallbackLocale(String arg0, Locale arg1);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.String;Ljava.lang.ClassLoader;Z)Ljava.util.ResourceBundle;`
     * Throws: `java.lang.IllegalAccessException, java.lang.InstantiationException, java.io.IOException`
     */
    ResourceBundle newBundle(String arg0, Locale arg1, String arg2, ClassLoader arg3, bool arg4);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.String;Ljava.lang.ClassLoader;Ljava.util.ResourceBundle;J)Z`
     */
    bool needsReload(String arg0, Locale arg1, String arg2, ClassLoader arg3, ResourceBundle arg4, long arg5);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;)J`
     */
    long getTimeToLive(String arg0, Locale arg1);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;)Ljava.lang.String;`
     */
    String toBundleName(String arg0, Locale arg1);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.ClassLoader;Z)Ljava.util.ResourceBundle;`
     * Throws: `java.lang.IllegalAccessException, java.lang.InstantiationException, java.io.IOException`
     */
    ResourceBundle newBundle0(String arg0, String arg1, ClassLoader arg2, bool arg3);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String toResourceName0(String arg0, String arg1);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String toResourceName(String arg0, String arg1);

    /**
     * Declaring class: `java.util.ResourceBundle$Control`
     * Signature: `(Ljava.util.List;)Ljava.util.ResourceBundle$Control;`
     */
    static ResourceBundle_Control getNoFallbackControl(List arg0);
};


/**
 * Classpath: `java.util.ResourceBundle$CacheKey`
 * Enclosing class: `java.util.ResourceBundle`
 * Package name: `java.util`
 */
class ResourceBundle_CacheKey : public Object {
protected:
    const inline static char *className = "java.util.ResourceBundle$CacheKey";
public:
    STATICINITIALIZE;

    ResourceBundle_CacheKey(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `(Ljava.util.Locale;)Ljava.util.ResourceBundle$CacheKey;`
     */
    ResourceBundle_CacheKey setLocale(Locale arg0);

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.lang.Throwable;`
     */
    Throwable getCause();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.lang.Module;`
     */
    Module getModule();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `(Ljava.lang.Throwable;)V`
     */
    void setCause(Throwable arg0);

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.lang.Module;`
     */
    Module getCallerModule();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.util.ServiceLoader;`
     */
    ServiceLoader getProviders();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale getLocale();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Z`
     */
    bool hasProviders();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setFormat(String arg0);

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Z`
     */
    bool callerHasProvider();

    /**
     * Declaring class: `java.util.ResourceBundle$CacheKey`
     * Signature: `()Ljava.lang.String;`
     */
    String getFormat();
};


/**
 * Classpath: `java.util.ServiceLoader`
 * Package name: `java.util`
 */
class ServiceLoader : public Object {
protected:
    const inline static char *className = "java.util.ServiceLoader";
public:
    STATICINITIALIZE;

    ServiceLoader(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;Ljava.lang.ClassLoader;)Ljava.util.ServiceLoader;`
     */
    static ServiceLoader load(Class arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;)Ljava.util.ServiceLoader;`
     */
    static ServiceLoader load(Class arg0);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.ModuleLayer;Ljava.lang.Class;)Ljava.util.ServiceLoader;`
     */
    static ServiceLoader load(ModuleLayer arg0, Class arg1);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;Ljava.lang.ClassLoader;Ljava.lang.Module;)Ljava.util.ServiceLoader;`
     */
    static ServiceLoader load(Class arg0, ClassLoader arg1, Module arg2);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream stream();

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     */
    Constructor getConstructor(Class arg0);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;Ljava.net.URL;ILjava.lang.String;)V`
     * Throws: `java.util.ServiceConfigurationError`
     */
    static void fail(Class arg0, URL arg1, int arg2, String arg3);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Throwable;)V`
     * Throws: `java.util.ServiceConfigurationError`
     */
    static void fail(Class arg0, String arg1, Throwable arg2);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)V`
     * Throws: `java.util.ServiceConfigurationError`
     */
    static void fail(Class arg0, String arg1);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `()Ljava.util.Optional;`
     */
    Optional findFirst();

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;)Ljava.util.ServiceLoader;`
     */
    static ServiceLoader loadInstalled(Class arg0);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)V`
     */
    static void checkCaller(Class arg0, Class arg1);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool inExplicitModule(Class arg0);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Method;`
     */
    Method findStaticProviderMethod(Class arg0);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `()Ljava.util.Iterator;`
     */
    Iterator newLookupIterator();

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `(Ljdk.internal.module.ServicesCatalog$ServiceProvider;)Ljava.util.ServiceLoader$Provider;`
     */
    ServiceLoader_Provider loadProvider(ServicesCatalog_ServiceProvider arg0);

    /**
     * Declaring class: `java.util.ServiceLoader`
     * Signature: `()V`
     */
    void reload();
};


/**
 * Classpath: `jdk.internal.module.ServicesCatalog$ServiceProvider`
 * Enclosing class: `jdk.internal.module.ServicesCatalog`
 * Package name: `jdk.internal.module`
 */
class ServicesCatalog_ServiceProvider : public Object {
protected:
    const inline static char *className = "jdk.internal.module.ServicesCatalog$ServiceProvider";
public:
    STATICINITIALIZE;

    ServicesCatalog_ServiceProvider(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog$ServiceProvider`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog$ServiceProvider`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog$ServiceProvider`
     * Signature: `()Ljava.lang.Module;`
     */
    Module module();

    /**
     * Declaring class: `jdk.internal.module.ServicesCatalog$ServiceProvider`
     * Signature: `()Ljava.lang.String;`
     */
    String providerName();
};


/**
 * Classpath: `java.util.ServiceLoader$Provider`
 * Enclosing class: `java.util.ServiceLoader`
 * Package name: `java.util`
 */
class ServiceLoader_Provider : public JavaObject {
protected:
    const inline static char *className = "java.util.ServiceLoader$Provider";
public:
    STATICINITIALIZE;

    ServiceLoader_Provider(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.Calendar`
 * Package name: `java.util`
 */
class Calendar : public Object {
protected:
    const inline static char *className = "java.util.Calendar";
public:
    STATICINITIALIZE;

    Calendar(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(J)V`
     */
    void setTimeInMillis(long arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.util.Date;`
     */
    Date getTime();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(II)V`
     */
    void add(int arg0, int arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int get(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)V`
     */
    void clear(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.util.Calendar;`
     */
    static Calendar getInstance();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.TimeZone;Ljava.util.Locale;)Ljava.util.Calendar;`
     */
    static Calendar getInstance(TimeZone arg0, Locale arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.Locale;)Ljava.util.Calendar;`
     */
    static Calendar getInstance(Locale arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.TimeZone;)Ljava.util.Calendar;`
     */
    static Calendar getInstance(TimeZone arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(IIIIII)V`
     */
    void set(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(II)V`
     */
    void set(int arg0, int arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(IIIII)V`
     */
    void set(int arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(III)V`
     */
    void set(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)Z`
     */
    bool isSet(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool before(Object arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool after(Object arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(IILjava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayName(int arg0, int arg1, Locale arg2);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void complete();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.time.Instant;`
     */
    Instant toInstant();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.Date;)V`
     */
    void setTime(Date arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.Locale;)V`
     */
    void setWeekCountData(Locale arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.Locale;)Ljava.util.TimeZone;`
     */
    static TimeZone defaultTimeZone(Locale arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.TimeZone;Ljava.util.Locale;)Ljava.util.Calendar;`
     */
    static Calendar createCalendar(TimeZone arg0, Locale arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()J`
     */
    long getTimeInMillis();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void updateTime();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void computeFields();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int internalGet(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(II)V`
     */
    void internalSet(int arg0, int arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void adjustStamp();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(IIIILjava.util.Locale;I)Z`
     */
    bool checkDisplayNameParams(int arg0, int arg1, int arg2, int arg3, Locale arg4, int arg5);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.lang.String;`
     */
    String getCalendarType();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)Z`
     */
    bool isStandaloneStyle(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)Z`
     */
    bool isNarrowFormatStyle(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int toStandaloneStyle(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int getBaseStyle(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(IILjava.util.Locale;)Ljava.util.Map;`
     */
    Map getDisplayNamesImpl(int arg0, int arg1, Locale arg2);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(II)Z`
     */
    static bool isFieldSet(int arg0, int arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(II)I`
     */
    static int aggregateStamp(int arg0, int arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.Calendar;)J`
     */
    static long getMillisOf(Calendar arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.util.TimeZone;`
     */
    TimeZone getTimeZone();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(IZ)V`
     */
    void roll(int arg0, bool arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(II)V`
     */
    void roll(int arg0, int arg1);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void invalidateWeekFields();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int getGreatestMinimum(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int getMinimum(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Z)V`
     */
    void setLenient(bool arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int getLeastMaximum(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int getMaximum(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.lang.StringBuilder;Ljava.lang.String;ZJ)V`
     */
    static void appendValue(StringBuilder arg0, String arg1, bool arg2, long arg3);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void computeTime();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(IILjava.util.Locale;)Ljava.util.Map;`
     */
    Map getDisplayNames(int arg0, int arg1, Locale arg2);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)Z`
     */
    bool isExternallySet(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()I`
     */
    int getSetStateFields();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)V`
     */
    void setFieldsComputed(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)V`
     */
    void setFieldsNormalized(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Z`
     */
    bool isPartiallyNormalized();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Z`
     */
    bool isFullyNormalized();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()V`
     */
    void setUnnormalized();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()I`
     */
    int selectFields();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)Z`
     */
    bool isNarrowStyle(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.util.Set;`
     */
    static Set getAvailableCalendarTypes();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Ljava.util.TimeZone;)V`
     */
    void setTimeZone(TimeZone arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Ljava.util.TimeZone;`
     */
    TimeZone getZone();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(Z)V`
     */
    void setZoneShared(bool arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Z`
     */
    bool isLenient();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)V`
     */
    void setFirstDayOfWeek(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()I`
     */
    int getFirstDayOfWeek();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)V`
     */
    void setMinimalDaysInFirstWeek(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()I`
     */
    int getMinimalDaysInFirstWeek();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()Z`
     */
    bool isWeekDateSupported();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()I`
     */
    int getWeekYear();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(III)V`
     */
    void setWeekDate(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `()I`
     */
    int getWeeksInWeekYear();

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int getActualMinimum(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)I`
     */
    int getActualMaximum(int arg0);

    /**
     * Declaring class: `java.util.Calendar`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getFieldName(int arg0);
};


/**
 * Classpath: `java.util.Date`
 * Package name: `java.util`
 */
class Date : public Object {
protected:
    const inline static char *className = "java.util.Date";
public:
    STATICINITIALIZE;

    Date(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.Date`
     * Signature: `()J`
     */
    long getTime();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.time.Instant;)Ljava.util.Date;`
     */
    static Date from(Instant arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Lsun.util.calendar.BaseCalendar$Date;)Lsun.util.calendar.BaseCalendar$Date;`
     */
    BaseCalendar_Date normalize(BaseCalendar_Date arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Lsun.util.calendar.BaseCalendar$Date;`
     */
    BaseCalendar_Date normalize();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.util.Date;)Z`
     */
    bool before(Date arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.util.Date;)Z`
     */
    bool after(Date arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.lang.String;)J`
     */
    static long parse(String arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getSeconds();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Ljava.time.Instant;`
     */
    Instant toInstant();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(IIIIII)J`
     */
    static long UTC(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(J)V`
     */
    void setTime(long arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getYear();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.util.Date;)J`
     */
    static long getMillisOf(Date arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(J)Lsun.util.calendar.BaseCalendar;`
     */
    static BaseCalendar getCalendarSystem(long arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(I)Lsun.util.calendar.BaseCalendar;`
     */
    static BaseCalendar getCalendarSystem(int arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Lsun.util.calendar.BaseCalendar$Date;)Lsun.util.calendar.BaseCalendar;`
     */
    static BaseCalendar getCalendarSystem(BaseCalendar_Date arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()J`
     */
    long getTimeImpl();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Lsun.util.calendar.BaseCalendar$Date;`
     */
    BaseCalendar_Date getCalendarDate();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(I)V`
     */
    void setDate(int arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getMonth();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(I)V`
     */
    void setMonth(int arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getHours();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(I)V`
     */
    void setHours(int arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getMinutes();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(I)V`
     */
    void setMinutes(int arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(I)V`
     */
    void setSeconds(int arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(Ljava.lang.StringBuilder;Ljava.lang.String;)Ljava.lang.StringBuilder;`
     */
    static StringBuilder convertToAbbr(StringBuilder arg0, String arg1);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Lsun.util.calendar.BaseCalendar;`
     */
    static BaseCalendar getJulianCalendar();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `(I)V`
     */
    void setYear(int arg0);

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getDay();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Ljava.lang.String;`
     */
    String toLocaleString();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()Ljava.lang.String;`
     */
    String toGMTString();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getTimezoneOffset();

    /**
     * Declaring class: `java.util.Date`
     * Signature: `()I`
     */
    int getDate();
};


/**
 * Classpath: `java.time.Instant`
 * Package name: `java.time`
 */
class Instant : public Object {
protected:
    const inline static char *className = "java.time.Instant";
public:
    STATICINITIALIZE;

    Instant(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.Instant;`
     */
    static Instant from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(JI)Ljava.time.Instant;`
     */
    static Instant create(long arg0, int arg1);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `()Ljava.time.Instant;`
     */
    static Instant now();

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.Clock;)Ljava.time.Instant;`
     */
    static Instant now(Clock arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.Instant;`
     */
    static Instant parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `()I`
     */
    int getNano();

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `()J`
     */
    long getEpochSecond();

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    static Instant ofEpochSecond(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(JJ)Ljava.time.Instant;`
     */
    static Instant ofEpochSecond(long arg0, long arg1);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    static Instant ofEpochMilli(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.Instant;`
     * Throws: `java.io.IOException`
     */
    static Instant readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `()J`
     */
    long toEpochMilli();

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    Instant plusNanos(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.Instant;`
     */
    Instant plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(JJ)Ljava.time.Instant;`
     */
    Instant plus(long arg0, long arg1);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.Instant;`
     */
    Instant plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    Instant plusMillis(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    Instant plusSeconds(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.temporal.TemporalField;J)Ljava.time.Instant;`
     */
    Instant with(TemporalField arg0, long arg1);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.Instant;`
     */
    Instant with(TemporalAdjuster arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.Instant;)J`
     */
    long nanosUntil(Instant arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.Instant;)J`
     */
    long secondsUntil(Instant arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.Instant;`
     */
    Instant minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.Instant;`
     */
    Instant minus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.temporal.TemporalUnit;)Ljava.time.Instant;`
     */
    Instant truncatedTo(TemporalUnit arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    Instant minusSeconds(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    Instant minusMillis(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(J)Ljava.time.Instant;`
     */
    Instant minusNanos(long arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime atOffset(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime atZone(ZoneId arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.Instant;)Z`
     */
    bool isAfter(Instant arg0);

    /**
     * Declaring class: `java.time.Instant`
     * Signature: `(Ljava.time.Instant;)Z`
     */
    bool isBefore(Instant arg0);
};


/**
 * Classpath: `java.time.temporal.TemporalAccessor`
 * Package name: `java.time.temporal`
 */
class TemporalAccessor : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalAccessor";
public:
    STATICINITIALIZE;

    TemporalAccessor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.Clock`
 * Package name: `java.time`
 */
class Clock : public Object {
protected:
    const inline static char *className = "java.time.Clock";
public:
    STATICINITIALIZE;

    Clock(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.time.Clock;Ljava.time.Duration;)Ljava.time.Clock;`
     */
    static Clock tick(Clock arg0, Duration arg1);

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.time.Clock;Ljava.time.Duration;)Ljava.time.Clock;`
     */
    static Clock offset(Clock arg0, Duration arg1);

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.Clock;`
     */
    static Clock system(ZoneId arg0);

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.Clock;`
     */
    static Clock fixed(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `()Ljava.time.ZoneId;`
     */
    ZoneId getZone();

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `()Ljava.time.Instant;`
     */
    static Instant currentInstant();

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `()Ljava.time.Clock;`
     */
    static Clock systemUTC();

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `()Ljava.time.Clock;`
     */
    static Clock systemDefaultZone();

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.Clock;`
     */
    static Clock tickMillis(ZoneId arg0);

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.Clock;`
     */
    static Clock tickSeconds(ZoneId arg0);

    /**
     * Declaring class: `java.time.Clock`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.Clock;`
     */
    static Clock tickMinutes(ZoneId arg0);
};


/**
 * Classpath: `java.time.Duration`
 * Package name: `java.time`
 */
class Duration : public Object {
protected:
    const inline static char *className = "java.time.Duration";
public:
    STATICINITIALIZE;

    Duration(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.lang.CharSequence;IIILjava.lang.String;)J`
     */
    static long parseNumber(CharSequence arg0, int arg1, int arg2, int arg3, String arg4);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    static Duration ofHours(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration plusDays(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration plusHours(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration plusMinutes(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration minusDays(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration minusHours(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration minusMinutes(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.lang.CharSequence;IIC)Z`
     */
    static bool charMatch(CharSequence arg0, int arg1, int arg2, char arg3);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.lang.CharSequence;III)I`
     */
    static int parseFraction(CharSequence arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    static Duration ofSeconds(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(JJ)Ljava.time.Duration;`
     */
    static Duration ofSeconds(long arg0, long arg1);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()Ljava.time.Duration;`
     */
    Duration negated();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    static Duration ofNanos(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration multipliedBy(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal toBigDecimalSeconds();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    static Duration ofDays(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    static Duration ofMinutes(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    static Duration ofMillis(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration withSeconds(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(I)Ljava.time.Duration;`
     */
    Duration withNanos(int arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.time.Duration;)J`
     */
    long dividedBy(Duration arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration dividedBy(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long toDaysPart();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()I`
     */
    int toHoursPart();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()I`
     */
    int toMinutesPart();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()I`
     */
    int toSecondsPart();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()I`
     */
    int toMillisPart();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()I`
     */
    int toNanosPart();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()Ljava.time.Duration;`
     */
    Duration abs();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.Duration;`
     */
    static Duration of(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.Duration;`
     */
    static Duration from(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long toMillis();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(JI)Ljava.time.Duration;`
     */
    static Duration create(long arg0, int arg1);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(ZJJJJI)Ljava.time.Duration;`
     */
    static Duration create(bool arg0, long arg1, long arg2, long arg3, long arg4, int arg5);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.time.Duration;`
     */
    static Duration create(BigDecimal arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long toNanos();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.Duration;`
     */
    static Duration parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.time.temporal.Temporal;Ljava.time.temporal.Temporal;)Ljava.time.Duration;`
     */
    static Duration between(Temporal arg0, Temporal arg1);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long toSeconds();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long getSeconds();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()I`
     */
    int getNano();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long toMinutes();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long toHours();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()J`
     */
    long toDays();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.Duration;`
     * Throws: `java.io.IOException`
     */
    static Duration readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration plusNanos(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(JJ)Ljava.time.Duration;`
     */
    Duration plus(long arg0, long arg1);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.time.Duration;)Ljava.time.Duration;`
     */
    Duration plus(Duration arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.Duration;`
     */
    Duration plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration plusMillis(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration plusSeconds(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.Duration;`
     */
    Duration minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.time.Duration;)Ljava.time.Duration;`
     */
    Duration minus(Duration arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(Ljava.time.temporal.TemporalUnit;)Ljava.time.Duration;`
     */
    Duration truncatedTo(TemporalUnit arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration minusSeconds(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration minusMillis(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `(J)Ljava.time.Duration;`
     */
    Duration minusNanos(long arg0);

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()Z`
     */
    bool isNegative();

    /**
     * Declaring class: `java.time.Duration`
     * Signature: `()Z`
     */
    bool isZero();
};


/**
 * Classpath: `java.math.BigDecimal`
 * Package name: `java.math`
 */
class BigDecimal : public Number {
protected:
    const inline static char *className = "java.math.BigDecimal";
public:
    STATICINITIALIZE;

    BigDecimal(jobject object) : Number(object) {}


    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal subtract(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal subtract(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal divideToIntegralValue(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal divideToIntegralValue(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigDecimal;`
     */
    BigDecimal movePointRight(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger toBigIntegerExact();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `([CII)J`
     */
    static long parseExp(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(IJ)I`
     */
    int adjustScale(int arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(J)I`
     */
    static int checkScaleNonZero(long arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;JIII)Ljava.math.BigDecimal;`
     */
    static BigDecimal divideAndRound(BigInteger arg0, long arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;JI)Ljava.math.BigInteger;`
     */
    static BigInteger divideAndRound(BigInteger arg0, long arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;III)Ljava.math.BigDecimal;`
     */
    static BigDecimal divideAndRound(BigInteger arg0, BigInteger arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;I)Ljava.math.BigInteger;`
     */
    static BigInteger divideAndRound(BigInteger arg0, BigInteger arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJIII)Ljava.math.BigDecimal;`
     */
    static BigDecimal divideAndRound(long arg0, long arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJI)J`
     */
    static long divideAndRound(long arg0, long arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(J)I`
     */
    static int longDigitLength(long arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;)J`
     */
    static long compactValFor(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;II)Ljava.math.BigInteger;`
     */
    static BigInteger divideAndRoundByTenPow(BigInteger arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;)I`
     */
    static int bigDigitLength(BigInteger arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigDecimal;`
     */
    static BigDecimal zeroValueOf(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal doRound(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JILjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal doRound(long arg0, int arg1, MathContext arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;ILjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal doRound(BigInteger arg0, int arg1, MathContext arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;JII)Ljava.math.BigDecimal;`
     */
    static BigDecimal stripZerosToMatchScale(BigInteger arg0, long arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(ILjava.math.RoundingMode;)Ljava.math.BigDecimal;`
     */
    BigDecimal setScale(int arg0, RoundingMode arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigDecimal;`
     */
    BigDecimal setScale(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(II)Ljava.math.BigDecimal;`
     */
    BigDecimal setScale(int arg0, int arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `([Ljava.math.BigDecimal;)V`
     */
    static void matchScale(BigDecimal_interface arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger inflated();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)I`
     */
    static int checkScale(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(J)I`
     */
    int checkScale(long arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;J)I`
     */
    static int checkScale(BigInteger arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JLjava.math.BigInteger;ILjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal multiplyAndRound(long arg0, BigInteger arg1, int arg2, MathContext arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJILjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal multiplyAndRound(long arg0, long arg1, int arg2, MathContext arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;ILjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal multiplyAndRound(BigInteger arg0, BigInteger arg1, int arg2, MathContext arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(J)I`
     */
    static int saturateLong(long arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal stripTrailingZeros();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Z`
     */
    bool isPowerOfTen();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigDecimal;`
     */
    BigDecimal scaleByPowerOfTen(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Z`
     */
    bool squareRootResultAssertions(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger unscaledValue();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Z`
     */
    bool squareRootZeroResultAssertions(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JI)J`
     */
    static long longMultiplyPowerTen(long arg0, int arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger bigMultiplyPowerTen(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;I)Ljava.math.BigInteger;`
     */
    static BigInteger bigMultiplyPowerTen(BigInteger arg0, int arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JI)Ljava.math.BigInteger;`
     */
    static BigInteger bigMultiplyPowerTen(long arg0, int arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    static BigInteger bigTenToThe(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;IJ)Ljava.math.BigDecimal;`
     */
    static BigDecimal createAndStripZerosToMatchScale(BigInteger arg0, int arg1, long arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIJ)Ljava.math.BigDecimal;`
     */
    static BigDecimal createAndStripZerosToMatchScale(long arg0, int arg1, long arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)I`
     */
    static int longCompareMagnitude(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Z)Ljava.lang.String;`
     */
    String layoutChars(bool arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(ILjava.lang.String;I)Ljava.lang.String;`
     */
    String getValueString(int arg0, String arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Z`
     */
    bool fractionOnly();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    static BigInteger expandBigIntegerTenPowers(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal audit();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIIJJ)Z`
     */
    static bool needIncrement(long arg0, int arg1, int arg2, long arg3, long arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.MutableBigInteger;IILjava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Z`
     */
    static bool needIncrement(MutableBigInteger arg0, int arg1, int arg2, MutableBigInteger arg3, MutableBigInteger arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIILjava.math.MutableBigInteger;J)Z`
     */
    static bool needIncrement(long arg0, int arg1, int arg2, MutableBigInteger arg3, long arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(IIIZ)Z`
     */
    static bool commonNeedIncrement(int arg0, int arg1, int arg2, bool arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJJIII)Ljava.math.BigDecimal;`
     */
    static BigDecimal multiplyDivideAndRound(long arg0, long arg1, long arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(IIII)Ljava.math.BigDecimal;`
     */
    static BigDecimal roundedTenPower(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIJIJLjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal divideSmallFastPath(long arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;ILjava.math.BigInteger;I)I`
     */
    static int compareMagnitudeNormalized(BigInteger arg0, int arg1, BigInteger arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JILjava.math.BigInteger;I)I`
     */
    static int compareMagnitudeNormalized(long arg0, int arg1, BigInteger arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIJI)I`
     */
    static int compareMagnitudeNormalized(long arg0, int arg1, long arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)J`
     */
    static long make64(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJJIIII)Ljava.math.BigDecimal;`
     */
    static BigDecimal divideAndRound128(long arg0, long arg1, long arg2, int arg3, int arg4, int arg5, int arg6);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)Z`
     */
    static bool unsignedLongCompare(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJJJJ)J`
     */
    static long mulsub(long arg0, long arg1, long arg2, long arg3, long arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(III)Ljava.math.BigDecimal;`
     */
    static BigDecimal scaledTenPow(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJIILjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal doRound128(long arg0, long arg1, int arg2, int arg3, MathContext arg4);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)Z`
     */
    static bool unsignedLongCompareEq(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJJJ)Z`
     */
    static bool longLongCompareMagnitude(long arg0, long arg1, long arg2, long arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigDecimal;`
     */
    BigDecimal movePointLeft(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.lang.String;`
     */
    String toEngineeringString();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.lang.String;`
     */
    String toPlainString();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;ILjava.math.BigInteger;I)Ljava.math.BigDecimal;`
     */
    static BigDecimal add(BigInteger arg0, int arg1, BigInteger arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIJI)Ljava.math.BigDecimal;`
     */
    static BigDecimal add(long arg0, int arg1, long arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)J`
     */
    static long add(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJI)Ljava.math.BigDecimal;`
     */
    static BigDecimal add(long arg0, long arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JILjava.math.BigInteger;I)Ljava.math.BigDecimal;`
     */
    static BigDecimal add(long arg0, int arg1, BigInteger arg2, int arg3);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal add(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal add(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal abs(MathContext arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal abs();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal sqrt(MathContext arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(ILjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal pow(int arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(I)Ljava.math.BigDecimal;`
     */
    BigDecimal pow(int arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal min(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal max(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()I`
     */
    int signum();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()I`
     */
    int intValue();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()J`
     */
    long longValue();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()F`
     */
    float floatValue();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()D`
     */
    double doubleValue();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(D)Ljava.math.BigDecimal;`
     */
    static BigDecimal valueOf(double arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;II)Ljava.math.BigDecimal;`
     */
    static BigDecimal valueOf(BigInteger arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(J)Ljava.math.BigDecimal;`
     */
    static BigDecimal valueOf(long arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JI)Ljava.math.BigDecimal;`
     */
    static BigDecimal valueOf(long arg0, int arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JII)Ljava.math.BigDecimal;`
     */
    static BigDecimal valueOf(long arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()I`
     */
    int scale();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.lang.String;Ljava.math.BigDecimal;)V`
     */
    static void print(String arg0, BigDecimal arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal multiply(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal multiply(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;Ljava.math.BigInteger;I)Ljava.math.BigDecimal;`
     */
    static BigDecimal multiply(BigInteger arg0, BigInteger arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JLjava.math.BigInteger;I)Ljava.math.BigDecimal;`
     */
    static BigDecimal multiply(long arg0, BigInteger arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJI)Ljava.math.BigDecimal;`
     */
    static BigDecimal multiply(long arg0, long arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)J`
     */
    static long multiply(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal round(MathContext arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal ulp();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal negate();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal negate(MathContext arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal plus(MathContext arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal plus();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JJ)I`
     */
    static int precision(long arg0, long arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()I`
     */
    int precision();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal remainder(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal remainder(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal square();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)I`
     */
    int compareMagnitude(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger toBigInteger();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    BigDecimal divide(BigDecimal arg0, MathContext arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;IJIII)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(BigInteger arg0, int arg1, long arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIJIII)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(long arg0, int arg1, long arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JILjava.math.BigInteger;III)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(long arg0, int arg1, BigInteger arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;ILjava.math.BigInteger;III)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(BigInteger arg0, int arg1, BigInteger arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;II)Ljava.math.BigDecimal;`
     */
    BigDecimal divide(BigDecimal arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;ILjava.math.RoundingMode;)Ljava.math.BigDecimal;`
     */
    BigDecimal divide(BigDecimal arg0, int arg1, RoundingMode arg2);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;ILjava.math.BigInteger;IJLjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(BigInteger arg0, int arg1, BigInteger arg2, int arg3, long arg4, MathContext arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;Ljava.math.RoundingMode;)Ljava.math.BigDecimal;`
     */
    BigDecimal divide(BigDecimal arg0, RoundingMode arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;`
     */
    BigDecimal divide(BigDecimal arg0);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JIJIJLjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(long arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigInteger;IJIJLjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(BigInteger arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(Ljava.math.BigDecimal;I)Ljava.math.BigDecimal;`
     */
    BigDecimal divide(BigDecimal arg0, int arg1);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `(JILjava.math.BigInteger;IJLjava.math.MathContext;)Ljava.math.BigDecimal;`
     */
    static BigDecimal divide(long arg0, int arg1, BigInteger arg2, int arg3, long arg4, MathContext arg5);

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()J`
     */
    long longValueExact();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()I`
     */
    int intValueExact();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()S`
     */
    short shortValueExact();

    /**
     * Declaring class: `java.math.BigDecimal`
     * Signature: `()B`
     */
    byte byteValueExact();
};


/**
 * Classpath: `java.math.MathContext`
 * Package name: `java.math`
 */
class MathContext : public Object {
protected:
    const inline static char *className = "java.math.MathContext";
public:
    STATICINITIALIZE;

    MathContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.math.MathContext`
     * Signature: `()I`
     */
    int getPrecision();

    /**
     * Declaring class: `java.math.MathContext`
     * Signature: `()Ljava.math.RoundingMode;`
     */
    RoundingMode getRoundingMode();

    /**
     * Declaring class: `java.math.MathContext`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.math.MathContext`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.math.MathContext`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.math.MathContext`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);
};


/**
 * Classpath: `java.math.RoundingMode`
 * Package name: `java.math`
 */
class RoundingMode : public Enum {
protected:
    const inline static char *className = "java.math.RoundingMode";
public:
    STATICINITIALIZE;

    RoundingMode(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.math.RoundingMode`
     * Signature: `(Ljava.lang.String;)Ljava.math.RoundingMode;`
     */
    static RoundingMode valueOf(String arg0);

    /**
     * Declaring class: `java.math.RoundingMode`
     * Signature: `(I)Ljava.math.RoundingMode;`
     */
    static RoundingMode valueOf(int arg0);
};


/**
 * Classpath: `[Ljava.math.BigDecimal;`
 */
class BigDecimal_interface : public Object {
protected:
    const inline static char *className = "[Ljava.math.BigDecimal;";
public:
    STATICINITIALIZE;

    BigDecimal_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.math.MutableBigInteger`
 * Package name: `java.math`
 */
class MutableBigInteger : public Object {
protected:
    const inline static char *className = "java.math.MutableBigInteger";
public:
    STATICINITIALIZE;

    MutableBigInteger(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()J`
     */
    long toLong();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)I`
     */
    int subtract(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(III)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger getBlock(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(II)Ljava.math.BigDecimal;`
     */
    BigDecimal toBigDecimal(int arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)J`
     */
    long toCompactValue(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Z`
     */
    bool isOdd();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)I`
     */
    int compareHalf(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(JJ)Z`
     */
    bool unsignedLongCompare(long arg0, long arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `([I[IIII)I`
     */
    int mulsub(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void rightShift(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)V`
     */
    void copyValue(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `([I)V`
     */
    void copyValue(arr_I arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(JI)J`
     */
    static long divWord(long arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(ILjava.math.MutableBigInteger;)I`
     */
    int divideOneWord(int arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;Z)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divideMagnitude(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void safeLeftShift(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;I)V`
     */
    void addDisjoint(MutableBigInteger arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divide2n1n(MutableBigInteger arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;I)V`
     */
    void addShifted(MutableBigInteger arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void safeRightShift(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void keepLower(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divide3n2n(MutableBigInteger arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;I)I`
     */
    int compareShifted(MutableBigInteger arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void ones(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;I)V`
     */
    void addLower(MutableBigInteger arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(JLjava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divideLongMagnitude(long arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `([III[III)V`
     */
    static void copyAndShift(arr_I arg0, int arg1, int arg2, arr_I arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `([I[II)I`
     */
    int divadd(arr_I arg0, arr_I arg1, int arg2);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `([I[IIII)I`
     */
    int mulsubBorrow(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `([IIIII)I`
     */
    int mulsubLong(arr_I arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(II[II)I`
     */
    int divaddLong(int arg0, int arg1, arr_I arg2, int arg3);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger binaryGCD(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(II)I`
     */
    static int binaryGcd(int arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Z`
     */
    bool isEven();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Z`
     */
    bool isOne();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger modInverseMP2(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;I)Ljava.math.MutableBigInteger;`
     */
    static MutableBigInteger modInverseBP2(MutableBigInteger arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger euclidModInverse(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)I`
     */
    static int inverseMod32(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;I)Ljava.math.MutableBigInteger;`
     */
    static MutableBigInteger fixup(MutableBigInteger arg0, MutableBigInteger arg1, int arg2);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(ILjava.math.MutableBigInteger;)V`
     */
    void mul(int arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Z`
     */
    bool isNormal();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)V`
     */
    void add(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger sqrt();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)I`
     */
    int getInt(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)J`
     */
    long getLong(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)I`
     */
    int compare(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `([II)V`
     */
    void setValue(arr_I arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(II)V`
     */
    void setInt(int arg0, int arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()V`
     */
    void normalize();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void ensureCapacity(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()V`
     */
    void reset();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)V`
     */
    void multiply(MutableBigInteger arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()J`
     */
    long bitLength();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()I`
     */
    int getLowestSetBit();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger getLower(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void primitiveLeftShift(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divideKnuth(MutableBigInteger arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;Z)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divideKnuth(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)Ljava.math.BigInteger;`
     */
    BigInteger toBigInteger(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger toBigInteger();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divideAndRemainderBurnikelZiegler(MutableBigInteger arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `()Z`
     */
    bool isZero();

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger hybridGCD(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void primitiveRightShift(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger modInverse(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(JLjava.math.MutableBigInteger;)J`
     */
    long divide(long arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divide(MutableBigInteger arg0, MutableBigInteger arg1);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;Z)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger divide(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(J)J`
     */
    static long inverseMod64(long arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(I)V`
     */
    void leftShift(int arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;`
     */
    MutableBigInteger mutableModInverse(MutableBigInteger arg0);

    /**
     * Declaring class: `java.math.MutableBigInteger`
     * Signature: `(Ljava.math.MutableBigInteger;)I`
     */
    int difference(MutableBigInteger arg0);
};


/**
 * Classpath: `java.time.temporal.TemporalUnit`
 * Package name: `java.time.temporal`
 */
class TemporalUnit : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalUnit";
public:
    STATICINITIALIZE;

    TemporalUnit(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.temporal.TemporalAmount`
 * Package name: `java.time.temporal`
 */
class TemporalAmount : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalAmount";
public:
    STATICINITIALIZE;

    TemporalAmount(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.temporal.Temporal`
 * Package name: `java.time.temporal`
 */
class Temporal : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.Temporal";
public:
    STATICINITIALIZE;

    Temporal(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.io.DataInput`
 * Package name: `java.io`
 */
class DataInput : public JavaObject {
protected:
    const inline static char *className = "java.io.DataInput";
public:
    STATICINITIALIZE;

    DataInput(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.io.DataOutput`
 * Package name: `java.io`
 */
class DataOutput : public JavaObject {
protected:
    const inline static char *className = "java.io.DataOutput";
public:
    STATICINITIALIZE;

    DataOutput(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.ZoneId`
 * Package name: `java.time`
 */
class ZoneId : public Object {
protected:
    const inline static char *className = "java.time.ZoneId";
public:
    STATICINITIALIZE;

    ZoneId(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.util.Set;`
     */
    static Set getAvailableZoneIds();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.lang.String;IZ)Ljava.time.ZoneId;`
     */
    static ZoneId ofWithPrefix(String arg0, int arg1, bool arg2);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.lang.String;Ljava.time.ZoneOffset;)Ljava.time.ZoneId;`
     */
    static ZoneId ofOffset(String arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor toTemporal();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.lang.String;Ljava.util.Map;)Ljava.time.ZoneId;`
     */
    static ZoneId of(String arg0, Map arg1);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.lang.String;Z)Ljava.time.ZoneId;`
     */
    static ZoneId of(String arg0, bool arg1);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.lang.String;)Ljava.time.ZoneId;`
     */
    static ZoneId of(String arg0);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZoneId;`
     */
    static ZoneId from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void write(DataOutput arg0);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.lang.String;`
     */
    String getId();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.time.ZoneId;`
     */
    ZoneId normalized();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayName(TextStyle arg0, Locale arg1);

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.time.ZoneId;`
     */
    static ZoneId systemDefault();

    /**
     * Declaring class: `java.time.ZoneId`
     * Signature: `()Ljava.time.zone.ZoneRules;`
     */
    ZoneRules getRules();
};


/**
 * Classpath: `java.time.ZoneOffset`
 * Package name: `java.time`
 */
class ZoneOffset : public ZoneId {
protected:
    const inline static char *className = "java.time.ZoneOffset";
public:
    STATICINITIALIZE;

    ZoneOffset(jobject object) : ZoneId(object) {}


    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.lang.CharSequence;IZ)I`
     */
    static int parseNumber(CharSequence arg0, int arg1, bool arg2);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(III)Ljava.time.ZoneOffset;`
     */
    static ZoneOffset ofHoursMinutesSeconds(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(III)I`
     */
    static int totalSeconds(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(I)Ljava.time.ZoneOffset;`
     */
    static ZoneOffset ofTotalSeconds(int arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String buildId(int arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(I)Ljava.time.ZoneOffset;`
     */
    static ZoneOffset ofHours(int arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(II)Ljava.time.ZoneOffset;`
     */
    static ZoneOffset ofHoursMinutes(int arg0, int arg1);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `()I`
     */
    int getTotalSeconds();

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.lang.String;)Ljava.time.ZoneOffset;`
     */
    static ZoneOffset of(String arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZoneOffset;`
     */
    static ZoneOffset from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(III)V`
     */
    static void validate(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void write(DataOutput arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `()Ljava.lang.String;`
     */
    String getId();

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `()Ljava.time.zone.ZoneRules;`
     */
    ZoneRules getRules();

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.ZoneOffset;`
     * Throws: `java.io.IOException`
     */
    static ZoneOffset readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.ZoneOffset`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);
};


/**
 * Classpath: `java.time.zone.ZoneRules`
 * Package name: `java.time.zone`
 */
class ZoneRules : public Object {
protected:
    const inline static char *className = "java.time.zone.ZoneRules";
public:
    STATICINITIALIZE;

    ZoneRules(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `()Z`
     */
    bool isFixedOffset();

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.LocalDateTime;)Ljava.util.List;`
     */
    List getValidOffsets(LocalDateTime arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.LocalDateTime;)Ljava.time.zone.ZoneOffsetTransition;`
     */
    ZoneOffsetTransition getTransition(LocalDateTime arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;)Z`
     */
    bool isValidOffset(LocalDateTime arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.ZoneOffset;Ljava.time.ZoneOffset;Ljava.util.List;Ljava.util.List;Ljava.util.List;)Ljava.time.zone.ZoneRules;`
     */
    static ZoneRules of(ZoneOffset arg0, ZoneOffset arg1, List arg2, List arg3, List arg4);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.zone.ZoneRules;`
     */
    static ZoneRules of(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.LocalDateTime;)Ljava.time.ZoneOffset;`
     */
    ZoneOffset getOffset(LocalDateTime arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.Instant;)Ljava.time.ZoneOffset;`
     */
    ZoneOffset getOffset(Instant arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(JLjava.time.ZoneOffset;)I`
     */
    int findYear(long arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.LocalDateTime;)Ljava.lang.Object;`
     */
    Object getOffsetInfo(LocalDateTime arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.zone.ZoneOffsetTransition;)Ljava.lang.Object;`
     */
    Object findOffsetInfo(LocalDateTime arg0, ZoneOffsetTransition arg1);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.Instant;)Ljava.time.ZoneOffset;`
     */
    ZoneOffset getStandardOffset(Instant arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.Instant;)Ljava.time.Duration;`
     */
    Duration getDaylightSavings(Instant arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.Instant;)Z`
     */
    bool isDaylightSavings(Instant arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.Instant;)Ljava.time.zone.ZoneOffsetTransition;`
     */
    ZoneOffsetTransition nextTransition(Instant arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.time.Instant;)Ljava.time.zone.ZoneOffsetTransition;`
     */
    ZoneOffsetTransition previousTransition(Instant arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `()Ljava.util.List;`
     */
    List getTransitions();

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `()Ljava.util.List;`
     */
    List getTransitionRules();

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.zone.ZoneRules;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    static ZoneRules readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.zone.ZoneRules`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);
};


/**
 * Classpath: `java.time.LocalDateTime`
 * Package name: `java.time`
 */
class LocalDateTime : public Object {
protected:
    const inline static char *className = "java.time.LocalDateTime";
public:
    STATICINITIALIZE;

    LocalDateTime(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()Ljava.time.LocalDate;`
     */
    LocalDate toLocalDate();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withYear(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withMonth(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withDayOfMonth(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withDayOfYear(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withHour(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withMinute(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withSecond(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(I)Ljava.time.LocalDateTime;`
     */
    LocalDateTime withNano(int arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusYears(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusMonths(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusWeeks(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusDays(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusHours(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusMinutes(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusYears(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusMonths(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusWeeks(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusDays(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusHours(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusMinutes(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(IIIII)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(IIIIIII)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(IIIIII)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(ILjava.time.Month;III)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime of(int arg0, Month arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(ILjava.time.Month;IIII)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime of(int arg0, Month arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(ILjava.time.Month;IIIII)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime of(int arg0, Month arg1, int arg2, int arg3, int arg4, int arg5, int arg6);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.LocalDate;Ljava.time.LocalTime;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime of(LocalDate arg0, LocalTime arg1);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()Ljava.time.LocalDateTime;`
     */
    static LocalDateTime now();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime now(ZoneId arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.Clock;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime now(Clock arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.LocalDate;JJJJI)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusWithOverflow(LocalDate arg0, long arg1, long arg2, long arg3, long arg4, int arg5);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.LocalDateTime;)I`
     */
    int compareTo0(LocalDateTime arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime parse(CharSequence arg0, DateTimeFormatter arg1);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getNano();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(JILjava.time.ZoneOffset;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime ofEpochSecond(long arg0, int arg1, ZoneOffset arg2);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getYear();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getMonthValue();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getDayOfMonth();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getHour();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getMinute();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getSecond();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.LocalDateTime;`
     */
    static LocalDateTime ofInstant(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.LocalDateTime;`
     * Throws: `java.io.IOException`
     */
    static LocalDateTime readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()Ljava.time.Month;`
     */
    Month getMonth();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()Ljava.time.DayOfWeek;`
     */
    DayOfWeek getDayOfWeek();

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusNanos(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime plusSeconds(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime with(TemporalAdjuster arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.LocalDate;Ljava.time.LocalTime;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime with(LocalDate arg0, LocalTime arg1);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.temporal.TemporalField;J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime with(TemporalField arg0, long arg1);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.temporal.TemporalUnit;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime truncatedTo(TemporalUnit arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusSeconds(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(J)Ljava.time.LocalDateTime;`
     */
    LocalDateTime minusNanos(long arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime atOffset(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime atZone(ZoneId arg0);

    /**
     * Declaring class: `java.time.LocalDateTime`
     * Signature: `()I`
     */
    int getDayOfYear();
};


/**
 * Classpath: `java.time.LocalDate`
 * Package name: `java.time`
 */
class LocalDate : public Object {
protected:
    const inline static char *className = "java.time.LocalDate";
public:
    STATICINITIALIZE;

    LocalDate(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(I)Ljava.time.LocalDate;`
     */
    LocalDate withYear(int arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(I)Ljava.time.LocalDate;`
     */
    LocalDate withMonth(int arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(I)Ljava.time.LocalDate;`
     */
    LocalDate withDayOfMonth(int arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(I)Ljava.time.LocalDate;`
     */
    LocalDate withDayOfYear(int arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate plusYears(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate plusMonths(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate plusWeeks(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate plusDays(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate minusYears(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate minusMonths(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate minusWeeks(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate minusDays(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()Ljava.time.chrono.IsoChronology;`
     */
    IsoChronology getChronology();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(ILjava.time.Month;I)Ljava.time.LocalDate;`
     */
    static LocalDate of(int arg0, Month arg1, int arg2);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(III)Ljava.time.LocalDate;`
     */
    static LocalDate of(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDate;`
     */
    static LocalDate from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(III)Ljava.time.LocalDate;`
     */
    static LocalDate create(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()Ljava.time.LocalDate;`
     */
    static LocalDate now();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.Clock;)Ljava.time.LocalDate;`
     */
    static LocalDate now(Clock arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.LocalDate;`
     */
    static LocalDate now(ZoneId arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    static LocalDate ofEpochDay(long arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.LocalDate;)J`
     */
    long daysUntil(LocalDate arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.LocalDate;)I`
     */
    int compareTo0(LocalDate arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.temporal.TemporalField;)I`
     */
    int get0(TemporalField arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()J`
     */
    long getProlepticMonth();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(III)Ljava.time.LocalDate;`
     */
    static LocalDate resolvePreviousValid(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(II)Ljava.time.LocalDate;`
     */
    static LocalDate ofYearDay(int arg0, int arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.LocalDate;)J`
     */
    long monthsUntil(LocalDate arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.LocalTime;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime atTime(LocalTime arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(II)Ljava.time.LocalDateTime;`
     */
    LocalDateTime atTime(int arg0, int arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.OffsetTime;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime atTime(OffsetTime arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(III)Ljava.time.LocalDateTime;`
     */
    LocalDateTime atTime(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(IIII)Ljava.time.LocalDateTime;`
     */
    LocalDateTime atTime(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.LocalDate;)Ljava.util.stream.Stream;`
     */
    Stream datesUntil(LocalDate arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.LocalDate;Ljava.time.Period;)Ljava.util.stream.Stream;`
     */
    Stream datesUntil(LocalDate arg0, Period arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime atStartOfDay(ZoneId arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()Ljava.time.LocalDateTime;`
     */
    LocalDateTime atStartOfDay();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.LocalDate;`
     */
    static LocalDate parse(CharSequence arg0, DateTimeFormatter arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.LocalDate;`
     */
    static LocalDate parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.LocalTime;Ljava.time.ZoneOffset;)J`
     */
    long toEpochSecond(LocalTime arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()I`
     */
    int getYear();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()I`
     */
    int getMonthValue();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()I`
     */
    int getDayOfMonth();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.LocalDate;`
     */
    static LocalDate ofInstant(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.LocalDate;`
     * Throws: `java.io.IOException`
     */
    static LocalDate readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()Ljava.time.Month;`
     */
    Month getMonth();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()Ljava.time.DayOfWeek;`
     */
    DayOfWeek getDayOfWeek();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()Ljava.time.chrono.IsoEra;`
     */
    IsoEra getEra();

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDate;`
     */
    LocalDate plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDate;`
     */
    LocalDate plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.temporal.TemporalField;J)Ljava.time.LocalDate;`
     */
    LocalDate with(TemporalField arg0, long arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.LocalDate;`
     */
    LocalDate with(TemporalAdjuster arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDate;`
     */
    LocalDate minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDate;`
     */
    LocalDate minus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `(Ljava.time.chrono.ChronoLocalDate;)Ljava.time.Period;`
     */
    Period until(ChronoLocalDate arg0);

    /**
     * Declaring class: `java.time.LocalDate`
     * Signature: `()I`
     */
    int getDayOfYear();
};


/**
 * Classpath: `java.time.ZonedDateTime`
 * Package name: `java.time`
 */
class ZonedDateTime : public Object {
protected:
    const inline static char *className = "java.time.ZonedDateTime";
public:
    STATICINITIALIZE;

    ZonedDateTime(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.LocalDateTime;`
     */
    LocalDateTime toLocalDateTime();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.LocalDate;`
     */
    LocalDate toLocalDate();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withYear(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withMonth(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withDayOfMonth(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withDayOfYear(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withHour(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withMinute(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withSecond(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(I)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withNano(int arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusYears(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusMonths(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusWeeks(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusDays(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusHours(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusMinutes(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneId;Ljava.time.ZoneOffset;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime ofLocal(LocalDateTime arg0, ZoneId arg1, ZoneOffset arg2);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusYears(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusMonths(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusWeeks(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusDays(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusHours(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusMinutes(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDateTime;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime resolveLocal(LocalDateTime arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime resolveOffset(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDateTime;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime resolveInstant(LocalDateTime arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withZoneSameInstant(ZoneId arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime toOffsetDateTime();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime ofLenient(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withZoneSameLocal(ZoneId arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withLaterOffsetAtOverlap();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withEarlierOffsetAtOverlap();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime ofStrict(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime withFixedOffsetZone();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime of(LocalDateTime arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(IIIIIIILjava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, ZoneId arg7);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDate;Ljava.time.LocalTime;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime of(LocalDate arg0, LocalTime arg1, ZoneId arg2);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(JILjava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime create(long arg0, int arg1, ZoneId arg2);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime now();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime now(ZoneId arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.Clock;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime now(Clock arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime parse(CharSequence arg0, DateTimeFormatter arg1);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getNano();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getYear();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getMonthValue();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getDayOfMonth();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getHour();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getMinute();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getSecond();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime ofInstant(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    static ZonedDateTime ofInstant(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.io.ObjectInput;)Ljava.time.ZonedDateTime;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    static ZonedDateTime readExternal(ObjectInput arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.Month;`
     */
    Month getMonth();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()Ljava.time.DayOfWeek;`
     */
    DayOfWeek getDayOfWeek();

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusNanos(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime plusSeconds(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.temporal.TemporalField;J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime with(TemporalField arg0, long arg1);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime with(TemporalAdjuster arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(Ljava.time.temporal.TemporalUnit;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime truncatedTo(TemporalUnit arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusSeconds(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `(J)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime minusNanos(long arg0);

    /**
     * Declaring class: `java.time.ZonedDateTime`
     * Signature: `()I`
     */
    int getDayOfYear();
};


/**
 * Classpath: `java.time.OffsetDateTime`
 * Package name: `java.time`
 */
class OffsetDateTime : public Object {
protected:
    const inline static char *className = "java.time.OffsetDateTime";
public:
    STATICINITIALIZE;

    OffsetDateTime(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.LocalDateTime;`
     */
    LocalDateTime toLocalDateTime();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.LocalTime;`
     */
    LocalTime toLocalTime();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.LocalDate;`
     */
    LocalDate toLocalDate();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withYear(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withMonth(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withDayOfMonth(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withDayOfYear(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withHour(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withMinute(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withSecond(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(I)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withNano(int arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusYears(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusMonths(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusWeeks(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusDays(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusHours(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusMinutes(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withOffsetSameInstant(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.OffsetDateTime;Ljava.time.OffsetDateTime;)I`
     */
    static int compareInstant(OffsetDateTime arg0, OffsetDateTime arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.util.Comparator;`
     */
    static Comparator timeLineOrder();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime withOffsetSameLocal(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusYears(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusMonths(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusWeeks(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusDays(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusHours(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusMinutes(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime atZoneSameInstant(ZoneId arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime atZoneSimilarLocal(ZoneId arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.OffsetTime;`
     */
    OffsetTime toOffsetTime();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime toZonedDateTime();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;`
     */
    String format(DateTimeFormatter arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime of(LocalDateTime arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(IIIIIIILjava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, ZoneOffset arg7);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.LocalDate;Ljava.time.LocalTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime of(LocalDate arg0, LocalTime arg1, ZoneOffset arg2);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.ZoneOffset;`
     */
    ZoneOffset getOffset();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.OffsetDateTime;)Z`
     */
    bool isEqual(OffsetDateTime arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime now();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime now(ZoneId arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.Clock;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime now(Clock arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime parse(CharSequence arg0, DateTimeFormatter arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getNano();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.Instant;`
     */
    Instant toInstant();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()J`
     */
    long toEpochSecond();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getYear();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getMonthValue();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getDayOfMonth();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getHour();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getMinute();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getSecond();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.OffsetDateTime;`
     */
    static OffsetDateTime ofInstant(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.io.ObjectInput;)Ljava.time.OffsetDateTime;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    static OffsetDateTime readExternal(ObjectInput arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.io.ObjectOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(ObjectOutput arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.Month;`
     */
    Month getMonth();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()Ljava.time.DayOfWeek;`
     */
    DayOfWeek getDayOfWeek();

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusNanos(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime plusSeconds(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime with(LocalDateTime arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.temporal.TemporalField;J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime with(TemporalField arg0, long arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime with(TemporalAdjuster arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.temporal.TemporalUnit;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime truncatedTo(TemporalUnit arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusSeconds(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(J)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime minusNanos(long arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.OffsetDateTime;)Z`
     */
    bool isAfter(OffsetDateTime arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `(Ljava.time.OffsetDateTime;)Z`
     */
    bool isBefore(OffsetDateTime arg0);

    /**
     * Declaring class: `java.time.OffsetDateTime`
     * Signature: `()I`
     */
    int getDayOfYear();
};


/**
 * Classpath: `java.time.LocalTime`
 * Package name: `java.time`
 */
class LocalTime : public Object {
protected:
    const inline static char *className = "java.time.LocalTime";
public:
    STATICINITIALIZE;

    LocalTime(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(I)Ljava.time.LocalTime;`
     */
    LocalTime withHour(int arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(I)Ljava.time.LocalTime;`
     */
    LocalTime withMinute(int arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(I)Ljava.time.LocalTime;`
     */
    LocalTime withSecond(int arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(I)Ljava.time.LocalTime;`
     */
    LocalTime withNano(int arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime plusHours(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime plusMinutes(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()J`
     */
    long toNanoOfDay();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime minusHours(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime minusMinutes(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()I`
     */
    int toSecondOfDay();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;`
     */
    String format(DateTimeFormatter arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(II)Ljava.time.LocalTime;`
     */
    static LocalTime of(int arg0, int arg1);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(IIII)Ljava.time.LocalTime;`
     */
    static LocalTime of(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(III)Ljava.time.LocalTime;`
     */
    static LocalTime of(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalTime;`
     */
    static LocalTime from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(IIII)Ljava.time.LocalTime;`
     */
    static LocalTime create(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()Ljava.time.LocalTime;`
     */
    static LocalTime now();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.Clock;)Ljava.time.LocalTime;`
     */
    static LocalTime now(Clock arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.LocalTime;`
     */
    static LocalTime now(ZoneId arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    static LocalTime ofNanoOfDay(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.temporal.TemporalField;)I`
     */
    int get0(TemporalField arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    static LocalTime ofSecondOfDay(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.LocalDate;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime atDate(LocalDate arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.LocalTime;`
     */
    static LocalTime parse(CharSequence arg0, DateTimeFormatter arg1);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.LocalTime;`
     */
    static LocalTime parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()I`
     */
    int getNano();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.LocalDate;Ljava.time.ZoneOffset;)J`
     */
    long toEpochSecond(LocalDate arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()I`
     */
    int getHour();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()I`
     */
    int getMinute();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `()I`
     */
    int getSecond();

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.LocalTime;`
     */
    static LocalTime ofInstant(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.LocalTime;`
     * Throws: `java.io.IOException`
     */
    static LocalTime readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime plusNanos(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalTime;`
     */
    LocalTime plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalTime;`
     */
    LocalTime plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime plusSeconds(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.LocalTime;`
     */
    LocalTime with(TemporalAdjuster arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.temporal.TemporalField;J)Ljava.time.LocalTime;`
     */
    LocalTime with(TemporalField arg0, long arg1);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalTime;`
     */
    LocalTime minus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalTime;`
     */
    LocalTime minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.temporal.TemporalUnit;)Ljava.time.LocalTime;`
     */
    LocalTime truncatedTo(TemporalUnit arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime minusSeconds(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(J)Ljava.time.LocalTime;`
     */
    LocalTime minusNanos(long arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;`
     */
    OffsetTime atOffset(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.LocalTime;)Z`
     */
    bool isAfter(LocalTime arg0);

    /**
     * Declaring class: `java.time.LocalTime`
     * Signature: `(Ljava.time.LocalTime;)Z`
     */
    bool isBefore(LocalTime arg0);
};


/**
 * Classpath: `java.time.format.DateTimeFormatter`
 * Package name: `java.time.format`
 */
class DateTimeFormatter : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeFormatter";
public:
    STATICINITIALIZE;

    DateTimeFormatter(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.time.chrono.Chronology;`
     */
    Chronology getChronology();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.lang.String;`
     */
    String format(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;Ljava.lang.Appendable;)V`
     */
    void formatTo(TemporalAccessor arg0, Appendable arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor parseResolved0(CharSequence arg0, ParsePosition arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;Ljava.lang.RuntimeException;)Ljava.time.format.DateTimeParseException;`
     */
    DateTimeParseException createError(CharSequence arg0, RuntimeException arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.format.DateTimeParseContext;`
     */
    DateTimeParseContext parseUnresolved0(CharSequence arg0, ParsePosition arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.String;)Ljava.time.format.DateTimeFormatter;`
     */
    static DateTimeFormatter ofPattern(String arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;)Ljava.time.format.DateTimeFormatter;`
     */
    static DateTimeFormatter ofPattern(String arg0, Locale arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;`
     */
    static DateTimeFormatter ofLocalizedDate(FormatStyle arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;`
     */
    static DateTimeFormatter ofLocalizedTime(FormatStyle arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.format.FormatStyle;Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;`
     */
    static DateTimeFormatter ofLocalizedDateTime(FormatStyle arg0, FormatStyle arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;`
     */
    static DateTimeFormatter ofLocalizedDateTime(FormatStyle arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.time.temporal.TemporalQuery;`
     */
    static TemporalQuery parsedExcessDays();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.time.temporal.TemporalQuery;`
     */
    static TemporalQuery parsedLeapSecond();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.util.Locale;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter withLocale(Locale arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.util.Locale;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter localizedBy(Locale arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.time.format.DecimalStyle;`
     */
    DecimalStyle getDecimalStyle();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.format.DecimalStyle;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter withDecimalStyle(DecimalStyle arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.chrono.Chronology;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter withChronology(Chronology arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.time.format.ResolverStyle;`
     */
    ResolverStyle getResolverStyle();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.format.ResolverStyle;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter withResolverStyle(ResolverStyle arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.util.Set;`
     */
    Set getResolverFields();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `([Ljava.time.temporal.TemporalField;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter withResolverFields(TemporalField_interface arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.util.Set;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter withResolverFields(Set arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;[Ljava.time.temporal.TemporalQuery;)Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor parseBest(CharSequence arg0, TemporalQuery_interface arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor parseUnresolved(CharSequence arg0, ParsePosition arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Z)Ljava.time.format.DateTimeFormatterBuilder$CompositePrinterParser;`
     */
    DateTimeFormatterBuilder_CompositePrinterParser toPrinterParser(bool arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.text.Format;`
     */
    Format toFormat();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.temporal.TemporalQuery;)Ljava.text.Format;`
     */
    Format toFormat(TemporalQuery arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;`
     */
    Object parse(CharSequence arg0, TemporalQuery arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor parse(CharSequence arg0, ParsePosition arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.time.ZoneId;`
     */
    ZoneId getZone();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale getLocale();

    /**
     * Declaring class: `java.time.format.DateTimeFormatter`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.format.DateTimeFormatter;`
     */
    DateTimeFormatter withZone(ZoneId arg0);
};


/**
 * Classpath: `java.time.chrono.Chronology`
 * Package name: `java.time.chrono`
 */
class Chronology : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.Chronology";
public:
    STATICINITIALIZE;

    Chronology(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.Appendable`
 * Package name: `java.lang`
 */
class Appendable : public JavaObject {
protected:
    const inline static char *className = "java.lang.Appendable";
public:
    STATICINITIALIZE;

    Appendable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.text.ParsePosition`
 * Package name: `java.text`
 */
class ParsePosition : public Object {
protected:
    const inline static char *className = "java.text.ParsePosition";
public:
    STATICINITIALIZE;

    ParsePosition(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.text.ParsePosition`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.text.ParsePosition`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.text.ParsePosition`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.text.ParsePosition`
     * Signature: `()I`
     */
    int getIndex();

    /**
     * Declaring class: `java.text.ParsePosition`
     * Signature: `()I`
     */
    int getErrorIndex();

    /**
     * Declaring class: `java.text.ParsePosition`
     * Signature: `(I)V`
     */
    void setErrorIndex(int arg0);

    /**
     * Declaring class: `java.text.ParsePosition`
     * Signature: `(I)V`
     */
    void setIndex(int arg0);
};


/**
 * Classpath: `java.time.DateTimeException`
 * Package name: `java.time`
 */
class DateTimeException : public RuntimeException {
protected:
    const inline static char *className = "java.time.DateTimeException";
public:
    STATICINITIALIZE;

    DateTimeException(jobject object) : RuntimeException(object) {}

};


/**
 * Classpath: `java.time.format.DateTimeParseContext`
 * Package name: `java.time.format`
 */
class DateTimeParseContext : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeParseContext";
public:
    STATICINITIALIZE;

    DateTimeParseContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Ljava.time.format.DateTimeParseContext;`
     */
    DateTimeParseContext copy();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Z`
     */
    bool isStrict();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.time.format.ResolverStyle;Ljava.util.Set;)Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor toResolved(ResolverStyle arg0, Set arg1);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Ljava.time.format.Parsed;`
     */
    Parsed toUnresolved();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Ljava.time.format.DecimalStyle;`
     */
    DecimalStyle getDecimalStyle();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Ljava.time.format.Parsed;`
     */
    Parsed currentParsed();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Z`
     */
    bool isCaseSensitive();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(CC)Z`
     */
    static bool charEqualsIgnoreCase(char arg0, char arg1);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Ljava.time.chrono.Chronology;`
     */
    Chronology getEffectiveChronology();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Z)V`
     */
    void setCaseSensitive(bool arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.lang.CharSequence;ILjava.lang.CharSequence;II)Z`
     */
    bool subSequenceEquals(CharSequence arg0, int arg1, CharSequence arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(CC)Z`
     */
    bool charEquals(char arg0, char arg1);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Z)V`
     */
    void setStrict(bool arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()V`
     */
    void startOptional();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Z)V`
     */
    void endOptional(bool arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.time.temporal.TemporalField;)Ljava.lang.Long;`
     */
    Long getParsed(TemporalField arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.time.temporal.TemporalField;JII)I`
     */
    int setParsedField(TemporalField arg0, long arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.time.chrono.Chronology;)V`
     */
    void setParsed(Chronology arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.time.ZoneId;)V`
     */
    void setParsed(ZoneId arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.util.function.Consumer;)V`
     */
    void addChronoChangedListener(Consumer arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()V`
     */
    void setParsedLeapSecond();

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `(Ljava.time.format.DateTimeFormatterBuilder$DayPeriod;)V`
     */
    void setParsedDayPeriod(DateTimeFormatterBuilder_DayPeriod arg0);

    /**
     * Declaring class: `java.time.format.DateTimeParseContext`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale getLocale();
};


/**
 * Classpath: `java.time.format.ResolverStyle`
 * Package name: `java.time.format`
 */
class ResolverStyle : public Enum {
protected:
    const inline static char *className = "java.time.format.ResolverStyle";
public:
    STATICINITIALIZE;

    ResolverStyle(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.time.format.ResolverStyle`
     * Signature: `(Ljava.lang.String;)Ljava.time.format.ResolverStyle;`
     */
    static ResolverStyle valueOf(String arg0);
};


/**
 * Classpath: `java.time.format.Parsed`
 * Package name: `java.time.format`
 */
class Parsed : public Object {
protected:
    const inline static char *className = "java.time.format.Parsed";
public:
    STATICINITIALIZE;

    Parsed(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolveInstant();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `(Ljava.time.format.ResolverStyle;Ljava.util.Set;)Ljava.time.temporal.TemporalAccessor;`
     */
    TemporalAccessor resolve(ResolverStyle arg0, Set arg1);

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()Ljava.time.format.Parsed;`
     */
    Parsed copy();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolveFields();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolveTimeLenient();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)V`
     */
    void crossCheck(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void crossCheck();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolvePeriod();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolveFractional();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolveInstantFields();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolveDateFields();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `()V`
     */
    void resolveTimeFields();

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `(Ljava.time.temporal.TemporalField;Ljava.time.temporal.TemporalField;Ljava.lang.Long;)V`
     */
    void updateCheckConflict(TemporalField arg0, TemporalField arg1, Long arg2);

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `(Ljava.time.LocalTime;Ljava.time.Period;)V`
     */
    void updateCheckConflict(LocalTime arg0, Period arg1);

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `(Ljava.time.chrono.ChronoLocalDate;)V`
     */
    void updateCheckConflict(ChronoLocalDate arg0);

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `(Ljava.time.ZoneId;)V`
     */
    void resolveInstantFields0(ZoneId arg0);

    /**
     * Declaring class: `java.time.format.Parsed`
     * Signature: `(JJJJ)V`
     */
    void resolveTime(long arg0, long arg1, long arg2, long arg3);
};


/**
 * Classpath: `java.time.temporal.TemporalField`
 * Package name: `java.time.temporal`
 */
class TemporalField : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalField";
public:
    STATICINITIALIZE;

    TemporalField(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.Period`
 * Package name: `java.time`
 */
class Period : public Object {
protected:
    const inline static char *className = "java.time.Period";
public:
    STATICINITIALIZE;

    Period(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.lang.CharSequence;III)I`
     */
    static int parseNumber(CharSequence arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(J)Ljava.time.Period;`
     */
    Period plusYears(long arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(J)Ljava.time.Period;`
     */
    Period plusMonths(long arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(J)Ljava.time.Period;`
     */
    Period plusDays(long arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(J)Ljava.time.Period;`
     */
    Period minusYears(long arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(J)Ljava.time.Period;`
     */
    Period minusMonths(long arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(J)Ljava.time.Period;`
     */
    Period minusDays(long arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()Ljava.time.chrono.IsoChronology;`
     */
    IsoChronology getChronology();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.lang.CharSequence;IIC)Z`
     */
    static bool charMatch(CharSequence arg0, int arg1, int arg2, char arg3);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()Ljava.time.Period;`
     */
    Period negated();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    Period multipliedBy(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    static Period ofDays(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(III)Ljava.time.Period;`
     */
    static Period of(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.Period;`
     */
    static Period from(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(III)Ljava.time.Period;`
     */
    static Period create(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()Ljava.time.Period;`
     */
    Period normalized();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()J`
     */
    long toTotalMonths();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()I`
     */
    int getDays();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()I`
     */
    int getYears();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)V`
     */
    void validateChrono(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    static Period ofYears(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    static Period ofMonths(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    static Period ofWeeks(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    Period withYears(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    Period withMonths(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(I)Ljava.time.Period;`
     */
    Period withDays(int arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.Period;`
     */
    static Period parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.time.LocalDate;Ljava.time.LocalDate;)Ljava.time.Period;`
     */
    static Period between(LocalDate arg0, LocalDate arg1);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `()I`
     */
    int getMonths();

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.Period;`
     * Throws: `java.io.IOException`
     */
    static Period readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.Period;`
     */
    Period plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.Period`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.Period;`
     */
    Period minus(TemporalAmount arg0);
};


/**
 * Classpath: `java.time.chrono.ChronoLocalDate`
 * Package name: `java.time.chrono`
 */
class ChronoLocalDate : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.ChronoLocalDate";
public:
    STATICINITIALIZE;

    ChronoLocalDate(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.format.DecimalStyle`
 * Package name: `java.time.format`
 */
class DecimalStyle : public Object {
protected:
    const inline static char *className = "java.time.format.DecimalStyle";
public:
    STATICINITIALIZE;

    DecimalStyle(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(Ljava.util.Locale;)Ljava.time.format.DecimalStyle;`
     */
    static DecimalStyle of(Locale arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(Ljava.util.Locale;)Ljava.time.format.DecimalStyle;`
     */
    static DecimalStyle create(Locale arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()Ljava.util.Set;`
     */
    static Set getAvailableLocales();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()C`
     */
    char getZeroDigit();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()C`
     */
    char getDecimalSeparator();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()Ljava.time.format.DecimalStyle;`
     */
    static DecimalStyle ofDefaultLocale();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(C)Ljava.time.format.DecimalStyle;`
     */
    DecimalStyle withZeroDigit(char arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()C`
     */
    char getPositiveSign();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(C)Ljava.time.format.DecimalStyle;`
     */
    DecimalStyle withPositiveSign(char arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `()C`
     */
    char getNegativeSign();

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(C)Ljava.time.format.DecimalStyle;`
     */
    DecimalStyle withNegativeSign(char arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(C)Ljava.time.format.DecimalStyle;`
     */
    DecimalStyle withDecimalSeparator(char arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(C)I`
     */
    int convertToDigit(char arg0);

    /**
     * Declaring class: `java.time.format.DecimalStyle`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String convertNumberToI18N(String arg0);
};


/**
 * Classpath: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
 * Enclosing class: `java.time.format.DateTimeFormatterBuilder`
 * Package name: `java.time.format`
 */
class DateTimeFormatterBuilder_DayPeriod : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeFormatterBuilder$DayPeriod";
public:
    STATICINITIALIZE;

    DateTimeFormatterBuilder_DayPeriod(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `()J`
     */
    long mid();

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `()J`
     */
    long getIndex();

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `(Ljava.util.Locale;J)Ljava.time.format.DateTimeFormatterBuilder$DayPeriod;`
     */
    static DateTimeFormatterBuilder_DayPeriod ofLocale(Locale arg0, long arg1);

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `(J)Z`
     */
    bool includes(long arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `(Ljava.util.Locale;)Ljava.util.Map;`
     */
    static Map getDayPeriodMap(Locale arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `(Ljava.lang.String;)J`
     */
    static long mapToIndex(String arg0);

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$DayPeriod`
     * Signature: `()J`
     */
    long duration();
};


/**
 * Classpath: `java.time.format.FormatStyle`
 * Package name: `java.time.format`
 */
class FormatStyle : public Enum {
protected:
    const inline static char *className = "java.time.format.FormatStyle";
public:
    STATICINITIALIZE;

    FormatStyle(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.time.format.FormatStyle`
     * Signature: `(Ljava.lang.String;)Ljava.time.format.FormatStyle;`
     */
    static FormatStyle valueOf(String arg0);
};


/**
 * Classpath: `java.time.temporal.TemporalQuery`
 * Package name: `java.time.temporal`
 */
class TemporalQuery : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalQuery";
public:
    STATICINITIALIZE;

    TemporalQuery(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Ljava.time.temporal.TemporalField;`
 */
class TemporalField_interface : public Object {
protected:
    const inline static char *className = "[Ljava.time.temporal.TemporalField;";
public:
    STATICINITIALIZE;

    TemporalField_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `[Ljava.time.temporal.TemporalQuery;`
 */
class TemporalQuery_interface : public Object {
protected:
    const inline static char *className = "[Ljava.time.temporal.TemporalQuery;";
public:
    STATICINITIALIZE;

    TemporalQuery_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.time.format.DateTimeFormatterBuilder$CompositePrinterParser`
 * Enclosing class: `java.time.format.DateTimeFormatterBuilder`
 * Package name: `java.time.format`
 */
class DateTimeFormatterBuilder_CompositePrinterParser : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeFormatterBuilder$CompositePrinterParser";
public:
    STATICINITIALIZE;

    DateTimeFormatterBuilder_CompositePrinterParser(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$CompositePrinterParser`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.format.DateTimeFormatterBuilder$CompositePrinterParser`
     * Signature: `(Z)Ljava.time.format.DateTimeFormatterBuilder$CompositePrinterParser;`
     */
    DateTimeFormatterBuilder_CompositePrinterParser withOptional(bool arg0);
};


/**
 * Classpath: `java.text.Format`
 * Package name: `java.text`
 */
class Format : public Object {
protected:
    const inline static char *className = "java.text.Format";
public:
    STATICINITIALIZE;

    Format(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.text.Format`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.lang.Object;Ljava.lang.StringBuffer;Ljava.text.FieldPosition;)Ljava.lang.StringBuffer;`
     */
    StringBuffer format(Object arg0, StringBuffer arg1, FieldPosition arg2);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.String;`
     */
    String format(Object arg0);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.lang.String;)Ljava.text.AttributedCharacterIterator;`
     */
    AttributedCharacterIterator createAttributedCharacterIterator(String arg0);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.lang.String;Ljava.text.AttributedCharacterIterator$Attribute;Ljava.lang.Object;)Ljava.text.AttributedCharacterIterator;`
     */
    AttributedCharacterIterator createAttributedCharacterIterator(String arg0, AttributedCharacterIterator_Attribute arg1, Object arg2);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `([Ljava.text.AttributedCharacterIterator;)Ljava.text.AttributedCharacterIterator;`
     */
    AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator_interface arg0);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.text.AttributedCharacterIterator;Ljava.text.AttributedCharacterIterator$Attribute;Ljava.lang.Object;)Ljava.text.AttributedCharacterIterator;`
     */
    AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator arg0, AttributedCharacterIterator_Attribute arg1, Object arg2);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     * Throws: `java.text.ParseException`
     */
    Object parseObject(String arg0);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.lang.String;Ljava.text.ParsePosition;)Ljava.lang.Object;`
     */
    Object parseObject(String arg0, ParsePosition arg1);

    /**
     * Declaring class: `java.text.Format`
     * Signature: `(Ljava.lang.Object;)Ljava.text.AttributedCharacterIterator;`
     */
    AttributedCharacterIterator formatToCharacterIterator(Object arg0);
};


/**
 * Classpath: `java.text.FieldPosition`
 * Package name: `java.text`
 */
class FieldPosition : public Object {
protected:
    const inline static char *className = "java.text.FieldPosition";
public:
    STATICINITIALIZE;

    FieldPosition(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `()I`
     */
    int getField();

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `()Ljava.text.Format$Field;`
     */
    Format_Field getFieldAttribute();

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `()I`
     */
    int getBeginIndex();

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `()I`
     */
    int getEndIndex();

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `(I)V`
     */
    void setBeginIndex(int arg0);

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `(I)V`
     */
    void setEndIndex(int arg0);

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `()Ljava.text.Format$FieldDelegate;`
     */
    Format_FieldDelegate getFieldDelegate();

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `(Ljava.text.Format$Field;)Z`
     */
    bool matchesField(Format_Field arg0);

    /**
     * Declaring class: `java.text.FieldPosition`
     * Signature: `(Ljava.text.Format$Field;I)Z`
     */
    bool matchesField(Format_Field arg0, int arg1);
};


/**
 * Classpath: `java.text.AttributedCharacterIterator$Attribute`
 * Enclosing class: `java.text.AttributedCharacterIterator`
 * Package name: `java.text`
 */
class AttributedCharacterIterator_Attribute : public Object {
protected:
    const inline static char *className = "java.text.AttributedCharacterIterator$Attribute";
public:
    STATICINITIALIZE;

    AttributedCharacterIterator_Attribute(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.text.AttributedCharacterIterator$Attribute`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.text.AttributedCharacterIterator$Attribute`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.text.AttributedCharacterIterator$Attribute`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.text.AttributedCharacterIterator$Attribute`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.text.AttributedCharacterIterator$Attribute`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.InvalidObjectException`
     */
    Object readResolve();
};


/**
 * Classpath: `java.text.Format$FieldDelegate`
 * Enclosing class: `java.text.Format`
 * Package name: `java.text`
 */
class Format_FieldDelegate : public JavaObject {
protected:
    const inline static char *className = "java.text.Format$FieldDelegate";
public:
    STATICINITIALIZE;

    Format_FieldDelegate(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.text.AttributedCharacterIterator`
 * Package name: `java.text`
 */
class AttributedCharacterIterator : public JavaObject {
protected:
    const inline static char *className = "java.text.AttributedCharacterIterator";
public:
    STATICINITIALIZE;

    AttributedCharacterIterator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Ljava.text.AttributedCharacterIterator;`
 */
class AttributedCharacterIterator_interface : public Object {
protected:
    const inline static char *className = "[Ljava.text.AttributedCharacterIterator;";
public:
    STATICINITIALIZE;

    AttributedCharacterIterator_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.time.temporal.TemporalAdjuster`
 * Package name: `java.time.temporal`
 */
class TemporalAdjuster : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalAdjuster";
public:
    STATICINITIALIZE;

    TemporalAdjuster(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.OffsetTime`
 * Package name: `java.time`
 */
class OffsetTime : public Object {
protected:
    const inline static char *className = "java.time.OffsetTime";
public:
    STATICINITIALIZE;

    OffsetTime(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()Ljava.time.LocalTime;`
     */
    LocalTime toLocalTime();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(I)Ljava.time.OffsetTime;`
     */
    OffsetTime withHour(int arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(I)Ljava.time.OffsetTime;`
     */
    OffsetTime withMinute(int arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(I)Ljava.time.OffsetTime;`
     */
    OffsetTime withSecond(int arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(I)Ljava.time.OffsetTime;`
     */
    OffsetTime withNano(int arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime plusHours(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime plusMinutes(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;`
     */
    OffsetTime withOffsetSameInstant(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;`
     */
    OffsetTime withOffsetSameLocal(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime minusHours(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime minusMinutes(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;`
     */
    String format(DateTimeFormatter arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(IIIILjava.time.ZoneOffset;)Ljava.time.OffsetTime;`
     */
    static OffsetTime of(int arg0, int arg1, int arg2, int arg3, ZoneOffset arg4);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.LocalTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;`
     */
    static OffsetTime of(LocalTime arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.OffsetTime;`
     */
    static OffsetTime from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()Ljava.time.ZoneOffset;`
     */
    ZoneOffset getOffset();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.OffsetTime;)Z`
     */
    bool isEqual(OffsetTime arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.OffsetTime;`
     */
    static OffsetTime now(ZoneId arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.Clock;)Ljava.time.OffsetTime;`
     */
    static OffsetTime now(Clock arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()Ljava.time.OffsetTime;`
     */
    static OffsetTime now();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.LocalDate;)Ljava.time.OffsetDateTime;`
     */
    OffsetDateTime atDate(LocalDate arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()J`
     */
    long toEpochNano();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.time.OffsetTime;`
     */
    static OffsetTime parse(CharSequence arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.OffsetTime;`
     */
    static OffsetTime parse(CharSequence arg0, DateTimeFormatter arg1);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()I`
     */
    int getNano();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.LocalDate;)J`
     */
    long toEpochSecond(LocalDate arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()I`
     */
    int getHour();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()I`
     */
    int getMinute();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `()I`
     */
    int getSecond();

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.OffsetTime;`
     */
    static OffsetTime ofInstant(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.io.ObjectInput;)Ljava.time.OffsetTime;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    static OffsetTime readExternal(ObjectInput arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.io.ObjectOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(ObjectOutput arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime plusNanos(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetTime;`
     */
    OffsetTime plus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetTime;`
     */
    OffsetTime plus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime plusSeconds(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.temporal.TemporalField;J)Ljava.time.OffsetTime;`
     */
    OffsetTime with(TemporalField arg0, long arg1);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.OffsetTime;`
     */
    OffsetTime with(TemporalAdjuster arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.LocalTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;`
     */
    OffsetTime with(LocalTime arg0, ZoneOffset arg1);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetTime;`
     */
    OffsetTime minus(long arg0, TemporalUnit arg1);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetTime;`
     */
    OffsetTime minus(TemporalAmount arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.temporal.TemporalUnit;)Ljava.time.OffsetTime;`
     */
    OffsetTime truncatedTo(TemporalUnit arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime minusSeconds(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(J)Ljava.time.OffsetTime;`
     */
    OffsetTime minusNanos(long arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.OffsetTime;)Z`
     */
    bool isAfter(OffsetTime arg0);

    /**
     * Declaring class: `java.time.OffsetTime`
     * Signature: `(Ljava.time.OffsetTime;)Z`
     */
    bool isBefore(OffsetTime arg0);
};


/**
 * Classpath: `java.io.ObjectInput`
 * Package name: `java.io`
 */
class ObjectInput : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectInput";
public:
    STATICINITIALIZE;

    ObjectInput(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.Comparator`
 * Package name: `java.util`
 */
class Comparator : public JavaObject {
protected:
    const inline static char *className = "java.util.Comparator";
public:
    STATICINITIALIZE;

    Comparator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.Month`
 * Package name: `java.time`
 */
class Month : public Enum {
protected:
    const inline static char *className = "java.time.Month";
public:
    STATICINITIALIZE;

    Month(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.time.Month`
     * Signature: `(Z)I`
     */
    int length(bool arg0);

    /**
     * Declaring class: `java.time.Month`
     * Signature: `(Ljava.lang.String;)Ljava.time.Month;`
     */
    static Month valueOf(String arg0);

    /**
     * Declaring class: `java.time.Month`
     * Signature: `()I`
     */
    int getValue();

    /**
     * Declaring class: `java.time.Month`
     * Signature: `(I)Ljava.time.Month;`
     */
    static Month of(int arg0);

    /**
     * Declaring class: `java.time.Month`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.Month;`
     */
    static Month from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.Month`
     * Signature: `()I`
     */
    int minLength();

    /**
     * Declaring class: `java.time.Month`
     * Signature: `(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayName(TextStyle arg0, Locale arg1);

    /**
     * Declaring class: `java.time.Month`
     * Signature: `(Z)I`
     */
    int firstDayOfYear(bool arg0);

    /**
     * Declaring class: `java.time.Month`
     * Signature: `()Ljava.time.Month;`
     */
    Month firstMonthOfQuarter();

    /**
     * Declaring class: `java.time.Month`
     * Signature: `()I`
     */
    int maxLength();

    /**
     * Declaring class: `java.time.Month`
     * Signature: `(J)Ljava.time.Month;`
     */
    Month plus(long arg0);

    /**
     * Declaring class: `java.time.Month`
     * Signature: `(J)Ljava.time.Month;`
     */
    Month minus(long arg0);
};


/**
 * Classpath: `java.time.format.TextStyle`
 * Package name: `java.time.format`
 */
class TextStyle : public Enum {
protected:
    const inline static char *className = "java.time.format.TextStyle";
public:
    STATICINITIALIZE;

    TextStyle(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.time.format.TextStyle`
     * Signature: `()I`
     */
    int zoneNameStyleIndex();

    /**
     * Declaring class: `java.time.format.TextStyle`
     * Signature: `()Z`
     */
    bool isStandalone();

    /**
     * Declaring class: `java.time.format.TextStyle`
     * Signature: `()Ljava.time.format.TextStyle;`
     */
    TextStyle asStandalone();

    /**
     * Declaring class: `java.time.format.TextStyle`
     * Signature: `()Ljava.time.format.TextStyle;`
     */
    TextStyle asNormal();

    /**
     * Declaring class: `java.time.format.TextStyle`
     * Signature: `()I`
     */
    int toCalendarStyle();

    /**
     * Declaring class: `java.time.format.TextStyle`
     * Signature: `(Ljava.lang.String;)Ljava.time.format.TextStyle;`
     */
    static TextStyle valueOf(String arg0);
};


/**
 * Classpath: `java.time.DayOfWeek`
 * Package name: `java.time`
 */
class DayOfWeek : public Enum {
protected:
    const inline static char *className = "java.time.DayOfWeek";
public:
    STATICINITIALIZE;

    DayOfWeek(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.time.DayOfWeek`
     * Signature: `(Ljava.lang.String;)Ljava.time.DayOfWeek;`
     */
    static DayOfWeek valueOf(String arg0);

    /**
     * Declaring class: `java.time.DayOfWeek`
     * Signature: `()I`
     */
    int getValue();

    /**
     * Declaring class: `java.time.DayOfWeek`
     * Signature: `(I)Ljava.time.DayOfWeek;`
     */
    static DayOfWeek of(int arg0);

    /**
     * Declaring class: `java.time.DayOfWeek`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.DayOfWeek;`
     */
    static DayOfWeek from(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.DayOfWeek`
     * Signature: `(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayName(TextStyle arg0, Locale arg1);

    /**
     * Declaring class: `java.time.DayOfWeek`
     * Signature: `(J)Ljava.time.DayOfWeek;`
     */
    DayOfWeek plus(long arg0);

    /**
     * Declaring class: `java.time.DayOfWeek`
     * Signature: `(J)Ljava.time.DayOfWeek;`
     */
    DayOfWeek minus(long arg0);
};


/**
 * Classpath: `java.time.chrono.IsoEra`
 * Package name: `java.time.chrono`
 */
class IsoEra : public Enum {
protected:
    const inline static char *className = "java.time.chrono.IsoEra";
public:
    STATICINITIALIZE;

    IsoEra(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.time.chrono.IsoEra`
     * Signature: `(Ljava.lang.String;)Ljava.time.chrono.IsoEra;`
     */
    static IsoEra valueOf(String arg0);

    /**
     * Declaring class: `java.time.chrono.IsoEra`
     * Signature: `(I)Ljava.time.chrono.IsoEra;`
     */
    static IsoEra of(int arg0);
};


/**
 * Classpath: `java.time.chrono.Era`
 * Package name: `java.time.chrono`
 */
class Era : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.Era";
public:
    STATICINITIALIZE;

    Era(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.time.chrono.AbstractChronology`
 * Package name: `java.time.chrono`
 */
class AbstractChronology : public Object {
protected:
    const inline static char *className = "java.time.chrono.AbstractChronology";
public:
    STATICINITIALIZE;

    AbstractChronology(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.ObjectStreamException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.temporal.ChronoField;J)V`
     */
    void addFieldValue(Map arg0, ChronoField arg1, long arg2);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveYMD(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveYearOfEra(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)V`
     */
    void resolveProlepticMonth(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.time.chrono.Chronology;)Ljava.time.chrono.Chronology;`
     */
    static Chronology registerChrono(Chronology arg0);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.time.chrono.Chronology;Ljava.lang.String;)Ljava.time.chrono.Chronology;`
     */
    static Chronology registerChrono(Chronology arg0, String arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `()Z`
     */
    static bool initCache();

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.lang.String;)Ljava.time.chrono.Chronology;`
     */
    static Chronology of0(String arg0);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveYMAA(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveYMAD(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveYD(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveYAA(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveYAD(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.time.chrono.ChronoLocalDate;JJJ)Ljava.time.chrono.ChronoLocalDate;`
     */
    ChronoLocalDate resolveAligned(ChronoLocalDate arg0, long arg1, long arg2, long arg3);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.chrono.Chronology;`
     * Throws: `java.io.IOException`
     */
    static Chronology readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.chrono.AbstractChronology`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);
};


/**
 * Classpath: `java.time.temporal.ChronoField`
 * Package name: `java.time.temporal`
 */
class ChronoField : public Enum {
protected:
    const inline static char *className = "java.time.temporal.ChronoField";
public:
    STATICINITIALIZE;

    ChronoField(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.time.temporal.ChronoField`
     * Signature: `(Ljava.lang.String;)Ljava.time.temporal.ChronoField;`
     */
    static ChronoField valueOf(String arg0);

    /**
     * Declaring class: `java.time.temporal.ChronoField`
     * Signature: `(J)I`
     */
    int checkValidIntValue(long arg0);

    /**
     * Declaring class: `java.time.temporal.ChronoField`
     * Signature: `(J)J`
     */
    long checkValidValue(long arg0);
};


/**
 * Classpath: `java.time.zone.ZoneOffsetTransition`
 * Package name: `java.time.zone`
 */
class ZoneOffsetTransition : public Object {
protected:
    const inline static char *className = "java.time.zone.ZoneOffsetTransition";
public:
    STATICINITIALIZE;

    ZoneOffsetTransition(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.time.Duration;`
     */
    Duration getDuration();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.util.List;`
     */
    List getValidOffsets();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.time.ZoneOffset;`
     */
    ZoneOffset getOffsetAfter();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `(Ljava.time.ZoneOffset;)Z`
     */
    bool isValidOffset(ZoneOffset arg0);

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Z`
     */
    bool isGap();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Z`
     */
    bool isOverlap();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.time.ZoneOffset;`
     */
    ZoneOffset getOffsetBefore();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneOffset;)Ljava.time.zone.ZoneOffsetTransition;`
     */
    static ZoneOffsetTransition of(LocalDateTime arg0, ZoneOffset arg1, ZoneOffset arg2);

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.time.LocalDateTime;`
     */
    LocalDateTime getDateTimeBefore();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.time.LocalDateTime;`
     */
    LocalDateTime getDateTimeAfter();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()I`
     */
    int getDurationSeconds();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()Ljava.time.Instant;`
     */
    Instant getInstant();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `()J`
     */
    long toEpochSecond();

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `(Ljava.io.DataInput;)Ljava.time.zone.ZoneOffsetTransition;`
     * Throws: `java.io.IOException`
     */
    static ZoneOffsetTransition readExternal(DataInput arg0);

    /**
     * Declaring class: `java.time.zone.ZoneOffsetTransition`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternal(DataOutput arg0);
};


/**
 * Classpath: `sun.util.calendar.CalendarDate`
 * Package name: `sun.util.calendar`
 */
class CalendarDate : public Object {
protected:
    const inline static char *className = "sun.util.calendar.CalendarDate";
public:
    STATICINITIALIZE;

    CalendarDate(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Ljava.util.Locale;)V`
     */
    void setLocale(Locale arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Z`
     */
    bool isNormalized();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getSeconds();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getYear();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getDayOfMonth();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Ljava.util.TimeZone;`
     */
    TimeZone getZone();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(J)V`
     */
    void setTimeOfDay(long arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(IIII)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setTimeOfDay(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(III)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setDate(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getMonth();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setMonth(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setDayOfMonth(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getDayOfWeek();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getHours();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setHours(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getMinutes();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setMinutes(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setSeconds(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Z`
     */
    bool isDaylightTime();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getZoneOffset();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Ljava.util.TimeZone;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setZone(TimeZone arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getMillis();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Lsun.util.calendar.Era;`
     */
    Era getEra();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setYear(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addYear(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addMonth(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addDayOfMonth(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setMillis(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addHours(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addMinutes(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addSeconds(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addMillis(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Z`
     */
    bool isStandardTime();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Lsun.util.calendar.Era;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setEra(Era arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()Z`
     */
    bool isLeapYear();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Z)V`
     */
    void setLeapYear(bool arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()J`
     */
    long getTimeOfDay();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(III)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addDate(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(IIII)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate addTimeOfDay(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Z)V`
     */
    void setStandardTime(bool arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool isSameDate(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)V`
     */
    void setDayOfWeek(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(Z)V`
     */
    void setNormalized(bool arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)V`
     */
    void setZoneOffset(int arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `()I`
     */
    int getDaylightSaving();

    /**
     * Declaring class: `sun.util.calendar.CalendarDate`
     * Signature: `(I)V`
     */
    void setDaylightSaving(int arg0);
};


/**
 * Classpath: `java.util.TimeZone`
 * Package name: `java.util`
 */
class TimeZone : public Object {
protected:
    const inline static char *className = "java.util.TimeZone";
public:
    STATICINITIALIZE;

    TimeZone(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.util.TimeZone;`
     */
    static TimeZone getDefault();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(IIIIII)I`
     */
    int getOffset(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(J)I`
     */
    int getOffset(long arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayName();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayName(Locale arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(ZI)Ljava.lang.String;`
     */
    String getDisplayName(bool arg0, int arg1);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(ZILjava.util.Locale;)Ljava.lang.String;`
     */
    String getDisplayName(bool arg0, int arg1, Locale arg2);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.util.TimeZone;)V`
     */
    static void setDefault(TimeZone arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.lang.String;`
     */
    String getID();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.util.TimeZone;`
     */
    static TimeZone getDefaultRef();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.lang.String;)Ljava.util.TimeZone;`
     */
    static TimeZone getTimeZone(String arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.time.ZoneId;)Ljava.util.TimeZone;`
     */
    static TimeZone getTimeZone(ZoneId arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.lang.String;Z)Ljava.util.TimeZone;`
     */
    static TimeZone getTimeZone(String arg0, bool arg1);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()I`
     */
    int getRawOffset();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.util.TimeZone;)Z`
     */
    bool hasSameRules(TimeZone arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(J[I)I`
     */
    int getOffsets(long arg0, arr_I arg1);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.util.Date;)Z`
     */
    bool inDaylightTime(Date arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()I`
     */
    int getDSTSavings();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Z`
     */
    bool useDaylightTime();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.time.ZoneId;`
     */
    ZoneId toZoneId0();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.time.ZoneId;`
     */
    ZoneId toZoneId();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.lang.String;)Ljava.util.TimeZone;`
     */
    static TimeZone parseCustomTimeZone(String arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.util.TimeZone;`
     */
    static TimeZone setDefaultZone();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String getSystemTimeZoneID(String arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Ljava.lang.String;`
     */
    static String getSystemGMTOffsetID();

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setID(String arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `(I)V`
     */
    void setRawOffset(int arg0);

    /**
     * Declaring class: `java.util.TimeZone`
     * Signature: `()Z`
     */
    bool observesDaylightTime();
};


/**
 * Classpath: `[Lsun.util.calendar.Era;`
 */
class Era_interface : public Object {
protected:
    const inline static char *className = "[Lsun.util.calendar.Era;";
public:
    STATICINITIALIZE;

    Era_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `sun.util.calendar.CalendarSystem`
 * Package name: `sun.util.calendar`
 */
class CalendarSystem : public Object {
protected:
    const inline static char *className = "sun.util.calendar.CalendarSystem";
public:
    STATICINITIALIZE;

    CalendarSystem(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;)J`
     */
    long getTime(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Ljava.lang.String;)Lsun.util.calendar.CalendarSystem;`
     */
    static CalendarSystem forName(String arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool validate(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool normalize(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Ljava.util.TimeZone;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate newCalendarDate(TimeZone arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `()Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate newCalendarDate();

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setTimeOfDay(CalendarDate arg0, int arg1);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `()Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate();

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(J)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate(long arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(JLsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate(long arg0, CalendarDate arg1);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(JLjava.util.TimeZone;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate(long arg0, TimeZone arg1);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Ljava.lang.String;)Lsun.util.calendar.Era;`
     */
    Era getEra(String arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `()Lsun.util.calendar.Gregorian;`
     */
    static Gregorian getGregorianCalendar();

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;Ljava.lang.String;)V`
     */
    void setEra(CalendarDate arg0, String arg1);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int getMonthLength(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int getYearLength(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int getYearLengthInMonths(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `()I`
     */
    int getWeekLength();

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `(IILsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getNthDayOfWeek(int arg0, int arg1, CalendarDate arg2);

    /**
     * Declaring class: `sun.util.calendar.CalendarSystem`
     * Signature: `()V`
     */
    static void initNames();
};


/**
 * Classpath: `java.util.Locale$IsoCountryCode`
 * Enclosing class: `java.util.Locale`
 * Package name: `java.util`
 */
class Locale_IsoCountryCode : public Enum {
protected:
    const inline static char *className = "java.util.Locale$IsoCountryCode";
public:
    STATICINITIALIZE;

    Locale_IsoCountryCode(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.util.Locale$IsoCountryCode`
     * Signature: `(Ljava.lang.String;)Ljava.util.Locale$IsoCountryCode;`
     */
    static Locale_IsoCountryCode valueOf(String arg0);

    /**
     * Declaring class: `java.util.Locale$IsoCountryCode`
     * Signature: `(Ljava.util.Locale$IsoCountryCode;)Ljava.util.Set;`
     */
    static Set retrieveISOCountryCodes(Locale_IsoCountryCode arg0);

    /**
     * Declaring class: `java.util.Locale$IsoCountryCode`
     * Signature: `()Ljava.util.Set;`
     */
    Set createCountryCodeSet();
};


/**
 * Classpath: `java.io.FilterOutputStream`
 * Package name: `java.io`
 */
class FilterOutputStream : public OutputStream {
protected:
    const inline static char *className = "java.io.FilterOutputStream";
public:
    STATICINITIALIZE;

    FilterOutputStream(jobject object) : OutputStream(object) {}


    /**
     * Declaring class: `java.io.FilterOutputStream`
     * Signature: `([BII)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.FilterOutputStream`
     * Signature: `([B)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_B arg0);

    /**
     * Declaring class: `java.io.FilterOutputStream`
     * Signature: `(I)V`
     * Throws: `java.io.IOException`
     */
    void write(int arg0);
};


/**
 * Classpath: `java.io.Writer`
 * Package name: `java.io`
 */
class Writer : public Object {
protected:
    const inline static char *className = "java.io.Writer";
public:
    STATICINITIALIZE;

    Writer(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.Writer`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.io.Writer;`
     * Throws: `java.io.IOException`
     */
    Writer append(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `(C)Ljava.io.Writer;`
     * Throws: `java.io.IOException`
     */
    Writer append(char arg0);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.io.Writer;`
     * Throws: `java.io.IOException`
     */
    Writer append(CharSequence arg0);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `(Ljava.lang.String;II)V`
     * Throws: `java.io.IOException`
     */
    void write(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `(I)V`
     * Throws: `java.io.IOException`
     */
    void write(int arg0);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `(Ljava.lang.String;)V`
     * Throws: `java.io.IOException`
     */
    void write(String arg0);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `([CII)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `([C)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_C arg0);

    /**
     * Declaring class: `java.io.Writer`
     * Signature: `()Ljava.io.Writer;`
     */
    static Writer nullWriter();
};


/**
 * Classpath: `java.lang.Throwable$PrintStreamOrWriter`
 * Enclosing class: `java.lang.Throwable`
 * Package name: `java.lang`
 */
class Throwable_PrintStreamOrWriter : public Object {
protected:
    const inline static char *className = "java.lang.Throwable$PrintStreamOrWriter";
public:
    STATICINITIALIZE;

    Throwable_PrintStreamOrWriter(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Throwable$PrintStreamOrWriter`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void println(Object arg0);

    /**
     * Declaring class: `java.lang.Throwable$PrintStreamOrWriter`
     * Signature: `()Ljava.lang.Object;`
     */
    Object lock();
};


/**
 * Classpath: `[Ljava.lang.StackTraceElement;`
 */
class StackTraceElement_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.StackTraceElement;";
public:
    STATICINITIALIZE;

    StackTraceElement_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `[Ljava.lang.Thread;`
 */
class Thread_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Thread;";
public:
    STATICINITIALIZE;

    Thread_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.Thread$UncaughtExceptionHandler`
 * Enclosing class: `java.lang.Thread`
 * Package name: `java.lang`
 */
class Thread_UncaughtExceptionHandler : public JavaObject {
protected:
    const inline static char *className = "java.lang.Thread$UncaughtExceptionHandler";
public:
    STATICINITIALIZE;

    Thread_UncaughtExceptionHandler(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.nio.ch.Interruptible`
 * Package name: `sun.nio.ch`
 */
class Interruptible : public JavaObject {
protected:
    const inline static char *className = "sun.nio.ch.Interruptible";
public:
    STATICINITIALIZE;

    Interruptible(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.Thread$State`
 * Enclosing class: `java.lang.Thread`
 * Package name: `java.lang`
 */
class Thread_State : public Enum {
protected:
    const inline static char *className = "java.lang.Thread$State";
public:
    STATICINITIALIZE;

    Thread_State(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.Thread$State`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Thread$State;`
     */
    static Thread_State valueOf(String arg0);
};


/**
 * Classpath: `[Ljava.lang.ThreadGroup;`
 */
class ThreadGroup_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.ThreadGroup;";
public:
    STATICINITIALIZE;

    ThreadGroup_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.io.FileDescriptor`
 * Package name: `java.io`
 */
class FileDescriptor : public Object {
protected:
    const inline static char *className = "java.io.FileDescriptor";
public:
    STATICINITIALIZE;

    FileDescriptor(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `(I)V`
     */
    void set(int arg0);

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void close();

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `()V`
     * Throws: `java.io.SyncFailedException`
     */
    void sync();

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `(Ljava.io.Closeable;)V`
     */
    void attach(Closeable arg0);

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `(Ljava.io.Closeable;)V`
     * Throws: `java.io.IOException`
     */
    void closeAll(Closeable arg0);

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `(I)J`
     */
    static long getHandle(int arg0);

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `(I)Z`
     */
    static bool getAppend(int arg0);

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `()V`
     */
    void unregisterCleanup();

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void close0();

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `()Z`
     */
    bool valid();

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `(J)V`
     */
    void setHandle(long arg0);

    /**
     * Declaring class: `java.io.FileDescriptor`
     * Signature: `(Ljdk.internal.ref.PhantomCleanable;)V`
     */
    void registerCleanup(PhantomCleanable arg0);
};


/**
 * Classpath: `java.io.Closeable`
 * Package name: `java.io`
 */
class Closeable : public JavaObject {
protected:
    const inline static char *className = "java.io.Closeable";
public:
    STATICINITIALIZE;

    Closeable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.ref.PhantomReference`
 * Package name: `java.lang.ref`
 */
class PhantomReference : public Reference {
protected:
    const inline static char *className = "java.lang.ref.PhantomReference";
public:
    STATICINITIALIZE;

    PhantomReference(jobject object) : Reference(object) {}


    /**
     * Declaring class: `java.lang.ref.PhantomReference`
     * Signature: `()Ljava.lang.Object;`
     */
    Object get();

    /**
     * Declaring class: `java.lang.ref.PhantomReference`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool refersTo0(Object arg0);
};


/**
 * Classpath: `jdk.internal.reflect.ReflectionFactory`
 * Package name: `jdk.internal.reflect`
 */
class ReflectionFactory : public Object {
protected:
    const inline static char *className = "jdk.internal.reflect.ReflectionFactory";
public:
    STATICINITIALIZE;

    ReflectionFactory(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `()Ljdk.internal.reflect.ReflectionFactory;`
     */
    static ReflectionFactory getReflectionFactory();

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Constructor;)Ljava.lang.reflect.Constructor;`
     */
    Constructor copyConstructor(Constructor arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Constructor;[Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.Object;`
     * Throws: `java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException`
     */
    Object newInstance(Constructor arg0, Object_interface arg1, Class arg2);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Method;)Ljava.lang.reflect.Method;`
     */
    Method copyMethod(Method arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Field;)Ljava.lang.reflect.Field;`
     */
    Field copyField(Field arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Field;Z)Ljdk.internal.reflect.FieldAccessor;`
     */
    FieldAccessor newFieldAccessor(Field arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Method;)Ljdk.internal.reflect.MethodAccessor;`
     */
    MethodAccessor newMethodAccessor(Method arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Constructor;)Ljdk.internal.reflect.ConstructorAccessor;`
     */
    ConstructorAccessor getConstructorAccessor(Constructor arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Constructor;)Ljdk.internal.reflect.ConstructorAccessor;`
     */
    ConstructorAccessor newConstructorAccessor(Constructor arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Constructor;Ljdk.internal.reflect.ConstructorAccessor;)V`
     */
    void setConstructorAccessor(Constructor arg0, ConstructorAccessor arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `()I`
     */
    static int inflationThreshold();

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.reflect.Constructor;)Ljava.lang.reflect.Constructor;`
     */
    Constructor generateConstructor(Class arg0, Constructor arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;[Ljava.lang.Class;[Ljava.lang.Class;IILjava.lang.String;[B[B)Ljava.lang.reflect.Constructor;`
     */
    Constructor newConstructor(Class arg0, Class_interface arg1, Class_interface arg2, int arg3, int arg4, String arg5, arr_B arg6, arr_B arg7);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Method;)Ljava.lang.reflect.Method;`
     */
    Method leafCopyMethod(Method arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `()V`
     */
    static void checkInitted();

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.reflect.Method;)Ljava.lang.reflect.Method;`
     */
    static Method findMethodForReflection(Method arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Class;)Z`
     */
    static bool packageEquals(Class arg0, Class arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool superHasAccessibleConstructor(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle findReadWriteObjectForSerialization(Class arg0, String arg1, Class arg2);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle getReplaceResolveForSerialization(Class arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     */
    Constructor newConstructorForExternalization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;`
     */
    Constructor newConstructorForSerialization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;Ljava.lang.reflect.Constructor;)Ljava.lang.reflect.Constructor;`
     */
    Constructor newConstructorForSerialization(Class arg0, Constructor arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle readObjectForSerialization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle readObjectNoDataForSerialization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle writeObjectForSerialization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle writeReplaceForSerialization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle readResolveForSerialization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool hasStaticInitializerForSerialization(Class arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ReflectionFactory`
     * Signature: `()Ljava.lang.reflect.Constructor;`
     */
    Constructor newOptionalDataExceptionForSerialization();
};


/**
 * Classpath: `sun.reflect.generics.repository.ClassRepository`
 * Package name: `sun.reflect.generics.repository`
 */
class ClassRepository : public GenericDeclRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.ClassRepository";
public:
    STATICINITIALIZE;

    ClassRepository(jobject object) : GenericDeclRepository(object) {}


    /**
     * Declaring class: `sun.reflect.generics.repository.ClassRepository`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type getSuperclass();

    /**
     * Declaring class: `sun.reflect.generics.repository.ClassRepository`
     * Signature: `(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.ClassRepository;`
     */
    static ClassRepository make(String arg0, GenericsFactory arg1);

    /**
     * Declaring class: `sun.reflect.generics.repository.ClassRepository`
     * Signature: `(Ljava.lang.String;)Lsun.reflect.generics.tree.ClassSignature;`
     */
    ClassSignature parse(String arg0);

    /**
     * Declaring class: `sun.reflect.generics.repository.ClassRepository`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type computeSuperclass();
};


/**
 * Classpath: `sun.reflect.generics.tree.ClassSignature`
 * Package name: `sun.reflect.generics.tree`
 */
class ClassSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ClassSignature";
public:
    STATICINITIALIZE;

    ClassSignature(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.reflect.generics.tree.ClassSignature`
     * Signature: `()Lsun.reflect.generics.tree.ClassTypeSignature;`
     */
    ClassTypeSignature getSuperclass();

    /**
     * Declaring class: `sun.reflect.generics.tree.ClassSignature`
     * Signature: `([Lsun.reflect.generics.tree.FormalTypeParameter;Lsun.reflect.generics.tree.ClassTypeSignature;[Lsun.reflect.generics.tree.ClassTypeSignature;)Lsun.reflect.generics.tree.ClassSignature;`
     */
    static ClassSignature make(FormalTypeParameter_interface arg0, ClassTypeSignature arg1, ClassTypeSignature_interface arg2);

    /**
     * Declaring class: `sun.reflect.generics.tree.ClassSignature`
     * Signature: `(Lsun.reflect.generics.visitor.Visitor;)V`
     */
    void accept(Visitor arg0);
};


/**
 * Classpath: `sun.reflect.generics.tree.ClassTypeSignature`
 * Package name: `sun.reflect.generics.tree`
 */
class ClassTypeSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ClassTypeSignature";
public:
    STATICINITIALIZE;

    ClassTypeSignature(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.reflect.generics.tree.ClassTypeSignature`
     * Signature: `(Ljava.util.List;)Lsun.reflect.generics.tree.ClassTypeSignature;`
     */
    static ClassTypeSignature make(List arg0);

    /**
     * Declaring class: `sun.reflect.generics.tree.ClassTypeSignature`
     * Signature: `()Ljava.util.List;`
     */
    List getPath();
};


/**
 * Classpath: `[Lsun.reflect.generics.tree.ClassTypeSignature;`
 */
class ClassTypeSignature_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.ClassTypeSignature;";
public:
    STATICINITIALIZE;

    ClassTypeSignature_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.Class$ReflectionData`
 * Enclosing class: `java.lang.Class`
 * Package name: `java.lang`
 */
class Class_ReflectionData : public Object {
protected:
    const inline static char *className = "java.lang.Class$ReflectionData";
public:
    STATICINITIALIZE;

    Class_ReflectionData(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.Class$EnclosingMethodInfo`
 * Enclosing class: `java.lang.Class`
 * Package name: `java.lang`
 */
class Class_EnclosingMethodInfo : public Object {
protected:
    const inline static char *className = "java.lang.Class$EnclosingMethodInfo";
public:
    STATICINITIALIZE;

    Class_EnclosingMethodInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.Class$EnclosingMethodInfo`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.Class$EnclosingMethodInfo`
     * Signature: `()Z`
     */
    bool isMethod();

    /**
     * Declaring class: `java.lang.Class$EnclosingMethodInfo`
     * Signature: `()Ljava.lang.String;`
     */
    String getDescriptor();

    /**
     * Declaring class: `java.lang.Class$EnclosingMethodInfo`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getEnclosingClass();

    /**
     * Declaring class: `java.lang.Class$EnclosingMethodInfo`
     * Signature: `()Z`
     */
    bool isConstructor();

    /**
     * Declaring class: `java.lang.Class$EnclosingMethodInfo`
     * Signature: `([Ljava.lang.Object;)V`
     */
    static void validate(Object_interface arg0);

    /**
     * Declaring class: `java.lang.Class$EnclosingMethodInfo`
     * Signature: `()Z`
     */
    bool isPartial();
};


/**
 * Classpath: `[Ljava.lang.reflect.Field;`
 */
class Field_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.Field;";
public:
    STATICINITIALIZE;

    Field_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `[Ljava.lang.reflect.Method;`
 */
class Method_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.Method;";
public:
    STATICINITIALIZE;

    Method_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.PublicMethods$MethodList`
 * Enclosing class: `java.lang.PublicMethods`
 * Package name: `java.lang`
 */
class PublicMethods_MethodList : public Object {
protected:
    const inline static char *className = "java.lang.PublicMethods$MethodList";
public:
    STATICINITIALIZE;

    PublicMethods_MethodList(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.PublicMethods$MethodList`
     * Signature: `()I`
     */
    int length();

    /**
     * Declaring class: `java.lang.PublicMethods$MethodList`
     * Signature: `(Ljava.lang.PublicMethods$MethodList;Ljava.lang.reflect.Method;)Ljava.lang.PublicMethods$MethodList;`
     */
    static PublicMethods_MethodList merge(PublicMethods_MethodList arg0, Method arg1);

    /**
     * Declaring class: `java.lang.PublicMethods$MethodList`
     * Signature: `(Ljava.lang.PublicMethods$MethodList;Ljava.lang.PublicMethods$MethodList;)Ljava.lang.PublicMethods$MethodList;`
     */
    static PublicMethods_MethodList merge(PublicMethods_MethodList arg0, PublicMethods_MethodList arg1);

    /**
     * Declaring class: `java.lang.PublicMethods$MethodList`
     * Signature: `()Ljava.lang.reflect.Method;`
     */
    Method getMostSpecific();

    /**
     * Declaring class: `java.lang.PublicMethods$MethodList`
     * Signature: `([Ljava.lang.reflect.Method;Ljava.lang.String;[Ljava.lang.Class;Z)Ljava.lang.PublicMethods$MethodList;`
     */
    static PublicMethods_MethodList filter(Method_interface arg0, String arg1, Class_interface arg2, bool arg3);
};


/**
 * Classpath: `java.lang.Class$AnnotationData`
 * Enclosing class: `java.lang.Class`
 * Package name: `java.lang`
 */
class Class_AnnotationData : public Object {
protected:
    const inline static char *className = "java.lang.Class$AnnotationData";
public:
    STATICINITIALIZE;

    Class_AnnotationData(jobject object) : Object(object) {}

};


/**
 * Classpath: `jdk.internal.reflect.ConstantPool`
 * Package name: `jdk.internal.reflect`
 */
class ConstantPool : public Object {
protected:
    const inline static char *className = "jdk.internal.reflect.ConstantPool";
public:
    STATICINITIALIZE;

    ConstantPool(jobject object) : Object(object) {}


    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;)I`
     */
    int getSize0(Object arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.Class;`
     */
    Class getClassAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.Class;`
     */
    Class getClassAtIfLoaded0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)I`
     */
    int getClassRefIndexAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.reflect.Member;`
     */
    Member getMethodAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.reflect.Member;`
     */
    Member getMethodAtIfLoaded0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.reflect.Field;`
     */
    Field getFieldAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.reflect.Field;`
     */
    Field getFieldAtIfLoaded0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)I`
     */
    int getNameAndTypeRefIndexAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)I`
     */
    int getIntAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)J`
     */
    long getLongAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)F`
     */
    float getFloatAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)D`
     */
    double getDoubleAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.String;`
     */
    String getStringAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)Ljava.lang.String;`
     */
    String getUTF8At0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(Ljava.lang.Object;I)B`
     */
    byte getTagAt0(Object arg0, int arg1);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `()I`
     */
    int getSize();

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.Class;`
     */
    Class getClassAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.Class;`
     */
    Class getClassAtIfLoaded(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)I`
     */
    int getClassRefIndexAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.reflect.Member;`
     */
    Member getMethodAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.reflect.Member;`
     */
    Member getMethodAtIfLoaded(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.reflect.Field;`
     */
    Field getFieldAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.reflect.Field;`
     */
    Field getFieldAtIfLoaded(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)I`
     */
    int getNameAndTypeRefIndexAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)I`
     */
    int getIntAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)J`
     */
    long getLongAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)F`
     */
    float getFloatAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)D`
     */
    double getDoubleAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getStringAt(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getUTF8At(int arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool`
     * Signature: `(I)Ljdk.internal.reflect.ConstantPool$Tag;`
     */
    ConstantPool_Tag getTagAt(int arg0);
};


/**
 * Classpath: `java.lang.reflect.Member`
 * Package name: `java.lang.reflect`
 */
class Member : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.Member";
public:
    STATICINITIALIZE;

    Member(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `jdk.internal.reflect.ConstantPool$Tag`
 * Enclosing class: `jdk.internal.reflect.ConstantPool`
 * Package name: `jdk.internal.reflect`
 */
class ConstantPool_Tag : public Enum {
protected:
    const inline static char *className = "jdk.internal.reflect.ConstantPool$Tag";
public:
    STATICINITIALIZE;

    ConstantPool_Tag(jobject object) : Enum(object) {}


    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool$Tag`
     * Signature: `(Ljava.lang.String;)Ljdk.internal.reflect.ConstantPool$Tag;`
     */
    static ConstantPool_Tag valueOf(String arg0);

    /**
     * Declaring class: `jdk.internal.reflect.ConstantPool$Tag`
     * Signature: `(B)Ljdk.internal.reflect.ConstantPool$Tag;`
     */
    static ConstantPool_Tag valueOf(byte arg0);
};


/**
 * Classpath: `sun.reflect.annotation.AnnotationType`
 * Package name: `sun.reflect.annotation`
 */
class AnnotationType : public Object {
protected:
    const inline static char *className = "sun.reflect.annotation.AnnotationType";
public:
    STATICINITIALIZE;

    AnnotationType(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `(Ljava.lang.Class;)Lsun.reflect.annotation.AnnotationType;`
     */
    static AnnotationType getInstance(Class arg0);

    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `()Z`
     */
    bool isInherited();

    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `()Ljava.util.Map;`
     */
    Map members();

    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Class;`
     */
    static Class invocationHandlerReturnType(Class arg0);

    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `()Ljava.lang.annotation.RetentionPolicy;`
     */
    RetentionPolicy retention();

    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `()Ljava.util.Map;`
     */
    Map memberTypes();

    /**
     * Declaring class: `sun.reflect.annotation.AnnotationType`
     * Signature: `()Ljava.util.Map;`
     */
    Map memberDefaults();
};


/**
 * Classpath: `java.lang.annotation.RetentionPolicy`
 * Package name: `java.lang.annotation`
 */
class RetentionPolicy : public Enum {
protected:
    const inline static char *className = "java.lang.annotation.RetentionPolicy";
public:
    STATICINITIALIZE;

    RetentionPolicy(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.annotation.RetentionPolicy`
     * Signature: `(Ljava.lang.String;)Ljava.lang.annotation.RetentionPolicy;`
     */
    static RetentionPolicy valueOf(String arg0);
};


/**
 * Classpath: `[Ljava.lang.CharSequence;`
 */
class CharSequence_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.CharSequence;";
public:
    STATICINITIALIZE;

    CharSequence_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.lang.Iterable`
 * Package name: `java.lang`
 */
class Iterable : public JavaObject {
protected:
    const inline static char *className = "java.lang.Iterable";
public:
    STATICINITIALIZE;

    Iterable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.util.Vec3i`
 * Package name: `net.minecraft.util`
 */
class Vec3i : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Vec3i";
public:
    STATICINITIALIZE;

    Vec3i(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.Vec3i;`
     */
    Vec3i crossProduct(Vec3i arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `(DDD)D`
     */
    double distanceSqToCenter(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `()I`
     */
    int getX();

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `()I`
     */
    int getY();

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `()I`
     */
    int getZ();

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `(Lnet.minecraft.util.Vec3i;)D`
     */
    double distanceSq(Vec3i arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `(DDD)D`
     */
    double distanceSq(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.Vec3i`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `net.minecraft.util.EnumFacing`
 * Package name: `net.minecraft.util`
 */
class EnumFacing : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing";
public:
    STATICINITIALIZE;

    EnumFacing(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.Vec3i;`
     */
    Vec3i getDirectionVec();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()I`
     */
    int getFrontOffsetX();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()I`
     */
    int getFrontOffsetY();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()I`
     */
    int getFrontOffsetZ();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()I`
     */
    int getHorizontalIndex();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(Lnet.minecraft.util.EnumFacing$Axis;)Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing rotateAround(EnumFacing_Axis arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(FFF)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing getFacingFromVector(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(Lnet.minecraft.util.EnumFacing$AxisDirection;Lnet.minecraft.util.EnumFacing$Axis;)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing func_181076_a(EnumFacing_AxisDirection arg0, EnumFacing_Axis arg1);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing getOpposite();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.EnumFacing$AxisDirection;`
     */
    EnumFacing_AxisDirection getAxisDirection();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(I)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing getHorizontal(int arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.EnumFacing$Axis;`
     */
    EnumFacing_Axis getAxis();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing rotateY();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Ljava.lang.String;`
     */
    String getName2();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(I)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing getFront(int arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing rotateX();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing rotateZ();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing rotateYCCW();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing byName(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(D)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing fromAngle(double arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `()I`
     */
    int getIndex();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing`
     * Signature: `(Ljava.util.Random;)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing random(Random arg0);
};


/**
 * Classpath: `net.minecraft.util.EnumFacing$Axis`
 * Enclosing class: `net.minecraft.util.EnumFacing`
 * Package name: `net.minecraft.util`
 */
class EnumFacing_Axis : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing$Axis";
public:
    STATICINITIALIZE;

    EnumFacing_Axis(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Axis`
     * Signature: `()Z`
     */
    bool isHorizontal();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Axis`
     * Signature: `()Z`
     */
    bool isVertical();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Axis`
     * Signature: `()Lnet.minecraft.util.EnumFacing$Plane;`
     */
    EnumFacing_Plane getPlane();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Axis`
     * Signature: `()Ljava.lang.String;`
     */
    String getName2();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Axis`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$Axis;`
     */
    static EnumFacing_Axis byName(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Axis`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Axis`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$Axis;`
     */
    static EnumFacing_Axis valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.util.EnumFacing$Plane`
 * Enclosing class: `net.minecraft.util.EnumFacing`
 * Package name: `net.minecraft.util`
 */
class EnumFacing_Plane : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing$Plane";
public:
    STATICINITIALIZE;

    EnumFacing_Plane(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Plane`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$Plane;`
     */
    static EnumFacing_Plane valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$Plane`
     * Signature: `(Ljava.util.Random;)Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing random(Random arg0);
};


/**
 * Classpath: `net.minecraft.util.EnumFacing$AxisDirection`
 * Enclosing class: `net.minecraft.util.EnumFacing`
 * Package name: `net.minecraft.util`
 */
class EnumFacing_AxisDirection : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing$AxisDirection";
public:
    STATICINITIALIZE;

    EnumFacing_AxisDirection(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.EnumFacing$AxisDirection`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$AxisDirection`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$AxisDirection;`
     */
    static EnumFacing_AxisDirection valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumFacing$AxisDirection`
     * Signature: `()I`
     */
    int getOffset();
};


/**
 * Classpath: `net.minecraft.util.AxisAlignedBB`
 * Package name: `net.minecraft.util`
 */
class AxisAlignedBB : public Object {
protected:
    const inline static char *className = "net.minecraft.util.AxisAlignedBB";
public:
    STATICINITIALIZE;

    AxisAlignedBB(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Z`
     */
    bool intersectsWith(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isVecInside(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.MovingObjectPosition;`
     */
    MovingObjectPosition calculateIntercept(Vec3 arg0, Vec3 arg1);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `()Z`
     */
    bool func_181656_b();

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;D)D`
     */
    double calculateYOffset(AxisAlignedBB arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;D)D`
     */
    double calculateXOffset(AxisAlignedBB arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;D)D`
     */
    double calculateZOffset(AxisAlignedBB arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `()D`
     */
    double getAverageEdgeLength();

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(DDD)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB addCoord(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(DDD)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB contract(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(DDDDDD)Lnet.minecraft.util.AxisAlignedBB;`
     */
    static AxisAlignedBB fromBounds(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isVecInYZ(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isVecInXZ(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isVecInXY(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB union_(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(DDD)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB offset(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.AxisAlignedBB`
     * Signature: `(DDD)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB expand(double arg0, double arg1, double arg2);
};


/**
 * Classpath: `net.minecraft.util.Vec3`
 * Package name: `net.minecraft.util`
 */
class Vec3 : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Vec3";
public:
    STATICINITIALIZE;

    Vec3(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `()D`
     */
    double lengthVector();

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;`
     */
    Vec3 subtractReverse(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;D)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getIntermediateWithXValue(Vec3 arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;D)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getIntermediateWithYValue(Vec3 arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;D)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getIntermediateWithZValue(Vec3 arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;)D`
     */
    double squareDistanceTo(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;`
     */
    Vec3 crossProduct(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 rotatePitch(float arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 rotateYaw(float arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(DDD)Lnet.minecraft.util.Vec3;`
     */
    Vec3 addVector(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;)D`
     */
    double dotProduct(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;)D`
     */
    double distanceTo(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(DDD)Lnet.minecraft.util.Vec3;`
     */
    Vec3 subtract(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;`
     */
    Vec3 subtract(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;`
     */
    Vec3 add(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.Vec3`
     * Signature: `()Lnet.minecraft.util.Vec3;`
     */
    Vec3 normalize();
};


/**
 * Classpath: `net.minecraft.util.MovingObjectPosition`
 * Package name: `net.minecraft.util`
 */
class MovingObjectPosition : public Object {
protected:
    const inline static char *className = "net.minecraft.util.MovingObjectPosition";
public:
    STATICINITIALIZE;

    MovingObjectPosition(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.MovingObjectPosition`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getBlockPos();

    /**
     * Declaring class: `net.minecraft.util.MovingObjectPosition`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `net.minecraft.world.ChunkCoordIntPair`
 * Package name: `net.minecraft.world`
 */
class ChunkCoordIntPair : public Object {
protected:
    const inline static char *className = "net.minecraft.world.ChunkCoordIntPair";
public:
    STATICINITIALIZE;

    ChunkCoordIntPair(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `(II)J`
     */
    static long chunkXZ2Int(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()I`
     */
    int getCenterXPos();

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()I`
     */
    int getCenterZPosition();

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `(I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getCenterBlock(int arg0);

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()I`
     */
    int getXEnd();

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()I`
     */
    int getXStart();

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()I`
     */
    int getZEnd();

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()I`
     */
    int getZStart();

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `(III)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getBlock(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.world.ChunkCoordIntPair`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `net.minecraft.world.chunk.Chunk`
 * Package name: `net.minecraft.world.chunk`
 */
class Chunk : public Object {
protected:
    const inline static char *className = "net.minecraft.world.chunk.Chunk";
public:
    STATICINITIALIZE;

    Chunk(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Z`
     */
    bool isPopulated();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;I)I`
     */
    int getLightSubtracted(BlockPos arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(II)I`
     */
    int getHeightValue(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()I`
     */
    int getLowestHeight();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)I`
     */
    int getLightFor(EnumSkyBlock arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;I)V`
     */
    void setLightFor(EnumSkyBlock arg0, BlockPos arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getPrecipitationHeight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()I`
     */
    int getTopFilledSegment();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void removeTileEntity(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void addTileEntity(TileEntity arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void addTileEntity(BlockPos arg0, TileEntity arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.entity.Entity;I)V`
     */
    void removeEntityAtIndex(Entity arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getBlockMetadata(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(III)I`
     */
    int getBlockMetadata(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void enqueueRelightChecks();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void setChunkModified();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()J`
     */
    long getInhabitedTime();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void resetRelightChecks();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Z`
     */
    bool isTerrainPopulated();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Z`
     */
    bool isLightPopulated();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(II)Z`
     */
    bool isAtLocation(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void generateHeightMap();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void generateSkylightMap();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(III)I`
     */
    int getBlockLightOpacity(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getBlockLightOpacity(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(II)V`
     */
    void propagateSkylightOcclusion(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)V`
     */
    void recheckGaps(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(III)V`
     */
    void relightBlock(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void onChunkUnload();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)Z`
     */
    bool needsSaving(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(J)Ljava.util.Random;`
     */
    Random getRandomWithSeed(long arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.world.chunk.IChunkProvider;Lnet.minecraft.world.chunk.IChunkProvider;II)V`
     */
    void populateChunk(IChunkProvider arg0, IChunkProvider arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void func_150809_p();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(II)Z`
     */
    bool getAreLevelsEmpty(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `([Lnet.minecraft.world.chunk.storage.ExtendedBlockStorage;)V`
     */
    void setStorageArrays(ExtendedBlockStorage_interface arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `([B)V`
     */
    void setBiomeArray(arr_B arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(II)Z`
     */
    bool func_150811_f(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.EnumFacing;)V`
     */
    void func_180700_a(EnumFacing arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void func_177441_y();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)V`
     */
    void setChunkLoaded(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `([I)V`
     */
    void setHeightMap(arr_I arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Ljava.util.Map;`
     */
    Map getTileEntityMap();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)V`
     */
    void setTerrainPopulated(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)V`
     */
    void setLightPopulated(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)V`
     */
    void setModified(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)V`
     */
    void setHasEntities(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(J)V`
     */
    void setLastSaveTime(long arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(J)V`
     */
    void setInhabitedTime(long arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Z)V`
     */
    void func_150804_b(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Lnet.minecraft.world.ChunkCoordIntPair;`
     */
    ChunkCoordIntPair getChunkCoordIntPair();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.tileentity.TileEntity;`
     */
    TileEntity createNewTileEntity(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getBlockState(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState setBlockState(BlockPos arg0, IBlockState arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()V`
     */
    void onChunkLoad();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void removeEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.chunk.Chunk$EnumCreateEntityType;)Lnet.minecraft.tileentity.TileEntity;`
     */
    TileEntity getTileEntity(BlockPos arg0, Chunk_EnumCreateEntityType arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.biome.WorldChunkManager;)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase getBiome(BlockPos arg0, WorldChunkManager arg1);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canSeeSky(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void addEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Lnet.minecraft.world.World;`
     */
    World getWorld();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `([BIZ)V`
     */
    void fillChunk(arr_B arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(III)Lnet.minecraft.block.Block;`
     */
    Block getBlock0(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getHeight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(III)Lnet.minecraft.block.Block;`
     */
    Block getBlock(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.Block;`
     */
    Block getBlock(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;Ljava.util.List;Lcom.google.common.base.Predicate;)V`
     */
    void getEntitiesWithinAABBForEntity(Entity arg0, AxisAlignedBB arg1, List arg2, Predicate arg3);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;Ljava.util.List;Lcom.google.common.base.Predicate;)V`
     */
    void getEntitiesOfTypeWithinAAAB(Class arg0, AxisAlignedBB arg1, List arg2, Predicate arg3);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(III)V`
     */
    void checkSkylightNeighborHeight(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `(IIII)V`
     */
    void updateSkylightNeighborHeight(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk`
     * Signature: `()Z`
     */
    bool isLoaded();
};


/**
 * Classpath: `net.minecraft.world.EnumSkyBlock`
 * Package name: `net.minecraft.world`
 */
class EnumSkyBlock : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.EnumSkyBlock";
public:
    STATICINITIALIZE;

    EnumSkyBlock(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.world.EnumSkyBlock`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.EnumSkyBlock;`
     */
    static EnumSkyBlock valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.tileentity.TileEntity`
 * Package name: `net.minecraft.tileentity`
 */
class TileEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.tileentity.TileEntity";
public:
    STATICINITIALIZE;

    TileEntity(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()Z`
     */
    bool hasWorldObj();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(Lnet.minecraft.crash.CrashReportCategory;)V`
     */
    void addInfoToCrashReport(CrashReportCategory arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.tileentity.TileEntity;`
     */
    static TileEntity createAndLoadEntity(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()I`
     */
    int getBlockMetadata();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()Lnet.minecraft.network.Packet;`
     */
    Packet getDescriptionPacket();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(II)Z`
     */
    bool receiveClientEvent(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()V`
     */
    void updateContainingBlockInfo();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()Z`
     */
    bool func_183000_F();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(Lnet.minecraft.world.World;)V`
     */
    void setWorldObj(World arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()Lnet.minecraft.block.Block;`
     */
    Block getBlockType();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(DDD)D`
     */
    double getDistanceSq(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void setPos(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()V`
     */
    void invalidate();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getPos();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()Lnet.minecraft.world.World;`
     */
    World getWorld();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()V`
     */
    void markDirty();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()D`
     */
    double getMaxRenderDistanceSquared();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()V`
     */
    void validate();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `()Z`
     */
    bool isInvalid();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntity`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)V`
     */
    static void addMapping(Class arg0, String arg1);
};


/**
 * Classpath: `net.minecraft.crash.CrashReportCategory`
 * Package name: `net.minecraft.crash`
 */
class CrashReportCategory : public Object {
protected:
    const inline static char *className = "net.minecraft.crash.CrashReportCategory";
public:
    STATICINITIALIZE;

    CrashReportCategory(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void appendToStringBuilder(StringBuilder arg0);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(I)I`
     */
    int getPrunedStackTrace(int arg0);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void addCrashSectionThrowable(String arg0, Throwable arg1);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Lnet.minecraft.crash.CrashReportCategory;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V`
     */
    static void addBlockInfo(CrashReportCategory arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Lnet.minecraft.crash.CrashReportCategory;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;I)V`
     */
    static void addBlockInfo(CrashReportCategory arg0, BlockPos arg1, Block arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(DDD)Ljava.lang.String;`
     */
    static String getCoordinateInfo(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Ljava.lang.String;`
     */
    static String getCoordinateInfo(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Ljava.lang.String;Ljava.util.concurrent.Callable;)V`
     */
    void addCrashSectionCallable(String arg0, Callable arg1);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    void addCrashSection(String arg0, Object arg1);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(Ljava.lang.StackTraceElement;Ljava.lang.StackTraceElement;)Z`
     */
    bool firstTwoElementsOfStackTraceMatch(StackTraceElement arg0, StackTraceElement arg1);

    /**
     * Declaring class: `net.minecraft.crash.CrashReportCategory`
     * Signature: `(I)V`
     */
    void trimStackTraceEntriesFromBottom(int arg0);
};


/**
 * Classpath: `net.minecraft.block.state.IBlockState`
 * Package name: `net.minecraft.block.state`
 */
class IBlockState : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.block.state.IBlockState";
public:
    STATICINITIALIZE;

    IBlockState(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.concurrent.Callable`
 * Package name: `java.util.concurrent`
 */
class Callable : public JavaObject {
protected:
    const inline static char *className = "java.util.concurrent.Callable";
public:
    STATICINITIALIZE;

    Callable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.lang.StackTraceElement`
 * Package name: `java.lang`
 */
class StackTraceElement : public Object {
protected:
    const inline static char *className = "java.lang.StackTraceElement";
public:
    STATICINITIALIZE;

    StackTraceElement(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `(Ljava.lang.StackFrameInfo;)Ljava.lang.StackTraceElement;`
     */
    static StackTraceElement of(StackFrameInfo arg0);

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Z`
     */
    bool dropClassLoaderName();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Z`
     */
    bool dropModuleVersion();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Z`
     */
    bool isNativeMethod();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `(Ljava.lang.Module;)Z`
     */
    static bool isHashedInJavaBase(Module arg0);

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `([Ljava.lang.StackTraceElement;Ljava.lang.Throwable;)V`
     */
    static void initStackTraceElements(StackTraceElement_interface arg0, Throwable arg1);

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()V`
     */
    void computeFormat();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `(Ljava.lang.StackTraceElement;Ljava.lang.StackFrameInfo;)V`
     */
    static void initStackTraceElement(StackTraceElement arg0, StackFrameInfo arg1);

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Ljava.lang.String;`
     */
    String getFileName();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()I`
     */
    int getLineNumber();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Ljava.lang.String;`
     */
    String getModuleName();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Ljava.lang.String;`
     */
    String getModuleVersion();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Ljava.lang.String;`
     */
    String getClassLoaderName();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Ljava.lang.String;`
     */
    String getClassName();

    /**
     * Declaring class: `java.lang.StackTraceElement`
     * Signature: `()Ljava.lang.String;`
     */
    String getMethodName();
};


/**
 * Classpath: `java.lang.StackFrameInfo`
 * Package name: `java.lang`
 */
class StackFrameInfo : public Object {
protected:
    const inline static char *className = "java.lang.StackFrameInfo";
public:
    STATICINITIALIZE;

    StackFrameInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.StackFrameInfo`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.StackFrameInfo`
     * Signature: `()Ljava.lang.Class;`
     */
    Class declaringClass();

    /**
     * Declaring class: `java.lang.StackFrameInfo`
     * Signature: `()V`
     */
    void ensureRetainClassRefEnabled();
};


/**
 * Classpath: `net.minecraft.crash.CrashReport`
 * Package name: `net.minecraft.crash`
 */
class CrashReport : public Object {
protected:
    const inline static char *className = "net.minecraft.crash.CrashReport";
public:
    STATICINITIALIZE;

    CrashReport(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()V`
     */
    void populateEnvironment();

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void getSectionsInStringBuilder(StringBuilder arg0);

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()Ljava.lang.String;`
     */
    String getCauseStackTraceOrString();

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()Ljava.lang.String;`
     */
    static String getWittyComment();

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `(Ljava.lang.String;I)Lnet.minecraft.crash.CrashReportCategory;`
     */
    CrashReportCategory makeCategoryDepth(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()Ljava.lang.Throwable;`
     */
    Throwable getCrashCause();

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `(Ljava.lang.Throwable;Ljava.lang.String;)Lnet.minecraft.crash.CrashReport;`
     */
    static CrashReport makeCrashReport(Throwable arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.crash.CrashReportCategory;`
     */
    CrashReportCategory makeCategory(String arg0);

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()Ljava.lang.String;`
     */
    String getCompleteReport();

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()Lnet.minecraft.crash.CrashReportCategory;`
     */
    CrashReportCategory getCategory();

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `(Ljava.io.File;)Z`
     */
    bool saveToFile(File arg0);

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()Ljava.io.File;`
     */
    File getFile();

    /**
     * Declaring class: `net.minecraft.crash.CrashReport`
     * Signature: `()Ljava.lang.String;`
     */
    String getDescription();
};


/**
 * Classpath: `net.minecraft.nbt.NBTBase`
 * Package name: `net.minecraft.nbt`
 */
class NBTBase : public Object {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTBase";
public:
    STATICINITIALIZE;

    NBTBase(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `(B)Lnet.minecraft.nbt.NBTBase;`
     */
    static NBTBase createNewByType(byte arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `()Z`
     */
    bool hasNoTags();

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void write(DataOutput arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V`
     * Throws: `java.io.IOException`
     */
    void read(DataInput arg0, int arg1, NBTSizeTracker arg2);

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `()B`
     */
    byte getId();

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `()Lnet.minecraft.nbt.NBTBase;`
     */
    NBTBase copy();

    /**
     * Declaring class: `net.minecraft.nbt.NBTBase`
     * Signature: `()Ljava.lang.String;`
     */
    String getString();
};


/**
 * Classpath: `net.minecraft.nbt.NBTSizeTracker`
 * Package name: `net.minecraft.nbt`
 */
class NBTSizeTracker : public Object {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTSizeTracker";
public:
    STATICINITIALIZE;

    NBTSizeTracker(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.nbt.NBTSizeTracker`
     * Signature: `(J)V`
     */
    void read(long arg0);
};


/**
 * Classpath: `net.minecraft.nbt.NBTTagList`
 * Package name: `net.minecraft.nbt`
 */
class NBTTagList : public NBTBase {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTTagList";
public:
    STATICINITIALIZE;

    NBTTagList(jobject object) : NBTBase(object) {}


    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(I)Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getCompoundTagAt(int arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getStringTagAt(int arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `()I`
     */
    int getTagType();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(I)Lnet.minecraft.nbt.NBTBase;`
     */
    NBTBase removeTag(int arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `()I`
     */
    int tagCount();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `()Z`
     */
    bool hasNoTags();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(Lnet.minecraft.nbt.NBTBase;)V`
     */
    void appendTag(NBTBase arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(I)Lnet.minecraft.nbt.NBTBase;`
     */
    NBTBase get(int arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(ILnet.minecraft.nbt.NBTBase;)V`
     */
    void set(int arg0, NBTBase arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void write(DataOutput arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V`
     * Throws: `java.io.IOException`
     */
    void read(DataInput arg0, int arg1, NBTSizeTracker arg2);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `()B`
     */
    byte getId();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `()Lnet.minecraft.nbt.NBTBase;`
     */
    NBTBase copy();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(I)F`
     */
    float getFloatAt(int arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagList`
     * Signature: `(I)D`
     */
    double getDoubleAt(int arg0);
};


/**
 * Classpath: `net.minecraft.network.Packet`
 * Package name: `net.minecraft.network`
 */
class Packet : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.network.Packet";
public:
    STATICINITIALIZE;

    Packet(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.world.chunk.IChunkProvider`
 * Package name: `net.minecraft.world.chunk`
 */
class IChunkProvider : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.chunk.IChunkProvider";
public:
    STATICINITIALIZE;

    IChunkProvider(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Lnet.minecraft.world.chunk.storage.ExtendedBlockStorage;`
 */
class ExtendedBlockStorage_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.world.chunk.storage.ExtendedBlockStorage;";
public:
    STATICINITIALIZE;

    ExtendedBlockStorage_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.world.chunk.Chunk$EnumCreateEntityType`
 * Enclosing class: `net.minecraft.world.chunk.Chunk`
 * Package name: `net.minecraft.world.chunk`
 */
class Chunk_EnumCreateEntityType : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.chunk.Chunk$EnumCreateEntityType";
public:
    STATICINITIALIZE;

    Chunk_EnumCreateEntityType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.world.chunk.Chunk$EnumCreateEntityType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.chunk.Chunk$EnumCreateEntityType;`
     */
    static Chunk_EnumCreateEntityType valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.biome.WorldChunkManager`
 * Package name: `net.minecraft.world.biome`
 */
class WorldChunkManager : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.WorldChunkManager";
public:
    STATICINITIALIZE;

    WorldChunkManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.biome.WorldChunkManager`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase getBiomeGenerator(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.WorldChunkManager`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.biome.BiomeGenBase;)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase getBiomeGenerator(BlockPos arg0, BiomeGenBase arg1);

    /**
     * Declaring class: `net.minecraft.world.biome.WorldChunkManager`
     * Signature: `()V`
     */
    void cleanupCache();

    /**
     * Declaring class: `net.minecraft.world.biome.WorldChunkManager`
     * Signature: `(FI)F`
     */
    float getTemperatureAtHeight(float arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.biome.WorldChunkManager`
     * Signature: `(IIILjava.util.List;)Z`
     */
    bool areBiomesViable(int arg0, int arg1, int arg2, List arg3);

    /**
     * Declaring class: `net.minecraft.world.biome.WorldChunkManager`
     * Signature: `()Ljava.util.List;`
     */
    List getBiomesToSpawnIn();

    /**
     * Declaring class: `net.minecraft.world.biome.WorldChunkManager`
     * Signature: `(IIILjava.util.List;Ljava.util.Random;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos findBiomePosition(int arg0, int arg1, int arg2, List arg3, Random arg4);
};


/**
 * Classpath: `net.minecraft.world.biome.BiomeGenBase`
 * Package name: `net.minecraft.world.biome`
 */
class BiomeGenBase : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase";
public:
    STATICINITIALIZE;

    BiomeGenBase(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.util.BlockPos;)F`
     */
    float getFloatTemperature(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(F)I`
     */
    int getSkyColorByTemp(float arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Z`
     */
    bool getEnableSnow();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Z`
     */
    bool canSpawnLightningBolt();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Z`
     */
    bool isHighHumidity();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getGrassColorAtPos(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase setBiomeName(String arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase setDisableRain();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(FF)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase setTemperatureRainfall(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(I)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase setFillerBlockMetadata(int arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase setEnableSnow();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(I)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase func_150563_c(int arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase createMutation();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(I)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase createMutatedBiome(int arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Lnet.minecraft.world.biome.BiomeDecorator;`
     */
    BiomeDecorator createBiomeDecorator();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Ljava.util.Random;)Lnet.minecraft.world.gen.feature.WorldGenAbstractTree;`
     */
    WorldGenAbstractTree genBigTreeChance(Random arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Ljava.util.Random;)Lnet.minecraft.world.gen.feature.WorldGenerator;`
     */
    WorldGenerator getRandomWorldGenForGrass(Random arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Ljava.util.Random;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.BlockFlower$EnumFlowerType;`
     */
    BlockFlower_EnumFlowerType pickRandomFlower(Random arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(IZ)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase func_150557_a(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.entity.EnumCreatureType;)Ljava.util.List;`
     */
    List getSpawnableList(EnumCreatureType arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Z`
     */
    bool isSnowyBiome();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()F`
     */
    float getSpawningChance();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()I`
     */
    int getIntRainfall();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()F`
     */
    float getFloatRainfall();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getFoliageColorAtPos(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.world.chunk.ChunkPrimer;IID)V`
     */
    void genTerrainBlocks(World arg0, Random arg1, ChunkPrimer arg2, int arg3, int arg4, double arg5);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.world.chunk.ChunkPrimer;IID)V`
     */
    void generateBiomeTerrain(World arg0, Random arg1, ChunkPrimer arg2, int arg3, int arg4, double arg5);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getBiomeClass();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `()Lnet.minecraft.world.biome.BiomeGenBase$TempCategory;`
     */
    BiomeGenBase_TempCategory getTempCategory();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(ILnet.minecraft.world.biome.BiomeGenBase;)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    static BiomeGenBase getBiomeFromBiomeList(int arg0, BiomeGenBase arg1);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.world.biome.BiomeGenBase$Height;)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase setHeight(BiomeGenBase_Height arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.util.BlockPos;)V`
     */
    void decorate(World arg0, Random arg1, BlockPos arg2);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(I)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    static BiomeGenBase getBiome(int arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(I)Lnet.minecraft.world.biome.BiomeGenBase;`
     */
    BiomeGenBase setColor(int arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase`
     * Signature: `(Lnet.minecraft.world.biome.BiomeGenBase;)Z`
     */
    bool isEqualTo(BiomeGenBase arg0);
};


/**
 * Classpath: `net.minecraft.world.biome.BiomeDecorator`
 * Package name: `net.minecraft.world.biome`
 */
class BiomeDecorator : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeDecorator";
public:
    STATICINITIALIZE;

    BiomeDecorator(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.biome.BiomeDecorator`
     * Signature: `(Lnet.minecraft.world.biome.BiomeGenBase;)V`
     */
    void genDecorations(BiomeGenBase arg0);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeDecorator`
     * Signature: `()V`
     */
    void generateOres();

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeDecorator`
     * Signature: `(ILnet.minecraft.world.gen.feature.WorldGenerator;II)V`
     */
    void genStandardOre1(int arg0, WorldGenerator arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeDecorator`
     * Signature: `(ILnet.minecraft.world.gen.feature.WorldGenerator;II)V`
     */
    void genStandardOre2(int arg0, WorldGenerator arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.biome.BiomeDecorator`
     * Signature: `(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.world.biome.BiomeGenBase;Lnet.minecraft.util.BlockPos;)V`
     */
    void decorate(World arg0, Random arg1, BiomeGenBase arg2, BlockPos arg3);
};


/**
 * Classpath: `net.minecraft.world.gen.feature.WorldGenerator`
 * Package name: `net.minecraft.world.gen.feature`
 */
class WorldGenerator : public Object {
protected:
    const inline static char *className = "net.minecraft.world.gen.feature.WorldGenerator";
public:
    STATICINITIALIZE;

    WorldGenerator(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.gen.feature.WorldGenerator`
     * Signature: `()V`
     */
    void func_175904_e();

    /**
     * Declaring class: `net.minecraft.world.gen.feature.WorldGenerator`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V`
     */
    void setBlockAndNotifyAdequately(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.world.gen.feature.WorldGenerator`
     * Signature: `(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool generate(World arg0, Random arg1, BlockPos arg2);
};


/**
 * Classpath: `net.minecraft.world.gen.feature.WorldGenAbstractTree`
 * Package name: `net.minecraft.world.gen.feature`
 */
class WorldGenAbstractTree : public WorldGenerator {
protected:
    const inline static char *className = "net.minecraft.world.gen.feature.WorldGenAbstractTree";
public:
    STATICINITIALIZE;

    WorldGenAbstractTree(jobject object) : WorldGenerator(object) {}


    /**
     * Declaring class: `net.minecraft.world.gen.feature.WorldGenAbstractTree`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool func_150523_a(Block arg0);

    /**
     * Declaring class: `net.minecraft.world.gen.feature.WorldGenAbstractTree`
     * Signature: `(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.util.BlockPos;)V`
     */
    void func_180711_a(World arg0, Random arg1, BlockPos arg2);

    /**
     * Declaring class: `net.minecraft.world.gen.feature.WorldGenAbstractTree`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)V`
     */
    void func_175921_a(World arg0, BlockPos arg1);
};


/**
 * Classpath: `net.minecraft.block.BlockFlower$EnumFlowerType`
 * Enclosing class: `net.minecraft.block.BlockFlower`
 * Package name: `net.minecraft.block`
 */
class BlockFlower_EnumFlowerType : public Enum {
protected:
    const inline static char *className = "net.minecraft.block.BlockFlower$EnumFlowerType";
public:
    STATICINITIALIZE;

    BlockFlower_EnumFlowerType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerType`
     * Signature: `()Ljava.lang.String;`
     */
    String getUnlocalizedName();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerType`
     * Signature: `()Lnet.minecraft.block.BlockFlower$EnumFlowerColor;`
     */
    BlockFlower_EnumFlowerColor getBlockType();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerType`
     * Signature: `()I`
     */
    int getMeta();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerType`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.block.BlockFlower$EnumFlowerType;`
     */
    static BlockFlower_EnumFlowerType valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerType`
     * Signature: `(Lnet.minecraft.block.BlockFlower$EnumFlowerColor;I)Lnet.minecraft.block.BlockFlower$EnumFlowerType;`
     */
    static BlockFlower_EnumFlowerType getType(BlockFlower_EnumFlowerColor arg0, int arg1);
};


/**
 * Classpath: `net.minecraft.block.BlockFlower$EnumFlowerColor`
 * Enclosing class: `net.minecraft.block.BlockFlower`
 * Package name: `net.minecraft.block`
 */
class BlockFlower_EnumFlowerColor : public Enum {
protected:
    const inline static char *className = "net.minecraft.block.BlockFlower$EnumFlowerColor";
public:
    STATICINITIALIZE;

    BlockFlower_EnumFlowerColor(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerColor`
     * Signature: `()Lnet.minecraft.block.BlockFlower;`
     */
    BlockFlower getBlock();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower$EnumFlowerColor`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.block.BlockFlower$EnumFlowerColor;`
     */
    static BlockFlower_EnumFlowerColor valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.block.state.BlockState`
 * Package name: `net.minecraft.block.state`
 */
class BlockState : public Object {
protected:
    const inline static char *className = "net.minecraft.block.state.BlockState";
public:
    STATICINITIALIZE;

    BlockState(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.block.state.BlockState`
     * Signature: `()Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getBaseState();

    /**
     * Declaring class: `net.minecraft.block.state.BlockState`
     * Signature: `()Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList getValidStates();

    /**
     * Declaring class: `net.minecraft.block.state.BlockState`
     * Signature: `()Ljava.util.List;`
     */
    List getAllowedValues();

    /**
     * Declaring class: `net.minecraft.block.state.BlockState`
     * Signature: `()Lnet.minecraft.block.Block;`
     */
    Block getBlock();

    /**
     * Declaring class: `net.minecraft.block.state.BlockState`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.block.state.BlockState`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getProperties();
};


/**
 * Classpath: `com.google.common.collect.UnmodifiableIterator`
 * Package name: `com.google.common.collect`
 */
class UnmodifiableIterator : public Object {
protected:
    const inline static char *className = "com.google.common.collect.UnmodifiableIterator";
public:
    STATICINITIALIZE;

    UnmodifiableIterator(jobject object) : Object(object) {}

};


/**
 * Classpath: `com.google.common.collect.ImmutableCollection$Builder`
 * Enclosing class: `com.google.common.collect.ImmutableCollection`
 * Package name: `com.google.common.collect`
 */
class ImmutableCollection_Builder : public Object {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableCollection$Builder";
public:
    STATICINITIALIZE;

    ImmutableCollection_Builder(jobject object) : Object(object) {}


    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$Builder`
     * Signature: `(II)I`
     */
    static int expandedCapacity(int arg0, int arg1);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$Builder`
     * Signature: `([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;`
     */
    ImmutableCollection_Builder add(Object_interface arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$Builder`
     * Signature: `(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;`
     */
    ImmutableCollection_Builder add(Object arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$Builder`
     * Signature: `(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableCollection$Builder;`
     */
    ImmutableCollection_Builder addAll(Iterator arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$Builder`
     * Signature: `(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection$Builder;`
     */
    ImmutableCollection_Builder addAll(Iterable arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$Builder`
     * Signature: `()Lcom.google.common.collect.ImmutableCollection;`
     */
    ImmutableCollection build();
};


/**
 * Classpath: `java.util.AbstractCollection`
 * Package name: `java.util`
 */
class AbstractCollection : public Object {
protected:
    const inline static char *className = "java.util.AbstractCollection";
public:
    STATICINITIALIZE;

    AbstractCollection(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.AbstractCollection`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `com.google.common.collect.UnmodifiableListIterator`
 * Package name: `com.google.common.collect`
 */
class UnmodifiableListIterator : public UnmodifiableIterator {
protected:
    const inline static char *className = "com.google.common.collect.UnmodifiableListIterator";
public:
    STATICINITIALIZE;

    UnmodifiableListIterator(jobject object) : UnmodifiableIterator(object) {}

};


/**
 * Classpath: `net.minecraft.item.Item`
 * Package name: `net.minecraft.item`
 */
class Item : public Object {
protected:
    const inline static char *className = "net.minecraft.item.Item";
public:
    STATICINITIALIZE;

    Item(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(I)Lnet.minecraft.item.Item;`
     */
    static Item getItemById(int arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.block.Block;)Lnet.minecraft.item.Item;`
     */
    static Item getItemFromBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.item.Item;`
     */
    static Item getByNameOrId(String arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Z`
     */
    bool updateItemStackNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(I)Lnet.minecraft.item.Item;`
     */
    Item setMaxStackSize(int arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack onItemRightClick(ItemStack arg0, World arg1, EntityPlayer arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()I`
     */
    int getItemStackLimit();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Z)Lnet.minecraft.item.Item;`
     */
    Item setHasSubtypes(bool arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()I`
     */
    int getMaxDamage();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(I)Lnet.minecraft.item.Item;`
     */
    Item setMaxDamage(int arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool isDamageable();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool onBlockDestroyed(ItemStack arg0, World arg1, Block arg2, BlockPos arg3, EntityLivingBase arg4);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool itemInteractionForEntity(ItemStack arg0, EntityPlayer arg1, EntityLivingBase arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.item.Item;`
     */
    Item setUnlocalizedName(String arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Ljava.lang.String;`
     */
    String getUnlocalizedName();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;`
     */
    String getUnlocalizedName(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.Item;)Lnet.minecraft.item.Item;`
     */
    Item setContainerItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool getShareTag();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Lnet.minecraft.item.Item;`
     */
    Item getContainerItem();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool hasContainerItem();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;I)I`
     */
    int getColorFromItemStack(ItemStack arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.item.Item;`
     */
    Item setPotionEffect(String arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;`
     */
    String getPotionEffect(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool isPotionIngredient(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.player.EntityPlayer;Ljava.util.List;Z)V`
     */
    void addInformation(ItemStack arg0, EntityPlayer arg1, List arg2, bool arg3);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;`
     */
    String getItemStackDisplayName(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()I`
     */
    int getItemEnchantability();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.Item;Lnet.minecraft.creativetab.CreativeTabs;Ljava.util.List;)V`
     */
    void getSubItems(Item arg0, CreativeTabs arg1, List arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Lnet.minecraft.creativetab.CreativeTabs;`
     */
    CreativeTabs getCreativeTab();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.creativetab.CreativeTabs;)Lnet.minecraft.item.Item;`
     */
    Item setCreativeTab(CreativeTabs arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool canItemEditBlocks();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z`
     */
    bool getIsRepairable(ItemStack arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Lcom.google.common.collect.Multimap;`
     */
    Multimap getItemAttributeModifiers();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()V`
     */
    static void registerItems();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.block.Block;)V`
     */
    static void registerItemBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.block.Block;Lnet.minecraft.item.Item;)V`
     */
    static void registerItemBlock(Block arg0, Item arg1);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(ILjava.lang.String;Lnet.minecraft.item.Item;)V`
     */
    static void registerItem(int arg0, String arg1, Item arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(ILnet.minecraft.util.ResourceLocation;Lnet.minecraft.item.Item;)V`
     */
    static void registerItem(int arg0, ResourceLocation arg1, Item arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int getMaxItemUseDuration(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;I)V`
     */
    void onPlayerStoppedUsing(ItemStack arg0, World arg1, EntityPlayer arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.EnumAction;`
     */
    EnumAction getItemUseAction(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack onItemUseFinish(ItemStack arg0, World arg1, EntityPlayer arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.Item;)I`
     */
    static int getIdFromItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.block.Block;)F`
     */
    float getStrVsBlock(ItemStack arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool canHarvestBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool getHasSubtypes();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(I)I`
     */
    int getMetadata(int arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.EnumRarity;`
     */
    EnumRarity getRarity(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.Entity;IZ)V`
     */
    void onUpdate(ItemStack arg0, World arg1, Entity arg2, int arg3, bool arg4);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool hitEntity(ItemStack arg0, EntityLivingBase arg1, EntityLivingBase arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;FFF)Z`
     */
    bool onItemUse(ItemStack arg0, EntityPlayer arg1, World arg2, BlockPos arg3, EnumFacing arg4, float arg5, float arg6, float arg7);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Lnet.minecraft.item.Item;`
     */
    Item setFull3D();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool isFull3D();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onCreated(ItemStack arg0, World arg1, EntityPlayer arg2);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool isMap();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool hasEffect(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool isItemTool(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `()Z`
     */
    bool shouldRotateAroundWhenRendering();

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;`
     */
    String getUnlocalizedNameInefficiently(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.Item`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;Z)Lnet.minecraft.util.MovingObjectPosition;`
     */
    MovingObjectPosition getMovingObjectPositionFromPlayer(World arg0, EntityPlayer arg1, bool arg2);
};


/**
 * Classpath: `net.minecraft.item.ItemStack`
 * Package name: `net.minecraft.item`
 */
class ItemStack : public Object {
protected:
    const inline static char *className = "net.minecraft.item.ItemStack";
public:
    STATICINITIALIZE;

    ItemStack(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lcom.google.common.collect.Multimap;`
     */
    Multimap getAttributeModifiers();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z`
     */
    static bool areItemStacksEqual(ItemStack arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()I`
     */
    int getMaxDamage();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onBlockDestroyed(World arg0, Block arg1, BlockPos arg2, EntityPlayer arg3);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Ljava.lang.String;`
     */
    String getUnlocalizedName();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool isItemEnchanted();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getTagCompound();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()I`
     */
    int getMaxStackSize();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getChatComponent();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool isItemDamaged();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()I`
     */
    int getItemDamage();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool getIsItemStackEqual(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.Entity;IZ)V`
     */
    void updateAnimation(World arg0, Entity arg1, int arg2, bool arg3);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack useItemRightClick(World arg0, EntityPlayer arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool isStackable();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool isItemStackDamageable();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool hasTagCompound();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(I)V`
     */
    void setItemDamage(int arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(ILjava.util.Random;)Z`
     */
    bool attemptDamageItem(int arg0, Random arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z`
     */
    static bool areItemStackTagsEqual(ItemStack arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool isItemStackEqual(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z`
     */
    static bool areItemsEqual(ItemStack arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool isItemEqual(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.ItemStack;`
     */
    static ItemStack copyItemStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Ljava.lang.String;Z)Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getSubCompound(String arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList getEnchantmentTagList();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack setStackDisplayName(String arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()V`
     */
    void clearCustomName();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool isItemEnchantable();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.enchantment.Enchantment;I)V`
     */
    void addEnchantment(Enchantment arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool isOnItemFrame();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.entity.item.EntityItemFrame;)V`
     */
    void setItemFrame(EntityItemFrame arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.entity.item.EntityItemFrame;`
     */
    EntityItemFrame getItemFrame();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()I`
     */
    int getRepairCost();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(I)V`
     */
    void setRepairCost(int arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()I`
     */
    int getMaxItemUseDuration();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;I)V`
     */
    void onPlayerStoppedUsing(World arg0, EntityPlayer arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.item.EnumAction;`
     */
    EnumAction getItemUseAction();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack onItemUseFinish(World arg0, EntityPlayer arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.block.Block;)F`
     */
    float getStrVsBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool canHarvestBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool interactWithEntity(EntityPlayer arg0, EntityLivingBase arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool canEditBlocks();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool hasDisplayName();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool getHasSubtypes();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()I`
     */
    int getMetadata();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void setTagCompound(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.item.ItemStack;`
     */
    static ItemStack loadItemStackFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Z)Ljava.util.List;`
     */
    List getTooltip(EntityPlayer arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.item.EnumRarity;`
     */
    EnumRarity getRarity();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void hitEntity(EntityLivingBase arg0, EntityPlayer arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool canPlaceOn(Block arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(ILnet.minecraft.entity.EntityLivingBase;)V`
     */
    void damageItem(int arg0, EntityLivingBase arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack splitStack(int arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;I)V`
     */
    void onCrafting(World arg0, EntityPlayer arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.item.Item;)V`
     */
    void setItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool canDestroy(Block arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;FFF)Z`
     */
    bool onItemUse(EntityPlayer arg0, World arg1, BlockPos arg2, EnumFacing arg3, float arg4, float arg5, float arg6);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Z`
     */
    bool hasEffect();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound writeToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.nbt.NBTBase;)V`
     */
    void setTagInfo(String arg0, NBTBase arg1);

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack copy();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Lnet.minecraft.item.Item;`
     */
    Item getItem();

    /**
     * Declaring class: `net.minecraft.item.ItemStack`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayName();
};


/**
 * Classpath: `com.google.common.collect.Multimap`
 * Package name: `com.google.common.collect`
 */
class Multimap : public JavaObject {
protected:
    const inline static char *className = "com.google.common.collect.Multimap";
public:
    STATICINITIALIZE;

    Multimap(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.util.DamageSource`
 * Package name: `net.minecraft.util`
 */
class DamageSource : public Object {
protected:
    const inline static char *className = "net.minecraft.util.DamageSource";
public:
    STATICINITIALIZE;

    DamageSource(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isFireDamage();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isDamageAbsolute();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setFireDamage();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setDamageBypassesArmor();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setDamageIsAbsolute();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setMagicDamage();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource causeMobDamage(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.projectile.EntityArrow;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource causeArrowDamage(EntityArrow arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setProjectile();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.projectile.EntityFireball;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource causeFireballDamage(EntityFireball arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource causeThrownDamage(Entity arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource causeIndirectMagicDamage(Entity arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource causeThornsDamage(Entity arg0);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.world.Explosion;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource setExplosionSource(Explosion arg0);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setDifficultyScaled();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setExplosion();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isProjectile();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.entity.Entity;`
     */
    Entity getSourceOfDamage();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getDeathMessage(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Ljava.lang.String;`
     */
    String getDamageType();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isMagicDamage();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isExplosion();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool canHarmInCreative();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isDifficultyScaled();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isUnblockable();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()F`
     */
    float getHungerDamage();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.util.DamageSource;`
     */
    static DamageSource causePlayerDamage(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Z`
     */
    bool isCreativePlayer();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.entity.Entity;`
     */
    Entity getEntity();

    /**
     * Declaring class: `net.minecraft.util.DamageSource`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource setDamageAllowedInCreativeMode();
};


/**
 * Classpath: `net.minecraft.potion.PotionEffect`
 * Package name: `net.minecraft.potion`
 */
class PotionEffect : public Object {
protected:
    const inline static char *className = "net.minecraft.potion.PotionEffect";
public:
    STATICINITIALIZE;

    PotionEffect(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()I`
     */
    int getPotionID();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()I`
     */
    int getDuration();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Z)V`
     */
    void setPotionDurationMax(bool arg0);

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Z)V`
     */
    void setSplashPotion(bool arg0);

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()Z`
     */
    bool getIsAmbient();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()Z`
     */
    bool getIsShowParticles();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)V`
     */
    void performEffect(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()I`
     */
    int deincrementDuration();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()Ljava.lang.String;`
     */
    String getEffectName();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()Z`
     */
    bool getIsPotionDurationMax();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()I`
     */
    int getAmplifier();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool onUpdate(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound writeCustomPotionEffectToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.potion.PotionEffect;`
     */
    static PotionEffect readCustomPotionEffectFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.potion.PotionEffect`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)V`
     */
    void combine(PotionEffect arg0);
};


/**
 * Classpath: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
 * Package name: `net.minecraft.entity.ai.attributes`
 */
class BaseAttributeMap : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.BaseAttributeMap";
public:
    STATICINITIALIZE;

    BaseAttributeMap(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `(Lcom.google.common.collect.Multimap;)V`
     */
    void removeAttributeModifiers(Multimap arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `(Lcom.google.common.collect.Multimap;)V`
     */
    void applyAttributeModifiers(Multimap arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;`
     */
    IAttributeInstance getAttributeInstance(IAttribute arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;`
     */
    IAttributeInstance getAttributeInstanceByName(String arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;`
     */
    IAttributeInstance func_180376_c(IAttribute arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getAllAttributes();

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `(Lnet.minecraft.entity.ai.attributes.IAttributeInstance;)V`
     */
    void func_180794_a(IAttributeInstance arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.BaseAttributeMap`
     * Signature: `(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;`
     */
    IAttributeInstance registerAttribute(IAttribute arg0);
};


/**
 * Classpath: `net.minecraft.entity.ai.attributes.IAttribute`
 * Package name: `net.minecraft.entity.ai.attributes`
 */
class IAttribute : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.IAttribute";
public:
    STATICINITIALIZE;

    IAttribute(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.entity.ai.attributes.IAttributeInstance`
 * Package name: `net.minecraft.entity.ai.attributes`
 */
class IAttributeInstance : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.IAttributeInstance";
public:
    STATICINITIALIZE;

    IAttributeInstance(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.potion.Potion`
 * Package name: `net.minecraft.potion`
 */
class Potion : public Object {
protected:
    const inline static char *className = "net.minecraft.potion.Potion";
public:
    STATICINITIALIZE;

    Potion(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()Z`
     */
    bool hasStatusIcon();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()I`
     */
    int getStatusIconIndex();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)Ljava.lang.String;`
     */
    static String getDurationString(PotionEffect arg0);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;I)V`
     */
    void performEffect(EntityLivingBase arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()Z`
     */
    bool isBadEffect();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.potion.Potion;`
     */
    Potion setPotionName(String arg0);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(II)Lnet.minecraft.potion.Potion;`
     */
    Potion setIconIndex(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(D)Lnet.minecraft.potion.Potion;`
     */
    Potion setEffectiveness(double arg0);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()Ljava.util.Set;`
     */
    static Set func_181168_c();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.EntityLivingBase;ID)V`
     */
    void affectEntity(Entity arg0, Entity arg1, EntityLivingBase arg2, int arg3, double arg4);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()D`
     */
    double getEffectiveness();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()I`
     */
    int getLiquidColor();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()Ljava.util.Map;`
     */
    Map getAttributeModifierMap();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(ILnet.minecraft.entity.ai.attributes.AttributeModifier;)D`
     */
    double getAttributeModifierAmount(int arg0, AttributeModifier arg1);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(II)Z`
     */
    bool isReady(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()Z`
     */
    bool isUsable();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()Z`
     */
    bool isInstant();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.potion.Potion;`
     */
    static Potion getPotionFromResourceLocation(String arg0);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.ai.attributes.BaseAttributeMap;I)V`
     */
    void applyAttributesModifiersToEntity(EntityLivingBase arg0, BaseAttributeMap arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.ai.attributes.BaseAttributeMap;I)V`
     */
    void removeAttributesModifiersFromEntity(EntityLivingBase arg0, BaseAttributeMap arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `(Lnet.minecraft.entity.ai.attributes.IAttribute;Ljava.lang.String;DI)Lnet.minecraft.potion.Potion;`
     */
    Potion registerPotionAttributeModifier(IAttribute arg0, String arg1, double arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `net.minecraft.potion.Potion`
     * Signature: `()I`
     */
    int getId();
};


/**
 * Classpath: `net.minecraft.entity.ai.attributes.AttributeModifier`
 * Package name: `net.minecraft.entity.ai.attributes`
 */
class AttributeModifier : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.AttributeModifier";
public:
    STATICINITIALIZE;

    AttributeModifier(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `()I`
     */
    int getOperation();

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `()Z`
     */
    bool isSaved();

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `(Z)Lnet.minecraft.entity.ai.attributes.AttributeModifier;`
     */
    AttributeModifier setSaved(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `()D`
     */
    double getAmount();

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.entity.ai.attributes.AttributeModifier`
     * Signature: `()Ljava.util.UUID;`
     */
    UUID getID();
};


/**
 * Classpath: `java.util.UUID`
 * Package name: `java.util`
 */
class UUID : public Object {
protected:
    const inline static char *className = "java.util.UUID";
public:
    STATICINITIALIZE;

    UUID(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.UUID`
     * Signature: `([B)Ljava.util.UUID;`
     */
    static UUID nameUUIDFromBytes(arr_B arg0);

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()J`
     */
    long getMostSignificantBits();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()J`
     */
    long getLeastSignificantBits();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()Ljava.util.UUID;`
     */
    static UUID randomUUID();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `(Ljava.lang.String;)Ljava.util.UUID;`
     */
    static UUID fromString(String arg0);

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()I`
     */
    int version();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()J`
     */
    long timestamp();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()J`
     */
    long node();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()I`
     */
    int variant();

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `(Ljava.lang.String;I)J`
     */
    static long parse4Nibbles(String arg0, int arg1);

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `(Ljava.lang.String;)Ljava.util.UUID;`
     */
    static UUID fromString1(String arg0);

    /**
     * Declaring class: `java.util.UUID`
     * Signature: `()I`
     */
    int clockSequence();
};


/**
 * Classpath: `net.minecraft.util.CombatTracker`
 * Package name: `net.minecraft.util`
 */
class CombatTracker : public Object {
protected:
    const inline static char *className = "net.minecraft.util.CombatTracker";
public:
    STATICINITIALIZE;

    CombatTracker(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase func_94550_c();

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getDeathMessage();

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()V`
     */
    void func_94545_a();

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()V`
     */
    void func_94542_g();

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()Lnet.minecraft.util.CombatEntry;`
     */
    CombatEntry func_94544_f();

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `(Lnet.minecraft.util.CombatEntry;)Ljava.lang.String;`
     */
    String func_94548_b(CombatEntry arg0);

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()I`
     */
    int func_180134_f();

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `(Lnet.minecraft.util.DamageSource;FF)V`
     */
    void trackDamage(DamageSource arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase getFighter();

    /**
     * Declaring class: `net.minecraft.util.CombatTracker`
     * Signature: `()V`
     */
    void reset();
};


/**
 * Classpath: `net.minecraft.util.IChatComponent`
 * Package name: `net.minecraft.util`
 */
class IChatComponent : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.util.IChatComponent";
public:
    STATICINITIALIZE;

    IChatComponent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.util.CombatEntry`
 * Package name: `net.minecraft.util`
 */
class CombatEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.util.CombatEntry";
public:
    STATICINITIALIZE;

    CombatEntry(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.CombatEntry`
     * Signature: `()F`
     */
    float getDamageAmount();

    /**
     * Declaring class: `net.minecraft.util.CombatEntry`
     * Signature: `()Z`
     */
    bool isLivingDamageSrc();

    /**
     * Declaring class: `net.minecraft.util.CombatEntry`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getDamageSrcDisplayName();

    /**
     * Declaring class: `net.minecraft.util.CombatEntry`
     * Signature: `()Lnet.minecraft.util.DamageSource;`
     */
    DamageSource getDamageSrc();

    /**
     * Declaring class: `net.minecraft.util.CombatEntry`
     * Signature: `()F`
     */
    float func_94563_c();

    /**
     * Declaring class: `net.minecraft.util.CombatEntry`
     * Signature: `()Ljava.lang.String;`
     */
    String func_94562_g();
};


/**
 * Classpath: `net.minecraft.entity.EnumCreatureAttribute`
 * Package name: `net.minecraft.entity`
 */
class EnumCreatureAttribute : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.EnumCreatureAttribute";
public:
    STATICINITIALIZE;

    EnumCreatureAttribute(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EnumCreatureAttribute`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.EnumCreatureAttribute;`
     */
    static EnumCreatureAttribute valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.scoreboard.Team`
 * Package name: `net.minecraft.scoreboard`
 */
class Team : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Team";
public:
    STATICINITIALIZE;

    Team(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `()Lnet.minecraft.scoreboard.Team$EnumVisible;`
     */
    Team_EnumVisible getDeathMessageVisibility();

    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String formatString(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `()Ljava.lang.String;`
     */
    String getRegisteredName();

    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getMembershipCollection();

    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `()Lnet.minecraft.scoreboard.Team$EnumVisible;`
     */
    Team_EnumVisible getNameTagVisibility();

    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `()Z`
     */
    bool getAllowFriendlyFire();

    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `(Lnet.minecraft.scoreboard.Team;)Z`
     */
    bool isSameTeam(Team arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Team`
     * Signature: `()Z`
     */
    bool getSeeFriendlyInvisiblesEnabled();
};


/**
 * Classpath: `net.minecraft.scoreboard.Team$EnumVisible`
 * Enclosing class: `net.minecraft.scoreboard.Team`
 * Package name: `net.minecraft.scoreboard`
 */
class Team_EnumVisible : public Enum {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Team$EnumVisible";
public:
    STATICINITIALIZE;

    Team_EnumVisible(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.Team$EnumVisible`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.Team$EnumVisible;`
     */
    static Team_EnumVisible func_178824_a(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Team$EnumVisible`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.Team$EnumVisible;`
     */
    static Team_EnumVisible valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.Explosion`
 * Package name: `net.minecraft.world`
 */
class Explosion : public Object {
protected:
    const inline static char *className = "net.minecraft.world.Explosion";
public:
    STATICINITIALIZE;

    Explosion(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.Explosion`
     * Signature: `()V`
     */
    void doExplosionA();

    /**
     * Declaring class: `net.minecraft.world.Explosion`
     * Signature: `()Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase getExplosivePlacedBy();

    /**
     * Declaring class: `net.minecraft.world.Explosion`
     * Signature: `()Ljava.util.List;`
     */
    List getAffectedBlockPositions();

    /**
     * Declaring class: `net.minecraft.world.Explosion`
     * Signature: `()V`
     */
    void func_180342_d();

    /**
     * Declaring class: `net.minecraft.world.Explosion`
     * Signature: `()Ljava.util.Map;`
     */
    Map getPlayerKnockbackMap();

    /**
     * Declaring class: `net.minecraft.world.Explosion`
     * Signature: `(Z)V`
     */
    void doExplosionB(bool arg0);
};


/**
 * Classpath: `net.minecraft.stats.StatBase`
 * Package name: `net.minecraft.stats`
 */
class StatBase : public Object {
protected:
    const inline static char *className = "net.minecraft.stats.StatBase";
public:
    STATICINITIALIZE;

    StatBase(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Lnet.minecraft.stats.StatBase;`
     */
    StatBase initIndependentStat();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Lnet.minecraft.stats.StatBase;`
     */
    StatBase registerStat();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent func_150955_j();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Ljava.lang.Class;`
     */
    Class func_150954_l();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `(Ljava.lang.Class;)Lnet.minecraft.stats.StatBase;`
     */
    StatBase func_150953_b(Class arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;`
     */
    IScoreObjectiveCriteria func_150952_k();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getStatName();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Z`
     */
    bool isAchievement();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.stats.StatBase`
     * Signature: `(I)Ljava.lang.String;`
     */
    String format(int arg0);
};


/**
 * Classpath: `net.minecraft.scoreboard.IScoreObjectiveCriteria`
 * Package name: `net.minecraft.scoreboard`
 */
class IScoreObjectiveCriteria : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.scoreboard.IScoreObjectiveCriteria";
public:
    STATICINITIALIZE;

    IScoreObjectiveCriteria(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.scoreboard.Scoreboard`
 * Package name: `net.minecraft.scoreboard`
 */
class Scoreboard : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Scoreboard";
public:
    STATICINITIALIZE;

    Scoreboard(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)Z`
     */
    bool entityHasObjective(String arg0, ScoreObjective arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;)Lnet.minecraft.scoreboard.ScoreObjective;`
     */
    ScoreObjective addScoreObjective(String arg0, IScoreObjectiveCriteria arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScoreObjective;`
     */
    ScoreObjective getObjective(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void removeObjective(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void removeObjectiveFromEntity(String arg0, ScoreObjective arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(ILnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void setObjectiveInDisplaySlot(int arg0, ScoreObjective arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Z`
     */
    bool addPlayerToTeam(String arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void removePlayerFromTeam(String arg0, ScorePlayerTeam arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void onScoreObjectiveAdded(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)Ljava.util.Collection;`
     */
    Collection getSortedScores(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getScoreObjectives();

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getObjectiveNames();

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)V`
     */
    void func_96516_a(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void func_178820_a(String arg0, ScoreObjective arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)Ljava.util.Map;`
     */
    Map getObjectivesForEntity(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(I)Lnet.minecraft.scoreboard.ScoreObjective;`
     */
    ScoreObjective getObjectiveInDisplaySlot(int arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void func_96533_c(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void broadcastTeamCreated(ScorePlayerTeam arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void func_96513_c(ScorePlayerTeam arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool removePlayerFromTeams(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getTeamNames();

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void func_96532_b(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.Score;)V`
     */
    void func_96536_a(Score arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void sendTeamUpdate(ScorePlayerTeam arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getObjectiveDisplaySlot(int arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void func_181140_a(Entity arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;)Ljava.util.Collection;`
     */
    Collection getObjectivesFromCriteria(IScoreObjectiveCriteria arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)Lnet.minecraft.scoreboard.Score;`
     */
    Score getValueFromObjective(String arg0, ScoreObjective arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScorePlayerTeam;`
     */
    ScorePlayerTeam getPlayersTeam(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getScores();

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getTeams();

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScorePlayerTeam;`
     */
    ScorePlayerTeam getTeam(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScorePlayerTeam;`
     */
    ScorePlayerTeam createTeam(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void removeTeam(ScorePlayerTeam arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Scoreboard`
     * Signature: `(Ljava.lang.String;)I`
     */
    static int getObjectiveDisplaySlotNumber(String arg0);
};


/**
 * Classpath: `net.minecraft.scoreboard.ScoreObjective`
 * Package name: `net.minecraft.scoreboard`
 */
class ScoreObjective : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ScoreObjective";
public:
    STATICINITIALIZE;

    ScoreObjective(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreObjective`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setDisplayName(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreObjective`
     * Signature: `(Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;)V`
     */
    void setRenderType(IScoreObjectiveCriteria_EnumRenderType arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreObjective`
     * Signature: `()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;`
     */
    IScoreObjectiveCriteria getCriteria();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreObjective`
     * Signature: `()Lnet.minecraft.scoreboard.Scoreboard;`
     */
    Scoreboard getScoreboard();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreObjective`
     * Signature: `()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;`
     */
    IScoreObjectiveCriteria_EnumRenderType getRenderType();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreObjective`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreObjective`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayName();
};


/**
 * Classpath: `net.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType`
 * Enclosing class: `net.minecraft.scoreboard.IScoreObjectiveCriteria`
 * Package name: `net.minecraft.scoreboard`
 */
class IScoreObjectiveCriteria_EnumRenderType : public Enum {
protected:
    const inline static char *className = "net.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType";
public:
    STATICINITIALIZE;

    IScoreObjectiveCriteria_EnumRenderType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType`
     * Signature: `()Ljava.lang.String;`
     */
    String func_178796_a();

    /**
     * Declaring class: `net.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;`
     */
    static IScoreObjectiveCriteria_EnumRenderType func_178795_a(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;`
     */
    static IScoreObjectiveCriteria_EnumRenderType valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.scoreboard.ScorePlayerTeam`
 * Package name: `net.minecraft.scoreboard`
 */
class ScorePlayerTeam : public Team {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ScorePlayerTeam";
public:
    STATICINITIALIZE;

    ScorePlayerTeam(jobject object) : Team(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Lnet.minecraft.scoreboard.Team$EnumVisible;`
     */
    Team_EnumVisible getDeathMessageVisibility();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String formatString(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setTeamName(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setNamePrefix(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setNameSuffix(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Lnet.minecraft.util.EnumChatFormatting;)V`
     */
    void setChatFormat(EnumChatFormatting arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(I)V`
     */
    void func_98298_a(int arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Lnet.minecraft.scoreboard.Team$EnumVisible;)V`
     */
    void setNameTagVisibility(Team_EnumVisible arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Ljava.lang.String;`
     */
    String getRegisteredName();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getMembershipCollection();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Lnet.minecraft.scoreboard.Team$EnumVisible;`
     */
    Team_EnumVisible getNameTagVisibility();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Ljava.lang.String;`
     */
    String getTeamName();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Ljava.lang.String;`
     */
    String getColorPrefix();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Ljava.lang.String;`
     */
    String getColorSuffix();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Z)V`
     */
    void setAllowFriendlyFire(bool arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Lnet.minecraft.scoreboard.Team$EnumVisible;)V`
     */
    void setDeathMessageVisibility(Team_EnumVisible arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()I`
     */
    int func_98299_i();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Lnet.minecraft.util.EnumChatFormatting;`
     */
    EnumChatFormatting getChatFormat();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Z`
     */
    bool getAllowFriendlyFire();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Lnet.minecraft.scoreboard.Team;Ljava.lang.String;)Ljava.lang.String;`
     */
    static String formatPlayerName(Team arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `()Z`
     */
    bool getSeeFriendlyInvisiblesEnabled();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScorePlayerTeam`
     * Signature: `(Z)V`
     */
    void setSeeFriendlyInvisiblesEnabled(bool arg0);
};


/**
 * Classpath: `net.minecraft.util.EnumChatFormatting`
 * Package name: `net.minecraft.util`
 */
class EnumChatFormatting : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumChatFormatting";
public:
    STATICINITIALIZE;

    EnumChatFormatting(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `(I)Lnet.minecraft.util.EnumChatFormatting;`
     */
    static EnumChatFormatting func_175744_a(int arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `()Ljava.lang.String;`
     */
    String getFriendlyName();

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumChatFormatting;`
     */
    static EnumChatFormatting getValueByName(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String func_175745_c(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `()Z`
     */
    bool isFancyStyling();

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `(ZZ)Ljava.util.Collection;`
     */
    static Collection getValidValues(bool arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `()I`
     */
    int getColorIndex();

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `()Z`
     */
    bool isColor();

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String getTextWithoutFormattingCodes(String arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.EnumChatFormatting`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumChatFormatting;`
     */
    static EnumChatFormatting valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.scoreboard.Score`
 * Package name: `net.minecraft.scoreboard`
 */
class Score : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Score";
public:
    STATICINITIALIZE;

    Score(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `(Ljava.util.List;)V`
     */
    void func_96651_a(List arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `()Lnet.minecraft.scoreboard.ScoreObjective;`
     */
    ScoreObjective getObjective();

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `()Ljava.lang.String;`
     */
    String getPlayerName();

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `(I)V`
     */
    void setScorePoints(int arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `(I)V`
     */
    void increseScore(int arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `()I`
     */
    int getScorePoints();

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `(I)V`
     */
    void decreaseScore(int arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `()Lnet.minecraft.scoreboard.Scoreboard;`
     */
    Scoreboard getScoreScoreboard();

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `()V`
     */
    void func_96648_a();

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `(Z)V`
     */
    void setLocked(bool arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.Score`
     * Signature: `()Z`
     */
    bool isLocked();
};


/**
 * Classpath: `net.minecraft.tileentity.TileEntitySign`
 * Package name: `net.minecraft.tileentity`
 */
class TileEntitySign : public TileEntity {
protected:
    const inline static char *className = "net.minecraft.tileentity.TileEntitySign";
public:
    STATICINITIALIZE;

    TileEntitySign(jobject object) : TileEntity(object) {}


    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `()Lnet.minecraft.network.Packet;`
     */
    Packet getDescriptionPacket();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `()Z`
     */
    bool func_183000_F();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `()Z`
     */
    bool getIsEditable();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `(Z)V`
     */
    void setEditable(bool arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool executeCommand(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `()Lnet.minecraft.command.CommandResultStats;`
     */
    CommandResultStats getStats();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void setPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `()Lnet.minecraft.entity.player.EntityPlayer;`
     */
    EntityPlayer getPlayer();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntitySign`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeToNBT(NBTTagCompound arg0);
};


/**
 * Classpath: `net.minecraft.command.CommandResultStats`
 * Package name: `net.minecraft.command`
 */
class CommandResultStats : public Object {
protected:
    const inline static char *className = "net.minecraft.command.CommandResultStats";
public:
    STATICINITIALIZE;

    CommandResultStats(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.command.CommandResultStats`
     * Signature: `(Lnet.minecraft.command.CommandResultStats;Lnet.minecraft.command.CommandResultStats$Type;Ljava.lang.String;Ljava.lang.String;)V`
     */
    static void func_179667_a(CommandResultStats arg0, CommandResultStats_Type arg1, String arg2, String arg3);

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats`
     * Signature: `(Lnet.minecraft.command.CommandResultStats;Lnet.minecraft.command.CommandResultStats$Type;)V`
     */
    static void func_179669_a(CommandResultStats arg0, CommandResultStats_Type arg1);

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeStatsToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readStatsFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats`
     * Signature: `(Lnet.minecraft.command.ICommandSender;Lnet.minecraft.command.CommandResultStats$Type;I)V`
     */
    void func_179672_a(ICommandSender arg0, CommandResultStats_Type arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats`
     * Signature: `(Lnet.minecraft.command.CommandResultStats;)V`
     */
    void func_179671_a(CommandResultStats arg0);
};


/**
 * Classpath: `net.minecraft.command.CommandResultStats$Type`
 * Enclosing class: `net.minecraft.command.CommandResultStats`
 * Package name: `net.minecraft.command`
 */
class CommandResultStats_Type : public Enum {
protected:
    const inline static char *className = "net.minecraft.command.CommandResultStats$Type";
public:
    STATICINITIALIZE;

    CommandResultStats_Type(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.command.CommandResultStats$Type`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.command.CommandResultStats$Type;`
     */
    static CommandResultStats_Type getTypeByName(String arg0);

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats$Type`
     * Signature: `()I`
     */
    int getTypeID();

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats$Type`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.command.CommandResultStats$Type;`
     */
    static CommandResultStats_Type valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.command.CommandResultStats$Type`
     * Signature: `()Ljava.lang.String;`
     */
    String getTypeName();
};


/**
 * Classpath: `net.minecraft.command.ICommandSender`
 * Package name: `net.minecraft.command`
 */
class ICommandSender : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.command.ICommandSender";
public:
    STATICINITIALIZE;

    ICommandSender(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.command.server.CommandBlockLogic`
 * Package name: `net.minecraft.command.server`
 */
class CommandBlockLogic : public Object {
protected:
    const inline static char *className = "net.minecraft.command.server.CommandBlockLogic";
public:
    STATICINITIALIZE;

    CommandBlockLogic(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `()I`
     */
    int getSuccessCount();

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getLastOutput();

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeDataToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readDataFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `()V`
     */
    void updateCommand();

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `()I`
     */
    int func_145751_f();

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Lio.netty.buffer.ByteBuf;)V`
     */
    void func_145757_a(ByteBuf arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void setLastOutput(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Z)V`
     */
    void setTrackOutput(bool arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `()Z`
     */
    bool shouldTrackOutput();

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool tryOpenEditCommandBlock(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `()Lnet.minecraft.command.CommandResultStats;`
     */
    CommandResultStats getCommandResultStats();

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setCommand(String arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `()Ljava.lang.String;`
     */
    String getCommand();

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Lnet.minecraft.world.World;)V`
     */
    void trigger(World arg0);

    /**
     * Declaring class: `net.minecraft.command.server.CommandBlockLogic`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setName(String arg0);
};


/**
 * Classpath: `io.netty.buffer.ByteBuf`
 * Package name: `io.netty.buffer`
 */
class ByteBuf : public Object {
protected:
    const inline static char *className = "io.netty.buffer.ByteBuf";
public:
    STATICINITIALIZE;

    ByteBuf(jobject object) : Object(object) {}


    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int maxCapacity();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int readerIndex();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readerIndex(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writerIndex(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int writerIndex();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int readableBytes();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int writableBytes();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int maxWritableBytes();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf markReaderIndex();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf resetReaderIndex();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf markWriterIndex();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf resetWriterIndex();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf discardReadBytes();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf discardSomeReadBytes();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IZ)I`
     */
    int ensureWritable(int arg0, bool arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf ensureWritable(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)S`
     */
    short getUnsignedByte(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)I`
     */
    int getUnsignedShort(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)I`
     */
    int getUnsignedMedium(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)J`
     */
    long getUnsignedInt(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int readUnsignedMedium();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()J`
     */
    long readUnsignedInt();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeMedium(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(B)I`
     */
    int bytesBefore(byte arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IB)I`
     */
    int bytesBefore(int arg0, byte arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IIB)I`
     */
    int bytesBefore(int arg0, int arg1, byte arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByte(ByteBufProcessor arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IILio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByte(int arg0, int arg1, ByteBufProcessor arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IILio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByteDesc(ByteBufProcessor arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int nioBufferCount();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer internalNioBuffer(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Z`
     */
    bool hasMemoryAddress();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()J`
     */
    long memoryAddress();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBufAllocator;`
     */
    ByteBufAllocator alloc();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)I`
     */
    int getMedium(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setMedium(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I[B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, arr_B arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuf arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuffer arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILjava.io.InputStream;I)I`
     * Throws: `java.io.IOException`
     */
    int setBytes(int arg0, InputStream arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILjava.nio.channels.ScatteringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int setBytes(int arg0, ScatteringByteChannel arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I[BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setZero(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int readMedium();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readSlice(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeZero(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer nioBuffer(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer nioBuffer();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf retain(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf retain();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.nio.charset.Charset;)Ljava.lang.String;`
     */
    String toString(Charset arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IILjava.nio.charset.Charset;)Ljava.lang.String;`
     */
    String toString(int arg0, int arg1, Charset arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IIB)I`
     */
    int indexOf(int arg0, int arg1, byte arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Z`
     */
    bool getBoolean(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)B`
     */
    byte getByte(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)S`
     */
    short getShort(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)C`
     */
    char getChar(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)I`
     */
    int getInt(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)J`
     */
    long getLong(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)F`
     */
    float getFloat(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)D`
     */
    double getDouble(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf clear();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuf arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILjava.nio.channels.GatheringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int getBytes(int arg0, GatheringByteChannel arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I[B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, arr_B arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILjava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;`
     * Throws: `java.io.IOException`
     */
    ByteBuf getBytes(int arg0, OutputStream arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I[BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuffer arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeInt(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int readInt();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IZ)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBoolean(int arg0, bool arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setByte(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setChar(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setShort(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setInt(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IJ)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setLong(int arg0, long arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(IF)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setFloat(int arg0, float arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(ID)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setDouble(int arg0, double arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf copy();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf copy(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf unwrap();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf capacity(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int capacity();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf slice();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf slice(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf duplicate();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.nio.ByteOrder;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf order(ByteOrder arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;`
     * Throws: `java.io.IOException`
     */
    ByteBuf readBytes(OutputStream arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `([B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(arr_B arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `([BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuffer arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.nio.channels.GatheringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int readBytes(GatheringByteChannel arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuf arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuf arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `([B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(arr_B arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuf arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuf arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.nio.channels.ScatteringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int writeBytes(ScatteringByteChannel arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.io.InputStream;I)I`
     * Throws: `java.io.IOException`
     */
    int writeBytes(InputStream arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuffer arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `([BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()I`
     */
    int readUnsignedShort();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()J`
     */
    long readLong();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()B`
     */
    byte readByte();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeChar(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()C`
     */
    char readChar();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()S`
     */
    short readShort();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setIndex(int arg0, int arg1);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(F)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeFloat(float arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()F`
     */
    float readFloat();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Z`
     */
    bool isReadable();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Z`
     */
    bool isReadable(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Z`
     */
    bool isWritable();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Z`
     */
    bool isWritable(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(J)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeLong(long arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf skipBytes(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()Z`
     */
    bool readBoolean();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()S`
     */
    short readUnsignedByte();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `()D`
     */
    double readDouble();

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(Z)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBoolean(bool arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeByte(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeShort(int arg0);

    /**
     * Declaring class: `io.netty.buffer.ByteBuf`
     * Signature: `(D)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeDouble(double arg0);
};


/**
 * Classpath: `io.netty.buffer.ByteBufProcessor`
 * Package name: `io.netty.buffer`
 */
class ByteBufProcessor : public JavaObject {
protected:
    const inline static char *className = "io.netty.buffer.ByteBufProcessor";
public:
    STATICINITIALIZE;

    ByteBufProcessor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `io.netty.buffer.ByteBufAllocator`
 * Package name: `io.netty.buffer`
 */
class ByteBufAllocator : public JavaObject {
protected:
    const inline static char *className = "io.netty.buffer.ByteBufAllocator";
public:
    STATICINITIALIZE;

    ByteBufAllocator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.nio.channels.ScatteringByteChannel`
 * Package name: `java.nio.channels`
 */
class ScatteringByteChannel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.ScatteringByteChannel";
public:
    STATICINITIALIZE;

    ScatteringByteChannel(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.nio.channels.GatheringByteChannel`
 * Package name: `java.nio.channels`
 */
class GatheringByteChannel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.GatheringByteChannel";
public:
    STATICINITIALIZE;

    GatheringByteChannel(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.entity.IMerchant`
 * Package name: `net.minecraft.entity`
 */
class IMerchant : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.IMerchant";
public:
    STATICINITIALIZE;

    IMerchant(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.inventory.IInventory`
 * Package name: `net.minecraft.inventory`
 */
class IInventory : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.inventory.IInventory";
public:
    STATICINITIALIZE;

    IInventory(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.inventory.InventoryBasic`
 * Package name: `net.minecraft.inventory`
 */
class InventoryBasic : public Object {
protected:
    const inline static char *className = "net.minecraft.inventory.InventoryBasic";
public:
    STATICINITIALIZE;

    InventoryBasic(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.inventory.InventoryBasic`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack func_174894_a(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.inventory.InventoryBasic`
     * Signature: `(Lnet.minecraft.inventory.IInvBasic;)V`
     */
    void func_110132_b(IInvBasic arg0);

    /**
     * Declaring class: `net.minecraft.inventory.InventoryBasic`
     * Signature: `(Lnet.minecraft.inventory.IInvBasic;)V`
     */
    void func_110134_a(IInvBasic arg0);

    /**
     * Declaring class: `net.minecraft.inventory.InventoryBasic`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setCustomName(String arg0);
};


/**
 * Classpath: `net.minecraft.inventory.IInvBasic`
 * Package name: `net.minecraft.inventory`
 */
class IInvBasic : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.inventory.IInvBasic";
public:
    STATICINITIALIZE;

    IInvBasic(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.pathfinding.PathNavigate`
 * Package name: `net.minecraft.pathfinding`
 */
class PathNavigate : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathNavigate";
public:
    STATICINITIALIZE;

    PathNavigate(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()V`
     */
    void onUpdateNavigation();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()Lnet.minecraft.pathfinding.PathFinder;`
     */
    PathFinder getPathFinder();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()F`
     */
    float getPathSearchRange();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(DDD)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity getPathToXYZ(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity getPathToPos(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()Z`
     */
    bool canNavigate();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(DDDD)Z`
     */
    bool tryMoveToXYZ(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(F)V`
     */
    void setHeightRequirement(float arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()V`
     */
    void removeSunnyPath();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()Lnet.minecraft.util.Vec3;`
     */
    Vec3 getEntityPosition();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;III)Z`
     */
    bool isDirectPathBetweenPoints(Vec3 arg0, Vec3 arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(Lnet.minecraft.util.Vec3;)V`
     */
    void checkForStuck(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()V`
     */
    void clearPathEntity();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(Lnet.minecraft.entity.Entity;)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity getPathToEntityLiving(Entity arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(Lnet.minecraft.entity.Entity;D)Z`
     */
    bool tryMoveToEntityLiving(Entity arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()Z`
     */
    bool noPath();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(D)V`
     */
    void setSpeed(double arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `(Lnet.minecraft.pathfinding.PathEntity;D)Z`
     */
    bool setPath(PathEntity arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()V`
     */
    void pathFollow();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()Z`
     */
    bool isInLiquid();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathNavigate`
     * Signature: `()Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity getPath();
};


/**
 * Classpath: `net.minecraft.pathfinding.PathFinder`
 * Package name: `net.minecraft.pathfinding`
 */
class PathFinder : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathFinder";
public:
    STATICINITIALIZE;

    PathFinder(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.pathfinding.PathFinder`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.entity.Entity;Lnet.minecraft.util.BlockPos;F)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity createEntityPathTo(IBlockAccess arg0, Entity arg1, BlockPos arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathFinder`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;F)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity createEntityPathTo(IBlockAccess arg0, Entity arg1, Entity arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathFinder`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.entity.Entity;DDDF)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity createEntityPathTo(IBlockAccess arg0, Entity arg1, double arg2, double arg3, double arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathFinder`
     * Signature: `(Lnet.minecraft.pathfinding.PathPoint;Lnet.minecraft.pathfinding.PathPoint;)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity createEntityPath(PathPoint arg0, PathPoint arg1);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathFinder`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.pathfinding.PathPoint;Lnet.minecraft.pathfinding.PathPoint;F)Lnet.minecraft.pathfinding.PathEntity;`
     */
    PathEntity addToPath(Entity arg0, PathPoint arg1, PathPoint arg2, float arg3);
};


/**
 * Classpath: `net.minecraft.world.IBlockAccess`
 * Package name: `net.minecraft.world`
 */
class IBlockAccess : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.IBlockAccess";
public:
    STATICINITIALIZE;

    IBlockAccess(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.pathfinding.PathEntity`
 * Package name: `net.minecraft.pathfinding`
 */
class PathEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathEntity";
public:
    STATICINITIALIZE;

    PathEntity(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `()I`
     */
    int getCurrentPathLength();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `()I`
     */
    int getCurrentPathIndex();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `(Lnet.minecraft.entity.Entity;I)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getVectorFromIndex(Entity arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `(I)V`
     */
    void setCurrentPathIndex(int arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `(I)Lnet.minecraft.pathfinding.PathPoint;`
     */
    PathPoint getPathPointFromIndex(int arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `(I)V`
     */
    void setCurrentPathLength(int arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `()V`
     */
    void incrementPathIndex();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `()Lnet.minecraft.pathfinding.PathPoint;`
     */
    PathPoint getFinalPathPoint();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isDestinationSame(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `(Lnet.minecraft.pathfinding.PathEntity;)Z`
     */
    bool isSamePath(PathEntity arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `()Z`
     */
    bool isFinished();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathEntity`
     * Signature: `(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getPosition(Entity arg0);
};


/**
 * Classpath: `net.minecraft.pathfinding.PathPoint`
 * Package name: `net.minecraft.pathfinding`
 */
class PathPoint : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathPoint";
public:
    STATICINITIALIZE;

    PathPoint(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.pathfinding.PathPoint`
     * Signature: `(Lnet.minecraft.pathfinding.PathPoint;)F`
     */
    float distanceToSquared(PathPoint arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathPoint`
     * Signature: `(Lnet.minecraft.pathfinding.PathPoint;)F`
     */
    float distanceTo(PathPoint arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathPoint`
     * Signature: `()Z`
     */
    bool isAssigned();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathPoint`
     * Signature: `(III)I`
     */
    static int makeHash(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathPoint`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.pathfinding.PathPoint`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.pathfinding.PathPoint`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `net.minecraft.entity.ai.EntityLookHelper`
 * Package name: `net.minecraft.entity.ai`
 */
class EntityLookHelper : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntityLookHelper";
public:
    STATICINITIALIZE;

    EntityLookHelper(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `()V`
     */
    void onUpdateLook();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `(FFF)F`
     */
    float updateRotation(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `(DDDFF)V`
     */
    void setLookPosition(double arg0, double arg1, double arg2, float arg3, float arg4);

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `(Lnet.minecraft.entity.Entity;FF)V`
     */
    void setLookPositionWithEntity(Entity arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `()Z`
     */
    bool getIsLooking();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `()D`
     */
    double getLookPosX();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `()D`
     */
    double getLookPosY();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityLookHelper`
     * Signature: `()D`
     */
    double getLookPosZ();
};


/**
 * Classpath: `net.minecraft.entity.ai.EntityMoveHelper`
 * Package name: `net.minecraft.entity.ai`
 */
class EntityMoveHelper : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntityMoveHelper";
public:
    STATICINITIALIZE;

    EntityMoveHelper(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `()V`
     */
    void onUpdateMoveHelper();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `()D`
     */
    double getZ();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `(DDDD)V`
     */
    void setMoveTo(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `()Z`
     */
    bool isUpdating();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `()D`
     */
    double getSpeed();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityMoveHelper`
     * Signature: `(FFF)F`
     */
    float limitAngle(float arg0, float arg1, float arg2);
};


/**
 * Classpath: `net.minecraft.entity.ai.EntityJumpHelper`
 * Package name: `net.minecraft.entity.ai`
 */
class EntityJumpHelper : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntityJumpHelper";
public:
    STATICINITIALIZE;

    EntityJumpHelper(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.ai.EntityJumpHelper`
     * Signature: `()V`
     */
    void setJumping();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntityJumpHelper`
     * Signature: `()V`
     */
    void doJump();
};


/**
 * Classpath: `net.minecraft.entity.ai.EntitySenses`
 * Package name: `net.minecraft.entity.ai`
 */
class EntitySenses : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntitySenses";
public:
    STATICINITIALIZE;

    EntitySenses(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.ai.EntitySenses`
     * Signature: `()V`
     */
    void clearSensingCache();

    /**
     * Declaring class: `net.minecraft.entity.ai.EntitySenses`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool canSee(Entity arg0);
};


/**
 * Classpath: `net.minecraft.world.DifficultyInstance`
 * Package name: `net.minecraft.world`
 */
class DifficultyInstance : public Object {
protected:
    const inline static char *className = "net.minecraft.world.DifficultyInstance";
public:
    STATICINITIALIZE;

    DifficultyInstance(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.DifficultyInstance`
     * Signature: `()F`
     */
    float getAdditionalDifficulty();

    /**
     * Declaring class: `net.minecraft.world.DifficultyInstance`
     * Signature: `(Lnet.minecraft.world.EnumDifficulty;JJF)F`
     */
    float calculateAdditionalDifficulty(EnumDifficulty arg0, long arg1, long arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.world.DifficultyInstance`
     * Signature: `()F`
     */
    float getClampedAdditionalDifficulty();
};


/**
 * Classpath: `net.minecraft.world.EnumDifficulty`
 * Package name: `net.minecraft.world`
 */
class EnumDifficulty : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.EnumDifficulty";
public:
    STATICINITIALIZE;

    EnumDifficulty(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.world.EnumDifficulty`
     * Signature: `()I`
     */
    int getDifficultyId();

    /**
     * Declaring class: `net.minecraft.world.EnumDifficulty`
     * Signature: `(I)Lnet.minecraft.world.EnumDifficulty;`
     */
    static EnumDifficulty getDifficultyEnum(int arg0);

    /**
     * Declaring class: `net.minecraft.world.EnumDifficulty`
     * Signature: `()Ljava.lang.String;`
     */
    String getDifficultyResourceKey();

    /**
     * Declaring class: `net.minecraft.world.EnumDifficulty`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.EnumDifficulty;`
     */
    static EnumDifficulty valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.entity.IEntityLivingData`
 * Package name: `net.minecraft.entity`
 */
class IEntityLivingData : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.IEntityLivingData";
public:
    STATICINITIALIZE;

    IEntityLivingData(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `com.mojang.authlib.GameProfile`
 * Package name: `com.mojang.authlib`
 */
class GameProfile : public Object {
protected:
    const inline static char *className = "com.mojang.authlib.GameProfile";
public:
    STATICINITIALIZE;

    GameProfile(jobject object) : Object(object) {}


    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `()Z`
     */
    bool isComplete();

    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `()Z`
     */
    bool isLegacy();

    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `()Lcom.mojang.authlib.properties.PropertyMap;`
     */
    PropertyMap getProperties();

    /**
     * Declaring class: `com.mojang.authlib.GameProfile`
     * Signature: `()Ljava.util.UUID;`
     */
    UUID getId();
};


/**
 * Classpath: `com.google.common.collect.ForwardingObject`
 * Package name: `com.google.common.collect`
 */
class ForwardingObject : public Object {
protected:
    const inline static char *className = "com.google.common.collect.ForwardingObject";
public:
    STATICINITIALIZE;

    ForwardingObject(jobject object) : Object(object) {}


    /**
     * Declaring class: `com.google.common.collect.ForwardingObject`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `com.google.common.collect.ForwardingObject`
     * Signature: `()Ljava.lang.Object;`
     */
    Object delegate();
};


/**
 * Classpath: `net.minecraft.util.FoodStats`
 * Package name: `net.minecraft.util`
 */
class FoodStats : public Object {
protected:
    const inline static char *className = "net.minecraft.util.FoodStats";
public:
    STATICINITIALIZE;

    FoodStats(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `()F`
     */
    float getSaturationLevel();

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(F)V`
     */
    void setFoodSaturationLevel(float arg0);

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `()I`
     */
    int getPrevFoodLevel();

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `()I`
     */
    int getFoodLevel();

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(I)V`
     */
    void setFoodLevel(int arg0);

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(F)V`
     */
    void addExhaustion(float arg0);

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(Lnet.minecraft.item.ItemFood;Lnet.minecraft.item.ItemStack;)V`
     */
    void addStats(ItemFood arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(IF)V`
     */
    void addStats(int arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onUpdate(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `()Z`
     */
    bool needFood();

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.util.FoodStats`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeNBT(NBTTagCompound arg0);
};


/**
 * Classpath: `net.minecraft.item.ItemFood`
 * Package name: `net.minecraft.item`
 */
class ItemFood : public Item {
protected:
    const inline static char *className = "net.minecraft.item.ItemFood";
public:
    STATICINITIALIZE;

    ItemFood(jobject object) : Item(object) {}


    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack onItemRightClick(ItemStack arg0, World arg1, EntityPlayer arg2);

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(IIIF)Lnet.minecraft.item.ItemFood;`
     */
    ItemFood setPotionEffect(int arg0, int arg1, int arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `()Lnet.minecraft.item.ItemFood;`
     */
    ItemFood setAlwaysEdible();

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int getHealAmount(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(Lnet.minecraft.item.ItemStack;)F`
     */
    float getSaturationModifier(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `()Z`
     */
    bool isWolfsFavoriteMeat();

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onFoodEaten(ItemStack arg0, World arg1, EntityPlayer arg2);

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int getMaxItemUseDuration(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.EnumAction;`
     */
    EnumAction getItemUseAction(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.item.ItemFood`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack onItemUseFinish(ItemStack arg0, World arg1, EntityPlayer arg2);
};


/**
 * Classpath: `net.minecraft.item.EnumAction`
 * Package name: `net.minecraft.item`
 */
class EnumAction : public Enum {
protected:
    const inline static char *className = "net.minecraft.item.EnumAction";
public:
    STATICINITIALIZE;

    EnumAction(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.item.EnumAction`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.item.EnumAction;`
     */
    static EnumAction valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.WorldSettings$GameType`
 * Enclosing class: `net.minecraft.world.WorldSettings`
 * Package name: `net.minecraft.world`
 */
class WorldSettings_GameType : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.WorldSettings$GameType";
public:
    STATICINITIALIZE;

    WorldSettings_GameType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `()Z`
     */
    bool isSurvivalOrAdventure();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `()Z`
     */
    bool isAdventure();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `(I)Lnet.minecraft.world.WorldSettings$GameType;`
     */
    static WorldSettings_GameType getByID(int arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `()Z`
     */
    bool isCreative();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `(Lnet.minecraft.entity.player.PlayerCapabilities;)V`
     */
    void configurePlayerCapabilities(PlayerCapabilities arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.WorldSettings$GameType;`
     */
    static WorldSettings_GameType valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.WorldSettings$GameType;`
     */
    static WorldSettings_GameType getByName(String arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSettings$GameType`
     * Signature: `()I`
     */
    int getID();
};


/**
 * Classpath: `net.minecraft.entity.player.PlayerCapabilities`
 * Package name: `net.minecraft.entity.player`
 */
class PlayerCapabilities : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.player.PlayerCapabilities";
public:
    STATICINITIALIZE;

    PlayerCapabilities(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.player.PlayerCapabilities`
     * Signature: `(F)V`
     */
    void setPlayerWalkSpeed(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.PlayerCapabilities`
     * Signature: `()F`
     */
    float getWalkSpeed();

    /**
     * Declaring class: `net.minecraft.entity.player.PlayerCapabilities`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readCapabilitiesFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.PlayerCapabilities`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeCapabilitiesToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.PlayerCapabilities`
     * Signature: `()F`
     */
    float getFlySpeed();

    /**
     * Declaring class: `net.minecraft.entity.player.PlayerCapabilities`
     * Signature: `(F)V`
     */
    void setFlySpeed(float arg0);
};


/**
 * Classpath: `net.minecraft.inventory.InventoryEnderChest`
 * Package name: `net.minecraft.inventory`
 */
class InventoryEnderChest : public InventoryBasic {
protected:
    const inline static char *className = "net.minecraft.inventory.InventoryEnderChest";
public:
    STATICINITIALIZE;

    InventoryEnderChest(jobject object) : InventoryBasic(object) {}


    /**
     * Declaring class: `net.minecraft.inventory.InventoryEnderChest`
     * Signature: `(Lnet.minecraft.tileentity.TileEntityEnderChest;)V`
     */
    void setChestTileEntity(TileEntityEnderChest arg0);

    /**
     * Declaring class: `net.minecraft.inventory.InventoryEnderChest`
     * Signature: `(Lnet.minecraft.nbt.NBTTagList;)V`
     */
    void loadInventoryFromNBT(NBTTagList arg0);

    /**
     * Declaring class: `net.minecraft.inventory.InventoryEnderChest`
     * Signature: `()Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList saveInventoryToNBT();
};


/**
 * Classpath: `net.minecraft.tileentity.TileEntityEnderChest`
 * Package name: `net.minecraft.tileentity`
 */
class TileEntityEnderChest : public TileEntity {
protected:
    const inline static char *className = "net.minecraft.tileentity.TileEntityEnderChest";
public:
    STATICINITIALIZE;

    TileEntityEnderChest(jobject object) : TileEntity(object) {}


    /**
     * Declaring class: `net.minecraft.tileentity.TileEntityEnderChest`
     * Signature: `(II)Z`
     */
    bool receiveClientEvent(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntityEnderChest`
     * Signature: `()V`
     */
    void invalidate();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntityEnderChest`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool canBeUsed(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntityEnderChest`
     * Signature: `()V`
     */
    void openChest();

    /**
     * Declaring class: `net.minecraft.tileentity.TileEntityEnderChest`
     * Signature: `()V`
     */
    void closeChest();
};


/**
 * Classpath: `net.minecraft.world.IInteractionObject`
 * Package name: `net.minecraft.world`
 */
class IInteractionObject : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.IInteractionObject";
public:
    STATICINITIALIZE;

    IInteractionObject(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.entity.player.EntityPlayer$EnumStatus`
 * Enclosing class: `net.minecraft.entity.player.EntityPlayer`
 * Package name: `net.minecraft.entity.player`
 */
class EntityPlayer_EnumStatus : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayer$EnumStatus";
public:
    STATICINITIALIZE;

    EntityPlayer_EnumStatus(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer$EnumStatus`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayer$EnumStatus;`
     */
    static EntityPlayer_EnumStatus valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.LockCode`
 * Package name: `net.minecraft.world`
 */
class LockCode : public Object {
protected:
    const inline static char *className = "net.minecraft.world.LockCode";
public:
    STATICINITIALIZE;

    LockCode(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.LockCode`
     * Signature: `()Ljava.lang.String;`
     */
    String getLock();

    /**
     * Declaring class: `net.minecraft.world.LockCode`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void toNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.world.LockCode`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.world.LockCode;`
     */
    static LockCode fromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.world.LockCode`
     * Signature: `()Z`
     */
    bool isEmpty();
};


/**
 * Classpath: `net.minecraft.entity.player.EnumPlayerModelParts`
 * Package name: `net.minecraft.entity.player`
 */
class EnumPlayerModelParts : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.player.EnumPlayerModelParts";
public:
    STATICINITIALIZE;

    EnumPlayerModelParts(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.entity.player.EnumPlayerModelParts`
     * Signature: `()Ljava.lang.String;`
     */
    String getPartName();

    /**
     * Declaring class: `net.minecraft.entity.player.EnumPlayerModelParts`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent func_179326_d();

    /**
     * Declaring class: `net.minecraft.entity.player.EnumPlayerModelParts`
     * Signature: `()I`
     */
    int getPartMask();

    /**
     * Declaring class: `net.minecraft.entity.player.EnumPlayerModelParts`
     * Signature: `()I`
     */
    int getPartId();

    /**
     * Declaring class: `net.minecraft.entity.player.EnumPlayerModelParts`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.player.EnumPlayerModelParts;`
     */
    static EnumPlayerModelParts valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.enchantment.Enchantment`
 * Package name: `net.minecraft.enchantment`
 */
class Enchantment : public Object {
protected:
    const inline static char *className = "net.minecraft.enchantment.Enchantment";
public:
    STATICINITIALIZE;

    Enchantment(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(I)Lnet.minecraft.enchantment.Enchantment;`
     */
    static Enchantment getEnchantmentById(int arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getTranslatedName(int arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `()I`
     */
    int getMaxLevel();

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.enchantment.Enchantment;`
     */
    static Enchantment getEnchantmentByLocation(String arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `()Ljava.util.Set;`
     */
    static Set func_181077_c();

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `()I`
     */
    int getMinLevel();

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(I)I`
     */
    int getMinEnchantability(int arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(I)I`
     */
    int getMaxEnchantability(int arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(ILnet.minecraft.util.DamageSource;)I`
     */
    int calcModifierDamage(int arg0, DamageSource arg1);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(ILnet.minecraft.entity.EnumCreatureAttribute;)F`
     */
    float calcDamageByCreature(int arg0, EnumCreatureAttribute arg1);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(Lnet.minecraft.enchantment.Enchantment;)Z`
     */
    bool canApplyTogether(Enchantment arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.Entity;I)V`
     */
    void onEntityDamaged(EntityLivingBase arg0, Entity arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `()I`
     */
    int getWeight();

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool canApply(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.Entity;I)V`
     */
    void onUserHurt(EntityLivingBase arg0, Entity arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `net.minecraft.enchantment.Enchantment`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.enchantment.Enchantment;`
     */
    Enchantment setName(String arg0);
};


/**
 * Classpath: `net.minecraft.item.EnumRarity`
 * Package name: `net.minecraft.item`
 */
class EnumRarity : public Enum {
protected:
    const inline static char *className = "net.minecraft.item.EnumRarity";
public:
    STATICINITIALIZE;

    EnumRarity(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.item.EnumRarity`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.item.EnumRarity;`
     */
    static EnumRarity valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.creativetab.CreativeTabs`
 * Package name: `net.minecraft.creativetab`
 */
class CreativeTabs : public Object {
protected:
    const inline static char *className = "net.minecraft.creativetab.CreativeTabs";
public:
    STATICINITIALIZE;

    CreativeTabs(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()I`
     */
    int getTabIndex();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.creativetab.CreativeTabs;`
     */
    CreativeTabs setBackgroundImageName(String arg0);

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Lnet.minecraft.creativetab.CreativeTabs;`
     */
    CreativeTabs setNoScrollbar();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Ljava.lang.String;`
     */
    String getTabLabel();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Ljava.lang.String;`
     */
    String getTranslatedTabLabel();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getIconItemStack();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Lnet.minecraft.item.Item;`
     */
    Item getTabIconItem();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()I`
     */
    int getIconItemDamage();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Ljava.lang.String;`
     */
    String getBackgroundImageName();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Z`
     */
    bool drawInForegroundOfTab();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Z`
     */
    bool shouldHidePlayerInventory();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()I`
     */
    int getTabColumn();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Z`
     */
    bool isTabInFirstRow();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `(Lnet.minecraft.enchantment.EnumEnchantmentType;)Z`
     */
    bool hasRelevantEnchantmentType(EnumEnchantmentType arg0);

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `(Ljava.util.List;)V`
     */
    void displayAllReleventItems(List arg0);

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `(Ljava.util.List;[Lnet.minecraft.enchantment.EnumEnchantmentType;)V`
     */
    void addEnchantmentBooksToList(List arg0, EnumEnchantmentType_interface arg1);

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `()Lnet.minecraft.creativetab.CreativeTabs;`
     */
    CreativeTabs setNoTitle();

    /**
     * Declaring class: `net.minecraft.creativetab.CreativeTabs`
     * Signature: `([Lnet.minecraft.enchantment.EnumEnchantmentType;)Lnet.minecraft.creativetab.CreativeTabs;`
     */
    CreativeTabs setRelevantEnchantmentTypes(EnumEnchantmentType_interface arg0);
};


/**
 * Classpath: `net.minecraft.enchantment.EnumEnchantmentType`
 * Package name: `net.minecraft.enchantment`
 */
class EnumEnchantmentType : public Enum {
protected:
    const inline static char *className = "net.minecraft.enchantment.EnumEnchantmentType";
public:
    STATICINITIALIZE;

    EnumEnchantmentType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.enchantment.EnumEnchantmentType`
     * Signature: `(Lnet.minecraft.item.Item;)Z`
     */
    bool canEnchantItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.enchantment.EnumEnchantmentType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.enchantment.EnumEnchantmentType;`
     */
    static EnumEnchantmentType valueOf(String arg0);
};


/**
 * Classpath: `[Lnet.minecraft.enchantment.EnumEnchantmentType;`
 */
class EnumEnchantmentType_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.enchantment.EnumEnchantmentType;";
public:
    STATICINITIALIZE;

    EnumEnchantmentType_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.util.ResourceLocation`
 * Package name: `net.minecraft.util`
 */
class ResourceLocation : public Object {
protected:
    const inline static char *className = "net.minecraft.util.ResourceLocation";
public:
    STATICINITIALIZE;

    ResourceLocation(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.ResourceLocation`
     * Signature: `()Ljava.lang.String;`
     */
    String getResourceDomain();

    /**
     * Declaring class: `net.minecraft.util.ResourceLocation`
     * Signature: `()Ljava.lang.String;`
     */
    String getResourcePath();

    /**
     * Declaring class: `net.minecraft.util.ResourceLocation`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.util.ResourceLocation`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.ResourceLocation`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `net.minecraft.block.Block$EnumOffsetType`
 * Enclosing class: `net.minecraft.block.Block`
 * Package name: `net.minecraft.block`
 */
class Block_EnumOffsetType : public Enum {
protected:
    const inline static char *className = "net.minecraft.block.Block$EnumOffsetType";
public:
    STATICINITIALIZE;

    Block_EnumOffsetType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.block.Block$EnumOffsetType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.block.Block$EnumOffsetType;`
     */
    static Block_EnumOffsetType valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.block.properties.IProperty`
 * Package name: `net.minecraft.block.properties`
 */
class IProperty : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.block.properties.IProperty";
public:
    STATICINITIALIZE;

    IProperty(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.util.EnumWorldBlockLayer`
 * Package name: `net.minecraft.util`
 */
class EnumWorldBlockLayer : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumWorldBlockLayer";
public:
    STATICINITIALIZE;

    EnumWorldBlockLayer(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.EnumWorldBlockLayer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.util.EnumWorldBlockLayer`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumWorldBlockLayer;`
     */
    static EnumWorldBlockLayer valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.entity.EnumCreatureType`
 * Package name: `net.minecraft.entity`
 */
class EnumCreatureType : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.EnumCreatureType";
public:
    STATICINITIALIZE;

    EnumCreatureType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EnumCreatureType`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getCreatureClass();

    /**
     * Declaring class: `net.minecraft.entity.EnumCreatureType`
     * Signature: `()I`
     */
    int getMaxNumberOfCreature();

    /**
     * Declaring class: `net.minecraft.entity.EnumCreatureType`
     * Signature: `()Z`
     */
    bool getPeacefulCreature();

    /**
     * Declaring class: `net.minecraft.entity.EnumCreatureType`
     * Signature: `()Z`
     */
    bool getAnimal();

    /**
     * Declaring class: `net.minecraft.entity.EnumCreatureType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.EnumCreatureType;`
     */
    static EnumCreatureType valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.chunk.ChunkPrimer`
 * Package name: `net.minecraft.world.chunk`
 */
class ChunkPrimer : public Object {
protected:
    const inline static char *className = "net.minecraft.world.chunk.ChunkPrimer";
public:
    STATICINITIALIZE;

    ChunkPrimer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.chunk.ChunkPrimer`
     * Signature: `(I)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getBlockState(int arg0);

    /**
     * Declaring class: `net.minecraft.world.chunk.ChunkPrimer`
     * Signature: `(III)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getBlockState(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.chunk.ChunkPrimer`
     * Signature: `(IIILnet.minecraft.block.state.IBlockState;)V`
     */
    void setBlockState(int arg0, int arg1, int arg2, IBlockState arg3);

    /**
     * Declaring class: `net.minecraft.world.chunk.ChunkPrimer`
     * Signature: `(ILnet.minecraft.block.state.IBlockState;)V`
     */
    void setBlockState(int arg0, IBlockState arg1);
};


/**
 * Classpath: `net.minecraft.world.biome.BiomeGenBase$TempCategory`
 * Enclosing class: `net.minecraft.world.biome.BiomeGenBase`
 * Package name: `net.minecraft.world.biome`
 */
class BiomeGenBase_TempCategory : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase$TempCategory";
public:
    STATICINITIALIZE;

    BiomeGenBase_TempCategory(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase$TempCategory`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.biome.BiomeGenBase$TempCategory;`
     */
    static BiomeGenBase_TempCategory valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.biome.BiomeGenBase$Height`
 * Enclosing class: `net.minecraft.world.biome.BiomeGenBase`
 * Package name: `net.minecraft.world.biome`
 */
class BiomeGenBase_Height : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase$Height";
public:
    STATICINITIALIZE;

    BiomeGenBase_Height(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase$Height`
     * Signature: `()Lnet.minecraft.world.biome.BiomeGenBase$Height;`
     */
    BiomeGenBase_Height attenuate();
};


/**
 * Classpath: `net.minecraft.world.IWorldAccess`
 * Package name: `net.minecraft.world`
 */
class IWorldAccess : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.IWorldAccess";
public:
    STATICINITIALIZE;

    IWorldAccess(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.block.material.Material`
 * Package name: `net.minecraft.block.material`
 */
class Material : public Object {
protected:
    const inline static char *className = "net.minecraft.block.material.Material";
public:
    STATICINITIALIZE;

    Material(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool blocksMovement();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material setRequiresTool();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material setImmovableMobility();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material setNoPushMobility();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material setTranslucent();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material setReplaceable();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material setAdventureModeExempt();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool isToolNotRequired();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool isReplaceable();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool blocksLight();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.MapColor;`
     */
    MapColor getMaterialMapColor();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()I`
     */
    int getMaterialMobility();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool isLiquid();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool isSolid();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material setBurning();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool getCanBurn();

    /**
     * Declaring class: `net.minecraft.block.material.Material`
     * Signature: `()Z`
     */
    bool isOpaque();
};


/**
 * Classpath: `net.minecraft.block.material.MapColor`
 * Package name: `net.minecraft.block.material`
 */
class MapColor : public Object {
protected:
    const inline static char *className = "net.minecraft.block.material.MapColor";
public:
    STATICINITIALIZE;

    MapColor(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.block.material.MapColor`
     * Signature: `(I)I`
     */
    int func_151643_b(int arg0);
};


/**
 * Classpath: `net.minecraft.world.gen.structure.StructureBoundingBox`
 * Package name: `net.minecraft.world.gen.structure`
 */
class StructureBoundingBox : public Object {
protected:
    const inline static char *className = "net.minecraft.world.gen.structure.StructureBoundingBox";
public:
    STATICINITIALIZE;

    StructureBoundingBox(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `(Lnet.minecraft.world.gen.structure.StructureBoundingBox;)Z`
     */
    bool intersectsWith(StructureBoundingBox arg0);

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `(IIII)Z`
     */
    bool intersectsWith(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `(Lnet.minecraft.util.Vec3i;)Z`
     */
    bool isVecInside(Vec3i arg0);

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()Lnet.minecraft.world.gen.structure.StructureBoundingBox;`
     */
    static StructureBoundingBox getNewBoundingBox();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `(IIIIII)Lnet.minecraft.world.gen.structure.StructureBoundingBox;`
     */
    static StructureBoundingBox func_175899_a(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()Lnet.minecraft.util.Vec3i;`
     */
    Vec3i func_175896_b();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()Lnet.minecraft.nbt.NBTTagIntArray;`
     */
    NBTTagIntArray toNBTTagIntArray();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `(Lnet.minecraft.world.gen.structure.StructureBoundingBox;)V`
     */
    void expandTo(StructureBoundingBox arg0);

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()I`
     */
    int getXSize();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()I`
     */
    int getYSize();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()I`
     */
    int getZSize();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()Lnet.minecraft.util.Vec3i;`
     */
    Vec3i getCenter();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `(IIIIIIIIILnet.minecraft.util.EnumFacing;)Lnet.minecraft.world.gen.structure.StructureBoundingBox;`
     */
    static StructureBoundingBox getComponentToAddBoundingBox(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, EnumFacing arg9);

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.world.gen.structure.StructureBoundingBox`
     * Signature: `(III)V`
     */
    void offset(int arg0, int arg1, int arg2);
};


/**
 * Classpath: `net.minecraft.nbt.NBTTagIntArray`
 * Package name: `net.minecraft.nbt`
 */
class NBTTagIntArray : public NBTBase {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTTagIntArray";
public:
    STATICINITIALIZE;

    NBTTagIntArray(jobject object) : NBTBase(object) {}


    /**
     * Declaring class: `net.minecraft.nbt.NBTTagIntArray`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagIntArray`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagIntArray`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagIntArray`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void write(DataOutput arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagIntArray`
     * Signature: `(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V`
     * Throws: `java.io.IOException`
     */
    void read(DataInput arg0, int arg1, NBTSizeTracker arg2);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagIntArray`
     * Signature: `()B`
     */
    byte getId();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagIntArray`
     * Signature: `()Lnet.minecraft.nbt.NBTBase;`
     */
    NBTBase copy();
};


/**
 * Classpath: `net.minecraft.world.storage.ISaveHandler`
 * Package name: `net.minecraft.world.storage`
 */
class ISaveHandler : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.storage.ISaveHandler";
public:
    STATICINITIALIZE;

    ISaveHandler(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.world.storage.MapStorage`
 * Package name: `net.minecraft.world.storage`
 */
class MapStorage : public Object {
protected:
    const inline static char *className = "net.minecraft.world.storage.MapStorage";
public:
    STATICINITIALIZE;

    MapStorage(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.storage.MapStorage`
     * Signature: `(Ljava.lang.String;)I`
     */
    int getUniqueDataId(String arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.MapStorage`
     * Signature: `()V`
     */
    void loadIdCounts();

    /**
     * Declaring class: `net.minecraft.world.storage.MapStorage`
     * Signature: `()V`
     */
    void saveAllData();

    /**
     * Declaring class: `net.minecraft.world.storage.MapStorage`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.world.WorldSavedData;)V`
     */
    void setData(String arg0, WorldSavedData arg1);

    /**
     * Declaring class: `net.minecraft.world.storage.MapStorage`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Lnet.minecraft.world.WorldSavedData;`
     */
    WorldSavedData loadData(Class arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.world.storage.MapStorage`
     * Signature: `(Lnet.minecraft.world.WorldSavedData;)V`
     */
    void saveData(WorldSavedData arg0);
};


/**
 * Classpath: `net.minecraft.world.WorldSavedData`
 * Package name: `net.minecraft.world`
 */
class WorldSavedData : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldSavedData";
public:
    STATICINITIALIZE;

    WorldSavedData(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.WorldSavedData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSavedData`
     * Signature: `()V`
     */
    void markDirty();

    /**
     * Declaring class: `net.minecraft.world.WorldSavedData`
     * Signature: `()Z`
     */
    bool isDirty();

    /**
     * Declaring class: `net.minecraft.world.WorldSavedData`
     * Signature: `(Z)V`
     */
    void setDirty(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSavedData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeToNBT(NBTTagCompound arg0);
};


/**
 * Classpath: `net.minecraft.village.VillageCollection`
 * Package name: `net.minecraft.village`
 */
class VillageCollection : public WorldSavedData {
protected:
    const inline static char *className = "net.minecraft.village.VillageCollection";
public:
    STATICINITIALIZE;

    VillageCollection(jobject object) : WorldSavedData(object) {}


    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.world.WorldProvider;)Ljava.lang.String;`
     */
    static String fileNameForProvider(WorldProvider arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.world.World;)V`
     */
    void setWorldsForAll(World arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void addToVillagerPositionList(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool positionInList(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `()V`
     */
    void removeAnnihilatedVillages();

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `()V`
     */
    void dropOldestVillagerPosition();

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `()Ljava.util.List;`
     */
    List getVillageList();

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;I)Lnet.minecraft.village.Village;`
     */
    Village getNearestVillage(BlockPos arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void addDoorsAround(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;`
     */
    VillageDoorInfo checkDoorExistence(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void addToNewDoorsList(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;I)I`
     */
    int countBlocksCanSeeSky(BlockPos arg0, EnumFacing arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isWoodDoor(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `()V`
     */
    void tick();

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageCollection`
     * Signature: `()V`
     */
    void addNewDoorsToVillageOrCreateVillage();
};


/**
 * Classpath: `net.minecraft.world.WorldProvider`
 * Package name: `net.minecraft.world`
 */
class WorldProvider : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldProvider";
public:
    STATICINITIALIZE;

    WorldProvider(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()V`
     */
    void registerWorldChunkManager();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()F`
     */
    float getCloudHeight();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Z`
     */
    bool isSkyColored();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()D`
     */
    double getVoidFogYFactor();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `(II)Z`
     */
    bool doesXZShowFog(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Lnet.minecraft.world.border.WorldBorder;`
     */
    WorldBorder getWorldBorder();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `(I)Lnet.minecraft.world.WorldProvider;`
     */
    static WorldProvider getProviderForDimension(int arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `(Lnet.minecraft.world.World;)V`
     */
    void registerWorld(World arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Lnet.minecraft.world.biome.WorldChunkManager;`
     */
    WorldChunkManager getWorldChunkManager();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Z`
     */
    bool getHasNoSky();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `(JF)F`
     */
    float calculateCelestialAngle(long arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `(J)I`
     */
    int getMoonPhase(long arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `(FF)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getFogColor(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Ljava.lang.String;`
     */
    String getDimensionName();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Ljava.lang.String;`
     */
    String getInternalNameSuffix();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Lnet.minecraft.world.chunk.IChunkProvider;`
     */
    IChunkProvider createChunkGenerator();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Z`
     */
    bool canRespawnHere();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()I`
     */
    int getAverageGroundLevel();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `(II)Z`
     */
    bool canCoordinateBeSpawn(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getSpawnCoordinate();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Z`
     */
    bool doesWaterVaporize();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()Z`
     */
    bool isSurfaceWorld();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()I`
     */
    int getDimensionId();

    /**
     * Declaring class: `net.minecraft.world.WorldProvider`
     * Signature: `()V`
     */
    void generateLightBrightnessTable();
};


/**
 * Classpath: `net.minecraft.village.Village`
 * Package name: `net.minecraft.village`
 */
class Village : public Object {
protected:
    const inline static char *className = "net.minecraft.village.Village";
public:
    STATICINITIALIZE;

    Village(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()V`
     */
    void removeDeadAndOldAgressors();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()V`
     */
    void updateNumVillagers();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()V`
     */
    void updateNumIronGolems();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.util.BlockPos;III)Lnet.minecraft.util.Vec3;`
     */
    Vec3 func_179862_a(BlockPos arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool func_179866_a(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool func_179861_a(BlockPos arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()I`
     */
    int getNumVillageDoors();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()I`
     */
    int getNumVillagers();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()Ljava.util.List;`
     */
    List getVillageDoorInfoList();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;`
     */
    VillageDoorInfo getNearestDoor(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;`
     */
    VillageDoorInfo getDoorInfo(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)V`
     */
    void addOrRenewAgressor(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.entity.player.EntityPlayer;`
     */
    EntityPlayer getNearestTargetPlayer(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool isPlayerReputationTooLow(String arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Ljava.lang.String;)I`
     */
    int getReputationForPlayer(String arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int setReputationForPlayer(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()V`
     */
    void endMatingSeason();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()Z`
     */
    bool isMatingSeason();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(I)V`
     */
    void setDefaultPlayerReputation(int arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()Z`
     */
    bool isAnnihilated();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()I`
     */
    int getVillageRadius();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.village.VillageDoorInfo;)V`
     */
    void addVillageDoorInfo(VillageDoorInfo arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;`
     */
    VillageDoorInfo getExistedDoor(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readVillageDataFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeVillageDataToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getCenter();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.world.World;)V`
     */
    void setWorld(World arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isWoodDoor(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(I)V`
     */
    void tick(int arg0);

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()V`
     */
    void removeDeadAndOutOfRangeDoors();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()I`
     */
    int getTicksSinceLastDoorAdding();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `()V`
     */
    void updateVillageRadiusAndCenter();

    /**
     * Declaring class: `net.minecraft.village.Village`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase findNearestVillageAggressor(EntityLivingBase arg0);
};


/**
 * Classpath: `net.minecraft.village.VillageDoorInfo`
 * Package name: `net.minecraft.village`
 */
class VillageDoorInfo : public Object {
protected:
    const inline static char *className = "net.minecraft.village.VillageDoorInfo";
public:
    STATICINITIALIZE;

    VillageDoorInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getDistanceToDoorBlockSq(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()I`
     */
    int getInsidePosY();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()I`
     */
    int getInsideOffsetX();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()I`
     */
    int getInsideOffsetZ();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `(II)Lnet.minecraft.util.EnumFacing;`
     */
    static EnumFacing getFaceDirection(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `(III)I`
     */
    int getDistanceSquared(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getDistanceToInsideBlockSq(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool func_179850_c(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getInsideBlockPos();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getDoorBlockPos();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `(I)V`
     */
    void func_179849_a(int arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()I`
     */
    int getDoorOpeningRestrictionCounter();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()V`
     */
    void resetDoorOpeningRestrictionCounter();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `(Z)V`
     */
    void setIsDetachedFromVillageFlag(bool arg0);

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()V`
     */
    void incrementDoorOpeningRestrictionCounter();

    /**
     * Declaring class: `net.minecraft.village.VillageDoorInfo`
     * Signature: `()Z`
     */
    bool getIsDetachedFromVillageFlag();
};


/**
 * Classpath: `net.minecraft.util.EnumParticleTypes`
 * Package name: `net.minecraft.util`
 */
class EnumParticleTypes : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumParticleTypes";
public:
    STATICINITIALIZE;

    EnumParticleTypes(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.EnumParticleTypes`
     * Signature: `()I`
     */
    int getParticleID();

    /**
     * Declaring class: `net.minecraft.util.EnumParticleTypes`
     * Signature: `()Z`
     */
    bool getShouldIgnoreRange();

    /**
     * Declaring class: `net.minecraft.util.EnumParticleTypes`
     * Signature: `()Ljava.lang.String;`
     */
    String getParticleName();

    /**
     * Declaring class: `net.minecraft.util.EnumParticleTypes`
     * Signature: `()I`
     */
    int getArgumentCount();

    /**
     * Declaring class: `net.minecraft.util.EnumParticleTypes`
     * Signature: `()Z`
     */
    bool hasArguments();

    /**
     * Declaring class: `net.minecraft.util.EnumParticleTypes`
     * Signature: `(I)Lnet.minecraft.util.EnumParticleTypes;`
     */
    static EnumParticleTypes getParticleFromId(int arg0);

    /**
     * Declaring class: `net.minecraft.util.EnumParticleTypes`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.EnumParticleTypes;`
     */
    static EnumParticleTypes valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.GameRules`
 * Package name: `net.minecraft.world`
 */
class GameRules : public Object {
protected:
    const inline static char *className = "net.minecraft.world.GameRules";
public:
    STATICINITIALIZE;

    GameRules(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void setOrCreateGameRule(String arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Lnet.minecraft.world.GameRules$ValueType;)V`
     */
    void addGameRule(String arg0, String arg1, GameRules_ValueType arg2);

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.world.GameRules$ValueType;)Z`
     */
    bool areSameType(String arg0, GameRules_ValueType arg1);

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool hasRule(String arg0);

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound writeToNBT();

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool getBoolean(String arg0);

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Ljava.lang.String;)I`
     */
    int getInt(String arg0);

    /**
     * Declaring class: `net.minecraft.world.GameRules`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getString(String arg0);
};


/**
 * Classpath: `net.minecraft.world.GameRules$ValueType`
 * Enclosing class: `net.minecraft.world.GameRules`
 * Package name: `net.minecraft.world`
 */
class GameRules_ValueType : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.GameRules$ValueType";
public:
    STATICINITIALIZE;

    GameRules_ValueType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.world.GameRules$ValueType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.GameRules$ValueType;`
     */
    static GameRules_ValueType valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.world.storage.WorldInfo`
 * Package name: `net.minecraft.world.storage`
 */
class WorldInfo : public Object {
protected:
    const inline static char *className = "net.minecraft.world.storage.WorldInfo";
public:
    STATICINITIALIZE;

    WorldInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Lnet.minecraft.world.WorldSettings$GameType;`
     */
    WorldSettings_GameType getGameType();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.world.EnumDifficulty;)V`
     */
    void setDifficulty(EnumDifficulty arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Z`
     */
    bool isHardcoreModeEnabled();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Z)V`
     */
    void setServerInitialized(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Lnet.minecraft.world.WorldType;`
     */
    WorldType getTerrainType();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()J`
     */
    long getWorldTime();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Z`
     */
    bool isMapFeaturesEnabled();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Z`
     */
    bool areCommandsAllowed();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()D`
     */
    double getBorderCenterX();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(D)V`
     */
    void getBorderCenterX(double arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()D`
     */
    double getBorderCenterZ();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(D)V`
     */
    void getBorderCenterZ(double arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()D`
     */
    double getBorderDamagePerBlock();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()D`
     */
    double getBorderSafeZone();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getBorderWarningDistance();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getBorderWarningTime();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()J`
     */
    long getBorderLerpTime();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()D`
     */
    double getBorderSize();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()D`
     */
    double getBorderLerpTarget();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setWorldName(String arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Z`
     */
    bool isThundering();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getCleanWeatherTime();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setCleanWeatherTime(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setThunderTime(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setRainTime(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getThunderTime();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Z)V`
     */
    void setThundering(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getRainTime();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(J)V`
     */
    void setWorldTotalTime(long arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()J`
     */
    long getWorldTotalTime();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(J)V`
     */
    void setWorldTime(long arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Lnet.minecraft.world.GameRules;`
     */
    GameRules getGameRulesInstance();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.crash.CrashReportCategory;)V`
     */
    void addToCrashReport(CrashReportCategory arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Z`
     */
    bool isDifficultyLocked();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Z)V`
     */
    void setDifficultyLocked(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Ljava.lang.String;`
     */
    String getGeneratorOptions();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.world.WorldSettings;)V`
     */
    void populateFromWorldSettings(WorldSettings arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void updateTagCompound(NBTTagCompound arg0, NBTTagCompound arg1);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound cloneNBTCompound(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()J`
     */
    long getSizeOnDisk();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getPlayerNBTTagCompound();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getSaveVersion();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setSaveVersion(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()J`
     */
    long getLastTimePlayed();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.world.WorldType;)V`
     */
    void setTerrainType(WorldType arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Z`
     */
    bool isInitialized();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Z)V`
     */
    void setMapFeaturesEnabled(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Z)V`
     */
    void setAllowCommands(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Z)V`
     */
    void setHardcore(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(D)V`
     */
    void setBorderSize(double arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(D)V`
     */
    void setBorderSafeZone(double arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(D)V`
     */
    void setBorderDamagePerBlock(double arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setBorderWarningDistance(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setBorderWarningTime(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(D)V`
     */
    void setBorderLerpTarget(double arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(J)V`
     */
    void setBorderLerpTime(long arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;)V`
     */
    void setGameType(WorldSettings_GameType arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Ljava.lang.String;`
     */
    String getWorldName();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getNBTTagCompound();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Lnet.minecraft.world.EnumDifficulty;`
     */
    EnumDifficulty getDifficulty();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()Z`
     */
    bool isRaining();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Z)V`
     */
    void setRaining(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getSpawnX();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getSpawnY();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()I`
     */
    int getSpawnZ();

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void setSpawn(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setSpawnY(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setSpawnX(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `(I)V`
     */
    void setSpawnZ(int arg0);

    /**
     * Declaring class: `net.minecraft.world.storage.WorldInfo`
     * Signature: `()J`
     */
    long getSeed();
};


/**
 * Classpath: `net.minecraft.world.WorldType`
 * Package name: `net.minecraft.world`
 */
class WorldType : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldType";
public:
    STATICINITIALIZE;

    WorldType(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Ljava.lang.String;`
     */
    String getWorldTypeName();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()I`
     */
    int getGeneratorVersion();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Lnet.minecraft.world.WorldType;`
     */
    WorldType setVersioned();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Lnet.minecraft.world.WorldType;`
     */
    WorldType setNotificationData();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `(Z)Lnet.minecraft.world.WorldType;`
     */
    WorldType setCanBeCreated(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Ljava.lang.String;`
     */
    String getTranslateName();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Ljava.lang.String;`
     */
    String func_151359_c();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Z`
     */
    bool getCanBeCreated();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Z`
     */
    bool isVersioned();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.WorldType;`
     */
    static WorldType parseWorldType(String arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()I`
     */
    int getWorldTypeID();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `()Z`
     */
    bool showWorldInfoNotice();

    /**
     * Declaring class: `net.minecraft.world.WorldType`
     * Signature: `(I)Lnet.minecraft.world.WorldType;`
     */
    WorldType getWorldTypeForGeneratorVersion(int arg0);
};


/**
 * Classpath: `net.minecraft.world.WorldSettings`
 * Package name: `net.minecraft.world`
 */
class WorldSettings : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldSettings";
public:
    STATICINITIALIZE;

    WorldSettings(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Lnet.minecraft.world.WorldSettings$GameType;`
     */
    WorldSettings_GameType getGameType();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Lnet.minecraft.world.WorldType;`
     */
    WorldType getTerrainType();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Lnet.minecraft.world.WorldSettings;`
     */
    WorldSettings enableBonusChest();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Z`
     */
    bool isMapFeaturesEnabled();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Lnet.minecraft.world.WorldSettings;`
     */
    WorldSettings enableCommands();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Z`
     */
    bool areCommandsAllowed();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.WorldSettings;`
     */
    WorldSettings setWorldName(String arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Z`
     */
    bool isBonusChestEnabled();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Z`
     */
    bool getHardcoreEnabled();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `(I)Lnet.minecraft.world.WorldSettings$GameType;`
     */
    static WorldSettings_GameType getGameTypeById(int arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()Ljava.lang.String;`
     */
    String getWorldName();

    /**
     * Declaring class: `net.minecraft.world.WorldSettings`
     * Signature: `()J`
     */
    long getSeed();
};


/**
 * Classpath: `net.minecraft.block.Block$SoundType`
 * Enclosing class: `net.minecraft.block.Block`
 * Package name: `net.minecraft.block`
 */
class Block_SoundType : public Object {
protected:
    const inline static char *className = "net.minecraft.block.Block$SoundType";
public:
    STATICINITIALIZE;

    Block_SoundType(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.block.Block$SoundType`
     * Signature: `()Ljava.lang.String;`
     */
    String getStepSound();

    /**
     * Declaring class: `net.minecraft.block.Block$SoundType`
     * Signature: `()Ljava.lang.String;`
     */
    String getBreakSound();

    /**
     * Declaring class: `net.minecraft.block.Block$SoundType`
     * Signature: `()Ljava.lang.String;`
     */
    String getPlaceSound();

    /**
     * Declaring class: `net.minecraft.block.Block$SoundType`
     * Signature: `()F`
     */
    float getFrequency();

    /**
     * Declaring class: `net.minecraft.block.Block$SoundType`
     * Signature: `()F`
     */
    float getVolume();
};


/**
 * Classpath: `net.minecraft.event.HoverEvent`
 * Package name: `net.minecraft.event`
 */
class HoverEvent : public Object {
protected:
    const inline static char *className = "net.minecraft.event.HoverEvent";
public:
    STATICINITIALIZE;

    HoverEvent(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.event.HoverEvent`
     * Signature: `()Lnet.minecraft.event.HoverEvent$Action;`
     */
    HoverEvent_Action getAction();

    /**
     * Declaring class: `net.minecraft.event.HoverEvent`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.event.HoverEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.event.HoverEvent`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.event.HoverEvent`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getValue();
};


/**
 * Classpath: `net.minecraft.event.HoverEvent$Action`
 * Enclosing class: `net.minecraft.event.HoverEvent`
 * Package name: `net.minecraft.event`
 */
class HoverEvent_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.event.HoverEvent$Action";
public:
    STATICINITIALIZE;

    HoverEvent_Action(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.event.HoverEvent$Action`
     * Signature: `()Z`
     */
    bool shouldAllowInChat();

    /**
     * Declaring class: `net.minecraft.event.HoverEvent$Action`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.event.HoverEvent$Action;`
     */
    static HoverEvent_Action getValueByCanonicalName(String arg0);

    /**
     * Declaring class: `net.minecraft.event.HoverEvent$Action`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.event.HoverEvent$Action;`
     */
    static HoverEvent_Action valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.event.HoverEvent$Action`
     * Signature: `()Ljava.lang.String;`
     */
    String getCanonicalName();
};


/**
 * Classpath: `net.minecraft.entity.EntityTracker`
 * Package name: `net.minecraft.entity`
 */
class EntityTracker : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.EntityTracker";
public:
    STATICINITIALIZE;

    EntityTracker(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.network.Packet;)V`
     */
    void sendToAllTrackingEntity(Entity arg0, Packet arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `()V`
     */
    void updateTrackedEntities();

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.chunk.Chunk;)V`
     */
    void func_85172_a(EntityPlayerMP arg0, Chunk arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void trackEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.Entity;II)V`
     */
    void trackEntity(Entity arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.Entity;IIZ)V`
     */
    void addEntityToTracker(Entity arg0, int arg1, int arg2, bool arg3);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void untrackEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void removePlayerFromTrackers(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.network.Packet;)V`
     */
    void func_151248_b(Entity arg0, Packet arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityTracker`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void func_180245_a(EntityPlayerMP arg0);
};


/**
 * Classpath: `net.minecraft.util.IProgressUpdate`
 * Package name: `net.minecraft.util`
 */
class IProgressUpdate : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.util.IProgressUpdate";
public:
    STATICINITIALIZE;

    IProgressUpdate(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.util.WeightedRandom$Item`
 * Enclosing class: `net.minecraft.util.WeightedRandom`
 * Package name: `net.minecraft.util`
 */
class WeightedRandom_Item : public Object {
protected:
    const inline static char *className = "net.minecraft.util.WeightedRandom$Item";
public:
    STATICINITIALIZE;

    WeightedRandom_Item(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.block.BlockEventData`
 * Package name: `net.minecraft.block`
 */
class BlockEventData : public Object {
protected:
    const inline static char *className = "net.minecraft.block.BlockEventData";
public:
    STATICINITIALIZE;

    BlockEventData(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.block.BlockEventData`
     * Signature: `()I`
     */
    int getEventParameter();

    /**
     * Declaring class: `net.minecraft.block.BlockEventData`
     * Signature: `()I`
     */
    int getEventID();

    /**
     * Declaring class: `net.minecraft.block.BlockEventData`
     * Signature: `()Lnet.minecraft.block.Block;`
     */
    Block getBlock();

    /**
     * Declaring class: `net.minecraft.block.BlockEventData`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.block.BlockEventData`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.block.BlockEventData`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getPosition();
};


/**
 * Classpath: `net.minecraft.server.management.PlayerManager`
 * Package name: `net.minecraft.server.management`
 */
class PlayerManager : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerManager";
public:
    STATICINITIALIZE;

    PlayerManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(I)V`
     */
    void setPlayerViewRadius(int arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `()Lnet.minecraft.world.WorldServer;`
     */
    WorldServer getWorldServer();

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(IIZ)Lnet.minecraft.server.management.PlayerManager$PlayerInstance;`
     */
    PlayerManager_PlayerInstance getPlayerInstance(int arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void filterChunkLoadQueue(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void removePlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void updateMountedMovingPlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;II)Z`
     */
    bool isPlayerWatchingChunk(EntityPlayerMP arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(I)I`
     */
    static int getFurthestViewableBlock(int arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void markBlockForUpdate(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `()V`
     */
    void updatePlayerInstances();

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(II)Z`
     */
    bool hasPlayerInstance(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void addPlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager`
     * Signature: `(IIIII)Z`
     */
    bool overlaps(int arg0, int arg1, int arg2, int arg3, int arg4);
};


/**
 * Classpath: `net.minecraft.server.management.PlayerManager$PlayerInstance`
 * Enclosing class: `net.minecraft.server.management.PlayerManager`
 * Package name: `net.minecraft.server.management`
 */
class PlayerManager_PlayerInstance : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerManager$PlayerInstance";
public:
    STATICINITIALIZE;

    PlayerManager_PlayerInstance(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `()V`
     */
    void processChunk();

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `(III)V`
     */
    void flagChunkForUpdate(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void removePlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `(Lnet.minecraft.world.chunk.Chunk;)V`
     */
    void increaseInhabitedTime(Chunk arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void addPlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `(Lnet.minecraft.network.Packet;)V`
     */
    void sendToAllPlayersWatchingChunk(Packet arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerManager$PlayerInstance`
     * Signature: `(Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void sendTileToAllPlayersWatchingChunk(TileEntity arg0);
};


/**
 * Classpath: `net.minecraft.world.Teleporter`
 * Package name: `net.minecraft.world`
 */
class Teleporter : public Object {
protected:
    const inline static char *className = "net.minecraft.world.Teleporter";
public:
    STATICINITIALIZE;

    Teleporter(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.Teleporter`
     * Signature: `(Lnet.minecraft.entity.Entity;F)V`
     */
    void placeInPortal(Entity arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.world.Teleporter`
     * Signature: `(Lnet.minecraft.entity.Entity;F)Z`
     */
    bool placeInExistingPortal(Entity arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.world.Teleporter`
     * Signature: `(J)V`
     */
    void removeStalePortalLocations(long arg0);

    /**
     * Declaring class: `net.minecraft.world.Teleporter`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool makePortal(Entity arg0);
};


/**
 * Classpath: `net.minecraft.server.MinecraftServer`
 * Package name: `net.minecraft.server`
 */
class MinecraftServer : public Object {
protected:
    const inline static char *className = "net.minecraft.server.MinecraftServer";
public:
    STATICINITIALIZE;

    MinecraftServer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.world.WorldSettings$GameType;`
     */
    WorldSettings_GameType getGameType();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setUserMessage(String arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isSinglePlayer();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void outputPercentRemaining(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isServerRunning();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void clearCurrentTask();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void setResourcePack(String arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setServerOwner(String arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setFolderName(String arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setWorldName(String arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void canCreateBonusChest(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(I)V`
     */
    void setBuildLimit(int arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.server.management.ServerConfigurationManager;)V`
     */
    void setConfigManager(ServerConfigurationManager arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.command.ServerCommandManager;`
     */
    ServerCommandManager createNewCommandManager();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;JLnet.minecraft.world.WorldType;Ljava.lang.String;)V`
     */
    void loadAllWorlds(String arg0, String arg1, long arg2, WorldType arg3, String arg4);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)V`
     */
    void convertMapIfNeeded(String arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.world.storage.ISaveFormat;`
     */
    ISaveFormat getActiveAnvilConverter();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getFolderName();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.world.storage.ISaveHandler;)V`
     */
    void setResourcePackFromWorld(String arg0, ISaveHandler arg1);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.world.EnumDifficulty;)V`
     */
    void setDifficultyForAllWorlds(EnumDifficulty arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void initialWorldChunkLoad();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     * Throws: `java.io.IOException`
     */
    bool startServer();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void setOnlineMode(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void setCanSpawnAnimals(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void setCanSpawnNPCs(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void setAllowPvp(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void setAllowFlight(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getServerOwner();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void saveAllWorlds(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool canStructuresSpawn();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool func_181034_q();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool func_183002_r();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.io.File;`
     */
    File getDataDirectory();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isDedicatedServer();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool func_181035_ah();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReport;`
     */
    CrashReport addServerInfoToCrashReport(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void setInstance();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isCommandBlockEnabled();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getOpPermissionLevel();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.network.ServerStatusResponse;)V`
     */
    void addFaviconToStatusResponse(ServerStatusResponse arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void systemExitNow();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void updateTimeLightAndEntities();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getCurrentPlayerCount();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getMinecraftVersion();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getServerModName();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.command.ICommandSender;Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Ljava.util.List;`
     */
    List getTabCompletions(ICommandSender arg0, String arg1, BlockPos arg2);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.command.ICommandManager;`
     */
    ICommandManager getCommandManager();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool allowSpawnMonsters();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void deleteWorldAndStopServer();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getResourcePackUrl();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getResourcePackHash();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool getGuiEnabled();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isServerInOnlineMode();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool getCanSpawnAnimals();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool getCanSpawnNPCs();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isPVPEnabled();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isFlightAllowed();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getBuildLimit();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isServerStopped();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getTickCounter();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void enableProfiling();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getSpawnProtectionSize();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool isBlockProtected(World arg0, BlockPos arg1, EntityPlayer arg2);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool getForceGamemode();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.net.Proxy;`
     */
    Proxy getServerProxy();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getMaxPlayerIdleMinutes();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(I)V`
     */
    void setPlayerIdleTimeout(int arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lcom.mojang.authlib.minecraft.MinecraftSessionService;`
     */
    MinecraftSessionService getMinecraftSessionService();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lcom.mojang.authlib.GameProfileRepository;`
     */
    GameProfileRepository getGameProfileRepository();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.server.management.PlayerProfileCache;`
     */
    PlayerProfileCache getPlayerProfileCache();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.network.ServerStatusResponse;`
     */
    ServerStatusResponse getServerStatusResponse();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void refreshStatusNextTick();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.util.UUID;)Lnet.minecraft.entity.Entity;`
     */
    Entity getEntityFromUuid(UUID arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getMaxWorldSize();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.util.concurrent.Callable;)Lcom.google.common.util.concurrent.ListenableFuture;`
     */
    ListenableFuture callFromMainThread(Callable arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getMaxPlayers();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.profiler.PlayerUsageSnooper;`
     */
    PlayerUsageSnooper getPlayerUsageSnooper();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;)V`
     */
    void setGameType(WorldSettings_GameType arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()J`
     */
    static long getCurrentTimeMillis();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool getAllowNether();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getWorldName();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(I)Lnet.minecraft.world.WorldServer;`
     */
    WorldServer worldServerForDimension(int arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.server.management.ServerConfigurationManager;`
     */
    ServerConfigurationManager getConfigurationManager();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.world.EnumDifficulty;`
     */
    EnumDifficulty getDifficulty();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void startServerThread();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getUserMessage();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool serverIsInRunLoop();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.network.NetworkSystem;`
     */
    NetworkSystem getNetworkSystem();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isAnvilFileSet();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void initiateShutdown();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isDemo();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)V`
     */
    void logWarning(String arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.security.KeyPair;`
     */
    KeyPair getKeyPair();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Lnet.minecraft.server.MinecraftServer;`
     */
    static MinecraftServer getServer();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Z)V`
     */
    void setDemo(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.security.KeyPair;)V`
     */
    void setKeyPair(KeyPair arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setMOTD(String arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isHardcore();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)V`
     */
    void finalTick(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;Z)Ljava.lang.String;`
     */
    String shareToLAN(WorldSettings_GameType arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Ljava.lang.String;`
     */
    String getMOTD();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void stopServer();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()V`
     */
    void tick();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()Z`
     */
    bool isAnnouncingPlayerAchievements();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `()I`
     */
    int getNetworkCompressionTreshold();

    /**
     * Declaring class: `net.minecraft.server.MinecraftServer`
     * Signature: `(Ljava.lang.String;)Ljava.io.File;`
     */
    File getFile(String arg0);
};


/**
 * Classpath: `net.minecraft.server.management.ServerConfigurationManager`
 * Package name: `net.minecraft.server.management`
 */
class ServerConfigurationManager : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.ServerConfigurationManager";
public:
    STATICINITIALIZE;

    ServerConfigurationManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound readPlayerDataFromFile(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()Lnet.minecraft.server.MinecraftServer;`
     */
    MinecraftServer getServerInstance();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.scoreboard.ServerScoreboard;Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void sendScoreboard(ServerScoreboard arg0, EntityPlayerMP arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void playerLoggedIn(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.WorldServer;)V`
     */
    void preparePlayer(EntityPlayerMP arg0, WorldServer arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void writePlayerData(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void playerLoggedOut(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Ljava.net.SocketAddress;Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;`
     */
    String allowUserToConnect(SocketAddress arg0, GameProfile arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Z`
     */
    bool func_183023_f(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Lnet.minecraft.entity.player.EntityPlayerMP;`
     */
    EntityPlayerMP createPlayerForUser(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;IZ)Lnet.minecraft.entity.player.EntityPlayerMP;`
     */
    EntityPlayerMP recreatePlayerEntity(EntityPlayerMP arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void syncPlayerInventory(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayerMP;`
     */
    EntityPlayerMP getPlayerByUsername(String arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Z)Ljava.lang.String;`
     */
    String func_181058_b(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()Lnet.minecraft.server.management.UserListBans;`
     */
    UserListBans getBannedPlayers();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()Lnet.minecraft.server.management.BanList;`
     */
    BanList getBannedIPs();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;DDDDILnet.minecraft.network.Packet;)V`
     */
    void sendToAllNearExcept(EntityPlayer arg0, double arg1, double arg2, double arg3, double arg4, int arg5, Packet arg6);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)V`
     */
    void addWhitelistedPlayer(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)V`
     */
    void removePlayerFromWhitelist(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()Lnet.minecraft.server.management.UserListWhitelist;`
     */
    UserListWhitelist getWhitelistedPlayers();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()V`
     */
    void loadWhiteList();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Z)V`
     */
    void setWhiteListEnabled(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Ljava.lang.String;)Ljava.util.List;`
     */
    List getPlayersMatchingAddress(String arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.util.IChatComponent;Z)V`
     */
    void sendChatMsgImpl(IChatComponent arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Ljava.util.UUID;)Lnet.minecraft.entity.player.EntityPlayerMP;`
     */
    EntityPlayerMP getPlayerByUUID(UUID arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()V`
     */
    void removeAllPlayers();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `([Lnet.minecraft.world.WorldServer;)V`
     */
    void setPlayerManager(WorldServer_interface arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()V`
     */
    void saveAllPlayerData();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()I`
     */
    int getViewDistance();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(I)V`
     */
    void setViewDistance(int arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Z)V`
     */
    void setCommandsAllowedForAll(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()I`
     */
    int getCurrentPlayerCount();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()Ljava.util.List;`
     */
    List func_181057_v();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.stats.StatisticsFile;`
     */
    StatisticsFile getPlayerStatsFile(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void sendChatMsg(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;I)V`
     */
    void transferPlayerToDimension(EntityPlayerMP arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()I`
     */
    int getMaxPlayers();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()I`
     */
    int getEntityViewDistance();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getHostPlayerData();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(DDDDILnet.minecraft.network.Packet;)V`
     */
    void sendToAllNear(double arg0, double arg1, double arg2, double arg3, int arg4, Packet arg5);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.network.Packet;)V`
     */
    void sendPacketToAllPlayers(Packet arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Z`
     */
    bool canSendCommands(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()Lnet.minecraft.server.management.UserListOps;`
     */
    UserListOps getOppedPlayers();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;)V`
     */
    void setGameType(WorldSettings_GameType arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.Entity;ILnet.minecraft.world.WorldServer;Lnet.minecraft.world.WorldServer;)V`
     */
    void transferEntityToWorld(Entity arg0, int arg1, WorldServer arg2, WorldServer arg3);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `()V`
     */
    void onTick();

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Z`
     */
    bool canJoin(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)V`
     */
    void addOp(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)V`
     */
    void removeOp(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.network.Packet;I)V`
     */
    void sendPacketToAllPlayersInDimension(Packet arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void serverUpdateMountedMovingPlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.IChatComponent;)V`
     */
    void sendMessageToAllTeamMembers(EntityPlayer arg0, IChatComponent arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.IChatComponent;)V`
     */
    void sendMessageToTeamOrEvryPlayer(EntityPlayer arg0, IChatComponent arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.network.NetworkManager;Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void initializeConnectionToPlayer(NetworkManager arg0, EntityPlayerMP arg1);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.World;)V`
     */
    void setPlayerGameTypeBasedOnOther(EntityPlayerMP arg0, EntityPlayerMP arg1, World arg2);

    /**
     * Declaring class: `net.minecraft.server.management.ServerConfigurationManager`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.WorldServer;)V`
     */
    void updateTimeAndWeatherForPlayer(EntityPlayerMP arg0, WorldServer arg1);
};


/**
 * Classpath: `net.minecraft.scoreboard.ServerScoreboard`
 * Package name: `net.minecraft.scoreboard`
 */
class ServerScoreboard : public Scoreboard {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ServerScoreboard";
public:
    STATICINITIALIZE;

    ServerScoreboard(jobject object) : Scoreboard(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `()V`
     */
    void func_96551_b();

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)I`
     */
    int func_96552_h(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void getPlayerIterator(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void func_96549_e(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)Ljava.util.List;`
     */
    List func_96550_d(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)Ljava.util.List;`
     */
    List func_96548_f(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreboardSaveData;)V`
     */
    void func_96547_a(ScoreboardSaveData arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(ILnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void setObjectiveInDisplaySlot(int arg0, ScoreObjective arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Z`
     */
    bool addPlayerToTeam(String arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void removePlayerFromTeam(String arg0, ScorePlayerTeam arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void onScoreObjectiveAdded(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Ljava.lang.String;)V`
     */
    void func_96516_a(String arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void func_178820_a(String arg0, ScoreObjective arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void func_96533_c(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void broadcastTeamCreated(ScorePlayerTeam arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void func_96513_c(ScorePlayerTeam arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScoreObjective;)V`
     */
    void func_96532_b(ScoreObjective arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.Score;)V`
     */
    void func_96536_a(Score arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ServerScoreboard`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V`
     */
    void sendTeamUpdate(ScorePlayerTeam arg0);
};


/**
 * Classpath: `net.minecraft.scoreboard.ScoreboardSaveData`
 * Package name: `net.minecraft.scoreboard`
 */
class ScoreboardSaveData : public WorldSavedData {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ScoreboardSaveData";
public:
    STATICINITIALIZE;

    ScoreboardSaveData(jobject object) : WorldSavedData(object) {}


    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagList;)V`
     */
    void readObjectives(NBTTagList arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readDisplayConfig(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.scoreboard.ScorePlayerTeam;Lnet.minecraft.nbt.NBTTagList;)V`
     */
    void func_96502_a(ScorePlayerTeam arg0, NBTTagList arg1);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `()Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList objectivesToNbt();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `()Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList scoresToNbt();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `()Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList func_96496_a();

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void func_96497_d(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.scoreboard.Scoreboard;)V`
     */
    void setScoreboard(Scoreboard arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagList;)V`
     */
    void readScores(NBTTagList arg0);

    /**
     * Declaring class: `net.minecraft.scoreboard.ScoreboardSaveData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagList;)V`
     */
    void readTeams(NBTTagList arg0);
};


/**
 * Classpath: `com.google.gson.JsonElement`
 * Package name: `com.google.gson`
 */
class JsonElement : public Object {
protected:
    const inline static char *className = "com.google.gson.JsonElement";
public:
    STATICINITIALIZE;

    JsonElement(jobject object) : Object(object) {}


    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Ljava.lang.String;`
     */
    String getAsString();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Z`
     */
    bool getAsBoolean();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Lcom.google.gson.JsonArray;`
     */
    JsonArray getAsJsonArray();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Z`
     */
    bool isJsonArray();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Lcom.google.gson.JsonNull;`
     */
    JsonNull getAsJsonNull();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Ljava.lang.Boolean;`
     */
    Boolean getAsBooleanWrapper();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Ljava.lang.Number;`
     */
    Number getAsNumber();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()C`
     */
    char getAsCharacter();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal getAsBigDecimal();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger getAsBigInteger();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Z`
     */
    bool isJsonObject();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Lcom.google.gson.JsonObject;`
     */
    JsonObject getAsJsonObject();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Z`
     */
    bool isJsonPrimitive();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Lcom.google.gson.JsonPrimitive;`
     */
    JsonPrimitive getAsJsonPrimitive();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Lcom.google.gson.JsonElement;`
     */
    JsonElement deepCopy();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Z`
     */
    bool isJsonNull();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()F`
     */
    float getAsFloat();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()B`
     */
    byte getAsByte();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()S`
     */
    short getAsShort();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()D`
     */
    double getAsDouble();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()I`
     */
    int getAsInt();

    /**
     * Declaring class: `com.google.gson.JsonElement`
     * Signature: `()J`
     */
    long getAsLong();
};


/**
 * Classpath: `com.google.gson.JsonArray`
 * Package name: `com.google.gson`
 */
class JsonArray : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonArray";
public:
    STATICINITIALIZE;

    JsonArray(jobject object) : JsonElement(object) {}


    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()Ljava.lang.String;`
     */
    String getAsString();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()Z`
     */
    bool getAsBoolean();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()Ljava.lang.Number;`
     */
    Number getAsNumber();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()C`
     */
    char getAsCharacter();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal getAsBigDecimal();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger getAsBigInteger();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()Lcom.google.gson.JsonArray;`
     */
    JsonArray deepCopy();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()F`
     */
    float getAsFloat();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()B`
     */
    byte getAsByte();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()S`
     */
    short getAsShort();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `(Lcom.google.gson.JsonElement;)V`
     */
    void add(JsonElement arg0);

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `(I)Lcom.google.gson.JsonElement;`
     */
    JsonElement get(int arg0);

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()I`
     */
    int size();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `(Lcom.google.gson.JsonArray;)V`
     */
    void addAll(JsonArray arg0);

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()D`
     */
    double getAsDouble();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()I`
     */
    int getAsInt();

    /**
     * Declaring class: `com.google.gson.JsonArray`
     * Signature: `()J`
     */
    long getAsLong();
};


/**
 * Classpath: `com.google.gson.JsonNull`
 * Package name: `com.google.gson`
 */
class JsonNull : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonNull";
public:
    STATICINITIALIZE;

    JsonNull(jobject object) : JsonElement(object) {}


    /**
     * Declaring class: `com.google.gson.JsonNull`
     * Signature: `()Lcom.google.gson.JsonNull;`
     */
    JsonNull deepCopy();

    /**
     * Declaring class: `com.google.gson.JsonNull`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `com.google.gson.JsonNull`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `com.google.gson.JsonPrimitive`
 * Package name: `com.google.gson`
 */
class JsonPrimitive : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonPrimitive";
public:
    STATICINITIALIZE;

    JsonPrimitive(jobject object) : JsonElement(object) {}


    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Ljava.lang.String;`
     */
    String getAsString();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Z`
     */
    bool getAsBoolean();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Ljava.lang.Boolean;`
     */
    Boolean getAsBooleanWrapper();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Ljava.lang.Number;`
     */
    Number getAsNumber();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()C`
     */
    char getAsCharacter();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Ljava.math.BigDecimal;`
     */
    BigDecimal getAsBigDecimal();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Ljava.math.BigInteger;`
     */
    BigInteger getAsBigInteger();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    static bool isPrimitiveOrString(Object arg0);

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Z`
     */
    bool isNumber();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Lcom.google.gson.JsonPrimitive;`
     */
    JsonPrimitive deepCopy();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()F`
     */
    float getAsFloat();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()B`
     */
    byte getAsByte();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()S`
     */
    short getAsShort();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Z`
     */
    bool isBoolean();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()Z`
     */
    bool isString();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void setValue(Object arg0);

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()D`
     */
    double getAsDouble();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()I`
     */
    int getAsInt();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `()J`
     */
    long getAsLong();

    /**
     * Declaring class: `com.google.gson.JsonPrimitive`
     * Signature: `(Lcom.google.gson.JsonPrimitive;)Z`
     */
    static bool isIntegral(JsonPrimitive arg0);
};


/**
 * Classpath: `net.minecraft.server.management.UserListEntry`
 * Package name: `net.minecraft.server.management`
 */
class UserListEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListEntry";
public:
    STATICINITIALIZE;

    UserListEntry(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.UserListEntry`
     * Signature: `()Z`
     */
    bool hasBanExpired();

    /**
     * Declaring class: `net.minecraft.server.management.UserListEntry`
     * Signature: `(Lcom.google.gson.JsonObject;)V`
     */
    void onSerialization(JsonObject arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListEntry`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getValue();
};


/**
 * Classpath: `net.minecraft.server.management.UserList`
 * Package name: `net.minecraft.server.management`
 */
class UserList : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.UserList";
public:
    STATICINITIALIZE;

    UserList(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `(Z)V`
     */
    void setLanServer(bool arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;`
     */
    UserListEntry createEntry(JsonObject arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.String;`
     */
    String getObjectKey(Object arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `()Z`
     */
    bool isLanServer();

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void writeChanges();

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `()V`
     */
    void removeExpired();

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool hasEntry(Object arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `()Ljava.util.Map;`
     */
    Map getValues();

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `(Lnet.minecraft.server.management.UserListEntry;)V`
     */
    void addEntry(UserListEntry arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void removeEntry(Object arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserList`
     * Signature: `(Ljava.lang.Object;)Lnet.minecraft.server.management.UserListEntry;`
     */
    UserListEntry getEntry(Object arg0);
};


/**
 * Classpath: `net.minecraft.server.management.BanList`
 * Package name: `net.minecraft.server.management`
 */
class BanList : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.BanList";
public:
    STATICINITIALIZE;

    BanList(jobject object) : UserList(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.BanList`
     * Signature: `(Ljava.net.SocketAddress;)Lnet.minecraft.server.management.IPBanEntry;`
     */
    IPBanEntry getBanEntry(SocketAddress arg0);

    /**
     * Declaring class: `net.minecraft.server.management.BanList`
     * Signature: `(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;`
     */
    UserListEntry createEntry(JsonObject arg0);

    /**
     * Declaring class: `net.minecraft.server.management.BanList`
     * Signature: `(Ljava.net.SocketAddress;)Ljava.lang.String;`
     */
    String addressToString(SocketAddress arg0);

    /**
     * Declaring class: `net.minecraft.server.management.BanList`
     * Signature: `(Ljava.net.SocketAddress;)Z`
     */
    bool isBanned(SocketAddress arg0);
};


/**
 * Classpath: `net.minecraft.server.management.BanEntry`
 * Package name: `net.minecraft.server.management`
 */
class BanEntry : public UserListEntry {
protected:
    const inline static char *className = "net.minecraft.server.management.BanEntry";
public:
    STATICINITIALIZE;

    BanEntry(jobject object) : UserListEntry(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.BanEntry`
     * Signature: `()Ljava.lang.String;`
     */
    String getBanReason();

    /**
     * Declaring class: `net.minecraft.server.management.BanEntry`
     * Signature: `()Ljava.util.Date;`
     */
    Date getBanEndDate();

    /**
     * Declaring class: `net.minecraft.server.management.BanEntry`
     * Signature: `()Z`
     */
    bool hasBanExpired();

    /**
     * Declaring class: `net.minecraft.server.management.BanEntry`
     * Signature: `(Lcom.google.gson.JsonObject;)V`
     */
    void onSerialization(JsonObject arg0);
};


/**
 * Classpath: `net.minecraft.server.management.UserListWhitelist`
 * Package name: `net.minecraft.server.management`
 */
class UserListWhitelist : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListWhitelist";
public:
    STATICINITIALIZE;

    UserListWhitelist(jobject object) : UserList(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.UserListWhitelist`
     * Signature: `(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;`
     */
    UserListEntry createEntry(JsonObject arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListWhitelist`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;`
     */
    String getObjectKey(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListWhitelist`
     * Signature: `(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile func_152706_a(String arg0);
};


/**
 * Classpath: `[Lnet.minecraft.world.WorldServer;`
 */
class WorldServer_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.world.WorldServer;";
public:
    STATICINITIALIZE;

    WorldServer_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.stats.StatFileWriter`
 * Package name: `net.minecraft.stats`
 */
class StatFileWriter : public Object {
protected:
    const inline static char *className = "net.minecraft.stats.StatFileWriter";
public:
    STATICINITIALIZE;

    StatFileWriter(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.stats.Achievement;)I`
     */
    int func_150874_c(Achievement arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.stats.Achievement;)Z`
     */
    bool hasAchievementUnlocked(Achievement arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.stats.StatBase;)Lnet.minecraft.util.IJsonSerializable;`
     */
    IJsonSerializable func_150870_b(StatBase arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.stats.StatBase;Lnet.minecraft.util.IJsonSerializable;)Lnet.minecraft.util.IJsonSerializable;`
     */
    IJsonSerializable func_150872_a(StatBase arg0, IJsonSerializable arg1);

    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.stats.Achievement;)Z`
     */
    bool canUnlockAchievement(Achievement arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.stats.StatBase;I)V`
     */
    void unlockAchievement(EntityPlayer arg0, StatBase arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.stats.StatBase;I)V`
     */
    void increaseStat(EntityPlayer arg0, StatBase arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.stats.StatFileWriter`
     * Signature: `(Lnet.minecraft.stats.StatBase;)I`
     */
    int readStat(StatBase arg0);
};


/**
 * Classpath: `net.minecraft.stats.Achievement`
 * Package name: `net.minecraft.stats`
 */
class Achievement : public StatBase {
protected:
    const inline static char *className = "net.minecraft.stats.Achievement";
public:
    STATICINITIALIZE;

    Achievement(jobject object) : StatBase(object) {}


    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `()Lnet.minecraft.stats.Achievement;`
     */
    Achievement initIndependentStat();

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `()Lnet.minecraft.stats.Achievement;`
     */
    Achievement registerStat();

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `(Ljava.lang.Class;)Lnet.minecraft.stats.Achievement;`
     */
    Achievement func_150953_b(Class arg0);

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `(Lnet.minecraft.stats.IStatStringFormat;)Lnet.minecraft.stats.Achievement;`
     */
    Achievement setStatStringFormatter(IStatStringFormat arg0);

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getStatName();

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `()Z`
     */
    bool isAchievement();

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `()Lnet.minecraft.stats.Achievement;`
     */
    Achievement setSpecial();

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `()Z`
     */
    bool getSpecial();

    /**
     * Declaring class: `net.minecraft.stats.Achievement`
     * Signature: `()Ljava.lang.String;`
     */
    String getDescription();
};


/**
 * Classpath: `net.minecraft.stats.IStatStringFormat`
 * Package name: `net.minecraft.stats`
 */
class IStatStringFormat : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.stats.IStatStringFormat";
public:
    STATICINITIALIZE;

    IStatStringFormat(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.util.IJsonSerializable`
 * Package name: `net.minecraft.util`
 */
class IJsonSerializable : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.util.IJsonSerializable";
public:
    STATICINITIALIZE;

    IJsonSerializable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.server.management.UserListOps`
 * Package name: `net.minecraft.server.management`
 */
class UserListOps : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListOps";
public:
    STATICINITIALIZE;

    UserListOps(jobject object) : UserList(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.UserListOps`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Z`
     */
    bool func_183026_b(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListOps`
     * Signature: `(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;`
     */
    UserListEntry createEntry(JsonObject arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListOps`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;`
     */
    String getObjectKey(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListOps`
     * Signature: `(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getGameProfileFromName(String arg0);
};


/**
 * Classpath: `net.minecraft.network.EnumConnectionState`
 * Package name: `net.minecraft.network`
 */
class EnumConnectionState : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.EnumConnectionState";
public:
    STATICINITIALIZE;

    EnumConnectionState(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.network.EnumConnectionState`
     * Signature: `(Lnet.minecraft.network.EnumPacketDirection;Ljava.lang.Class;)Lnet.minecraft.network.EnumConnectionState;`
     */
    EnumConnectionState registerPacket(EnumPacketDirection arg0, Class arg1);

    /**
     * Declaring class: `net.minecraft.network.EnumConnectionState`
     * Signature: `(Lnet.minecraft.network.EnumPacketDirection;Lnet.minecraft.network.Packet;)Ljava.lang.Integer;`
     */
    Integer getPacketId(EnumPacketDirection arg0, Packet arg1);

    /**
     * Declaring class: `net.minecraft.network.EnumConnectionState`
     * Signature: `(Lnet.minecraft.network.Packet;)Lnet.minecraft.network.EnumConnectionState;`
     */
    static EnumConnectionState getFromPacket(Packet arg0);

    /**
     * Declaring class: `net.minecraft.network.EnumConnectionState`
     * Signature: `(Lnet.minecraft.network.EnumPacketDirection;I)Lnet.minecraft.network.Packet;`
     * Throws: `java.lang.InstantiationException, java.lang.IllegalAccessException`
     */
    Packet getPacket(EnumPacketDirection arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.EnumConnectionState`
     * Signature: `(I)Lnet.minecraft.network.EnumConnectionState;`
     */
    static EnumConnectionState getById(int arg0);

    /**
     * Declaring class: `net.minecraft.network.EnumConnectionState`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.network.EnumConnectionState;`
     */
    static EnumConnectionState valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.network.EnumConnectionState`
     * Signature: `()I`
     */
    int getId();
};


/**
 * Classpath: `net.minecraft.network.EnumPacketDirection`
 * Package name: `net.minecraft.network`
 */
class EnumPacketDirection : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.EnumPacketDirection";
public:
    STATICINITIALIZE;

    EnumPacketDirection(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.network.EnumPacketDirection`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.network.EnumPacketDirection;`
     */
    static EnumPacketDirection valueOf(String arg0);
};


/**
 * Classpath: `java.lang.Integer`
 * Package name: `java.lang`
 */
class Integer : public Number {
protected:
    const inline static char *className = "java.lang.Integer";
public:
    STATICINITIALIZE;

    Integer(jobject object) : Number(object) {}


    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int numberOfLeadingZeros(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int numberOfTrailingZeros(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int bitCount(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String toString(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)Ljava.lang.String;`
     */
    static String toString(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int hashCode(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int min(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int max(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int signum(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int reverseBytes(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II[B)I`
     */
    static int getChars(int arg0, int arg1, arr_B arg2);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int compare(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()B`
     */
    byte byteValue();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()S`
     */
    short shortValue();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()I`
     */
    int intValue();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()J`
     */
    long longValue();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()F`
     */
    float floatValue();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `()D`
     */
    double doubleValue();

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;I)Ljava.lang.Integer;`
     * Throws: `java.lang.NumberFormatException`
     */
    static Integer valueOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Integer;`
     * Throws: `java.lang.NumberFormatException`
     */
    static Integer valueOf(String arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)Ljava.lang.Integer;`
     */
    static Integer valueOf(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String toHexString(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Integer;`
     * Throws: `java.lang.NumberFormatException`
     */
    static Integer decode(String arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Integer;`
     */
    Integer resolveConstantDesc(MethodHandles_Lookup arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int reverse(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int stringSize(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)J`
     */
    static long toUnsignedLong(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int sum(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.CharSequence;III)I`
     * Throws: `java.lang.NumberFormatException`
     */
    static int parseInt(CharSequence arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;)I`
     * Throws: `java.lang.NumberFormatException`
     */
    static int parseInt(String arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;I)I`
     * Throws: `java.lang.NumberFormatException`
     */
    static int parseInt(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int compareUnsigned(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)Ljava.lang.String;`
     */
    static String toStringUTF16(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)Ljava.lang.String;`
     */
    static String toUnsignedString(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String toUnsignedString(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)Ljava.lang.String;`
     */
    static String toUnsignedString0(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II[BI)V`
     */
    static void formatUnsignedInt(int arg0, int arg1, arr_B arg2, int arg3);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II[BI)V`
     */
    static void formatUnsignedIntUTF16(int arg0, int arg1, arr_B arg2, int arg3);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;I)I`
     * Throws: `java.lang.NumberFormatException`
     */
    static int parseUnsignedInt(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.CharSequence;III)I`
     * Throws: `java.lang.NumberFormatException`
     */
    static int parseUnsignedInt(CharSequence arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;)I`
     * Throws: `java.lang.NumberFormatException`
     */
    static int parseUnsignedInt(String arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;Ljava.lang.Integer;)Ljava.lang.Integer;`
     */
    static Integer getInteger(String arg0, Integer arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Integer;`
     */
    static Integer getInteger(String arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(Ljava.lang.String;I)Ljava.lang.Integer;`
     */
    static Integer getInteger(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String toOctalString(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String toBinaryString(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int divideUnsigned(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int remainderUnsigned(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int highestOneBit(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(I)I`
     */
    static int lowestOneBit(int arg0);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int rotateLeft(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.Integer`
     * Signature: `(II)I`
     */
    static int rotateRight(int arg0, int arg1);
};


/**
 * Classpath: `io.netty.channel.ChannelHandlerContext`
 * Package name: `io.netty.channel`
 */
class ChannelHandlerContext : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelHandlerContext";
public:
    STATICINITIALIZE;

    ChannelHandlerContext(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Lio.netty.util.concurrent.GenericFutureListener;`
 */
class GenericFutureListener_interface : public Object {
protected:
    const inline static char *className = "[Lio.netty.util.concurrent.GenericFutureListener;";
public:
    STATICINITIALIZE;

    GenericFutureListener_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `javax.crypto.SecretKey`
 * Package name: `javax.crypto`
 */
class SecretKey : public JavaObject {
protected:
    const inline static char *className = "javax.crypto.SecretKey";
public:
    STATICINITIALIZE;

    SecretKey(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.network.INetHandler`
 * Package name: `net.minecraft.network`
 */
class INetHandler : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.network.INetHandler";
public:
    STATICINITIALIZE;

    INetHandler(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `io.netty.util.concurrent.GenericFutureListener`
 * Package name: `io.netty.util.concurrent`
 */
class GenericFutureListener : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.concurrent.GenericFutureListener";
public:
    STATICINITIALIZE;

    GenericFutureListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `io.netty.channel.ChannelHandlerAdapter`
 * Package name: `io.netty.channel`
 */
class ChannelHandlerAdapter : public Object {
protected:
    const inline static char *className = "io.netty.channel.ChannelHandlerAdapter";
public:
    STATICINITIALIZE;

    ChannelHandlerAdapter(jobject object) : Object(object) {}


    /**
     * Declaring class: `io.netty.channel.ChannelHandlerAdapter`
     * Signature: `()Z`
     */
    bool isSharable();
};


/**
 * Classpath: `net.minecraft.command.CommandHandler`
 * Package name: `net.minecraft.command`
 */
class CommandHandler : public Object {
protected:
    const inline static char *className = "net.minecraft.command.CommandHandler";
public:
    STATICINITIALIZE;

    CommandHandler(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.command.CommandHandler`
     * Signature: `(Lnet.minecraft.command.ICommand;[Ljava.lang.String;)I`
     */
    int getUsernameIndex(ICommand arg0, String_interface arg1);

    /**
     * Declaring class: `net.minecraft.command.CommandHandler`
     * Signature: `(Lnet.minecraft.command.ICommand;)Lnet.minecraft.command.ICommand;`
     */
    ICommand registerCommand(ICommand arg0);

    /**
     * Declaring class: `net.minecraft.command.CommandHandler`
     * Signature: `(Lnet.minecraft.command.ICommandSender;[Ljava.lang.String;Lnet.minecraft.command.ICommand;Ljava.lang.String;)Z`
     */
    bool tryExecute(ICommandSender arg0, String_interface arg1, ICommand arg2, String arg3);
};


/**
 * Classpath: `net.minecraft.command.ICommand`
 * Package name: `net.minecraft.command`
 */
class ICommand : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.command.ICommand";
public:
    STATICINITIALIZE;

    ICommand(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.world.storage.ISaveFormat`
 * Package name: `net.minecraft.world.storage`
 */
class ISaveFormat : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.storage.ISaveFormat";
public:
    STATICINITIALIZE;

    ISaveFormat(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.network.ServerStatusResponse`
 * Package name: `net.minecraft.network`
 */
class ServerStatusResponse : public Object {
protected:
    const inline static char *className = "net.minecraft.network.ServerStatusResponse";
public:
    STATICINITIALIZE;

    ServerStatusResponse(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getServerDescription();

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `()Lnet.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier;`
     */
    ServerStatusResponse_MinecraftProtocolVersionIdentifier getProtocolVersionInfo();

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `(Lnet.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier;)V`
     */
    void setProtocolVersionInfo(ServerStatusResponse_MinecraftProtocolVersionIdentifier arg0);

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `(Lnet.minecraft.network.ServerStatusResponse$PlayerCountData;)V`
     */
    void setPlayerCountData(ServerStatusResponse_PlayerCountData arg0);

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `()Lnet.minecraft.network.ServerStatusResponse$PlayerCountData;`
     */
    ServerStatusResponse_PlayerCountData getPlayerCountData();

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void setServerDescription(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setFavicon(String arg0);

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse`
     * Signature: `()Ljava.lang.String;`
     */
    String getFavicon();
};


/**
 * Classpath: `net.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier`
 * Enclosing class: `net.minecraft.network.ServerStatusResponse`
 * Package name: `net.minecraft.network`
 */
class ServerStatusResponse_MinecraftProtocolVersionIdentifier : public Object {
protected:
    const inline static char *className = "net.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier";
public:
    STATICINITIALIZE;

    ServerStatusResponse_MinecraftProtocolVersionIdentifier(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier`
     * Signature: `()I`
     */
    int getProtocol();
};


/**
 * Classpath: `net.minecraft.network.ServerStatusResponse$PlayerCountData`
 * Enclosing class: `net.minecraft.network.ServerStatusResponse`
 * Package name: `net.minecraft.network`
 */
class ServerStatusResponse_PlayerCountData : public Object {
protected:
    const inline static char *className = "net.minecraft.network.ServerStatusResponse$PlayerCountData";
public:
    STATICINITIALIZE;

    ServerStatusResponse_PlayerCountData(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse$PlayerCountData`
     * Signature: `()I`
     */
    int getMaxPlayers();

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse$PlayerCountData`
     * Signature: `()I`
     */
    int getOnlinePlayerCount();

    /**
     * Declaring class: `net.minecraft.network.ServerStatusResponse$PlayerCountData`
     * Signature: `([Lcom.mojang.authlib.GameProfile;)V`
     */
    void setPlayers(GameProfile_interface arg0);
};


/**
 * Classpath: `[Lcom.mojang.authlib.GameProfile;`
 */
class GameProfile_interface : public Object {
protected:
    const inline static char *className = "[Lcom.mojang.authlib.GameProfile;";
public:
    STATICINITIALIZE;

    GameProfile_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.command.ICommandManager`
 * Package name: `net.minecraft.command`
 */
class ICommandManager : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.command.ICommandManager";
public:
    STATICINITIALIZE;

    ICommandManager(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `com.mojang.authlib.minecraft.MinecraftSessionService`
 * Package name: `com.mojang.authlib.minecraft`
 */
class MinecraftSessionService : public JavaObject {
protected:
    const inline static char *className = "com.mojang.authlib.minecraft.MinecraftSessionService";
public:
    STATICINITIALIZE;

    MinecraftSessionService(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `com.mojang.authlib.GameProfileRepository`
 * Package name: `com.mojang.authlib`
 */
class GameProfileRepository : public JavaObject {
protected:
    const inline static char *className = "com.mojang.authlib.GameProfileRepository";
public:
    STATICINITIALIZE;

    GameProfileRepository(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.server.management.PlayerProfileCache`
 * Package name: `net.minecraft.server.management`
 */
class PlayerProfileCache : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerProfileCache";
public:
    STATICINITIALIZE;

    PlayerProfileCache(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `(Ljava.util.UUID;)Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getProfileByUUID(UUID arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getGameProfileForUsername(String arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `(I)Ljava.util.List;`
     */
    List getEntriesWithLimit(int arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `(Lnet.minecraft.server.MinecraftServer;Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;`
     */
    static GameProfile getGameProfile(MinecraftServer arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `(Ljava.util.UUID;)Lnet.minecraft.server.management.PlayerProfileCache$ProfileEntry;`
     */
    PlayerProfileCache_ProfileEntry getByUUID(UUID arg0);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `()V`
     */
    void load();

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `()V`
     */
    void save();

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `(Lcom.mojang.authlib.GameProfile;Ljava.util.Date;)V`
     */
    void addEntry(GameProfile arg0, Date arg1);

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)V`
     */
    void addEntry(GameProfile arg0);
};


/**
 * Classpath: `net.minecraft.server.management.PlayerProfileCache$ProfileEntry`
 * Enclosing class: `net.minecraft.server.management.PlayerProfileCache`
 * Package name: `net.minecraft.server.management`
 */
class PlayerProfileCache_ProfileEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerProfileCache$ProfileEntry";
public:
    STATICINITIALIZE;

    PlayerProfileCache_ProfileEntry(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache$ProfileEntry`
     * Signature: `()Ljava.util.Date;`
     */
    Date getExpirationDate();

    /**
     * Declaring class: `net.minecraft.server.management.PlayerProfileCache$ProfileEntry`
     * Signature: `()Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getGameProfile();
};


/**
 * Classpath: `com.google.common.util.concurrent.ListenableFuture`
 * Package name: `com.google.common.util.concurrent`
 */
class ListenableFuture : public JavaObject {
protected:
    const inline static char *className = "com.google.common.util.concurrent.ListenableFuture";
public:
    STATICINITIALIZE;

    ListenableFuture(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.profiler.PlayerUsageSnooper`
 * Package name: `net.minecraft.profiler`
 */
class PlayerUsageSnooper : public Object {
protected:
    const inline static char *className = "net.minecraft.profiler.PlayerUsageSnooper";
public:
    STATICINITIALIZE;

    PlayerUsageSnooper(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()V`
     */
    void func_152766_h();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()V`
     */
    void addJvmArgsToSnooper();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()Ljava.util.Map;`
     */
    Map getCurrentStats();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()V`
     */
    void stopSnooper();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    void addClientStat(String arg0, Object arg1);

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()Ljava.lang.String;`
     */
    String getUniqueID();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    void addStatToSnooper(String arg0, Object arg1);

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()V`
     */
    void addMemoryStatsToSnooper();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()Z`
     */
    bool isSnooperRunning();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()V`
     */
    void startSnooper();

    /**
     * Declaring class: `net.minecraft.profiler.PlayerUsageSnooper`
     * Signature: `()J`
     */
    long getMinecraftStartTimeMillis();
};


/**
 * Classpath: `net.minecraft.network.NetworkSystem`
 * Package name: `net.minecraft.network`
 */
class NetworkSystem : public Object {
protected:
    const inline static char *className = "net.minecraft.network.NetworkSystem";
public:
    STATICINITIALIZE;

    NetworkSystem(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.network.NetworkSystem`
     * Signature: `()V`
     */
    void terminateEndpoints();

    /**
     * Declaring class: `net.minecraft.network.NetworkSystem`
     * Signature: `(Ljava.net.InetAddress;I)V`
     * Throws: `java.io.IOException`
     */
    void addLanEndpoint(InetAddress arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.NetworkSystem`
     * Signature: `()V`
     */
    void networkTick();

    /**
     * Declaring class: `net.minecraft.network.NetworkSystem`
     * Signature: `()Ljava.net.SocketAddress;`
     */
    SocketAddress addLocalEndpoint();

    /**
     * Declaring class: `net.minecraft.network.NetworkSystem`
     * Signature: `()Lnet.minecraft.server.MinecraftServer;`
     */
    MinecraftServer getServer();
};


/**
 * Classpath: `java.security.KeyPair`
 * Package name: `java.security`
 */
class KeyPair : public Object {
protected:
    const inline static char *className = "java.security.KeyPair";
public:
    STATICINITIALIZE;

    KeyPair(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.security.KeyPair`
     * Signature: `()Ljava.security.PublicKey;`
     */
    PublicKey getPublic();

    /**
     * Declaring class: `java.security.KeyPair`
     * Signature: `()Ljava.security.PrivateKey;`
     */
    PrivateKey getPrivate();
};


/**
 * Classpath: `java.security.PublicKey`
 * Package name: `java.security`
 */
class PublicKey : public JavaObject {
protected:
    const inline static char *className = "java.security.PublicKey";
public:
    STATICINITIALIZE;

    PublicKey(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.security.PrivateKey`
 * Package name: `java.security`
 */
class PrivateKey : public JavaObject {
protected:
    const inline static char *className = "java.security.PrivateKey";
public:
    STATICINITIALIZE;

    PrivateKey(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.inventory.Container`
 * Package name: `net.minecraft.inventory`
 */
class Container : public Object {
protected:
    const inline static char *className = "net.minecraft.inventory.Container";
public:
    STATICINITIALIZE;

    Container(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.Slot;Lnet.minecraft.item.ItemStack;Z)Z`
     */
    static bool canAddItemToSlot(Slot arg0, ItemStack arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.Slot;)Z`
     */
    bool canDragIntoSlot(Slot arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Ljava.util.Set;ILnet.minecraft.item.ItemStack;I)V`
     */
    static void computeStackSize(Set arg0, int arg1, ItemStack arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.inventory.Slot;)Z`
     */
    bool canMergeSlot(ItemStack arg0, Slot arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(II)I`
     */
    static int func_94534_d(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.ICrafting;)V`
     */
    void onCraftGuiOpened(ICrafting arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `()V`
     */
    void detectAndSendChanges();

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(ILnet.minecraft.item.ItemStack;)V`
     */
    void putStackInSlot(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `([Lnet.minecraft.item.ItemStack;)V`
     */
    void putStacksInSlots(ItemStack_interface arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(II)V`
     */
    void updateProgressBar(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.Slot;)Lnet.minecraft.inventory.Slot;`
     */
    Slot addSlotToContainer(Slot arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.ICrafting;)V`
     */
    void removeCraftingFromCrafters(ICrafting arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;I)Z`
     */
    bool enchantItem(EntityPlayer arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.IInventory;I)Lnet.minecraft.inventory.Slot;`
     */
    Slot getSlotFromInventory(IInventory arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack transferStackInSlot(EntityPlayer arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(I)I`
     */
    static int getDragEvent(int arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(I)I`
     */
    static int extractDragMode(int arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(ILnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    static bool isValidDragMode(int arg0, EntityPlayer arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(IIZLnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void retrySlotClick(int arg0, int arg1, bool arg2, EntityPlayer arg3);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.IInventory;)V`
     */
    void onCraftMatrixChanged(IInventory arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.entity.player.InventoryPlayer;)S`
     */
    short getNextTransactionID(InventoryPlayer arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool getCanCraft(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Z)V`
     */
    void setCanCraft(EntityPlayer arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.item.ItemStack;IIZ)Z`
     */
    bool mergeItemStack(ItemStack arg0, int arg1, int arg2, bool arg3);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.inventory.IInventory;)I`
     */
    static int calcRedstoneFromInventory(IInventory arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.tileentity.TileEntity;)I`
     */
    static int calcRedstone(TileEntity arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool canInteractWith(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onContainerClosed(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `()Ljava.util.List;`
     */
    List getInventory();

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(IIILnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack slotClick(int arg0, int arg1, int arg2, EntityPlayer arg3);

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `()V`
     */
    void resetDrag();

    /**
     * Declaring class: `net.minecraft.inventory.Container`
     * Signature: `(I)Lnet.minecraft.inventory.Slot;`
     */
    Slot getSlot(int arg0);
};


/**
 * Classpath: `net.minecraft.inventory.Slot`
 * Package name: `net.minecraft.inventory`
 */
class Slot : public Object {
protected:
    const inline static char *className = "net.minecraft.inventory.Slot";
public:
    STATICINITIALIZE;

    Slot(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `()I`
     */
    int getSlotStackLimit();

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int getItemStackLimit(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `()Z`
     */
    bool canBeHovered();

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `()Z`
     */
    bool getHasStack();

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `()Ljava.lang.String;`
     */
    String getSlotTexture();

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool isItemValid(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool canTakeStack(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.item.ItemStack;)V`
     */
    void onPickupFromSlot(EntityPlayer arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `()V`
     */
    void onSlotChanged();

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)V`
     */
    void onSlotChange(ItemStack arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack decrStackSize(int arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.inventory.IInventory;I)Z`
     */
    bool isHere(IInventory arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void putStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.item.ItemStack;I)V`
     */
    void onCrafting(ItemStack arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void onCrafting(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.inventory.Slot`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getStack();
};


/**
 * Classpath: `net.minecraft.inventory.ICrafting`
 * Package name: `net.minecraft.inventory`
 */
class ICrafting : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.inventory.ICrafting";
public:
    STATICINITIALIZE;

    ICrafting(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Lnet.minecraft.item.ItemStack;`
 */
class ItemStack_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.item.ItemStack;";
public:
    STATICINITIALIZE;

    ItemStack_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.entity.player.InventoryPlayer`
 * Package name: `net.minecraft.entity.player`
 */
class InventoryPlayer : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.player.InventoryPlayer";
public:
    STATICINITIALIZE;

    InventoryPlayer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int storeItemStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.Item;IILnet.minecraft.nbt.NBTTagCompound;)I`
     */
    int clearMatchingItems(Item arg0, int arg1, int arg2, NBTTagCompound arg3);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int storePartialItemStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.Item;)Z`
     */
    bool consumeInventoryItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool hasItemStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void setItemStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getItemStack();

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool addItemStackToInventory(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `()I`
     */
    static int getHotbarSize();

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `()I`
     */
    int getFirstEmptyStack();

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `()V`
     */
    void decrementAnimations();

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `()V`
     */
    void dropAllItems();

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.block.Block;)F`
     */
    float getStrVsBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool canHeldItemHarvest(Block arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.nbt.NBTTagList;)V`
     */
    void readFromNBT(NBTTagList arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(F)V`
     */
    void damageArmor(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `()I`
     */
    int getTotalArmorValue();

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack armorItemInSlot(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.entity.player.InventoryPlayer;)V`
     */
    void copyInventory(InventoryPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getCurrentItem();

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(I)V`
     */
    void changeCurrentItem(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.Item;IZZ)V`
     */
    void setCurrentItem(Item arg0, int arg1, bool arg2, bool arg3);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.nbt.NBTTagList;)Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList writeToNBT(NBTTagList arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.Item;)Z`
     */
    bool hasItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.Item;)I`
     */
    int getInventorySlotContainItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.InventoryPlayer`
     * Signature: `(Lnet.minecraft.item.Item;I)I`
     */
    int getInventorySlotContainItemAndDamage(Item arg0, int arg1);
};


/**
 * Classpath: `net.minecraft.network.play.client.C15PacketClientSettings`
 * Package name: `net.minecraft.network.play.client`
 */
class C15PacketClientSettings : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C15PacketClientSettings";
public:
    STATICINITIALIZE;

    C15PacketClientSettings(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.network.play.client.C15PacketClientSettings`
     * Signature: `()Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;`
     */
    EntityPlayer_EnumChatVisibility getChatVisibility();

    /**
     * Declaring class: `net.minecraft.network.play.client.C15PacketClientSettings`
     * Signature: `()Z`
     */
    bool isColorsEnabled();

    /**
     * Declaring class: `net.minecraft.network.play.client.C15PacketClientSettings`
     * Signature: `()I`
     */
    int getModelPartFlags();

    /**
     * Declaring class: `net.minecraft.network.play.client.C15PacketClientSettings`
     * Signature: `()Ljava.lang.String;`
     */
    String getLang();
};


/**
 * Classpath: `net.minecraft.entity.player.EntityPlayer$EnumChatVisibility`
 * Enclosing class: `net.minecraft.entity.player.EntityPlayer`
 * Package name: `net.minecraft.entity.player`
 */
class EntityPlayer_EnumChatVisibility : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayer$EnumChatVisibility";
public:
    STATICINITIALIZE;

    EntityPlayer_EnumChatVisibility(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer$EnumChatVisibility`
     * Signature: `(I)Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;`
     */
    static EntityPlayer_EnumChatVisibility getEnumChatVisibility(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer$EnumChatVisibility`
     * Signature: `()Ljava.lang.String;`
     */
    String getResourceKey();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer$EnumChatVisibility`
     * Signature: `()I`
     */
    int getChatVisibility();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer$EnumChatVisibility`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;`
     */
    static EntityPlayer_EnumChatVisibility valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.entity.DataWatcher`
 * Package name: `net.minecraft.entity`
 */
class DataWatcher : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.DataWatcher";
public:
    STATICINITIALIZE;

    DataWatcher(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)Lnet.minecraft.entity.DataWatcher$WatchableObject;`
     */
    DataWatcher_WatchableObject getWatchedObject(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `()Z`
     */
    bool hasObjectChanged();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `()V`
     */
    void func_111144_e();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(II)V`
     */
    void addObjectByDataType(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)V`
     */
    void setObjectWatched(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)I`
     */
    int getWatchableObjectInt(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(ILjava.lang.Object;)V`
     */
    void updateObject(int arg0, Object arg1);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)B`
     */
    byte getWatchableObjectByte(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)F`
     */
    float getWatchableObjectFloat(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)S`
     */
    short getWatchableObjectShort(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getWatchableObjectString(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `()Ljava.util.List;`
     */
    List getAllWatched();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(ILjava.lang.Object;)V`
     */
    void addObject(int arg0, Object arg1);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `()Ljava.util.List;`
     */
    List getChanged();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `()Z`
     */
    bool getIsBlank();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)Lnet.minecraft.util.Rotations;`
     */
    Rotations getWatchableObjectRotations(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getWatchableObjectItemStack(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(Lnet.minecraft.network.PacketBuffer;Lnet.minecraft.entity.DataWatcher$WatchableObject;)V`
     * Throws: `java.io.IOException`
     */
    static void writeWatchableObjectToPacketBuffer(PacketBuffer arg0, DataWatcher_WatchableObject arg1);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(Lnet.minecraft.network.PacketBuffer;)Ljava.util.List;`
     * Throws: `java.io.IOException`
     */
    static List readWatchedListFromPacketBuffer(PacketBuffer arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(Ljava.util.List;Lnet.minecraft.network.PacketBuffer;)V`
     * Throws: `java.io.IOException`
     */
    static void writeWatchedListToPacketBuffer(List arg0, PacketBuffer arg1);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(Ljava.util.List;)V`
     */
    void updateWatchedObjectsFromList(List arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher`
     * Signature: `(Lnet.minecraft.network.PacketBuffer;)V`
     * Throws: `java.io.IOException`
     */
    void writeTo(PacketBuffer arg0);
};


/**
 * Classpath: `net.minecraft.entity.DataWatcher$WatchableObject`
 * Enclosing class: `net.minecraft.entity.DataWatcher`
 * Package name: `net.minecraft.entity`
 */
class DataWatcher_WatchableObject : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.DataWatcher$WatchableObject";
public:
    STATICINITIALIZE;

    DataWatcher_WatchableObject(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.DataWatcher$WatchableObject`
     * Signature: `()I`
     */
    int getDataValueId();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher$WatchableObject`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void setObject(Object arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher$WatchableObject`
     * Signature: `(Z)V`
     */
    void setWatched(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher$WatchableObject`
     * Signature: `()Z`
     */
    bool isWatched();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher$WatchableObject`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getObject();

    /**
     * Declaring class: `net.minecraft.entity.DataWatcher$WatchableObject`
     * Signature: `()I`
     */
    int getObjectType();
};


/**
 * Classpath: `net.minecraft.util.Rotations`
 * Package name: `net.minecraft.util`
 */
class Rotations : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Rotations";
public:
    STATICINITIALIZE;

    Rotations(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.Rotations`
     * Signature: `()F`
     */
    float getX();

    /**
     * Declaring class: `net.minecraft.util.Rotations`
     * Signature: `()F`
     */
    float getY();

    /**
     * Declaring class: `net.minecraft.util.Rotations`
     * Signature: `()F`
     */
    float getZ();

    /**
     * Declaring class: `net.minecraft.util.Rotations`
     * Signature: `()Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList writeToNBT();

    /**
     * Declaring class: `net.minecraft.util.Rotations`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);
};


/**
 * Classpath: `net.minecraft.network.PacketBuffer`
 * Package name: `net.minecraft.network`
 */
class PacketBuffer : public ByteBuf {
protected:
    const inline static char *className = "net.minecraft.network.PacketBuffer";
public:
    STATICINITIALIZE;

    PacketBuffer(jobject object) : ByteBuf(object) {}


    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)I`
     */
    static int getVarIntSize(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `([B)V`
     */
    void writeByteArray(arr_B arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)V`
     */
    void writeVarIntToBuffer(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int readVarIntFromBuffer();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos readBlockPos();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void writeBlockPos(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     * Throws: `java.io.IOException`
     */
    IChatComponent readChatComponent();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     * Throws: `java.io.IOException`
     */
    void writeChatComponent(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Enum;`
     */
    Enum readEnumValue(Class arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.lang.Enum;)V`
     */
    void writeEnumValue(Enum arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()J`
     */
    long readVarLong();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(J)V`
     */
    void writeVarLong(long arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void writeItemStackToBuffer(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     * Throws: `java.io.IOException`
     */
    ItemStack readItemStackFromBuffer();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Ljava.lang.String;`
     */
    String readStringFromBuffer(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int maxCapacity();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int readerIndex();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readerIndex(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writerIndex(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int writerIndex();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int readableBytes();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int writableBytes();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int maxWritableBytes();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf markReaderIndex();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf resetReaderIndex();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf markWriterIndex();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf resetWriterIndex();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf discardReadBytes();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf discardSomeReadBytes();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IZ)I`
     */
    int ensureWritable(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf ensureWritable(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)S`
     */
    short getUnsignedByte(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)I`
     */
    int getUnsignedShort(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)I`
     */
    int getUnsignedMedium(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)J`
     */
    long getUnsignedInt(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int readUnsignedMedium();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()J`
     */
    long readUnsignedInt();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeMedium(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IB)I`
     */
    int bytesBefore(int arg0, byte arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IIB)I`
     */
    int bytesBefore(int arg0, int arg1, byte arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(B)I`
     */
    int bytesBefore(byte arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByte(ByteBufProcessor arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IILio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByte(int arg0, int arg1, ByteBufProcessor arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IILio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBufProcessor;)I`
     */
    int forEachByteDesc(ByteBufProcessor arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int nioBufferCount();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer internalNioBuffer(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Z`
     */
    bool hasMemoryAddress();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()J`
     */
    long memoryAddress();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBufAllocator;`
     */
    ByteBufAllocator alloc();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)I`
     */
    int getMedium(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setMedium(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I[BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuffer arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILjava.io.InputStream;I)I`
     * Throws: `java.io.IOException`
     */
    int setBytes(int arg0, InputStream arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILjava.nio.channels.ScatteringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int setBytes(int arg0, ScatteringByteChannel arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I[B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, arr_B arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuf arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setZero(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int readMedium();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readSlice(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeZero(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer nioBuffer();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer nioBuffer(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf retain(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf retain();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.util.UUID;)V`
     */
    void writeUuid(UUID arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Ljava.util.UUID;`
     */
    UUID readUuid();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeNBTTagCompoundToBuffer(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     * Throws: `java.io.IOException`
     */
    NBTTagCompound readNBTTagCompoundFromBuffer();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.nio.charset.Charset;)Ljava.lang.String;`
     */
    String toString(Charset arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IILjava.nio.charset.Charset;)Ljava.lang.String;`
     */
    String toString(int arg0, int arg1, Charset arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IIB)I`
     */
    int indexOf(int arg0, int arg1, byte arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Z`
     */
    bool getBoolean(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)B`
     */
    byte getByte(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)S`
     */
    short getShort(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)C`
     */
    char getChar(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)I`
     */
    int getInt(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)J`
     */
    long getLong(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)F`
     */
    float getFloat(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)D`
     */
    double getDouble(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf clear();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILjava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;`
     * Throws: `java.io.IOException`
     */
    ByteBuf getBytes(int arg0, OutputStream arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuffer arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I[BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I[B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, arr_B arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuf arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILjava.nio.channels.GatheringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int getBytes(int arg0, GatheringByteChannel arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeInt(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int readInt();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IZ)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setBoolean(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setByte(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setChar(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setShort(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setInt(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IJ)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setLong(int arg0, long arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(IF)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setFloat(int arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(ID)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setDouble(int arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf copy(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf copy();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf unwrap();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf capacity(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int capacity();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf slice(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf slice();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf duplicate();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.nio.ByteOrder;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf order(ByteOrder arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuf arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuf arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;`
     * Throws: `java.io.IOException`
     */
    ByteBuf readBytes(OutputStream arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `([BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuffer arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.nio.channels.GatheringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int readBytes(GatheringByteChannel arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `([B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(arr_B arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `([B)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(arr_B arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `([BII)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuf arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuf arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.nio.channels.ScatteringByteChannel;I)I`
     * Throws: `java.io.IOException`
     */
    int writeBytes(ScatteringByteChannel arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.io.InputStream;I)I`
     * Throws: `java.io.IOException`
     */
    int writeBytes(InputStream arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBytes(ByteBuffer arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()I`
     */
    int readUnsignedShort();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()J`
     */
    long readLong();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()B`
     */
    byte readByte();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeChar(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()C`
     */
    char readChar();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()S`
     */
    short readShort();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(II)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf setIndex(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(F)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeFloat(float arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()F`
     */
    float readFloat();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.network.PacketBuffer;`
     */
    PacketBuffer writeString(String arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Z`
     */
    bool isReadable();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Z`
     */
    bool isReadable(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Z`
     */
    bool isWritable(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Z`
     */
    bool isWritable();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(J)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeLong(long arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf skipBytes(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()Z`
     */
    bool readBoolean();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()S`
     */
    short readUnsignedByte();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `()D`
     */
    double readDouble();

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(Z)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeBoolean(bool arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeByte(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(I)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeShort(int arg0);

    /**
     * Declaring class: `net.minecraft.network.PacketBuffer`
     * Signature: `(D)Lio.netty.buffer.ByteBuf;`
     */
    ByteBuf writeDouble(double arg0);
};


/**
 * Classpath: `net.minecraft.client.network.NetHandlerPlayClient`
 * Package name: `net.minecraft.client.network`
 */
class NetHandlerPlayClient : public Object {
protected:
    const inline static char *className = "net.minecraft.client.network.NetHandlerPlayClient";
public:
    STATICINITIALIZE;

    NetHandlerPlayClient(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.network.NetHandlerPlayClient`
     * Signature: `(Ljava.util.UUID;)Lnet.minecraft.client.network.NetworkPlayerInfo;`
     */
    NetworkPlayerInfo getPlayerInfo(UUID arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetHandlerPlayClient`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.network.NetworkPlayerInfo;`
     */
    NetworkPlayerInfo getPlayerInfo(String arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetHandlerPlayClient`
     * Signature: `()Lnet.minecraft.network.NetworkManager;`
     */
    NetworkManager getNetworkManager();

    /**
     * Declaring class: `net.minecraft.client.network.NetHandlerPlayClient`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getPlayerInfoMap();

    /**
     * Declaring class: `net.minecraft.client.network.NetHandlerPlayClient`
     * Signature: `(Lnet.minecraft.network.Packet;)V`
     */
    void addToSendQueue(Packet arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetHandlerPlayClient`
     * Signature: `()Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getGameProfile();

    /**
     * Declaring class: `net.minecraft.client.network.NetHandlerPlayClient`
     * Signature: `()V`
     */
    void cleanup();
};


/**
 * Classpath: `net.minecraft.client.network.NetworkPlayerInfo`
 * Package name: `net.minecraft.client.network`
 */
class NetworkPlayerInfo : public Object {
protected:
    const inline static char *className = "net.minecraft.client.network.NetworkPlayerInfo";
public:
    STATICINITIALIZE;

    NetworkPlayerInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()I`
     */
    int getResponseTime();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()V`
     */
    void loadPlayerTextures();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Lnet.minecraft.scoreboard.ScorePlayerTeam;`
     */
    ScorePlayerTeam getPlayerTeam();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()I`
     */
    int func_178835_l();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(I)V`
     */
    void func_178836_b(int arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()I`
     */
    int func_178860_m();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(I)V`
     */
    void func_178857_c(int arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()J`
     */
    long func_178847_n();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(J)V`
     */
    void func_178846_a(long arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()J`
     */
    long func_178858_o();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(J)V`
     */
    void func_178844_b(long arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()J`
     */
    long func_178855_p();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(J)V`
     */
    void func_178843_c(long arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Lnet.minecraft.world.WorldSettings$GameType;`
     */
    WorldSettings_GameType getGameType();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Z`
     */
    bool hasLocationSkin();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getLocationSkin();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getLocationCape();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Ljava.lang.String;`
     */
    String getSkinType();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(I)V`
     */
    void setResponseTime(int arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void setDisplayName(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getGameProfile();

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;)V`
     */
    void setGameType(WorldSettings_GameType arg0);

    /**
     * Declaring class: `net.minecraft.client.network.NetworkPlayerInfo`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getDisplayName();
};


/**
 * Classpath: `net.minecraft.client.multiplayer.ServerData`
 * Package name: `net.minecraft.client.multiplayer`
 */
class ServerData : public Object {
protected:
    const inline static char *className = "net.minecraft.client.multiplayer.ServerData";
public:
    STATICINITIALIZE;

    ServerData(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getNBTCompound();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `(Lnet.minecraft.client.multiplayer.ServerData$ServerResourceMode;)V`
     */
    void setResourceMode(ServerData_ServerResourceMode arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setBase64EncodedIconData(String arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `()Ljava.lang.String;`
     */
    String getBase64EncodedIconData();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `()Lnet.minecraft.client.multiplayer.ServerData$ServerResourceMode;`
     */
    ServerData_ServerResourceMode getResourceMode();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `()Z`
     */
    bool func_181041_d();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.client.multiplayer.ServerData;`
     */
    static ServerData getServerDataFromNBTCompound(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData`
     * Signature: `(Lnet.minecraft.client.multiplayer.ServerData;)V`
     */
    void copyFrom(ServerData arg0);
};


/**
 * Classpath: `net.minecraft.client.multiplayer.ServerData$ServerResourceMode`
 * Enclosing class: `net.minecraft.client.multiplayer.ServerData`
 * Package name: `net.minecraft.client.multiplayer`
 */
class ServerData_ServerResourceMode : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.multiplayer.ServerData$ServerResourceMode";
public:
    STATICINITIALIZE;

    ServerData_ServerResourceMode(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData$ServerResourceMode`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getMotd();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.ServerData$ServerResourceMode`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.multiplayer.ServerData$ServerResourceMode;`
     */
    static ServerData_ServerResourceMode valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.server.integrated.IntegratedServer`
 * Package name: `net.minecraft.server.integrated`
 */
class IntegratedServer : public MinecraftServer {
protected:
    const inline static char *className = "net.minecraft.server.integrated.IntegratedServer";
public:
    STATICINITIALIZE;

    IntegratedServer(jobject object) : MinecraftServer(object) {}


    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Lnet.minecraft.world.WorldSettings$GameType;`
     */
    WorldSettings_GameType getGameType();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Lnet.minecraft.command.ServerCommandManager;`
     */
    ServerCommandManager createNewCommandManager();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;JLnet.minecraft.world.WorldType;Ljava.lang.String;)V`
     */
    void loadAllWorlds(String arg0, String arg1, long arg2, WorldType arg3, String arg4);

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `(Lnet.minecraft.world.EnumDifficulty;)V`
     */
    void setDifficultyForAllWorlds(EnumDifficulty arg0);

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     * Throws: `java.io.IOException`
     */
    bool startServer();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool canStructuresSpawn();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool func_181034_q();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool func_183002_r();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Ljava.io.File;`
     */
    File getDataDirectory();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool isDedicatedServer();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool func_181035_ah();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReport;`
     */
    CrashReport addServerInfoToCrashReport(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool isCommandBlockEnabled();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()I`
     */
    int getOpPermissionLevel();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;)V`
     */
    void setGameType(WorldSettings_GameType arg0);

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Lnet.minecraft.world.EnumDifficulty;`
     */
    EnumDifficulty getDifficulty();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()V`
     */
    void initiateShutdown();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()V`
     */
    void setStaticInstance();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool isHardcore();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)V`
     */
    void finalTick(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;Z)Ljava.lang.String;`
     */
    String shareToLAN(WorldSettings_GameType arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()V`
     */
    void stopServer();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()V`
     */
    void tick();

    /**
     * Declaring class: `net.minecraft.server.integrated.IntegratedServer`
     * Signature: `()Z`
     */
    bool getPublic();
};


/**
 * Classpath: `net.minecraft.client.renderer.texture.TextureManager`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class TextureManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.TextureManager";
public:
    STATICINITIALIZE;

    TextureManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureManager`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;Lnet.minecraft.client.renderer.texture.ITextureObject;)Z`
     */
    bool loadTexture(ResourceLocation arg0, ITextureObject arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureManager`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;Lnet.minecraft.client.renderer.texture.ITickableTextureObject;)Z`
     */
    bool loadTickableTexture(ResourceLocation arg0, ITickableTextureObject arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureManager`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;)V`
     */
    void bindTexture(ResourceLocation arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureManager`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;)V`
     */
    void deleteTexture(ResourceLocation arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureManager`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.client.renderer.texture.DynamicTexture;)Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getDynamicTextureLocation(String arg0, DynamicTexture arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureManager`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.renderer.texture.ITextureObject;`
     */
    ITextureObject getTexture(ResourceLocation arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.texture.ITextureObject`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class ITextureObject : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.ITextureObject";
public:
    STATICINITIALIZE;

    ITextureObject(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.renderer.texture.ITickableTextureObject`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class ITickableTextureObject : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.ITickableTextureObject";
public:
    STATICINITIALIZE;

    ITickableTextureObject(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.renderer.texture.AbstractTexture`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class AbstractTexture : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.AbstractTexture";
public:
    STATICINITIALIZE;

    AbstractTexture(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.texture.AbstractTexture`
     * Signature: `()V`
     */
    void deleteGlTexture();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.AbstractTexture`
     * Signature: `(ZZ)V`
     */
    void setBlurMipmapDirect(bool arg0, bool arg1);
};


/**
 * Classpath: `net.minecraft.client.resources.IResourceManager`
 * Package name: `net.minecraft.client.resources`
 */
class IResourceManager : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.IResourceManager";
public:
    STATICINITIALIZE;

    IResourceManager(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.resources.ResourcePackRepository`
 * Package name: `net.minecraft.client.resources`
 */
class ResourcePackRepository : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.ResourcePackRepository";
public:
    STATICINITIALIZE;

    ResourcePackRepository(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()V`
     */
    void fixDirResourcepacks();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()V`
     */
    void updateRepositoryEntriesAll();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()Ljava.util.List;`
     */
    List getResourcePackFiles();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()Ljava.util.List;`
     */
    List getRepositoryEntriesAll();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()Ljava.io.File;`
     */
    File getDirResourcepacks();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()V`
     */
    void func_183028_i();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `(Ljava.io.File;)Lcom.google.common.util.concurrent.ListenableFuture;`
     */
    ListenableFuture setResourcePackInstance(File arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Lcom.google.common.util.concurrent.ListenableFuture;`
     */
    ListenableFuture downloadResourcePack(String arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()Ljava.util.List;`
     */
    List getRepositoryEntries();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()Lnet.minecraft.client.resources.IResourcePack;`
     */
    IResourcePack getResourcePackInstance();

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `(Ljava.util.List;)V`
     */
    void setRepositories(List arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.ResourcePackRepository`
     * Signature: `()V`
     */
    void func_148529_f();
};


/**
 * Classpath: `net.minecraft.client.resources.IResourcePack`
 * Package name: `net.minecraft.client.resources`
 */
class IResourcePack : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.IResourcePack";
public:
    STATICINITIALIZE;

    IResourcePack(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.resources.LanguageManager`
 * Package name: `net.minecraft.client.resources`
 */
class LanguageManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.LanguageManager";
public:
    STATICINITIALIZE;

    LanguageManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.LanguageManager`
     * Signature: `()Ljava.util.SortedSet;`
     */
    SortedSet getLanguages();

    /**
     * Declaring class: `net.minecraft.client.resources.LanguageManager`
     * Signature: `()Lnet.minecraft.client.resources.Language;`
     */
    Language getCurrentLanguage();

    /**
     * Declaring class: `net.minecraft.client.resources.LanguageManager`
     * Signature: `(Lnet.minecraft.client.resources.Language;)V`
     */
    void setCurrentLanguage(Language arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.LanguageManager`
     * Signature: `()Z`
     */
    bool isCurrentLocaleUnicode();

    /**
     * Declaring class: `net.minecraft.client.resources.LanguageManager`
     * Signature: `(Ljava.util.List;)V`
     */
    void parseLanguageMetadata(List arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.LanguageManager`
     * Signature: `()Z`
     */
    bool isCurrentLanguageBidirectional();
};


/**
 * Classpath: `java.util.SortedSet`
 * Package name: `java.util`
 */
class SortedSet : public JavaObject {
protected:
    const inline static char *className = "java.util.SortedSet";
public:
    STATICINITIALIZE;

    SortedSet(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.resources.Language`
 * Package name: `net.minecraft.client.resources`
 */
class Language : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.Language";
public:
    STATICINITIALIZE;

    Language(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.Language`
     * Signature: `()Ljava.lang.String;`
     */
    String getLanguageCode();

    /**
     * Declaring class: `net.minecraft.client.resources.Language`
     * Signature: `()Z`
     */
    bool isBidirectional();

    /**
     * Declaring class: `net.minecraft.client.resources.Language`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.Language`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.client.resources.Language`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `net.minecraft.client.renderer.texture.TextureMap`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class TextureMap : public AbstractTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.TextureMap";
public:
    STATICINITIALIZE;

    TextureMap(jobject object) : AbstractTexture(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;`
     */
    TextureAtlasSprite getAtlasSprite(String arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `()V`
     */
    void updateAnimations();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;`
     */
    TextureAtlasSprite registerSprite(ResourceLocation arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `()Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;`
     */
    TextureAtlasSprite getMissingSprite();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `()V`
     */
    void initMissingImage();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `(Lnet.minecraft.client.resources.IResourceManager;Lnet.minecraft.client.renderer.texture.IIconCreator;)V`
     */
    void loadSprites(IResourceManager arg0, IIconCreator arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `(Lnet.minecraft.client.resources.IResourceManager;)V`
     */
    void loadTextureAtlas(IResourceManager arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;I)Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation completeResourceLocation(ResourceLocation arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureMap`
     * Signature: `(I)V`
     */
    void setMipmapLevels(int arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class TextureAtlasSprite : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.TextureAtlasSprite";
public:
    STATICINITIALIZE;

    TextureAtlasSprite(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(Ljava.lang.String;)V`
     */
    static void setLocationNameClock(String arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(Ljava.lang.String;)V`
     */
    static void setLocationNameCompass(String arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(D)F`
     */
    float getInterpolatedU(double arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(D)F`
     */
    float getInterpolatedV(double arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()I`
     */
    int getFrameCount();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()V`
     */
    void resetSprite();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(I)V`
     */
    void allocateFrameTextureData(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()V`
     */
    void clearFramesTextureData();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()V`
     */
    void updateAnimation();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;`
     */
    static TextureAtlasSprite makeAtlasSprite(ResourceLocation arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(I)V`
     */
    void setIconWidth(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(I)V`
     */
    void setIconHeight(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(Ljava.util.List;)V`
     */
    void setFramesTextureData(List arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()Ljava.lang.String;`
     */
    String getIconName();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()I`
     */
    int getIconWidth();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()I`
     */
    int getIconHeight();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(I)V`
     */
    void generateMipmaps(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()Z`
     */
    bool hasAnimationMetadata();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()F`
     */
    float getMinU();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()F`
     */
    float getMaxV();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()F`
     */
    float getMaxU();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()F`
     */
    float getMinV();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `([Ljava.awt.image.BufferedImage;Lnet.minecraft.client.resources.data.AnimationMetadataSection;)V`
     * Throws: `java.io.IOException`
     */
    void loadSprite(BufferedImage_interface arg0, AnimationMetadataSection arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()I`
     */
    int getOriginX();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()I`
     */
    int getOriginY();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(IIIIZ)V`
     */
    void initSprite(int arg0, int arg1, int arg2, int arg3, bool arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()V`
     */
    void updateAnimationInterpolated();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.client.renderer.texture.TextureAtlasSprite`
     * Signature: `(Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;)V`
     */
    void copyFrom(TextureAtlasSprite arg0);
};


/**
 * Classpath: `[Ljava.awt.image.BufferedImage;`
 */
class BufferedImage_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.image.BufferedImage;";
public:
    STATICINITIALIZE;

    BufferedImage_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.client.resources.data.AnimationMetadataSection`
 * Package name: `net.minecraft.client.resources.data`
 */
class AnimationMetadataSection : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.data.AnimationMetadataSection";
public:
    STATICINITIALIZE;

    AnimationMetadataSection(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `(I)I`
     */
    int getFrameTimeSingle(int arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `(I)I`
     */
    int getFrameIndex(int arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `()I`
     */
    int getFrameCount();

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `()Z`
     */
    bool isInterpolate();

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `()Ljava.util.Set;`
     */
    Set getFrameIndexSet();

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `()I`
     */
    int getFrameHeight();

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `()I`
     */
    int getFrameWidth();

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `(I)Lnet.minecraft.client.resources.data.AnimationFrame;`
     */
    AnimationFrame getAnimationFrame(int arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `(I)Z`
     */
    bool frameHasTime(int arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationMetadataSection`
     * Signature: `()I`
     */
    int getFrameTime();
};


/**
 * Classpath: `net.minecraft.client.resources.data.AnimationFrame`
 * Package name: `net.minecraft.client.resources.data`
 */
class AnimationFrame : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.data.AnimationFrame";
public:
    STATICINITIALIZE;

    AnimationFrame(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationFrame`
     * Signature: `()I`
     */
    int getFrameIndex();

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationFrame`
     * Signature: `()I`
     */
    int getFrameTime();

    /**
     * Declaring class: `net.minecraft.client.resources.data.AnimationFrame`
     * Signature: `()Z`
     */
    bool hasNoTime();
};


/**
 * Classpath: `net.minecraft.client.renderer.texture.IIconCreator`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class IIconCreator : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.IIconCreator";
public:
    STATICINITIALIZE;

    IIconCreator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.audio.SoundHandler`
 * Package name: `net.minecraft.client.audio`
 */
class SoundHandler : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundHandler";
public:
    STATICINITIALIZE;

    SoundHandler(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.client.audio.ISound;I)V`
     */
    void playDelayedSound(ISound arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Ljava.io.InputStream;)Ljava.util.Map;`
     */
    Map getSoundMap(InputStream arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;Lnet.minecraft.client.audio.SoundList;)V`
     */
    void loadSoundResource(ResourceLocation arg0, SoundList arg1);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.client.audio.SoundCategory;F)V`
     */
    void setSoundLevel(SoundCategory arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.client.audio.ISound;)Z`
     */
    bool isSoundPlaying(ISound arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `()V`
     */
    void pauseSounds();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `()V`
     */
    void resumeSounds();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `()V`
     */
    void unloadSounds();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;F)V`
     */
    void setListener(EntityPlayer arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.audio.SoundEventAccessorComposite;`
     */
    SoundEventAccessorComposite getSound(ResourceLocation arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.client.audio.ISound;)V`
     */
    void stopSound(ISound arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `(Lnet.minecraft.client.audio.ISound;)V`
     */
    void playSound(ISound arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `()V`
     */
    void stopSounds();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundHandler`
     * Signature: `([Lnet.minecraft.client.audio.SoundCategory;)Lnet.minecraft.client.audio.SoundEventAccessorComposite;`
     */
    SoundEventAccessorComposite getRandomSoundFromCategories(SoundCategory_interface arg0);
};


/**
 * Classpath: `net.minecraft.client.audio.ISound`
 * Package name: `net.minecraft.client.audio`
 */
class ISound : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.audio.ISound";
public:
    STATICINITIALIZE;

    ISound(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.audio.SoundList`
 * Package name: `net.minecraft.client.audio`
 */
class SoundList : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundList";
public:
    STATICINITIALIZE;

    SoundList(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.audio.SoundList`
     * Signature: `(Z)V`
     */
    void setReplaceExisting(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundList`
     * Signature: `(Lnet.minecraft.client.audio.SoundCategory;)V`
     */
    void setSoundCategory(SoundCategory arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundList`
     * Signature: `()Z`
     */
    bool canReplaceExisting();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundList`
     * Signature: `()Lnet.minecraft.client.audio.SoundCategory;`
     */
    SoundCategory getSoundCategory();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundList`
     * Signature: `()Ljava.util.List;`
     */
    List getSoundList();
};


/**
 * Classpath: `net.minecraft.client.audio.SoundCategory`
 * Package name: `net.minecraft.client.audio`
 */
class SoundCategory : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundCategory";
public:
    STATICINITIALIZE;

    SoundCategory(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.client.audio.SoundCategory`
     * Signature: `()Ljava.lang.String;`
     */
    String getCategoryName();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundCategory`
     * Signature: `()I`
     */
    int getCategoryId();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundCategory`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.audio.SoundCategory;`
     */
    static SoundCategory getCategory(String arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundCategory`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.audio.SoundCategory;`
     */
    static SoundCategory valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.client.audio.SoundEventAccessorComposite`
 * Package name: `net.minecraft.client.audio`
 */
class SoundEventAccessorComposite : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundEventAccessorComposite";
public:
    STATICINITIALIZE;

    SoundEventAccessorComposite(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.audio.SoundEventAccessorComposite`
     * Signature: `()Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getSoundEventLocation();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundEventAccessorComposite`
     * Signature: `()Lnet.minecraft.client.audio.SoundCategory;`
     */
    SoundCategory getSoundCategory();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundEventAccessorComposite`
     * Signature: `(Lnet.minecraft.client.audio.ISoundEventAccessor;)V`
     */
    void addSoundToEventPool(ISoundEventAccessor arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundEventAccessorComposite`
     * Signature: `()Lnet.minecraft.client.audio.SoundPoolEntry;`
     */
    SoundPoolEntry cloneEntry();
};


/**
 * Classpath: `net.minecraft.client.audio.ISoundEventAccessor`
 * Package name: `net.minecraft.client.audio`
 */
class ISoundEventAccessor : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.audio.ISoundEventAccessor";
public:
    STATICINITIALIZE;

    ISoundEventAccessor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.audio.SoundPoolEntry`
 * Package name: `net.minecraft.client.audio`
 */
class SoundPoolEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundPoolEntry";
public:
    STATICINITIALIZE;

    SoundPoolEntry(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.audio.SoundPoolEntry`
     * Signature: `()Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getSoundPoolEntryLocation();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundPoolEntry`
     * Signature: `()Z`
     */
    bool isStreamingSound();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundPoolEntry`
     * Signature: `()D`
     */
    double getVolume();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundPoolEntry`
     * Signature: `()D`
     */
    double getPitch();

    /**
     * Declaring class: `net.minecraft.client.audio.SoundPoolEntry`
     * Signature: `(D)V`
     */
    void setPitch(double arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.SoundPoolEntry`
     * Signature: `(D)V`
     */
    void setVolume(double arg0);
};


/**
 * Classpath: `[Lnet.minecraft.client.audio.SoundCategory;`
 */
class SoundCategory_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.client.audio.SoundCategory;";
public:
    STATICINITIALIZE;

    SoundCategory_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.client.audio.MusicTicker$MusicType`
 * Enclosing class: `net.minecraft.client.audio.MusicTicker`
 * Package name: `net.minecraft.client.audio`
 */
class MusicTicker_MusicType : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.audio.MusicTicker$MusicType";
public:
    STATICINITIALIZE;

    MusicTicker_MusicType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.client.audio.MusicTicker$MusicType`
     * Signature: `()Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getMusicLocation();

    /**
     * Declaring class: `net.minecraft.client.audio.MusicTicker$MusicType`
     * Signature: `()I`
     */
    int getMinDelay();

    /**
     * Declaring class: `net.minecraft.client.audio.MusicTicker$MusicType`
     * Signature: `()I`
     */
    int getMaxDelay();

    /**
     * Declaring class: `net.minecraft.client.audio.MusicTicker$MusicType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.audio.MusicTicker$MusicType;`
     */
    static MusicTicker_MusicType valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.client.stream.IStream`
 * Package name: `net.minecraft.client.stream`
 */
class IStream : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.stream.IStream";
public:
    STATICINITIALIZE;

    IStream(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.resources.SkinManager`
 * Package name: `net.minecraft.client.resources`
 */
class SkinManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.SkinManager";
public:
    STATICINITIALIZE;

    SkinManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.SkinManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;Lnet.minecraft.client.resources.SkinManager$SkinAvailableCallback;Z)V`
     */
    void loadProfileTextures(GameProfile arg0, SkinManager_SkinAvailableCallback arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.client.resources.SkinManager`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Ljava.util.Map;`
     */
    Map loadSkinFromCache(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.SkinManager`
     * Signature: `(Lcom.mojang.authlib.minecraft.MinecraftProfileTexture;Lcom.mojang.authlib.minecraft.MinecraftProfileTexture$Type;Lnet.minecraft.client.resources.SkinManager$SkinAvailableCallback;)Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation loadSkin(MinecraftProfileTexture arg0, MinecraftProfileTexture_Type arg1, SkinManager_SkinAvailableCallback arg2);

    /**
     * Declaring class: `net.minecraft.client.resources.SkinManager`
     * Signature: `(Lcom.mojang.authlib.minecraft.MinecraftProfileTexture;Lcom.mojang.authlib.minecraft.MinecraftProfileTexture$Type;)Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation loadSkin(MinecraftProfileTexture arg0, MinecraftProfileTexture_Type arg1);
};


/**
 * Classpath: `net.minecraft.client.resources.SkinManager$SkinAvailableCallback`
 * Enclosing class: `net.minecraft.client.resources.SkinManager`
 * Package name: `net.minecraft.client.resources`
 */
class SkinManager_SkinAvailableCallback : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.SkinManager$SkinAvailableCallback";
public:
    STATICINITIALIZE;

    SkinManager_SkinAvailableCallback(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `com.mojang.authlib.minecraft.MinecraftProfileTexture`
 * Package name: `com.mojang.authlib.minecraft`
 */
class MinecraftProfileTexture : public Object {
protected:
    const inline static char *className = "com.mojang.authlib.minecraft.MinecraftProfileTexture";
public:
    STATICINITIALIZE;

    MinecraftProfileTexture(jobject object) : Object(object) {}


    /**
     * Declaring class: `com.mojang.authlib.minecraft.MinecraftProfileTexture`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getMetadata(String arg0);

    /**
     * Declaring class: `com.mojang.authlib.minecraft.MinecraftProfileTexture`
     * Signature: `()Ljava.lang.String;`
     */
    String getUrl();

    /**
     * Declaring class: `com.mojang.authlib.minecraft.MinecraftProfileTexture`
     * Signature: `()Ljava.lang.String;`
     */
    String getHash();

    /**
     * Declaring class: `com.mojang.authlib.minecraft.MinecraftProfileTexture`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `com.mojang.authlib.minecraft.MinecraftProfileTexture$Type`
 * Enclosing class: `com.mojang.authlib.minecraft.MinecraftProfileTexture`
 * Package name: `com.mojang.authlib.minecraft`
 */
class MinecraftProfileTexture_Type : public Enum {
protected:
    const inline static char *className = "com.mojang.authlib.minecraft.MinecraftProfileTexture$Type";
public:
    STATICINITIALIZE;

    MinecraftProfileTexture_Type(jobject object) : Enum(object) {}


    /**
     * Declaring class: `com.mojang.authlib.minecraft.MinecraftProfileTexture$Type`
     * Signature: `(Ljava.lang.String;)Lcom.mojang.authlib.minecraft.MinecraftProfileTexture$Type;`
     */
    static MinecraftProfileTexture_Type valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.BlockRendererDispatcher`
 * Package name: `net.minecraft.client.renderer`
 */
class BlockRendererDispatcher : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockRendererDispatcher";
public:
    STATICINITIALIZE;

    BlockRendererDispatcher(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;Lnet.minecraft.world.IBlockAccess;)V`
     */
    void renderBlockDamage(IBlockState arg0, BlockPos arg1, TextureAtlasSprite arg2, IBlockAccess arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.renderer.WorldRenderer;)Z`
     */
    bool renderBlock(IBlockState arg0, BlockPos arg1, IBlockAccess arg2, WorldRenderer arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.client.resources.model.IBakedModel;`
     */
    IBakedModel getModelFromBlockState(IBlockState arg0, IBlockAccess arg1, BlockPos arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `()Lnet.minecraft.client.renderer.BlockModelRenderer;`
     */
    BlockModelRenderer getBlockModelRenderer();

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.client.resources.model.IBakedModel;`
     */
    IBakedModel getBakedModel(IBlockState arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;F)V`
     */
    void renderBlockBrightness(IBlockState arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `(Lnet.minecraft.block.Block;I)Z`
     */
    bool isRenderTypeChest(Block arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockRendererDispatcher`
     * Signature: `()Lnet.minecraft.client.renderer.BlockModelShapes;`
     */
    BlockModelShapes getBlockModelShapes();
};


/**
 * Classpath: `net.minecraft.client.renderer.WorldRenderer`
 * Package name: `net.minecraft.client.renderer`
 */
class WorldRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.WorldRenderer";
public:
    STATICINITIALIZE;

    WorldRenderer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(I)V`
     */
    void func_181670_b(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(FFF)V`
     */
    void func_181674_a(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(Ljava.nio.FloatBuffer;FFFII)F`
     */
    static float func_181665_a(FloatBuffer arg0, float arg1, float arg2, float arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()Lnet.minecraft.client.renderer.WorldRenderer$State;`
     */
    WorldRenderer_State func_181672_a();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()I`
     */
    int func_181664_j();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(Lnet.minecraft.client.renderer.WorldRenderer$State;)V`
     */
    void setVertexState(WorldRenderer_State arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()I`
     */
    int getVertexCount();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()Lnet.minecraft.client.renderer.vertex.VertexFormat;`
     */
    VertexFormat getVertexFormat();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()V`
     */
    void func_181667_k();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(IIII)V`
     */
    void putBrightness4(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(DDD)V`
     */
    void putPosition(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(FFFI)V`
     */
    void putColorMultiplier(float arg0, float arg1, float arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(IIIII)V`
     */
    void putColorRGBA(int arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(FFFI)V`
     */
    void putColorRGB_F(float arg0, float arg1, float arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()V`
     */
    void finishDrawing();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()I`
     */
    int getDrawMode();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(FFF)V`
     */
    void putColorRGB_F4(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(DDD)V`
     */
    void setTranslation(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `([I)V`
     */
    void addVertexData(arr_I arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(I)I`
     */
    int getColorIndex(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(FFF)V`
     */
    void putNormal(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(I)V`
     */
    void putColor4(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()V`
     */
    void markDirty();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(DD)Lnet.minecraft.client.renderer.WorldRenderer;`
     */
    WorldRenderer tex(double arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()V`
     */
    void endVertex();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(II)Lnet.minecraft.client.renderer.WorldRenderer;`
     */
    WorldRenderer lightmap(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(II)V`
     */
    void putColor(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(ILnet.minecraft.client.renderer.vertex.VertexFormat;)V`
     */
    void begin(int arg0, VertexFormat arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(DDD)Lnet.minecraft.client.renderer.WorldRenderer;`
     */
    WorldRenderer pos(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()V`
     */
    void reset();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer getByteBuffer();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(FFFF)Lnet.minecraft.client.renderer.WorldRenderer;`
     */
    WorldRenderer color(float arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(IIII)Lnet.minecraft.client.renderer.WorldRenderer;`
     */
    WorldRenderer color(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer`
     * Signature: `(FFF)Lnet.minecraft.client.renderer.WorldRenderer;`
     */
    WorldRenderer normal(float arg0, float arg1, float arg2);
};


/**
 * Classpath: `net.minecraft.client.renderer.WorldRenderer$State`
 * Enclosing class: `net.minecraft.client.renderer.WorldRenderer`
 * Package name: `net.minecraft.client.renderer`
 */
class WorldRenderer_State : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.WorldRenderer$State";
public:
    STATICINITIALIZE;

    WorldRenderer_State(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer$State`
     * Signature: `()I`
     */
    int getVertexCount();

    /**
     * Declaring class: `net.minecraft.client.renderer.WorldRenderer$State`
     * Signature: `()Lnet.minecraft.client.renderer.vertex.VertexFormat;`
     */
    VertexFormat getVertexFormat();
};


/**
 * Classpath: `net.minecraft.client.renderer.vertex.VertexFormat`
 * Package name: `net.minecraft.client.renderer.vertex`
 */
class VertexFormat : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormat";
public:
    STATICINITIALIZE;

    VertexFormat(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()I`
     */
    int func_181719_f();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()I`
     */
    int getNextOffset();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `(I)I`
     */
    int func_181720_d(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `(I)I`
     */
    int getUvOffsetById(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()I`
     */
    int getColorOffset();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()I`
     */
    int getNormalOffset();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()I`
     */
    int getElementCount();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `(Lnet.minecraft.client.renderer.vertex.VertexFormatElement;)Lnet.minecraft.client.renderer.vertex.VertexFormat;`
     */
    VertexFormat func_181721_a(VertexFormatElement arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()Z`
     */
    bool hasPosition();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `(I)Z`
     */
    bool hasUvOffset(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()Ljava.util.List;`
     */
    List getElements();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()Z`
     */
    bool hasColor();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()Z`
     */
    bool hasNormal();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `(I)Lnet.minecraft.client.renderer.vertex.VertexFormatElement;`
     */
    VertexFormatElement getElement(int arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormat`
     * Signature: `()V`
     */
    void clear();
};


/**
 * Classpath: `net.minecraft.client.renderer.vertex.VertexFormatElement`
 * Package name: `net.minecraft.client.renderer.vertex`
 */
class VertexFormatElement : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormatElement";
public:
    STATICINITIALIZE;

    VertexFormatElement(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()I`
     */
    int getElementCount();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()Z`
     */
    bool isPositionElement();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `(ILnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage;)Z`
     */
    bool func_177372_a(int arg0, VertexFormatElement_EnumUsage arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage;`
     */
    VertexFormatElement_EnumUsage getUsage();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumType;`
     */
    VertexFormatElement_EnumType getType();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()I`
     */
    int getSize();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
     * Signature: `()I`
     */
    int getIndex();
};


/**
 * Classpath: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage`
 * Enclosing class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
 * Package name: `net.minecraft.client.renderer.vertex`
 */
class VertexFormatElement_EnumUsage : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage";
public:
    STATICINITIALIZE;

    VertexFormatElement_EnumUsage(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage;`
     */
    static VertexFormatElement_EnumUsage valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayName();
};


/**
 * Classpath: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType`
 * Enclosing class: `net.minecraft.client.renderer.vertex.VertexFormatElement`
 * Package name: `net.minecraft.client.renderer.vertex`
 */
class VertexFormatElement_EnumType : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType";
public:
    STATICINITIALIZE;

    VertexFormatElement_EnumType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType`
     * Signature: `()I`
     */
    int getGlConstant();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumType;`
     */
    static VertexFormatElement_EnumType valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType`
     * Signature: `()I`
     */
    int getSize();

    /**
     * Declaring class: `net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType`
     * Signature: `()Ljava.lang.String;`
     */
    String getDisplayName();
};


/**
 * Classpath: `net.minecraft.client.resources.model.IBakedModel`
 * Package name: `net.minecraft.client.resources.model`
 */
class IBakedModel : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.model.IBakedModel";
public:
    STATICINITIALIZE;

    IBakedModel(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.renderer.BlockModelRenderer`
 * Package name: `net.minecraft.client.renderer`
 */
class BlockModelRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockModelRenderer";
public:
    STATICINITIALIZE;

    BlockModelRenderer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Z)Z`
     */
    bool renderModelStandard(IBlockAccess arg0, IBakedModel arg1, Block arg2, BlockPos arg3, WorldRenderer arg4, bool arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;IZLnet.minecraft.client.renderer.WorldRenderer;Ljava.util.List;Ljava.util.BitSet;)V`
     */
    void renderModelStandardQuads(IBlockAccess arg0, Block arg1, BlockPos arg2, EnumFacing arg3, int arg4, bool arg5, WorldRenderer arg6, List arg7, BitSet arg8);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.block.Block;[ILnet.minecraft.util.EnumFacing;[FLjava.util.BitSet;)V`
     */
    void fillQuadBounds(Block arg0, arr_I arg1, EnumFacing arg2, arr_F arg3, BitSet arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.client.resources.model.IBakedModel;FFFF)V`
     */
    void renderModelBrightnessColor(IBakedModel arg0, float arg1, float arg2, float arg3, float arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;)Z`
     */
    bool renderModel(IBlockAccess arg0, IBakedModel arg1, IBlockState arg2, BlockPos arg3, WorldRenderer arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Z)Z`
     */
    bool renderModel(IBlockAccess arg0, IBakedModel arg1, IBlockState arg2, BlockPos arg3, WorldRenderer arg4, bool arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.state.IBlockState;FZ)V`
     */
    void renderModelBrightness(IBakedModel arg0, IBlockState arg1, float arg2, bool arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Z)Z`
     */
    bool renderModelAmbientOcclusion(IBlockAccess arg0, IBakedModel arg1, Block arg2, BlockPos arg3, WorldRenderer arg4, bool arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Ljava.util.List;[FLjava.util.BitSet;Lnet.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace;)V`
     */
    void renderModelAmbientOcclusionQuads(IBlockAccess arg0, Block arg1, BlockPos arg2, WorldRenderer arg3, List arg4, arr_F arg5, BitSet arg6, BlockModelRenderer_AmbientOcclusionFace arg7);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer`
     * Signature: `(FFFFLjava.util.List;)V`
     */
    void renderModelBrightnessColorQuads(float arg0, float arg1, float arg2, float arg3, List arg4);
};


/**
 * Classpath: `java.util.BitSet`
 * Package name: `java.util`
 */
class BitSet : public Object {
protected:
    const inline static char *className = "java.util.BitSet";
public:
    STATICINITIALIZE;

    BitSet(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)V`
     */
    void expandTo(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.util.BitSet;)V`
     */
    void xor_(BitSet arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)V`
     */
    void initWords(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)I`
     */
    static int wordIndex(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()V`
     */
    void recalculateWordsInUse();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()I`
     */
    int cardinality();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)I`
     */
    int nextSetBit(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(II)I`
     */
    int nextSetBit(int arg0, int arg1);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)I`
     */
    int previousSetBit(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)I`
     */
    int previousClearBit(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.util.BitSet;)Z`
     */
    bool intersects(BitSet arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(II)Ljava.util.BitSet;`
     */
    BitSet get(int arg0, int arg1);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)Z`
     */
    bool get(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()I`
     */
    int length();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.nio.ByteBuffer;)Ljava.util.BitSet;`
     */
    static BitSet valueOf(ByteBuffer arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `([J)Ljava.util.BitSet;`
     */
    static BitSet valueOf(arr_J arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `([B)Ljava.util.BitSet;`
     */
    static BitSet valueOf(arr_B arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.nio.LongBuffer;)Ljava.util.BitSet;`
     */
    static BitSet valueOf(LongBuffer arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)V`
     */
    void clear(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(II)V`
     */
    void clear(int arg0, int arg1);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()I`
     */
    int size();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()Ljava.util.stream.IntStream;`
     */
    IntStream stream();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(IIZ)V`
     */
    void set(int arg0, int arg1, bool arg2);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)V`
     */
    void set(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(IZ)V`
     */
    void set(int arg0, bool arg1);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(II)V`
     */
    void set(int arg0, int arg1);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)V`
     */
    void ensureCapacity(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()V`
     */
    void trimToSize();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(II)V`
     */
    static void checkRange(int arg0, int arg1);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `()V`
     */
    void checkInvariants();

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(II)V`
     */
    void flip(int arg0, int arg1);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)V`
     */
    void flip(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(I)I`
     */
    int nextClearBit(int arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.util.BitSet;)V`
     */
    void and_(BitSet arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.util.BitSet;)V`
     */
    void or_(BitSet arg0);

    /**
     * Declaring class: `java.util.BitSet`
     * Signature: `(Ljava.util.BitSet;)V`
     */
    void andNot(BitSet arg0);
};


/**
 * Classpath: `java.util.stream.IntStream`
 * Package name: `java.util.stream`
 */
class IntStream : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.IntStream";
public:
    STATICINITIALIZE;

    IntStream(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace`
 * Enclosing class: `net.minecraft.client.renderer.BlockModelRenderer`
 * Package name: `net.minecraft.client.renderer`
 */
class BlockModelRenderer_AmbientOcclusionFace : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace";
public:
    STATICINITIALIZE;

    BlockModelRenderer_AmbientOcclusionFace(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;[FLjava.util.BitSet;)V`
     */
    void updateVertexBrightness(IBlockAccess arg0, Block arg1, BlockPos arg2, EnumFacing arg3, arr_F arg4, BitSet arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace`
     * Signature: `(IIII)I`
     */
    int getAoBrightness(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace`
     * Signature: `(IIIIFFFF)I`
     */
    int getVertexBrightness(int arg0, int arg1, int arg2, int arg3, float arg4, float arg5, float arg6, float arg7);
};


/**
 * Classpath: `net.minecraft.client.renderer.BlockModelShapes`
 * Package name: `net.minecraft.client.renderer`
 */
class BlockModelShapes : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockModelShapes";
public:
    STATICINITIALIZE;

    BlockModelShapes(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `()V`
     */
    void registerAllBlocks();

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `()Lnet.minecraft.client.renderer.block.statemap.BlockStateMapper;`
     */
    BlockStateMapper getBlockStateMapper();

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `()V`
     */
    void reloadModels();

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `([Lnet.minecraft.block.Block;)V`
     */
    void registerBuiltInBlocks(Block_interface arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `()Lnet.minecraft.client.resources.model.ModelManager;`
     */
    ModelManager getModelManager();

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.client.resources.model.IBakedModel;`
     */
    IBakedModel getModelForState(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;`
     */
    TextureAtlasSprite getTexture(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.BlockModelShapes`
     * Signature: `(Lnet.minecraft.block.Block;Lnet.minecraft.client.renderer.block.statemap.IStateMapper;)V`
     */
    void registerBlockWithStateMapper(Block arg0, IStateMapper arg1);
};


/**
 * Classpath: `net.minecraft.client.renderer.block.statemap.BlockStateMapper`
 * Package name: `net.minecraft.client.renderer.block.statemap`
 */
class BlockStateMapper : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.statemap.BlockStateMapper";
public:
    STATICINITIALIZE;

    BlockStateMapper(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.block.statemap.BlockStateMapper`
     * Signature: `()Ljava.util.Map;`
     */
    Map putAllStateModelLocations();

    /**
     * Declaring class: `net.minecraft.client.renderer.block.statemap.BlockStateMapper`
     * Signature: `(Lnet.minecraft.block.Block;Lnet.minecraft.client.renderer.block.statemap.IStateMapper;)V`
     */
    void registerBlockStateMapper(Block arg0, IStateMapper arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.block.statemap.BlockStateMapper`
     * Signature: `([Lnet.minecraft.block.Block;)V`
     */
    void registerBuiltInBlocks(Block_interface arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.block.statemap.IStateMapper`
 * Package name: `net.minecraft.client.renderer.block.statemap`
 */
class IStateMapper : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.statemap.IStateMapper";
public:
    STATICINITIALIZE;

    IStateMapper(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Lnet.minecraft.block.Block;`
 */
class Block_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.block.Block;";
public:
    STATICINITIALIZE;

    Block_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.client.resources.model.ModelManager`
 * Package name: `net.minecraft.client.resources.model`
 */
class ModelManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.model.ModelManager";
public:
    STATICINITIALIZE;

    ModelManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelManager`
     * Signature: `()Lnet.minecraft.client.resources.model.IBakedModel;`
     */
    IBakedModel getMissingModel();

    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelManager`
     * Signature: `()Lnet.minecraft.client.renderer.texture.TextureMap;`
     */
    TextureMap getTextureMap();

    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelManager`
     * Signature: `()Lnet.minecraft.client.renderer.BlockModelShapes;`
     */
    BlockModelShapes getBlockModelShapes();

    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelManager`
     * Signature: `(Lnet.minecraft.client.resources.model.ModelResourceLocation;)Lnet.minecraft.client.resources.model.IBakedModel;`
     */
    IBakedModel getModel(ModelResourceLocation arg0);
};


/**
 * Classpath: `net.minecraft.client.resources.model.ModelResourceLocation`
 * Package name: `net.minecraft.client.resources.model`
 */
class ModelResourceLocation : public ResourceLocation {
protected:
    const inline static char *className = "net.minecraft.client.resources.model.ModelResourceLocation";
public:
    STATICINITIALIZE;

    ModelResourceLocation(jobject object) : ResourceLocation(object) {}


    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelResourceLocation`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelResourceLocation`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelResourceLocation`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.client.resources.model.ModelResourceLocation`
     * Signature: `()Ljava.lang.String;`
     */
    String getVariant();
};


/**
 * Classpath: `net.minecraft.client.renderer.entity.RenderManager`
 * Package name: `net.minecraft.client.renderer.entity`
 */
class RenderManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RenderManager";
public:
    STATICINITIALIZE;

    RenderManager(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(F)V`
     */
    void setPlayerViewY(float arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Z)V`
     */
    void setRenderShadow(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFF)Z`
     */
    bool renderEntityWithPosYaw(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(DDD)V`
     */
    void setRenderPosition(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Ljava.lang.Class;)Lnet.minecraft.client.renderer.entity.Render;`
     */
    Render getEntityClassRenderObject(Class arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;)Lnet.minecraft.client.renderer.entity.Render;`
     */
    Render getEntityRenderObject(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.client.gui.FontRenderer;Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;Lnet.minecraft.client.settings.GameSettings;F)V`
     */
    void cacheActiveRenderInfo(World arg0, FontRenderer arg1, Entity arg2, Entity arg3, GameSettings arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `()Z`
     */
    bool isRenderShadow();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;F)Z`
     */
    bool renderEntitySimple(Entity arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;FZ)Z`
     */
    bool renderEntityStatic(Entity arg0, float arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.client.renderer.culling.ICamera;DDD)Z`
     */
    bool shouldRender(Entity arg0, ICamera arg1, double arg2, double arg3, double arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFFZ)Z`
     */
    bool doRenderEntity(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;F)V`
     */
    void renderWitherSkull(Entity arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Z)V`
     */
    void setRenderOutlines(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFF)V`
     */
    void renderDebugBoundingBox(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(DDD)D`
     */
    double getDistanceToCamera(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `()Lnet.minecraft.client.gui.FontRenderer;`
     */
    FontRenderer getFontRenderer();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `()Z`
     */
    bool isDebugBoundingBox();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Z)V`
     */
    void setDebugBoundingBox(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderManager`
     * Signature: `(Lnet.minecraft.world.World;)V`
     */
    void set(World arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.entity.Render`
 * Package name: `net.minecraft.client.renderer.entity`
 */
class Render : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.Render";
public:
    STATICINITIALIZE;

    Render(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool canRenderName(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;Ljava.lang.String;DDDI)V`
     */
    void renderLivingLabel(Entity arg0, String arg1, double arg2, double arg3, double arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDLjava.lang.String;FD)V`
     */
    void renderOffsetLivingLabel(Entity arg0, double arg1, double arg2, double arg3, String arg4, float arg5, double arg6);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getEntityTexture(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool bindEntityTexture(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDF)V`
     */
    void renderEntityOnFire(Entity arg0, double arg1, double arg2, double arg3, float arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `()Lnet.minecraft.world.World;`
     */
    World getWorldFromRenderManager();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.block.Block;DDDLnet.minecraft.util.BlockPos;FFDDD)V`
     */
    void func_180549_a(Block arg0, double arg1, double arg2, double arg3, BlockPos arg4, float arg5, float arg6, double arg7, double arg8, double arg9);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;DDD)V`
     */
    static void renderOffsetAABB(AxisAlignedBB arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFF)V`
     */
    void renderShadow(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.client.renderer.culling.ICamera;DDD)Z`
     */
    bool shouldRender(Entity arg0, ICamera arg1, double arg2, double arg3, double arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFF)V`
     */
    void doRenderShadowAndFire(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `()Lnet.minecraft.client.renderer.entity.RenderManager;`
     */
    RenderManager getRenderManager();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;)V`
     */
    void bindTexture(ResourceLocation arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;DDD)V`
     */
    void renderName(Entity arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFF)V`
     */
    void doRender(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.Render`
     * Signature: `()Lnet.minecraft.client.gui.FontRenderer;`
     */
    FontRenderer getFontRendererFromRenderManager();
};


/**
 * Classpath: `net.minecraft.client.renderer.culling.ICamera`
 * Package name: `net.minecraft.client.renderer.culling`
 */
class ICamera : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.culling.ICamera";
public:
    STATICINITIALIZE;

    ICamera(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.gui.FontRenderer`
 * Package name: `net.minecraft.client.gui`
 */
class FontRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.gui.FontRenderer";
public:
    STATICINITIALIZE;

    FontRenderer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;IIII)V`
     */
    void drawSplitString(String arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int splitStringWidth(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `()Z`
     */
    bool getBidiFlag();

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String getFormatFromString(String arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(C)I`
     */
    int getColorCode(char arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `()V`
     */
    void readGlyphSizes();

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `()V`
     */
    void readFontTexture();

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(CZ)F`
     */
    float func_181559_a(char arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(IZ)F`
     */
    float renderDefaultChar(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(CZ)F`
     */
    float renderUnicodeChar(char arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(I)Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getUnicodePageLocation(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(I)V`
     */
    void loadGlyphTexture(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `()V`
     */
    void resetStyles();

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;FFIZ)I`
     */
    int renderString(String arg0, float arg1, float arg2, int arg3, bool arg4);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String bidiReorder(String arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    void renderStringAtPos(String arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(C)I`
     */
    int getCharWidth(char arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;IIIIZ)I`
     */
    int renderStringAligned(String arg0, int arg1, int arg2, int arg3, int arg4, bool arg5);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;IZ)Ljava.lang.String;`
     */
    String trimStringToWidth(String arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;I)Ljava.lang.String;`
     */
    String trimStringToWidth(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String trimStringNewline(String arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;IIIZ)V`
     */
    void renderSplitString(String arg0, int arg1, int arg2, int arg3, bool arg4);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `()Z`
     */
    bool getUnicodeFlag();

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;I)Ljava.lang.String;`
     */
    String wrapFormattedStringToWidth(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int sizeStringToWidth(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(C)Z`
     */
    static bool isFormatColor(char arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(C)Z`
     */
    static bool isFormatSpecial(char arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Z)V`
     */
    void setUnicodeFlag(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Z)V`
     */
    void setBidiFlag(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;FFI)I`
     */
    int drawStringWithShadow(String arg0, float arg1, float arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;)I`
     */
    int getStringWidth(String arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;I)Ljava.util.List;`
     */
    List listFormattedStringToWidth(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;III)I`
     */
    int drawString(String arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.gui.FontRenderer`
     * Signature: `(Ljava.lang.String;FFIZ)I`
     */
    int drawString(String arg0, float arg1, float arg2, int arg3, bool arg4);
};


/**
 * Classpath: `net.minecraft.client.settings.GameSettings`
 * Package name: `net.minecraft.client.settings`
 */
class GameSettings : public Object {
protected:
    const inline static char *className = "net.minecraft.client.settings.GameSettings";
public:
    STATICINITIALIZE;

    GameSettings(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `()V`
     */
    void loadOptions();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.settings.KeyBinding;I)V`
     */
    void setOptionKeyBinding(KeyBinding arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.settings.GameSettings$Options;F)V`
     */
    void setOptionFloatValue(GameSettings_Options arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.settings.GameSettings$Options;)F`
     */
    float getOptionFloatValue(GameSettings_Options arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.settings.GameSettings$Options;)Z`
     */
    bool getOptionOrdinalValue(GameSettings_Options arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `([Ljava.lang.String;I)Ljava.lang.String;`
     */
    static String getTranslation(String_interface arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.settings.GameSettings$Options;)Ljava.lang.String;`
     */
    String getKeyBinding(GameSettings_Options arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.entity.player.EnumPlayerModelParts;Z)V`
     */
    void setModelPartEnabled(EnumPlayerModelParts arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.audio.SoundCategory;)F`
     */
    float getSoundLevel(SoundCategory arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `()Ljava.util.Set;`
     */
    Set getModelParts();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.entity.player.EnumPlayerModelParts;)V`
     */
    void switchModelPartEnabled(EnumPlayerModelParts arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `()I`
     */
    int func_181147_e();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `()Z`
     */
    bool func_181148_f();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.audio.SoundCategory;F)V`
     */
    void setSoundLevel(SoundCategory arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `()V`
     */
    void sendSettingsToServer();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getKeyDisplayString(int arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `()V`
     */
    void saveOptions();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.settings.GameSettings$Options;I)V`
     */
    void setOptionValue(GameSettings_Options arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Lnet.minecraft.client.settings.KeyBinding;)Z`
     */
    static bool isKeyDown(KeyBinding arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings`
     * Signature: `(Ljava.lang.String;)F`
     */
    float parseFloat(String arg0);
};


/**
 * Classpath: `net.minecraft.client.settings.KeyBinding`
 * Package name: `net.minecraft.client.settings`
 */
class KeyBinding : public Object {
protected:
    const inline static char *className = "net.minecraft.client.settings.KeyBinding";
public:
    STATICINITIALIZE;

    KeyBinding(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()Ljava.lang.String;`
     */
    String getKeyDescription();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()Ljava.util.Set;`
     */
    static Set getKeybinds();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()Ljava.lang.String;`
     */
    String getKeyCategory();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()I`
     */
    int getKeyCodeDefault();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()V`
     */
    static void unPressAllKeys();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `(IZ)V`
     */
    static void setKeyBindState(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()Z`
     */
    bool isPressed();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()I`
     */
    int getKeyCode();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `(I)V`
     */
    static void onTick(int arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()Z`
     */
    bool isKeyDown();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()V`
     */
    void unpressKey();

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `(I)V`
     */
    void setKeyCode(int arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.KeyBinding`
     * Signature: `()V`
     */
    static void resetKeyBindingArrayAndHash();
};


/**
 * Classpath: `net.minecraft.client.settings.GameSettings$Options`
 * Enclosing class: `net.minecraft.client.settings.GameSettings`
 * Package name: `net.minecraft.client.settings`
 */
class GameSettings_Options : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.settings.GameSettings$Options";
public:
    STATICINITIALIZE;

    GameSettings_Options(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `(F)V`
     */
    void setValueMax(float arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `()Ljava.lang.String;`
     */
    String getEnumString();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `()Z`
     */
    bool getEnumFloat();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `(F)F`
     */
    float normalizeValue(float arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `()Z`
     */
    bool getEnumBoolean();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `(I)Lnet.minecraft.client.settings.GameSettings$Options;`
     */
    static GameSettings_Options getEnumOptions(int arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `()I`
     */
    int returnEnumOrdinal();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `(F)F`
     */
    float snapToStepClamp(float arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `(F)F`
     */
    float denormalizeValue(float arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `()F`
     */
    float getValueMax();

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `(F)F`
     */
    float snapToStep(float arg0);

    /**
     * Declaring class: `net.minecraft.client.settings.GameSettings$Options`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.settings.GameSettings$Options;`
     */
    static GameSettings_Options valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.entity.RenderItem`
 * Package name: `net.minecraft.client.renderer.entity`
 */
class RenderItem : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RenderItem";
public:
    STATICINITIALIZE;

    RenderItem(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `()V`
     */
    void registerItems();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.Item;Ljava.lang.String;)V`
     */
    void registerItem(Item arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.Item;ILjava.lang.String;)V`
     */
    void registerItem(Item arg0, int arg1, String arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;II)V`
     */
    void renderItemAndEffectIntoGUI(ItemStack arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.gui.FontRenderer;Lnet.minecraft.item.ItemStack;IILjava.lang.String;)V`
     */
    void renderItemOverlayIntoGUI(FontRenderer arg0, ItemStack arg1, int arg2, int arg3, String arg4);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Z)V`
     */
    void func_175039_a(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `()Lnet.minecraft.client.renderer.ItemModelMesher;`
     */
    ItemModelMesher getItemModelMesher();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.block.Block;Ljava.lang.String;)V`
     */
    void registerBlock(Block arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.block.Block;ILjava.lang.String;)V`
     */
    void registerBlock(Block arg0, int arg1, String arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.renderer.WorldRenderer;Ljava.util.List;ILnet.minecraft.item.ItemStack;)V`
     */
    void renderQuads(WorldRenderer arg0, List arg1, int arg2, ItemStack arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.resources.model.IBakedModel;)V`
     */
    void renderEffect(IBakedModel arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.renderer.WorldRenderer;Lnet.minecraft.client.renderer.block.model.BakedQuad;)V`
     */
    void putQuadNormal(WorldRenderer arg0, BakedQuad arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool shouldRenderItemIn3D(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void preTransform(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V`
     */
    void func_181564_a(ItemStack arg0, ItemCameraTransforms_TransformType arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V`
     */
    void renderItemModelTransform(ItemStack arg0, IBakedModel arg1, ItemCameraTransforms_TransformType arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V`
     */
    void renderItemModelForEntity(ItemStack arg0, EntityLivingBase arg1, ItemCameraTransforms_TransformType arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.renderer.block.model.ItemTransformVec3f;)Z`
     */
    bool func_183005_a(ItemTransformVec3f arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;II)V`
     */
    void renderItemIntoGUI(ItemStack arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(IIZ)V`
     */
    void setupGuiTransform(int arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.gui.FontRenderer;Lnet.minecraft.item.ItemStack;II)V`
     */
    void renderItemOverlays(FontRenderer arg0, ItemStack arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.renderer.WorldRenderer;IIIIIIII)V`
     */
    void func_181565_a(WorldRenderer arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.item.ItemStack;)V`
     */
    void renderModel(IBakedModel arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.resources.model.IBakedModel;I)V`
     */
    void renderModel(IBakedModel arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.resources.model.IBakedModel;ILnet.minecraft.item.ItemStack;)V`
     */
    void renderModel(IBakedModel arg0, int arg1, ItemStack arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.client.renderer.WorldRenderer;Lnet.minecraft.client.renderer.block.model.BakedQuad;I)V`
     */
    void renderQuad(WorldRenderer arg0, BakedQuad arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.resources.model.IBakedModel;)V`
     */
    void renderItem(ItemStack arg0, IBakedModel arg1);
};


/**
 * Classpath: `net.minecraft.client.renderer.ItemModelMesher`
 * Package name: `net.minecraft.client.renderer`
 */
class ItemModelMesher : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ItemModelMesher";
public:
    STATICINITIALIZE;

    ItemModelMesher(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.Item;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;`
     */
    TextureAtlasSprite getParticleIcon(Item arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.Item;I)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;`
     */
    TextureAtlasSprite getParticleIcon(Item arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.client.resources.model.IBakedModel;`
     */
    IBakedModel getItemModel(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.Item;I)Lnet.minecraft.client.resources.model.IBakedModel;`
     */
    IBakedModel getItemModel(Item arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `()Lnet.minecraft.client.resources.model.ModelManager;`
     */
    ModelManager getModelManager();

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `()V`
     */
    void rebuildCache();

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int getMetadata(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.Item;Lnet.minecraft.client.renderer.ItemMeshDefinition;)V`
     */
    void register_(Item arg0, ItemMeshDefinition arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.Item;ILnet.minecraft.client.resources.model.ModelResourceLocation;)V`
     */
    void register_(Item arg0, int arg1, ModelResourceLocation arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemModelMesher`
     * Signature: `(Lnet.minecraft.item.Item;I)I`
     */
    int getIndex(Item arg0, int arg1);
};


/**
 * Classpath: `net.minecraft.client.renderer.ItemMeshDefinition`
 * Package name: `net.minecraft.client.renderer`
 */
class ItemMeshDefinition : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ItemMeshDefinition";
public:
    STATICINITIALIZE;

    ItemMeshDefinition(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.client.renderer.block.model.BakedQuad`
 * Package name: `net.minecraft.client.renderer.block.model`
 */
class BakedQuad : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.model.BakedQuad";
public:
    STATICINITIALIZE;

    BakedQuad(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.block.model.BakedQuad`
     * Signature: `()Z`
     */
    bool hasTintIndex();

    /**
     * Declaring class: `net.minecraft.client.renderer.block.model.BakedQuad`
     * Signature: `()I`
     */
    int getTintIndex();

    /**
     * Declaring class: `net.minecraft.client.renderer.block.model.BakedQuad`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing getFace();
};


/**
 * Classpath: `net.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType`
 * Enclosing class: `net.minecraft.client.renderer.block.model.ItemCameraTransforms`
 * Package name: `net.minecraft.client.renderer.block.model`
 */
class ItemCameraTransforms_TransformType : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType";
public:
    STATICINITIALIZE;

    ItemCameraTransforms_TransformType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;`
     */
    static ItemCameraTransforms_TransformType valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.block.model.ItemTransformVec3f`
 * Package name: `net.minecraft.client.renderer.block.model`
 */
class ItemTransformVec3f : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.model.ItemTransformVec3f";
public:
    STATICINITIALIZE;

    ItemTransformVec3f(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.block.model.ItemTransformVec3f`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.block.model.ItemTransformVec3f`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `net.minecraft.client.renderer.ItemRenderer`
 * Package name: `net.minecraft.client.renderer`
 */
class ItemRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ItemRenderer";
public:
    STATICINITIALIZE;

    ItemRenderer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool isBlockTranslucent(Block arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(FF)V`
     */
    void func_178101_a(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;)V`
     */
    void func_178109_a(AbstractClientPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.entity.EntityPlayerSP;F)V`
     */
    void func_178110_a(EntityPlayerSP arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(F)F`
     */
    float func_178100_c(float arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.renderer.entity.RenderPlayer;)V`
     */
    void renderRightArm(RenderPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.renderer.entity.RenderPlayer;)V`
     */
    void renderLeftArm(RenderPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;)V`
     */
    void renderPlayerArms(AbstractClientPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;FFF)V`
     */
    void renderItemMap(AbstractClientPlayer arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;FF)V`
     */
    void func_178095_a(AbstractClientPlayer arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(F)V`
     */
    void func_178105_d(float arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;F)V`
     */
    void func_178104_a(AbstractClientPlayer arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(FF)V`
     */
    void transformFirstPersonItem(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(FLnet.minecraft.client.entity.AbstractClientPlayer;)V`
     */
    void func_178098_a(float arg0, AbstractClientPlayer arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `()V`
     */
    void func_178103_d();

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(F)V`
     */
    void renderItemInFirstPerson(float arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(F)V`
     */
    void renderOverlays(float arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(FLnet.minecraft.client.renderer.texture.TextureAtlasSprite;)V`
     */
    void func_178108_a(float arg0, TextureAtlasSprite arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(F)V`
     */
    void renderWaterOverlayTexture(float arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(F)V`
     */
    void renderFireInFirstPerson(float arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `()V`
     */
    void updateEquippedItem();

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `()V`
     */
    void resetEquippedProgress();

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `()V`
     */
    void resetEquippedProgress2();

    /**
     * Declaring class: `net.minecraft.client.renderer.ItemRenderer`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V`
     */
    void renderItem(EntityLivingBase arg0, ItemStack arg1, ItemCameraTransforms_TransformType arg2);
};


/**
 * Classpath: `java.awt.image.Raster`
 * Package name: `java.awt.image`
 */
class Raster : public Object {
protected:
    const inline static char *className = "java.awt.image.Raster";
public:
    STATICINITIALIZE;

    Raster(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIIIII[I)Ljava.awt.image.Raster;`
     */
    Raster createChild(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, arr_I arg6);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getWidth();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.image.DataBuffer;III[I[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createBandedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, arr_I arg4, arr_I arg5, Point arg6);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIII[I[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createBandedRaster(int arg0, int arg1, int arg2, int arg3, arr_I arg4, arr_I arg5, Point arg6);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIIILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createBandedRaster(int arg0, int arg1, int arg2, int arg3, Point arg4);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getNumDataElements();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getTransferType();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(III)I`
     */
    int getSample(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(III)F`
     */
    float getSampleFloat(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(III)D`
     */
    double getSampleDouble(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.image.SampleModel;Ljava.awt.image.DataBuffer;Ljava.awt.Point;)Ljava.awt.image.Raster;`
     */
    static Raster createRaster(SampleModel arg0, DataBuffer arg1, Point arg2);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(II)Ljava.awt.image.Raster;`
     */
    Raster createTranslatedChild(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getBounds();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()Ljava.awt.image.Raster;`
     */
    Raster getParent();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()Ljava.awt.image.SampleModel;`
     */
    SampleModel getSampleModel();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getMinX();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getMinY();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIII)Ljava.awt.image.WritableRaster;`
     */
    WritableRaster createCompatibleWritableRaster(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.Rectangle;)Ljava.awt.image.WritableRaster;`
     */
    WritableRaster createCompatibleWritableRaster(Rectangle arg0);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()Ljava.awt.image.WritableRaster;`
     */
    WritableRaster createCompatibleWritableRaster();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(II)Ljava.awt.image.WritableRaster;`
     */
    WritableRaster createCompatibleWritableRaster(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.image.DataBuffer;IIII[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createInterleavedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, Point arg6);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIIII[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createInterleavedRaster(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, Point arg6);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIIILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createInterleavedRaster(int arg0, int arg1, int arg2, int arg3, Point arg4);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIIIILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createPackedRaster(int arg0, int arg1, int arg2, int arg3, int arg4, Point arg5);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.image.DataBuffer;III[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createPackedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, arr_I arg4, Point arg5);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(III[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createPackedRaster(int arg0, int arg1, int arg2, arr_I arg3, Point arg4);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.image.DataBuffer;IIILjava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createPackedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, Point arg4);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getNumBands();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IILjava.lang.Object;)Ljava.lang.Object;`
     */
    Object getDataElements(int arg0, int arg1, Object arg2);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(IIIILjava.lang.Object;)Ljava.lang.Object;`
     */
    Object getDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()Ljava.awt.image.DataBuffer;`
     */
    DataBuffer getDataBuffer();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getSampleModelTranslateX();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `()I`
     */
    int getSampleModelTranslateY();

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.image.SampleModel;Ljava.awt.image.DataBuffer;Ljava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createWritableRaster(SampleModel arg0, DataBuffer arg1, Point arg2);

    /**
     * Declaring class: `java.awt.image.Raster`
     * Signature: `(Ljava.awt.image.SampleModel;Ljava.awt.Point;)Ljava.awt.image.WritableRaster;`
     */
    static WritableRaster createWritableRaster(SampleModel arg0, Point arg1);
};


/**
 * Classpath: `java.awt.image.DataBuffer`
 * Package name: `java.awt.image`
 */
class DataBuffer : public Object {
protected:
    const inline static char *className = "java.awt.image.DataBuffer";
public:
    STATICINITIALIZE;

    DataBuffer(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(I)I`
     */
    static int getDataTypeSize(int arg0);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `()I`
     */
    int getNumBanks();

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(II)I`
     */
    int getElem(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(I)I`
     */
    int getElem(int arg0);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(II)V`
     */
    void setElem(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(III)V`
     */
    void setElem(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(II)F`
     */
    float getElemFloat(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(I)F`
     */
    float getElemFloat(int arg0);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(IF)V`
     */
    void setElemFloat(int arg0, float arg1);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(IIF)V`
     */
    void setElemFloat(int arg0, int arg1, float arg2);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(I)D`
     */
    double getElemDouble(int arg0);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(II)D`
     */
    double getElemDouble(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(IID)V`
     */
    void setElemDouble(int arg0, int arg1, double arg2);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `(ID)V`
     */
    void setElemDouble(int arg0, double arg1);

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `()I`
     */
    int getSize();

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `()I`
     */
    int getOffset();

    /**
     * Declaring class: `java.awt.image.DataBuffer`
     * Signature: `()I`
     */
    int getDataType();
};


/**
 * Classpath: `java.awt.geom.Point2D`
 * Package name: `java.awt.geom`
 */
class Point2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Point2D";
public:
    STATICINITIALIZE;

    Point2D(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(Ljava.awt.geom.Point2D;)D`
     */
    double distanceSq(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(DDDD)D`
     */
    static double distanceSq(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(DD)D`
     */
    double distanceSq(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(Ljava.awt.geom.Point2D;)V`
     */
    void setLocation(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(DD)V`
     */
    void setLocation(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(Ljava.awt.geom.Point2D;)D`
     */
    double distance(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(DD)D`
     */
    double distance(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Point2D`
     * Signature: `(DDDD)D`
     */
    static double distance(double arg0, double arg1, double arg2, double arg3);
};


/**
 * Classpath: `java.awt.image.SampleModel`
 * Package name: `java.awt.image`
 */
class SampleModel : public Object {
protected:
    const inline static char *className = "java.awt.image.SampleModel";
public:
    STATICINITIALIZE;

    SampleModel(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()I`
     */
    int getWidth();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(I)I`
     */
    int getSampleSize(int arg0);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()Ljava.awt.image.DataBuffer;`
     */
    DataBuffer createDataBuffer();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()I`
     */
    int getNumDataElements();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `([I)Ljava.awt.image.SampleModel;`
     */
    SampleModel createSubsetSampleModel(arr_I arg0);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()I`
     */
    int getTransferType();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIILjava.awt.image.DataBuffer;)I`
     */
    int getSample(int arg0, int arg1, int arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIILjava.awt.image.DataBuffer;)F`
     */
    float getSampleFloat(int arg0, int arg1, int arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIILjava.awt.image.DataBuffer;)D`
     */
    double getSampleDouble(int arg0, int arg1, int arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(II[ILjava.awt.image.DataBuffer;)V`
     */
    void setPixel(int arg0, int arg1, arr_I arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(II[DLjava.awt.image.DataBuffer;)V`
     */
    void setPixel(int arg0, int arg1, arr_D arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(II[FLjava.awt.image.DataBuffer;)V`
     */
    void setPixel(int arg0, int arg1, arr_F arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIDLjava.awt.image.DataBuffer;)V`
     */
    void setSample(int arg0, int arg1, int arg2, double arg3, DataBuffer arg4);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIILjava.awt.image.DataBuffer;)V`
     */
    void setSample(int arg0, int arg1, int arg2, int arg3, DataBuffer arg4);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIFLjava.awt.image.DataBuffer;)V`
     */
    void setSample(int arg0, int arg1, int arg2, float arg3, DataBuffer arg4);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIII[DLjava.awt.image.DataBuffer;)V`
     */
    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_D arg5, DataBuffer arg6);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIII[ILjava.awt.image.DataBuffer;)V`
     */
    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, DataBuffer arg6);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIII[FLjava.awt.image.DataBuffer;)V`
     */
    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_F arg5, DataBuffer arg6);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()I`
     */
    int getNumBands();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IILjava.lang.Object;Ljava.awt.image.DataBuffer;)Ljava.lang.Object;`
     */
    Object getDataElements(int arg0, int arg1, Object arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIILjava.lang.Object;Ljava.awt.image.DataBuffer;)Ljava.lang.Object;`
     */
    Object getDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4, DataBuffer arg5);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `()I`
     */
    int getDataType();

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IILjava.lang.Object;Ljava.awt.image.DataBuffer;)V`
     */
    void setDataElements(int arg0, int arg1, Object arg2, DataBuffer arg3);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIIILjava.lang.Object;Ljava.awt.image.DataBuffer;)V`
     */
    void setDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4, DataBuffer arg5);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(II)Ljava.awt.image.SampleModel;`
     */
    SampleModel createCompatibleSampleModel(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIII[ILjava.awt.image.DataBuffer;)V`
     */
    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_I arg4, DataBuffer arg5);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIII[FLjava.awt.image.DataBuffer;)V`
     */
    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_F arg4, DataBuffer arg5);

    /**
     * Declaring class: `java.awt.image.SampleModel`
     * Signature: `(IIII[DLjava.awt.image.DataBuffer;)V`
     */
    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_D arg4, DataBuffer arg5);
};


/**
 * Classpath: `java.awt.geom.Line2D`
 * Package name: `java.awt.geom`
 */
class Line2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Line2D";
public:
    STATICINITIALIZE;

    Line2D(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `()D`
     */
    double getX1();

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `()D`
     */
    double getY1();

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `()D`
     */
    double getX2();

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `()D`
     */
    double getY2();

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Line2D;)Z`
     */
    bool intersectsLine(Line2D arg0);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDD)Z`
     */
    bool intersectsLine(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)V`
     */
    void setLine(Point2D arg0, Point2D arg1);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDD)V`
     */
    void setLine(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Line2D;)V`
     */
    void setLine(Line2D arg0);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDDDD)I`
     */
    static int relativeCCW(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DD)I`
     */
    int relativeCCW(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Point2D;)I`
     */
    int relativeCCW(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDDDDDD)Z`
     */
    static bool linesIntersect(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DD)D`
     */
    double ptSegDistSq(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Point2D;)D`
     */
    double ptSegDistSq(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDDDD)D`
     */
    static double ptSegDistSq(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DD)D`
     */
    double ptSegDist(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Point2D;)D`
     */
    double ptSegDist(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDDDD)D`
     */
    static double ptSegDist(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Point2D;)D`
     */
    double ptLineDistSq(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DD)D`
     */
    double ptLineDistSq(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDDDD)D`
     */
    static double ptLineDistSq(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DD)D`
     */
    double ptLineDist(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(Ljava.awt.geom.Point2D;)D`
     */
    double ptLineDist(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `(DDDDDD)D`
     */
    static double ptLineDist(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `()Ljava.awt.geom.Point2D;`
     */
    Point2D getP1();

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `()Ljava.awt.geom.Point2D;`
     */
    Point2D getP2();

    /**
     * Declaring class: `java.awt.geom.Line2D`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();
};


/**
 * Classpath: `java.awt.geom.RectangularShape`
 * Package name: `java.awt.geom`
 */
class RectangularShape : public Object {
protected:
    const inline static char *className = "java.awt.geom.RectangularShape";
public:
    STATICINITIALIZE;

    RectangularShape(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getCenterX();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getWidth();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getHeight();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getMaxX();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getMaxY();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)V`
     */
    void setFrame(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `(Ljava.awt.geom.Point2D;Ljava.awt.geom.Dimension2D;)V`
     */
    void setFrame(Point2D arg0, Dimension2D arg1);

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `(DDDD)V`
     */
    void setFrame(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `(DDDD)V`
     */
    void setFrameFromDiagonal(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)V`
     */
    void setFrameFromDiagonal(Point2D arg0, Point2D arg1);

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)V`
     */
    void setFrameFromCenter(Point2D arg0, Point2D arg1);

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `(DDDD)V`
     */
    void setFrameFromCenter(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getCenterY();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getFrame();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getMinX();

    /**
     * Declaring class: `java.awt.geom.RectangularShape`
     * Signature: `()D`
     */
    double getMinY();
};


/**
 * Classpath: `java.awt.geom.Dimension2D`
 * Package name: `java.awt.geom`
 */
class Dimension2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Dimension2D";
public:
    STATICINITIALIZE;

    Dimension2D(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.geom.Dimension2D`
     * Signature: `()D`
     */
    double getWidth();

    /**
     * Declaring class: `java.awt.geom.Dimension2D`
     * Signature: `()D`
     */
    double getHeight();

    /**
     * Declaring class: `java.awt.geom.Dimension2D`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.geom.Dimension2D`
     * Signature: `(Ljava.awt.geom.Dimension2D;)V`
     */
    void setSize(Dimension2D arg0);

    /**
     * Declaring class: `java.awt.geom.Dimension2D`
     * Signature: `(DD)V`
     */
    void setSize(double arg0, double arg1);
};


/**
 * Classpath: `java.awt.Dimension`
 * Package name: `java.awt`
 */
class Dimension : public Dimension2D {
protected:
    const inline static char *className = "java.awt.Dimension";
public:
    STATICINITIALIZE;

    Dimension(jobject object) : Dimension2D(object) {}


    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `()D`
     */
    double getWidth();

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `()D`
     */
    double getHeight();

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension getSize();

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `(DD)V`
     */
    void setSize(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.Dimension`
     * Signature: `(II)V`
     */
    void setSize(int arg0, int arg1);
};


/**
 * Classpath: `java.awt.Graphics`
 * Package name: `java.awt`
 */
class Graphics : public Object {
protected:
    const inline static char *className = "java.awt.Graphics";
public:
    STATICINITIALIZE;

    Graphics(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void drawRect(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void drawString(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.text.AttributedCharacterIterator;II)V`
     */
    void drawString(AttributedCharacterIterator arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setColor(Color arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(II)V`
     */
    void translate(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.awt.Color;`
     */
    Color getColor();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void clipRect(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.awt.Font;`
     */
    Font getFont();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Font;)Ljava.awt.FontMetrics;`
     */
    FontMetrics getFontMetrics(Font arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.awt.FontMetrics;`
     */
    FontMetrics getFontMetrics();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void drawLine(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void fillRect(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `([I[II)V`
     */
    void drawPolygon(arr_I arg0, arr_I arg1, int arg2);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Polygon;)V`
     */
    void drawPolygon(Polygon arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `([I[II)V`
     */
    void fillPolygon(arr_I arg0, arr_I arg1, int arg2);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Polygon;)V`
     */
    void fillPolygon(Polygon arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;`
     */
    Rectangle getClipBounds(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getClipBounds();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()V`
     */
    void setPaintMode();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setXORMode(Color arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Font;)V`
     */
    void setFont(Font arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void setClip(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void setClip(Shape arg0);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.awt.Shape;`
     */
    Shape getClip();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIIIII)V`
     */
    void copyArea(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void clearRect(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIIIII)V`
     */
    void drawRoundRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIIIII)V`
     */
    void fillRoundRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIIIZ)V`
     */
    void draw3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIIIZ)V`
     */
    void fill3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void drawOval(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)V`
     */
    void fillOval(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIIIII)V`
     */
    void drawArc(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIIIII)V`
     */
    void fillArc(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `([I[II)V`
     */
    void drawPolyline(arr_I arg0, arr_I arg1, int arg2);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `([CIIII)V`
     */
    void drawChars(arr_C arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `([BIIII)V`
     */
    void drawBytes(arr_B arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Image;IILjava.awt.Color;Ljava.awt.image.ImageObserver;)Z`
     */
    bool drawImage(Image arg0, int arg1, int arg2, Color arg3, ImageObserver arg4);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Image;IIIILjava.awt.Color;Ljava.awt.image.ImageObserver;)Z`
     */
    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, Color arg5, ImageObserver arg6);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Image;IIIIIIIILjava.awt.image.ImageObserver;)Z`
     */
    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, ImageObserver arg9);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Image;IIIIIIIILjava.awt.Color;Ljava.awt.image.ImageObserver;)Z`
     */
    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, Color arg9, ImageObserver arg10);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Image;IIIILjava.awt.image.ImageObserver;)Z`
     */
    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, ImageObserver arg5);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)Z`
     */
    bool drawImage(Image arg0, int arg1, int arg2, ImageObserver arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getClipRect();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)Z`
     */
    bool hitClip(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()V`
     */
    void finalize();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics create();

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `(IIII)Ljava.awt.Graphics;`
     */
    Graphics create(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics`
     * Signature: `()V`
     */
    void dispose();
};


/**
 * Classpath: `java.awt.Color`
 * Package name: `java.awt`
 */
class Color : public Object {
protected:
    const inline static char *className = "java.awt.Color";
public:
    STATICINITIALIZE;

    Color(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()I`
     */
    int getRGB();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()I`
     */
    int getAlpha();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(Ljava.lang.String;I)Ljava.awt.Color;`
     */
    static Color getColor(String arg0, int arg1);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Color;`
     */
    static Color getColor(String arg0);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(Ljava.lang.String;Ljava.awt.Color;)Ljava.awt.Color;`
     */
    static Color getColor(String arg0, Color arg1);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()Ljava.awt.Color;`
     */
    Color brighter();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()Ljava.awt.Color;`
     */
    Color darker();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()I`
     */
    int getRed();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()I`
     */
    int getGreen();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()I`
     */
    int getBlue();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(IIII)V`
     */
    static void testColorValueRange(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(FFFF)V`
     */
    static void testColorValueRange(float arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(FFF)I`
     */
    static int HSBtoRGB(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(FFF)Ljava.awt.Color;`
     */
    static Color getHSBColor(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Color;`
     * Throws: `java.lang.NumberFormatException`
     */
    static Color decode(String arg0);

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Color`
     * Signature: `()Ljava.awt.color.ColorSpace;`
     */
    ColorSpace getColorSpace();
};


/**
 * Classpath: `java.awt.color.ColorSpace`
 * Package name: `java.awt.color`
 */
class ColorSpace : public Object {
protected:
    const inline static char *className = "java.awt.color.ColorSpace";
public:
    STATICINITIALIZE;

    ColorSpace(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `()Z`
     */
    bool isCS_sRGB();

    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `(I)F`
     */
    float getMinValue(int arg0);

    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `(I)F`
     */
    float getMaxValue(int arg0);

    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getName(int arg0);

    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `(I)V`
     */
    void rangeCheck(int arg0);

    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `(I)Ljava.awt.color.ColorSpace;`
     */
    static ColorSpace getInstance(int arg0);

    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `()I`
     */
    int getType();

    /**
     * Declaring class: `java.awt.color.ColorSpace`
     * Signature: `()I`
     */
    int getNumComponents();
};


/**
 * Classpath: `java.awt.Font`
 * Package name: `java.awt`
 */
class Font : public Object {
protected:
    const inline static char *className = "java.awt.Font";
public:
    STATICINITIALIZE;

    Font(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.geom.AffineTransform;Lsun.font.AttributeValues;)V`
     */
    static void applyTransform(AffineTransform arg0, AttributeValues arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getTransform();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(ILjava.io.File;)Ljava.io.File;`
     * Throws: `java.awt.FontFormatException, java.io.IOException`
     */
    static File checkFontFile(int arg0, File arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.lang.String;`
     */
    String getFamily_NoClientCode();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Lsun.font.Font2D;`
     */
    Font2D getFont2D();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Z`
     */
    bool isBold();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Z`
     */
    bool isItalic();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()I`
     */
    int getNumGlyphs();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()I`
     */
    int getMissingGlyphCode();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(C)B`
     */
    byte getBaselineFor(char arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(ILsun.font.AttributeValues;)V`
     */
    static void applyStyle(int arg0, AttributeValues arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(I)Z`
     */
    bool canDisplay(int arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(C)Z`
     */
    bool canDisplay(char arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()F`
     */
    float getItalicAngle();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;)F`
     */
    float getItalicAngle(FontRenderContext arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Z`
     */
    bool isTransformed();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;)Lsun.font.FontLineMetrics;`
     */
    FontLineMetrics defaultLineMetrics(FontRenderContext arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;IILjava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(String arg0, int arg1, int arg2, FontRenderContext arg3);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;Ljava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(String arg0, FontRenderContext arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `([CIILjava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(arr_C arg0, int arg1, int arg2, FontRenderContext arg3);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.text.CharacterIterator;IILjava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(CharacterIterator arg0, int arg1, int arg2, FontRenderContext arg3);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `([CII)Z`
     */
    static bool textRequiresLayout(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(ILjava.io.File;)Ljava.awt.Font;`
     * Throws: `java.awt.FontFormatException, java.io.IOException`
     */
    static Font createFont(int arg0, File arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(ILjava.io.InputStream;)Ljava.awt.Font;`
     * Throws: `java.awt.FontFormatException, java.io.IOException`
     */
    static Font createFont(int arg0, InputStream arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.lang.String;`
     */
    String getPSName();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()F`
     */
    float getSize2D();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Z`
     */
    bool isPlain();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(F)Ljava.awt.Font;`
     */
    Font deriveFont(float arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(ILjava.awt.geom.AffineTransform;)Ljava.awt.Font;`
     */
    Font deriveFont(int arg0, AffineTransform arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(IF)Ljava.awt.Font;`
     */
    Font deriveFont(int arg0, float arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.geom.AffineTransform;)Ljava.awt.Font;`
     */
    Font deriveFont(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(I)Ljava.awt.Font;`
     */
    Font deriveFont(int arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.util.Map;)Ljava.awt.Font;`
     */
    Font deriveFont(Map arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.text.CharacterIterator;II)I`
     */
    int canDisplayUpTo(CharacterIterator arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `([CII)I`
     */
    int canDisplayUpTo(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;)I`
     */
    int canDisplayUpTo(String arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Z`
     */
    bool hasUniformLineMetrics();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `([CIILjava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(arr_C arg0, int arg1, int arg2, FontRenderContext arg3);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.text.CharacterIterator;IILjava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(CharacterIterator arg0, int arg1, int arg2, FontRenderContext arg3);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;IILjava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(String arg0, int arg1, int arg2, FontRenderContext arg3);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;Ljava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(String arg0, FontRenderContext arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getMaxCharBounds(FontRenderContext arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;Ljava.text.CharacterIterator;)Ljava.awt.font.GlyphVector;`
     */
    GlyphVector createGlyphVector(FontRenderContext arg0, CharacterIterator arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;[I)Ljava.awt.font.GlyphVector;`
     */
    GlyphVector createGlyphVector(FontRenderContext arg0, arr_I arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;Ljava.lang.String;)Ljava.awt.font.GlyphVector;`
     */
    GlyphVector createGlyphVector(FontRenderContext arg0, String arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;[C)Ljava.awt.font.GlyphVector;`
     */
    GlyphVector createGlyphVector(FontRenderContext arg0, arr_C arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.awt.font.FontRenderContext;[CIII)Ljava.awt.font.GlyphVector;`
     */
    GlyphVector layoutGlyphVector(FontRenderContext arg0, arr_C arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Font;`
     */
    static Font getFont(String arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.util.Map;)Ljava.awt.Font;`
     */
    static Font getFont(Map arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;Ljava.awt.Font;)Ljava.awt.Font;`
     */
    static Font getFont(String arg0, Font arg1);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.awt.peer.FontPeer;`
     */
    FontPeer getFontPeer();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()I`
     */
    int getStyle();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getFontName(Locale arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.lang.String;`
     */
    String getFontName();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Lsun.font.AttributeValues;)V`
     */
    void initFromValues(AttributeValues arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Lsun.font.AttributeValues;`
     */
    AttributeValues getAttributeValues();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Z`
     */
    bool hasLayoutAttributes();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Z`
     */
    static bool hasTempPermission();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Font;`
     */
    static Font decode(String arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()I`
     */
    int getSize();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.util.Map;`
     */
    Map getAttributes();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `()Ljava.lang.String;`
     */
    String getFamily();

    /**
     * Declaring class: `java.awt.Font`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getFamily(Locale arg0);
};


/**
 * Classpath: `java.awt.geom.AffineTransform`
 * Package name: `java.awt.geom`
 */
class AffineTransform : public Object {
protected:
    const inline static char *className = "java.awt.geom.AffineTransform";
public:
    STATICINITIALIZE;

    AffineTransform(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     */
    void updateState();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void translate(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void shear(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void setTransform(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DDDDDD)V`
     */
    void setTransform(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void setToTranslation(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void setToRotation(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(D)V`
     */
    void setToRotation(double arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DDDD)V`
     */
    void setToRotation(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DDD)V`
     */
    void setToRotation(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(IDD)V`
     */
    void setToQuadrantRotation(int arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(I)V`
     */
    void setToQuadrantRotation(int arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void setToScale(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void setToShear(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     */
    void calculateType();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     */
    void stateError();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     */
    void rotate90();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     */
    void rotate270();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     */
    void rotate180();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(D)D`
     */
    static double _matround(double arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getTranslateInstance(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DDDD)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getRotateInstance(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DDD)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getRotateInstance(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getRotateInstance(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(D)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getRotateInstance(double arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(I)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getQuadrantRotateInstance(int arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(IDD)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getQuadrantRotateInstance(int arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getScaleInstance(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getShearInstance(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()D`
     */
    double getDeterminant();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([D)V`
     */
    void getMatrix(arr_D arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()D`
     */
    double getScaleX();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()D`
     */
    double getScaleY();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()D`
     */
    double getShearX();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()D`
     */
    double getShearY();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()D`
     */
    double getTranslateX();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()D`
     */
    double getTranslateY();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(I)V`
     */
    void quadrantRotate(int arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(IDD)V`
     */
    void quadrantRotate(int arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     */
    void setToIdentity();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void concatenate(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void preConcatenate(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     * Throws: `java.awt.geom.NoninvertibleTransformException`
     */
    AffineTransform createInverse();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()V`
     * Throws: `java.awt.geom.NoninvertibleTransformException`
     */
    void invert();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)Ljava.awt.geom.Point2D;`
     * Throws: `java.awt.geom.NoninvertibleTransformException`
     */
    Point2D inverseTransform(Point2D arg0, Point2D arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([DI[DII)V`
     * Throws: `java.awt.geom.NoninvertibleTransformException`
     */
    void inverseTransform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)Ljava.awt.geom.Point2D;`
     */
    Point2D deltaTransform(Point2D arg0, Point2D arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([DI[DII)V`
     */
    void deltaTransform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.awt.Shape;)Ljava.awt.Shape;`
     */
    Shape createTransformedShape(Shape arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void scale(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)Ljava.awt.geom.Point2D;`
     */
    Point2D transform(Point2D arg0, Point2D arg1);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([DI[FII)V`
     */
    void transform(arr_D arg0, int arg1, arr_F arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([Ljava.awt.geom.Point2D;I[Ljava.awt.geom.Point2D;II)V`
     */
    void transform(Point2D_interface arg0, int arg1, Point2D_interface arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([DI[DII)V`
     */
    void transform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([FI[FII)V`
     */
    void transform(arr_F arg0, int arg1, arr_F arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `([FI[DII)V`
     */
    void transform(arr_F arg0, int arg1, arr_D arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()I`
     */
    int getType();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `()Z`
     */
    bool isIdentity();

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(D)V`
     */
    void rotate(double arg0);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DDDD)V`
     */
    void rotate(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DDD)V`
     */
    void rotate(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.geom.AffineTransform`
     * Signature: `(DD)V`
     */
    void rotate(double arg0, double arg1);
};


/**
 * Classpath: `java.awt.Shape`
 * Package name: `java.awt`
 */
class Shape : public JavaObject {
protected:
    const inline static char *className = "java.awt.Shape";
public:
    STATICINITIALIZE;

    Shape(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `[Ljava.awt.geom.Point2D;`
 */
class Point2D_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.geom.Point2D;";
public:
    STATICINITIALIZE;

    Point2D_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `sun.font.AttributeValues`
 * Package name: `sun.font`
 */
class AttributeValues : public Object {
protected:
    const inline static char *className = "sun.font.AttributeValues";
public:
    STATICINITIALIZE;

    AttributeValues(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getTransform();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()F`
     */
    float getWeight();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()F`
     */
    float getWidth();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int getSuperscript();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.util.Hashtable;`
     */
    Hashtable toSerializableHashtable();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Hashtable;)Lsun.font.AttributeValues;`
     */
    static AttributeValues fromSerializableHashtable(Hashtable arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Hashtable;)Z`
     */
    static bool is16Hashtable(Hashtable arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()V`
     */
    void unsetDefault();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getCharTransform(Map arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getCharTransform();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int getKerning();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int getLigatures();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getBaselineTransform();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform getBaselineTransform(Map arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()V`
     */
    void updateDerivedTransforms();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;Lsun.font.AttributeValues;)V`
     */
    void i_set(EAttribute arg0, AttributeValues arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;Ljava.lang.Object;)V`
     */
    void i_set(EAttribute arg0, Object arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)Ljava.lang.Object;`
     */
    Object i_get(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)Z`
     */
    bool i_validate(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;Lsun.font.AttributeValues;)Z`
     */
    bool i_equals(EAttribute arg0, AttributeValues arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.geom.AffineTransform;Z)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform extractXRotation(AffineTransform arg0, bool arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.geom.Point2D$Double;Ljava.awt.geom.AffineTransform;Z)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform extractRotation(Point2D_Double arg0, AffineTransform arg1, bool arg2);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(F)V`
     */
    void setWidth(float arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void setSuperscript(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.font.GraphicAttribute;`
     */
    GraphicAttribute getCharReplacement();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.font.GraphicAttribute;)V`
     */
    void setCharReplacement(GraphicAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.Paint;`
     */
    Paint getForeground();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.Paint;)V`
     */
    void setForeground(Paint arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int getUnderline();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void setUnderline(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Z`
     */
    bool getStrikethrough();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Z)V`
     */
    void setStrikethrough(bool arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int getRunDirection();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void setRunDirection(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int getBidiEmbedding();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void setBidiEmbedding(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;)F`
     */
    static float getJustification(Map arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()F`
     */
    float getJustification();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(F)V`
     */
    void setJustification(float arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getInputMethodHighlight();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.im.InputMethodHighlight;)V`
     */
    void setInputMethodHighlight(InputMethodHighlight arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.text.Annotation;)V`
     */
    void setInputMethodHighlight(Annotation arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int getInputMethodUnderline();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void setInputMethodUnderline(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Z`
     */
    bool getSwapColors();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Z)V`
     */
    void setSwapColors(bool arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;)Ljava.awt.font.NumericShaper;`
     */
    static NumericShaper getNumericShaping(Map arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.font.NumericShaper;`
     */
    NumericShaper getNumericShaping();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.font.NumericShaper;)V`
     */
    void setNumericShaping(NumericShaper arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void setKerning(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()F`
     */
    float getTracking();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(F)V`
     */
    void setTracking(float arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void setLigatures(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)Z`
     */
    bool allDefined(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)V`
     */
    void unset(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Lsun.font.AttributeValues;`
     */
    AttributeValues applyIMHighlight();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.geom.AffineTransform;Z)Ljava.awt.geom.AffineTransform;`
     */
    static AffineTransform extractYRotation(AffineTransform arg0, bool arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.Font;`
     */
    Font getFont();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.Font;)V`
     */
    void setFont(Font arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void setTransform(AffineTransform arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.font.TransformAttribute;)V`
     */
    void setTransform(TransformAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.awt.Paint;)V`
     */
    void setBackground(Paint arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.awt.Paint;`
     */
    Paint getBackground();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setFamily(String arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(F)V`
     */
    void setWeight(float arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(F)V`
     */
    void setPosture(float arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)V`
     */
    void defineAll(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()F`
     */
    float getPosture();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;)Lsun.font.AttributeValues;`
     */
    static AttributeValues fromMap(Map arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;I)Lsun.font.AttributeValues;`
     */
    static AttributeValues fromMap(Map arg0, int arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)Z`
     */
    bool anyNonDefault(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)Z`
     */
    bool isNonDefault(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(I)Z`
     */
    bool anyDefined(int arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)Ljava.lang.Object;`
     */
    Object get(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)Z`
     */
    static bool equals(Object arg0, Object arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.AttributeValues;)Z`
     */
    bool equals(AttributeValues arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Lsun.font.AttributeValues;`
     */
    AttributeValues clone();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)V`
     */
    void update(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.AttributeValues;I)Lsun.font.AttributeValues;`
     */
    AttributeValues merge(AttributeValues arg0, int arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;)Lsun.font.AttributeValues;`
     */
    AttributeValues merge(Map arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;I)Lsun.font.AttributeValues;`
     */
    AttributeValues merge(Map arg0, int arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.AttributeValues;)Lsun.font.AttributeValues;`
     */
    AttributeValues merge(AttributeValues arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Ljava.util.Map;)Ljava.util.Map;`
     */
    Map toMap(Map arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;Ljava.lang.Object;)V`
     */
    void set(EAttribute arg0, Object arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;Lsun.font.AttributeValues;)V`
     */
    void set(EAttribute arg0, AttributeValues arg1);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()F`
     */
    float getSize();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)Z`
     */
    bool isDefined(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)V`
     */
    void setDefault(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `()Ljava.lang.String;`
     */
    String getFamily();

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `([Lsun.font.EAttribute;)I`
     */
    static int getMask(EAttribute_interface arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(Lsun.font.EAttribute;)I`
     */
    static int getMask(EAttribute arg0);

    /**
     * Declaring class: `sun.font.AttributeValues`
     * Signature: `(F)V`
     */
    void setSize(float arg0);
};


/**
 * Classpath: `[Ljava.util.Hashtable$Entry;`
 */
class Hashtable_Entry_interface : public Object {
protected:
    const inline static char *className = "[Ljava.util.Hashtable$Entry;";
public:
    STATICINITIALIZE;

    Hashtable_Entry_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.util.Dictionary`
 * Package name: `java.util`
 */
class Dictionary : public Object {
protected:
    const inline static char *className = "java.util.Dictionary";
public:
    STATICINITIALIZE;

    Dictionary(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.Dictionary`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object remove(Object arg0);

    /**
     * Declaring class: `java.util.Dictionary`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object get(Object arg0);

    /**
     * Declaring class: `java.util.Dictionary`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object put(Object arg0, Object arg1);

    /**
     * Declaring class: `java.util.Dictionary`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `java.util.Dictionary`
     * Signature: `()I`
     */
    int size();

    /**
     * Declaring class: `java.util.Dictionary`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration elements();

    /**
     * Declaring class: `java.util.Dictionary`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration keys();
};


/**
 * Classpath: `sun.font.EAttribute`
 * Package name: `sun.font`
 */
class EAttribute : public Enum {
protected:
    const inline static char *className = "sun.font.EAttribute";
public:
    STATICINITIALIZE;

    EAttribute(jobject object) : Enum(object) {}


    /**
     * Declaring class: `sun.font.EAttribute`
     * Signature: `(Ljava.text.AttributedCharacterIterator$Attribute;)Lsun.font.EAttribute;`
     */
    static EAttribute forAttribute(AttributedCharacterIterator_Attribute arg0);

    /**
     * Declaring class: `sun.font.EAttribute`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.font.EAttribute`
     * Signature: `(Ljava.lang.String;)Lsun.font.EAttribute;`
     */
    static EAttribute valueOf(String arg0);
};


/**
 * Classpath: `java.awt.geom.Point2D$Double`
 * Enclosing class: `java.awt.geom.Point2D`
 * Package name: `java.awt.geom`
 */
class Point2D_Double : public Point2D {
protected:
    const inline static char *className = "java.awt.geom.Point2D$Double";
public:
    STATICINITIALIZE;

    Point2D_Double(jobject object) : Point2D(object) {}


    /**
     * Declaring class: `java.awt.geom.Point2D$Double`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `java.awt.geom.Point2D$Double`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `java.awt.geom.Point2D$Double`
     * Signature: `(DD)V`
     */
    void setLocation(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Point2D$Double`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `java.awt.font.GraphicAttribute`
 * Package name: `java.awt.font`
 */
class GraphicAttribute : public Object {
protected:
    const inline static char *className = "java.awt.font.GraphicAttribute";
public:
    STATICINITIALIZE;

    GraphicAttribute(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `(Ljava.awt.Graphics2D;FF)V`
     */
    void draw(Graphics2D arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `()F`
     */
    float getAscent();

    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `()F`
     */
    float getAdvance();

    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `()F`
     */
    float getDescent();

    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `(Ljava.awt.geom.AffineTransform;)Ljava.awt.Shape;`
     */
    Shape getOutline(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `()I`
     */
    int getAlignment();

    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `()Ljava.awt.font.GlyphJustificationInfo;`
     */
    GlyphJustificationInfo getJustificationInfo();

    /**
     * Declaring class: `java.awt.font.GraphicAttribute`
     * Signature: `()Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getBounds();
};


/**
 * Classpath: `java.awt.Graphics2D`
 * Package name: `java.awt`
 */
class Graphics2D : public Graphics {
protected:
    const inline static char *className = "java.awt.Graphics2D";
public:
    STATICINITIALIZE;

    Graphics2D(jobject object) : Graphics(object) {}


    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getTransform();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void drawString(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.lang.String;FF)V`
     */
    void drawString(String arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.text.AttributedCharacterIterator;II)V`
     */
    void drawString(AttributedCharacterIterator arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.text.AttributedCharacterIterator;FF)V`
     */
    void drawString(AttributedCharacterIterator arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(DD)V`
     */
    void translate(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(II)V`
     */
    void translate(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void draw(Shape arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void clip(Shape arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(IIIIZ)V`
     */
    void draw3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(IIIIZ)V`
     */
    void fill3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Image;Ljava.awt.geom.AffineTransform;Ljava.awt.image.ImageObserver;)Z`
     */
    bool drawImage(Image arg0, AffineTransform arg1, ImageObserver arg2);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.image.BufferedImage;Ljava.awt.image.BufferedImageOp;II)V`
     */
    void drawImage(BufferedImage arg0, BufferedImageOp arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.Paint;`
     */
    Paint getPaint();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Paint;)V`
     */
    void setPaint(Paint arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.image.RenderedImage;Ljava.awt.geom.AffineTransform;)V`
     */
    void drawRenderedImage(RenderedImage arg0, AffineTransform arg1);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.image.renderable.RenderableImage;Ljava.awt.geom.AffineTransform;)V`
     */
    void drawRenderableImage(RenderableImage arg0, AffineTransform arg1);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.font.GlyphVector;FF)V`
     */
    void drawGlyphVector(GlyphVector arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration getDeviceConfiguration();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Composite;)V`
     */
    void setComposite(Composite arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Stroke;)V`
     */
    void setStroke(Stroke arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.RenderingHints$Key;Ljava.lang.Object;)V`
     */
    void setRenderingHint(RenderingHints_Key arg0, Object arg1);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.RenderingHints$Key;)Ljava.lang.Object;`
     */
    Object getRenderingHint(RenderingHints_Key arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.util.Map;)V`
     */
    void setRenderingHints(Map arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.util.Map;)V`
     */
    void addRenderingHints(Map arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.RenderingHints;`
     */
    RenderingHints getRenderingHints();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(DD)V`
     */
    void shear(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void setTransform(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.Composite;`
     */
    Composite getComposite();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setBackground(Color arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.Color;`
     */
    Color getBackground();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.Stroke;`
     */
    Stroke getStroke();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `()Ljava.awt.font.FontRenderContext;`
     */
    FontRenderContext getFontRenderContext();

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(DD)V`
     */
    void scale(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void fill(Shape arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void transform(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(DDD)V`
     */
    void rotate(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(D)V`
     */
    void rotate(double arg0);

    /**
     * Declaring class: `java.awt.Graphics2D`
     * Signature: `(Ljava.awt.Rectangle;Ljava.awt.Shape;Z)Z`
     */
    bool hit(Rectangle arg0, Shape arg1, bool arg2);
};


/**
 * Classpath: `java.awt.Image`
 * Package name: `java.awt`
 */
class Image : public Object {
protected:
    const inline static char *className = "java.awt.Image";
public:
    STATICINITIALIZE;

    Image(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Image`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)Ljava.awt.ImageCapabilities;`
     */
    ImageCapabilities getCapabilities(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `(Ljava.awt.image.ImageObserver;)I`
     */
    int getWidth(ImageObserver arg0);

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `(Ljava.awt.image.ImageObserver;)I`
     */
    int getHeight(ImageObserver arg0);

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics getGraphics();

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `(F)V`
     */
    void setAccelerationPriority(float arg0);

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `(III)Ljava.awt.Image;`
     */
    Image getScaledInstance(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `()F`
     */
    float getAccelerationPriority();

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `(Ljava.lang.String;Ljava.awt.image.ImageObserver;)Ljava.lang.Object;`
     */
    Object getProperty(String arg0, ImageObserver arg1);

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `()V`
     */
    void flush();

    /**
     * Declaring class: `java.awt.Image`
     * Signature: `()Ljava.awt.image.ImageProducer;`
     */
    ImageProducer getSource();
};


/**
 * Classpath: `java.awt.GraphicsConfiguration`
 * Package name: `java.awt`
 */
class GraphicsConfiguration : public Object {
protected:
    const inline static char *className = "java.awt.GraphicsConfiguration";
public:
    STATICINITIALIZE;

    GraphicsConfiguration(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `(II)Ljava.awt.image.BufferedImage;`
     */
    BufferedImage createCompatibleImage(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `(III)Ljava.awt.image.BufferedImage;`
     */
    BufferedImage createCompatibleImage(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `(II)Ljava.awt.image.VolatileImage;`
     */
    VolatileImage createCompatibleVolatileImage(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `(IILjava.awt.ImageCapabilities;I)Ljava.awt.image.VolatileImage;`
     * Throws: `java.awt.AWTException`
     */
    VolatileImage createCompatibleVolatileImage(int arg0, int arg1, ImageCapabilities arg2, int arg3);

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `(III)Ljava.awt.image.VolatileImage;`
     */
    VolatileImage createCompatibleVolatileImage(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `(IILjava.awt.ImageCapabilities;)Ljava.awt.image.VolatileImage;`
     * Throws: `java.awt.AWTException`
     */
    VolatileImage createCompatibleVolatileImage(int arg0, int arg1, ImageCapabilities arg2);

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Ljava.awt.ImageCapabilities;`
     */
    ImageCapabilities getImageCapabilities();

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Ljava.awt.GraphicsDevice;`
     */
    GraphicsDevice getDevice();

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getDefaultTransform();

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getNormalizingTransform();

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Ljava.awt.BufferCapabilities;`
     */
    BufferCapabilities getBufferCapabilities();

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Z`
     */
    bool isTranslucencyCapable();

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getBounds();

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `(I)Ljava.awt.image.ColorModel;`
     */
    ColorModel getColorModel(int arg0);

    /**
     * Declaring class: `java.awt.GraphicsConfiguration`
     * Signature: `()Ljava.awt.image.ColorModel;`
     */
    ColorModel getColorModel();
};


/**
 * Classpath: `java.awt.image.VolatileImage`
 * Package name: `java.awt.image`
 */
class VolatileImage : public Image {
protected:
    const inline static char *className = "java.awt.image.VolatileImage";
public:
    STATICINITIALIZE;

    VolatileImage(jobject object) : Image(object) {}


    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()Ljava.awt.ImageCapabilities;`
     */
    ImageCapabilities getCapabilities();

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()I`
     */
    int getWidth();

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()Ljava.awt.image.BufferedImage;`
     */
    BufferedImage getSnapshot();

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()Z`
     */
    bool contentsLost();

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics getGraphics();

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)I`
     */
    int validate(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()Ljava.awt.image.ImageProducer;`
     */
    ImageProducer getSource();

    /**
     * Declaring class: `java.awt.image.VolatileImage`
     * Signature: `()Ljava.awt.Graphics2D;`
     */
    Graphics2D createGraphics();
};


/**
 * Classpath: `java.awt.ImageCapabilities`
 * Package name: `java.awt`
 */
class ImageCapabilities : public Object {
protected:
    const inline static char *className = "java.awt.ImageCapabilities";
public:
    STATICINITIALIZE;

    ImageCapabilities(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.ImageCapabilities`
     * Signature: `()Z`
     */
    bool isAccelerated();

    /**
     * Declaring class: `java.awt.ImageCapabilities`
     * Signature: `()Z`
     */
    bool isTrueVolatile();

    /**
     * Declaring class: `java.awt.ImageCapabilities`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();
};


/**
 * Classpath: `java.awt.image.ImageProducer`
 * Package name: `java.awt.image`
 */
class ImageProducer : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.ImageProducer";
public:
    STATICINITIALIZE;

    ImageProducer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.GraphicsDevice`
 * Package name: `java.awt`
 */
class GraphicsDevice : public Object {
protected:
    const inline static char *className = "java.awt.GraphicsDevice";
public:
    STATICINITIALIZE;

    GraphicsDevice(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Ljava.awt.DisplayMode;`
     */
    DisplayMode getDisplayMode();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `(Ljava.awt.DisplayMode;)V`
     */
    void setDisplayMode(DisplayMode arg0);

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `(Ljava.awt.GraphicsConfigTemplate;)Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration getBestConfiguration(GraphicsConfigTemplate arg0);

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Ljava.awt.Window;`
     */
    Window getFullScreenWindow();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `(Ljava.awt.Window;)V`
     */
    void setFullScreenWindow(Window arg0);

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration getDefaultConfiguration();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Z`
     */
    static bool isWindowShapingSupported();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Z`
     */
    static bool isWindowOpacitySupported();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Z`
     */
    bool isWindowPerpixelTranslucencySupported();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `(Ljava.awt.GraphicsDevice$WindowTranslucency;)Z`
     */
    bool isWindowTranslucencySupported(GraphicsDevice_WindowTranslucency arg0);

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration getTranslucencyCapableGC();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Ljava.lang.String;`
     */
    String getIDstring();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Z`
     */
    bool isFullScreenSupported();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()Z`
     */
    bool isDisplayChangeSupported();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()I`
     */
    int getAvailableAcceleratedMemory();

    /**
     * Declaring class: `java.awt.GraphicsDevice`
     * Signature: `()I`
     */
    int getType();
};


/**
 * Classpath: `java.awt.DisplayMode`
 * Package name: `java.awt`
 */
class DisplayMode : public Object {
protected:
    const inline static char *className = "java.awt.DisplayMode";
public:
    STATICINITIALIZE;

    DisplayMode(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `()I`
     */
    int getWidth();

    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `()I`
     */
    int getBitDepth();

    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `()I`
     */
    int getRefreshRate();

    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `(Ljava.awt.DisplayMode;)Z`
     */
    bool equals(DisplayMode arg0);

    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.DisplayMode`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `java.awt.GraphicsConfigTemplate`
 * Package name: `java.awt`
 */
class GraphicsConfigTemplate : public Object {
protected:
    const inline static char *className = "java.awt.GraphicsConfigTemplate";
public:
    STATICINITIALIZE;

    GraphicsConfigTemplate(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.GraphicsConfigTemplate`
     * Signature: `([Ljava.awt.GraphicsConfiguration;)Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration getBestConfiguration(GraphicsConfiguration_interface arg0);

    /**
     * Declaring class: `java.awt.GraphicsConfigTemplate`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)Z`
     */
    bool isGraphicsConfigSupported(GraphicsConfiguration arg0);
};


/**
 * Classpath: `[Ljava.awt.GraphicsConfiguration;`
 */
class GraphicsConfiguration_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.GraphicsConfiguration;";
public:
    STATICINITIALIZE;

    GraphicsConfiguration_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.awt.Window`
 * Package name: `java.awt`
 */
class Window : public Container {
protected:
    const inline static char *className = "java.awt.Window";
public:
    STATICINITIALIZE;

    Window(jobject object) : Container(object) {}


    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void setShape(Shape arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()F`
     */
    float getOpacity();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(F)V`
     */
    void setOpacity(float arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)V`
     */
    void setGraphicsConfiguration(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Z)V`
     */
    void setVisible(bool arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void toFront();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void addToWindowList();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void setWarningString();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration initGC(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Toolkit;`
     */
    Toolkit getToolkit();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Z)V`
     */
    void setLocationByPlatform(bool arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Window;)V`
     */
    void ownedInit(Window arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.lang.ref.WeakReference;)V`
     */
    void addOwnedWindow(WeakReference arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isAlwaysOnTop();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Z)V`
     * Throws: `java.lang.SecurityException`
     */
    void setAlwaysOnTop(bool arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.util.List;)V`
     */
    void setIconImages(List arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void removeNotify();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(II)V`
     */
    void setClientSize(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setMinimumSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void closeSplashScreen();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void show();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isModalBlocked();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void updateChildrenBlocking();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void toFront_NoClientCode();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Window;)V`
     */
    static void updateChildFocusableWindowState(Window arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(I)V`
     */
    void postWindowEvent(int arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isShowing();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void hide();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void doDispose();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void toBack_NoClientCode();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void toBack();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Cursor;)V`
     */
    void setCursor(Cursor arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Window;`
     */
    Window getOwner_NoClientCode();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Dialog;ZZ)V`
     */
    void setModalBlocked(Dialog arg0, bool arg1, bool arg2);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Dialog$ModalExclusionType;)Z`
     */
    bool isModalExcluded(Dialog_ModalExclusionType arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Dialog;`
     */
    Dialog getModalBlocker();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.AWTEvent;)Z`
     */
    bool eventEnabled(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowEvent;)V`
     */
    void processWindowEvent(WindowEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowEvent;)V`
     */
    void processWindowFocusEvent(WindowEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowEvent;)V`
     */
    void processWindowStateEvent(WindowEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void processEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isAlwaysOnTopSupported();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Z)V`
     */
    void setOwnedWindowsAlwaysOnTop(bool arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isFocused();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getFocusOwner();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getMostRecentFocusOwner();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isFocusableWindow();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool getFocusableWindowState();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(PropertyChangeListener arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void dispatchEventImpl(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.util.ResourceBundle;)V`
     */
    void applyResourceBundle(ResourceBundle arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.lang.String;)V`
     */
    void applyResourceBundle(String arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void removeFromWindowList();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Lsun.awt.AppContext;Ljava.lang.ref.WeakReference;)V`
     */
    static void removeFromWindowList(AppContext arg0, WeakReference arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowListener;)V`
     */
    void addWindowListener(WindowListener arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowFocusListener;)V`
     */
    void addWindowFocusListener(WindowFocusListener arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowStateListener;)V`
     */
    void addWindowStateListener(WindowStateListener arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Window;)V`
     */
    void connectOwnedWindow(Window arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void initDeserializedWindow();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Dialog$ModalExclusionType;)V`
     */
    void setModalExclusionType(Dialog_ModalExclusionType arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException`
     */
    void deserializeResources(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(ILjava.awt.BufferCapabilities;)V`
     * Throws: `java.awt.AWTException`
     */
    void createBufferStrategy(int arg0, BufferCapabilities arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(I)V`
     */
    void createBufferStrategy(int arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.image.BufferStrategy;`
     */
    BufferStrategy getBufferStrategy();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Component;)Z`
     */
    bool canContainFocusOwner(Component arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Component;Z)V`
     */
    static void setLayersOpaque(Component arg0, bool arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void updateWindow();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void paint(Graphics arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.util.List;`
     */
    List getIconImages();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Image;)V`
     */
    void setIconImage(Image arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void pack();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void clearMostRecentFocusOwnerOnHide();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void disposeImpl();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(JI)V`
     */
    void adjustListeningChildrenOnParent(long arg0, int arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(I)V`
     */
    void adjustDescendantsOnParent(int arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.lang.String;`
     */
    String getWarningString();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.im.InputContext;`
     */
    InputContext getInputContext();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Lsun.awt.util.IdentityArrayList;`
     */
    static IdentityArrayList getAllWindows();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Lsun.awt.util.IdentityArrayList;`
     */
    static IdentityArrayList getAllUnblockedWindows();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Window;`
     */
    Window getDocumentRoot();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Dialog$ModalExclusionType;`
     */
    Dialog_ModalExclusionType getModalExclusionType();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowListener;)V`
     */
    void removeWindowListener(WindowListener arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowStateListener;)V`
     */
    void removeWindowStateListener(WindowStateListener arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.WindowFocusListener;)V`
     */
    void removeWindowFocusListener(WindowFocusListener arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.KeyEvent;)V`
     */
    void preProcessKeyEvent(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.KeyEvent;)V`
     */
    void postProcessKeyEvent(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(I)Ljava.util.Set;`
     */
    Set getFocusTraversalKeys(int arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Z)V`
     */
    void setFocusCycleRoot(bool arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isFocusCycleRoot();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getFocusCycleRootAncestor();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Z)V`
     */
    void setFocusableWindowState(bool arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Z)V`
     */
    void setAutoRequestFocus(bool arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isAutoRequestFocus();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isValidateRoot();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isDisposing();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.lang.ref.WeakReference;)V`
     */
    void removeOwnedWindow(WeakReference arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Window$Type;)V`
     */
    void setType(Window_Type arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Component;)V`
     */
    void setLocationRelativeTo(Component arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.MouseWheelEvent;)V`
     */
    void deliverMouseWheelToAncestor(MouseWheelEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.event.MouseWheelEvent;)Z`
     */
    bool dispatchMouseWheelToAncestor(MouseWheelEvent arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getTemporaryLostComponent();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Component;)Ljava.awt.Component;`
     */
    Component setTemporaryLostComponent(Component arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isLocationByPlatform();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isRecursivelyVisible();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getContainer();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Lsun.java2d.pipe.Region;)V`
     */
    void applyCompoundShape(Region arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void applyCurrentShape();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void mixOnReshaping();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocationOnWindow();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(DDDD)Ljava.awt.geom.Point2D;`
     */
    Point2D calculateSecurityWarningPosition(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void updateZOrder();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Rectangle;)V`
     */
    void setBounds(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(IIII)V`
     */
    void setBounds(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(IIII)V`
     */
    void reshape(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(II)V`
     */
    void setLocation(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void setLocation(Point arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setBackground(Color arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Color;`
     */
    Color getBackground();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(DDD)D`
     */
    static double limit(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)V`
     */
    void init(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Window$Type;`
     */
    Window_Type getType();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isOpaque();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Z`
     */
    bool isActive();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Window;`
     */
    Window getOwner();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()V`
     */
    void dispose();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `(II)V`
     */
    void setSize(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.awt.Shape;`
     */
    Shape getShape();

    /**
     * Declaring class: `java.awt.Window`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale getLocale();
};


/**
 * Classpath: `java.awt.Toolkit`
 * Package name: `java.awt`
 */
class Toolkit : public Object {
protected:
    const inline static char *className = "java.awt.Toolkit";
public:
    STATICINITIALIZE;

    Toolkit(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.Toolkit;`
     */
    static Toolkit getDefaultToolkit();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.datatransfer.Clipboard;`
     * Throws: `java.awt.HeadlessException`
     */
    Clipboard getSystemClipboard();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.im.InputMethodHighlight;)Ljava.util.Map;`
     * Throws: `java.awt.HeadlessException`
     */
    Map mapInputMethodHighlight(InputMethodHighlight arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)Ljava.awt.Insets;`
     * Throws: `java.awt.HeadlessException`
     */
    Insets getScreenInsets(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(J)Z`
     */
    static bool enabledOnToolkit(long arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.EventQueue;`
     */
    static EventQueue getEventQueue();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Dialog$ModalExclusionType;)Z`
     */
    bool isModalExclusionTypeSupported(Dialog_ModalExclusionType arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Z`
     */
    bool isAlwaysOnTopSupported();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Component;)Ljava.awt.Container;`
     */
    static Container getNativeContainer(Component arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `([BII)Ljava.awt.Image;`
     */
    Image createImage(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.net.URL;)Ljava.awt.Image;`
     */
    Image createImage(URL arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `([B)Ljava.awt.Image;`
     */
    Image createImage(arr_B arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.image.ImageProducer;)Ljava.awt.Image;`
     */
    Image createImage(ImageProducer arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Image;`
     */
    Image createImage(String arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Font;)Ljava.awt.FontMetrics;`
     */
    FontMetrics getFontMetrics(Font arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)Z`
     */
    bool prepareImage(Image arg0, int arg1, int arg2, ImageObserver arg3);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)I`
     */
    int checkImage(Image arg0, int arg1, int arg2, ImageObserver arg3);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void notifyAWTEventListeners(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Toolkit;)Ljava.beans.PropertyChangeSupport;`
     */
    static PropertyChangeSupport createPropertyChangeSupport(Toolkit arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Z)V`
     * Throws: `java.awt.HeadlessException`
     */
    void setDynamicLayout(bool arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Z`
     * Throws: `java.awt.HeadlessException`
     */
    bool isDynamicLayoutSet();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Z`
     * Throws: `java.awt.HeadlessException`
     */
    bool isDynamicLayoutActive();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.Throwable;Ljava.lang.String;)V`
     */
    static void newAWTError(Throwable arg0, String arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    static void loadAssistiveTechnologies();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Frame;Ljava.lang.String;Ljava.util.Properties;)Ljava.awt.PrintJob;`
     */
    PrintJob getPrintJob(Frame arg0, String arg1, Properties arg2);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Frame;Ljava.lang.String;Ljava.awt.JobAttributes;Ljava.awt.PageAttributes;)Ljava.awt.PrintJob;`
     */
    PrintJob getPrintJob(Frame arg0, String arg1, JobAttributes arg2, PageAttributes arg3);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.datatransfer.Clipboard;`
     * Throws: `java.awt.HeadlessException`
     */
    Clipboard getSystemSelection();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Image;Ljava.awt.Point;Ljava.lang.String;)Ljava.awt.Cursor;`
     * Throws: `java.lang.IndexOutOfBoundsException, java.awt.HeadlessException`
     */
    Cursor createCustomCursor(Image arg0, Point arg1, String arg2);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(II)Ljava.awt.Dimension;`
     * Throws: `java.awt.HeadlessException`
     */
    Dimension getBestCursorSize(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()I`
     * Throws: `java.awt.HeadlessException`
     */
    int getMaximumCursorColors();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(I)Z`
     * Throws: `java.awt.HeadlessException`
     */
    bool isFrameStateSupported(int arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    static void initAssistiveTechnologies();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.EventQueue;`
     */
    EventQueue getSystemEventQueueImpl();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object getDesktopProperty(String arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    void initializeDesktopProperties();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object lazilyLoadDesktopProperty(String arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;)V`
     */
    void setDesktopProperty(String arg0, Object arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.event.AWTEventListener;)Ljava.awt.event.AWTEventListener;`
     */
    static AWTEventListener deProxyAWTEventListener(AWTEventListener arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Z`
     * Throws: `java.awt.HeadlessException`
     */
    bool areExtraMouseButtonsEnabled();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `([I)V`
     * Throws: `java.awt.HeadlessException`
     */
    void loadSystemColors(arr_I arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.Dimension;`
     * Throws: `java.awt.HeadlessException`
     */
    Dimension getScreenSize();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()I`
     * Throws: `java.awt.HeadlessException`
     */
    int getScreenResolution();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;)V`
     */
    static void fallbackToLoadClassForAT(String arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.net.URL;)Ljava.awt.Image;`
     */
    Image getImage(URL arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Image;`
     */
    Image getImage(String arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    void beep();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()I`
     * Throws: `java.awt.HeadlessException`
     */
    int getMenuShortcutKeyMask();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()I`
     * Throws: `java.awt.HeadlessException`
     */
    int getMenuShortcutKeyMaskEx();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(I)Z`
     * Throws: `java.lang.UnsupportedOperationException`
     */
    bool getLockingKeyState(int arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(IZ)V`
     * Throws: `java.lang.UnsupportedOperationException`
     */
    void setLockingKeyState(int arg0, bool arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.util.ResourceBundle;)V`
     */
    static void setPlatformResources(ResourceBundle arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.EventQueue;`
     */
    EventQueue getSystemEventQueue();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.Class;Ljava.awt.dnd.DragSource;Ljava.awt.Component;ILjava.awt.dnd.DragGestureListener;)Ljava.awt.dnd.DragGestureRecognizer;`
     */
    DragGestureRecognizer createDragGestureRecognizer(Class arg0, DragSource arg1, Component arg2, int arg3, DragGestureListener arg4);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.Dialog$ModalityType;)Z`
     */
    bool isModalityTypeSupported(Dialog_ModalityType arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.event.AWTEventListener;J)V`
     */
    void addAWTEventListener(AWTEventListener arg0, long arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.awt.event.AWTEventListener;)V`
     */
    void removeAWTEventListener(AWTEventListener arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(J)I`
     */
    int countAWTEventListeners(long arg0);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    static String getProperty(String arg0, String arg1);

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    void sync();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    static void initStatic();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()Ljava.awt.image.ColorModel;`
     * Throws: `java.awt.HeadlessException`
     */
    ColorModel getColorModel();

    /**
     * Declaring class: `java.awt.Toolkit`
     * Signature: `()V`
     */
    static void loadLibraries();
};


/**
 * Classpath: `java.awt.datatransfer.Clipboard`
 * Package name: `java.awt.datatransfer`
 */
class Clipboard : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.Clipboard";
public:
    STATICINITIALIZE;

    Clipboard(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `(Ljava.lang.Object;)Ljava.awt.datatransfer.Transferable;`
     */
    Transferable getContents(Object arg0);

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `(Ljava.awt.datatransfer.Transferable;Ljava.awt.datatransfer.ClipboardOwner;)V`
     */
    void setContents(Transferable arg0, ClipboardOwner arg1);

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `(Ljava.awt.datatransfer.DataFlavor;)Ljava.lang.Object;`
     * Throws: `java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException`
     */
    Object getData(DataFlavor arg0);

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `(Ljava.awt.datatransfer.FlavorListener;)V`
     */
    void removeFlavorListener(FlavorListener arg0);

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `()V`
     */
    void fireFlavorsChanged();

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `()Ljava.util.Set;`
     */
    Set getAvailableDataFlavorSet();

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `(Ljava.awt.datatransfer.DataFlavor;)Z`
     */
    bool isDataFlavorAvailable(DataFlavor arg0);

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `(Ljava.awt.datatransfer.FlavorListener;)V`
     */
    void addFlavorListener(FlavorListener arg0);

    /**
     * Declaring class: `java.awt.datatransfer.Clipboard`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();
};


/**
 * Classpath: `java.awt.datatransfer.Transferable`
 * Package name: `java.awt.datatransfer`
 */
class Transferable : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.Transferable";
public:
    STATICINITIALIZE;

    Transferable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.datatransfer.ClipboardOwner`
 * Package name: `java.awt.datatransfer`
 */
class ClipboardOwner : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.ClipboardOwner";
public:
    STATICINITIALIZE;

    ClipboardOwner(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.datatransfer.DataFlavor`
 * Package name: `java.awt.datatransfer`
 */
class DataFlavor : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.DataFlavor";
public:
    STATICINITIALIZE;

    DataFlavor(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getParameter(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.Class;`
     * Throws: `java.lang.ClassNotFoundException`
     */
    static Class tryToLoadClass(String arg0, ClassLoader arg1);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.String;`
     */
    String getPrimaryType();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.String;`
     */
    String getSubType();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isRepresentationClassInputStream();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isRepresentationClassByteBuffer();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isFlavorTextType();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getRepresentationClass();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isStandardTextRepresentationClass();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool isMimeTypeEqual(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.awt.datatransfer.DataFlavor;)Z`
     */
    bool isMimeTypeEqual(DataFlavor arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.awt.datatransfer.MimeType;)Z`
     */
    bool isMimeTypeEqual(MimeType arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isRepresentationClassReader();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isRepresentationClassCharBuffer();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getDefaultRepresentationClass();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isRepresentationClassSerializable();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isRepresentationClassRemote();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;)Ljava.awt.datatransfer.DataFlavor;`
     */
    static DataFlavor initHtml(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.awt.datatransfer.DataFlavor;`
     */
    static DataFlavor getTextPlainUnicodeFlavor();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `([Ljava.awt.datatransfer.DataFlavor;)Ljava.awt.datatransfer.DataFlavor;`
     */
    static DataFlavor selectBestTextFlavor(DataFlavor_interface arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.awt.datatransfer.Transferable;)Ljava.io.Reader;`
     * Throws: `java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException`
     */
    Reader getReaderForText(Transferable arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.String;`
     */
    String getMimeType();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.String;`
     */
    String getHumanPresentableName();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setHumanPresentableName(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isMimeTypeSerializedObject();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.String;`
     */
    String getDefaultRepresentationClassAsString();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isFlavorSerializedObjectType();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isFlavorRemoteObjectType();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Z`
     */
    bool isFlavorJavaFileListType();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String normalizeMimeTypeParameter(String arg0, String arg1);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String normalizeMimeType(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.awt.datatransfer.DataFlavor;)Z`
     */
    bool equals(DataFlavor arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool equals(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.lang.CloneNotSupportedException`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.ClassLoader;)V`
     * Throws: `java.awt.datatransfer.MimeTypeParseException, java.lang.ClassNotFoundException`
     */
    void initialize(String arg0, String arg1, ClassLoader arg2);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.awt.datatransfer.DataFlavor;)Z`
     */
    bool match(DataFlavor arg0);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Ljava.awt.datatransfer.DataFlavor;`
     */
    static DataFlavor createConstant(Class arg0, String arg1);

    /**
     * Declaring class: `java.awt.datatransfer.DataFlavor`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.awt.datatransfer.DataFlavor;`
     */
    static DataFlavor createConstant(String arg0, String arg1);
};


/**
 * Classpath: `java.awt.datatransfer.MimeType`
 * Package name: `java.awt.datatransfer`
 */
class MimeType : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.MimeType";
public:
    STATICINITIALIZE;

    MimeType(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.lang.String;)V`
     */
    void removeParameter(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getParameter(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `()Ljava.lang.String;`
     */
    String getBaseType();

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void setParameter(String arg0, String arg1);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `()Ljava.lang.String;`
     */
    String getPrimaryType();

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `()Ljava.lang.String;`
     */
    String getSubType();

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool isValidToken(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(C)Z`
     */
    static bool isTokenChar(char arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.lang.String;)Z`
     * Throws: `java.awt.datatransfer.MimeTypeParseException`
     */
    bool match(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.awt.datatransfer.MimeType;)Z`
     */
    bool match(MimeType arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `()Ljava.awt.datatransfer.MimeTypeParameterList;`
     */
    MimeTypeParameterList getParameters();

    /**
     * Declaring class: `java.awt.datatransfer.MimeType`
     * Signature: `(Ljava.lang.String;)V`
     * Throws: `java.awt.datatransfer.MimeTypeParseException`
     */
    void parse(String arg0);
};


/**
 * Classpath: `java.awt.datatransfer.MimeTypeParameterList`
 * Package name: `java.awt.datatransfer`
 */
class MimeTypeParameterList : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.MimeTypeParameterList";
public:
    STATICINITIALIZE;

    MimeTypeParameterList(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(C)Z`
     */
    static bool isTokenChar(char arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration getNames();

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String unquote(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.String;)V`
     */
    void remove(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String get(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `()I`
     */
    int size();

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void set(String arg0, String arg1);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String quote(String arg0);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.String;I)I`
     */
    static int skipWhiteSpace(String arg0, int arg1);

    /**
     * Declaring class: `java.awt.datatransfer.MimeTypeParameterList`
     * Signature: `(Ljava.lang.String;)V`
     * Throws: `java.awt.datatransfer.MimeTypeParseException`
     */
    void parse(String arg0);
};


/**
 * Classpath: `[Ljava.awt.datatransfer.DataFlavor;`
 */
class DataFlavor_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.datatransfer.DataFlavor;";
public:
    STATICINITIALIZE;

    DataFlavor_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.io.Reader`
 * Package name: `java.io`
 */
class Reader : public Object {
protected:
    const inline static char *className = "java.io.Reader";
public:
    STATICINITIALIZE;

    Reader(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.io.Reader`
     * Signature: `(I)V`
     * Throws: `java.io.IOException`
     */
    void mark(int arg0);

    /**
     * Declaring class: `java.io.Reader`
     * Signature: `(Ljava.io.Writer;)J`
     * Throws: `java.io.IOException`
     */
    long transferTo(Writer arg0);

    /**
     * Declaring class: `java.io.Reader`
     * Signature: `(J)J`
     * Throws: `java.io.IOException`
     */
    long skip(long arg0);

    /**
     * Declaring class: `java.io.Reader`
     * Signature: `()Z`
     */
    bool markSupported();

    /**
     * Declaring class: `java.io.Reader`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void reset();

    /**
     * Declaring class: `java.io.Reader`
     * Signature: `()Z`
     * Throws: `java.io.IOException`
     */
    bool ready();

    /**
     * Declaring class: `java.io.Reader`
     * Signature: `()Ljava.io.Reader;`
     */
    static Reader nullReader();
};


/**
 * Classpath: `java.awt.datatransfer.FlavorListener`
 * Package name: `java.awt.datatransfer`
 */
class FlavorListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.FlavorListener";
public:
    STATICINITIALIZE;

    FlavorListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.im.InputMethodHighlight`
 * Package name: `java.awt.im`
 */
class InputMethodHighlight : public Object {
protected:
    const inline static char *className = "java.awt.im.InputMethodHighlight";
public:
    STATICINITIALIZE;

    InputMethodHighlight(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.im.InputMethodHighlight`
     * Signature: `()Z`
     */
    bool isSelected();

    /**
     * Declaring class: `java.awt.im.InputMethodHighlight`
     * Signature: `()I`
     */
    int getVariation();

    /**
     * Declaring class: `java.awt.im.InputMethodHighlight`
     * Signature: `()Ljava.util.Map;`
     */
    Map getStyle();

    /**
     * Declaring class: `java.awt.im.InputMethodHighlight`
     * Signature: `()I`
     */
    int getState();
};


/**
 * Classpath: `java.awt.Insets`
 * Package name: `java.awt`
 */
class Insets : public Object {
protected:
    const inline static char *className = "java.awt.Insets";
public:
    STATICINITIALIZE;

    Insets(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Insets`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.Insets`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Insets`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.Insets`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.Insets`
     * Signature: `(IIII)V`
     */
    void set(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Insets`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.EventQueue`
 * Package name: `java.awt`
 */
class EventQueue : public Object {
protected:
    const inline static char *className = "java.awt.EventQueue";
public:
    STATICINITIALIZE;

    EventQueue(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void postEventPrivate(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()V`
     */
    void initDispatchThread();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;I)Z`
     */
    bool coalesceEvent(AWTEvent arg0, int arg1);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Lsun.awt.EventQueueItem;)V`
     */
    void cacheEQItem(EventQueueItem arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Z`
     */
    bool noEvents();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.event.PaintEvent;)Z`
     */
    bool coalescePaintEvent(PaintEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;)I`
     */
    static int eventToCacheIndex(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.event.PaintEvent;Ljava.awt.event.PaintEvent;)Ljava.awt.event.PaintEvent;`
     */
    PaintEvent mergePaintEvents(PaintEvent arg0, PaintEvent arg1);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Lsun.awt.PeerEvent;)Z`
     */
    bool coalescePeerEvent(PeerEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;I)Z`
     */
    bool coalesceOtherEvent(AWTEvent arg0, int arg1);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.event.MouseEvent;)Z`
     */
    bool coalesceMouseEvent(MouseEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Ljava.awt.AWTEvent;`
     * Throws: `java.lang.InterruptedException`
     */
    AWTEvent getNextEventPrivate();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Lsun.awt.EventQueueItem;)V`
     */
    void uncacheEQItem(EventQueueItem arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.lang.Object;)Ljava.security.AccessControlContext;`
     */
    static AccessControlContext getAccessControlContextFrom(Object arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void setCurrentEventAndMostRecentTimeImpl(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Lsun.util.logging.PlatformLogger;`
     */
    static PlatformLogger getEventLog();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()J`
     */
    long getMostRecentEventTimeImpl();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Ljava.awt.AWTEvent;`
     */
    AWTEvent getCurrentEventImpl();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Ljava.awt.AWTEvent;`
     */
    AWTEvent peekEvent();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(I)Ljava.awt.AWTEvent;`
     */
    AWTEvent peekEvent(int arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Z`
     */
    bool isDispatchThreadImpl();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Z)V`
     */
    void wakeup(bool arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Lsun.awt.FwDispatcher;)V`
     */
    void setFwDispatcher(FwDispatcher arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Ljava.awt.AWTEvent;`
     * Throws: `java.lang.InterruptedException`
     */
    AWTEvent getNextEvent();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(I)Ljava.awt.AWTEvent;`
     * Throws: `java.lang.InterruptedException`
     */
    AWTEvent getNextEvent(int arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()J`
     */
    static long getMostRecentEventTime();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()J`
     */
    long getMostRecentEventTimeEx();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.EventDispatchThread;)V`
     */
    void detachDispatchThread(EventDispatchThread arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;I)V`
     */
    void postEvent(AWTEvent arg0, int arg1);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void postEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Z`
     */
    static bool isDispatchThread();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.lang.Runnable;)V`
     * Throws: `java.lang.InterruptedException, java.lang.reflect.InvocationTargetException`
     */
    static void invokeAndWait(Runnable arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Runnable;)V`
     * Throws: `java.lang.InterruptedException, java.lang.reflect.InvocationTargetException`
     */
    static void invokeAndWait(Object arg0, Runnable arg1);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;Ljava.lang.Object;)V`
     */
    void dispatchEventImpl(AWTEvent arg0, Object arg1);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void dispatchEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()J`
     */
    long getMostRecentKeyEventTime();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.lang.Runnable;)V`
     */
    static void invokeLater(Runnable arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    static void setCurrentEventAndMostRecentTime(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.lang.Object;Z)V`
     */
    void removeSourceEvents(Object arg0, bool arg1);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Ljava.awt.AWTEvent;`
     */
    static AWTEvent getCurrentEvent();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Ljava.awt.EventDispatchThread;`
     */
    EventDispatchThread getDispatchThread();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.Conditional;Ljava.awt.EventFilter;J)Ljava.awt.SecondaryLoop;`
     */
    SecondaryLoop createSecondaryLoop(Conditional arg0, EventFilter arg1, long arg2);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()Ljava.awt.SecondaryLoop;`
     */
    SecondaryLoop createSecondaryLoop();

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.AWTEvent;)I`
     */
    static int getPriority(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `(Ljava.awt.EventQueue;)V`
     */
    void push(EventQueue arg0);

    /**
     * Declaring class: `java.awt.EventQueue`
     * Signature: `()V`
     * Throws: `java.util.EmptyStackException`
     */
    void pop();
};


/**
 * Classpath: `java.awt.Event`
 * Package name: `java.awt`
 */
class Event : public Object {
protected:
    const inline static char *className = "java.awt.Event";
public:
    STATICINITIALIZE;

    Event(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Event`
     * Signature: `(II)V`
     */
    void translate(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()V`
     */
    void consume();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()Z`
     */
    bool isConsumed();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()C`
     */
    char getKeyEventChar();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()Z`
     */
    bool shiftDown();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()Z`
     */
    bool controlDown();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()Z`
     */
    bool metaDown();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `(Ljava.awt.event.KeyEvent;)I`
     */
    static int getOldEventKey(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.Event`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.Component`
 * Package name: `java.awt`
 */
class Component : public Object {
protected:
    const inline static char *className = "java.awt.Component";
public:
    STATICINITIALIZE;

    Component(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void invalidate();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isValid();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void enable(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void enable();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getX();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getY();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.util.Locale;)V`
     */
    void setLocale(Locale arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getWidth();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void disable();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void layout();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Color;`
     */
    Color getForeground();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setForeground(Color arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration getGraphicsConfiguration();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)V`
     */
    void setGraphicsConfiguration(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void setVisible(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Toolkit;`
     */
    Toolkit getToolkit();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;FF)V`
     */
    void firePropertyChange(String arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;CC)V`
     */
    void firePropertyChange(String arg0, char arg1, char arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;JJ)V`
     */
    void firePropertyChange(String arg0, long arg1, long arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;SS)V`
     */
    void firePropertyChange(String arg0, short arg1, short arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V`
     */
    void firePropertyChange(String arg0, Object arg1, Object arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;DD)V`
     */
    void firePropertyChange(String arg0, double arg1, double arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;ZZ)V`
     */
    void firePropertyChange(String arg0, bool arg1, bool arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void firePropertyChange(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;BB)V`
     */
    void firePropertyChange(String arg0, byte arg1, byte arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getTreeLock();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Lsun.awt.ComponentFactory;`
     */
    ComponentFactory getComponentFactory();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void removeNotify();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension getPreferredSize();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setMinimumSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isMinimumSizeSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension getMinimumSize();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(I)V`
     */
    void setBoundsOp(int arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void show(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void show();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isShowing();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void hide();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isDisplayable();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Cursor;)V`
     */
    void setCursor(Cursor arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isVisible();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.AWTEvent;)Z`
     */
    bool eventEnabled(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void processEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.FocusEvent$Cause;)V`
     */
    void requestFocus(FocusEvent_Cause arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)Z`
     */
    bool requestFocus(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ZLjava.awt.event.FocusEvent$Cause;)Z`
     */
    bool requestFocus(bool arg0, FocusEvent_Cause arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void requestFocus();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(PropertyChangeListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void dispatchEventImpl(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;)Z`
     */
    bool handleEvent(Event arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.ComponentOrientation;)V`
     */
    void applyComponentOrientation(ComponentOrientation arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getObjectLock();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.GraphicsConfiguration;`
     */
    GraphicsConfiguration getGraphicsConfiguration_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Window;`
     */
    Window getContainingWindow();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocationOnScreen();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ILjava.awt.BufferCapabilities;)V`
     * Throws: `java.awt.AWTException`
     */
    void createBufferStrategy(int arg0, BufferCapabilities arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(I)V`
     */
    void createBufferStrategy(int arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.image.BufferStrategy;`
     */
    BufferStrategy getBufferStrategy();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool canBeFocusOwner();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getBoundsOp();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void paint(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension minimumSize();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void clearMostRecentFocusOwnerOnHide();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(JI)V`
     */
    void adjustListeningChildrenOnParent(long arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.im.InputContext;`
     */
    InputContext getInputContext();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(I)Ljava.util.Set;`
     */
    Set getFocusTraversalKeys(int arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Container;)Z`
     */
    bool isFocusCycleRoot(Container arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getFocusCycleRootAncestor();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljavax.accessibility.AccessibleContext;`
     */
    AccessibleContext getAccessibleContext();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseWheelEvent;)Z`
     */
    bool dispatchMouseWheelToAncestor(MouseWheelEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isRecursivelyVisible();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getContainer();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Lsun.java2d.pipe.Region;)V`
     */
    void applyCompoundShape(Region arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void applyCurrentShape();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void mixOnReshaping();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocationOnWindow();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void updateZOrder();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void checkTreeLock();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkGD(String arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(J)I`
     */
    int numListening(long arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int countHierarchyMembers();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void invalidateIfValid();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void dispatchEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ILjava.awt.Component;Ljava.awt.Container;JZ)I`
     */
    int createHierarchyEvents(int arg0, Component arg1, Container arg2, long arg3, bool arg4);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void updateCursorImmediately();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isFocusable();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getNativeContainer();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isLightweight();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)V`
     */
    void mixOnZOrderChanging(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void relocateComponent();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isFocusOwner();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool canBeFocusOwnerRecursively();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void transferFocus();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)Z`
     */
    bool transferFocus(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)Z`
     */
    bool updateGraphicsData(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void invalidateParent();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void doLayout();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension preferredSize();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isPreferredSizeSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isMaximumSizeSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension getMaximumSize();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()F`
     */
    float getAlignmentX();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()F`
     */
    float getAlignmentY();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void lightweightPaint(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void paintHeavyweightComponents(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void lightweightPrint(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void printHeavyweightComponents(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(J)V`
     */
    void enableEvents(long arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Point;)Ljava.awt.Component;`
     */
    Component getComponentAt(Point arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)Ljava.awt.Component;`
     */
    Component getComponentAt(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;)V`
     */
    void deliverEvent(Event arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)Ljava.awt.Component;`
     */
    Component locate(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.PointerInfo;)Ljava.awt.Component;`
     */
    Component findUnderMouseInWindow(PointerInfo arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Component;Z)Z`
     */
    bool isSameOrAncestorOf(Component arg0, bool arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Point;)Ljava.awt.Point;`
     */
    Point pointRelativeToComponent(Point arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void setAutoFocusTransferOnDisposal(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool containsFocus();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void transferFocusBackward();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)Z`
     */
    bool transferFocusBackward(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ILjava.util.Set;)V`
     */
    void setFocusTraversalKeys_NoIDCheck(int arg0, Set arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(I)Ljava.util.Set;`
     */
    Set getFocusTraversalKeys_NoIDCheck(int arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getTraversalRoot();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isNonOpaqueForMixing();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Lsun.java2d.pipe.Region;`
     */
    Region getOpaqueShape();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Lsun.java2d.pipe.Region;`
     */
    Region getNormalShape();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Lsun.java2d.pipe.Region;)V`
     */
    void subtractAndApplyShape(Region arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isMixingNeeded();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void mixOnShowing();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void mixOnHiding(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void subtractAndApplyShapeBelowMe();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void mixOnValidating();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void initializeFocusTraversalKeys();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)Z`
     */
    bool updateChildGraphicsData(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Point;`
     * Throws: `java.awt.HeadlessException`
     */
    Point getMousePosition();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ILjava.util.Set;)V`
     */
    void setFocusTraversalKeys(int arg0, Set arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(I)Z`
     */
    bool areFocusTraversalKeysSet(int arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void clearCurrentFocusCycleRootOnHide();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool postsOldMouseEvents();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics getGraphics();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)Ljava.awt.Image;`
     */
    Image createImage(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.image.ImageProducer;)Ljava.awt.Image;`
     */
    Image createImage(ImageProducer arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(IIII)V`
     */
    void setBounds(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Rectangle;)V`
     */
    void setBounds(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(IIII)V`
     */
    void reshape(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void setLocation(Point arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)V`
     */
    void setLocation(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)Z`
     */
    bool inside(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Font;)Ljava.awt.FontMetrics;`
     */
    FontMetrics getFontMetrics(Font arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Font;)V`
     */
    void setFont(Font arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setBackground(Color arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Color;`
     */
    Color getBackground();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isFocusTraversableOverridden();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool checkCoalescing();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getParent_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.GraphicsConfiguration;)Z`
     */
    bool updateSelfGraphicsData(GraphicsConfiguration arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Toolkit;`
     */
    Toolkit getToolkitImpl();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isVisible_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getRecursivelyVisibleBounds();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isEnabledImpl();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void setEnabled(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(J)V`
     */
    void repaint(long arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(IIII)V`
     */
    void repaint(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(JIIII)V`
     */
    void repaint(long arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void repaint();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Font;`
     */
    Font getFont_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocationOnScreen_NoTreeLock();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Point;`
     */
    Point location_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(IIIII)V`
     */
    void reshapeNativePeer(int arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ZZ)V`
     */
    void notifyNewBounds(bool arg0, bool arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(IIII)V`
     */
    void repaintParentIfNeeded(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void revalidateSynchronously();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics getGraphics_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Cursor;`
     */
    Cursor getCursor_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)Ljava.awt.image.VolatileImage;`
     */
    VolatileImage createVolatileImage(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(IILjava.awt.ImageCapabilities;)Ljava.awt.image.VolatileImage;`
     * Throws: `java.awt.AWTException`
     */
    VolatileImage createVolatileImage(int arg0, int arg1, ImageCapabilities arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)Z`
     */
    bool prepareImage(Image arg0, int arg1, int arg2, ImageObserver arg3);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Image;Ljava.awt.image.ImageObserver;)Z`
     */
    bool prepareImage(Image arg0, ImageObserver arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)I`
     */
    int checkImage(Image arg0, int arg1, int arg2, ImageObserver arg3);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Image;Ljava.awt.image.ImageObserver;)I`
     */
    int checkImage(Image arg0, ImageObserver arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Image;`
     */
    Image getBackBuffer();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(I)Z`
     */
    bool eventTypeEnabled(int arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.KeyEvent;)V`
     */
    void processKeyEvent(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool areInputMethodsEnabled();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseWheelEvent;)V`
     */
    void autoProcessMouseWheel(MouseWheelEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    static bool isCoalesceEventsOverriden(Class arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.AWTEvent;Ljava.awt.AWTEvent;)Ljava.awt.AWTEvent;`
     */
    AWTEvent coalesceEvents(AWTEvent arg0, AWTEvent arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.FocusEvent;)V`
     */
    void processFocusEvent(FocusEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseEvent;)V`
     */
    void processMouseEvent(MouseEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseEvent;)V`
     */
    void processMouseMotionEvent(MouseEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseWheelEvent;)V`
     */
    void processMouseWheelEvent(MouseWheelEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.ComponentEvent;)V`
     */
    void processComponentEvent(ComponentEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.InputMethodEvent;)V`
     */
    void processInputMethodEvent(InputMethodEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.HierarchyEvent;)V`
     */
    void processHierarchyEvent(HierarchyEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.HierarchyEvent;)V`
     */
    void processHierarchyBoundsEvent(HierarchyEvent arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;II)Z`
     */
    bool mouseEnter(Event arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;II)Z`
     */
    bool mouseExit(Event arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;II)Z`
     */
    bool mouseMove(Event arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;II)Z`
     */
    bool mouseDown(Event arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;II)Z`
     */
    bool mouseDrag(Event arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;II)Z`
     */
    bool mouseUp(Event arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;I)Z`
     */
    bool keyDown(Event arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;I)Z`
     */
    bool keyUp(Event arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;Ljava.lang.Object;)Z`
     */
    bool gotFocus(Event arg0, Object arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;Ljava.lang.Object;)Z`
     */
    bool lostFocus(Event arg0, Object arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isFocusTraversable();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ZZLjava.awt.event.FocusEvent$Cause;)Z`
     */
    bool requestFocusHelper(bool arg0, bool arg1, FocusEvent_Cause arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ZZ)Z`
     */
    bool requestFocusHelper(bool arg0, bool arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ZZLjava.awt.event.FocusEvent$Cause;)Z`
     */
    bool isRequestFocusAccepted(bool arg0, bool arg1, FocusEvent_Cause arg2);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void nextFocus();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getNextFocusCandidate();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool requestFocusInWindow();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(ZLjava.awt.event.FocusEvent$Cause;)Z`
     */
    bool requestFocusInWindow(bool arg0, FocusEvent_Cause arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)Z`
     */
    bool requestFocusInWindow(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.FocusEvent$Cause;)Z`
     */
    bool requestFocusInWindow(FocusEvent_Cause arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool hasFocus();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.beans.PropertyChangeListener;)V`
     */
    void removePropertyChangeListener(PropertyChangeListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void doSwingSerialization();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.ComponentListener;)V`
     */
    void addComponentListener(ComponentListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.FocusListener;)V`
     */
    void addFocusListener(FocusListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.KeyListener;)V`
     */
    void addKeyListener(KeyListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseListener;)V`
     */
    void addMouseListener(MouseListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseMotionListener;)V`
     */
    void addMouseMotionListener(MouseMotionListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.InputMethodListener;)V`
     */
    void addInputMethodListener(InputMethodListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.HierarchyListener;)V`
     */
    void addHierarchyListener(HierarchyListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.HierarchyBoundsListener;)V`
     */
    void addHierarchyBoundsListener(HierarchyBoundsListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseWheelListener;)V`
     */
    void addMouseWheelListener(MouseWheelListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.ComponentOrientation;)V`
     */
    void setComponentOrientation(ComponentOrientation arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getAccessibleIndexInParent();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool areBoundsValid();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Lsun.java2d.pipe.Region;`
     */
    Region getAppliedShape();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getSiblingIndexAbove();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Lsun.java2d.pipe.Region;`
     */
    Region calculateCurrentShape();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()I`
     */
    int getSiblingIndexBelow();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void applyCurrentShapeBelowMe();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.peer.ComponentPeer;`
     */
    ComponentPeer getHWPeerAboveMe();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.security.AccessControlContext;`
     */
    AccessControlContext getAccessControlContext();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.dnd.DropTarget;)V`
     */
    void setDropTarget(DropTarget arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.dnd.DropTarget;`
     */
    DropTarget getDropTarget();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isDoubleBuffered();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void enableInputMethods(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isForegroundSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isBackgroundSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isFontSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setPreferredSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setMaximumSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)I`
     */
    int getBaseline(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Component$BaselineResizeBehavior;`
     */
    Component_BaselineResizeBehavior getBaselineResizeBehavior();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void revalidate();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Cursor;`
     */
    Cursor getCursor();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isCursorSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void paintAll(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void printAll(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Insets;`
     */
    Insets getInsets_NoClientCode();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void setIgnoreRepaint(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool getIgnoreRepaint();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.ComponentListener;)V`
     */
    void removeComponentListener(ComponentListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.FocusListener;)V`
     */
    void removeFocusListener(FocusListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.HierarchyListener;)V`
     */
    void removeHierarchyListener(HierarchyListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.HierarchyBoundsListener;)V`
     */
    void removeHierarchyBoundsListener(HierarchyBoundsListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.KeyListener;)V`
     */
    void removeKeyListener(KeyListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseListener;)V`
     */
    void removeMouseListener(MouseListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseMotionListener;)V`
     */
    void removeMouseMotionListener(MouseMotionListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.MouseWheelListener;)V`
     */
    void removeMouseWheelListener(MouseWheelListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.event.InputMethodListener;)V`
     */
    void removeInputMethodListener(InputMethodListener arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.im.InputMethodRequests;`
     */
    InputMethodRequests getInputMethodRequests();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(J)V`
     */
    void disableEvents(long arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isCoalescingEnabled();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void setFocusable(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Z)V`
     */
    void setFocusTraversalKeysEnabled(bool arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool getFocusTraversalKeysEnabled();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Lsun.awt.RequestFocusController;)V`
     */
    static void setRequestFocusController(RequestFocusController arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void transferFocusUpCycle();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isAutoFocusTransferOnDisposal();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.ComponentOrientation;`
     */
    ComponentOrientation getComponentOrientation();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljavax.accessibility.AccessibleStateSet;`
     */
    AccessibleStateSet getAccessibleStateSet();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void setMixingCutoutShape(Shape arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.PopupMenu;)V`
     */
    void add(PopupMenu arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void update(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension size();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)Z`
     */
    bool contains(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Point;)Z`
     */
    bool contains(Point arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.io.PrintStream;)V`
     */
    void list(PrintStream arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.io.PrintWriter;I)V`
     */
    void list(PrintWriter arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.io.PrintWriter;)V`
     */
    void list(PrintWriter arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.io.PrintStream;I)V`
     */
    void list(PrintStream arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void list();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;`
     */
    Rectangle getBounds(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getBounds();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    void validate();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle bounds();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Point;)Ljava.awt.Point;`
     */
    Point getLocation(Point arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocation();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getParent();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Event;Ljava.lang.Object;)Z`
     */
    bool action(Event arg0, Object arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setName(String arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Graphics;)V`
     */
    void print(Graphics arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Point;`
     */
    Point location();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension getSize();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Dimension;)Ljava.awt.Dimension;`
     */
    Dimension getSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isOpaque();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void resize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)V`
     */
    void resize(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Z`
     */
    bool isEnabled();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)V`
     */
    void move(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.awt.image.ColorModel;`
     */
    ColorModel getColorModel();

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.lang.Object;Ljava.lang.String;)Z`
     */
    static bool isInstanceOf(Object arg0, String arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `(II)V`
     */
    void setSize(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Component`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale getLocale();
};


/**
 * Classpath: `sun.awt.ComponentFactory`
 * Package name: `sun.awt`
 */
class ComponentFactory : public JavaObject {
protected:
    const inline static char *className = "sun.awt.ComponentFactory";
public:
    STATICINITIALIZE;

    ComponentFactory(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.Cursor`
 * Package name: `java.awt`
 */
class Cursor : public Object {
protected:
    const inline static char *className = "java.awt.Cursor";
public:
    STATICINITIALIZE;

    Cursor(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `(I)Ljava.awt.Cursor;`
     */
    static Cursor getPredefinedCursor(int arg0);

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `()V`
     * Throws: `java.awt.AWTException`
     */
    static void loadSystemCustomCursorProperties();

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `(J)V`
     */
    void setPData(long arg0);

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Cursor;`
     * Throws: `java.awt.AWTException, java.awt.HeadlessException`
     */
    static Cursor getSystemCustomCursor(String arg0);

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `()Ljava.awt.Cursor;`
     */
    static Cursor getDefaultCursor();

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `(J)V`
     */
    static void finalizeImpl(long arg0);

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `()I`
     */
    int getType();

    /**
     * Declaring class: `java.awt.Cursor`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.event.FocusEvent$Cause`
 * Enclosing class: `java.awt.event.FocusEvent`
 * Package name: `java.awt.event`
 */
class FocusEvent_Cause : public Enum {
protected:
    const inline static char *className = "java.awt.event.FocusEvent$Cause";
public:
    STATICINITIALIZE;

    FocusEvent_Cause(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.awt.event.FocusEvent$Cause`
     * Signature: `(Ljava.lang.String;)Ljava.awt.event.FocusEvent$Cause;`
     */
    static FocusEvent_Cause valueOf(String arg0);
};


/**
 * Classpath: `java.beans.PropertyChangeListener`
 * Package name: `java.beans`
 */
class PropertyChangeListener : public JavaObject {
protected:
    const inline static char *className = "java.beans.PropertyChangeListener";
public:
    STATICINITIALIZE;

    PropertyChangeListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.ComponentOrientation`
 * Package name: `java.awt`
 */
class ComponentOrientation : public Object {
protected:
    const inline static char *className = "java.awt.ComponentOrientation";
public:
    STATICINITIALIZE;

    ComponentOrientation(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.ComponentOrientation`
     * Signature: `()Z`
     */
    bool isHorizontal();

    /**
     * Declaring class: `java.awt.ComponentOrientation`
     * Signature: `(Ljava.util.ResourceBundle;)Ljava.awt.ComponentOrientation;`
     */
    static ComponentOrientation getOrientation(ResourceBundle arg0);

    /**
     * Declaring class: `java.awt.ComponentOrientation`
     * Signature: `(Ljava.util.Locale;)Ljava.awt.ComponentOrientation;`
     */
    static ComponentOrientation getOrientation(Locale arg0);

    /**
     * Declaring class: `java.awt.ComponentOrientation`
     * Signature: `()Z`
     */
    bool isLeftToRight();
};


/**
 * Classpath: `java.awt.BufferCapabilities`
 * Package name: `java.awt`
 */
class BufferCapabilities : public Object {
protected:
    const inline static char *className = "java.awt.BufferCapabilities";
public:
    STATICINITIALIZE;

    BufferCapabilities(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.BufferCapabilities`
     * Signature: `()Ljava.awt.BufferCapabilities$FlipContents;`
     */
    BufferCapabilities_FlipContents getFlipContents();

    /**
     * Declaring class: `java.awt.BufferCapabilities`
     * Signature: `()Ljava.awt.ImageCapabilities;`
     */
    ImageCapabilities getFrontBufferCapabilities();

    /**
     * Declaring class: `java.awt.BufferCapabilities`
     * Signature: `()Ljava.awt.ImageCapabilities;`
     */
    ImageCapabilities getBackBufferCapabilities();

    /**
     * Declaring class: `java.awt.BufferCapabilities`
     * Signature: `()Z`
     */
    bool isPageFlipping();

    /**
     * Declaring class: `java.awt.BufferCapabilities`
     * Signature: `()Z`
     */
    bool isFullScreenRequired();

    /**
     * Declaring class: `java.awt.BufferCapabilities`
     * Signature: `()Z`
     */
    bool isMultiBufferAvailable();

    /**
     * Declaring class: `java.awt.BufferCapabilities`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();
};


/**
 * Classpath: `java.awt.AttributeValue`
 * Package name: `java.awt`
 */
class AttributeValue : public Object {
protected:
    const inline static char *className = "java.awt.AttributeValue";
public:
    STATICINITIALIZE;

    AttributeValue(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.AttributeValue`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.AttributeValue`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `java.awt.image.BufferStrategy`
 * Package name: `java.awt.image`
 */
class BufferStrategy : public Object {
protected:
    const inline static char *className = "java.awt.image.BufferStrategy";
public:
    STATICINITIALIZE;

    BufferStrategy(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.image.BufferStrategy`
     * Signature: `()Ljava.awt.BufferCapabilities;`
     */
    BufferCapabilities getCapabilities();

    /**
     * Declaring class: `java.awt.image.BufferStrategy`
     * Signature: `()Z`
     */
    bool contentsLost();

    /**
     * Declaring class: `java.awt.image.BufferStrategy`
     * Signature: `()V`
     */
    void show();

    /**
     * Declaring class: `java.awt.image.BufferStrategy`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics getDrawGraphics();

    /**
     * Declaring class: `java.awt.image.BufferStrategy`
     * Signature: `()Z`
     */
    bool contentsRestored();

    /**
     * Declaring class: `java.awt.image.BufferStrategy`
     * Signature: `()V`
     */
    void dispose();
};


/**
 * Classpath: `java.awt.im.InputContext`
 * Package name: `java.awt.im`
 */
class InputContext : public Object {
protected:
    const inline static char *className = "java.awt.im.InputContext";
public:
    STATICINITIALIZE;

    InputContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `(Ljava.awt.Component;)V`
     */
    void removeNotify(Component arg0);

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void dispatchEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `()V`
     */
    void endComposition();

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `(Ljava.util.Locale;)Z`
     */
    bool selectInputMethod(Locale arg0);

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `([Ljava.lang.Character$Subset;)V`
     */
    void setCharacterSubsets(Character_Subset_interface arg0);

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `(Z)V`
     */
    void setCompositionEnabled(bool arg0);

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `()Z`
     */
    bool isCompositionEnabled();

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `()V`
     */
    void reconvert();

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getInputMethodControlObject();

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `()Ljava.awt.im.InputContext;`
     */
    static InputContext getInstance();

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `()V`
     */
    void dispose();

    /**
     * Declaring class: `java.awt.im.InputContext`
     * Signature: `()Ljava.util.Locale;`
     */
    Locale getLocale();
};


/**
 * Classpath: `[Ljava.lang.Character$Subset;`
 */
class Character_Subset_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Character$Subset;";
public:
    STATICINITIALIZE;

    Character_Subset_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.awt.LayoutManager`
 * Package name: `java.awt`
 */
class LayoutManager : public JavaObject {
protected:
    const inline static char *className = "java.awt.LayoutManager";
public:
    STATICINITIALIZE;

    LayoutManager(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.FocusTraversalPolicy`
 * Package name: `java.awt`
 */
class FocusTraversalPolicy : public Object {
protected:
    const inline static char *className = "java.awt.FocusTraversalPolicy";
public:
    STATICINITIALIZE;

    FocusTraversalPolicy(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.FocusTraversalPolicy`
     * Signature: `(Ljava.awt.Window;)Ljava.awt.Component;`
     */
    Component getInitialComponent(Window arg0);

    /**
     * Declaring class: `java.awt.FocusTraversalPolicy`
     * Signature: `(Ljava.awt.Container;)Ljava.awt.Component;`
     */
    Component getDefaultComponent(Container arg0);

    /**
     * Declaring class: `java.awt.FocusTraversalPolicy`
     * Signature: `(Ljava.awt.Container;)Ljava.awt.Component;`
     */
    Component getFirstComponent(Container arg0);

    /**
     * Declaring class: `java.awt.FocusTraversalPolicy`
     * Signature: `(Ljava.awt.Container;)Ljava.awt.Component;`
     */
    Component getLastComponent(Container arg0);

    /**
     * Declaring class: `java.awt.FocusTraversalPolicy`
     * Signature: `(Ljava.awt.Container;Ljava.awt.Component;)Ljava.awt.Component;`
     */
    Component getComponentAfter(Container arg0, Component arg1);

    /**
     * Declaring class: `java.awt.FocusTraversalPolicy`
     * Signature: `(Ljava.awt.Container;Ljava.awt.Component;)Ljava.awt.Component;`
     */
    Component getComponentBefore(Container arg0, Component arg1);
};


/**
 * Classpath: `java.awt.peer.ContainerPeer`
 * Package name: `java.awt.peer`
 */
class ContainerPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ContainerPeer";
public:
    STATICINITIALIZE;

    ContainerPeer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.Container$EventTargetFilter`
 * Enclosing class: `java.awt.Container`
 * Package name: `java.awt`
 */
class Container_EventTargetFilter : public JavaObject {
protected:
    const inline static char *className = "java.awt.Container$EventTargetFilter";
public:
    STATICINITIALIZE;

    Container_EventTargetFilter(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.ContainerListener`
 * Package name: `java.awt.event`
 */
class ContainerListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.ContainerListener";
public:
    STATICINITIALIZE;

    ContainerListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `javax.accessibility.Accessible`
 * Package name: `javax.accessibility`
 */
class Accessible : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.Accessible";
public:
    STATICINITIALIZE;

    Accessible(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.java2d.pipe.Region`
 * Package name: `sun.java2d.pipe`
 */
class Region : public Object {
protected:
    const inline static char *className = "sun.java2d.pipe.Region";
public:
    STATICINITIALIZE;

    Region(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()I`
     */
    int getWidth();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;`
     */
    Region getUnion(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;`
     */
    Region getIntersection(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)Lsun.java2d.pipe.Region;`
     */
    Region getIntersection(Rectangle2D arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Ljava.awt.Rectangle;)Lsun.java2d.pipe.Region;`
     */
    Region getIntersection(Rectangle arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(II)Lsun.java2d.pipe.Region;`
     */
    Region getTranslatedRegion(int arg0, int arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Lsun.java2d.pipe.Region;`
     */
    static Region getInstanceXYWH(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;`
     */
    Region getDifference(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(II)I`
     */
    static int clipAdd(int arg0, int arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(II)I`
     */
    static int dimAdd(int arg0, int arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Lsun.java2d.pipe.Region;`
     */
    static Region getInstanceXYXY(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.SpanIterator;)V`
     */
    void appendSpans(SpanIterator arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `([I)V`
     */
    void appendSpan(arr_I arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `([I)V`
     */
    void endRow(arr_I arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()V`
     */
    void calcBBox();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(ID)I`
     */
    static int clipScale(int arg0, double arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(II)Lsun.java2d.pipe.Region;`
     */
    Region getSafeTranslatedRegion(int arg0, int arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Lsun.java2d.pipe.Region;`
     */
    Region getIntersectionXYWH(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(DDDD)Lsun.java2d.pipe.Region;`
     */
    Region getIntersectionXYXY(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Lsun.java2d.pipe.Region;`
     */
    Region getIntersectionXYXY(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(D)I`
     */
    static int clipRound(double arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Z`
     */
    bool isInsideXYXY(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `([I)Lsun.java2d.pipe.SpanIterator;`
     */
    SpanIterator getSpanIterator(arr_I arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()Lsun.java2d.pipe.SpanIterator;`
     */
    SpanIterator getSpanIterator();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Z`
     */
    bool isInsideQuickCheck(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;Lsun.java2d.pipe.Region;I)V`
     */
    void filterSpans(Region arg0, Region arg1, int arg2);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Z`
     */
    bool intersectsQuickCheck(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Lsun.java2d.pipe.Region;`
     */
    Region getBoundsIntersectionXYWH(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Lsun.java2d.pipe.Region;`
     */
    Region getBoundsIntersectionXYXY(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Z`
     */
    bool encompasses(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(I)V`
     */
    void needSpace(int arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Z`
     */
    bool encompassesXYXY(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(DD)Lsun.java2d.pipe.Region;`
     */
    Region getScaledRegion(double arg0, double arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;`
     */
    Region getExclusiveOr(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;`
     */
    Region getBoundsIntersection(Region arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Ljava.awt.Rectangle;)Lsun.java2d.pipe.Region;`
     */
    Region getBoundsIntersection(Rectangle arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()I`
     */
    int getLoX();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()I`
     */
    int getLoY();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()I`
     */
    int getHiX();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()I`
     */
    int getHiY();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()Z`
     */
    bool isRectangular();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Z`
     */
    bool isInsideXYWH(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Z`
     */
    bool intersectsQuickCheckXYXY(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII)Z`
     */
    bool encompassesXYWH(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `([I)V`
     */
    void clipBoxToBounds(arr_I arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(II)Z`
     */
    bool contains(int arg0, int arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `([I)V`
     */
    void getBounds(arr_I arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.SpanIterator;)Lsun.java2d.pipe.SpanIterator;`
     */
    SpanIterator filter(SpanIterator arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;Ljava.awt.Shape;Ljava.awt.geom.AffineTransform;)Lsun.java2d.pipe.Region;`
     */
    static Region getInstance(Region arg0, Shape arg1, AffineTransform arg2);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Ljava.awt.Shape;Ljava.awt.geom.AffineTransform;)Lsun.java2d.pipe.Region;`
     */
    static Region getInstance(Shape arg0, AffineTransform arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `([I)Lsun.java2d.pipe.Region;`
     */
    static Region getInstance(arr_I arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `([ILsun.java2d.pipe.SpanIterator;)Lsun.java2d.pipe.Region;`
     */
    static Region getInstance(arr_I arg0, SpanIterator arg1);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(IIII[I)Lsun.java2d.pipe.Region;`
     */
    static Region getInstance(int arg0, int arg1, int arg2, int arg3, arr_I arg4);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Lsun.java2d.pipe.Region;ZLjava.awt.Shape;Ljava.awt.geom.AffineTransform;)Lsun.java2d.pipe.Region;`
     */
    static Region getInstance(Region arg0, bool arg1, Shape arg2, AffineTransform arg3);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `(Ljava.awt.Rectangle;)Lsun.java2d.pipe.Region;`
     */
    static Region getInstance(Rectangle arg0);

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()Lsun.java2d.pipe.RegionIterator;`
     */
    RegionIterator getIterator();

    /**
     * Declaring class: `sun.java2d.pipe.Region`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `sun.java2d.pipe.SpanIterator`
 * Package name: `sun.java2d.pipe`
 */
class SpanIterator : public JavaObject {
protected:
    const inline static char *className = "sun.java2d.pipe.SpanIterator";
public:
    STATICINITIALIZE;

    SpanIterator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.java2d.pipe.RegionIterator`
 * Package name: `sun.java2d.pipe`
 */
class RegionIterator : public Object {
protected:
    const inline static char *className = "sun.java2d.pipe.RegionIterator";
public:
    STATICINITIALIZE;

    RegionIterator(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.java2d.pipe.RegionIterator`
     * Signature: `()Lsun.java2d.pipe.RegionIterator;`
     */
    RegionIterator createCopy();

    /**
     * Declaring class: `sun.java2d.pipe.RegionIterator`
     * Signature: `(Lsun.java2d.pipe.RegionIterator;)V`
     */
    void copyStateFrom(RegionIterator arg0);

    /**
     * Declaring class: `sun.java2d.pipe.RegionIterator`
     * Signature: `([I)Z`
     */
    bool nextYRange(arr_I arg0);

    /**
     * Declaring class: `sun.java2d.pipe.RegionIterator`
     * Signature: `([I)Z`
     */
    bool nextXBand(arr_I arg0);
};


/**
 * Classpath: `javax.accessibility.AccessibleContext`
 * Package name: `javax.accessibility`
 */
class AccessibleContext : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleContext";
public:
    STATICINITIALIZE;

    AccessibleContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V`
     */
    void firePropertyChange(String arg0, Object arg1, Object arg2);

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `(Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(PropertyChangeListener arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()I`
     */
    int getAccessibleChildrenCount();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `(I)Ljavax.accessibility.Accessible;`
     */
    Accessible getAccessibleChild(int arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleComponent;`
     */
    AccessibleComponent getAccessibleComponent();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `(Ljava.beans.PropertyChangeListener;)V`
     */
    void removePropertyChangeListener(PropertyChangeListener arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.Accessible;`
     */
    Accessible getAccessibleParent();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleSelection;`
     */
    AccessibleSelection getAccessibleSelection();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()I`
     */
    int getAccessibleIndexInParent();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleStateSet;`
     */
    AccessibleStateSet getAccessibleStateSet();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljava.lang.String;`
     */
    String getAccessibleName();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setAccessibleName(String arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljava.lang.String;`
     */
    String getAccessibleDescription();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setAccessibleDescription(String arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleRole;`
     */
    AccessibleRole getAccessibleRole();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `(Ljavax.accessibility.Accessible;)V`
     */
    void setAccessibleParent(Accessible arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleAction;`
     */
    AccessibleAction getAccessibleAction();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleText;`
     */
    AccessibleText getAccessibleText();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleEditableText;`
     */
    AccessibleEditableText getAccessibleEditableText();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleValue;`
     */
    AccessibleValue getAccessibleValue();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleRelationSet;`
     */
    AccessibleRelationSet getAccessibleRelationSet();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljavax.accessibility.AccessibleTable;`
     */
    AccessibleTable getAccessibleTable();

    /**
     * Declaring class: `javax.accessibility.AccessibleContext`
     * Signature: `()Ljava.util.Locale;`
     * Throws: `java.awt.IllegalComponentStateException`
     */
    Locale getLocale();
};


/**
 * Classpath: `javax.accessibility.AccessibleComponent`
 * Package name: `javax.accessibility`
 */
class AccessibleComponent : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleComponent";
public:
    STATICINITIALIZE;

    AccessibleComponent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleSelection`
 * Package name: `javax.accessibility`
 */
class AccessibleSelection : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleSelection";
public:
    STATICINITIALIZE;

    AccessibleSelection(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleStateSet`
 * Package name: `javax.accessibility`
 */
class AccessibleStateSet : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleStateSet";
public:
    STATICINITIALIZE;

    AccessibleStateSet(jobject object) : Object(object) {}


    /**
     * Declaring class: `javax.accessibility.AccessibleStateSet`
     * Signature: `(Ljavax.accessibility.AccessibleState;)Z`
     */
    bool add(AccessibleState arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleStateSet`
     * Signature: `(Ljavax.accessibility.AccessibleState;)Z`
     */
    bool remove(AccessibleState arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleStateSet`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `javax.accessibility.AccessibleStateSet`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `javax.accessibility.AccessibleStateSet`
     * Signature: `(Ljavax.accessibility.AccessibleState;)Z`
     */
    bool contains(AccessibleState arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleStateSet`
     * Signature: `([Ljavax.accessibility.AccessibleState;)V`
     */
    void addAll(AccessibleState_interface arg0);
};


/**
 * Classpath: `javax.accessibility.AccessibleBundle`
 * Package name: `javax.accessibility`
 */
class AccessibleBundle : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleBundle";
public:
    STATICINITIALIZE;

    AccessibleBundle(jobject object) : Object(object) {}


    /**
     * Declaring class: `javax.accessibility.AccessibleBundle`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String toDisplayString(Locale arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleBundle`
     * Signature: `(Ljava.lang.String;Ljava.util.Locale;)Ljava.lang.String;`
     */
    String toDisplayString(String arg0, Locale arg1);

    /**
     * Declaring class: `javax.accessibility.AccessibleBundle`
     * Signature: `()Ljava.lang.String;`
     */
    String toDisplayString();

    /**
     * Declaring class: `javax.accessibility.AccessibleBundle`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `[Ljavax.accessibility.AccessibleState;`
 */
class AccessibleState_interface : public Object {
protected:
    const inline static char *className = "[Ljavax.accessibility.AccessibleState;";
public:
    STATICINITIALIZE;

    AccessibleState_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleRole`
 * Package name: `javax.accessibility`
 */
class AccessibleRole : public AccessibleBundle {
protected:
    const inline static char *className = "javax.accessibility.AccessibleRole";
public:
    STATICINITIALIZE;

    AccessibleRole(jobject object) : AccessibleBundle(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleAction`
 * Package name: `javax.accessibility`
 */
class AccessibleAction : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleAction";
public:
    STATICINITIALIZE;

    AccessibleAction(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleText`
 * Package name: `javax.accessibility`
 */
class AccessibleText : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleText";
public:
    STATICINITIALIZE;

    AccessibleText(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleEditableText`
 * Package name: `javax.accessibility`
 */
class AccessibleEditableText : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleEditableText";
public:
    STATICINITIALIZE;

    AccessibleEditableText(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleValue`
 * Package name: `javax.accessibility`
 */
class AccessibleValue : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleValue";
public:
    STATICINITIALIZE;

    AccessibleValue(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleRelationSet`
 * Package name: `javax.accessibility`
 */
class AccessibleRelationSet : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleRelationSet";
public:
    STATICINITIALIZE;

    AccessibleRelationSet(jobject object) : Object(object) {}


    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `(Ljavax.accessibility.AccessibleRelation;)Z`
     */
    bool add(AccessibleRelation arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `(Ljavax.accessibility.AccessibleRelation;)Z`
     */
    bool remove(AccessibleRelation arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `(Ljava.lang.String;)Ljavax.accessibility.AccessibleRelation;`
     */
    AccessibleRelation get(String arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `()I`
     */
    int size();

    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool contains(String arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleRelationSet`
     * Signature: `([Ljavax.accessibility.AccessibleRelation;)V`
     */
    void addAll(AccessibleRelation_interface arg0);
};


/**
 * Classpath: `javax.accessibility.AccessibleRelation`
 * Package name: `javax.accessibility`
 */
class AccessibleRelation : public AccessibleBundle {
protected:
    const inline static char *className = "javax.accessibility.AccessibleRelation";
public:
    STATICINITIALIZE;

    AccessibleRelation(jobject object) : AccessibleBundle(object) {}


    /**
     * Declaring class: `javax.accessibility.AccessibleRelation`
     * Signature: `()Ljava.lang.String;`
     */
    String getKey();

    /**
     * Declaring class: `javax.accessibility.AccessibleRelation`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void setTarget(Object arg0);

    /**
     * Declaring class: `javax.accessibility.AccessibleRelation`
     * Signature: `([Ljava.lang.Object;)V`
     */
    void setTarget(Object_interface arg0);
};


/**
 * Classpath: `[Ljavax.accessibility.AccessibleRelation;`
 */
class AccessibleRelation_interface : public Object {
protected:
    const inline static char *className = "[Ljavax.accessibility.AccessibleRelation;";
public:
    STATICINITIALIZE;

    AccessibleRelation_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `javax.accessibility.AccessibleTable`
 * Package name: `javax.accessibility`
 */
class AccessibleTable : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleTable";
public:
    STATICINITIALIZE;

    AccessibleTable(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.PointerInfo`
 * Package name: `java.awt`
 */
class PointerInfo : public Object {
protected:
    const inline static char *className = "java.awt.PointerInfo";
public:
    STATICINITIALIZE;

    PointerInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.PointerInfo`
     * Signature: `()Ljava.awt.GraphicsDevice;`
     */
    GraphicsDevice getDevice();

    /**
     * Declaring class: `java.awt.PointerInfo`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocation();
};


/**
 * Classpath: `java.awt.FontMetrics`
 * Package name: `java.awt`
 */
class FontMetrics : public Object {
protected:
    const inline static char *className = "java.awt.FontMetrics";
public:
    STATICINITIALIZE;

    FontMetrics(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(I)I`
     */
    int charWidth(int arg0);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(C)I`
     */
    int charWidth(char arg0);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.text.CharacterIterator;IILjava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(CharacterIterator arg0, int arg1, int arg2, Graphics arg3);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.lang.String;IILjava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(String arg0, int arg1, int arg2, Graphics arg3);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `([CIILjava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(arr_C arg0, int arg1, int arg2, Graphics arg3);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.lang.String;Ljava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getStringBounds(String arg0, Graphics arg1);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getAscent();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getDescent();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getLeading();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()Z`
     */
    bool hasUniformLineMetrics();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `([CIILjava.awt.Graphics;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(arr_C arg0, int arg1, int arg2, Graphics arg3);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.lang.String;IILjava.awt.Graphics;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(String arg0, int arg1, int arg2, Graphics arg3);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.text.CharacterIterator;IILjava.awt.Graphics;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(CharacterIterator arg0, int arg1, int arg2, Graphics arg3);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.lang.String;Ljava.awt.Graphics;)Ljava.awt.font.LineMetrics;`
     */
    LineMetrics getLineMetrics(String arg0, Graphics arg1);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getMaxCharBounds(Graphics arg0);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getMaxDescent();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `([CII)I`
     */
    int charsWidth(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.lang.String;)I`
     */
    int stringWidth(String arg0);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `(Ljava.awt.Graphics;)Ljava.awt.font.FontRenderContext;`
     */
    FontRenderContext myFRC(Graphics arg0);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getMaxAscent();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getMaxDecent();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()I`
     */
    int getMaxAdvance();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `([BII)I`
     */
    int bytesWidth(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()Ljava.awt.Font;`
     */
    Font getFont();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()Ljava.awt.font.FontRenderContext;`
     */
    FontRenderContext getFontRenderContext();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.FontMetrics`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.text.CharacterIterator`
 * Package name: `java.text`
 */
class CharacterIterator : public JavaObject {
protected:
    const inline static char *className = "java.text.CharacterIterator";
public:
    STATICINITIALIZE;

    CharacterIterator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.font.LineMetrics`
 * Package name: `java.awt.font`
 */
class LineMetrics : public Object {
protected:
    const inline static char *className = "java.awt.font.LineMetrics";
public:
    STATICINITIALIZE;

    LineMetrics(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getHeight();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getAscent();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getDescent();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getLeading();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()I`
     */
    int getNumChars();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()I`
     */
    int getBaselineIndex();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getStrikethroughOffset();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getStrikethroughThickness();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getUnderlineOffset();

    /**
     * Declaring class: `java.awt.font.LineMetrics`
     * Signature: `()F`
     */
    float getUnderlineThickness();
};


/**
 * Classpath: `java.awt.font.FontRenderContext`
 * Package name: `java.awt.font`
 */
class FontRenderContext : public Object {
protected:
    const inline static char *className = "java.awt.font.FontRenderContext";
public:
    STATICINITIALIZE;

    FontRenderContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getTransform();

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getAntiAliasingHint();

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getFractionalMetricsHint();

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()Z`
     */
    bool isTransformed();

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()Z`
     */
    bool isAntiAliased();

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()Z`
     */
    bool usesFractionalMetrics();

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()I`
     */
    int getTransformType();

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `(Ljava.awt.font.FontRenderContext;)Z`
     */
    bool equals(FontRenderContext arg0);

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.font.FontRenderContext`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `java.awt.image.ImageObserver`
 * Package name: `java.awt.image`
 */
class ImageObserver : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.ImageObserver";
public:
    STATICINITIALIZE;

    ImageObserver(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.font.TextHitInfo`
 * Package name: `java.awt.font`
 */
class TextHitInfo : public Object {
protected:
    const inline static char *className = "java.awt.font.TextHitInfo";
public:
    STATICINITIALIZE;

    TextHitInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `(I)Ljava.awt.font.TextHitInfo;`
     */
    static TextHitInfo leading(int arg0);

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `()Z`
     */
    bool isLeadingEdge();

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `(I)Ljava.awt.font.TextHitInfo;`
     */
    static TextHitInfo trailing(int arg0);

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `()I`
     */
    int getCharIndex();

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `()I`
     */
    int getInsertionIndex();

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `(I)Ljava.awt.font.TextHitInfo;`
     */
    static TextHitInfo beforeOffset(int arg0);

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `(I)Ljava.awt.font.TextHitInfo;`
     */
    static TextHitInfo afterOffset(int arg0);

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `()Ljava.awt.font.TextHitInfo;`
     */
    TextHitInfo getOtherHit();

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `(I)Ljava.awt.font.TextHitInfo;`
     */
    TextHitInfo getOffsetHit(int arg0);

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `(Ljava.awt.font.TextHitInfo;)Z`
     */
    bool equals(TextHitInfo arg0);

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.font.TextHitInfo`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `java.awt.event.ComponentListener`
 * Package name: `java.awt.event`
 */
class ComponentListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.ComponentListener";
public:
    STATICINITIALIZE;

    ComponentListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.FocusListener`
 * Package name: `java.awt.event`
 */
class FocusListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.FocusListener";
public:
    STATICINITIALIZE;

    FocusListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.KeyListener`
 * Package name: `java.awt.event`
 */
class KeyListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.KeyListener";
public:
    STATICINITIALIZE;

    KeyListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.MouseListener`
 * Package name: `java.awt.event`
 */
class MouseListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.MouseListener";
public:
    STATICINITIALIZE;

    MouseListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.MouseMotionListener`
 * Package name: `java.awt.event`
 */
class MouseMotionListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.MouseMotionListener";
public:
    STATICINITIALIZE;

    MouseMotionListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.InputMethodListener`
 * Package name: `java.awt.event`
 */
class InputMethodListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.InputMethodListener";
public:
    STATICINITIALIZE;

    InputMethodListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.HierarchyListener`
 * Package name: `java.awt.event`
 */
class HierarchyListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.HierarchyListener";
public:
    STATICINITIALIZE;

    HierarchyListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.HierarchyBoundsListener`
 * Package name: `java.awt.event`
 */
class HierarchyBoundsListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.HierarchyBoundsListener";
public:
    STATICINITIALIZE;

    HierarchyBoundsListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.MouseWheelListener`
 * Package name: `java.awt.event`
 */
class MouseWheelListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.MouseWheelListener";
public:
    STATICINITIALIZE;

    MouseWheelListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.peer.ComponentPeer`
 * Package name: `java.awt.peer`
 */
class ComponentPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ComponentPeer";
public:
    STATICINITIALIZE;

    ComponentPeer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.security.AccessControlContext`
 * Package name: `java.security`
 */
class AccessControlContext : public Object {
protected:
    const inline static char *className = "java.security.AccessControlContext";
public:
    STATICINITIALIZE;

    AccessControlContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.security.Permission;)V`
     * Throws: `java.security.AccessControlException`
     */
    void checkPermission(Permission arg0);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()Z`
     */
    bool isAuthorized();

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()Z`
     */
    bool isPrivileged();

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()Ljava.security.DomainCombiner;`
     */
    DomainCombiner getCombiner();

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()Lsun.security.util.Debug;`
     */
    static Debug getDebug();

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.security.Permission;)V`
     */
    void checkPermission2(Permission arg0);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.security.AccessControlContext;Ljava.security.AccessControlContext;[Ljava.security.Permission;)V`
     */
    void calculateFields(AccessControlContext arg0, AccessControlContext arg1, Permission_interface arg2);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `([Ljava.security.ProtectionDomain;[Ljava.security.ProtectionDomain;)Z`
     */
    static bool containsAllPDs(ProtectionDomain_interface arg0, ProtectionDomain_interface arg1);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.security.AccessControlContext;)Z`
     */
    bool equalContext(AccessControlContext arg0);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.security.AccessControlContext;)Z`
     */
    bool equalLimitedContext(AccessControlContext arg0);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `([Ljava.security.ProtectionDomain;[Ljava.security.ProtectionDomain;)Z`
     */
    bool equalPDs(ProtectionDomain_interface arg0, ProtectionDomain_interface arg1);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.security.AccessControlContext;)Z`
     */
    bool containsAllLimits(AccessControlContext arg0);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `(Ljava.security.AccessControlContext;)Ljava.security.AccessControlContext;`
     */
    static AccessControlContext getNextPC(AccessControlContext arg0);

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()Ljava.security.DomainCombiner;`
     */
    DomainCombiner getAssignedCombiner();

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()Ljava.security.DomainCombiner;`
     */
    DomainCombiner getDomainCombiner();

    /**
     * Declaring class: `java.security.AccessControlContext`
     * Signature: `()Ljava.security.AccessControlContext;`
     */
    AccessControlContext optimize();
};


/**
 * Classpath: `java.security.DomainCombiner`
 * Package name: `java.security`
 */
class DomainCombiner : public JavaObject {
protected:
    const inline static char *className = "java.security.DomainCombiner";
public:
    STATICINITIALIZE;

    DomainCombiner(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.security.util.Debug`
 * Package name: `sun.security.util`
 */
class Debug : public Object {
protected:
    const inline static char *className = "sun.security.util.Debug";
public:
    STATICINITIALIZE;

    Debug(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    static void println(String arg0, String arg1);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.lang.Object;Ljava.lang.String;)V`
     */
    void println(Object arg0, String arg1);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.lang.String;)V`
     */
    void println(String arg0);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `()V`
     */
    void println();

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `([B)Ljava.lang.String;`
     */
    static String toString(arr_B arg0);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.math.BigInteger;)Ljava.lang.String;`
     */
    static String toHexString(BigInteger arg0);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.lang.String;)Lsun.security.util.Debug;`
     */
    static Debug getInstance(String arg0);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Lsun.security.util.Debug;`
     */
    static Debug getInstance(String arg0, String arg1);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.lang.String;)Z`
     */
    static bool isOn(String arg0);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    static String marshal(String arg0);

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `()V`
     */
    static void Help();

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `()Z`
     */
    static bool isVerbose();

    /**
     * Declaring class: `sun.security.util.Debug`
     * Signature: `()Ljava.io.PrintStream;`
     */
    PrintStream getPrintStream();
};


/**
 * Classpath: `[Ljava.security.Permission;`
 */
class Permission_interface : public Object {
protected:
    const inline static char *className = "[Ljava.security.Permission;";
public:
    STATICINITIALIZE;

    Permission_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `[Ljava.security.ProtectionDomain;`
 */
class ProtectionDomain_interface : public Object {
protected:
    const inline static char *className = "[Ljava.security.ProtectionDomain;";
public:
    STATICINITIALIZE;

    ProtectionDomain_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.awt.dnd.DropTarget`
 * Package name: `java.awt.dnd`
 */
class DropTarget : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DropTarget";
public:
    STATICINITIALIZE;

    DropTarget(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()Ljava.awt.datatransfer.FlavorMap;`
     */
    FlavorMap getFlavorMap();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()V`
     */
    void removeNotify();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getComponent();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()Ljava.awt.dnd.DropTargetContext;`
     */
    DropTargetContext createDropTargetContext();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(I)V`
     */
    void setDefaultActions(int arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.awt.dnd.DropTargetListener;)V`
     * Throws: `java.util.TooManyListenersException`
     */
    void addDropTargetListener(DropTargetListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Z)V`
     */
    void setActive(bool arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()V`
     */
    void clearAutoscroll();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()Ljava.awt.dnd.DropTargetContext;`
     */
    DropTargetContext getDropTargetContext();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void initializeAutoscrolling(Point arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void updateAutoscroll(Point arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.awt.Component;Ljava.awt.Point;)Ljava.awt.dnd.DropTarget$DropTargetAutoScroller;`
     */
    DropTarget_DropTargetAutoScroller createDropTargetAutoScroller(Component arg0, Point arg1);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(I)V`
     */
    void doSetDefaultActions(int arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()I`
     */
    int getDefaultActions();

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.awt.dnd.DropTargetListener;)V`
     */
    void removeDropTargetListener(DropTargetListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.awt.datatransfer.FlavorMap;)V`
     */
    void setFlavorMap(FlavorMap arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.awt.Component;)V`
     */
    void setComponent(Component arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget`
     * Signature: `()Z`
     */
    bool isActive();
};


/**
 * Classpath: `java.awt.datatransfer.FlavorMap`
 * Package name: `java.awt.datatransfer`
 */
class FlavorMap : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.FlavorMap";
public:
    STATICINITIALIZE;

    FlavorMap(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.dnd.DropTargetContext`
 * Package name: `java.awt.dnd`
 */
class DropTargetContext : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DropTargetContext";
public:
    STATICINITIALIZE;

    DropTargetContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `(Ljava.awt.datatransfer.DataFlavor;)Z`
     */
    bool isDataFlavorSupported(DataFlavor arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getComponent();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `(I)V`
     */
    void setTargetActions(int arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()V`
     */
    void rejectDrop();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()Ljava.util.List;`
     */
    List getCurrentDataFlavorsAsList();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()Ljava.awt.datatransfer.Transferable;`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    Transferable getTransferable();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `(I)V`
     */
    void acceptDrag(int arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()V`
     */
    void rejectDrag();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `(I)V`
     */
    void acceptDrop(int arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `(Z)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void dropComplete(bool arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()Ljava.awt.dnd.peer.DropTargetContextPeer;`
     */
    DropTargetContextPeer getDropTargetContextPeer();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()I`
     */
    int getTargetActions();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `(Ljava.awt.datatransfer.Transferable;Z)Ljava.awt.datatransfer.Transferable;`
     */
    Transferable createTransferableProxy(Transferable arg0, bool arg1);

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `(Ljava.awt.dnd.peer.DropTargetContextPeer;)V`
     */
    void setDropTargetContextPeer(DropTargetContextPeer arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()Ljava.awt.dnd.DropTarget;`
     */
    DropTarget getDropTarget();

    /**
     * Declaring class: `java.awt.dnd.DropTargetContext`
     * Signature: `()V`
     */
    void reset();
};


/**
 * Classpath: `java.awt.dnd.peer.DropTargetContextPeer`
 * Package name: `java.awt.dnd.peer`
 */
class DropTargetContextPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.peer.DropTargetContextPeer";
public:
    STATICINITIALIZE;

    DropTargetContextPeer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.dnd.DropTargetListener`
 * Package name: `java.awt.dnd`
 */
class DropTargetListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DropTargetListener";
public:
    STATICINITIALIZE;

    DropTargetListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.dnd.DropTarget$DropTargetAutoScroller`
 * Enclosing class: `java.awt.dnd.DropTarget`
 * Package name: `java.awt.dnd`
 */
class DropTarget_DropTargetAutoScroller : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DropTarget$DropTargetAutoScroller";
public:
    STATICINITIALIZE;

    DropTarget_DropTargetAutoScroller(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.dnd.DropTarget$DropTargetAutoScroller`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void updateLocation(Point arg0);

    /**
     * Declaring class: `java.awt.dnd.DropTarget$DropTargetAutoScroller`
     * Signature: `()V`
     */
    void updateRegion();

    /**
     * Declaring class: `java.awt.dnd.DropTarget$DropTargetAutoScroller`
     * Signature: `()V`
     */
    void stop();
};


/**
 * Classpath: `java.awt.Component$BaselineResizeBehavior`
 * Enclosing class: `java.awt.Component`
 * Package name: `java.awt`
 */
class Component_BaselineResizeBehavior : public Enum {
protected:
    const inline static char *className = "java.awt.Component$BaselineResizeBehavior";
public:
    STATICINITIALIZE;

    Component_BaselineResizeBehavior(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.awt.Component$BaselineResizeBehavior`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Component$BaselineResizeBehavior;`
     */
    static Component_BaselineResizeBehavior valueOf(String arg0);
};


/**
 * Classpath: `java.awt.im.InputMethodRequests`
 * Package name: `java.awt.im`
 */
class InputMethodRequests : public JavaObject {
protected:
    const inline static char *className = "java.awt.im.InputMethodRequests";
public:
    STATICINITIALIZE;

    InputMethodRequests(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.awt.RequestFocusController`
 * Package name: `sun.awt`
 */
class RequestFocusController : public JavaObject {
protected:
    const inline static char *className = "sun.awt.RequestFocusController";
public:
    STATICINITIALIZE;

    RequestFocusController(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.MenuContainer`
 * Package name: `java.awt`
 */
class MenuContainer : public JavaObject {
protected:
    const inline static char *className = "java.awt.MenuContainer";
public:
    STATICINITIALIZE;

    MenuContainer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.MenuShortcut`
 * Package name: `java.awt`
 */
class MenuShortcut : public Object {
protected:
    const inline static char *className = "java.awt.MenuShortcut";
public:
    STATICINITIALIZE;

    MenuShortcut(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.MenuShortcut`
     * Signature: `()Z`
     */
    bool usesShiftModifier();

    /**
     * Declaring class: `java.awt.MenuShortcut`
     * Signature: `(Ljava.awt.MenuShortcut;)Z`
     */
    bool equals(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.MenuShortcut`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.MenuShortcut`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.MenuShortcut`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.MenuShortcut`
     * Signature: `()I`
     */
    int getKey();

    /**
     * Declaring class: `java.awt.MenuShortcut`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.awt.event.ActionListener`
 * Package name: `java.awt.event`
 */
class ActionListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.ActionListener";
public:
    STATICINITIALIZE;

    ActionListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.MenuComponent`
 * Package name: `java.awt`
 */
class MenuComponent : public Object {
protected:
    const inline static char *className = "java.awt.MenuComponent";
public:
    STATICINITIALIZE;

    MenuComponent(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getTreeLock();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Lsun.awt.ComponentFactory;`
     */
    ComponentFactory getComponentFactory();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()V`
     */
    void removeNotify();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.awt.Event;)Z`
     */
    bool postEvent(Event arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.awt.AWTEvent;)Z`
     */
    bool eventEnabled(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void processEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void dispatchEventImpl(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljavax.accessibility.AccessibleContext;`
     */
    AccessibleContext getAccessibleContext();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void dispatchEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.awt.Font;`
     */
    Font getFont();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.awt.Font;)V`
     */
    void setFont(Font arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.awt.MenuContainer;`
     */
    MenuContainer getParent_NoClientCode();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.awt.Font;`
     */
    Font getFont_NoClientCode();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()I`
     */
    int getAccessibleIndexInParent();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.security.AccessControlContext;`
     */
    AccessControlContext getAccessControlContext();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljavax.accessibility.AccessibleStateSet;`
     */
    AccessibleStateSet getAccessibleStateSet();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.awt.MenuComponent;)I`
     */
    int getAccessibleChildIndex(MenuComponent arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.awt.MenuContainer;`
     */
    MenuContainer getParent();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setName(String arg0);

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.MenuComponent`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.image.ColorModel`
 * Package name: `java.awt.image`
 */
class ColorModel : public Object {
protected:
    const inline static char *className = "java.awt.image.ColorModel";
public:
    STATICINITIALIZE;

    ColorModel(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.lang.Object;)I`
     */
    int getRGB(Object arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(I)I`
     */
    int getRGB(int arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(I)I`
     */
    int getAlpha(int arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.lang.Object;)I`
     */
    int getAlpha(Object arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()I`
     */
    int getTransferType();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(I)I`
     */
    static int getDefaultTransferType(int arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.lang.Object;)I`
     */
    int getRed(Object arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(I)I`
     */
    int getRed(int arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.lang.Object;)I`
     */
    int getGreen(Object arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(I)I`
     */
    int getGreen(int arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(I)I`
     */
    int getBlue(int arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.lang.Object;)I`
     */
    int getBlue(Object arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `([FI)I`
     */
    int getDataElement(arr_F arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `([II)I`
     */
    int getDataElement(arr_I arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.awt.color.ColorSpace;)Z`
     */
    static bool isLinearGRAYspace(ColorSpace arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()I`
     */
    int getNumColorComponents();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.awt.image.SampleModel;)Z`
     */
    bool isCompatibleSampleModel(SampleModel arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.awt.color.ColorSpace;)Z`
     */
    static bool isLinearRGBspace(ColorSpace arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()V`
     */
    void finalize();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(II)Ljava.awt.image.WritableRaster;`
     */
    WritableRaster createCompatibleWritableRaster(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()Ljava.awt.image.ColorModel;`
     */
    static ColorModel getRGBdefault();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()Z`
     */
    bool hasAlpha();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()Z`
     */
    bool isAlphaPremultiplied();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.awt.image.Raster;)Z`
     */
    bool isCompatibleRaster(Raster arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.awt.image.WritableRaster;Z)Ljava.awt.image.ColorModel;`
     */
    ColorModel coerceData(WritableRaster arg0, bool arg1);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()Ljava.awt.color.ColorSpace;`
     */
    ColorSpace getColorSpace();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(I)I`
     */
    int getComponentSize(int arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()I`
     */
    int getPixelSize();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()I`
     */
    int getNumComponents();

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(Ljava.awt.image.WritableRaster;)Ljava.awt.image.WritableRaster;`
     */
    WritableRaster getAlphaRaster(WritableRaster arg0);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `([FILjava.lang.Object;)Ljava.lang.Object;`
     */
    Object getDataElements(arr_F arg0, int arg1, Object arg2);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(ILjava.lang.Object;)Ljava.lang.Object;`
     */
    Object getDataElements(int arg0, Object arg1);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `([IILjava.lang.Object;)Ljava.lang.Object;`
     */
    Object getDataElements(arr_I arg0, int arg1, Object arg2);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `(II)Ljava.awt.image.SampleModel;`
     */
    SampleModel createCompatibleSampleModel(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.ColorModel`
     * Signature: `()V`
     */
    static void loadLibraries();
};


/**
 * Classpath: `java.util.EventObject`
 * Package name: `java.util`
 */
class EventObject : public Object {
protected:
    const inline static char *className = "java.util.EventObject";
public:
    STATICINITIALIZE;

    EventObject(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.EventObject`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.EventObject`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getSource();
};


/**
 * Classpath: `sun.awt.EventQueueItem`
 * Package name: `sun.awt`
 */
class EventQueueItem : public Object {
protected:
    const inline static char *className = "sun.awt.EventQueueItem";
public:
    STATICINITIALIZE;

    EventQueueItem(jobject object) : Object(object) {}

};


/**
 * Classpath: `sun.util.logging.PlatformLogger`
 * Package name: `sun.util.logging`
 */
class PlatformLogger : public Object {
protected:
    const inline static char *className = "sun.util.logging.PlatformLogger";
public:
    STATICINITIALIZE;

    PlatformLogger(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)V`
     */
    void severe(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    void severe(String arg0, Object_interface arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void severe(String arg0, Throwable arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.System$Logger$Level;)Lsun.util.logging.PlatformLogger$Level;`
     */
    static PlatformLogger_Level toPlatformLevel(System_Logger_Level arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Lsun.util.logging.PlatformLogger$Level;)Z`
     */
    bool isLoggable(PlatformLogger_Level arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    void finer(String arg0, Object_interface arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)V`
     */
    void finer(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void finer(String arg0, Throwable arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void fine(String arg0, Throwable arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    void fine(String arg0, Object_interface arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)V`
     */
    void fine(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    void finest(String arg0, Object_interface arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void finest(String arg0, Throwable arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)V`
     */
    void finest(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    void info(String arg0, Object_interface arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void info(String arg0, Throwable arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)V`
     */
    void info(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)Lsun.util.logging.PlatformLogger;`
     */
    static PlatformLogger getLogger(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void config(String arg0, Throwable arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)V`
     */
    void config(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    void config(String arg0, Object_interface arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `()Lsun.util.logging.PlatformLogger$Level;`
     */
    PlatformLogger_Level level();

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `()Z`
     */
    bool isEnabled();

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Lsun.util.logging.PlatformLogger$Level;)V`
     */
    void setLevel(PlatformLogger_Level arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;)V`
     */
    void warning(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;Ljava.lang.Throwable;)V`
     */
    void warning(String arg0, Throwable arg1);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)V`
     */
    void warning(String arg0, Object_interface arg1);
};


/**
 * Classpath: `java.lang.System$Logger$Level`
 * Enclosing class: `java.lang.System$Logger`
 * Package name: `java.lang`
 */
class System_Logger_Level : public Enum {
protected:
    const inline static char *className = "java.lang.System$Logger$Level";
public:
    STATICINITIALIZE;

    System_Logger_Level(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.lang.System$Logger$Level`
     * Signature: `()I`
     */
    int getSeverity();

    /**
     * Declaring class: `java.lang.System$Logger$Level`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.System$Logger$Level`
     * Signature: `(Ljava.lang.String;)Ljava.lang.System$Logger$Level;`
     */
    static System_Logger_Level valueOf(String arg0);
};


/**
 * Classpath: `sun.util.logging.PlatformLogger$Level`
 * Enclosing class: `sun.util.logging.PlatformLogger`
 * Package name: `sun.util.logging`
 */
class PlatformLogger_Level : public Enum {
protected:
    const inline static char *className = "sun.util.logging.PlatformLogger$Level";
public:
    STATICINITIALIZE;

    PlatformLogger_Level(jobject object) : Enum(object) {}


    /**
     * Declaring class: `sun.util.logging.PlatformLogger$Level`
     * Signature: `()Ljava.lang.System$Logger$Level;`
     */
    System_Logger_Level systemLevel();

    /**
     * Declaring class: `sun.util.logging.PlatformLogger$Level`
     * Signature: `()I`
     */
    int intValue();

    /**
     * Declaring class: `sun.util.logging.PlatformLogger$Level`
     * Signature: `(Ljava.lang.String;)Lsun.util.logging.PlatformLogger$Level;`
     */
    static PlatformLogger_Level valueOf(String arg0);

    /**
     * Declaring class: `sun.util.logging.PlatformLogger$Level`
     * Signature: `(I)Lsun.util.logging.PlatformLogger$Level;`
     */
    static PlatformLogger_Level valueOf(int arg0);
};


/**
 * Classpath: `sun.awt.FwDispatcher`
 * Package name: `sun.awt`
 */
class FwDispatcher : public JavaObject {
protected:
    const inline static char *className = "sun.awt.FwDispatcher";
public:
    STATICINITIALIZE;

    FwDispatcher(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.EventDispatchThread`
 * Package name: `java.awt`
 */
class EventDispatchThread : public Thread {
protected:
    const inline static char *className = "java.awt.EventDispatchThread";
public:
    STATICINITIALIZE;

    EventDispatchThread(jobject object) : Thread(object) {}


    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `()V`
     */
    void stopDispatching();

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.awt.EventQueue;)V`
     */
    void setEventQueue(EventQueue arg0);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.awt.Conditional;)V`
     */
    void pumpEvents(Conditional arg0);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(ILjava.awt.Conditional;)V`
     */
    void pumpEvents(int arg0, Conditional arg1);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(ILjava.awt.Conditional;Ljava.awt.EventFilter;)V`
     */
    void pumpEventsForFilter(int arg0, Conditional arg1, EventFilter arg2);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.awt.Conditional;Ljava.awt.EventFilter;)V`
     */
    void pumpEventsForFilter(Conditional arg0, EventFilter arg1);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(I)V`
     */
    void pumpOneEventForFilters(int arg0);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.awt.AWTEvent;)Z`
     */
    bool filterAndCheckEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.lang.Throwable;)V`
     */
    void processException(Throwable arg0);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `()Ljava.awt.EventQueue;`
     */
    EventQueue getEventQueue();

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(ILjava.awt.Conditional;Ljava.awt.Component;)V`
     */
    void pumpEventsForHierarchy(int arg0, Conditional arg1, Component arg2);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.awt.Conditional;Ljava.awt.Component;)V`
     */
    void pumpEventsForHierarchy(Conditional arg0, Component arg1);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.awt.EventFilter;)V`
     */
    void addEventFilter(EventFilter arg0);

    /**
     * Declaring class: `java.awt.EventDispatchThread`
     * Signature: `(Ljava.awt.EventFilter;)V`
     */
    void removeEventFilter(EventFilter arg0);
};


/**
 * Classpath: `java.awt.Conditional`
 * Package name: `java.awt`
 */
class Conditional : public JavaObject {
protected:
    const inline static char *className = "java.awt.Conditional";
public:
    STATICINITIALIZE;

    Conditional(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.EventFilter`
 * Package name: `java.awt`
 */
class EventFilter : public JavaObject {
protected:
    const inline static char *className = "java.awt.EventFilter";
public:
    STATICINITIALIZE;

    EventFilter(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.SecondaryLoop`
 * Package name: `java.awt`
 */
class SecondaryLoop : public JavaObject {
protected:
    const inline static char *className = "java.awt.SecondaryLoop";
public:
    STATICINITIALIZE;

    SecondaryLoop(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.Dialog$ModalExclusionType`
 * Enclosing class: `java.awt.Dialog`
 * Package name: `java.awt`
 */
class Dialog_ModalExclusionType : public Enum {
protected:
    const inline static char *className = "java.awt.Dialog$ModalExclusionType";
public:
    STATICINITIALIZE;

    Dialog_ModalExclusionType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.awt.Dialog$ModalExclusionType`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Dialog$ModalExclusionType;`
     */
    static Dialog_ModalExclusionType valueOf(String arg0);
};


/**
 * Classpath: `java.beans.PropertyChangeSupport`
 * Package name: `java.beans`
 */
class PropertyChangeSupport : public Object {
protected:
    const inline static char *className = "java.beans.PropertyChangeSupport";
public:
    STATICINITIALIZE;

    PropertyChangeSupport(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `([Ljava.beans.PropertyChangeListener;Ljava.beans.PropertyChangeEvent;)V`
     */
    static void fire(PropertyChangeListener_interface arg0, PropertyChangeEvent arg1);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;IZZ)V`
     */
    void fireIndexedPropertyChange(String arg0, int arg1, bool arg2, bool arg3);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;III)V`
     */
    void fireIndexedPropertyChange(String arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;ILjava.lang.Object;Ljava.lang.Object;)V`
     */
    void fireIndexedPropertyChange(String arg0, int arg1, Object arg2, Object arg3);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void firePropertyChange(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V`
     */
    void firePropertyChange(String arg0, Object arg1, Object arg2);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.beans.PropertyChangeEvent;)V`
     */
    void firePropertyChange(PropertyChangeEvent arg0);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;ZZ)V`
     */
    void firePropertyChange(String arg0, bool arg1, bool arg2);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(PropertyChangeListener arg0);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.beans.PropertyChangeListener;)V`
     */
    void removePropertyChangeListener(PropertyChangeListener arg0);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.beans.PropertyChangeSupport`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool hasListeners(String arg0);
};


/**
 * Classpath: `[Ljava.beans.PropertyChangeListener;`
 */
class PropertyChangeListener_interface : public Object {
protected:
    const inline static char *className = "[Ljava.beans.PropertyChangeListener;";
public:
    STATICINITIALIZE;

    PropertyChangeListener_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.beans.PropertyChangeEvent`
 * Package name: `java.beans`
 */
class PropertyChangeEvent : public EventObject {
protected:
    const inline static char *className = "java.beans.PropertyChangeEvent";
public:
    STATICINITIALIZE;

    PropertyChangeEvent(jobject object) : EventObject(object) {}


    /**
     * Declaring class: `java.beans.PropertyChangeEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String getPropertyName();

    /**
     * Declaring class: `java.beans.PropertyChangeEvent`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getOldValue();

    /**
     * Declaring class: `java.beans.PropertyChangeEvent`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getNewValue();

    /**
     * Declaring class: `java.beans.PropertyChangeEvent`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getPropagationId();

    /**
     * Declaring class: `java.beans.PropertyChangeEvent`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void setPropagationId(Object arg0);

    /**
     * Declaring class: `java.beans.PropertyChangeEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.beans.PropertyChangeEvent`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void appendTo(StringBuilder arg0);
};


/**
 * Classpath: `java.awt.Frame`
 * Package name: `java.awt`
 */
class Frame : public Window {
protected:
    const inline static char *className = "java.awt.Frame";
public:
    STATICINITIALIZE;

    Frame(jobject object) : Window(object) {}


    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Z)V`
     */
    void setResizable(bool arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Ljava.lang.String;`
     */
    String getTitle();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setTitle(String arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.awt.MenuBar;)V`
     */
    void setMenuBar(MenuBar arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.awt.Rectangle;)V`
     */
    void setMaximizedBounds(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()I`
     */
    int getExtendedState();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(I)V`
     */
    void setExtendedState(int arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(I)V`
     */
    void setState(int arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Ljava.awt.Image;`
     */
    Image getIconImage();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Ljava.awt.MenuBar;`
     */
    MenuBar getMenuBar();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getMaximizedBounds();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()I`
     */
    int getCursorType();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void setShape(Shape arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(F)V`
     */
    void setOpacity(float arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()V`
     */
    void removeNotify();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(I)V`
     */
    void setCursor(int arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.awt.Image;)V`
     */
    void setIconImage(Image arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.awt.event.KeyEvent;)V`
     */
    void postProcessKeyEvent(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setBackground(Color arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(I)Z`
     */
    bool isFrameStateSupported(int arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Z`
     */
    bool isUndecorated();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Z`
     */
    bool isResizable();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Z)V`
     */
    void setUndecorated(bool arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.lang.String;Ljava.awt.GraphicsConfiguration;)V`
     */
    void init(String arg0, GraphicsConfiguration arg1);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()I`
     */
    int getState();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.Frame`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.MenuBar`
 * Package name: `java.awt`
 */
class MenuBar : public MenuComponent {
protected:
    const inline static char *className = "java.awt.MenuBar";
public:
    STATICINITIALIZE;

    MenuBar(jobject object) : MenuComponent(object) {}


    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.awt.event.KeyEvent;)Z`
     */
    bool handleShortcut(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()V`
     */
    void removeNotify();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.awt.MenuShortcut;)Ljava.awt.MenuItem;`
     */
    MenuItem getShortcutMenuItem(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration shortcuts();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.awt.MenuShortcut;)V`
     */
    void deleteShortcut(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()I`
     */
    int getMenuCount();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(I)Ljava.awt.Menu;`
     */
    Menu getMenu(int arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()I`
     */
    int countMenus();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()I`
     */
    int getMenuCountImpl();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(I)Ljava.awt.Menu;`
     */
    Menu getMenuImpl(int arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()Ljava.awt.Menu;`
     */
    Menu getHelpMenu();

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.awt.Menu;)V`
     */
    void setHelpMenu(Menu arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.awt.MenuComponent;)I`
     */
    int getAccessibleChildIndex(MenuComponent arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.awt.Menu;)Ljava.awt.Menu;`
     */
    Menu add(Menu arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.MenuBar`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.util.Properties$LineReader`
 * Enclosing class: `java.util.Properties`
 * Package name: `java.util`
 */
class Properties_LineReader : public Object {
protected:
    const inline static char *className = "java.util.Properties$LineReader";
public:
    STATICINITIALIZE;

    Properties_LineReader(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.util.Properties$LineReader`
     * Signature: `()I`
     * Throws: `java.io.IOException`
     */
    int readLine();
};


/**
 * Classpath: `java.io.BufferedWriter`
 * Package name: `java.io`
 */
class BufferedWriter : public Writer {
protected:
    const inline static char *className = "java.io.BufferedWriter";
public:
    STATICINITIALIZE;

    BufferedWriter(jobject object) : Writer(object) {}


    /**
     * Declaring class: `java.io.BufferedWriter`
     * Signature: `(II)I`
     */
    int min(int arg0, int arg1);

    /**
     * Declaring class: `java.io.BufferedWriter`
     * Signature: `([CII)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.BufferedWriter`
     * Signature: `(Ljava.lang.String;II)V`
     * Throws: `java.io.IOException`
     */
    void write(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.BufferedWriter`
     * Signature: `(I)V`
     * Throws: `java.io.IOException`
     */
    void write(int arg0);

    /**
     * Declaring class: `java.io.BufferedWriter`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void newLine();

    /**
     * Declaring class: `java.io.BufferedWriter`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void ensureOpen();

    /**
     * Declaring class: `java.io.BufferedWriter`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void flushBuffer();
};


/**
 * Classpath: `java.awt.PrintJob`
 * Package name: `java.awt`
 */
class PrintJob : public Object {
protected:
    const inline static char *className = "java.awt.PrintJob";
public:
    STATICINITIALIZE;

    PrintJob(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.PrintJob`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension getPageDimension();

    /**
     * Declaring class: `java.awt.PrintJob`
     * Signature: `()I`
     */
    int getPageResolution();

    /**
     * Declaring class: `java.awt.PrintJob`
     * Signature: `()Z`
     */
    bool lastPageFirst();

    /**
     * Declaring class: `java.awt.PrintJob`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics getGraphics();

    /**
     * Declaring class: `java.awt.PrintJob`
     * Signature: `()V`
     */
    void finalize();

    /**
     * Declaring class: `java.awt.PrintJob`
     * Signature: `()V`
     */
    void end();
};


/**
 * Classpath: `java.awt.JobAttributes`
 * Package name: `java.awt`
 */
class JobAttributes : public Object {
protected:
    const inline static char *className = "java.awt.JobAttributes";
public:
    STATICINITIALIZE;

    JobAttributes(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()V`
     */
    void setCopiesToDefault();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.awt.JobAttributes$DefaultSelectionType;)V`
     */
    void setDefaultSelection(JobAttributes_DefaultSelectionType arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.awt.JobAttributes$DestinationType;)V`
     */
    void setDestination(JobAttributes_DestinationType arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.awt.JobAttributes$DialogType;)V`
     */
    void setDialog(JobAttributes_DialogType arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(I)V`
     */
    void setMaxPage(int arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(I)V`
     */
    void setMinPage(int arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()V`
     */
    void setMultipleDocumentHandlingToDefault();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()V`
     */
    void setSidesToDefault();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(I)V`
     */
    void setCopies(int arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setFileName(String arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.awt.JobAttributes$MultipleDocumentHandlingType;)V`
     */
    void setMultipleDocumentHandling(JobAttributes_MultipleDocumentHandlingType arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `([[I)V`
     */
    void setPageRanges(arr_arr_I arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setPrinter(String arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.awt.JobAttributes$SidesType;)V`
     */
    void setSides(JobAttributes_SidesType arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()I`
     */
    int getMinPage();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()I`
     */
    int getFromPage();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()I`
     */
    int getToPage();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()I`
     */
    int getCopies();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.awt.JobAttributes$DefaultSelectionType;`
     */
    JobAttributes_DefaultSelectionType getDefaultSelection();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.awt.JobAttributes$DestinationType;`
     */
    JobAttributes_DestinationType getDestination();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.awt.JobAttributes$DialogType;`
     */
    JobAttributes_DialogType getDialog();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()I`
     */
    int getMaxPage();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.awt.JobAttributes$MultipleDocumentHandlingType;`
     */
    JobAttributes_MultipleDocumentHandlingType getMultipleDocumentHandling();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.lang.String;`
     */
    String getPrinter();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.awt.JobAttributes$SidesType;`
     */
    JobAttributes_SidesType getSides();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(I)V`
     */
    void setFromPage(int arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(I)V`
     */
    void setToPage(int arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `(Ljava.awt.JobAttributes;)V`
     */
    void set(JobAttributes arg0);

    /**
     * Declaring class: `java.awt.JobAttributes`
     * Signature: `()Ljava.lang.String;`
     */
    String getFileName();
};


/**
 * Classpath: `java.awt.JobAttributes$DefaultSelectionType`
 * Enclosing class: `java.awt.JobAttributes`
 * Package name: `java.awt`
 */
class JobAttributes_DefaultSelectionType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$DefaultSelectionType";
public:
    STATICINITIALIZE;

    JobAttributes_DefaultSelectionType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.JobAttributes$DestinationType`
 * Enclosing class: `java.awt.JobAttributes`
 * Package name: `java.awt`
 */
class JobAttributes_DestinationType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$DestinationType";
public:
    STATICINITIALIZE;

    JobAttributes_DestinationType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.JobAttributes$DialogType`
 * Enclosing class: `java.awt.JobAttributes`
 * Package name: `java.awt`
 */
class JobAttributes_DialogType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$DialogType";
public:
    STATICINITIALIZE;

    JobAttributes_DialogType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.JobAttributes$MultipleDocumentHandlingType`
 * Enclosing class: `java.awt.JobAttributes`
 * Package name: `java.awt`
 */
class JobAttributes_MultipleDocumentHandlingType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$MultipleDocumentHandlingType";
public:
    STATICINITIALIZE;

    JobAttributes_MultipleDocumentHandlingType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `[[I`
 */
class arr_arr_I : public Object {
protected:
    const inline static char *className = "[[I";
public:
    STATICINITIALIZE;

    arr_arr_I(jobject object) : Object(object) {}

};


/**
 * Classpath: `java.awt.JobAttributes$SidesType`
 * Enclosing class: `java.awt.JobAttributes`
 * Package name: `java.awt`
 */
class JobAttributes_SidesType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$SidesType";
public:
    STATICINITIALIZE;

    JobAttributes_SidesType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.PageAttributes`
 * Package name: `java.awt`
 */
class PageAttributes : public Object {
protected:
    const inline static char *className = "java.awt.PageAttributes";
public:
    STATICINITIALIZE;

    PageAttributes(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(Ljava.awt.PageAttributes$ColorType;)V`
     */
    void setColor(PageAttributes_ColorType arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()Ljava.awt.PageAttributes$ColorType;`
     */
    PageAttributes_ColorType getColor();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()V`
     */
    void setMediaToDefault();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()V`
     */
    void setOrientationRequestedToDefault();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(Ljava.awt.PageAttributes$OriginType;)V`
     */
    void setOrigin(PageAttributes_OriginType arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()V`
     */
    void setPrintQualityToDefault();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()V`
     */
    void setPrinterResolutionToDefault();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(Ljava.awt.PageAttributes$MediaType;)V`
     */
    void setMedia(PageAttributes_MediaType arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(I)V`
     */
    void setOrientationRequested(int arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(Ljava.awt.PageAttributes$OrientationRequestedType;)V`
     */
    void setOrientationRequested(PageAttributes_OrientationRequestedType arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(Ljava.awt.PageAttributes$PrintQualityType;)V`
     */
    void setPrintQuality(PageAttributes_PrintQualityType arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(I)V`
     */
    void setPrintQuality(int arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `([I)V`
     */
    void setPrinterResolution(arr_I arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(I)V`
     */
    void setPrinterResolution(int arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()Ljava.awt.PageAttributes$MediaType;`
     */
    PageAttributes_MediaType getMedia();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()Ljava.awt.PageAttributes$OrientationRequestedType;`
     */
    PageAttributes_OrientationRequestedType getOrientationRequested();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()Ljava.awt.PageAttributes$OriginType;`
     */
    PageAttributes_OriginType getOrigin();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()Ljava.awt.PageAttributes$PrintQualityType;`
     */
    PageAttributes_PrintQualityType getPrintQuality();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.PageAttributes`
     * Signature: `(Ljava.awt.PageAttributes;)V`
     */
    void set(PageAttributes arg0);
};


/**
 * Classpath: `java.awt.PageAttributes$ColorType`
 * Enclosing class: `java.awt.PageAttributes`
 * Package name: `java.awt`
 */
class PageAttributes_ColorType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$ColorType";
public:
    STATICINITIALIZE;

    PageAttributes_ColorType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.PageAttributes$OriginType`
 * Enclosing class: `java.awt.PageAttributes`
 * Package name: `java.awt`
 */
class PageAttributes_OriginType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$OriginType";
public:
    STATICINITIALIZE;

    PageAttributes_OriginType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.PageAttributes$MediaType`
 * Enclosing class: `java.awt.PageAttributes`
 * Package name: `java.awt`
 */
class PageAttributes_MediaType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$MediaType";
public:
    STATICINITIALIZE;

    PageAttributes_MediaType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.PageAttributes$OrientationRequestedType`
 * Enclosing class: `java.awt.PageAttributes`
 * Package name: `java.awt`
 */
class PageAttributes_OrientationRequestedType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$OrientationRequestedType";
public:
    STATICINITIALIZE;

    PageAttributes_OrientationRequestedType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.PageAttributes$PrintQualityType`
 * Enclosing class: `java.awt.PageAttributes`
 * Package name: `java.awt`
 */
class PageAttributes_PrintQualityType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$PrintQualityType";
public:
    STATICINITIALIZE;

    PageAttributes_PrintQualityType(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.event.AWTEventListener`
 * Package name: `java.awt.event`
 */
class AWTEventListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.AWTEventListener";
public:
    STATICINITIALIZE;

    AWTEventListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.dnd.DragSource`
 * Package name: `java.awt.dnd`
 */
class DragSource : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DragSource";
public:
    STATICINITIALIZE;

    DragSource(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)Ljava.awt.dnd.DragSourceContext;`
     */
    DragSourceContext createDragSourceContext(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;Ljava.awt.datatransfer.FlavorMap;)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void startDrag(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5, FlavorMap arg6);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;Ljava.awt.datatransfer.FlavorMap;)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void startDrag(DragGestureEvent arg0, Cursor arg1, Transferable arg2, DragSourceListener arg3, FlavorMap arg4);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void startDrag(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void startDrag(DragGestureEvent arg0, Cursor arg1, Transferable arg2, DragSourceListener arg3);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceListener;)V`
     */
    void addDragSourceListener(DragSourceListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceMotionListener;)V`
     */
    void addDragSourceMotionListener(DragSourceMotionListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `()Ljava.awt.dnd.DragSource;`
     */
    static DragSource getDefaultDragSource();

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `()Z`
     */
    static bool isDragImageSupported();

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `()Ljava.awt.datatransfer.FlavorMap;`
     */
    FlavorMap getFlavorMap();

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.Component;ILjava.awt.dnd.DragGestureListener;)Ljava.awt.dnd.DragGestureRecognizer;`
     */
    DragGestureRecognizer createDefaultDragGestureRecognizer(Component arg0, int arg1, DragGestureListener arg2);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceListener;)V`
     */
    void removeDragSourceListener(DragSourceListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceMotionListener;)V`
     */
    void removeDragSourceMotionListener(DragSourceMotionListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceDragEvent;)V`
     */
    void processDragEnter(DragSourceDragEvent arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceDragEvent;)V`
     */
    void processDragOver(DragSourceDragEvent arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceDragEvent;)V`
     */
    void processDropActionChanged(DragSourceDragEvent arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceEvent;)V`
     */
    void processDragExit(DragSourceEvent arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceDropEvent;)V`
     */
    void processDragDropEnd(DragSourceDropEvent arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.awt.dnd.DragSourceDragEvent;)V`
     */
    void processDragMouseMoved(DragSourceDragEvent arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `()I`
     */
    static int getDragThreshold();

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.lang.Class;Ljava.awt.Component;ILjava.awt.dnd.DragGestureListener;)Ljava.awt.dnd.DragGestureRecognizer;`
     */
    DragGestureRecognizer createDragGestureRecognizer(Class arg0, Component arg1, int arg2, DragGestureListener arg3);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Cursor;`
     */
    static Cursor load(String arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSource`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);
};


/**
 * Classpath: `java.awt.dnd.DragGestureEvent`
 * Package name: `java.awt.dnd`
 */
class DragGestureEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.dnd.DragGestureEvent";
public:
    STATICINITIALIZE;

    DragGestureEvent(jobject object) : EventObject(object) {}


    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `(Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void startDrag(Cursor arg0, Transferable arg1, DragSourceListener arg2);

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `(Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void startDrag(Cursor arg0, Transferable arg1);

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `(Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V`
     * Throws: `java.awt.dnd.InvalidDnDOperationException`
     */
    void startDrag(Cursor arg0, Image arg1, Point arg2, Transferable arg3, DragSourceListener arg4);

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `()Ljava.awt.dnd.DragSource;`
     */
    DragSource getDragSource();

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `()Ljava.awt.event.InputEvent;`
     */
    InputEvent getTriggerEvent();

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getComponent();

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `()Ljava.awt.dnd.DragGestureRecognizer;`
     */
    DragGestureRecognizer getSourceAsDragGestureRecognizer();

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getDragOrigin();

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `()I`
     */
    int getDragAction();

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `()Ljava.util.Iterator;`
     */
    Iterator iterator();

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.dnd.DragGestureEvent`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);
};


/**
 * Classpath: `java.awt.dnd.DragSourceListener`
 * Package name: `java.awt.dnd`
 */
class DragSourceListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceListener";
public:
    STATICINITIALIZE;

    DragSourceListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.dnd.DragGestureRecognizer`
 * Package name: `java.awt.dnd`
 */
class DragGestureRecognizer : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DragGestureRecognizer";
public:
    STATICINITIALIZE;

    DragGestureRecognizer(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(Ljava.awt.dnd.DragGestureListener;)V`
     * Throws: `java.util.TooManyListenersException`
     */
    void addDragGestureListener(DragGestureListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `()V`
     */
    void unregisterListeners();

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `()V`
     */
    void registerListeners();

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `()Ljava.awt.dnd.DragSource;`
     */
    DragSource getDragSource();

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `()I`
     */
    int getSourceActions();

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(I)V`
     */
    void setSourceActions(int arg0);

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `()Ljava.awt.event.InputEvent;`
     */
    InputEvent getTriggerEvent();

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `()V`
     */
    void resetRecognizer();

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(Ljava.awt.dnd.DragGestureListener;)V`
     */
    void removeDragGestureListener(DragGestureListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(ILjava.awt.Point;)V`
     */
    void fireDragGestureRecognized(int arg0, Point arg1);

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(Ljava.awt.event.InputEvent;)V`
     */
    void appendEvent(InputEvent arg0);

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getComponent();

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(Ljava.awt.Component;)V`
     */
    void setComponent(Component arg0);

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.dnd.DragGestureRecognizer`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);
};


/**
 * Classpath: `java.awt.dnd.DragGestureListener`
 * Package name: `java.awt.dnd`
 */
class DragGestureListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DragGestureListener";
public:
    STATICINITIALIZE;

    DragGestureListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.dnd.DragSourceContext`
 * Package name: `java.awt.dnd`
 */
class DragSourceContext : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceContext";
public:
    STATICINITIALIZE;

    DragSourceContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `(Ljava.awt.dnd.DragSourceListener;)V`
     * Throws: `java.util.TooManyListenersException`
     */
    void addDragSourceListener(DragSourceListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `(Ljava.awt.dnd.DragSourceListener;)V`
     */
    void removeDragSourceListener(DragSourceListener arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `()Ljava.awt.dnd.DragSource;`
     */
    DragSource getDragSource();

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `()I`
     */
    int getSourceActions();

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `(Ljava.awt.Cursor;)V`
     */
    void setCursor(Cursor arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getComponent();

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `(III)V`
     */
    void updateCurrentCursor(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `(Ljava.awt.Cursor;)V`
     */
    void setCursorImpl(Cursor arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `()V`
     */
    void transferablesFlavorsChanged();

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `()Ljava.awt.dnd.DragGestureEvent;`
     */
    DragGestureEvent getTrigger();

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `()Ljava.awt.datatransfer.Transferable;`
     */
    Transferable getTransferable();

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `()Ljava.awt.Cursor;`
     */
    Cursor getCursor();

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.dnd.DragSourceContext`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);
};


/**
 * Classpath: `java.awt.dnd.DragSourceMotionListener`
 * Package name: `java.awt.dnd`
 */
class DragSourceMotionListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceMotionListener";
public:
    STATICINITIALIZE;

    DragSourceMotionListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.dnd.DragSourceEvent`
 * Package name: `java.awt.dnd`
 */
class DragSourceEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceEvent";
public:
    STATICINITIALIZE;

    DragSourceEvent(jobject object) : EventObject(object) {}


    /**
     * Declaring class: `java.awt.dnd.DragSourceEvent`
     * Signature: `()I`
     */
    int getX();

    /**
     * Declaring class: `java.awt.dnd.DragSourceEvent`
     * Signature: `()I`
     */
    int getY();

    /**
     * Declaring class: `java.awt.dnd.DragSourceEvent`
     * Signature: `()Ljava.awt.dnd.DragSourceContext;`
     */
    DragSourceContext getDragSourceContext();

    /**
     * Declaring class: `java.awt.dnd.DragSourceEvent`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocation();
};


/**
 * Classpath: `java.awt.dnd.DragSourceDropEvent`
 * Package name: `java.awt.dnd`
 */
class DragSourceDropEvent : public DragSourceEvent {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceDropEvent";
public:
    STATICINITIALIZE;

    DragSourceDropEvent(jobject object) : DragSourceEvent(object) {}


    /**
     * Declaring class: `java.awt.dnd.DragSourceDropEvent`
     * Signature: `()Z`
     */
    bool getDropSuccess();

    /**
     * Declaring class: `java.awt.dnd.DragSourceDropEvent`
     * Signature: `()I`
     */
    int getDropAction();
};


/**
 * Classpath: `java.awt.Dialog$ModalityType`
 * Enclosing class: `java.awt.Dialog`
 * Package name: `java.awt`
 */
class Dialog_ModalityType : public Enum {
protected:
    const inline static char *className = "java.awt.Dialog$ModalityType";
public:
    STATICINITIALIZE;

    Dialog_ModalityType(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.awt.Dialog$ModalityType`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Dialog$ModalityType;`
     */
    static Dialog_ModalityType valueOf(String arg0);
};


/**
 * Classpath: `java.lang.ref.WeakReference`
 * Package name: `java.lang.ref`
 */
class WeakReference : public Reference {
protected:
    const inline static char *className = "java.lang.ref.WeakReference";
public:
    STATICINITIALIZE;

    WeakReference(jobject object) : Reference(object) {}

};


/**
 * Classpath: `java.awt.Dialog`
 * Package name: `java.awt`
 */
class Dialog : public Window {
protected:
    const inline static char *className = "java.awt.Dialog";
public:
    STATICINITIALIZE;

    Dialog(jobject object) : Window(object) {}


    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Z)V`
     */
    void setResizable(bool arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Ljava.lang.String;`
     */
    String getTitle();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setTitle(String arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Shape;)V`
     */
    void setShape(Shape arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(F)V`
     */
    void setOpacity(float arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Z)V`
     */
    void setVisible(bool arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Window;)V`
     */
    static void checkShouldBeBlocked(Window arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void show();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void hide();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Window;)V`
     */
    void unblockWindow(Window arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void doDispose();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void toBack();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Color;)V`
     */
    void setBackground(Color arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Dialog$ModalityType;)V`
     */
    void setModalityType(Dialog_ModalityType arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Z`
     */
    bool isModal_NoClientCode();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Dialog$ModalityType;)V`
     */
    void checkModalityPermission(Dialog_ModalityType arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Z`
     */
    bool isModal();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void modalShow();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Component;Ljava.util.concurrent.atomic.AtomicLong;)Z`
     */
    bool conditionalShow(Component arg0, AtomicLong arg1);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void modalityPushed();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void modalityPopped();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void modalHide();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void hideAndDisposePreHandler();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    void hideAndDisposeHandler();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Z`
     */
    bool isUndecorated();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Window;)Z`
     */
    bool shouldBlock(Window arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Ljava.awt.Dialog$ModalityType;`
     */
    Dialog_ModalityType getModalityType();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.awt.Window;)V`
     */
    void blockWindow(Window arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.util.List;)V`
     */
    void blockWindows(List arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Z)V`
     */
    void setModal(bool arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Z`
     */
    bool isResizable();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Z)V`
     */
    void setUndecorated(bool arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.Dialog`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.util.concurrent.atomic.AtomicLong`
 * Package name: `java.util.concurrent.atomic`
 */
class AtomicLong : public Number {
protected:
    const inline static char *className = "java.util.concurrent.atomic.AtomicLong";
public:
    STATICINITIALIZE;

    AtomicLong(jobject object) : Number(object) {}


    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long get();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()I`
     */
    int intValue();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long longValue();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()F`
     */
    float floatValue();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()D`
     */
    double doubleValue();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)V`
     */
    void set(long arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long getOpaque();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)V`
     */
    void setOpaque(long arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long getAcquire();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)V`
     */
    void setRelease(long arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)Z`
     */
    bool compareAndSet(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)J`
     */
    long compareAndExchange(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)J`
     */
    long compareAndExchangeAcquire(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)J`
     */
    long compareAndExchangeRelease(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)Z`
     */
    bool weakCompareAndSetPlain(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)Z`
     */
    bool weakCompareAndSet(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)Z`
     */
    bool weakCompareAndSetAcquire(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)Z`
     */
    bool weakCompareAndSetRelease(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)J`
     */
    long getAndSet(long arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)J`
     */
    long getAndAdd(long arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)V`
     */
    void lazySet(long arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()Z`
     */
    static bool VMSupportsCS8();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JJ)Z`
     */
    bool weakCompareAndSetVolatile(long arg0, long arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long getAndIncrement();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long getAndDecrement();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long incrementAndGet();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long decrementAndGet();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)J`
     */
    long addAndGet(long arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(Ljava.util.function.LongUnaryOperator;)J`
     */
    long getAndUpdate(LongUnaryOperator arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(Ljava.util.function.LongUnaryOperator;)J`
     */
    long updateAndGet(LongUnaryOperator arg0);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JLjava.util.function.LongBinaryOperator;)J`
     */
    long getAndAccumulate(long arg0, LongBinaryOperator arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(JLjava.util.function.LongBinaryOperator;)J`
     */
    long accumulateAndGet(long arg0, LongBinaryOperator arg1);

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `()J`
     */
    long getPlain();

    /**
     * Declaring class: `java.util.concurrent.atomic.AtomicLong`
     * Signature: `(J)V`
     */
    void setPlain(long arg0);
};


/**
 * Classpath: `java.util.function.LongUnaryOperator`
 * Package name: `java.util.function`
 */
class LongUnaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongUnaryOperator";
public:
    STATICINITIALIZE;

    LongUnaryOperator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `sun.awt.AppContext`
 * Package name: `sun.awt`
 */
class AppContext : public Object {
protected:
    const inline static char *className = "sun.awt.AppContext";
public:
    STATICINITIALIZE;

    AppContext(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()Lsun.awt.AppContext;`
     */
    static AppContext getAppContext();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V`
     */
    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1);

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()Ljava.util.Set;`
     */
    static Set getAppContexts();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()Z`
     */
    bool isDisposed();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()V`
     */
    static void initMainAppContext();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `(Lsun.awt.AppContext;)Z`
     */
    static bool isMainContext(AppContext arg0);

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()V`
     */
    static void stopEventDispatchThreads();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `(Ljava.lang.Object;Ljava.util.function.Supplier;)Ljava.lang.Object;`
     */
    static Object getSoftReferenceValue(Object arg0, Supplier arg1);

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object remove(Object arg0);

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object get(Object arg0);

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object put(Object arg0, Object arg1);

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()Ljava.lang.ThreadGroup;`
     */
    ThreadGroup getThreadGroup();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getContextClassLoader();

    /**
     * Declaring class: `sun.awt.AppContext`
     * Signature: `()V`
     * Throws: `java.lang.IllegalThreadStateException`
     */
    void dispose();
};


/**
 * Classpath: `java.awt.event.WindowListener`
 * Package name: `java.awt.event`
 */
class WindowListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.WindowListener";
public:
    STATICINITIALIZE;

    WindowListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.WindowFocusListener`
 * Package name: `java.awt.event`
 */
class WindowFocusListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.WindowFocusListener";
public:
    STATICINITIALIZE;

    WindowFocusListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.event.WindowStateListener`
 * Package name: `java.awt.event`
 */
class WindowStateListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.WindowStateListener";
public:
    STATICINITIALIZE;

    WindowStateListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.util.AbstractList`
 * Package name: `java.util`
 */
class AbstractList : public AbstractCollection {
protected:
    const inline static char *className = "java.util.AbstractList";
public:
    STATICINITIALIZE;

    AbstractList(jobject object) : AbstractCollection(object) {}


    /**
     * Declaring class: `java.util.AbstractList`
     * Signature: `(I)V`
     */
    void rangeCheckForAdd(int arg0);

    /**
     * Declaring class: `java.util.AbstractList`
     * Signature: `(I)Ljava.lang.String;`
     */
    String outOfBoundsMsg(int arg0);

    /**
     * Declaring class: `java.util.AbstractList`
     * Signature: `(III)V`
     */
    static void subListRangeCheck(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.util.AbstractList`
     * Signature: `(II)V`
     */
    void removeRange(int arg0, int arg1);
};


/**
 * Classpath: `java.awt.Window$Type`
 * Enclosing class: `java.awt.Window`
 * Package name: `java.awt`
 */
class Window_Type : public Enum {
protected:
    const inline static char *className = "java.awt.Window$Type";
public:
    STATICINITIALIZE;

    Window_Type(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.awt.Window$Type`
     * Signature: `(Ljava.lang.String;)Ljava.awt.Window$Type;`
     */
    static Window_Type valueOf(String arg0);
};


/**
 * Classpath: `java.awt.GraphicsDevice$WindowTranslucency`
 * Enclosing class: `java.awt.GraphicsDevice`
 * Package name: `java.awt`
 */
class GraphicsDevice_WindowTranslucency : public Enum {
protected:
    const inline static char *className = "java.awt.GraphicsDevice$WindowTranslucency";
public:
    STATICINITIALIZE;

    GraphicsDevice_WindowTranslucency(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.awt.GraphicsDevice$WindowTranslucency`
     * Signature: `(Ljava.lang.String;)Ljava.awt.GraphicsDevice$WindowTranslucency;`
     */
    static GraphicsDevice_WindowTranslucency valueOf(String arg0);
};


/**
 * Classpath: `java.awt.image.BufferedImageOp`
 * Package name: `java.awt.image`
 */
class BufferedImageOp : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.BufferedImageOp";
public:
    STATICINITIALIZE;

    BufferedImageOp(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.Paint`
 * Package name: `java.awt`
 */
class Paint : public JavaObject {
protected:
    const inline static char *className = "java.awt.Paint";
public:
    STATICINITIALIZE;

    Paint(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.image.RenderedImage`
 * Package name: `java.awt.image`
 */
class RenderedImage : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.RenderedImage";
public:
    STATICINITIALIZE;

    RenderedImage(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.image.renderable.RenderableImage`
 * Package name: `java.awt.image.renderable`
 */
class RenderableImage : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.renderable.RenderableImage";
public:
    STATICINITIALIZE;

    RenderableImage(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.font.GlyphVector`
 * Package name: `java.awt.font`
 */
class GlyphVector : public Object {
protected:
    const inline static char *className = "java.awt.font.GlyphVector";
public:
    STATICINITIALIZE;

    GlyphVector(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()I`
     */
    int getNumGlyphs();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)I`
     */
    int getGlyphCharIndex(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getVisualBounds();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)Ljava.awt.Shape;`
     */
    Shape getGlyphOutline(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(IFF)Ljava.awt.Shape;`
     */
    Shape getGlyphOutline(int arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)Ljava.awt.Shape;`
     */
    Shape getGlyphVisualBounds(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()V`
     */
    void performDefaultLayout();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)I`
     */
    int getGlyphCode(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getLogicalBounds();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(Ljava.awt.font.FontRenderContext;FF)Ljava.awt.Rectangle;`
     */
    Rectangle getPixelBounds(FontRenderContext arg0, float arg1, float arg2);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(FF)Ljava.awt.Shape;`
     */
    Shape getOutline(float arg0, float arg1);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()Ljava.awt.Shape;`
     */
    Shape getOutline();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)Ljava.awt.geom.Point2D;`
     */
    Point2D getGlyphPosition(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(ILjava.awt.geom.Point2D;)V`
     */
    void setGlyphPosition(int arg0, Point2D arg1);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getGlyphTransform(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(ILjava.awt.geom.AffineTransform;)V`
     */
    void setGlyphTransform(int arg0, AffineTransform arg1);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()I`
     */
    int getLayoutFlags();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)Ljava.awt.Shape;`
     */
    Shape getGlyphLogicalBounds(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(ILjava.awt.font.FontRenderContext;FF)Ljava.awt.Rectangle;`
     */
    Rectangle getGlyphPixelBounds(int arg0, FontRenderContext arg1, float arg2, float arg3);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)Ljava.awt.font.GlyphMetrics;`
     */
    GlyphMetrics getGlyphMetrics(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(I)Ljava.awt.font.GlyphJustificationInfo;`
     */
    GlyphJustificationInfo getGlyphJustificationInfo(int arg0);

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()Ljava.awt.Font;`
     */
    Font getFont();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `()Ljava.awt.font.FontRenderContext;`
     */
    FontRenderContext getFontRenderContext();

    /**
     * Declaring class: `java.awt.font.GlyphVector`
     * Signature: `(Ljava.awt.font.GlyphVector;)Z`
     */
    bool equals(GlyphVector arg0);
};


/**
 * Classpath: `java.awt.font.GlyphMetrics`
 * Package name: `java.awt.font`
 */
class GlyphMetrics : public Object {
protected:
    const inline static char *className = "java.awt.font.GlyphMetrics";
public:
    STATICINITIALIZE;

    GlyphMetrics(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()F`
     */
    float getAdvance();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()F`
     */
    float getAdvanceX();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()F`
     */
    float getAdvanceY();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()F`
     */
    float getLSB();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()F`
     */
    float getRSB();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()Z`
     */
    bool isLigature();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()Z`
     */
    bool isCombining();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()Z`
     */
    bool isComponent();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D getBounds2D();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()Z`
     */
    bool isWhitespace();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()I`
     */
    int getType();

    /**
     * Declaring class: `java.awt.font.GlyphMetrics`
     * Signature: `()Z`
     */
    bool isStandard();
};


/**
 * Classpath: `java.awt.font.GlyphJustificationInfo`
 * Package name: `java.awt.font`
 */
class GlyphJustificationInfo : public Object {
protected:
    const inline static char *className = "java.awt.font.GlyphJustificationInfo";
public:
    STATICINITIALIZE;

    GlyphJustificationInfo(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.GlyphJustificationInfo`
     * Signature: `(I)Z`
     */
    static bool priorityIsValid(int arg0);
};


/**
 * Classpath: `java.awt.Composite`
 * Package name: `java.awt`
 */
class Composite : public JavaObject {
protected:
    const inline static char *className = "java.awt.Composite";
public:
    STATICINITIALIZE;

    Composite(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.Stroke`
 * Package name: `java.awt`
 */
class Stroke : public JavaObject {
protected:
    const inline static char *className = "java.awt.Stroke";
public:
    STATICINITIALIZE;

    Stroke(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.RenderingHints$Key`
 * Enclosing class: `java.awt.RenderingHints`
 * Package name: `java.awt`
 */
class RenderingHints_Key : public Object {
protected:
    const inline static char *className = "java.awt.RenderingHints$Key";
public:
    STATICINITIALIZE;

    RenderingHints_Key(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.RenderingHints$Key`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool isCompatibleValue(Object arg0);

    /**
     * Declaring class: `java.awt.RenderingHints$Key`
     * Signature: `()Ljava.lang.String;`
     */
    String getIdentity();

    /**
     * Declaring class: `java.awt.RenderingHints$Key`
     * Signature: `(Ljava.awt.RenderingHints$Key;)V`
     */
    static void recordIdentity(RenderingHints_Key arg0);

    /**
     * Declaring class: `java.awt.RenderingHints$Key`
     * Signature: `()I`
     */
    int intKey();

    /**
     * Declaring class: `java.awt.RenderingHints$Key`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.RenderingHints$Key`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `java.awt.RenderingHints`
 * Package name: `java.awt`
 */
class RenderingHints : public Object {
protected:
    const inline static char *className = "java.awt.RenderingHints";
public:
    STATICINITIALIZE;

    RenderingHints(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.RenderingHints`
     * Signature: `(Ljava.awt.RenderingHints;)V`
     */
    void add(RenderingHints arg0);

    /**
     * Declaring class: `java.awt.RenderingHints`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.RenderingHints`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();
};


/**
 * Classpath: `java.text.Annotation`
 * Package name: `java.text`
 */
class Annotation : public Object {
protected:
    const inline static char *className = "java.text.Annotation";
public:
    STATICINITIALIZE;

    Annotation(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.text.Annotation`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.text.Annotation`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getValue();
};


/**
 * Classpath: `java.awt.font.NumericShaper`
 * Package name: `java.awt.font`
 */
class NumericShaper : public Object {
protected:
    const inline static char *className = "java.awt.font.NumericShaper";
public:
    STATICINITIALIZE;

    NumericShaper(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(I)I`
     */
    static int getKeyFromMask(int arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `([CII)V`
     */
    void checkParams(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `()Z`
     */
    bool isContextual();

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `([CIII)V`
     */
    void shapeContextually(arr_C arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `([CIILjava.awt.font.NumericShaper$Range;)V`
     */
    void shapeContextually(arr_C arg0, int arg1, int arg2, NumericShaper_Range arg3);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `([CII)V`
     */
    void shapeNonContextually(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(C)Z`
     */
    bool isStrongDirectional(char arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(C)I`
     */
    static int getContextKey(char arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(I)Ljava.awt.font.NumericShaper$Range;`
     */
    NumericShaper_Range rangeForCodePoint(int arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(I)I`
     */
    static int getHighBit(int arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(Ljava.awt.font.NumericShaper$Range;)Ljava.awt.font.NumericShaper;`
     */
    static NumericShaper getShaper(NumericShaper_Range arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(I)Ljava.awt.font.NumericShaper;`
     */
    static NumericShaper getShaper(int arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(I)Ljava.awt.font.NumericShaper;`
     */
    static NumericShaper getContextualShaper(int arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(II)Ljava.awt.font.NumericShaper;`
     */
    static NumericShaper getContextualShaper(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(Ljava.util.Set;Ljava.awt.font.NumericShaper$Range;)Ljava.awt.font.NumericShaper;`
     */
    static NumericShaper getContextualShaper(Set arg0, NumericShaper_Range arg1);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(Ljava.util.Set;)Ljava.awt.font.NumericShaper;`
     */
    static NumericShaper getContextualShaper(Set arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `()I`
     */
    int getRanges();

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `()Ljava.util.Set;`
     */
    Set getRangeSet();

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `(I[III)I`
     */
    static int search(int arg0, arr_I arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `([CII)V`
     */
    void shape(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `([CIII)V`
     */
    void shape(arr_C arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.font.NumericShaper`
     * Signature: `([CIILjava.awt.font.NumericShaper$Range;)V`
     */
    void shape(arr_C arg0, int arg1, int arg2, NumericShaper_Range arg3);
};


/**
 * Classpath: `java.awt.font.NumericShaper$Range`
 * Enclosing class: `java.awt.font.NumericShaper`
 * Package name: `java.awt.font`
 */
class NumericShaper_Range : public Enum {
protected:
    const inline static char *className = "java.awt.font.NumericShaper$Range";
public:
    STATICINITIALIZE;

    NumericShaper_Range(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `(Ljava.awt.font.NumericShaper$Range;)I`
     */
    static int toRangeIndex(NumericShaper_Range arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `(I)Ljava.util.Set;`
     */
    static Set maskToRangeSet(int arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `()I`
     */
    int getDigitBase();

    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `()C`
     */
    char getNumericBase();

    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `(I)Ljava.awt.font.NumericShaper$Range;`
     */
    static NumericShaper_Range indexToRange(int arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `(Ljava.util.Set;)I`
     */
    static int toRangeMask(Set arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `(Ljava.lang.String;)Ljava.awt.font.NumericShaper$Range;`
     */
    static NumericShaper_Range valueOf(String arg0);

    /**
     * Declaring class: `java.awt.font.NumericShaper$Range`
     * Signature: `(I)Z`
     */
    bool inRange(int arg0);
};


/**
 * Classpath: `java.awt.font.TransformAttribute`
 * Package name: `java.awt.font`
 */
class TransformAttribute : public Object {
protected:
    const inline static char *className = "java.awt.font.TransformAttribute";
public:
    STATICINITIALIZE;

    TransformAttribute(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.font.TransformAttribute`
     * Signature: `()Ljava.awt.geom.AffineTransform;`
     */
    AffineTransform getTransform();

    /**
     * Declaring class: `java.awt.font.TransformAttribute`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.font.TransformAttribute`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.awt.font.TransformAttribute`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.font.TransformAttribute`
     * Signature: `()Z`
     */
    bool isIdentity();

    /**
     * Declaring class: `java.awt.font.TransformAttribute`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.ObjectStreamException`
     */
    Object readResolve();
};


/**
 * Classpath: `[Lsun.font.EAttribute;`
 */
class EAttribute_interface : public Object {
protected:
    const inline static char *className = "[Lsun.font.EAttribute;";
public:
    STATICINITIALIZE;

    EAttribute_interface(jobject object) : Object(object) {}

};


/**
 * Classpath: `sun.font.Font2D`
 * Package name: `sun.font`
 */
class Font2D : public Object {
protected:
    const inline static char *className = "sun.font.Font2D";
public:
    STATICINITIALIZE;

    Font2D(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()I`
     */
    int getWeight();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()I`
     */
    int getWidth();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getFamilyName(Locale arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()Ljava.lang.String;`
     */
    String getPostscriptName();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()I`
     */
    int getNumGlyphs();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()I`
     */
    int getMissingGlyphCode();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(C)B`
     */
    byte getBaselineFor(char arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(C)Z`
     */
    bool canDisplay(char arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(I)Z`
     */
    bool canDisplay(int arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;Ljava.lang.Object;Ljava.lang.Object;)F`
     */
    float getItalicAngle(Font arg0, AffineTransform arg1, Object arg2, Object arg3);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()Lsun.font.CharToGlyphMapper;`
     */
    CharToGlyphMapper getMapper();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.awt.Font;Ljava.awt.font.FontRenderContext;)Lsun.font.FontStrike;`
     */
    FontStrike getStrike(Font arg0, FontRenderContext arg1);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Lsun.font.FontStrikeDesc;)Lsun.font.FontStrike;`
     */
    FontStrike getStrike(FontStrikeDesc arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Lsun.font.FontStrikeDesc;Z)Lsun.font.FontStrike;`
     */
    FontStrike getStrike(FontStrikeDesc arg0, bool arg1);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.awt.Font;)Lsun.font.FontStrike;`
     */
    FontStrike getStrike(Font arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;II)Lsun.font.FontStrike;`
     */
    FontStrike getStrike(Font arg0, AffineTransform arg1, int arg2, int arg3);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;Ljava.awt.geom.AffineTransform;II)Lsun.font.FontStrike;`
     */
    FontStrike getStrike(Font arg0, AffineTransform arg1, AffineTransform arg2, int arg3, int arg4);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Lsun.font.FontStrike;)V`
     */
    void updateLastStrikeRef(FontStrike arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Lsun.font.FontStrikeDesc;)Lsun.font.FontStrike;`
     */
    FontStrike createStrike(FontStrikeDesc arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(F[FI)V`
     */
    void getStyleMetrics(float arg0, arr_F arg1, int arg2);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(I)I`
     */
    int charToGlyph(int arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(II)I`
     */
    int charToVariationGlyph(int arg0, int arg1);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(ZI)V`
     */
    void setUseWeakRefs(bool arg0, int arg1);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()V`
     */
    void setStyle();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()I`
     */
    int getRank();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(I)V`
     */
    void setRank(int arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(I)I`
     */
    int getValidatedGlyphCode(int arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()J`
     */
    long getPlatformNativeFontPtr();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()J`
     */
    long getUnitsPerEm();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool supportsEncoding(String arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(I)Z`
     */
    bool canDoStyle(int arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(I)Z`
     */
    bool useAAForPtSize(int arg0);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()Z`
     */
    bool hasSupplementaryChars();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;Ljava.lang.Object;Ljava.lang.Object;[F)V`
     */
    void getFontMetrics(Font arg0, AffineTransform arg1, Object arg2, Object arg3, arr_F arg4);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.awt.Font;Ljava.awt.font.FontRenderContext;[F)V`
     */
    void getFontMetrics(Font arg0, FontRenderContext arg1, arr_F arg2);

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `()I`
     */
    int getStyle();

    /**
     * Declaring class: `sun.font.Font2D`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String getFontName(Locale arg0);
};


/**
 * Classpath: `sun.font.CharToGlyphMapper`
 * Package name: `sun.font`
 */
class CharToGlyphMapper : public Object {
protected:
    const inline static char *className = "sun.font.CharToGlyphMapper";
public:
    STATICINITIALIZE;

    CharToGlyphMapper(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `()I`
     */
    int getNumGlyphs();

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `()I`
     */
    int getMissingGlyphCode();

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(I)Z`
     */
    bool canDisplay(int arg0);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(C)Z`
     */
    bool canDisplay(char arg0);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(C)I`
     */
    int charToGlyph(char arg0);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(I)I`
     */
    int charToGlyph(int arg0);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(II)I`
     */
    int charToVariationGlyph(int arg0, int arg1);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(I[C[I)V`
     */
    void charsToGlyphs(int arg0, arr_C arg1, arr_I arg2);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(I[I[I)V`
     */
    void charsToGlyphs(int arg0, arr_I arg1, arr_I arg2);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(I[C[I)Z`
     */
    bool charsToGlyphsNS(int arg0, arr_C arg1, arr_I arg2);

    /**
     * Declaring class: `sun.font.CharToGlyphMapper`
     * Signature: `(I)Z`
     */
    static bool isVariationSelector(int arg0);
};


/**
 * Classpath: `sun.font.FontStrike`
 * Package name: `sun.font`
 */
class FontStrike : public Object {
protected:
    const inline static char *className = "sun.font.FontStrike";
public:
    STATICINITIALIZE;

    FontStrike(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `()I`
     */
    int getNumGlyphs();

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(IFF)Ljava.awt.geom.GeneralPath;`
     */
    GeneralPath getGlyphOutline(int arg0, float arg1, float arg2);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(I)Ljava.awt.geom.Point2D$Float;`
     */
    Point2D_Float getGlyphMetrics(int arg0);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `([I[JI)V`
     */
    void getGlyphImagePtrs(arr_I arg0, arr_J arg1, int arg2);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(I)J`
     */
    long getGlyphImagePtr(int arg0);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(ILjava.awt.geom.Point2D$Float;Ljava.awt.Rectangle;)V`
     */
    void getGlyphImageBounds(int arg0, Point2D_Float arg1, Rectangle arg2);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(C)Ljava.awt.geom.Point2D$Float;`
     */
    Point2D_Float getCharMetrics(char arg0);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(I)F`
     */
    float getGlyphAdvance(int arg0);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(I)F`
     */
    float getCodePointAdvance(int arg0);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `(I)Ljava.awt.geom.Rectangle2D$Float;`
     */
    Rectangle2D_Float getGlyphOutlineBounds(int arg0);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `([IFF)Ljava.awt.geom.GeneralPath;`
     */
    GeneralPath getGlyphVectorOutline(arr_I arg0, float arg1, float arg2);

    /**
     * Declaring class: `sun.font.FontStrike`
     * Signature: `()Lsun.font.StrikeMetrics;`
     */
    StrikeMetrics getFontMetrics();
};


/**
 * Classpath: `java.awt.geom.PathIterator`
 * Package name: `java.awt.geom`
 */
class PathIterator : public JavaObject {
protected:
    const inline static char *className = "java.awt.geom.PathIterator";
public:
    STATICINITIALIZE;

    PathIterator(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.geom.Path2D`
 * Package name: `java.awt.geom`
 */
class Path2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Path2D";
public:
    STATICINITIALIZE;

    Path2D(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(I)V`
     */
    void setWindingRule(int arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(ZI)V`
     */
    void needRoom(bool arg0, int arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(DD)V`
     */
    void moveTo(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(DD)V`
     */
    void lineTo(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(DDDD)V`
     */
    void quadTo(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(DDDDDD)V`
     */
    void curveTo(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `()V`
     */
    void closePath();

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(DD)I`
     */
    int pointCrossings(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(DDDD)I`
     */
    int rectCrossings(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `()Ljava.awt.geom.Point2D;`
     */
    Point2D getCurrentPoint();

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(Ljava.awt.geom.AffineTransform;)Ljava.awt.Shape;`
     */
    Shape createTransformedShape(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `()I`
     */
    int getWindingRule();

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(I)Ljava.awt.geom.Point2D;`
     */
    Point2D getPoint(int arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(DD)V`
     */
    void append(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(FF)V`
     */
    void append(float arg0, float arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(Ljava.awt.geom.PathIterator;Z)V`
     */
    void append(PathIterator arg0, bool arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(Ljava.awt.Shape;Z)V`
     */
    void append(Shape arg0, bool arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void transform(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(Ljava.io.ObjectInputStream;Z)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0, bool arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `(Ljava.io.ObjectOutputStream;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0, bool arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `()V`
     */
    void trimToSize();

    /**
     * Declaring class: `java.awt.geom.Path2D`
     * Signature: `()V`
     */
    void reset();
};


/**
 * Classpath: `java.awt.geom.Point2D$Float`
 * Enclosing class: `java.awt.geom.Point2D`
 * Package name: `java.awt.geom`
 */
class Point2D_Float : public Point2D {
protected:
    const inline static char *className = "java.awt.geom.Point2D$Float";
public:
    STATICINITIALIZE;

    Point2D_Float(jobject object) : Point2D(object) {}


    /**
     * Declaring class: `java.awt.geom.Point2D$Float`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `java.awt.geom.Point2D$Float`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `java.awt.geom.Point2D$Float`
     * Signature: `(FF)V`
     */
    void setLocation(float arg0, float arg1);

    /**
     * Declaring class: `java.awt.geom.Point2D$Float`
     * Signature: `(DD)V`
     */
    void setLocation(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Point2D$Float`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `sun.font.StrikeMetrics`
 * Package name: `sun.font`
 */
class StrikeMetrics : public Object {
protected:
    const inline static char *className = "sun.font.StrikeMetrics";
public:
    STATICINITIALIZE;

    StrikeMetrics(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.font.StrikeMetrics`
     * Signature: `()F`
     */
    float getAscent();

    /**
     * Declaring class: `sun.font.StrikeMetrics`
     * Signature: `()F`
     */
    float getDescent();

    /**
     * Declaring class: `sun.font.StrikeMetrics`
     * Signature: `()F`
     */
    float getLeading();

    /**
     * Declaring class: `sun.font.StrikeMetrics`
     * Signature: `()F`
     */
    float getMaxAdvance();

    /**
     * Declaring class: `sun.font.StrikeMetrics`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void convertToUserSpace(AffineTransform arg0);

    /**
     * Declaring class: `sun.font.StrikeMetrics`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.font.StrikeMetrics`
     * Signature: `(Lsun.font.StrikeMetrics;)V`
     */
    void merge(StrikeMetrics arg0);
};


/**
 * Classpath: `sun.font.FontStrikeDesc`
 * Package name: `sun.font`
 */
class FontStrikeDesc : public Object {
protected:
    const inline static char *className = "sun.font.FontStrikeDesc";
public:
    STATICINITIALIZE;

    FontStrikeDesc(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.font.FontStrikeDesc`
     * Signature: `(Ljava.lang.Object;Lsun.font.Font2D;I)I`
     */
    static int getAAHintIntVal(Object arg0, Font2D arg1, int arg2);

    /**
     * Declaring class: `sun.font.FontStrikeDesc`
     * Signature: `(Lsun.font.Font2D;Ljava.awt.Font;Ljava.awt.font.FontRenderContext;)I`
     */
    static int getAAHintIntVal(Font2D arg0, Font arg1, FontRenderContext arg2);

    /**
     * Declaring class: `sun.font.FontStrikeDesc`
     * Signature: `(Ljava.lang.Object;)I`
     */
    static int getFMHintIntVal(Object arg0);

    /**
     * Declaring class: `sun.font.FontStrikeDesc`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `sun.font.FontStrikeDesc`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `sun.font.FontStrikeDesc`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `sun.font.FontLineMetrics`
 * Package name: `sun.font`
 */
class FontLineMetrics : public LineMetrics {
protected:
    const inline static char *className = "sun.font.FontLineMetrics";
public:
    STATICINITIALIZE;

    FontLineMetrics(jobject object) : LineMetrics(object) {}


    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getHeight();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getAscent();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getDescent();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getLeading();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()I`
     */
    int getNumChars();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()I`
     */
    int getBaselineIndex();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getStrikethroughOffset();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getStrikethroughThickness();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getUnderlineOffset();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()F`
     */
    float getUnderlineThickness();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `sun.font.FontLineMetrics`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();
};


/**
 * Classpath: `java.awt.peer.FontPeer`
 * Package name: `java.awt.peer`
 */
class FontPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.FontPeer";
public:
    STATICINITIALIZE;

    FontPeer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `java.awt.Polygon`
 * Package name: `java.awt`
 */
class Polygon : public Object {
protected:
    const inline static char *className = "java.awt.Polygon";
public:
    STATICINITIALIZE;

    Polygon(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getBoundingBox();

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `()V`
     */
    void invalidate();

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `(II)V`
     */
    void translate(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `(II)V`
     */
    void addPoint(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `(II)V`
     */
    void updateBounds(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `([I[II)V`
     */
    void calculateBounds(arr_I arg0, arr_I arg1, int arg2);

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `(DDDD)Lsun.awt.geom.Crossings;`
     */
    Crossings getCrossings(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `(II)Z`
     */
    bool inside(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Polygon`
     * Signature: `()V`
     */
    void reset();
};


/**
 * Classpath: `sun.awt.geom.Crossings`
 * Package name: `sun.awt.geom`
 */
class Crossings : public Object {
protected:
    const inline static char *className = "sun.awt.geom.Crossings";
public:
    STATICINITIALIZE;

    Crossings(jobject object) : Object(object) {}


    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(DDDD)Z`
     */
    bool accumulateLine(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(DDDDI)Z`
     */
    bool accumulateLine(double arg0, double arg1, double arg2, double arg3, int arg4);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(DD)Z`
     */
    bool covers(double arg0, double arg1);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(DD[D)Z`
     */
    bool accumulateQuad(double arg0, double arg1, arr_D arg2);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(DD[D)Z`
     */
    bool accumulateCubic(double arg0, double arg1, arr_D arg2);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `()D`
     */
    double getXLo();

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `()D`
     */
    double getYLo();

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `()D`
     */
    double getXHi();

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `()D`
     */
    double getYHi();

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(Ljava.util.Vector;DDDD)Lsun.awt.geom.Crossings;`
     */
    static Crossings findCrossings(Vector arg0, double arg1, double arg2, double arg3, double arg4);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(Ljava.awt.geom.PathIterator;DDDD)Lsun.awt.geom.Crossings;`
     */
    static Crossings findCrossings(PathIterator arg0, double arg1, double arg2, double arg3, double arg4);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `(DDI)V`
     */
    void record(double arg0, double arg1, int arg2);

    /**
     * Declaring class: `sun.awt.geom.Crossings`
     * Signature: `()V`
     */
    void print();
};


/**
 * Classpath: `java.util.Vector`
 * Package name: `java.util`
 */
class Vector : public AbstractList {
protected:
    const inline static char *className = "java.util.Vector";
public:
    STATICINITIALIZE;

    Vector(jobject object) : AbstractList(object) {}


    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration elements();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()I`
     */
    int capacity();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(I)V`
     */
    void ensureCapacity(int arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()V`
     */
    void trimToSize();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(I)Ljava.lang.Object;`
     */
    Object elementData(int arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `([Ljava.lang.Object;II)V`
     */
    void shiftTailOverGap(Object_interface arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(I)Ljava.lang.Object;`
     */
    Object elementAt(int arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `([Ljava.lang.Object;I)Ljava.lang.Object;`
     */
    static Object elementAt(Object_interface arg0, int arg1);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `([JI)V`
     */
    static void setBit(arr_J arg0, int arg1);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `([JI)Z`
     */
    static bool isClear(arr_J arg0, int arg1);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(II)V`
     */
    void removeRange(int arg0, int arg1);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()V`
     */
    void checkInvariants();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(Ljava.util.function.Predicate;)Z`
     */
    bool bulkRemove(Predicate arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `([Ljava.lang.Object;)V`
     */
    void copyInto(Object_interface arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(I)V`
     */
    void setSize(int arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(I)V`
     */
    void removeElementAt(int arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool removeElement(Object arg0);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(Ljava.lang.Object;I)V`
     */
    void insertElementAt(Object arg0, int arg1);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()V`
     */
    void removeAllElements();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()Ljava.lang.Object;`
     */
    Object firstElement();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `()Ljava.lang.Object;`
     */
    Object lastElement();

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(Ljava.lang.Object;I)V`
     */
    void setElementAt(Object arg0, int arg1);

    /**
     * Declaring class: `java.util.Vector`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void addElement(Object arg0);
};


/**
 * Classpath: `net.minecraft.client.renderer.texture.SimpleTexture`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class SimpleTexture : public AbstractTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.SimpleTexture";
public:
    STATICINITIALIZE;

    SimpleTexture(jobject object) : AbstractTexture(object) {}

};


/**
 * Classpath: `net.minecraft.client.model.ModelBase`
 * Package name: `net.minecraft.client.model`
 */
class ModelBase : public Object {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelBase";
public:
    STATICINITIALIZE;

    ModelBase(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(FFFFFFLnet.minecraft.entity.Entity;)V`
     */
    void setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;FFF)V`
     */
    void setLivingAnimations(EntityLivingBase arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(Ljava.util.Random;)Lnet.minecraft.client.model.ModelRenderer;`
     */
    ModelRenderer getRandomModelBox(Random arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void setTextureOffset(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.client.model.TextureOffset;`
     */
    TextureOffset getTextureOffset(String arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(Lnet.minecraft.client.model.ModelRenderer;Lnet.minecraft.client.model.ModelRenderer;)V`
     */
    static void copyModelAngles(ModelRenderer arg0, ModelRenderer arg1);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(Lnet.minecraft.client.model.ModelBase;)V`
     */
    void setModelAttributes(ModelBase arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBase`
     * Signature: `(Lnet.minecraft.entity.Entity;FFFFFF)V`
     */
    void render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6);
};


/**
 * Classpath: `net.minecraft.client.model.ModelRenderer`
 * Package name: `net.minecraft.client.model`
 */
class ModelRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelRenderer";
public:
    STATICINITIALIZE;

    ModelRenderer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(F)V`
     */
    void compileDisplayList(float arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(II)Lnet.minecraft.client.model.ModelRenderer;`
     */
    ModelRenderer setTextureOffset(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(FFF)V`
     */
    void setRotationPoint(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(F)V`
     */
    void renderWithRotation(float arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(II)Lnet.minecraft.client.model.ModelRenderer;`
     */
    ModelRenderer setTextureSize(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(F)V`
     */
    void render(float arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(FFFIIIF)V`
     */
    void addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5, float arg6);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(FFFIIIZ)Lnet.minecraft.client.model.ModelRenderer;`
     */
    ModelRenderer addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(FFFIII)Lnet.minecraft.client.model.ModelRenderer;`
     */
    ModelRenderer addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(Ljava.lang.String;FFFIII)Lnet.minecraft.client.model.ModelRenderer;`
     */
    ModelRenderer addBox(String arg0, float arg1, float arg2, float arg3, int arg4, int arg5, int arg6);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(F)V`
     */
    void postRender(float arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelRenderer`
     * Signature: `(Lnet.minecraft.client.model.ModelRenderer;)V`
     */
    void addChild(ModelRenderer arg0);
};


/**
 * Classpath: `net.minecraft.client.model.TextureOffset`
 * Package name: `net.minecraft.client.model`
 */
class TextureOffset : public Object {
protected:
    const inline static char *className = "net.minecraft.client.model.TextureOffset";
public:
    STATICINITIALIZE;

    TextureOffset(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.client.renderer.entity.RendererLivingEntity`
 * Package name: `net.minecraft.client.renderer.entity`
 */
class RendererLivingEntity : public Render {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RendererLivingEntity";
public:
    STATICINITIALIZE;

    RendererLivingEntity(jobject object) : Render(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool canRenderName(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `()Lnet.minecraft.client.model.ModelBase;`
     */
    ModelBase getMainModel();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;F)V`
     */
    void preRenderCallback(EntityLivingBase arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;DDD)V`
     */
    void renderLivingAt(EntityLivingBase arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;FFF)V`
     */
    void rotateCorpse(EntityLivingBase arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)F`
     */
    float getDeathMaxRotation(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.client.renderer.entity.layers.LayerRenderer;)Z`
     */
    bool removeLayer(LayerRenderer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(FFF)F`
     */
    float interpolateRotation(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;F)F`
     */
    float handleRotationFloat(EntityLivingBase arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool setScoreTeamColor(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `()V`
     */
    void unsetScoreTeamColor();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;F)Z`
     */
    bool setDoRenderBrightness(EntityLivingBase arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `()V`
     */
    void unsetBrightness();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;FFFFFFF)V`
     */
    void renderLayers(EntityLivingBase arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;FZ)Z`
     */
    bool setBrightness(EntityLivingBase arg0, float arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;FF)I`
     */
    int getColorMultiplier(EntityLivingBase arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;F)F`
     */
    float getSwingProgress(EntityLivingBase arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;FFFFFF)V`
     */
    void renderModel(EntityLivingBase arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Z)V`
     */
    void setRenderOutlines(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;DDD)V`
     */
    void renderName(EntityLivingBase arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;DDDFF)V`
     */
    void doRender(EntityLivingBase arg0, double arg1, double arg2, double arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `(Lnet.minecraft.client.renderer.entity.layers.LayerRenderer;)Z`
     */
    bool addLayer(LayerRenderer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RendererLivingEntity`
     * Signature: `()V`
     */
    void transformHeldFull3DItemLayer();
};


/**
 * Classpath: `net.minecraft.client.renderer.entity.layers.LayerRenderer`
 * Package name: `net.minecraft.client.renderer.entity.layers`
 */
class LayerRenderer : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.layers.LayerRenderer";
public:
    STATICINITIALIZE;

    LayerRenderer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: `net.minecraft.util.FrameTimer`
 * Package name: `net.minecraft.util`
 */
class FrameTimer : public Object {
protected:
    const inline static char *className = "net.minecraft.util.FrameTimer";
public:
    STATICINITIALIZE;

    FrameTimer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.FrameTimer`
     * Signature: `(I)I`
     */
    int func_181751_b(int arg0);

    /**
     * Declaring class: `net.minecraft.util.FrameTimer`
     * Signature: `(JI)I`
     */
    int func_181748_a(long arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.util.FrameTimer`
     * Signature: `()I`
     */
    int func_181749_a();

    /**
     * Declaring class: `net.minecraft.util.FrameTimer`
     * Signature: `()I`
     */
    int func_181750_b();

    /**
     * Declaring class: `net.minecraft.util.FrameTimer`
     * Signature: `(J)V`
     */
    void func_181747_a(long arg0);
};


/**
 * Classpath: `net.minecraft.client.gui.Gui`
 * Package name: `net.minecraft.client.gui`
 */
class Gui : public Object {
protected:
    const inline static char *className = "net.minecraft.client.gui.Gui";
public:
    STATICINITIALIZE;

    Gui(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IIII)V`
     */
    void drawHorizontalLine(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IIII)V`
     */
    void drawVerticalLine(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(Lnet.minecraft.client.gui.FontRenderer;Ljava.lang.String;III)V`
     */
    void drawCenteredString(FontRenderer arg0, String arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IIIIII)V`
     */
    void drawTexturedModalRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IILnet.minecraft.client.renderer.texture.TextureAtlasSprite;II)V`
     */
    void drawTexturedModalRect(int arg0, int arg1, TextureAtlasSprite arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(FFIIII)V`
     */
    void drawTexturedModalRect(float arg0, float arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IIIIII)V`
     */
    void drawGradientRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IIIII)V`
     */
    static void drawRect(int arg0, int arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(Lnet.minecraft.client.gui.FontRenderer;Ljava.lang.String;III)V`
     */
    void drawString(FontRenderer arg0, String arg1, int arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IIFFIIFF)V`
     */
    static void drawModalRectWithCustomSizedTexture(int arg0, int arg1, float arg2, float arg3, int arg4, int arg5, float arg6, float arg7);

    /**
     * Declaring class: `net.minecraft.client.gui.Gui`
     * Signature: `(IIFFIIIIFF)V`
     */
    static void drawScaledCustomSizeModalRect(int arg0, int arg1, float arg2, float arg3, int arg4, int arg5, int arg6, int arg7, float arg8, float arg9);
};


/**
 * Classpath: `net.minecraft.client.shader.Framebuffer`
 * Package name: `net.minecraft.client.shader`
 */
class Framebuffer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.shader.Framebuffer";
public:
    STATICINITIALIZE;

    Framebuffer(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `()V`
     */
    void deleteFramebuffer();

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `(II)V`
     */
    void createFramebuffer(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `()V`
     */
    void checkFramebufferComplete();

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `()V`
     */
    void unbindFramebufferTexture();

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `()V`
     */
    void framebufferClear();

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `(I)V`
     */
    void setFramebufferFilter(int arg0);

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `()V`
     */
    void bindFramebufferTexture();

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `(IIZ)V`
     */
    void framebufferRenderExt(int arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `(FFFF)V`
     */
    void setFramebufferColor(float arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `(Z)V`
     */
    void bindFramebuffer(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `()V`
     */
    void unbindFramebuffer();

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `(II)V`
     */
    void framebufferRender(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.shader.Framebuffer`
     * Signature: `(II)V`
     */
    void createBindFramebuffer(int arg0, int arg1);
};


/**
 * Classpath: `net.minecraft.client.audio.MusicTicker`
 * Package name: `net.minecraft.client.audio`
 */
class MusicTicker : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.MusicTicker";
public:
    STATICINITIALIZE;

    MusicTicker(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.audio.MusicTicker`
     * Signature: `(Lnet.minecraft.client.audio.MusicTicker$MusicType;)V`
     */
    void func_181558_a(MusicTicker_MusicType arg0);

    /**
     * Declaring class: `net.minecraft.client.audio.MusicTicker`
     * Signature: `()V`
     */
    void func_181557_a();
};


/**
 * Classpath: `net.minecraft.util.Session`
 * Package name: `net.minecraft.util`
 */
class Session : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Session";
public:
    STATICINITIALIZE;

    Session(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.util.Session`
     * Signature: `()Lnet.minecraft.util.Session$Type;`
     */
    Session_Type getSessionType();

    /**
     * Declaring class: `net.minecraft.util.Session`
     * Signature: `()Ljava.lang.String;`
     */
    String getPlayerID();

    /**
     * Declaring class: `net.minecraft.util.Session`
     * Signature: `()Ljava.lang.String;`
     */
    String getUsername();

    /**
     * Declaring class: `net.minecraft.util.Session`
     * Signature: `()Ljava.lang.String;`
     */
    String getSessionID();

    /**
     * Declaring class: `net.minecraft.util.Session`
     * Signature: `()Ljava.lang.String;`
     */
    String getToken();

    /**
     * Declaring class: `net.minecraft.util.Session`
     * Signature: `()Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getProfile();
};


/**
 * Classpath: `net.minecraft.util.Session$Type`
 * Enclosing class: `net.minecraft.util.Session`
 * Package name: `net.minecraft.util`
 */
class Session_Type : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.Session$Type";
public:
    STATICINITIALIZE;

    Session_Type(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.util.Session$Type`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.Session$Type;`
     */
    static Session_Type setSessionType(String arg0);

    /**
     * Declaring class: `net.minecraft.util.Session$Type`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.Session$Type;`
     */
    static Session_Type valueOf(String arg0);
};


/**
 * Classpath: `net.minecraft.client.Minecraft$Test`
 * Enclosing class: `net.minecraft.client.Minecraft`
 * Package name: `net.minecraft.client`
 */
class Minecraft_Test : public Object {
protected:
    const inline static char *className = "net.minecraft.client.Minecraft$Test";
public:
    STATICINITIALIZE;

    Minecraft_Test(jobject object) : Object(object) {}

};


/**
 * Classpath: `net.minecraft.client.Minecraft`
 * Package name: `net.minecraft.client`
 */
class Minecraft : public Object {
protected:
    const inline static char *className = "net.minecraft.client.Minecraft";
public:
    STATICINITIALIZE;

    Minecraft(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.entity.Entity;`
     */
    Entity getRenderViewEntity();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.network.NetHandlerPlayClient;`
     */
    NetHandlerPlayClient getNetHandler();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lcom.google.common.util.concurrent.ListenableFuture;`
     */
    ListenableFuture scheduleResourcesRefresh();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Ljava.lang.String;`
     */
    String func_181538_aA();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.profiler.PlayerUsageSnooper;`
     */
    PlayerUsageSnooper getPlayerUsageSnooper();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()I`
     */
    static int getGLMaximumTextureSize();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.multiplayer.ServerData;`
     */
    ServerData getCurrentServerData();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isIntegratedServerRunning();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.server.integrated.IntegratedServer;`
     */
    IntegratedServer getIntegratedServer();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    static void stopIntegratedServer();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isFullScreen();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lcom.mojang.authlib.properties.PropertyMap;`
     */
    PropertyMap getTwitchDetails();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lcom.mojang.authlib.properties.PropertyMap;`
     */
    PropertyMap func_181037_M();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lcom.mojang.authlib.minecraft.MinecraftSessionService;`
     */
    MinecraftSessionService getSessionService();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.renderer.texture.TextureManager;`
     */
    TextureManager getTextureManager();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.resources.IResourceManager;`
     */
    IResourceManager getResourceManager();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.resources.ResourcePackRepository;`
     */
    ResourcePackRepository getResourcePackRepository();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.resources.LanguageManager;`
     */
    LanguageManager getLanguageManager();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.renderer.texture.TextureMap;`
     */
    TextureMap getTextureMapBlocks();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isJava64bit();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.audio.SoundHandler;`
     */
    SoundHandler getSoundHandler();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.audio.MusicTicker$MusicType;`
     */
    MusicTicker_MusicType getAmbientMusicType();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.stream.IStream;`
     */
    IStream getTwitchStream();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.resources.SkinManager;`
     */
    SkinManager getSkinManager();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void setRenderViewEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.renderer.BlockRendererDispatcher;`
     */
    BlockRendererDispatcher getBlockRendererDispatcher();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.renderer.entity.RenderManager;`
     */
    RenderManager getRenderManager();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.renderer.entity.RenderItem;`
     */
    RenderItem getRenderItem();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.renderer.ItemRenderer;`
     */
    ItemRenderer getItemRenderer();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()I`
     */
    static int getDebugFPS();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.util.FrameTimer;`
     */
    FrameTimer func_181539_aj();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Ljava.util.Map;`
     */
    static Map getSessionInfo();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool func_181540_al();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Z)V`
     */
    void func_181537_a(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void displayInGameMenu();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Z)V`
     */
    void sendClickBlockToController(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isGamePaused();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()J`
     */
    static long getSystemTime();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)V`
     */
    void displayCrashReport(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void runGameLoop();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.client.gui.GuiScreen;)V`
     */
    void displayGuiScreen(GuiScreen arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void shutdownMinecraftApplet();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void startTimerHackThread();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void setWindowIcon();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     * Throws: `org.lwjgl.LWJGLException`
     */
    void setInitialDisplayMode();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     * Throws: `org.lwjgl.LWJGLException`
     */
    void createDisplay();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void refreshResources();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.client.renderer.texture.TextureManager;)V`
     * Throws: `org.lwjgl.LWJGLException`
     */
    void drawSplashScreen(TextureManager arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Ljava.lang.String;)V`
     */
    void checkGLError(String arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void toggleFullscreen();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     * Throws: `org.lwjgl.LWJGLException`
     */
    void updateDisplayMode();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Ljava.io.InputStream;)Ljava.nio.ByteBuffer;`
     * Throws: `java.io.IOException`
     */
    ByteBuffer readImageToBuffer(InputStream arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.shader.Framebuffer;`
     */
    Framebuffer getFramebuffer();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.Minecraft;`
     */
    static Minecraft getMinecraft();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(IIIIIIIIII)V`
     */
    void func_181536_a(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void updateDisplay();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.world.storage.ISaveFormat;`
     */
    ISaveFormat getSaveLoader();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void setIngameNotInFocus();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void setIngameFocus();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(J)V`
     */
    void displayDebugInfo(long arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isSingleplayer();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isFramerateLimitBelowMax();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()I`
     */
    int getLimitFramerate();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void checkWindowResize();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(I)V`
     */
    void updateDebugProfilerName(int arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void rightClickMouse();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void updateFramebufferSize();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.audio.MusicTicker;`
     */
    MusicTicker func_181535_r();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void dispatchKeypresses();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void middleClickMouse();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Lnet.minecraft.world.WorldSettings;)V`
     */
    void launchIntegratedServer(String arg0, String arg1, WorldSettings arg2);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.client.multiplayer.ServerData;)V`
     */
    void setServerData(ServerData arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(I)V`
     */
    void setDimensionAndSpawnPlayer(int arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    static bool isGuiEnabled();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    static bool isFancyGraphicsEnabled();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    static bool isAmbientOcclusionEnabled();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.item.Item;ILnet.minecraft.tileentity.TileEntity;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack func_181036_a(Item arg0, int arg1, TileEntity arg2);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isDemo();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    static bool isJvm64bit();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     * Throws: `org.lwjgl.LWJGLException, java.io.IOException`
     */
    void startGame();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Ljava.lang.String;`
     */
    String getVersion();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void initStream();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Z`
     */
    bool isUnicode();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Ljava.net.Proxy;`
     */
    Proxy getProxy();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)V`
     */
    void crashed(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.client.multiplayer.WorldClient;)V`
     */
    void loadWorld(WorldClient arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.client.multiplayer.WorldClient;Ljava.lang.String;)V`
     */
    void loadWorld(WorldClient arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void runTick();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void clickMouse();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.util.Session;`
     */
    Session getSession();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReport;`
     */
    CrashReport addGraphicsAndWorldToCrashReport(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void registerMetadataSerializers();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void run();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void shutdown();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()Lnet.minecraft.client.Minecraft$Test;`
     */
    Minecraft_Test test();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `()V`
     */
    void freeMemory();

    /**
     * Declaring class: `net.minecraft.client.Minecraft`
     * Signature: `(II)V`
     */
    void resize(int arg0, int arg1);
};


/**
 * Classpath: `net.minecraft.entity.Entity`
 * Package name: `net.minecraft.entity`
 */
class Entity : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.Entity";
public:
    STATICINITIALIZE;

    Entity(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void onKillCommand();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DZLnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;)V`
     */
    void updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool handleWaterMovement();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void onEntityUpdate();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isImmuneToFire();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Z)V`
     */
    void setInvisible(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void setBeenAttacked();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void performHurtAnimation();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)V`
     */
    void setPositionAndUpdate(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)Z`
     */
    bool isOffsetPositionInLiquid(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(FF)V`
     */
    void setRotation(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void applyEntityCollision(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDDFFIZ)V`
     */
    void setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(FF)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getVectorForRotation(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool canBeCollidedWith();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool canBePushed();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()F`
     */
    float getRotationYawHead();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(F)V`
     */
    void setRotationYawHead(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(F)V`
     */
    void func_181013_g(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Ljava.util.UUID;`
     */
    UUID getUniqueID();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDDFF)V`
     */
    void setLocationAndAngles(double arg0, double arg1, double arg2, float arg3, float arg4);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isEntityAlive();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)V`
     */
    void setPosition(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()I`
     */
    int getMaxInPortalTime();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Ljava.lang.String;`
     */
    String getSwimSound();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Ljava.lang.String;`
     */
    String getSplashSound();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()I`
     */
    int getPortalCooldown();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()F`
     */
    float getEyeHeight();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(B)V`
     */
    void handleStatusUpdate(byte arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void updateRidden();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void mountEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Z)V`
     */
    void setSneaking(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isSprinting();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB getEntityBoundingBox();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onCollideWithPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;I)V`
     */
    void addToPlayerScore(Entity arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.block.material.Material;)Z`
     */
    bool isInsideOfMaterial(Material arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.DamageSource;)Z`
     */
    bool isEntityInvulnerable(DamageSource arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool interactFirst(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool canAttackWithItem();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool hitByEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)V`
     */
    void addVelocity(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Z)V`
     */
    void setSprinting(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void resetHeight();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)V`
     */
    void onKillEntity(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool canTriggerWalking();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(ILnet.minecraft.item.ItemStack;)V`
     */
    void setCurrentItemOrArmor(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool isInvisibleToPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isInvisible();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isPushedByWater();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.event.HoverEvent;`
     */
    HoverEvent getHoverEvent();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(ILnet.minecraft.item.ItemStack;)Z`
     */
    bool replaceItemInInventory(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isOutsideBorder();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)V`
     */
    void setEntityBoundingBox(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(I)V`
     */
    void travelToDimension(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void spawnRunningParticles();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void setOnFireFromLava();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Z`
     */
    bool isLiquidPresentInAABB(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void resetPositionToBB();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V`
     */
    void playStepSound(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void doBlockCollisions();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.crash.CrashReportCategory;)V`
     */
    void addEntityCrashInfo(CrashReportCategory arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(I)V`
     */
    void dealFireDamage(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB getCollisionBoundingBox();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void createRunningParticles();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(F)I`
     */
    int getBrightnessForRender(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(F)F`
     */
    float getBrightness(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDDFF)V`
     */
    void setPositionAndRotation(double arg0, double arg1, double arg2, float arg3, float arg4);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.BlockPos;FF)V`
     */
    void moveToBlockPosAndAngles(BlockPos arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)F`
     */
    float getDistanceToEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)D`
     */
    double getDistanceSq(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.BlockPos;)D`
     */
    double getDistanceSq(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.BlockPos;)D`
     */
    double getDistanceSqToCenter(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)D`
     */
    double getDistance(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)D`
     */
    double getDistanceSqToEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getPositionEyes(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)Z`
     */
    bool isInRangeToRender3d(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(D)Z`
     */
    bool isInRangeToRenderDist(double arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Z`
     */
    bool writeMountToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Ljava.lang.String;`
     */
    String getEntityString();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)Z`
     */
    bool writeToNBTOptional(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `([D)Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList newDoubleNBTList(arr_D arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `([F)Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList newFloatNBTList(arr_F arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Ljava.lang.String;`
     */
    String getCustomNameTag();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool getAlwaysRenderNameTag();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setCustomNameTag(String arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Z)V`
     */
    void setAlwaysRenderNameTag(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool shouldSetPosAfterLoading();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void onChunkLoad();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.item.Item;IF)Lnet.minecraft.entity.item.EntityItem;`
     */
    EntityItem dropItemWithOffset(Item arg0, int arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.item.ItemStack;F)Lnet.minecraft.entity.item.EntityItem;`
     */
    EntityItem entityDropItem(ItemStack arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB getCollisionBox(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void updateRiderPosition();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()D`
     */
    double getMountedYOffset();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()F`
     */
    float getCollisionBorderSize();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void func_181015_d(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)V`
     */
    void setVelocity(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.effect.EntityLightningBolt;)V`
     */
    void onStruckByLightning(EntityLightningBolt arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)Z`
     */
    bool pushOutOfBlocks(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool hasCustomName();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool isEntityEqual(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void copyLocationAndAnglesFrom(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void copyDataFromOld(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.world.Explosion;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)F`
     */
    float getExplosionResistance(Explosion arg0, World arg1, BlockPos arg2, IBlockState arg3);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.world.Explosion;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;F)Z`
     */
    bool verifyExplosion(Explosion arg0, World arg1, BlockPos arg2, IBlockState arg3, float arg4);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()I`
     */
    int getMaxFallHeight();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.util.Vec3;`
     */
    Vec3 func_181014_aG();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing func_181012_aH();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool canRenderOnFire();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(I)V`
     */
    void onDataWatcherUpdate(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing getHorizontalFacing();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)Z`
     */
    bool isSpectatedByPlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Z)V`
     */
    void setOutsideBorder(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.command.CommandResultStats;`
     */
    CommandResultStats getCommandStats();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void func_174817_o(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getNBTTagCompound();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void clientUpdateEntityNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isImmuneToExplosions();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.Entity;)V`
     */
    void applyEnchantments(EntityLivingBase arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isEntityInsideOpaqueBlock();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void preparePlayerToSpawn();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()I`
     */
    int getEntityId();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.entity.DataWatcher;`
     */
    DataWatcher getDataWatcher();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(I)V`
     */
    void setEntityId(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(FF)V`
     */
    void setAngles(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(IZ)V`
     */
    void setFlag(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isSilent();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Z)V`
     */
    void setSilent(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.world.World;)V`
     */
    void setWorld(World arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DF)Lnet.minecraft.util.MovingObjectPosition;`
     */
    MovingObjectPosition rayTrace(double arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(I)Z`
     */
    bool getFlag(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isEating();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.Vec3;)Z`
     */
    bool interactAt(EntityPlayer arg0, Vec3 arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Z)V`
     */
    void setEating(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isBurning();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void extinguish();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Ljava.lang.String;FF)V`
     */
    void playSound(String arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isSneaking();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.item.Item;I)Lnet.minecraft.entity.item.EntityItem;`
     */
    EntityItem dropItem(Item arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()D`
     */
    double getYOffset();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isInWater();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(I)V`
     */
    void setFire(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void setDead();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isRiding();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(FF)V`
     */
    void fall(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void setInWeb();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()I`
     */
    int getAir();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(I)V`
     */
    void setAir(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isWet();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()V`
     */
    void kill();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool isInLava();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(FFF)V`
     */
    void moveFlying(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(DDD)V`
     */
    void moveEntity(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Lnet.minecraft.util.Vec3;`
     */
    Vec3 getLookVec();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getLook(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool doesEntityNotTriggerPressurePlate();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Z`
     */
    bool getAlwaysRenderNameTagForRender();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.entity.Entity`
     * Signature: `(FF)V`
     */
    void setSize(float arg0, float arg1);
};


/**
 * Classpath: `net.minecraft.block.Block`
 * Package name: `net.minecraft.block`
 */
class Block : public Object {
protected:
    const inline static char *className = "net.minecraft.block.Block";
public:
    STATICINITIALIZE;

    Block(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isNormalCube();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V`
     */
    void randomDisplayTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.block.Block;`
     */
    Block setUnlocalizedName(String arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Ljava.lang.String;`
     */
    String getUnlocalizedName();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.creativetab.CreativeTabs;)Lnet.minecraft.block.Block;`
     */
    Block setCreativeTab(CreativeTabs arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()I`
     */
    int getLightOpacity();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()I`
     */
    int getLightValue();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool hasComparatorInputOverride();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getDefaultState();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;I)V`
     */
    void dropBlockAsItem(World arg0, BlockPos arg1, IBlockState arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.block.Block;)V`
     */
    void onNeighborBlockChange(World arg0, BlockPos arg1, IBlockState arg2, Block arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool getUseNeighborBrightness();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;Z)Z`
     */
    bool canCollideCheck(IBlockState arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.MovingObjectPosition;`
     */
    MovingObjectPosition collisionRayTrace(World arg0, BlockPos arg1, Vec3 arg2, Vec3 arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.AxisAlignedBB;Ljava.util.List;Lnet.minecraft.entity.Entity;)V`
     */
    void addCollisionBoxesToList(World arg0, BlockPos arg1, IBlockState arg2, AxisAlignedBB arg3, List arg4, Entity arg5);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.Entity;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;`
     */
    Vec3 modifyAcceleration(World arg0, BlockPos arg1, Entity arg2, Vec3 arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(ILjava.lang.String;Lnet.minecraft.block.Block;)V`
     */
    static void registerBlock(int arg0, String arg1, Block arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(ILnet.minecraft.util.ResourceLocation;Lnet.minecraft.block.Block;)V`
     */
    static void registerBlock(int arg0, ResourceLocation arg1, Block arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.util.EnumWorldBlockLayer;`
     */
    EnumWorldBlockLayer getBlockLayer();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getActualState(IBlockState arg0, IBlockAccess arg1, BlockPos arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.block.Block;`
     */
    static Block getBlockFromName(String arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Ljava.lang.String;`
     */
    String getLocalizedName();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canPlaceBlockAt(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isReplaceable(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.EnumFacing;)I`
     */
    int getStrongPower(IBlockAccess arg0, BlockPos arg1, IBlockState arg2, EnumFacing arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.EnumFacing;)I`
     */
    int getWeakPower(IBlockAccess arg0, BlockPos arg1, IBlockState arg2, EnumFacing arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;II)Z`
     */
    bool onBlockEventReceived(World arg0, BlockPos arg1, IBlockState arg2, int arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(I)Lnet.minecraft.block.Block;`
     */
    static Block getBlockById(int arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(I)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getStateFromMeta(int arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isFullBlock();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isTranslucent();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.block.material.MapColor;`
     */
    MapColor getMapColor(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(FFFFFF)V`
     */
    void setBlockBounds(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isOpaqueCube();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.block.state.BlockState;`
     */
    BlockState createBlockState();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)V`
     */
    void setDefaultState(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.Block$SoundType;)Lnet.minecraft.block.Block;`
     */
    Block setStepSound(Block_SoundType arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(I)Lnet.minecraft.block.Block;`
     */
    Block setLightOpacity(int arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(F)Lnet.minecraft.block.Block;`
     */
    Block setLightLevel(float arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(F)Lnet.minecraft.block.Block;`
     */
    Block setResistance(float arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool canProvidePower();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(F)Lnet.minecraft.block.Block;`
     */
    Block setHardness(float arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.block.Block;`
     */
    Block setBlockUnbreakable();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)F`
     */
    float getBlockHardness(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Z)Lnet.minecraft.block.Block;`
     */
    Block setTickRandomly(bool arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool hasTileEntity();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)I`
     */
    int getMixedBrightnessForBlock(IBlockAccess arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z`
     */
    bool shouldSideBeRendered(IBlockAccess arg0, BlockPos arg1, EnumFacing arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z`
     */
    bool isBlockSolid(IBlockAccess arg0, BlockPos arg1, EnumFacing arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB getSelectedBoundingBox(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isCollidable();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V`
     */
    void onBlockDestroyedByPlayer(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V`
     */
    void onBlockAdded(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Ljava.util.Random;)I`
     */
    int quantityDropped(Random arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;I)Lnet.minecraft.item.Item;`
     */
    Item getItemDropped(IBlockState arg0, Random arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;FI)V`
     */
    void dropBlockAsItemWithChance(World arg0, BlockPos arg1, IBlockState arg2, float arg3, int arg4);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(ILjava.util.Random;)I`
     */
    int quantityDroppedWithBonus(int arg0, Random arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)I`
     */
    int damageDropped(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.item.ItemStack;)V`
     */
    static void spawnAsEntity(World arg0, BlockPos arg1, ItemStack arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;I)V`
     */
    void dropXpOnBlockBreak(World arg0, BlockPos arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)V`
     */
    void setBlockBoundsBasedOnState(IBlockAccess arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isVecInsideYZBounds(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isVecInsideXZBounds(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.util.Vec3;)Z`
     */
    bool isVecInsideXYBounds(Vec3 arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z`
     */
    bool canPlaceBlockOnSide(World arg0, BlockPos arg1, EnumFacing arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.EnumFacing;FFF)Z`
     */
    bool onBlockActivated(World arg0, BlockPos arg1, IBlockState arg2, EntityPlayer arg3, EnumFacing arg4, float arg5, float arg6, float arg7);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;FFFILnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState onBlockPlaced(World arg0, BlockPos arg1, EnumFacing arg2, float arg3, float arg4, float arg5, int arg6, EntityLivingBase arg7);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onBlockClicked(World arg0, BlockPos arg1, EntityPlayer arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()D`
     */
    double getBlockBoundsMinX();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()D`
     */
    double getBlockBoundsMaxX();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()D`
     */
    double getBlockBoundsMinY();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()D`
     */
    double getBlockBoundsMaxY();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()D`
     */
    double getBlockBoundsMinZ();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()D`
     */
    double getBlockBoundsMaxZ();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()I`
     */
    int getBlockColor();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)I`
     */
    int getRenderColor(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)I`
     */
    int colorMultiplier(IBlockAccess arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;I)I`
     */
    int colorMultiplier(IBlockAccess arg0, BlockPos arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void harvestBlock(World arg0, EntityPlayer arg1, BlockPos arg2, IBlockState arg3, TileEntity arg4);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool canSilkHarvest();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack createStackedBlock(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.item.ItemStack;)V`
     */
    void onBlockPlacedBy(World arg0, BlockPos arg1, IBlockState arg2, EntityLivingBase arg3, ItemStack arg4);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool getEnableStats();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.block.Block;`
     */
    Block disableStats();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()I`
     */
    int getMobilityFlag();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.item.Item;Lnet.minecraft.creativetab.CreativeTabs;Ljava.util.List;)V`
     */
    void getSubBlocks(Item arg0, CreativeTabs arg1, List arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.creativetab.CreativeTabs;`
     */
    CreativeTabs getCreativeTabToDisplayOn();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onBlockHarvested(World arg0, BlockPos arg1, IBlockState arg2, EntityPlayer arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.Explosion;)Z`
     */
    bool canDropFromExplosion(Explosion arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool isAssociatedBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)I`
     */
    int getComparatorInputOverride(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getStateForEntityRender(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.block.Block$EnumOffsetType;`
     */
    Block_EnumOffsetType getOffsetType();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()V`
     */
    static void registerBlocks();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.Block;)I`
     */
    static int getIdFromBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(I)Lnet.minecraft.block.state.IBlockState;`
     */
    static IBlockState getStateById(int arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)V`
     */
    void fillWithRain(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool getTickRandomly();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool requiresUpdates();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isBlockNormalCube();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.block.state.BlockState;`
     */
    BlockState getBlockState();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Lnet.minecraft.block.material.Material;`
     */
    Material getMaterial();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool func_181623_g();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityCollidedWithBlock(World arg0, BlockPos arg1, Entity arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityCollidedWithBlock(World arg0, BlockPos arg1, IBlockState arg2, Entity arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.Entity;F)V`
     */
    void onFallenUpon(World arg0, BlockPos arg1, Entity arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB getCollisionBoundingBox(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()I`
     */
    int getRenderType();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)I`
     */
    int getMetaFromState(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isVisuallyOpaque();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.entity.Entity;)F`
     */
    float getExplosionResistance(Entity arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isFlowerPot();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.item.Item;)Lnet.minecraft.block.Block;`
     */
    static Block getBlockFromItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)I`
     */
    int getDamageValue(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.entity.Entity;)V`
     */
    void onLanded(World arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Z`
     */
    bool isFullCube();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;Lnet.minecraft.item.ItemStack;)Z`
     */
    bool canReplace(World arg0, BlockPos arg1, EnumFacing arg2, ItemStack arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isPassable(IBlockAccess arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;)I`
     */
    int tickRate(World arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V`
     */
    void breakBlock(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)I`
     */
    static int getStateId(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V`
     */
    void randomTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.block.Block;Lnet.minecraft.block.Block;)Z`
     */
    static bool isEqualTo(Block arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V`
     */
    void updateTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)F`
     */
    float getPlayerRelativeBlockHardness(EntityPlayer arg0, World arg1, BlockPos arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.Explosion;)V`
     */
    void onBlockDestroyedByExplosion(World arg0, BlockPos arg1, Explosion arg2);

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()V`
     */
    void setBlockBoundsForItemRender();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()F`
     */
    float getAmbientOcclusionLightValue();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.block.Block`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.item.Item;`
     */
    Item getItem(World arg0, BlockPos arg1);
};


/**
 * Classpath: `net.minecraft.world.World`
 * Package name: `net.minecraft.world`
 */
class World : public Object {
protected:
    const inline static char *className = "net.minecraft.world.World";
public:
    STATICINITIALIZE;

    World(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.border.WorldBorder;`
     */
    WorldBorder getWorldBorder();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;B)V`
     */
    void setEntityState(Entity arg0, byte arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;`
     */
    List func_147461_a(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.chunk.Chunk;`
     */
    Chunk getChunkFromBlockCoords(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;Lcom.google.common.base.Predicate;)Ljava.util.List;`
     */
    List getEntitiesInAABBexcluding(Entity arg0, AxisAlignedBB arg1, Predicate arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;Z)Lnet.minecraft.util.MovingObjectPosition;`
     */
    MovingObjectPosition rayTraceBlocks(Vec3 arg0, Vec3 arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;ZZZ)Lnet.minecraft.util.MovingObjectPosition;`
     */
    MovingObjectPosition rayTraceBlocks(Vec3 arg0, Vec3 arg1, bool arg2, bool arg3, bool arg4);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.MovingObjectPosition;`
     */
    MovingObjectPosition rayTraceBlocks(Vec3 arg0, Vec3 arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.biome.WorldChunkManager;`
     */
    WorldChunkManager getWorldChunkManager();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.chunk.IChunkProvider;`
     */
    IChunkProvider createChunkProvider();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.Block;`
     */
    Block getGroundAboveSeaLevel(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()I`
     */
    int func_181545_F();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(IIZ)Z`
     */
    bool isChunkLoaded(int arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(II)Lnet.minecraft.world.chunk.Chunk;`
     */
    Chunk getChunkFromChunkCoords(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void markBlockForUpdate(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool setBlockToAir(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Z)Z`
     */
    bool destroyBlock(BlockPos arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(IIII)V`
     */
    void markBlocksDirtyVertical(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool checkLightFor(EnumSkyBlock arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V`
     */
    void notifyBlockOfStateChange(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)Z`
     */
    bool isBlockTickPending(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canBlockSeeSky(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getLightFromNeighbors(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(II)I`
     */
    int getChunksLowestHorizon(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)I`
     */
    int getLightFromNeighborsFor(EnumSkyBlock arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)I`
     */
    int getLightFor(EnumSkyBlock arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;I)V`
     */
    void setLightFor(EnumSkyBlock arg0, BlockPos arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void notifyLightSet(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(DDDLjava.lang.String;FF)V`
     */
    void playSoundEffect(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool addWeatherEffect(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityAdded(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityRemoved(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.IWorldAccess;)V`
     */
    void addWorldAccess(IWorldAccess arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.IWorldAccess;)V`
     */
    void removeWorldAccess(IWorldAccess arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.border.WorldBorder;Lnet.minecraft.entity.Entity;)Z`
     */
    bool isInsideBorder(WorldBorder arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)F`
     */
    float getCelestialAngle(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)F`
     */
    float getRainStrength(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)F`
     */
    float getThunderStrength(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)F`
     */
    float getSunBrightness(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getSkyColor(Entity arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()J`
     */
    long getWorldTime();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()I`
     */
    int getMoonPhase();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()F`
     */
    float getCurrentMoonPhaseFactor();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)F`
     */
    float getCelestialAngleRadians(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getCloudColour(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getFogColor(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getPrecipitationHeight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)F`
     */
    float getStarBrightness(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;I)V`
     */
    void scheduleUpdate(BlockPos arg0, Block arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V`
     */
    void updateBlockTick(BlockPos arg0, Block arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V`
     */
    void scheduleBlockUpdate(BlockPos arg0, Block arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void updateEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void removeTileEntity(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.tileentity.TileEntity;)Z`
     */
    bool addTileEntity(TileEntity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.util.Collection;)V`
     */
    void addTileEntities(Collection arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Z`
     */
    bool checkNoEntityCollision(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.entity.Entity;)Z`
     */
    bool checkNoEntityCollision(AxisAlignedBB arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Z`
     */
    bool checkBlockCollision(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.block.material.Material;)Z`
     */
    bool isAABBInMaterial(AxisAlignedBB arg0, Material arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFZ)Lnet.minecraft.world.Explosion;`
     */
    Explosion createExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFZZ)Lnet.minecraft.world.Explosion;`
     */
    Explosion newExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void updateWeather();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void calculateInitialWeather();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Z`
     */
    bool isThundering();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()I`
     */
    int getRenderDistanceChunks();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(IILnet.minecraft.world.chunk.Chunk;)V`
     */
    void playMoodSoundAndCheckLight(int arg0, int arg1, Chunk arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(DDDD)Lnet.minecraft.entity.player.EntityPlayer;`
     */
    EntityPlayer getClosestPlayer(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void updateBlocks();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Ljava.util.Random;)V`
     */
    void forceBlockUpdateTick(Block arg0, BlockPos arg1, Random arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canBlockFreezeWater(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Z)Z`
     */
    bool canBlockFreeze(BlockPos arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canBlockFreezeNoWater(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.EnumSkyBlock;)I`
     */
    int getRawLight(BlockPos arg0, EnumSkyBlock arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Z)Z`
     */
    bool tickUpdates(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.chunk.Chunk;Z)Ljava.util.List;`
     */
    List getPendingBlockUpdates(Chunk arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.gen.structure.StructureBoundingBox;Z)Ljava.util.List;`
     */
    List func_175712_a(StructureBoundingBox arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.Class;Lcom.google.common.base.Predicate;)Ljava.util.List;`
     */
    List getEntities(Class arg0, Predicate arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(I)Lnet.minecraft.entity.Entity;`
     */
    Entity getEntityByID(int arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Ljava.util.List;`
     */
    List getLoadedEntityList();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void markChunkDirty(BlockPos arg0, TileEntity arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.Class;)I`
     */
    int countEntities(Class arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.util.Collection;)V`
     */
    void loadEntities(Collection arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.util.Collection;)V`
     */
    void unloadEntities(Collection arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;ZLnet.minecraft.util.EnumFacing;Lnet.minecraft.entity.Entity;Lnet.minecraft.item.ItemStack;)Z`
     */
    bool canBlockBePlaced(Block arg0, BlockPos arg1, bool arg2, EnumFacing arg3, Entity arg4, ItemStack arg5);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(I)V`
     */
    void func_181544_b(int arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z`
     */
    bool isSidePowered(BlockPos arg0, EnumFacing arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)I`
     */
    int getRedstonePower(BlockPos arg0, EnumFacing arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isBlockPowered(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;D)Lnet.minecraft.entity.player.EntityPlayer;`
     */
    EntityPlayer getClosestPlayerToEntity(Entity arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(DDDD)Z`
     */
    bool isAnyPlayerWithinRangeAt(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayer;`
     */
    EntityPlayer getPlayerEntityByName(String arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.util.UUID;)Lnet.minecraft.entity.player.EntityPlayer;`
     */
    EntityPlayer getPlayerEntityByUUID(UUID arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     * Throws: `net.minecraft.world.MinecraftException`
     */
    void checkSessionLock();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(J)V`
     */
    void setTotalWorldTime(long arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()J`
     */
    long getTotalWorldTime();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(J)V`
     */
    void setWorldTime(long arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isBlockModifiable(EntityPlayer arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.chunk.IChunkProvider;`
     */
    IChunkProvider getChunkProvider();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V`
     */
    void addBlockEvent(BlockPos arg0, Block arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.storage.ISaveHandler;`
     */
    ISaveHandler getSaveHandler();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)V`
     */
    void setThunderStrength(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)V`
     */
    void setRainStrength(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isBlockinHighHumidity(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.storage.MapStorage;`
     */
    MapStorage getMapStorage();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.world.WorldSavedData;)V`
     */
    void setItemData(String arg0, WorldSavedData arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.Class;Ljava.lang.String;)Lnet.minecraft.world.WorldSavedData;`
     */
    WorldSavedData loadItemData(Class arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.String;)I`
     */
    int getUniqueDataId(String arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(ILnet.minecraft.util.BlockPos;I)V`
     */
    void playBroadcastSound(int arg0, BlockPos arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()I`
     */
    int getActualHeight();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(III)Ljava.util.Random;`
     */
    Random setRandomSeed(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getStrongholdPos(String arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(ILnet.minecraft.util.BlockPos;I)V`
     */
    void sendBlockBreakProgress(int arg0, BlockPos arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Ljava.util.Calendar;`
     */
    Calendar getCurrentDate();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(DDDDDDLnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void makeFireworks(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, NBTTagCompound arg6);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.DifficultyInstance;`
     */
    DifficultyInstance getDifficultyForLocation(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()I`
     */
    int getSkylightSubtracted();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(I)V`
     */
    void setSkylightSubtracted(int arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Z`
     */
    bool isFindingSpawnPoint();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.village.VillageCollection;`
     */
    VillageCollection getVillageCollection();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(II)Z`
     */
    bool isSpawnChunk(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void calculateInitialSkylight();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Z)Z`
     */
    bool isBlockNormalCube(BlockPos arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getSpawnPoint();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Ljava.lang.String;FF)V`
     */
    void playSoundToNearExcept(EntityPlayer arg0, String arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(IZDDDDDD[I)V`
     */
    void spawnParticle(int arg0, bool arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, arr_I arg8);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.EnumParticleTypes;ZDDDDDD[I)V`
     */
    void spawnParticle(EnumParticleTypes arg0, bool arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, arr_I arg8);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.EnumParticleTypes;DDDDDD[I)V`
     */
    void spawnParticle(EnumParticleTypes arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, arr_I arg7);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.GameRules;`
     */
    GameRules getGameRules();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;Lcom.google.common.base.Predicate;)Ljava.util.List;`
     */
    List getEntitiesWithinAABB(Class arg0, AxisAlignedBB arg1, Predicate arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;`
     */
    List getEntitiesWithinAABB(Class arg0, AxisAlignedBB arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Z)Z`
     */
    bool isBlockLoaded(BlockPos arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isBlockLoaded(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;I)Z`
     */
    bool setBlockState(BlockPos arg0, IBlockState arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Z`
     */
    bool setBlockState(BlockPos arg0, IBlockState arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)V`
     */
    void setSpawnPoint(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;Ljava.lang.String;FF)V`
     */
    void playSoundAtEntity(Entity arg0, String arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.scoreboard.Scoreboard;`
     */
    Scoreboard getScoreboard();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void markTileEntityForRemoval(TileEntity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;`
     */
    List getCollidingBoundingBoxes(Entity arg0, AxisAlignedBB arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Z`
     */
    bool isAnyLiquid(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Z`
     */
    bool isFlammableWithin(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isAreaLoaded(BlockPos arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;IZ)Z`
     */
    bool isAreaLoaded(BlockPos arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(IIIIIIZ)Z`
     */
    bool isAreaLoaded(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.gen.structure.StructureBoundingBox;Z)Z`
     */
    bool isAreaLoaded(StructureBoundingBox arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.gen.structure.StructureBoundingBox;)Z`
     */
    bool isAreaLoaded(StructureBoundingBox arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;Z)Z`
     */
    bool isAreaLoaded(BlockPos arg0, BlockPos arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;I)Z`
     */
    bool isAreaLoaded(BlockPos arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canLightningStrike(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.block.material.Material;Lnet.minecraft.entity.Entity;)Z`
     */
    bool handleMaterialAcceleration(AxisAlignedBB arg0, Material arg1, Entity arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.block.material.Material;)Z`
     */
    bool isMaterialInBB(AxisAlignedBB arg0, Material arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)F`
     */
    float getLightBrightness(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isBlockFullCube(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.storage.WorldInfo;`
     */
    WorldInfo getWorldInfo();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getTopSolidOrLiquidBlock(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.AxisAlignedBB;)F`
     */
    float getBlockDensity(Vec3 arg0, AxisAlignedBB arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z`
     */
    bool extinguishFire(EntityPlayer arg0, BlockPos arg1, EnumFacing arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;ILnet.minecraft.util.BlockPos;I)V`
     */
    void playAuxSFXAtEntity(EntityPlayer arg0, int arg1, BlockPos arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Ljava.lang.String;`
     */
    String getDebugLoadedEntities();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Ljava.lang.String;`
     */
    String getProviderName();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void setTileEntity(BlockPos arg0, TileEntity arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void joinEntityInSurroundings(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()I`
     */
    int getLastLightningBolt();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(I)V`
     */
    void setLastLightningBolt(int arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void updateEntities();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.EnumDifficulty;`
     */
    EnumDifficulty getDifficulty();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(ZZ)V`
     */
    void setAllowedSpawnTypes(bool arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReportCategory;`
     */
    CrashReportCategory addWorldInfoToCrashReport(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool spawnEntityInWorld(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void setInitialSpawnLocation();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void removeEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Z`
     */
    bool isRaining();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isWater(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Z)Z`
     */
    bool canSnowAt(BlockPos arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isValid(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool checkLight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(ILnet.minecraft.util.BlockPos;I)V`
     */
    void playAuxSFX(int arg0, BlockPos arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canSeeSky(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int getLight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Z)I`
     */
    int getLight(BlockPos arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Ljava.lang.String;)V`
     */
    void playRecord(BlockPos arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.Class;Lcom.google.common.base.Predicate;)Ljava.util.List;`
     */
    List getPlayers(Class arg0, Predicate arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()D`
     */
    double getHorizon();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Z`
     */
    bool isDaytime();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(DDDLjava.lang.String;FFZ)V`
     */
    void playSound(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getHeight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()I`
     */
    int getHeight();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void tick();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V`
     */
    void notifyNeighborsRespectDebug(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V`
     */
    void updateComparatorOutputLevel(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V`
     */
    void notifyNeighborsOfStateChange(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)V`
     */
    void markBlockRangeForRenderUpdate(BlockPos arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(IIIIII)V`
     */
    void markBlockRangeForRenderUpdate(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;Lnet.minecraft.util.EnumFacing;)V`
     */
    void notifyNeighborsOfStateExcept(BlockPos arg0, Block arg1, EnumFacing arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void removePlayerEntityDangerously(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(F)I`
     */
    int calculateSkylightSubtracted(float arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;Z)V`
     */
    void updateEntityWithOptionalForce(Entity arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void setActivePlayerChunksAndCheckLight();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.entity.Entity;)Lnet.minecraft.entity.Entity;`
     */
    Entity findNearestEntityWithinAABB(Class arg0, AxisAlignedBB arg1, Entity arg2);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.util.BlockPos;)I`
     */
    int isBlockIndirectlyGettingPowered(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Z`
     */
    static bool doesBlockHaveSolidTopSurface(IBlockAccess arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;`
     */
    List getEntitiesWithinAABBExcludingEntity(Entity arg0, AxisAlignedBB arg1);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void updateAllPlayersSleepingFlag();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()V`
     */
    void sendQuittingDisconnectingPacket();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `(Lnet.minecraft.world.WorldSettings;)V`
     */
    void initialize(WorldSettings arg0);

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()Lnet.minecraft.world.World;`
     */
    World init();

    /**
     * Declaring class: `net.minecraft.world.World`
     * Signature: `()J`
     */
    long getSeed();
};


/**
 * Classpath: `net.minecraft.world.border.WorldBorder`
 * Package name: `net.minecraft.world.border`
 */
class WorldBorder : public Object {
protected:
    const inline static char *className = "net.minecraft.world.border.WorldBorder";
public:
    STATICINITIALIZE;

    WorldBorder(jobject object) : Object(object) {}


    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(Lnet.minecraft.entity.Entity;)D`
     */
    double getClosestDistance(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(DD)D`
     */
    double getClosestDistance(double arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double getDamageBuffer();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double getDamageAmount();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(D)V`
     */
    void setDamageAmount(double arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(D)V`
     */
    void setDamageBuffer(double arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(I)V`
     */
    void setWarningDistance(int arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(I)V`
     */
    void setWarningTime(int arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(D)V`
     */
    void setTransition(double arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(DDJ)V`
     */
    void setTransition(double arg0, double arg1, long arg2);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double getDiameter();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()I`
     */
    int getWarningDistance();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()I`
     */
    int getWarningTime();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double getTargetSize();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()J`
     */
    long getTimeUntilTarget();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()Ljava.util.List;`
     */
    List getListeners();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double getResizeSpeed();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(Lnet.minecraft.world.border.IBorderListener;)V`
     */
    void addListener(IBorderListener arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double minX();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double minZ();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double maxX();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double maxZ();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double getCenterX();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()D`
     */
    double getCenterZ();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(DD)V`
     */
    void setCenter(double arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()Lnet.minecraft.world.border.EnumBorderStatus;`
     */
    EnumBorderStatus getStatus();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool contains(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(Lnet.minecraft.util.AxisAlignedBB;)Z`
     */
    bool contains(AxisAlignedBB arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(Lnet.minecraft.world.ChunkCoordIntPair;)Z`
     */
    bool contains(ChunkCoordIntPair arg0);

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `()I`
     */
    int getSize();

    /**
     * Declaring class: `net.minecraft.world.border.WorldBorder`
     * Signature: `(I)V`
     */
    void setSize(int arg0);
};


/**
 * Classpath: `net.minecraft.world.border.EnumBorderStatus`
 * Package name: `net.minecraft.world.border`
 */
class EnumBorderStatus : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.border.EnumBorderStatus";
public:
    STATICINITIALIZE;

    EnumBorderStatus(jobject object) : Enum(object) {}


    /**
     * Declaring class: `net.minecraft.world.border.EnumBorderStatus`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.world.border.EnumBorderStatus;`
     */
    static EnumBorderStatus valueOf(String arg0);

    /**
     * Declaring class: `net.minecraft.world.border.EnumBorderStatus`
     * Signature: `()I`
     */
    int getID();
};


/**
 * Classpath: `java.lang.String`
 * Package name: `java.lang`
 */
class String : public Object {
protected:
    const inline static char *className = "java.lang.String";
public:
    STATICINITIALIZE;

    String(jobject object) : Object(object) {}


    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II[CI)V`
     */
    void getChars(int arg0, int arg1, arr_C arg2, int arg3);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)I`
     */
    int indexOf(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)I`
     */
    int indexOf(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BBILjava.lang.String;I)I`
     */
    static int indexOf(arr_B arg0, byte arg1, int arg2, String arg3, int arg4);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int indexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)I`
     */
    int indexOf(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)V`
     */
    static void checkIndex(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String valueOf(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([C)Ljava.lang.String;`
     */
    static String valueOf(arr_C arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.String;`
     */
    static String valueOf(Object arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Z)Ljava.lang.String;`
     */
    static String valueOf(bool arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([CII)Ljava.lang.String;`
     */
    static String valueOf(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(C)Ljava.lang.String;`
     */
    static String valueOf(char arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(D)Ljava.lang.String;`
     */
    static String valueOf(double arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(F)Ljava.lang.String;`
     */
    static String valueOf(float arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(J)Ljava.lang.String;`
     */
    static String valueOf(long arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()B`
     */
    byte coder();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([CII)Ljava.lang.Void;`
     */
    static Void rangeCheck(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(III)V`
     */
    static void checkBoundsOffCount(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     * Throws: `java.io.UnsupportedEncodingException`
     */
    static Charset lookupCharset(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)Z`
     */
    static bool isNotContinuation(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)C`
     */
    static char decode2(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BII[BIZ)I`
     */
    static int decodeUTF8_UTF16(arr_B arg0, int arg1, int arg2, arr_B arg3, int arg4, bool arg5);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(IF)I`
     */
    static int scale(int arg0, float arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.nio.charset.CharsetDecoder;[C[BII)I`
     */
    static int decodeWithDecoder(CharsetDecoder arg0, arr_C arg1, arr_B arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BLjava.nio.charset.Charset;)Ljava.lang.String;`
     */
    static String newStringNoRepl1(arr_B arg0, Charset arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BII)Ljava.lang.String;`
     */
    static String newStringUTF8NoRepl(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)V`
     */
    static void throwMalformed(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([B)V`
     */
    static void throwMalformed(arr_B arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([B)Z`
     */
    static bool isASCII(arr_B arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)V`
     */
    static void throwUnmappable(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([B)V`
     */
    static void throwUnmappable(arr_B arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(III)Z`
     */
    static bool isMalformed3(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BI)I`
     */
    static int malformed3(arr_B arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(III)C`
     */
    static char decode3(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)Z`
     */
    static bool isMalformed3_2(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(IIII)I`
     */
    static int decode4(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(III)Z`
     */
    static bool isMalformed4(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BI)I`
     */
    static int malformed4(arr_B arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)Z`
     */
    static bool isMalformed4_2(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)Z`
     */
    static bool isMalformed4_3(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Z`
     */
    bool isLatin1();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)I`
     */
    int codePointAt(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)I`
     */
    int codePointBefore(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)I`
     */
    int codePointCount(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)I`
     */
    int offsetByCodePoints(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(III)V`
     */
    static void checkBoundsBeginEnd(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BIB)V`
     */
    void getBytes(arr_B arg0, int arg1, byte arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II[BI)V`
     */
    void getBytes(int arg0, int arg1, arr_B arg2, int arg3);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BIIBI)V`
     */
    void getBytes(arr_B arg0, int arg1, int arg2, byte arg3, int arg4);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.CharSequence;)Z`
     */
    bool contentEquals(CharSequence arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.StringBuffer;)Z`
     */
    bool contentEquals(StringBuffer arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.AbstractStringBuilder;)Z`
     */
    bool nonSyncContentEquals(AbstractStringBuilder arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(ZILjava.lang.String;II)Z`
     */
    bool regionMatches(bool arg0, int arg1, String arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(ILjava.lang.String;II)Z`
     */
    bool regionMatches(int arg0, String arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;I)Z`
     */
    bool startsWith(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool startsWith(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)I`
     */
    int lastIndexOf(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BBILjava.lang.String;I)I`
     */
    static int lastIndexOf(arr_B arg0, byte arg1, int arg2, String arg3, int arg4);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int lastIndexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)I`
     */
    int lastIndexOf(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)I`
     */
    int lastIndexOf(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)Ljava.lang.String;`
     */
    String substring(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)Ljava.lang.String;`
     */
    String substring(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(CC)Ljava.lang.String;`
     */
    String replace(char arg0, char arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.CharSequence;Ljava.lang.CharSequence;)Ljava.lang.String;`
     */
    String replace(CharSequence arg0, CharSequence arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool matches(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String replaceFirst(String arg0, String arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String replaceAll(String arg0, String arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.CharSequence;[Ljava.lang.CharSequence;)Ljava.lang.String;`
     */
    static String join(CharSequence arg0, CharSequence_interface arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;I)Ljava.lang.String;`
     */
    static String join(String arg0, String arg1, String arg2, String_interface arg3, int arg4);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.CharSequence;Ljava.lang.Iterable;)Ljava.lang.String;`
     */
    static String join(CharSequence arg0, Iterable arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String toLowerCase();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String toLowerCase(Locale arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String toUpperCase();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.util.Locale;)Ljava.lang.String;`
     */
    String toUpperCase(Locale arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String trim();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String strip();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String stripLeading();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String stripTrailing();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()I`
     */
    int indexOfNonWhitespace();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.util.stream.Stream;`
     */
    Stream lines();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)Ljava.lang.String;`
     */
    String repeat(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()I`
     */
    int lastIndexOfNonWhitespace();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.util.List;)I`
     */
    static int outdent(List arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Z`
     */
    bool isBlank();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;`
     */
    static String format(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;`
     */
    static String format(Locale arg0, String arg1, Object_interface arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.String;`
     */
    String resolveConstantDesc(MethodHandles_Lookup arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BLjava.nio.charset.Charset;)Ljava.lang.String;`
     * Throws: `java.nio.charset.CharacterCodingException`
     */
    static String newStringNoRepl(arr_B arg0, Charset arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([BI[CII)I`
     */
    static int decodeASCII(arr_B arg0, int arg1, arr_C arg2, int arg3, int arg4);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool equalsIgnoreCase(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)I`
     */
    int compareToIgnoreCase(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool endsWith(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String concat(String arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.lang.CharSequence;)Z`
     */
    bool contains(CharSequence arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)Ljava.lang.String;`
     */
    String indent(int arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String stripIndent();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String translateEscapes();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(Ljava.util.function.Function;)Ljava.lang.Object;`
     */
    Object transform(Function arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.String;`
     */
    String formatted(Object_interface arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([CII)Ljava.lang.String;`
     */
    static String copyValueOf(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `([C)Ljava.lang.String;`
     */
    static String copyValueOf(arr_C arg0);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `()Ljava.lang.String;`
     */
    String intern();

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(II)V`
     */
    static void checkOffset(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.String`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String valueOfCodePoint(int arg0);
};


/**
 * Classpath: `java.io.PrintStream`
 * Package name: `java.io`
 */
class PrintStream : public FilterOutputStream {
protected:
    const inline static char *className = "java.io.PrintStream";
public:
    STATICINITIALIZE;

    PrintStream(jobject object) : FilterOutputStream(object) {}


    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.String;)V`
     */
    void println(String arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void println(Object arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(F)V`
     */
    void println(float arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(D)V`
     */
    void println(double arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `([C)V`
     */
    void println(arr_C arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Z)V`
     */
    void println(bool arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `()V`
     */
    void println();

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(C)V`
     */
    void println(char arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(I)V`
     */
    void println(int arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(J)V`
     */
    void println(long arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.io.PrintStream;`
     */
    PrintStream append(CharSequence arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.io.PrintStream;`
     */
    PrintStream append(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(C)Ljava.io.PrintStream;`
     */
    PrintStream append(char arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;`
     */
    static Object requireNonNull(Object arg0, String arg1);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;`
     */
    PrintStream format(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;`
     */
    PrintStream format(Locale arg0, String arg1, Object_interface arg2);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;`
     */
    PrintStream printf(Locale arg0, String arg1, Object_interface arg2);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;`
     */
    PrintStream printf(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `([BII)V`
     */
    void write(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `([C)V`
     */
    void write(arr_C arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.String;)V`
     */
    void write(String arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(I)V`
     */
    void write(int arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `([B)V`
     * Throws: `java.io.IOException`
     */
    void write(arr_B arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Z)V`
     */
    void print(bool arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.String;)V`
     */
    void print(String arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `([C)V`
     */
    void print(arr_C arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(J)V`
     */
    void print(long arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(D)V`
     */
    void print(double arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(F)V`
     */
    void print(float arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(C)V`
     */
    void print(char arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(I)V`
     */
    void print(int arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void print(Object arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `()V`
     */
    void newLine();

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `([B)V`
     */
    void writeBytes(arr_B arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     * Throws: `java.io.UnsupportedEncodingException`
     */
    static Charset toCharset(String arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void ensureOpen();

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `()Z`
     */
    bool checkError();

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `(Ljava.lang.String;)V`
     */
    void writeln(String arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `([C)V`
     */
    void writeln(arr_C arg0);

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `()V`
     */
    void setError();

    /**
     * Declaring class: `java.io.PrintStream`
     * Signature: `()V`
     */
    void clearError();
};


/**
 * Classpath: `java.util.Locale$Category`
 * Enclosing class: `java.util.Locale`
 * Package name: `java.util`
 */
class Locale_Category : public Enum {
protected:
    const inline static char *className = "java.util.Locale$Category";
public:
    STATICINITIALIZE;

    Locale_Category(jobject object) : Enum(object) {}


    /**
     * Declaring class: `java.util.Locale$Category`
     * Signature: `(Ljava.lang.String;)Ljava.util.Locale$Category;`
     */
    static Locale_Category valueOf(String arg0);
};


/**
 * Classpath: `java.io.ObjectInputStream`
 * Package name: `java.io`
 */
class ObjectInputStream : public InputStream {
protected:
    const inline static char *className = "java.io.ObjectInputStream";
public:
    STATICINITIALIZE;

    ObjectInputStream(jobject object) : InputStream(object) {}


    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     */
    static Object cloneArray(Object arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.io.ObjectStreamClass;)Ljava.lang.Class;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    Class resolveClass(ObjectStreamClass arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void defaultReadObject();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.io.ObjectInputStream$GetField;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    ObjectInputStream_GetField readFields();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Boolean;`
     */
    static Boolean auditSubclass(Class arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Class;I)V`
     * Throws: `java.io.InvalidClassException`
     */
    void checkArray(Class arg0, int arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()V`
     */
    void freeze();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    static ClassLoader latestUserDefinedLoader();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.lang.Class;`
     * Throws: `java.io.IOException`
     */
    Class readClass(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.lang.String;`
     * Throws: `java.io.IOException`
     */
    String readString();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.lang.String;`
     * Throws: `java.io.IOException`
     */
    String readString(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()V`
     */
    void verifySubclass();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException, java.io.StreamCorruptedException`
     */
    void readStreamHeader();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    Object readObjectOverride();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Class;Z)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object readObject0(Class arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Class;I)V`
     * Throws: `java.io.InvalidClassException`
     */
    void filterCheck(Class arg0, int arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()V`
     * Throws: `java.io.StreamCorruptedException`
     */
    void handleReset();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object readNull();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object readHandle(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.io.ObjectStreamClass;`
     * Throws: `java.io.IOException`
     */
    ObjectStreamClass readClassDesc(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object checkResolve(Object arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object readArray(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.lang.Enum;`
     * Throws: `java.io.IOException`
     */
    Enum readEnum(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object readOrdinaryObject(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.io.IOException;`
     * Throws: `java.io.IOException`
     */
    IOException readFatalException();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object resolveObject(Object arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.io.ObjectStreamClass;`
     * Throws: `java.io.IOException`
     */
    ObjectStreamClass readProxyDesc(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Ljava.io.ObjectStreamClass;`
     * Throws: `java.io.IOException`
     */
    ObjectStreamClass readNonProxyDesc(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `([Ljava.lang.String;)Ljava.lang.Class;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    Class resolveProxyClass(String_interface arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void skipCustomData();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.io.ObjectStreamClass;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    ObjectStreamClass readClassDescriptor();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Z`
     */
    bool isCustomSubclass();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.io.ObjectStreamClass;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object readRecord(ObjectStreamClass arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.io.Externalizable;Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.IOException`
     */
    void readExternalData(Externalizable arg0, ObjectStreamClass arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.IOException`
     */
    void readSerialData(Object arg0, ObjectStreamClass arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    Object readUnshared();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.io.ObjectInputValidation;I)V`
     * Throws: `java.io.NotActiveException, java.io.InvalidObjectException`
     */
    void registerValidation(ObjectInputValidation arg0, int arg1);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Z)Z`
     * Throws: `java.lang.SecurityException`
     */
    bool enableResolveObject(bool arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.io.ObjectInputFilter;`
     */
    ObjectInputFilter getObjectInputFilter();

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `(Ljava.io.ObjectInputFilter;)V`
     */
    void setObjectInputFilter(ObjectInputFilter arg0);

    /**
     * Declaring class: `java.io.ObjectInputStream`
     * Signature: `()Ljava.lang.String;`
     * Throws: `java.io.IOException`
     */
    String readTypeString();
};


/**
 * Classpath: `java.lang.reflect.Field`
 * Package name: `java.lang.reflect`
 */
class Field : public AccessibleObject {
protected:
    const inline static char *className = "java.lang.reflect.Field";
public:
    STATICINITIALIZE;

    Field(jobject object) : AccessibleObject(object) {}


    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    Object get(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)Z`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    bool getBoolean(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)B`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    byte getByte(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)S`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    short getShort(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)C`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    char getChar(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)I`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    int getInt(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)J`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    long getLong(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)F`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    float getFloat(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)D`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    double getDouble(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Lsun.reflect.generics.repository.FieldRepository;`
     */
    FieldRepository getGenericInfo();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Lsun.reflect.generics.factory.GenericsFactory;`
     */
    GenericsFactory getFactory();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.util.Map;`
     */
    Map declaredAnnotations();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.String;`
     */
    String toGenericString();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void set(Object arg0, Object arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Z)V`
     */
    void setAccessible(bool arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Object;)V`
     * Throws: `java.lang.IllegalAccessException`
     */
    void checkAccess(Class arg0, Object arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void checkCanSetAccessible(Class arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.String;`
     */
    String toShortString();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.reflect.Field;`
     */
    Field getRoot();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.String;`
     */
    String getGenericSignature();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type getGenericType();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getType();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;)Ljdk.internal.reflect.FieldAccessor;`
     * Throws: `java.lang.IllegalAccessException`
     */
    FieldAccessor getFieldAccessor(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Z)Ljdk.internal.reflect.FieldAccessor;`
     */
    FieldAccessor getFieldAccessor(bool arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;Z)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setBoolean(Object arg0, bool arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;B)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setByte(Object arg0, byte arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;C)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setChar(Object arg0, char arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;S)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setShort(Object arg0, short arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;I)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setInt(Object arg0, int arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;J)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setLong(Object arg0, long arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;F)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setFloat(Object arg0, float arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljava.lang.Object;D)V`
     * Throws: `java.lang.IllegalArgumentException, java.lang.IllegalAccessException`
     */
    void setDouble(Object arg0, double arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Z)Ljdk.internal.reflect.FieldAccessor;`
     */
    FieldAccessor acquireFieldAccessor(bool arg0);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `(Ljdk.internal.reflect.FieldAccessor;Z)V`
     */
    void setFieldAccessor(FieldAccessor arg0, bool arg1);

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.reflect.Field;`
     */
    Field copy();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Z`
     */
    bool isEnumConstant();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Z`
     */
    bool isTrustedFinal();

    /**
     * Declaring class: `java.lang.reflect.Field`
     * Signature: `()Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedType();
};


/**
 * Classpath: `sun.reflect.generics.repository.FieldRepository`
 * Package name: `sun.reflect.generics.repository`
 */
class FieldRepository : public AbstractRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.FieldRepository";
public:
    STATICINITIALIZE;

    FieldRepository(jobject object) : AbstractRepository(object) {}


    /**
     * Declaring class: `sun.reflect.generics.repository.FieldRepository`
     * Signature: `(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.FieldRepository;`
     */
    static FieldRepository make(String arg0, GenericsFactory arg1);

    /**
     * Declaring class: `sun.reflect.generics.repository.FieldRepository`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type getGenericType();

    /**
     * Declaring class: `sun.reflect.generics.repository.FieldRepository`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type computeGenericType();

    /**
     * Declaring class: `sun.reflect.generics.repository.FieldRepository`
     * Signature: `(Ljava.lang.String;)Lsun.reflect.generics.tree.TypeSignature;`
     */
    TypeSignature parse(String arg0);
};


/**
 * Classpath: `java.lang.StringBuilder`
 * Package name: `java.lang`
 */
class StringBuilder : public AbstractStringBuilder {
protected:
    const inline static char *className = "java.lang.StringBuilder";
public:
    STATICINITIALIZE;

    StringBuilder(jobject object) : AbstractStringBuilder(object) {}


    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `([C)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(arr_C arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `([CII)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Z)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(bool arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(CharSequence arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.StringBuffer;)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(StringBuffer arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.String;)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(String arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(F)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(float arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(D)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(double arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(Object arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(C)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(char arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(I)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(int arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(J)Ljava.lang.StringBuilder;`
     */
    StringBuilder append(long arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.String;)I`
     */
    int indexOf(String arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int indexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(IF)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, float arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(IJ)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, long arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(II)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(I[CII)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(ILjava.lang.CharSequence;II)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, CharSequence arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(ILjava.lang.CharSequence;)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, CharSequence arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(I[C)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, arr_C arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(ILjava.lang.String;)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, String arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(IZ)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, bool arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(IC)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, char arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(ILjava.lang.Object;)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, Object arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(ID)Ljava.lang.StringBuilder;`
     */
    StringBuilder insert(int arg0, double arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int lastIndexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.lang.String;)I`
     */
    int lastIndexOf(String arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(IILjava.lang.String;)Ljava.lang.StringBuilder;`
     */
    StringBuilder replace(int arg0, int arg1, String arg2);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(II)Ljava.lang.StringBuilder;`
     */
    StringBuilder delete_(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(I)Ljava.lang.StringBuilder;`
     */
    StringBuilder appendCodePoint(int arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `(I)Ljava.lang.StringBuilder;`
     */
    StringBuilder deleteCharAt(int arg0);

    /**
     * Declaring class: `java.lang.StringBuilder`
     * Signature: `()Ljava.lang.StringBuilder;`
     */
    StringBuilder reverse();
};


/**
 * Classpath: `java.lang.StringBuffer`
 * Package name: `java.lang`
 */
class StringBuffer : public AbstractStringBuilder {
protected:
    const inline static char *className = "java.lang.StringBuffer";
public:
    STATICINITIALIZE;

    StringBuffer(jobject object) : AbstractStringBuilder(object) {}


    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(J)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(long arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(F)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(float arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `([C)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(arr_C arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `([CII)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Z)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(bool arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(C)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(char arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(D)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(double arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.String;)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(String arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.StringBuffer;)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(StringBuffer arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.AbstractStringBuilder;)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(AbstractStringBuilder arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(Object arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.lang.StringBuffer;`
     */
    StringBuffer append(CharSequence arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(II[CI)V`
     */
    void getChars(int arg0, int arg1, arr_C arg2, int arg3);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.String;)I`
     */
    int indexOf(String arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int indexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I[CII)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(IF)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, float arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(ILjava.lang.CharSequence;)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, CharSequence arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(ID)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, double arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I[C)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, arr_C arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(ILjava.lang.String;)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, String arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(IZ)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, bool arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(IC)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, char arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(II)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(IJ)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, long arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(ILjava.lang.Object;)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, Object arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(ILjava.lang.CharSequence;II)Ljava.lang.StringBuffer;`
     */
    StringBuffer insert(int arg0, CharSequence arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)I`
     */
    int codePointAt(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)I`
     */
    int codePointBefore(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(II)I`
     */
    int codePointCount(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(II)I`
     */
    int offsetByCodePoints(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `([BIB)V`
     */
    void getBytes(arr_B arg0, int arg1, byte arg2);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.String;I)I`
     */
    int lastIndexOf(String arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.lang.String;)I`
     */
    int lastIndexOf(String arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(II)Ljava.lang.String;`
     */
    String substring(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)Ljava.lang.String;`
     */
    String substring(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(IILjava.lang.String;)Ljava.lang.StringBuffer;`
     */
    StringBuffer replace(int arg0, int arg1, String arg2);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(II)Ljava.lang.StringBuffer;`
     */
    StringBuffer delete_(int arg0, int arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)V`
     */
    void setLength(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `()I`
     */
    int capacity();

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)V`
     */
    void ensureCapacity(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `()V`
     */
    void trimToSize();

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(IC)V`
     */
    void setCharAt(int arg0, char arg1);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)Ljava.lang.StringBuffer;`
     */
    StringBuffer appendCodePoint(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `(I)Ljava.lang.StringBuffer;`
     */
    StringBuffer deleteCharAt(int arg0);

    /**
     * Declaring class: `java.lang.StringBuffer`
     * Signature: `()Ljava.lang.StringBuffer;`
     */
    StringBuffer reverse();
};


/**
 * Classpath: `java.io.ObjectOutputStream`
 * Package name: `java.io`
 */
class ObjectOutputStream : public OutputStream {
protected:
    const inline static char *className = "java.io.ObjectOutputStream";
public:
    STATICINITIALIZE;

    ObjectOutputStream(jobject object) : OutputStream(object) {}


    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void defaultWriteObject();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()Ljava.io.ObjectOutputStream$PutField;`
     * Throws: `java.io.IOException`
     */
    ObjectOutputStream_PutField putFields();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void writeFields();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Class;)Ljava.lang.Boolean;`
     */
    static Boolean auditSubclass(Class arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void reset();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.String;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeString(String arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     */
    void verifySubclass();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()Z`
     */
    bool isCustomSubclass();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void writeStreamHeader();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;)V`
     * Throws: `java.io.IOException`
     */
    void writeObjectOverride(Object arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeObject0(Object arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.io.IOException;)V`
     * Throws: `java.io.IOException`
     */
    void writeFatalException(IOException arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.IOException`
     */
    void defaultWriteFields(Object arg0, ObjectStreamClass arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void drain();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void writeNull();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(I)V`
     * Throws: `java.io.IOException`
     */
    void writeHandle(int arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Class;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeClass(Class arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.io.ObjectStreamClass;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeClassDesc(ObjectStreamClass arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.io.IOException`
     */
    Object replaceObject(Object arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectStreamClass;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeArray(Object arg0, ObjectStreamClass arg1, bool arg2);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Enum;Ljava.io.ObjectStreamClass;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeEnum(Enum arg0, ObjectStreamClass arg1, bool arg2);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectStreamClass;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeOrdinaryObject(Object arg0, ObjectStreamClass arg1, bool arg2);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.io.ObjectStreamClass;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeProxyDesc(ObjectStreamClass arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.io.ObjectStreamClass;Z)V`
     * Throws: `java.io.IOException`
     */
    void writeNonProxyDesc(ObjectStreamClass arg0, bool arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Class;)V`
     * Throws: `java.io.IOException`
     */
    void annotateProxyClass(Class arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.IOException`
     */
    void writeClassDescriptor(ObjectStreamClass arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Class;)V`
     * Throws: `java.io.IOException`
     */
    void annotateClass(Class arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.IOException`
     */
    void writeRecordData(Object arg0, ObjectStreamClass arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.io.Externalizable;)V`
     * Throws: `java.io.IOException`
     */
    void writeExternalData(Externalizable arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V`
     * Throws: `java.io.IOException`
     */
    void writeSerialData(Object arg0, ObjectStreamClass arg1);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(I)V`
     * Throws: `java.io.IOException`
     */
    void useProtocolVersion(int arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.Object;)V`
     * Throws: `java.io.IOException`
     */
    void writeUnshared(Object arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Z)Z`
     * Throws: `java.lang.SecurityException`
     */
    bool enableReplaceObject(bool arg0);

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `()I`
     */
    int getProtocolVersion();

    /**
     * Declaring class: `java.io.ObjectOutputStream`
     * Signature: `(Ljava.lang.String;)V`
     * Throws: `java.io.IOException`
     */
    void writeTypeString(String arg0);
};


/**
 * Classpath: `java.io.IOException`
 * Package name: `java.io`
 */
class IOException : public Exception {
protected:
    const inline static char *className = "java.io.IOException";
public:
    STATICINITIALIZE;

    IOException(jobject object) : Exception(object) {}

};


/**
 * Classpath: `java.nio.ByteBuffer`
 * Package name: `java.nio`
 */
class ByteBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.ByteBuffer";
public:
    STATICINITIALIZE;

    ByteBuffer(jobject object) : Buffer(object) {}


    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I[BII)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer get(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)B`
     */
    byte get(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `([BII)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer get(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()B`
     */
    byte get();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I[B)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer get(int arg0, arr_B arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `([B)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer get(arr_B arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(Ljava.nio.ByteBuffer;)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(ByteBuffer arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(IB)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(int arg0, byte arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(ILjava.nio.ByteBuffer;II)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(int arg0, ByteBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `([B)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(arr_B arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I[B)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(int arg0, arr_B arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I[BII)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(B)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(byte arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `([BII)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer put(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)S`
     */
    short getShort(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()S`
     */
    short getShort();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(S)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putShort(short arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(IS)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putShort(int arg0, short arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()C`
     */
    char getChar();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)C`
     */
    char getChar(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(IC)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putChar(int arg0, char arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(C)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putChar(char arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()I`
     */
    int getInt();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)I`
     */
    int getInt(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(II)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putInt(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putInt(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)J`
     */
    long getLong(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()J`
     */
    long getLong();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(IJ)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putLong(int arg0, long arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(J)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putLong(long arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)F`
     */
    float getFloat(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()F`
     */
    float getFloat();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(F)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putFloat(float arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(IF)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putFloat(int arg0, float arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()D`
     */
    double getDouble();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)D`
     */
    double getDouble(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(ID)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putDouble(int arg0, double arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(D)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putDouble(double arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(BB)I`
     */
    static int compare(byte arg0, byte arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer clear();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `([B)Ljava.nio.ByteBuffer;`
     */
    static ByteBuffer wrap(arr_B arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `([BII)Ljava.nio.ByteBuffer;`
     */
    static ByteBuffer wrap(arr_B arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer position(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer limit(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer mark();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer reset();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer flip();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer rewind();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer slice();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(II)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer duplicate();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(Ljava.nio.ByteOrder;)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer order(ByteOrder arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(Ljava.nio.ByteBuffer;)I`
     */
    int mismatch(ByteBuffer arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)Ljava.nio.ByteBuffer;`
     */
    static ByteBuffer allocate(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I[BII)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer getArray(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(ILjava.nio.ByteBuffer;II)V`
     */
    void putBuffer(int arg0, ByteBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I[BII)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer putArray(int arg0, arr_B arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(II)I`
     */
    int alignmentOffset(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)Ljava.nio.ByteBuffer;`
     */
    static ByteBuffer allocateDirect(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer asReadOnlyBuffer();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ByteBuffer;`
     */
    ByteBuffer compact();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `(I)Ljava.nio.ByteBuffer;`
     */
    ByteBuffer alignedSlice(int arg0);

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer asCharBuffer();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.ShortBuffer;`
     */
    ShortBuffer asShortBuffer();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.IntBuffer;`
     */
    IntBuffer asIntBuffer();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.LongBuffer;`
     */
    LongBuffer asLongBuffer();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.FloatBuffer;`
     */
    FloatBuffer asFloatBuffer();

    /**
     * Declaring class: `java.nio.ByteBuffer`
     * Signature: `()Ljava.nio.DoubleBuffer;`
     */
    DoubleBuffer asDoubleBuffer();
};


/**
 * Classpath: `java.nio.CharBuffer`
 * Package name: `java.nio`
 */
class CharBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.CharBuffer";
public:
    STATICINITIALIZE;

    CharBuffer(jobject object) : Buffer(object) {}


    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.lang.Object;`
     */
    Object base();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()C`
     */
    char get();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I)C`
     */
    char get(int arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `([CII)Ljava.nio.CharBuffer;`
     */
    CharBuffer get(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `([C)Ljava.nio.CharBuffer;`
     */
    CharBuffer get(arr_C arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I[C)Ljava.nio.CharBuffer;`
     */
    CharBuffer get(int arg0, arr_C arg1);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I[CII)Ljava.nio.CharBuffer;`
     */
    CharBuffer get(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.nio.CharBuffer;)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(CharBuffer arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.lang.String;II)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I[C)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(int arg0, arr_C arg1);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(IC)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(int arg0, char arg1);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I[CII)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `([C)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(arr_C arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `([CII)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(ILjava.nio.CharBuffer;II)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(int arg0, CharBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(C)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(char arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.lang.String;)Ljava.nio.CharBuffer;`
     */
    CharBuffer put(String arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.nio.CharBuffer;`
     */
    CharBuffer append(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(C)Ljava.nio.CharBuffer;`
     */
    CharBuffer append(char arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.nio.CharBuffer;`
     */
    CharBuffer append(CharSequence arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer clear();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `([CII)Ljava.nio.CharBuffer;`
     */
    static CharBuffer wrap(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `([C)Ljava.nio.CharBuffer;`
     */
    static CharBuffer wrap(arr_C arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.nio.CharBuffer;`
     */
    static CharBuffer wrap(CharSequence arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.nio.CharBuffer;`
     */
    static CharBuffer wrap(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I)Ljava.nio.CharBuffer;`
     */
    CharBuffer position(int arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(II)Ljava.nio.CharBuffer;`
     */
    CharBuffer subSequence(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I)Ljava.nio.CharBuffer;`
     */
    CharBuffer limit(int arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Z`
     */
    bool isDirect();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Z`
     */
    bool hasArray();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()I`
     */
    int arrayOffset();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer mark();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer reset();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer flip();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer rewind();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer slice();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(II)Ljava.nio.CharBuffer;`
     */
    CharBuffer slice(int arg0, int arg1);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer duplicate();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder order();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(Ljava.nio.CharBuffer;)I`
     */
    int mismatch(CharBuffer arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I)Ljava.nio.CharBuffer;`
     */
    static CharBuffer allocate(int arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I[CII)Ljava.nio.CharBuffer;`
     */
    CharBuffer getArray(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(ILjava.nio.CharBuffer;II)V`
     */
    void putBuffer(int arg0, CharBuffer arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I[CII)Ljava.nio.CharBuffer;`
     */
    CharBuffer putArray(int arg0, arr_C arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer asReadOnlyBuffer();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.CharBuffer;`
     */
    CharBuffer compact();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Z`
     */
    bool isAddressable();

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `(I)C`
     */
    char getUnchecked(int arg0);

    /**
     * Declaring class: `java.nio.CharBuffer`
     * Signature: `()Ljava.nio.ByteOrder;`
     */
    ByteOrder charRegionOrder();
};


/**
 * Classpath: `java.lang.IllegalArgumentException`
 * Package name: `java.lang`
 */
class IllegalArgumentException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.IllegalArgumentException";
public:
    STATICINITIALIZE;

    IllegalArgumentException(jobject object) : RuntimeException(object) {}

};


/**
 * Classpath: `java.lang.Package`
 * Package name: `java.lang`
 */
class Package : public NamedPackage {
protected:
    const inline static char *className = "java.lang.Package";
public:
    STATICINITIALIZE;

    Package(jobject object) : NamedPackage(object) {}


    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `(Ljava.lang.String;)Ljava.lang.Package;`
     */
    static Package getPackage(String arg0);

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `(Ljava.net.URL;)Z`
     */
    bool isSealed(URL arg0);

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Z`
     */
    bool isSealed();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.Class;`
     */
    Class getPackageInfo();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String getSpecificationTitle();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String getSpecificationVersion();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String getSpecificationVendor();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String getImplementationTitle();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String getImplementationVersion();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `()Ljava.lang.String;`
     */
    String getImplementationVendor();

    /**
     * Declaring class: `java.lang.Package`
     * Signature: `(Ljava.lang.String;)Z`
     * Throws: `java.lang.NumberFormatException`
     */
    bool isCompatibleWith(String arg0);
};


/**
 * Classpath: `java.util.concurrent.ConcurrentHashMap`
 * Package name: `java.util.concurrent`
 */
class ConcurrentHashMap : public AbstractMap {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap";
public:
    STATICINITIALIZE;

    ConcurrentHashMap(jobject object) : AbstractMap(object) {}


    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool contains(Object arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration elements();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration keys();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.lang.Object;)Ljava.util.concurrent.ConcurrentHashMap$KeySetView;`
     */
    ConcurrentHashMap_KeySetView keySet(Object arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `()Ljava.util.concurrent.ConcurrentHashMap$KeySetView;`
     */
    ConcurrentHashMap_KeySetView keySet();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(I)I`
     */
    static int tableSizeFor(int arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `()J`
     */
    long sumCount();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(I)I`
     */
    static int spread(int arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `([Ljava.util.concurrent.ConcurrentHashMap$Node;I)Ljava.util.concurrent.ConcurrentHashMap$Node;`
     */
    static ConcurrentHashMap_Node tabAt(ConcurrentHashMap_Node_interface arg0, int arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Z)Ljava.lang.Object;`
     */
    Object putVal(Object arg0, Object arg1, bool arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `([Ljava.util.concurrent.ConcurrentHashMap$Node;ILjava.util.concurrent.ConcurrentHashMap$Node;Ljava.util.concurrent.ConcurrentHashMap$Node;)Z`
     */
    static bool casTabAt(ConcurrentHashMap_Node_interface arg0, int arg1, ConcurrentHashMap_Node arg2, ConcurrentHashMap_Node arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `([Ljava.util.concurrent.ConcurrentHashMap$Node;I)V`
     */
    void treeifyBin(ConcurrentHashMap_Node_interface arg0, int arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JI)V`
     */
    void addCount(long arg0, int arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(I)V`
     */
    void tryPresize(int arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;`
     */
    Object replaceNode(Object arg0, Object arg1, Object arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `([Ljava.util.concurrent.ConcurrentHashMap$Node;ILjava.util.concurrent.ConcurrentHashMap$Node;)V`
     */
    static void setTabAt(ConcurrentHashMap_Node_interface arg0, int arg1, ConcurrentHashMap_Node arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.util.concurrent.ConcurrentHashMap$Node;)Ljava.util.concurrent.ConcurrentHashMap$Node;`
     */
    static ConcurrentHashMap_Node untreeify(ConcurrentHashMap_Node arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JZ)V`
     */
    void fullAddCount(long arg0, bool arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(I)I`
     */
    static int resizeStamp(int arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `([Ljava.util.concurrent.ConcurrentHashMap$Node;[Ljava.util.concurrent.ConcurrentHashMap$Node;)V`
     */
    void transfer(ConcurrentHashMap_Node_interface arg0, ConcurrentHashMap_Node_interface arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(J)I`
     */
    int batchFor(long arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.lang.Object;)Ljava.lang.Class;`
     */
    static Class comparableClassFor(Object arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.lang.Class;Ljava.lang.Object;Ljava.lang.Object;)I`
     */
    static int compareComparables(Class arg0, Object arg1, Object arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.util.function.Predicate;)Z`
     */
    bool removeEntryIf(Predicate arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(Ljava.util.function.Predicate;)Z`
     */
    bool removeValueIf(Predicate arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `()J`
     */
    long mappingCount();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(I)Ljava.util.concurrent.ConcurrentHashMap$KeySetView;`
     */
    static ConcurrentHashMap_KeySetView newKeySet(int arg0);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `()Ljava.util.concurrent.ConcurrentHashMap$KeySetView;`
     */
    static ConcurrentHashMap_KeySetView newKeySet();

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.BiFunction;)Ljava.lang.Object;`
     */
    Object search(long arg0, BiFunction arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.BiFunction;Ljava.util.function.BiFunction;)Ljava.lang.Object;`
     */
    Object reduce(long arg0, BiFunction arg1, BiFunction arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToDoubleBiFunction;DLjava.util.function.DoubleBinaryOperator;)D`
     */
    double reduceToDouble(long arg0, ToDoubleBiFunction arg1, double arg2, DoubleBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToLongBiFunction;JLjava.util.function.LongBinaryOperator;)J`
     */
    long reduceToLong(long arg0, ToLongBiFunction arg1, long arg2, LongBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToIntBiFunction;ILjava.util.function.IntBinaryOperator;)I`
     */
    int reduceToInt(long arg0, ToIntBiFunction arg1, int arg2, IntBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Consumer;)V`
     */
    void forEachKey(long arg0, Consumer arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;Ljava.util.function.Consumer;)V`
     */
    void forEachKey(long arg0, Function arg1, Consumer arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;)Ljava.lang.Object;`
     */
    Object searchKeys(long arg0, Function arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.BiFunction;)Ljava.lang.Object;`
     */
    Object reduceKeys(long arg0, BiFunction arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;Ljava.util.function.BiFunction;)Ljava.lang.Object;`
     */
    Object reduceKeys(long arg0, Function arg1, BiFunction arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToDoubleFunction;DLjava.util.function.DoubleBinaryOperator;)D`
     */
    double reduceKeysToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToLongFunction;JLjava.util.function.LongBinaryOperator;)J`
     */
    long reduceKeysToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToIntFunction;ILjava.util.function.IntBinaryOperator;)I`
     */
    int reduceKeysToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;Ljava.util.function.Consumer;)V`
     */
    void forEachValue(long arg0, Function arg1, Consumer arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Consumer;)V`
     */
    void forEachValue(long arg0, Consumer arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;)Ljava.lang.Object;`
     */
    Object searchValues(long arg0, Function arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.BiFunction;)Ljava.lang.Object;`
     */
    Object reduceValues(long arg0, BiFunction arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;Ljava.util.function.BiFunction;)Ljava.lang.Object;`
     */
    Object reduceValues(long arg0, Function arg1, BiFunction arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToDoubleFunction;DLjava.util.function.DoubleBinaryOperator;)D`
     */
    double reduceValuesToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToLongFunction;JLjava.util.function.LongBinaryOperator;)J`
     */
    long reduceValuesToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToIntFunction;ILjava.util.function.IntBinaryOperator;)I`
     */
    int reduceValuesToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Consumer;)V`
     */
    void forEachEntry(long arg0, Consumer arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;Ljava.util.function.Consumer;)V`
     */
    void forEachEntry(long arg0, Function arg1, Consumer arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;)Ljava.lang.Object;`
     */
    Object searchEntries(long arg0, Function arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.BiFunction;)Ljava.util.Map$Entry;`
     */
    Map_Entry reduceEntries(long arg0, BiFunction arg1);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.Function;Ljava.util.function.BiFunction;)Ljava.lang.Object;`
     */
    Object reduceEntries(long arg0, Function arg1, BiFunction arg2);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToDoubleFunction;DLjava.util.function.DoubleBinaryOperator;)D`
     */
    double reduceEntriesToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToLongFunction;JLjava.util.function.LongBinaryOperator;)J`
     */
    long reduceEntriesToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3);

    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap`
     * Signature: `(JLjava.util.function.ToIntFunction;ILjava.util.function.IntBinaryOperator;)I`
     */
    int reduceEntriesToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3);
};


/**
 * Classpath: `java.util.concurrent.ConcurrentHashMap$KeySetView`
 * Enclosing class: `java.util.concurrent.ConcurrentHashMap`
 * Package name: `java.util.concurrent`
 */
class ConcurrentHashMap_KeySetView : public ConcurrentHashMap_CollectionView {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap$KeySetView";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_KeySetView(jobject object) : ConcurrentHashMap_CollectionView(object) {}


    /**
     * Declaring class: `java.util.concurrent.ConcurrentHashMap$KeySetView`
     * Signature: `()Ljava.lang.Object;`
     */
    Object getMappedValue();
};


/**
 * Classpath: `java.lang.reflect.Constructor`
 * Package name: `java.lang.reflect`
 */
class Constructor : public Executable {
protected:
    const inline static char *className = "java.lang.reflect.Constructor";
public:
    STATICINITIALIZE;

    Constructor(jobject object) : Executable(object) {}


    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `([Ljava.lang.Object;)Ljava.lang.Object;`
     * Throws: `java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException`
     */
    Object newInstance(Object_interface arg0);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Lsun.reflect.generics.repository.ConstructorRepository;`
     */
    ConstructorRepository getGenericInfo();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Lsun.reflect.generics.factory.GenericsFactory;`
     */
    GenericsFactory getFactory();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.String;`
     */
    String toGenericString();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `(Z)V`
     */
    void setAccessible(bool arg0);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `(Ljava.lang.Class;)V`
     */
    void checkCanSetAccessible(Class arg0);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.String;`
     */
    String toShortString();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.reflect.Constructor;`
     */
    Constructor getRoot();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.reflect.Constructor;`
     */
    Constructor copy();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Z`
     */
    bool isVarArgs();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()I`
     */
    int getParameterCount();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Z`
     */
    bool hasGenericInformation();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void specificToStringHeader(StringBuilder arg0);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `(Ljava.lang.StringBuilder;)V`
     */
    void specificToGenericStringHeader(StringBuilder arg0);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedReturnType();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `(I[Ljava.lang.Class;)Z`
     */
    bool handleParameterNumberMismatch(int arg0, Class_interface arg1);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.reflect.AnnotatedType;`
     */
    AnnotatedType getAnnotatedReceiverType();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljava.lang.String;`
     */
    String getSignature();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `([Ljava.lang.Object;ZLjava.lang.Class;)Ljava.lang.Object;`
     * Throws: `java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException`
     */
    Object newInstanceWithCaller(Object_interface arg0, bool arg1, Class arg2);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljdk.internal.reflect.ConstructorAccessor;`
     */
    ConstructorAccessor acquireConstructorAccessor();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()Ljdk.internal.reflect.ConstructorAccessor;`
     */
    ConstructorAccessor getConstructorAccessor();

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `(Ljdk.internal.reflect.ConstructorAccessor;)V`
     */
    void setConstructorAccessor(ConstructorAccessor arg0);

    /**
     * Declaring class: `java.lang.reflect.Constructor`
     * Signature: `()I`
     */
    int getSlot();
};


/**
 * Classpath: `sun.reflect.generics.repository.ConstructorRepository`
 * Package name: `sun.reflect.generics.repository`
 */
class ConstructorRepository : public GenericDeclRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.ConstructorRepository";
public:
    STATICINITIALIZE;

    ConstructorRepository(jobject object) : GenericDeclRepository(object) {}


    /**
     * Declaring class: `sun.reflect.generics.repository.ConstructorRepository`
     * Signature: `(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.ConstructorRepository;`
     */
    static ConstructorRepository make(String arg0, GenericsFactory arg1);

    /**
     * Declaring class: `sun.reflect.generics.repository.ConstructorRepository`
     * Signature: `(Ljava.lang.String;)Lsun.reflect.generics.tree.MethodTypeSignature;`
     */
    MethodTypeSignature parse(String arg0);
};


/**
 * Classpath: `java.lang.IllegalAccessException`
 * Package name: `java.lang`
 */
class IllegalAccessException : public ReflectiveOperationException {
protected:
    const inline static char *className = "java.lang.IllegalAccessException";
public:
    STATICINITIALIZE;

    IllegalAccessException(jobject object) : ReflectiveOperationException(object) {}

};


/**
 * Classpath: `java.lang.invoke.BoundMethodHandle$SpeciesData`
 * Enclosing class: `java.lang.invoke.BoundMethodHandle`
 * Package name: `java.lang.invoke`
 */
class BoundMethodHandle_SpeciesData : public ClassSpecializer_SpeciesData {
protected:
    const inline static char *className = "java.lang.invoke.BoundMethodHandle$SpeciesData";
public:
    STATICINITIALIZE;

    BoundMethodHandle_SpeciesData(jobject object) : ClassSpecializer_SpeciesData(object) {}


    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle$SpeciesData`
     * Signature: `(B)Ljava.lang.invoke.BoundMethodHandle$SpeciesData;`
     */
    BoundMethodHandle_SpeciesData extendWith(byte arg0);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle$SpeciesData`
     * Signature: `()Ljava.lang.String;`
     */
    String deriveTypeString();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle$SpeciesData`
     * Signature: `(Ljava.lang.invoke.MemberName;ILjava.util.List;Ljava.util.List;)Z`
     */
    bool verifyTHAargs(MemberName arg0, int arg1, List arg2, List arg3);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle$SpeciesData`
     * Signature: `(Ljava.lang.String;)Ljava.util.List;`
     */
    List deriveFieldTypes(String arg0);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle$SpeciesData`
     * Signature: `()Ljava.lang.String;`
     */
    String deriveClassName();

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle$SpeciesData`
     * Signature: `(Ljava.lang.invoke.MemberName;I)Ljava.lang.invoke.MethodHandle;`
     */
    MethodHandle deriveTransformHelper(MemberName arg0, int arg1);

    /**
     * Declaring class: `java.lang.invoke.BoundMethodHandle$SpeciesData`
     * Signature: `(Ljava.lang.invoke.MemberName;ILjava.util.List;Ljava.util.List;)Ljava.util.List;`
     */
    List deriveTransformHelperArguments(MemberName arg0, int arg1, List arg2, List arg3);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.ClassWriter`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class ClassWriter : public ClassVisitor {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ClassWriter";
public:
    STATICINITIALIZE;

    ClassWriter(jobject object) : ClassVisitor(object) {}


    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `()Ljava.lang.ClassLoader;`
     */
    ClassLoader getClassLoader();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)I`
     */
    int newModule(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)V`
     */
    void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String_interface arg5);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void visitSource(String arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.MethodVisitor;`
     */
    MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String_interface arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `()V`
     */
    void visitEnd();

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.FieldVisitor;`
     */
    FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitAnnotation(String arg0, bool arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)I`
     */
    int newHandle(int arg0, String arg1, String arg2, String arg3, bool arg4);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)I`
     */
    int newHandle(int arg0, String arg1, String arg2, String arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;ILjava.lang.String;)Ljdk.internal.org.objectweb.asm.ModuleVisitor;`
     */
    ModuleVisitor visitModule(String arg0, int arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitNestHost(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V`
     */
    void visitOuterClass(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;`
     */
    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljdk.internal.org.objectweb.asm.Attribute;)V`
     */
    void visitAttribute(Attribute arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitNestMember(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)V`
     */
    void visitPermittedSubclassExperimental(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;I)V`
     */
    void visitInnerClass(String arg0, String arg1, String arg2, int arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.RecordComponentVisitor;`
     */
    RecordComponentVisitor visitRecordComponent(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.Object;)I`
     */
    int newConst(Object arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)I`
     */
    int newUTF8(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)I`
     */
    int newClass(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)I`
     */
    int newMethodType(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;)I`
     */
    int newPackage(String arg0);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)I`
     */
    int newConstantDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)I`
     */
    int newInvokeDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)I`
     */
    int newField(String arg0, String arg1, String arg2);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)I`
     */
    int newMethod(String arg0, String arg1, String arg2, bool arg3);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)I`
     */
    int newNameType(String arg0, String arg1);

    /**
     * Declaring class: `jdk.internal.org.objectweb.asm.ClassWriter`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String getCommonSuperClass(String arg0, String arg1);
};


/**
 * Classpath: `jdk.internal.org.objectweb.asm.SymbolTable$Entry`
 * Enclosing class: `jdk.internal.org.objectweb.asm.SymbolTable`
 * Package name: `jdk.internal.org.objectweb.asm`
 */
class SymbolTable_Entry : public Symbol {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.SymbolTable$Entry";
public:
    STATICINITIALIZE;

    SymbolTable_Entry(jobject object) : Symbol(object) {}

};


/**
 * Classpath: `java.lang.invoke.LambdaFormEditor$Transform`
 * Enclosing class: `java.lang.invoke.LambdaFormEditor`
 * Package name: `java.lang.invoke`
 */
class LambdaFormEditor_Transform : public SoftReference {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormEditor$Transform";
public:
    STATICINITIALIZE;

    LambdaFormEditor_Transform(jobject object) : SoftReference(object) {}


    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$Transform`
     * Signature: `(Ljava.lang.invoke.LambdaFormEditor$Transform;)Z`
     */
    bool equals(LambdaFormEditor_Transform arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$Transform`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$Transform`
     * Signature: `(Ljava.lang.invoke.LambdaFormEditor$TransformKey;)Z`
     */
    bool equals(LambdaFormEditor_TransformKey arg0);

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$Transform`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.lang.invoke.LambdaFormEditor$Transform`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `sun.reflect.generics.repository.MethodRepository`
 * Package name: `sun.reflect.generics.repository`
 */
class MethodRepository : public ConstructorRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.MethodRepository";
public:
    STATICINITIALIZE;

    MethodRepository(jobject object) : ConstructorRepository(object) {}


    /**
     * Declaring class: `sun.reflect.generics.repository.MethodRepository`
     * Signature: `(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.MethodRepository;`
     */
    static MethodRepository make(String arg0, GenericsFactory arg1);

    /**
     * Declaring class: `sun.reflect.generics.repository.MethodRepository`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type getReturnType();

    /**
     * Declaring class: `sun.reflect.generics.repository.MethodRepository`
     * Signature: `()Ljava.lang.reflect.Type;`
     */
    Type computeReturnType();
};


/**
 * Classpath: `java.time.chrono.IsoChronology`
 * Package name: `java.time.chrono`
 */
class IsoChronology : public AbstractChronology {
protected:
    const inline static char *className = "java.time.chrono.IsoChronology";
public:
    STATICINITIALIZE;

    IsoChronology(jobject object) : AbstractChronology(object) {}


    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDateTime;`
     */
    LocalDateTime localDateTime(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime zonedDateTime(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;`
     */
    ZonedDateTime zonedDateTime(Instant arg0, ZoneId arg1);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(I)Ljava.time.chrono.IsoEra;`
     */
    IsoEra eraOf(int arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(II)Ljava.time.LocalDate;`
     */
    LocalDate dateYearDay(int arg0, int arg1);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.chrono.Era;II)Ljava.time.LocalDate;`
     */
    LocalDate dateYearDay(Era arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.Clock;)Ljava.time.LocalDate;`
     */
    LocalDate dateNow(Clock arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.ZoneId;)Ljava.time.LocalDate;`
     */
    LocalDate dateNow(ZoneId arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `()Ljava.time.LocalDate;`
     */
    LocalDate dateNow();

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(J)Ljava.time.LocalDate;`
     */
    LocalDate dateEpochDay(long arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.LocalDate;`
     */
    LocalDate resolveDate(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(III)Ljava.time.Period;`
     */
    Period period(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(II)I`
     */
    int numberOfDaysOfMonth(int arg0, int arg1);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.LocalDate;`
     */
    LocalDate resolveYMD(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.LocalDate;`
     */
    LocalDate resolveYearOfEra(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.util.Map;Ljava.time.format.ResolverStyle;)V`
     */
    void resolveProlepticMonth(Map arg0, ResolverStyle arg1);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDate;`
     */
    LocalDate date(TemporalAccessor arg0);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(III)Ljava.time.LocalDate;`
     */
    LocalDate date(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.time.chrono.IsoChronology`
     * Signature: `(Ljava.time.chrono.Era;III)Ljava.time.LocalDate;`
     */
    LocalDate date(Era arg0, int arg1, int arg2, int arg3);
};


/**
 * Classpath: `java.time.format.DateTimeParseException`
 * Package name: `java.time.format`
 */
class DateTimeParseException : public DateTimeException {
protected:
    const inline static char *className = "java.time.format.DateTimeParseException";
public:
    STATICINITIALIZE;

    DateTimeParseException(jobject object) : DateTimeException(object) {}


    /**
     * Declaring class: `java.time.format.DateTimeParseException`
     * Signature: `()I`
     */
    int getErrorIndex();

    /**
     * Declaring class: `java.time.format.DateTimeParseException`
     * Signature: `()Ljava.lang.String;`
     */
    String getParsedString();
};


/**
 * Classpath: `java.text.Format$Field`
 * Enclosing class: `java.text.Format`
 * Package name: `java.text`
 */
class Format_Field : public AttributedCharacterIterator_Attribute {
protected:
    const inline static char *className = "java.text.Format$Field";
public:
    STATICINITIALIZE;

    Format_Field(jobject object) : AttributedCharacterIterator_Attribute(object) {}

};


/**
 * Classpath: `sun.util.calendar.BaseCalendar$Date`
 * Enclosing class: `sun.util.calendar.BaseCalendar`
 * Package name: `sun.util.calendar`
 */
class BaseCalendar_Date : public CalendarDate {
protected:
    const inline static char *className = "sun.util.calendar.BaseCalendar$Date";
public:
    STATICINITIALIZE;

    BaseCalendar_Date(jobject object) : CalendarDate(object) {}


    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `(III)Lsun.util.calendar.BaseCalendar$Date;`
     */
    BaseCalendar_Date setNormalizedDate(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `(I)V`
     */
    void setNormalizedYear(int arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `()I`
     */
    int getNormalizedYear();

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `(J)Z`
     */
    bool hit(long arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `(I)Z`
     */
    bool hit(int arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `()I`
     */
    int getCachedYear();

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `()J`
     */
    long getCachedJan1();

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar$Date`
     * Signature: `(IJI)V`
     */
    void setCache(int arg0, long arg1, int arg2);
};


/**
 * Classpath: `sun.util.calendar.AbstractCalendar`
 * Package name: `sun.util.calendar`
 */
class AbstractCalendar : public CalendarSystem {
protected:
    const inline static char *className = "sun.util.calendar.AbstractCalendar";
public:
    STATICINITIALIZE;

    AbstractCalendar(jobject object) : CalendarSystem(object) {}


    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)J`
     */
    long getTime(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;I)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate setTimeOfDay(CalendarDate arg0, int arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(JLjava.util.TimeZone;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate(long arg0, TimeZone arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(J)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate(long arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(JLsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate(long arg0, CalendarDate arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `()Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getCalendarDate();

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Ljava.lang.String;)Lsun.util.calendar.Era;`
     */
    Era getEra(String arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `([Lsun.util.calendar.Era;)V`
     */
    void setEras(Era_interface arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;Ljava.lang.String;)V`
     */
    void setEra(CalendarDate arg0, String arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool isLeapYear(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)J`
     */
    long getTimeOfDay(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool validateTime(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int normalizeTime(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)J`
     */
    long getFixedDate(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;J)V`
     */
    void getCalendarDateFromFixedDate(CalendarDate arg0, long arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)J`
     */
    long getTimeOfDayValue(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(JI)J`
     */
    static long getDayOfWeekDateBefore(long arg0, int arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(JI)J`
     */
    static long getDayOfWeekDateAfter(long arg0, int arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(JI)J`
     */
    static long getDayOfWeekDateOnOrBefore(long arg0, int arg1);

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `()I`
     */
    int getWeekLength();

    /**
     * Declaring class: `sun.util.calendar.AbstractCalendar`
     * Signature: `(IILsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;`
     */
    CalendarDate getNthDayOfWeek(int arg0, int arg1, CalendarDate arg2);
};


/**
 * Classpath: `sun.util.calendar.Gregorian$Date`
 * Enclosing class: `sun.util.calendar.Gregorian`
 * Package name: `sun.util.calendar`
 */
class Gregorian_Date : public BaseCalendar_Date {
protected:
    const inline static char *className = "sun.util.calendar.Gregorian$Date";
public:
    STATICINITIALIZE;

    Gregorian_Date(jobject object) : BaseCalendar_Date(object) {}


    /**
     * Declaring class: `sun.util.calendar.Gregorian$Date`
     * Signature: `(I)V`
     */
    void setNormalizedYear(int arg0);

    /**
     * Declaring class: `sun.util.calendar.Gregorian$Date`
     * Signature: `()I`
     */
    int getNormalizedYear();
};


/**
 * Classpath: `java.io.PrintWriter`
 * Package name: `java.io`
 */
class PrintWriter : public Writer {
protected:
    const inline static char *className = "java.io.PrintWriter";
public:
    STATICINITIALIZE;

    PrintWriter(jobject object) : Writer(object) {}


    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `([C)V`
     */
    void println(arr_C arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `()V`
     */
    void println();

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Z)V`
     */
    void println(bool arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.String;)V`
     */
    void println(String arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void println(Object arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(D)V`
     */
    void println(double arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(F)V`
     */
    void println(float arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(J)V`
     */
    void println(long arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(I)V`
     */
    void println(int arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(C)V`
     */
    void println(char arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.CharSequence;II)Ljava.io.PrintWriter;`
     */
    PrintWriter append(CharSequence arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(C)Ljava.io.PrintWriter;`
     */
    PrintWriter append(char arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.CharSequence;)Ljava.io.PrintWriter;`
     */
    PrintWriter append(CharSequence arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;`
     */
    PrintWriter format(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;`
     */
    PrintWriter format(Locale arg0, String arg1, Object_interface arg2);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;`
     */
    PrintWriter printf(String arg0, Object_interface arg1);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;`
     */
    PrintWriter printf(Locale arg0, String arg1, Object_interface arg2);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `([CII)V`
     */
    void write(arr_C arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.String;)V`
     */
    void write(String arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void write(String arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `([C)V`
     */
    void write(arr_C arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(I)V`
     */
    void write(int arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(F)V`
     */
    void print(float arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(J)V`
     */
    void print(long arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(I)V`
     */
    void print(int arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(C)V`
     */
    void print(char arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Z)V`
     */
    void print(bool arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void print(Object arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.String;)V`
     */
    void print(String arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `([C)V`
     */
    void print(arr_C arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(D)V`
     */
    void print(double arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `()V`
     */
    void newLine();

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `(Ljava.lang.String;)Ljava.nio.charset.Charset;`
     * Throws: `java.io.UnsupportedEncodingException`
     */
    static Charset toCharset(String arg0);

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void ensureOpen();

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `()Z`
     */
    bool checkError();

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `()V`
     */
    void setError();

    /**
     * Declaring class: `java.io.PrintWriter`
     * Signature: `()V`
     */
    void clearError();
};


/**
 * Classpath: `jdk.internal.ref.PhantomCleanable`
 * Package name: `jdk.internal.ref`
 */
class PhantomCleanable : public PhantomReference {
protected:
    const inline static char *className = "jdk.internal.ref.PhantomCleanable";
public:
    STATICINITIALIZE;

    PhantomCleanable(jobject object) : PhantomReference(object) {}


    /**
     * Declaring class: `jdk.internal.ref.PhantomCleanable`
     * Signature: `()Z`
     */
    bool remove();

    /**
     * Declaring class: `jdk.internal.ref.PhantomCleanable`
     * Signature: `()V`
     */
    void insert();

    /**
     * Declaring class: `jdk.internal.ref.PhantomCleanable`
     * Signature: `()V`
     */
    void clear();

    /**
     * Declaring class: `jdk.internal.ref.PhantomCleanable`
     * Signature: `()Z`
     */
    bool enqueue();

    /**
     * Declaring class: `jdk.internal.ref.PhantomCleanable`
     * Signature: `()Z`
     */
    bool isEnqueued();

    /**
     * Declaring class: `jdk.internal.ref.PhantomCleanable`
     * Signature: `()V`
     */
    void performCleanup();

    /**
     * Declaring class: `jdk.internal.ref.PhantomCleanable`
     * Signature: `()Z`
     */
    bool isListEmpty();
};


/**
 * Classpath: `net.minecraft.util.BlockPos`
 * Package name: `net.minecraft.util`
 */
class BlockPos : public Vec3i {
protected:
    const inline static char *className = "net.minecraft.util.BlockPos";
public:
    STATICINITIALIZE;

    BlockPos(jobject object) : Vec3i(object) {}


    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Ljava.lang.Iterable;`
     */
    static Iterable getAllInBoxMutable(BlockPos arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Ljava.lang.Iterable;`
     */
    static Iterable getAllInBox(BlockPos arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos crossProduct(Vec3i arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos west();

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos west(int arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos east();

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos east(int arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos north();

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos north(int arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos south();

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos south(int arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `()J`
     */
    long toLong();

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(J)Lnet.minecraft.util.BlockPos;`
     */
    static BlockPos fromLong(long arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos subtract(Vec3i arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos add(Vec3i arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(III)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos add(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(DDD)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos add(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(Lnet.minecraft.util.EnumFacing;I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos offset(EnumFacing arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(Lnet.minecraft.util.EnumFacing;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos offset(EnumFacing arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos down();

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos down(int arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `(I)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos up(int arg0);

    /**
     * Declaring class: `net.minecraft.util.BlockPos`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos up();
};


/**
 * Classpath: `net.minecraft.nbt.NBTTagCompound`
 * Package name: `net.minecraft.nbt`
 */
class NBTTagCompound : public NBTBase {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTTagCompound";
public:
    STATICINITIALIZE;

    NBTTagCompound(jobject object) : NBTBase(object) {}


    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;[B)V`
     */
    void setByteArray(String arg0, arr_B arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;[I)V`
     */
    void setIntArray(String arg0, arr_I arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;ILjava.lang.ClassCastException;)Lnet.minecraft.crash.CrashReport;`
     */
    CrashReport createCrashReport(String arg0, int arg1, ClassCastException arg2);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.nbt.NBTTagCompound;`
     */
    NBTTagCompound getCompoundTag(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void setString(String arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.nbt.NBTBase;Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    static void writeEntry(String arg0, NBTBase arg1, DataOutput arg2);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.io.DataInput;Lnet.minecraft.nbt.NBTSizeTracker;)Ljava.lang.String;`
     * Throws: `java.io.IOException`
     */
    static String readKey(DataInput arg0, NBTSizeTracker arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.io.DataInput;Lnet.minecraft.nbt.NBTSizeTracker;)B`
     * Throws: `java.io.IOException`
     */
    static byte readType(DataInput arg0, NBTSizeTracker arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `()Ljava.util.Set;`
     */
    Set getKeySet();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)B`
     */
    byte getTagId(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)V`
     */
    void removeTag(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;I)Lnet.minecraft.nbt.NBTTagList;`
     */
    NBTTagList getTagList(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(BLjava.lang.String;Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)Lnet.minecraft.nbt.NBTBase;`
     * Throws: `java.io.IOException`
     */
    static NBTBase readNBT(byte arg0, String arg1, DataInput arg2, int arg3, NBTSizeTracker arg4);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void setInteger(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `()Z`
     */
    bool hasNoTags();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool hasKey(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;I)Z`
     */
    bool hasKey(String arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;Lnet.minecraft.nbt.NBTBase;)V`
     */
    void setTag(String arg0, NBTBase arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool getBoolean(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)B`
     */
    byte getByte(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)S`
     */
    short getShort(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)J`
     */
    long getLong(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)F`
     */
    float getFloat(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)D`
     */
    double getDouble(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void merge(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.io.DataOutput;)V`
     * Throws: `java.io.IOException`
     */
    void write(DataOutput arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V`
     * Throws: `java.io.IOException`
     */
    void read(DataInput arg0, int arg1, NBTSizeTracker arg2);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `()B`
     */
    byte getId();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    void setBoolean(String arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;B)V`
     */
    void setByte(String arg0, byte arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;S)V`
     */
    void setShort(String arg0, short arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;J)V`
     */
    void setLong(String arg0, long arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;F)V`
     */
    void setFloat(String arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;D)V`
     */
    void setDouble(String arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `()Lnet.minecraft.nbt.NBTBase;`
     */
    NBTBase copy();

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)I`
     */
    int getInteger(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.nbt.NBTBase;`
     */
    NBTBase getTag(String arg0);

    /**
     * Declaring class: `net.minecraft.nbt.NBTTagCompound`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getString(String arg0);
};


/**
 * Classpath: `com.google.common.collect.ImmutableCollection$ArrayBasedBuilder`
 * Enclosing class: `com.google.common.collect.ImmutableCollection`
 * Package name: `com.google.common.collect`
 */
class ImmutableCollection_ArrayBasedBuilder : public ImmutableCollection_Builder {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder";
public:
    STATICINITIALIZE;

    ImmutableCollection_ArrayBasedBuilder(jobject object) : ImmutableCollection_Builder(object) {}


    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$ArrayBasedBuilder`
     * Signature: `([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;`
     */
    ImmutableCollection_Builder add(Object_interface arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$ArrayBasedBuilder`
     * Signature: `(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$ArrayBasedBuilder;`
     */
    ImmutableCollection_ArrayBasedBuilder add(Object arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$ArrayBasedBuilder`
     * Signature: `(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection$Builder;`
     */
    ImmutableCollection_Builder addAll(Iterable arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection$ArrayBasedBuilder`
     * Signature: `(I)V`
     */
    void ensureCapacity(int arg0);
};


/**
 * Classpath: `com.google.common.collect.ImmutableCollection`
 * Package name: `com.google.common.collect`
 */
class ImmutableCollection : public AbstractCollection {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableCollection";
public:
    STATICINITIALIZE;

    ImmutableCollection(jobject object) : AbstractCollection(object) {}


    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection`
     * Signature: `([Ljava.lang.Object;I)I`
     */
    int copyIntoArray(Object_interface arg0, int arg1);

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection`
     * Signature: `()Z`
     */
    bool isPartialView();

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection`
     * Signature: `()Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList createAsList();

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection`
     * Signature: `()Lcom.google.common.collect.UnmodifiableIterator;`
     */
    UnmodifiableIterator iterator();

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection`
     * Signature: `()Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList asList();

    /**
     * Declaring class: `com.google.common.collect.ImmutableCollection`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();
};


/**
 * Classpath: `net.minecraft.entity.item.EntityItem`
 * Package name: `net.minecraft.entity.item`
 */
class EntityItem : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.item.EntityItem";
public:
    STATICINITIALIZE;

    EntityItem(jobject object) : Entity(object) {}


    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()Z`
     */
    bool handleWaterMovement();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void setEntityItemStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getEntityItem();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void searchForOtherItemsNearby();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Lnet.minecraft.entity.item.EntityItem;)Z`
     */
    bool combineItems(EntityItem arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void setNoPickupDelay();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void setInfinitePickupDelay();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()Z`
     */
    bool cannotPickup();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void setNoDespawn();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void func_174870_v();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onCollideWithPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(I)V`
     */
    void setPickupDelay(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()Z`
     */
    bool canAttackWithItem();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()Z`
     */
    bool canTriggerWalking();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(I)V`
     */
    void travelToDimension(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(I)V`
     */
    void dealFireDamage(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void setDefaultPickupDelay();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setThrower(String arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()I`
     */
    int getAge();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()Ljava.lang.String;`
     */
    String getThrower();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()V`
     */
    void setAgeToCreativeDespawnTime();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `()Ljava.lang.String;`
     */
    String getOwner();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItem`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setOwner(String arg0);
};


/**
 * Classpath: `net.minecraft.entity.EntityLivingBase`
 * Package name: `net.minecraft.entity`
 */
class EntityLivingBase : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.EntityLivingBase";
public:
    STATICINITIALIZE;

    EntityLivingBase(jobject object) : Entity(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void onKillCommand();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(DZLnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;)V`
     */
    void updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool canBreatheUnderwater();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void onEntityUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)I`
     */
    int decreaseAirSupply(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void onDeathUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)V`
     */
    void setRevengeTarget(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void updatePotionEffects();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool canDropLoot();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase getAITarget();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()I`
     */
    int getRevengeTimer();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase getLastAttacker();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()I`
     */
    int getLastAttackerTime();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)V`
     */
    void onFinishedPotionEffect(PotionEffect arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;Z)V`
     */
    void onChangedPotionEffect(PotionEffect arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void updatePotionMetadata();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void resetPotionEffectMetadata();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void clearActivePotions();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Ljava.util.Collection;`
     */
    Collection getActivePotionEffects();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)V`
     */
    void addPotionEffect(PotionEffect arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)Z`
     */
    bool isPotionApplicable(PotionEffect arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)V`
     */
    void onNewPotionEffect(PotionEffect arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isEntityUndead();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)V`
     */
    void removePotionEffectClient(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)V`
     */
    void removePotionEffect(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void setBeenAttacked();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getSoundVolume();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getSoundPitch();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void renderBrokenItemStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase func_94060_bK();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(ZI)V`
     */
    void dropFewItems(bool arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(ZI)V`
     */
    void dropEquipment(bool arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void addRandomDrop();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void performHurtAnimation();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()I`
     */
    int getArrowCountInEntity();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)V`
     */
    void setArrowCountInEntity(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()I`
     */
    int getArmSwingAnimationEnd();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void dismountEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getJumpUpwardsMotion();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void updateAITick();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void handleJumpLava();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isServerWorld();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool attackEntityAsMob(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(FF)F`
     */
    float func_110146_f(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void collideWithNearbyEntities();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void collideWithEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(DDDFFIZ)V`
     */
    void setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;I)V`
     */
    void onItemPickup(Entity arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool canEntityBeSeen(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)F`
     */
    float getSwingProgress(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool canBeCollidedWith();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool canBePushed();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getRotationYawHead();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)V`
     */
    void setRotationYawHead(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)V`
     */
    void func_181013_g(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)Z`
     */
    bool isOnSameTeam(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void sendEnterCombat();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void sendEndCombat();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void markPotionsDirty();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void applyEntityAttributes();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.entity.ai.attributes.BaseAttributeMap;`
     */
    BaseAttributeMap getAttributeMap();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;`
     */
    IAttributeInstance getEntityAttribute(IAttribute arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isEntityAlive();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(B)V`
     */
    void handleStatusUpdate(byte arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isMovementBlocked();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void updateRidden();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void mountEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getMaxHealth();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void updateEntityActionState();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void updateArmSwingProgress();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void onLivingUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)V`
     */
    void setAIMoveSpeed(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Ljava.lang.String;`
     */
    String getHurtSound();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Ljava.lang.String;`
     */
    String getDeathSound();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)Z`
     */
    bool isPotionActive(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.potion.Potion;)Z`
     */
    bool isPotionActive(Potion arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.potion.Potion;)Lnet.minecraft.potion.PotionEffect;`
     */
    PotionEffect getActivePotionEffect(Potion arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)V`
     */
    void damageArmor(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()I`
     */
    int getTotalArmorValue();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)V`
     */
    void damageEntity(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)F`
     */
    float applyArmorCalculations(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getAbsorptionAmount();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)V`
     */
    void setAbsorptionAmount(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.util.CombatTracker;`
     */
    CombatTracker getCombatTracker();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getHeldItem();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.entity.EnumCreatureAttribute;`
     */
    EnumCreatureAttribute getCreatureAttribute();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Z)V`
     */
    void setSprinting(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void setLastAttacker(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(FF)V`
     */
    void moveEntityWithHeading(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getAIMoveSpeed();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getFallSoundString(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getCurrentArmor(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)I`
     */
    int getExperiencePoints(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getEquipmentInSlot(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(ILnet.minecraft.item.ItemStack;)V`
     */
    void setCurrentItemOrArmor(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isPlayerSleeping();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)V`
     */
    void setHealth(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)V`
     */
    void heal(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.util.DamageSource;)V`
     */
    void onDeath(DamageSource arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.scoreboard.Team;`
     */
    Team getTeam();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isOnLadder();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(FF)V`
     */
    void fall(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isPlayer();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool isChild();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Ljava.util.Random;`
     */
    Random getRNG();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()I`
     */
    int getAge();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.entity.Entity;FDD)V`
     */
    void knockBack(Entity arg0, float arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void kill();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Z)V`
     */
    void setJumping(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Lnet.minecraft.util.Vec3;`
     */
    Vec3 getLookVec();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(F)Lnet.minecraft.util.Vec3;`
     */
    Vec3 getLook(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.scoreboard.Team;)Z`
     */
    bool isOnTeam(Team arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()F`
     */
    float getHealth();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void swingItem();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)F`
     */
    float applyPotionDamageCalculations(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()Z`
     */
    bool getAlwaysRenderNameTagForRender();

    /**
     * Declaring class: `net.minecraft.entity.EntityLivingBase`
     * Signature: `()V`
     */
    void jump();
};


/**
 * Classpath: `net.minecraft.entity.projectile.EntityArrow`
 * Package name: `net.minecraft.entity.projectile`
 */
class EntityArrow : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.projectile.EntityArrow";
public:
    STATICINITIALIZE;

    EntityArrow(jobject object) : Entity(object) {}


    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(DDDFFIZ)V`
     */
    void setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `()Z`
     */
    bool getIsCritical();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(Z)V`
     */
    void setIsCritical(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(I)V`
     */
    void setKnockbackStrength(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `()F`
     */
    float getEyeHeight();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void onCollideWithPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `()Z`
     */
    bool canAttackWithItem();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `()Z`
     */
    bool canTriggerWalking();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(DDD)V`
     */
    void setVelocity(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `(D)V`
     */
    void setDamage(double arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `()D`
     */
    double getDamage();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityArrow`
     * Signature: `()V`
     */
    void onUpdate();
};


/**
 * Classpath: `net.minecraft.entity.projectile.EntityFireball`
 * Package name: `net.minecraft.entity.projectile`
 */
class EntityFireball : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.projectile.EntityFireball";
public:
    STATICINITIALIZE;

    EntityFireball(jobject object) : Entity(object) {}


    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `()Z`
     */
    bool canBeCollidedWith();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `()F`
     */
    float getMotionFactor();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `(F)I`
     */
    int getBrightnessForRender(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `(F)F`
     */
    float getBrightness(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `(D)Z`
     */
    bool isInRangeToRenderDist(double arg0);

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `()F`
     */
    float getCollisionBorderSize();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.projectile.EntityFireball`
     * Signature: `(Lnet.minecraft.util.MovingObjectPosition;)V`
     */
    void onImpact(MovingObjectPosition arg0);
};


/**
 * Classpath: `net.minecraft.inventory.AnimalChest`
 * Package name: `net.minecraft.inventory`
 */
class AnimalChest : public InventoryBasic {
protected:
    const inline static char *className = "net.minecraft.inventory.AnimalChest";
public:
    STATICINITIALIZE;

    AnimalChest(jobject object) : InventoryBasic(object) {}

};


/**
 * Classpath: `net.minecraft.entity.EntityLiving`
 * Package name: `net.minecraft.entity`
 */
class EntityLiving : public EntityLivingBase {
protected:
    const inline static char *className = "net.minecraft.entity.EntityLiving";
public:
    STATICINITIALIZE;

    EntityLiving(jobject object) : EntityLivingBase(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void onEntityUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(ZI)V`
     */
    void dropFewItems(bool arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(ZI)V`
     */
    void dropEquipment(bool arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool isServerWorld();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(FF)F`
     */
    float func_110146_f(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool isNoDespawnRequired();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.entity.Entity;Z)V`
     */
    void setLeashedToEntity(Entity arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(ZZ)V`
     */
    void clearLeashed(bool arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool canPickUpLoot();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.world.World;)Lnet.minecraft.pathfinding.PathNavigate;`
     */
    PathNavigate getNewNavigator(World arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.entity.ai.EntityLookHelper;`
     */
    EntityLookHelper getLookHelper();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.entity.ai.EntityMoveHelper;`
     */
    EntityMoveHelper getMoveHelper();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.entity.ai.EntityJumpHelper;`
     */
    EntityJumpHelper getJumpHelper();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.entity.ai.EntitySenses;`
     */
    EntitySenses getEntitySenses();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.entity.EntityLivingBase;`
     */
    EntityLivingBase getAttackTarget();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)V`
     */
    void setAttackTarget(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Ljava.lang.Class;)Z`
     */
    bool canAttackClass(Class arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void eatGrassBonus();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void playLivingSound();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void spawnExplosionParticle();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool isAIDisabled();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Z)V`
     */
    void setCanPickUpLoot(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(F)V`
     */
    void setMoveForward(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.entity.item.EntityItem;)V`
     */
    void updateEquipmentIfNeeded(EntityItem arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool func_175448_a(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void despawnEntity();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()I`
     */
    int getVerticalFaceSpeed();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(FFF)F`
     */
    float updateRotation(float arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool isNotColliding();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()F`
     */
    float getRenderSizeModifier();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(II)Lnet.minecraft.item.Item;`
     */
    static Item getArmorItemForSlot(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool canBeSteered();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void enablePersistence();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(IF)V`
     */
    void setEquipmentDropChance(int arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void recreateLeash();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.pathfinding.PathNavigate;`
     */
    PathNavigate getNavigator();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool allowLeashing();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool getCanSpawnHere();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.item.Item;`
     */
    Item getDropItem();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Ljava.lang.String;`
     */
    String getLivingSound();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()I`
     */
    int getMaxSpawnedInChunk();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()I`
     */
    int getTalkInterval();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.world.DifficultyInstance;Lnet.minecraft.entity.IEntityLivingData;)Lnet.minecraft.entity.IEntityLivingData;`
     */
    IEntityLivingData onInitialSpawn(DifficultyInstance arg0, IEntityLivingData arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void updateAITasks();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void updateLeashedState();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.entity.Entity;`
     */
    Entity getLeashedToEntity();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void applyEntityAttributes();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(B)V`
     */
    void handleStatusUpdate(byte arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void updateEntityActionState();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void onLivingUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(F)V`
     */
    void setAIMoveSpeed(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool interactFirst(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getHeldItem();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getCurrentArmor(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)I`
     */
    int getExperiencePoints(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getEquipmentInSlot(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(ILnet.minecraft.item.ItemStack;)V`
     */
    void setCurrentItemOrArmor(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(ILnet.minecraft.item.ItemStack;)Z`
     */
    bool replaceItemInInventory(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    static int getArmorPosition(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()I`
     */
    int getMaxFallHeight();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool interact(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool canDespawn();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `()Z`
     */
    bool getLeashed();

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Z)V`
     */
    void setNoAI(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.entity.Entity;FF)V`
     */
    void faceEntity(Entity arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.world.DifficultyInstance;)V`
     */
    void setEquipmentBasedOnDifficulty(DifficultyInstance arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityLiving`
     * Signature: `(Lnet.minecraft.world.DifficultyInstance;)V`
     */
    void setEnchantmentBasedOnDifficulty(DifficultyInstance arg0);
};


/**
 * Classpath: `com.google.common.collect.ForwardingMultimap`
 * Package name: `com.google.common.collect`
 */
class ForwardingMultimap : public ForwardingObject {
protected:
    const inline static char *className = "com.google.common.collect.ForwardingMultimap";
public:
    STATICINITIALIZE;

    ForwardingMultimap(jobject object) : ForwardingObject(object) {}


    /**
     * Declaring class: `com.google.common.collect.ForwardingMultimap`
     * Signature: `()Lcom.google.common.collect.Multimap;`
     */
    Multimap delegate();
};


/**
 * Classpath: `net.minecraft.entity.EntityHanging`
 * Package name: `net.minecraft.entity`
 */
class EntityHanging : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.EntityHanging";
public:
    STATICINITIALIZE;

    EntityHanging(jobject object) : Entity(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()Z`
     */
    bool canBeCollidedWith();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()I`
     */
    int getWidthPixels();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()I`
     */
    int getHeightPixels();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()V`
     */
    void updateBoundingBox();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(I)D`
     */
    double func_174858_a(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()Z`
     */
    bool onValidSurface();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getHangingPosition();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(DDD)V`
     */
    void setPosition(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool hitByEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(DDD)V`
     */
    void addVelocity(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()Z`
     */
    bool shouldSetPosAfterLoading();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()Lnet.minecraft.util.EnumFacing;`
     */
    EnumFacing getHorizontalFacing();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onBroken(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(DDD)V`
     */
    void moveEntity(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.EntityHanging`
     * Signature: `(Lnet.minecraft.util.EnumFacing;)V`
     */
    void updateFacingWithBoundingBox(EnumFacing arg0);
};


/**
 * Classpath: `net.minecraft.block.BlockBush`
 * Package name: `net.minecraft.block`
 */
class BlockBush : public Block {
protected:
    const inline static char *className = "net.minecraft.block.BlockBush";
public:
    STATICINITIALIZE;

    BlockBush(jobject object) : Block(object) {}


    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.block.Block;)V`
     */
    void onNeighborBlockChange(World arg0, BlockPos arg1, IBlockState arg2, Block arg3);

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `()Lnet.minecraft.util.EnumWorldBlockLayer;`
     */
    EnumWorldBlockLayer getBlockLayer();

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canPlaceBlockAt(World arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `()Z`
     */
    bool isOpaqueCube();

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V`
     */
    void checkAndDropBlock(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Z`
     */
    bool canBlockStay(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool canPlaceBlockOn(Block arg0);

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.util.AxisAlignedBB;`
     */
    AxisAlignedBB getCollisionBoundingBox(World arg0, BlockPos arg1, IBlockState arg2);

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `()Z`
     */
    bool isFullCube();

    /**
     * Declaring class: `net.minecraft.block.BlockBush`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V`
     */
    void updateTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3);
};


/**
 * Classpath: `net.minecraft.entity.effect.EntityWeatherEffect`
 * Package name: `net.minecraft.entity.effect`
 */
class EntityWeatherEffect : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.effect.EntityWeatherEffect";
public:
    STATICINITIALIZE;

    EntityWeatherEffect(jobject object) : Entity(object) {}

};


/**
 * Classpath: `net.minecraft.world.WorldServer`
 * Package name: `net.minecraft.world`
 */
class WorldServer : public World {
protected:
    const inline static char *className = "net.minecraft.world.WorldServer";
public:
    STATICINITIALIZE;

    WorldServer(jobject object) : World(object) {}


    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.Entity;B)V`
     */
    void setEntityState(Entity arg0, byte arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Lnet.minecraft.entity.EntityTracker;`
     */
    EntityTracker getEntityTracker();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Lnet.minecraft.world.chunk.IChunkProvider;`
     */
    IChunkProvider createChunkProvider();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)Z`
     */
    bool isBlockTickPending(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool addWeatherEffect(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityAdded(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityRemoved(Entity arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;I)V`
     */
    void scheduleUpdate(BlockPos arg0, Block arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V`
     */
    void updateBlockTick(BlockPos arg0, Block arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V`
     */
    void scheduleBlockUpdate(BlockPos arg0, Block arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.Entity;DDDFZZ)Lnet.minecraft.world.Explosion;`
     */
    Explosion newExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Z`
     */
    bool canSpawnAnimals();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Z`
     */
    bool canSpawnNPCs();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(ZLnet.minecraft.util.IProgressUpdate;)V`
     * Throws: `net.minecraft.world.MinecraftException`
     */
    void saveAllChunks(bool arg0, IProgressUpdate arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void wakeAllPlayers();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Z`
     */
    bool areAllPlayersAsleep();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Ljava.util.UUID;)Lnet.minecraft.entity.Entity;`
     */
    Entity getEntityFromUuid(UUID arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void updateWeather();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()I`
     */
    int getRenderDistanceChunks();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void updateBlocks();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Z)Z`
     */
    bool tickUpdates(bool arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.world.chunk.Chunk;Z)Ljava.util.List;`
     */
    List getPendingBlockUpdates(Chunk arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.world.gen.structure.StructureBoundingBox;Z)Ljava.util.List;`
     */
    List func_175712_a(StructureBoundingBox arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isBlockModifiable(EntityPlayer arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V`
     */
    void addBlockEvent(BlockPos arg0, Block arg1, int arg2, int arg3);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.EnumCreatureType;Lnet.minecraft.world.biome.BiomeGenBase$SpawnListEntry;Lnet.minecraft.util.BlockPos;)Z`
     */
    bool canCreatureTypeSpawnHere(EnumCreatureType arg0, BiomeGenBase_SpawnListEntry arg1, BlockPos arg2);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void resetRainAndThunder();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;`
     */
    BlockPos adjustPosToNearbyEntity(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(IIIIII)Ljava.util.List;`
     */
    List getTileEntitiesIn(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.world.WorldSettings;)V`
     */
    void createSpawnPosition(WorldSettings arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void setDebugWorldSettings();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void createBonusChest();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getSpawnCoordinate();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void saveChunkData();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.block.BlockEventData;)Z`
     */
    bool fireBlockEvent(BlockEventData arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Lnet.minecraft.server.management.PlayerManager;`
     */
    PlayerManager getPlayerManager();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Lnet.minecraft.world.Teleporter;`
     */
    Teleporter getDefaultTeleporter();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.EnumCreatureType;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.biome.BiomeGenBase$SpawnListEntry;`
     */
    BiomeGenBase_SpawnListEntry getSpawnListEntryForTypeAt(EnumCreatureType arg0, BlockPos arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void sendQueuedBlockEvents();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.EnumParticleTypes;ZDDDIDDDD[I)V`
     */
    void spawnParticle(EnumParticleTypes arg0, bool arg1, double arg2, double arg3, double arg4, int arg5, double arg6, double arg7, double arg8, double arg9, arr_I arg10);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.util.EnumParticleTypes;DDDIDDDD[I)V`
     */
    void spawnParticle(EnumParticleTypes arg0, double arg1, double arg2, double arg3, int arg4, double arg5, double arg6, double arg7, double arg8, arr_I arg9);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Lnet.minecraft.server.MinecraftServer;`
     */
    MinecraftServer getMinecraftServer();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void resetUpdateEntityTick();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void updateEntities();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void setInitialSpawnLocation();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     * Throws: `net.minecraft.world.MinecraftException`
     */
    void saveLevel();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void tick();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.entity.Entity;Z)V`
     */
    void updateEntityWithOptionalForce(Entity arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void updateAllPlayersSleepingFlag();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()V`
     */
    void flush();

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `(Lnet.minecraft.world.WorldSettings;)V`
     */
    void initialize(WorldSettings arg0);

    /**
     * Declaring class: `net.minecraft.world.WorldServer`
     * Signature: `()Lnet.minecraft.world.World;`
     */
    World init();
};


/**
 * Classpath: `net.minecraft.world.biome.BiomeGenBase$SpawnListEntry`
 * Enclosing class: `net.minecraft.world.biome.BiomeGenBase`
 * Package name: `net.minecraft.world.biome`
 */
class BiomeGenBase_SpawnListEntry : public WeightedRandom_Item {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase$SpawnListEntry";
public:
    STATICINITIALIZE;

    BiomeGenBase_SpawnListEntry(jobject object) : WeightedRandom_Item(object) {}


    /**
     * Declaring class: `net.minecraft.world.biome.BiomeGenBase$SpawnListEntry`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();
};


/**
 * Classpath: `net.minecraft.server.management.UserListBans`
 * Package name: `net.minecraft.server.management`
 */
class UserListBans : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListBans";
public:
    STATICINITIALIZE;

    UserListBans(jobject object) : UserList(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.UserListBans`
     * Signature: `(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;`
     */
    UserListEntry createEntry(JsonObject arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListBans`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;`
     */
    String getObjectKey(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListBans`
     * Signature: `(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile isUsernameBanned(String arg0);

    /**
     * Declaring class: `net.minecraft.server.management.UserListBans`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Z`
     */
    bool isBanned(GameProfile arg0);
};


/**
 * Classpath: `com.google.gson.JsonObject`
 * Package name: `com.google.gson`
 */
class JsonObject : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonObject";
public:
    STATICINITIALIZE;

    JsonObject(jobject object) : JsonElement(object) {}


    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.Object;)Lcom.google.gson.JsonElement;`
     */
    JsonElement createJsonElement(Object arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;)Lcom.google.gson.JsonArray;`
     */
    JsonArray getAsJsonArray(String arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;)Lcom.google.gson.JsonObject;`
     */
    JsonObject getAsJsonObject(String arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;)Lcom.google.gson.JsonPrimitive;`
     */
    JsonPrimitive getAsJsonPrimitive(String arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;Ljava.lang.Character;)V`
     */
    void addProperty(String arg0, Character arg1);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;Ljava.lang.Boolean;)V`
     */
    void addProperty(String arg0, Boolean arg1);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void addProperty(String arg0, String arg1);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;Ljava.lang.Number;)V`
     */
    void addProperty(String arg0, Number arg1);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;)Z`
     */
    bool has(String arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `()Lcom.google.gson.JsonObject;`
     */
    JsonObject deepCopy();

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;Lcom.google.gson.JsonElement;)V`
     */
    void add(String arg0, JsonElement arg1);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;)Lcom.google.gson.JsonElement;`
     */
    JsonElement remove(String arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.String;)Lcom.google.gson.JsonElement;`
     */
    JsonElement get(String arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `()I`
     */
    int hashCode();

    /**
     * Declaring class: `com.google.gson.JsonObject`
     * Signature: `()Ljava.util.Set;`
     */
    Set entrySet();
};


/**
 * Classpath: `net.minecraft.server.management.IPBanEntry`
 * Package name: `net.minecraft.server.management`
 */
class IPBanEntry : public BanEntry {
protected:
    const inline static char *className = "net.minecraft.server.management.IPBanEntry";
public:
    STATICINITIALIZE;

    IPBanEntry(jobject object) : BanEntry(object) {}


    /**
     * Declaring class: `net.minecraft.server.management.IPBanEntry`
     * Signature: `(Lcom.google.gson.JsonObject;)V`
     */
    void onSerialization(JsonObject arg0);

    /**
     * Declaring class: `net.minecraft.server.management.IPBanEntry`
     * Signature: `(Lcom.google.gson.JsonObject;)Ljava.lang.String;`
     */
    static String getIPFromJson(JsonObject arg0);
};


/**
 * Classpath: `net.minecraft.stats.StatisticsFile`
 * Package name: `net.minecraft.stats`
 */
class StatisticsFile : public StatFileWriter {
protected:
    const inline static char *className = "net.minecraft.stats.StatisticsFile";
public:
    STATICINITIALIZE;

    StatisticsFile(jobject object) : StatFileWriter(object) {}


    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `()V`
     */
    void readStatFile();

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `()V`
     */
    void saveStatFile();

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `()Ljava.util.Set;`
     */
    Set func_150878_c();

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `()V`
     */
    void func_150877_d();

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void sendAchievements(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.stats.StatBase;I)V`
     */
    void unlockAchievement(EntityPlayer arg0, StatBase arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `()Z`
     */
    bool func_150879_e();

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)V`
     */
    void func_150876_a(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `(Ljava.lang.String;)Ljava.util.Map;`
     */
    Map parseJson(String arg0);

    /**
     * Declaring class: `net.minecraft.stats.StatisticsFile`
     * Signature: `(Ljava.util.Map;)Ljava.lang.String;`
     */
    static String dumpJson(Map arg0);
};


/**
 * Classpath: `io.netty.channel.ChannelInboundHandlerAdapter`
 * Package name: `io.netty.channel`
 */
class ChannelInboundHandlerAdapter : public ChannelHandlerAdapter {
protected:
    const inline static char *className = "io.netty.channel.ChannelInboundHandlerAdapter";
public:
    STATICINITIALIZE;

    ChannelInboundHandlerAdapter(jobject object) : ChannelHandlerAdapter(object) {}

};


/**
 * Classpath: `net.minecraft.command.ServerCommandManager`
 * Package name: `net.minecraft.command`
 */
class ServerCommandManager : public CommandHandler {
protected:
    const inline static char *className = "net.minecraft.command.ServerCommandManager";
public:
    STATICINITIALIZE;

    ServerCommandManager(jobject object) : CommandHandler(object) {}

};


/**
 * Classpath: `net.minecraft.client.renderer.texture.DynamicTexture`
 * Package name: `net.minecraft.client.renderer.texture`
 */
class DynamicTexture : public AbstractTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.DynamicTexture";
public:
    STATICINITIALIZE;

    DynamicTexture(jobject object) : AbstractTexture(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.texture.DynamicTexture`
     * Signature: `()V`
     */
    void updateDynamicTexture();
};


/**
 * Classpath: `net.minecraft.client.renderer.ThreadDownloadImageData`
 * Package name: `net.minecraft.client.renderer`
 */
class ThreadDownloadImageData : public SimpleTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ThreadDownloadImageData";
public:
    STATICINITIALIZE;

    ThreadDownloadImageData(jobject object) : SimpleTexture(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.ThreadDownloadImageData`
     * Signature: `()V`
     */
    void checkTextureUploaded();

    /**
     * Declaring class: `net.minecraft.client.renderer.ThreadDownloadImageData`
     * Signature: `(Ljava.awt.image.BufferedImage;)V`
     */
    void setBufferedImage(BufferedImage arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.ThreadDownloadImageData`
     * Signature: `()V`
     */
    void loadTextureFromServer();
};


/**
 * Classpath: `java.awt.image.BufferedImage`
 * Package name: `java.awt.image`
 */
class BufferedImage : public Image {
protected:
    const inline static char *className = "java.awt.image.BufferedImage";
public:
    STATICINITIALIZE;

    BufferedImage(jobject object) : Image(object) {}


    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `(II)I`
     */
    int getRGB(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()Ljava.awt.image.WritableRaster;`
     */
    WritableRaster getRaster();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `(IIII[III)V`
     */
    void setRGB(int arg0, int arg1, int arg2, int arg3, arr_I arg4, int arg5, int arg6);

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `(III)V`
     */
    void setRGB(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()Ljava.awt.Graphics;`
     */
    Graphics getGraphics();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `(IIII)Ljava.awt.image.BufferedImage;`
     */
    BufferedImage getSubimage(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()I`
     */
    int getType();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()Ljava.awt.image.ImageProducer;`
     */
    ImageProducer getSource();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()Z`
     */
    bool isAlphaPremultiplied();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `(Ljava.awt.image.ColorModel;Ljava.awt.image.WritableRaster;)Z`
     */
    static bool isStandard(ColorModel arg0, WritableRaster arg1);

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `(Z)V`
     */
    void coerceData(bool arg0);

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()Ljava.awt.image.WritableRaster;`
     */
    WritableRaster getAlphaRaster();

    /**
     * Declaring class: `java.awt.image.BufferedImage`
     * Signature: `()Ljava.awt.Graphics2D;`
     */
    Graphics2D createGraphics();
};


/**
 * Classpath: `java.awt.image.WritableRaster`
 * Package name: `java.awt.image`
 */
class WritableRaster : public Raster {
protected:
    const inline static char *className = "java.awt.image.WritableRaster";
public:
    STATICINITIALIZE;

    WritableRaster(jobject object) : Raster(object) {}


    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IILjava.awt.image.Raster;)V`
     */
    void setRect(int arg0, int arg1, Raster arg2);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(Ljava.awt.image.Raster;)V`
     */
    void setRect(Raster arg0);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(II[D)V`
     */
    void setPixel(int arg0, int arg1, arr_D arg2);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(II[I)V`
     */
    void setPixel(int arg0, int arg1, arr_I arg2);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(II[F)V`
     */
    void setPixel(int arg0, int arg1, arr_F arg2);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIII)V`
     */
    void setSample(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIID)V`
     */
    void setSample(int arg0, int arg1, int arg2, double arg3);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIIF)V`
     */
    void setSample(int arg0, int arg1, int arg2, float arg3);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIIII[D)V`
     */
    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_D arg5);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIIII[F)V`
     */
    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_F arg5);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIIII[I)V`
     */
    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `()Ljava.awt.image.WritableRaster;`
     */
    WritableRaster getWritableParent();

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(II)Ljava.awt.image.WritableRaster;`
     */
    WritableRaster createWritableTranslatedChild(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIIILjava.lang.Object;)V`
     */
    void setDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IILjava.lang.Object;)V`
     */
    void setDataElements(int arg0, int arg1, Object arg2);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IILjava.awt.image.Raster;)V`
     */
    void setDataElements(int arg0, int arg1, Raster arg2);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIIIII[I)Ljava.awt.image.WritableRaster;`
     */
    WritableRaster createWritableChild(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, arr_I arg6);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIII[I)V`
     */
    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_I arg4);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIII[F)V`
     */
    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_F arg4);

    /**
     * Declaring class: `java.awt.image.WritableRaster`
     * Signature: `(IIII[D)V`
     */
    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_D arg4);
};


/**
 * Classpath: `java.awt.Point`
 * Package name: `java.awt`
 */
class Point : public Point2D {
protected:
    const inline static char *className = "java.awt.Point";
public:
    STATICINITIALIZE;

    Point(jobject object) : Point2D(object) {}


    /**
     * Declaring class: `java.awt.Point`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `(II)V`
     */
    void translate(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `(II)V`
     */
    void setLocation(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void setLocation(Point arg0);

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `(DD)V`
     */
    void setLocation(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocation();

    /**
     * Declaring class: `java.awt.Point`
     * Signature: `(II)V`
     */
    void move(int arg0, int arg1);
};


/**
 * Classpath: `java.awt.geom.Rectangle2D`
 * Package name: `java.awt.geom`
 */
class Rectangle2D : public RectangularShape {
protected:
    const inline static char *className = "java.awt.geom.Rectangle2D";
public:
    STATICINITIALIZE;

    Rectangle2D(jobject object) : RectangularShape(object) {}


    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;)V`
     */
    static void union_(Rectangle2D arg0, Rectangle2D arg1, Rectangle2D arg2);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;)V`
     */
    static void intersect(Rectangle2D arg0, Rectangle2D arg1, Rectangle2D arg2);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)V`
     */
    void setRect(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(DDDD)V`
     */
    void setRect(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Point2D;)I`
     */
    int outcode(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(DD)I`
     */
    int outcode(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D createIntersection(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D createUnion(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(DDDD)Z`
     */
    bool intersectsLine(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Line2D;)Z`
     */
    bool intersectsLine(Line2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(DDDD)V`
     */
    void setFrame(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)V`
     */
    void add(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.awt.geom.Point2D;)V`
     */
    void add(Point2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(DD)V`
     */
    void add(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D`
     * Signature: `()I`
     */
    int hashCode();
};


/**
 * Classpath: `java.util.Hashtable`
 * Package name: `java.util`
 */
class Hashtable : public Dictionary {
protected:
    const inline static char *className = "java.util.Hashtable";
public:
    STATICINITIALIZE;

    Hashtable(jobject object) : Dictionary(object) {}


    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool contains(Object arg0);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration elements();

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration keys();

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `()Ljava.util.Hashtable;`
     */
    Hashtable cloneHashtable();

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(Ljava.io.ObjectOutputStream;IF)V`
     * Throws: `java.io.IOException`
     */
    void defaultWriteHashtable(ObjectOutputStream arg0, int arg1, float arg2);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `()V`
     */
    void rehash();

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeHashtable(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readHashtable(ObjectInputStream arg0);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(I)Ljava.util.Enumeration;`
     */
    Enumeration getEnumeration(int arg0);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(ILjava.lang.Object;Ljava.lang.Object;I)V`
     */
    void addEntry(int arg0, Object arg1, Object arg2, int arg3);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `([Ljava.util.Hashtable$Entry;Ljava.lang.Object;Ljava.lang.Object;)V`
     * Throws: `java.io.StreamCorruptedException`
     */
    void reconstitutionPut(Hashtable_Entry_interface arg0, Object arg1, Object arg2);

    /**
     * Declaring class: `java.util.Hashtable`
     * Signature: `(I)Ljava.util.Iterator;`
     */
    Iterator getIterator(int arg0);
};


/**
 * Classpath: `java.awt.AWTEvent`
 * Package name: `java.awt`
 */
class AWTEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.AWTEvent";
public:
    STATICINITIALIZE;

    AWTEvent(jobject object) : EventObject(object) {}


    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()V`
     */
    void consume();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()Z`
     */
    bool isConsumed();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()Ljava.awt.Event;`
     */
    Event convertToOld();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void copyPrivateDataInto(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()Ljava.security.AccessControlContext;`
     */
    AccessControlContext getAccessControlContext();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `(Ljava.awt.peer.ComponentPeer;)V`
     */
    void nativeSetSource(ComponentPeer arg0);

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `(Ljava.lang.Object;)V`
     */
    void setSource(Object arg0);

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()V`
     */
    void dispatched();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.AWTEvent`
     * Signature: `()I`
     */
    int getID();
};


/**
 * Classpath: `java.awt.event.ComponentEvent`
 * Package name: `java.awt.event`
 */
class ComponentEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.ComponentEvent";
public:
    STATICINITIALIZE;

    ComponentEvent(jobject object) : AWTEvent(object) {}


    /**
     * Declaring class: `java.awt.event.ComponentEvent`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getComponent();

    /**
     * Declaring class: `java.awt.event.ComponentEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.awt.BufferCapabilities$FlipContents`
 * Enclosing class: `java.awt.BufferCapabilities`
 * Package name: `java.awt`
 */
class BufferCapabilities_FlipContents : public AttributeValue {
protected:
    const inline static char *className = "java.awt.BufferCapabilities$FlipContents";
public:
    STATICINITIALIZE;

    BufferCapabilities_FlipContents(jobject object) : AttributeValue(object) {}

};


/**
 * Classpath: `java.awt.event.ContainerEvent`
 * Package name: `java.awt.event`
 */
class ContainerEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.ContainerEvent";
public:
    STATICINITIALIZE;

    ContainerEvent(jobject object) : ComponentEvent(object) {}


    /**
     * Declaring class: `java.awt.event.ContainerEvent`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getContainer();

    /**
     * Declaring class: `java.awt.event.ContainerEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.event.ContainerEvent`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getChild();
};


/**
 * Classpath: `javax.accessibility.AccessibleState`
 * Package name: `javax.accessibility`
 */
class AccessibleState : public AccessibleBundle {
protected:
    const inline static char *className = "javax.accessibility.AccessibleState";
public:
    STATICINITIALIZE;

    AccessibleState(jobject object) : AccessibleBundle(object) {}

};


/**
 * Classpath: `java.awt.event.FocusEvent`
 * Package name: `java.awt.event`
 */
class FocusEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.FocusEvent";
public:
    STATICINITIALIZE;

    FocusEvent(jobject object) : ComponentEvent(object) {}


    /**
     * Declaring class: `java.awt.event.FocusEvent`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getOppositeComponent();

    /**
     * Declaring class: `java.awt.event.FocusEvent`
     * Signature: `()Z`
     */
    bool isTemporary();

    /**
     * Declaring class: `java.awt.event.FocusEvent`
     * Signature: `()Ljava.awt.event.FocusEvent$Cause;`
     */
    FocusEvent_Cause getCause();

    /**
     * Declaring class: `java.awt.event.FocusEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.event.FocusEvent`
     * Signature: `()Ljava.lang.Object;`
     * Throws: `java.io.ObjectStreamException`
     */
    Object readResolve();
};


/**
 * Classpath: `java.awt.event.InputMethodEvent`
 * Package name: `java.awt.event`
 */
class InputMethodEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.InputMethodEvent";
public:
    STATICINITIALIZE;

    InputMethodEvent(jobject object) : AWTEvent(object) {}


    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()Ljava.text.AttributedCharacterIterator;`
     */
    AttributedCharacterIterator getText();

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()V`
     */
    void consume();

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `(Ljava.lang.Object;)J`
     */
    static long getMostRecentEventTimeForSource(Object arg0);

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()I`
     */
    int getCommittedCharacterCount();

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()Ljava.awt.font.TextHitInfo;`
     */
    TextHitInfo getCaret();

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()Ljava.awt.font.TextHitInfo;`
     */
    TextHitInfo getVisiblePosition();

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()Z`
     */
    bool isConsumed();

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()J`
     */
    long getWhen();

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.event.InputMethodEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.awt.event.HierarchyEvent`
 * Package name: `java.awt.event`
 */
class HierarchyEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.HierarchyEvent";
public:
    STATICINITIALIZE;

    HierarchyEvent(jobject object) : AWTEvent(object) {}


    /**
     * Declaring class: `java.awt.event.HierarchyEvent`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getChanged();

    /**
     * Declaring class: `java.awt.event.HierarchyEvent`
     * Signature: `()Ljava.awt.Component;`
     */
    Component getComponent();

    /**
     * Declaring class: `java.awt.event.HierarchyEvent`
     * Signature: `()Ljava.awt.Container;`
     */
    Container getChangedParent();

    /**
     * Declaring class: `java.awt.event.HierarchyEvent`
     * Signature: `()J`
     */
    long getChangeFlags();

    /**
     * Declaring class: `java.awt.event.HierarchyEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.awt.MenuItem`
 * Package name: `java.awt`
 */
class MenuItem : public MenuComponent {
protected:
    const inline static char *className = "java.awt.MenuItem";
public:
    STATICINITIALIZE;

    MenuItem(jobject object) : MenuComponent(object) {}


    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()V`
     */
    void enable();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Z)V`
     */
    void enable(bool arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()V`
     */
    void disable();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.event.KeyEvent;)Z`
     */
    bool handleShortcut(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.AWTEvent;)Z`
     */
    bool eventEnabled(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.AWTEvent;)V`
     */
    void processEvent(AWTEvent arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(J)V`
     */
    void enableEvents(long arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.MenuShortcut;)Ljava.awt.MenuItem;`
     */
    MenuItem getShortcutMenuItem(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Ljava.awt.MenuShortcut;`
     */
    MenuShortcut getShortcut();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()V`
     */
    void deleteShortcut();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.MenuShortcut;)V`
     */
    void deleteShortcut(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setLabel(String arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Z`
     */
    bool isItemEnabled();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(JI)V`
     */
    void doMenuEvent(long arg0, int arg1);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Ljava.lang.String;`
     */
    String getActionCommandImpl();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.event.ActionEvent;)V`
     */
    void processActionEvent(ActionEvent arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.event.ActionListener;)V`
     */
    void addActionListener(ActionListener arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.MenuShortcut;)V`
     */
    void setShortcut(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setActionCommand(String arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.awt.event.ActionListener;)V`
     */
    void removeActionListener(ActionListener arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Z)V`
     */
    void setEnabled(bool arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(J)V`
     */
    void disableEvents(long arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Ljava.lang.String;`
     */
    String getLabel();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Ljava.lang.String;`
     */
    String getActionCommand();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException, java.awt.HeadlessException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.MenuItem`
     * Signature: `()Z`
     */
    bool isEnabled();
};


/**
 * Classpath: `java.awt.event.ActionEvent`
 * Package name: `java.awt.event`
 */
class ActionEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.ActionEvent";
public:
    STATICINITIALIZE;

    ActionEvent(jobject object) : AWTEvent(object) {}


    /**
     * Declaring class: `java.awt.event.ActionEvent`
     * Signature: `()J`
     */
    long getWhen();

    /**
     * Declaring class: `java.awt.event.ActionEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String getActionCommand();

    /**
     * Declaring class: `java.awt.event.ActionEvent`
     * Signature: `()I`
     */
    int getModifiers();

    /**
     * Declaring class: `java.awt.event.ActionEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.awt.event.PaintEvent`
 * Package name: `java.awt.event`
 */
class PaintEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.PaintEvent";
public:
    STATICINITIALIZE;

    PaintEvent(jobject object) : ComponentEvent(object) {}


    /**
     * Declaring class: `java.awt.event.PaintEvent`
     * Signature: `()Ljava.awt.Rectangle;`
     */
    Rectangle getUpdateRect();

    /**
     * Declaring class: `java.awt.event.PaintEvent`
     * Signature: `(Ljava.awt.Rectangle;)V`
     */
    void setUpdateRect(Rectangle arg0);

    /**
     * Declaring class: `java.awt.event.PaintEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.awt.event.InvocationEvent`
 * Package name: `java.awt.event`
 */
class InvocationEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.InvocationEvent";
public:
    STATICINITIALIZE;

    InvocationEvent(jobject object) : AWTEvent(object) {}


    /**
     * Declaring class: `java.awt.event.InvocationEvent`
     * Signature: `()Z`
     */
    bool isDispatched();

    /**
     * Declaring class: `java.awt.event.InvocationEvent`
     * Signature: `()Ljava.lang.Throwable;`
     */
    Throwable getThrowable();

    /**
     * Declaring class: `java.awt.event.InvocationEvent`
     * Signature: `(Z)V`
     */
    void finishedDispatching(bool arg0);

    /**
     * Declaring class: `java.awt.event.InvocationEvent`
     * Signature: `()J`
     */
    long getWhen();

    /**
     * Declaring class: `java.awt.event.InvocationEvent`
     * Signature: `()Ljava.lang.Exception;`
     */
    Exception getException();

    /**
     * Declaring class: `java.awt.event.InvocationEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.util.Properties`
 * Package name: `java.util`
 */
class Properties : public Hashtable {
protected:
    const inline static char *className = "java.util.Properties";
public:
    STATICINITIALIZE;

    Properties(jobject object) : Hashtable(object) {}


    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.lang.String;)Ljava.lang.String;`
     */
    String getProperty(String arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;`
     */
    String getProperty(String arg0, String arg1);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.Reader;)V`
     * Throws: `java.io.IOException`
     */
    void load(Reader arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.InputStream;)V`
     * Throws: `java.io.IOException`
     */
    void load(InputStream arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.OutputStream;Ljava.lang.String;)V`
     * Throws: `java.io.IOException`
     */
    void store(OutputStream arg0, String arg1);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.Writer;Ljava.lang.String;)V`
     * Throws: `java.io.IOException`
     */
    void store(Writer arg0, String arg1);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool contains(Object arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.PrintStream;)V`
     */
    void list(PrintStream arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.PrintWriter;)V`
     */
    void list(PrintWriter arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration elements();

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.Object;`
     */
    Object setProperty(String arg0, String arg1);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.util.Properties$LineReader;)V`
     * Throws: `java.io.IOException`
     */
    void load0(Properties_LineReader arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.util.Map;)V`
     */
    void enumerate(Map arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `([CIILjava.lang.StringBuilder;)Ljava.lang.String;`
     */
    String loadConvert(arr_C arg0, int arg1, int arg2, StringBuilder arg3);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.BufferedWriter;Ljava.lang.String;Z)V`
     * Throws: `java.io.IOException`
     */
    void store0(BufferedWriter arg0, String arg1, bool arg2);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.BufferedWriter;Ljava.lang.String;)V`
     * Throws: `java.io.IOException`
     */
    static void writeComments(BufferedWriter arg0, String arg1);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.lang.String;ZZ)Ljava.lang.String;`
     */
    String saveConvert(String arg0, bool arg1, bool arg2);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.OutputStream;Ljava.lang.String;Ljava.lang.String;)V`
     * Throws: `java.io.IOException`
     */
    void storeToXML(OutputStream arg0, String arg1, String arg2);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.OutputStream;Ljava.lang.String;)V`
     * Throws: `java.io.IOException`
     */
    void storeToXML(OutputStream arg0, String arg1);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.OutputStream;Ljava.lang.String;Ljava.nio.charset.Charset;)V`
     * Throws: `java.io.IOException`
     */
    void storeToXML(OutputStream arg0, String arg1, Charset arg2);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration keys();

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.util.Map;)V`
     */
    void enumerateStringProperties(Map arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.OutputStream;Ljava.lang.String;)V`
     */
    void save(OutputStream arg0, String arg1);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.InputStream;)V`
     * Throws: `java.io.IOException, java.util.InvalidPropertiesFormatException`
     */
    void loadFromXML(InputStream arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration propertyNames();

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `()Ljava.util.Set;`
     */
    Set stringPropertyNames();

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `()V`
     */
    void rehash();

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeHashtable(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.util.Properties`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readHashtable(ObjectInputStream arg0);
};


/**
 * Classpath: `java.awt.dnd.DragSourceDragEvent`
 * Package name: `java.awt.dnd`
 */
class DragSourceDragEvent : public DragSourceEvent {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceDragEvent";
public:
    STATICINITIALIZE;

    DragSourceDragEvent(jobject object) : DragSourceEvent(object) {}


    /**
     * Declaring class: `java.awt.dnd.DragSourceDragEvent`
     * Signature: `()I`
     */
    int getGestureModifiers();

    /**
     * Declaring class: `java.awt.dnd.DragSourceDragEvent`
     * Signature: `()I`
     */
    int getGestureModifiersEx();

    /**
     * Declaring class: `java.awt.dnd.DragSourceDragEvent`
     * Signature: `()I`
     */
    int getUserAction();

    /**
     * Declaring class: `java.awt.dnd.DragSourceDragEvent`
     * Signature: `()I`
     */
    int getDropAction();

    /**
     * Declaring class: `java.awt.dnd.DragSourceDragEvent`
     * Signature: `()I`
     */
    int getTargetActions();

    /**
     * Declaring class: `java.awt.dnd.DragSourceDragEvent`
     * Signature: `()V`
     */
    void setNewModifiers();

    /**
     * Declaring class: `java.awt.dnd.DragSourceDragEvent`
     * Signature: `()V`
     */
    void setOldModifiers();
};


/**
 * Classpath: `java.awt.event.WindowEvent`
 * Package name: `java.awt.event`
 */
class WindowEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.WindowEvent";
public:
    STATICINITIALIZE;

    WindowEvent(jobject object) : ComponentEvent(object) {}


    /**
     * Declaring class: `java.awt.event.WindowEvent`
     * Signature: `()Ljava.awt.Window;`
     */
    Window getOppositeWindow();

    /**
     * Declaring class: `java.awt.event.WindowEvent`
     * Signature: `()Ljava.awt.Window;`
     */
    Window getWindow();

    /**
     * Declaring class: `java.awt.event.WindowEvent`
     * Signature: `()I`
     */
    int getOldState();

    /**
     * Declaring class: `java.awt.event.WindowEvent`
     * Signature: `()I`
     */
    int getNewState();

    /**
     * Declaring class: `java.awt.event.WindowEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `sun.awt.util.IdentityArrayList`
 * Package name: `sun.awt.util`
 */
class IdentityArrayList : public AbstractList {
protected:
    const inline static char *className = "sun.awt.util.IdentityArrayList";
public:
    STATICINITIALIZE;

    IdentityArrayList(jobject object) : AbstractList(object) {}


    /**
     * Declaring class: `sun.awt.util.IdentityArrayList`
     * Signature: `(I)V`
     */
    void rangeCheck(int arg0);

    /**
     * Declaring class: `sun.awt.util.IdentityArrayList`
     * Signature: `(I)V`
     */
    void ensureCapacity(int arg0);

    /**
     * Declaring class: `sun.awt.util.IdentityArrayList`
     * Signature: `()V`
     */
    void trimToSize();

    /**
     * Declaring class: `sun.awt.util.IdentityArrayList`
     * Signature: `(I)V`
     */
    void rangeCheckForAdd(int arg0);

    /**
     * Declaring class: `sun.awt.util.IdentityArrayList`
     * Signature: `(I)V`
     */
    void fastRemove(int arg0);

    /**
     * Declaring class: `sun.awt.util.IdentityArrayList`
     * Signature: `(I)Ljava.lang.String;`
     */
    String outOfBoundsMsg(int arg0);

    /**
     * Declaring class: `sun.awt.util.IdentityArrayList`
     * Signature: `(II)V`
     */
    void removeRange(int arg0, int arg1);
};


/**
 * Classpath: `java.awt.geom.Path2D$Float`
 * Enclosing class: `java.awt.geom.Path2D`
 * Package name: `java.awt.geom`
 */
class Path2D_Float : public Path2D {
protected:
    const inline static char *className = "java.awt.geom.Path2D$Float";
public:
    STATICINITIALIZE;

    Path2D_Float(jobject object) : Path2D(object) {}


    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(ZI)V`
     */
    void needRoom(bool arg0, int arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(DD)V`
     */
    void moveTo(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(FF)V`
     */
    void moveTo(float arg0, float arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(FF)V`
     */
    void lineTo(float arg0, float arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(DD)V`
     */
    void lineTo(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(FFFF)V`
     */
    void quadTo(float arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(DDDD)V`
     */
    void quadTo(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(DDDDDD)V`
     */
    void curveTo(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(FFFFFF)V`
     */
    void curveTo(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(DD)I`
     */
    int pointCrossings(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(DDDD)I`
     */
    int rectCrossings(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(I)Ljava.awt.geom.Point2D;`
     */
    Point2D getPoint(int arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(DD)V`
     */
    void append(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(FF)V`
     */
    void append(float arg0, float arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(Ljava.awt.geom.PathIterator;Z)V`
     */
    void append(PathIterator arg0, bool arg1);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `()Ljava.lang.Object;`
     */
    Object clone();

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(Ljava.awt.geom.AffineTransform;)V`
     */
    void transform(AffineTransform arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.lang.ClassNotFoundException, java.io.IOException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.geom.Path2D$Float`
     * Signature: `()V`
     */
    void trimToSize();
};


/**
 * Classpath: `java.awt.geom.Rectangle2D$Float`
 * Enclosing class: `java.awt.geom.Rectangle2D`
 * Package name: `java.awt.geom`
 */
class Rectangle2D_Float : public Rectangle2D {
protected:
    const inline static char *className = "java.awt.geom.Rectangle2D$Float";
public:
    STATICINITIALIZE;

    Rectangle2D_Float(jobject object) : Rectangle2D(object) {}


    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `()D`
     */
    double getWidth();

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `()D`
     */
    double getHeight();

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `(DDDD)V`
     */
    void setRect(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)V`
     */
    void setRect(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `(FFFF)V`
     */
    void setRect(float arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `(DD)I`
     */
    int outcode(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D createIntersection(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D createUnion(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.geom.Rectangle2D$Float`
     * Signature: `()Z`
     */
    bool isEmpty();
};


/**
 * Classpath: `net.minecraft.client.renderer.entity.RenderPlayer`
 * Package name: `net.minecraft.client.renderer.entity`
 */
class RenderPlayer : public RendererLivingEntity {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RenderPlayer";
public:
    STATICINITIALIZE;

    RenderPlayer(jobject object) : RendererLivingEntity(object) {}


    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;DDDLjava.lang.String;FD)V`
     */
    void renderOffsetLivingLabel(AbstractClientPlayer arg0, double arg1, double arg2, double arg3, String arg4, float arg5, double arg6);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;)Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getEntityTexture(AbstractClientPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `()Lnet.minecraft.client.model.ModelPlayer;`
     */
    ModelPlayer getMainModel();

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;)V`
     */
    void setModelVisibilities(AbstractClientPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;F)V`
     */
    void preRenderCallback(AbstractClientPlayer arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;DDD)V`
     */
    void renderLivingAt(AbstractClientPlayer arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;FFF)V`
     */
    void rotateCorpse(AbstractClientPlayer arg0, float arg1, float arg2, float arg3);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;)V`
     */
    void renderRightArm(AbstractClientPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;)V`
     */
    void renderLeftArm(AbstractClientPlayer arg0);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `(Lnet.minecraft.client.entity.AbstractClientPlayer;DDDFF)V`
     */
    void doRender(AbstractClientPlayer arg0, double arg1, double arg2, double arg3, float arg4, float arg5);

    /**
     * Declaring class: `net.minecraft.client.renderer.entity.RenderPlayer`
     * Signature: `()V`
     */
    void transformHeldFull3DItemLayer();
};


/**
 * Classpath: `net.minecraft.client.model.ModelBiped`
 * Package name: `net.minecraft.client.model`
 */
class ModelBiped : public ModelBase {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelBiped";
public:
    STATICINITIALIZE;

    ModelBiped(jobject object) : ModelBase(object) {}


    /**
     * Declaring class: `net.minecraft.client.model.ModelBiped`
     * Signature: `(FFFFFFLnet.minecraft.entity.Entity;)V`
     */
    void setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBiped`
     * Signature: `(Lnet.minecraft.client.model.ModelBase;)V`
     */
    void setModelAttributes(ModelBase arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBiped`
     * Signature: `(F)V`
     */
    void postRenderArm(float arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBiped`
     * Signature: `(Z)V`
     */
    void setInvisible(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelBiped`
     * Signature: `(Lnet.minecraft.entity.Entity;FFFFFF)V`
     */
    void render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6);
};


/**
 * Classpath: `net.minecraft.client.gui.GuiScreen`
 * Package name: `net.minecraft.client.gui`
 */
class GuiScreen : public Gui {
protected:
    const inline static char *className = "net.minecraft.client.gui.GuiScreen";
public:
    STATICINITIALIZE;

    GuiScreen(jobject object) : Gui(object) {}


    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(I)Z`
     */
    static bool isKeyComboCtrlX(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(I)Z`
     */
    static bool isKeyComboCtrlV(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(I)Z`
     */
    static bool isKeyComboCtrlC(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(I)Z`
     */
    static bool isKeyComboCtrlA(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Ljava.net.URI;)V`
     */
    void openWebLink(URI arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    void sendChatMessage(String arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Ljava.lang.String;)V`
     */
    void sendChatMessage(String arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(III)V`
     * Throws: `java.io.IOException`
     */
    void mouseClicked(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Lnet.minecraft.client.gui.GuiButton;)V`
     * Throws: `java.io.IOException`
     */
    void actionPerformed(GuiButton arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(III)V`
     */
    void mouseReleased(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(IIIJ)V`
     */
    void mouseClickMove(int arg0, int arg1, int arg2, long arg3);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()V`
     */
    void drawDefaultBackground();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(I)V`
     */
    void drawWorldBackground(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(I)V`
     */
    void drawBackground(int arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()Z`
     */
    static bool isAltKeyDown();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()Z`
     */
    static bool isCtrlKeyDown();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()V`
     */
    void onGuiClosed();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Lnet.minecraft.client.Minecraft;II)V`
     */
    void setWorldAndResolution(Minecraft arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()Z`
     */
    bool doesGuiPauseGame();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void handleInput();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()V`
     */
    void updateScreen();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void handleMouseInput();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()V`
     * Throws: `java.io.IOException`
     */
    void handleKeyboardInput();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()Z`
     */
    static bool isShiftKeyDown();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()Ljava.lang.String;`
     */
    static String getClipboardString();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Ljava.lang.String;)V`
     */
    static void setClipboardString(String arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Lnet.minecraft.item.ItemStack;II)V`
     */
    void renderToolTip(ItemStack arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Ljava.util.List;II)V`
     */
    void drawHoveringText(List arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Lnet.minecraft.util.IChatComponent;II)V`
     */
    void handleComponentHover(IChatComponent arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)Z`
     */
    bool handleComponentClick(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(IIF)V`
     */
    void drawScreen(int arg0, int arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(CI)V`
     * Throws: `java.io.IOException`
     */
    void keyTyped(char arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Ljava.lang.String;Z)V`
     */
    void setText(String arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `()V`
     */
    void initGui();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Lnet.minecraft.client.Minecraft;II)V`
     */
    void onResize(Minecraft arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiScreen`
     * Signature: `(Ljava.lang.String;II)V`
     */
    void drawCreativeTabHoveringText(String arg0, int arg1, int arg2);
};


/**
 * Classpath: `net.minecraft.client.gui.GuiButton`
 * Package name: `net.minecraft.client.gui`
 */
class GuiButton : public Gui {
protected:
    const inline static char *className = "net.minecraft.client.gui.GuiButton";
public:
    STATICINITIALIZE;

    GuiButton(jobject object) : Gui(object) {}


    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(Lnet.minecraft.client.Minecraft;II)V`
     */
    void mouseDragged(Minecraft arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `()Z`
     */
    bool isMouseOver();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(II)V`
     */
    void drawButtonForegroundLayer(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(Z)I`
     */
    int getHoverState(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `()I`
     */
    int getButtonWidth();

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(Lnet.minecraft.client.Minecraft;II)Z`
     */
    bool mousePressed(Minecraft arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(Lnet.minecraft.client.audio.SoundHandler;)V`
     */
    void playPressSound(SoundHandler arg0);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(II)V`
     */
    void mouseReleased(int arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(Lnet.minecraft.client.Minecraft;II)V`
     */
    void drawButton(Minecraft arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.gui.GuiButton`
     * Signature: `(I)V`
     */
    void setWidth(int arg0);
};


/**
 * Classpath: `net.minecraft.client.multiplayer.WorldClient`
 * Package name: `net.minecraft.client.multiplayer`
 */
class WorldClient : public World {
protected:
    const inline static char *className = "net.minecraft.client.multiplayer.WorldClient";
public:
    STATICINITIALIZE;

    WorldClient(jobject object) : World(object) {}


    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(ILnet.minecraft.entity.Entity;)V`
     */
    void addEntityToWorld(int arg0, Entity arg1);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(I)Lnet.minecraft.entity.Entity;`
     */
    Entity removeEntityFromWorld(int arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.util.BlockPos;Ljava.lang.String;FFZ)V`
     */
    void playSoundAtPos(BlockPos arg0, String arg1, float arg2, float arg3, bool arg4);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.scoreboard.Scoreboard;)V`
     */
    void setWorldScoreboard(Scoreboard arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `()Lnet.minecraft.world.chunk.IChunkProvider;`
     */
    IChunkProvider createChunkProvider();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityAdded(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEntityRemoved(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `()V`
     */
    void updateWeather();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `()I`
     */
    int getRenderDistanceChunks();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `()V`
     */
    void updateBlocks();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(I)Lnet.minecraft.entity.Entity;`
     */
    Entity getEntityByID(int arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(J)V`
     */
    void setWorldTime(long arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(DDDDDDLnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void makeFireworks(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, NBTTagCompound arg6);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReportCategory;`
     */
    CrashReportCategory addWorldInfoToCrashReport(CrashReport arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(III)V`
     */
    void doVoidFogParticles(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool spawnEntityInWorld(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `()V`
     */
    void removeAllEntities();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void removeEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(DDDLjava.lang.String;FFZ)V`
     */
    void playSound(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5, bool arg6);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(IIZ)V`
     */
    void doPreChunk(int arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `()V`
     */
    void tick();

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(IIIIII)V`
     */
    void invalidateBlockReceiveRegion(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Z`
     */
    bool invalidateRegionAndSetBlock(BlockPos arg0, IBlockState arg1);

    /**
     * Declaring class: `net.minecraft.client.multiplayer.WorldClient`
     * Signature: `()V`
     */
    void sendQuittingDisconnectingPacket();
};


/**
 * Classpath: `sun.util.calendar.BaseCalendar`
 * Package name: `sun.util.calendar`
 */
class BaseCalendar : public AbstractCalendar {
protected:
    const inline static char *className = "sun.util.calendar.BaseCalendar";
public:
    STATICINITIALIZE;

    BaseCalendar(jobject object) : AbstractCalendar(object) {}


    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool validate(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool normalize(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int getDayOfWeek(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)Z`
     */
    bool isLeapYear(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(I)Z`
     */
    bool isLeapYear(int arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(II)I`
     */
    int getMonthLength(int arg0, int arg1);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int getMonthLength(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)V`
     */
    void normalizeMonth(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)J`
     */
    long getFixedDate(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(IIILsun.util.calendar.BaseCalendar$Date;)J`
     */
    long getFixedDate(int arg0, int arg1, int arg2, BaseCalendar_Date arg3);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;J)V`
     */
    void getCalendarDateFromFixedDate(CalendarDate arg0, long arg1);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)J`
     */
    long getDayOfYear(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(III)J`
     */
    long getDayOfYear(int arg0, int arg1, int arg2);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(J)I`
     */
    int getGregorianYearFromFixedDate(long arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(J)I`
     */
    static int getDayOfWeekFromFixedDate(long arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int getYearLength(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(Lsun.util.calendar.CalendarDate;)I`
     */
    int getYearLengthInMonths(CalendarDate arg0);

    /**
     * Declaring class: `sun.util.calendar.BaseCalendar`
     * Signature: `(J)I`
     */
    int getYearFromFixedDate(long arg0);
};


/**
 * Classpath: `sun.util.calendar.Gregorian`
 * Package name: `sun.util.calendar`
 */
class Gregorian : public BaseCalendar {
protected:
    const inline static char *className = "sun.util.calendar.Gregorian";
public:
    STATICINITIALIZE;

    Gregorian(jobject object) : BaseCalendar(object) {}


    /**
     * Declaring class: `sun.util.calendar.Gregorian`
     * Signature: `()Ljava.lang.String;`
     */
    String getName();

    /**
     * Declaring class: `sun.util.calendar.Gregorian`
     * Signature: `(Ljava.util.TimeZone;)Lsun.util.calendar.Gregorian$Date;`
     */
    Gregorian_Date newCalendarDate(TimeZone arg0);

    /**
     * Declaring class: `sun.util.calendar.Gregorian`
     * Signature: `()Lsun.util.calendar.Gregorian$Date;`
     */
    Gregorian_Date newCalendarDate();

    /**
     * Declaring class: `sun.util.calendar.Gregorian`
     * Signature: `(J)Lsun.util.calendar.Gregorian$Date;`
     */
    Gregorian_Date getCalendarDate(long arg0);

    /**
     * Declaring class: `sun.util.calendar.Gregorian`
     * Signature: `()Lsun.util.calendar.Gregorian$Date;`
     */
    Gregorian_Date getCalendarDate();

    /**
     * Declaring class: `sun.util.calendar.Gregorian`
     * Signature: `(JLjava.util.TimeZone;)Lsun.util.calendar.Gregorian$Date;`
     */
    Gregorian_Date getCalendarDate(long arg0, TimeZone arg1);

    /**
     * Declaring class: `sun.util.calendar.Gregorian`
     * Signature: `(JLsun.util.calendar.CalendarDate;)Lsun.util.calendar.Gregorian$Date;`
     */
    Gregorian_Date getCalendarDate(long arg0, CalendarDate arg1);
};


/**
 * Classpath: `net.minecraft.block.BlockFlower`
 * Package name: `net.minecraft.block`
 */
class BlockFlower : public BlockBush {
protected:
    const inline static char *className = "net.minecraft.block.BlockFlower";
public:
    STATICINITIALIZE;

    BlockFlower(jobject object) : BlockBush(object) {}


    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `(I)Lnet.minecraft.block.state.IBlockState;`
     */
    IBlockState getStateFromMeta(int arg0);

    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `()Lnet.minecraft.block.state.BlockState;`
     */
    BlockState createBlockState();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)I`
     */
    int damageDropped(IBlockState arg0);

    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `(Lnet.minecraft.item.Item;Lnet.minecraft.creativetab.CreativeTabs;Ljava.util.List;)V`
     */
    void getSubBlocks(Item arg0, CreativeTabs arg1, List arg2);

    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `()Lnet.minecraft.block.Block$EnumOffsetType;`
     */
    Block_EnumOffsetType getOffsetType();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `()Lnet.minecraft.block.BlockFlower$EnumFlowerColor;`
     */
    BlockFlower_EnumFlowerColor getBlockType();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `()Lnet.minecraft.block.properties.IProperty;`
     */
    IProperty getTypeProperty();

    /**
     * Declaring class: `net.minecraft.block.BlockFlower`
     * Signature: `(Lnet.minecraft.block.state.IBlockState;)I`
     */
    int getMetaFromState(IBlockState arg0);
};


/**
 * Classpath: `com.google.common.collect.ImmutableList`
 * Package name: `com.google.common.collect`
 */
class ImmutableList : public ImmutableCollection {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableList";
public:
    STATICINITIALIZE;

    ImmutableList(jobject object) : ImmutableCollection(object) {}


    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `([Ljava.lang.Object;I)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList asImmutableList(Object_interface arg0, int arg1);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList asImmutableList(Object_interface arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(II)Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList subListUnchecked(int arg0, int arg1);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `([Ljava.lang.Object;I)I`
     */
    int copyIntoArray(Object_interface arg0, int arg1);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList construct(Object_interface arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.util.Collection;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList copyOf(Collection arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList copyOf(Iterable arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList copyOf(Iterator arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList copyOf(Object_interface arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(II)Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList subList(int arg0, int arg1);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `()Lcom.google.common.collect.UnmodifiableIterator;`
     */
    UnmodifiableIterator iterator();

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `()Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of();

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object_interface arg12);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;`
     */
    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `()Lcom.google.common.collect.ImmutableList$Builder;`
     */
    static ImmutableList_Builder builder();

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.InvalidObjectException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `()Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList asList();

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `()Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList reverse();

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `(I)Lcom.google.common.collect.UnmodifiableListIterator;`
     */
    UnmodifiableListIterator listIterator(int arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `()Lcom.google.common.collect.UnmodifiableListIterator;`
     */
    UnmodifiableListIterator listIterator();

    /**
     * Declaring class: `com.google.common.collect.ImmutableList`
     * Signature: `()Ljava.lang.Object;`
     */
    Object writeReplace();
};


/**
 * Classpath: `com.google.common.collect.ImmutableList$Builder`
 * Enclosing class: `com.google.common.collect.ImmutableList`
 * Package name: `com.google.common.collect`
 */
class ImmutableList_Builder : public ImmutableCollection_ArrayBasedBuilder {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableList$Builder";
public:
    STATICINITIALIZE;

    ImmutableList_Builder(jobject object) : ImmutableCollection_ArrayBasedBuilder(object) {}


    /**
     * Declaring class: `com.google.common.collect.ImmutableList$Builder`
     * Signature: `(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList$Builder;`
     */
    ImmutableList_Builder add(Object arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList$Builder`
     * Signature: `([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList$Builder;`
     */
    ImmutableList_Builder add(Object_interface arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList$Builder`
     * Signature: `(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableList$Builder;`
     */
    ImmutableList_Builder addAll(Iterator arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList$Builder`
     * Signature: `(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableList$Builder;`
     */
    ImmutableList_Builder addAll(Iterable arg0);

    /**
     * Declaring class: `com.google.common.collect.ImmutableList$Builder`
     * Signature: `()Lcom.google.common.collect.ImmutableList;`
     */
    ImmutableList build();
};


/**
 * Classpath: `net.minecraft.entity.player.EntityPlayer`
 * Package name: `net.minecraft.entity.player`
 */
class EntityPlayer : public EntityLivingBase {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayer";
public:
    STATICINITIALIZE;

    EntityPlayer(jobject object) : EntityLivingBase(object) {}


    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Z)Lnet.minecraft.entity.item.EntityItem;`
     */
    EntityItem dropOneItem(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isUsingItem();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void applyEntityAttributes();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getItemInUse();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getItemInUseCount();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getItemInUseDuration();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void stopUsingItem();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void clearItemInUse();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;I)V`
     */
    void updateItemUse(ItemStack arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void onItemUseFinish();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(ZZZ)V`
     */
    void wakeUpPlayer(bool arg0, bool arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void closeScreen();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.stats.StatBase;)V`
     */
    void triggerAchievement(StatBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getMaxInPortalTime();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Ljava.lang.String;`
     */
    String getSwimSound();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Ljava.lang.String;`
     */
    String getSplashSound();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getPortalCooldown();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()F`
     */
    float getEyeHeight();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(B)V`
     */
    void handleStatusUpdate(byte arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isMovementBlocked();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void updateRidden();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(DDD)V`
     */
    void addMountedMovementStat(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void updateEntityActionState();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void onLivingUpdate();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void collideWithPlayer(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.stats.StatBase;)V`
     */
    void func_175145_a(StatBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Ljava.lang.String;`
     */
    String getHurtSound();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Ljava.lang.String;`
     */
    String getDeathSound();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;I)V`
     */
    void addToPlayerScore(Entity arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.scoreboard.Scoreboard;`
     */
    Scoreboard getWorldScoreboard();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;)Ljava.util.Collection;`
     */
    Collection func_175137_e(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.item.EntityItem;)V`
     */
    void joinEntityItemWithWorld(EntityItem arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.block.Block;)F`
     */
    float getToolDigEfficiency(Block arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.block.Block;)Z`
     */
    bool canHarvestBlock(Block arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool canAttackPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(F)V`
     */
    void damageArmor(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getTotalArmorValue();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()F`
     */
    float getArmorVisibility();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)V`
     */
    void damageEntity(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()F`
     */
    float getAbsorptionAmount();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(F)V`
     */
    void setAbsorptionAmount(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(F)V`
     */
    void addExhaustion(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.tileentity.TileEntitySign;)V`
     */
    void openEditSign(TileEntitySign arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.command.server.CommandBlockLogic;)V`
     */
    void openEditCommandBlock(CommandBlockLogic arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.IMerchant;)V`
     */
    void displayVillagerTradeGui(IMerchant arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.inventory.IInventory;)V`
     */
    void displayGUIChest(IInventory arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.passive.EntityHorse;Lnet.minecraft.inventory.IInventory;)V`
     */
    void displayGUIHorse(EntityHorse arg0, IInventory arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void displayGUIBook(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;)Z`
     */
    bool interactWith(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getCurrentEquippedItem();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void destroyCurrentEquippedItem();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getHeldItem();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onCriticalHit(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEnchantmentCritical(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void respawnPlayer();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lcom.mojang.authlib.GameProfile;`
     */
    GameProfile getGameProfile();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.EnumFacing;)V`
     */
    void func_175139_a(EnumFacing arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.BlockPos;Z)V`
     */
    void setSpawnPoint(BlockPos arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Z)Lnet.minecraft.util.BlockPos;`
     */
    static BlockPos getBedSpawnLocation(World arg0, BlockPos arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()F`
     */
    float getBedOrientationInDegrees();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isPlayerFullyAsleep();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getSleepTimer();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void addChatComponentMessage(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getBedLocation();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isSpawnForced();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(FF)V`
     */
    void moveEntityWithHeading(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(DDD)V`
     */
    void addMovementStat(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()F`
     */
    float getAIMoveSpeed();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void resetHeight();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)Ljava.lang.String;`
     */
    String getFallSoundString(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.EntityLivingBase;)V`
     */
    void onKillEntity(EntityLivingBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getCurrentArmor(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)V`
     */
    void addExperience(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)V`
     */
    void addExperienceLevel(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)V`
     */
    void removeExperienceLevel(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.util.FoodStats;`
     */
    FoodStats getFoodStats();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;I)V`
     */
    void setItemInUse(ItemStack arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isAllowEdit();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;Lnet.minecraft.item.ItemStack;)Z`
     */
    bool canPlayerEdit(BlockPos arg0, EnumFacing arg1, ItemStack arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)I`
     */
    int getExperiencePoints(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Z)V`
     */
    void clonePlayer(EntityPlayer arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool canTriggerWalking();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void sendPlayerAbilities();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;)V`
     */
    void setGameType(WorldSettings_GameType arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.inventory.InventoryEnderChest;`
     */
    InventoryEnderChest getInventoryEnderChest();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getEquipmentInSlot(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(ILnet.minecraft.item.ItemStack;)V`
     */
    void setCurrentItemOrArmor(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool isInvisibleToPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isPushedByWater();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Ljava.lang.String;)Ljava.util.UUID;`
     */
    static UUID getOfflineUUID(String arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(ILnet.minecraft.item.ItemStack;)Z`
     */
    bool replaceItemInInventory(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isEntityInsideOpaqueBlock();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isPlayerSleeping();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isSpectator();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void preparePlayerToSpawn();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool hasReducedDebug();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Z)V`
     */
    void setReducedDebug(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lcom.mojang.authlib.GameProfile;)Ljava.util.UUID;`
     */
    static UUID getUUID(GameProfile arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isBlocking();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isInBed();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Ljava.lang.String;FF)V`
     */
    void playSound(String arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getScore();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)V`
     */
    void setScore(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(I)V`
     */
    void addScore(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.DamageSource;)V`
     */
    void onDeath(DamageSource arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;ZZ)Lnet.minecraft.entity.item.EntityItem;`
     */
    EntityItem dropItem(ItemStack arg0, bool arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Lnet.minecraft.scoreboard.Team;`
     */
    Team getTeam();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.world.IInteractionObject;)V`
     */
    void displayGui(IInteractionObject arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()D`
     */
    double getYOffset();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void setDead();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isUser();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.entity.player.EntityPlayer$EnumStatus;`
     */
    EntityPlayer_EnumStatus trySleep(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(FF)V`
     */
    void fall(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void setInWeb();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int xpBarCap();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()I`
     */
    int getXPSeed();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Z)Z`
     */
    bool canEat(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool shouldHeal();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool isPlayer();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.world.LockCode;)Z`
     */
    bool canOpen(LockCode arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.player.EnumPlayerModelParts;)Z`
     */
    bool isWearing(EnumPlayerModelParts arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.stats.StatBase;I)V`
     */
    void addStat(StatBase arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.item.ItemStack;Z)Lnet.minecraft.entity.item.EntityItem;`
     */
    EntityItem dropPlayerItemWithRandomChoice(ItemStack arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void attackTargetEntityWithCurrentItem(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()Z`
     */
    bool getAlwaysRenderNameTagForRender();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayer`
     * Signature: `()V`
     */
    void jump();
};


/**
 * Classpath: `net.minecraft.entity.EntityCreature`
 * Package name: `net.minecraft.entity`
 */
class EntityCreature : public EntityLiving {
protected:
    const inline static char *className = "net.minecraft.entity.EntityCreature";
public:
    STATICINITIALIZE;

    EntityCreature(jobject object) : EntityLiving(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `(F)V`
     */
    void func_142017_o(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()Z`
     */
    bool getCanSpawnHere();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `(Lnet.minecraft.util.BlockPos;)F`
     */
    float getBlockPathWeight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `(Lnet.minecraft.util.BlockPos;I)V`
     */
    void setHomePosAndDistance(BlockPos arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()Lnet.minecraft.util.BlockPos;`
     */
    BlockPos getHomePosition();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()F`
     */
    float getMaximumHomeDistance();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()V`
     */
    void updateLeashedState();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()Z`
     */
    bool hasPath();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()V`
     */
    void detachHome();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()Z`
     */
    bool hasHome();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `()Z`
     */
    bool isWithinHomeDistanceCurrentPosition();

    /**
     * Declaring class: `net.minecraft.entity.EntityCreature`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isWithinHomeDistanceFromPosition(BlockPos arg0);
};


/**
 * Classpath: `com.mojang.authlib.properties.PropertyMap`
 * Package name: `com.mojang.authlib.properties`
 */
class PropertyMap : public ForwardingMultimap {
protected:
    const inline static char *className = "com.mojang.authlib.properties.PropertyMap";
public:
    STATICINITIALIZE;

    PropertyMap(jobject object) : ForwardingMultimap(object) {}


    /**
     * Declaring class: `com.mojang.authlib.properties.PropertyMap`
     * Signature: `()Lcom.google.common.collect.Multimap;`
     */
    Multimap delegate();
};


/**
 * Classpath: `net.minecraft.entity.item.EntityItemFrame`
 * Package name: `net.minecraft.entity.item`
 */
class EntityItemFrame : public EntityHanging {
protected:
    const inline static char *className = "net.minecraft.entity.item.EntityItemFrame";
public:
    STATICINITIALIZE;

    EntityItemFrame(jobject object) : EntityHanging(object) {}


    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.entity.Entity;Z)V`
     */
    void dropItemOrSelf(Entity arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void setDisplayedItem(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `()I`
     */
    int getWidthPixels();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `()I`
     */
    int getHeightPixels();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void removeFrameFromMap(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.item.ItemStack;Z)V`
     */
    void setDisplayedItemWithUpdate(ItemStack arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `()I`
     */
    int getRotation();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(I)V`
     */
    void setItemRotation(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(IZ)V`
     */
    void func_174865_a(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `()I`
     */
    int func_174866_q();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool interactFirst(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(D)Z`
     */
    bool isInRangeToRenderDist(double arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `()F`
     */
    float getCollisionBorderSize();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `()Lnet.minecraft.item.ItemStack;`
     */
    ItemStack getDisplayedItem();

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onBroken(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.item.EntityItemFrame`
     * Signature: `()V`
     */
    void entityInit();
};


/**
 * Classpath: `net.minecraft.entity.effect.EntityLightningBolt`
 * Package name: `net.minecraft.entity.effect`
 */
class EntityLightningBolt : public EntityWeatherEffect {
protected:
    const inline static char *className = "net.minecraft.entity.effect.EntityLightningBolt";
public:
    STATICINITIALIZE;

    EntityLightningBolt(jobject object) : EntityWeatherEffect(object) {}


    /**
     * Declaring class: `net.minecraft.entity.effect.EntityLightningBolt`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.effect.EntityLightningBolt`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.effect.EntityLightningBolt`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.effect.EntityLightningBolt`
     * Signature: `()V`
     */
    void onUpdate();
};


/**
 * Classpath: `net.minecraft.entity.player.EntityPlayerMP`
 * Package name: `net.minecraft.entity.player`
 */
class EntityPlayerMP : public EntityPlayer {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayerMP";
public:
    STATICINITIALIZE;

    EntityPlayerMP(jobject object) : EntityPlayer(object) {}


    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(DZLnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;)V`
     */
    void updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)V`
     */
    void onFinishedPotionEffect(PotionEffect arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;Z)V`
     */
    void onChangedPotionEffect(PotionEffect arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void updatePotionMetadata();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.potion.PotionEffect;)V`
     */
    void onNewPotionEffect(PotionEffect arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(DDD)V`
     */
    void setPositionAndUpdate(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.Entity;I)V`
     */
    void onItemPickup(Entity arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void sendEnterCombat();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void sendEndCombat();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.tileentity.TileEntity;)V`
     */
    void sendTileEntityUpdate(TileEntity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Lnet.minecraft.world.WorldServer;`
     */
    WorldServer getServerForPlayer();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Lnet.minecraft.entity.Entity;`
     */
    Entity getSpectatingEntity();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void setSpectatingEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void onUpdateEntity();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Lnet.minecraft.stats.StatisticsFile;`
     */
    StatisticsFile getStatFile();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void updateBiomesExplored();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Z`
     */
    bool canPlayersAttack();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(DZ)V`
     */
    void handleFalling(double arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void getNextWindowId();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.inventory.Container;)V`
     */
    void sendContainerToPlayer(Container arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void closeContainer();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void updateHeldItem();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(FFZZ)V`
     */
    void setEntityActionState(float arg0, float arg1, bool arg2, bool arg3);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void mountEntityAndWakeUp();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void setPlayerHealthUpdated();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Ljava.lang.String;`
     */
    String getPlayerIP();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.network.play.client.C15PacketClientSettings;)V`
     */
    void handleClientSettings(C15PacketClientSettings arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;`
     */
    EntityPlayer_EnumChatVisibility getChatVisibility();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Ljava.lang.String;Ljava.lang.String;)V`
     */
    void loadResourcePack(String arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void markPlayerActive();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()J`
     */
    long getLastActiveTime();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getTabListDisplayName();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void onItemUseFinish();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(ZZZ)V`
     */
    void wakeUpPlayer(bool arg0, bool arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void closeScreen();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void mountEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.stats.StatBase;)V`
     */
    void func_175145_a(StatBase arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool canAttackPlayer(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.tileentity.TileEntitySign;)V`
     */
    void openEditSign(TileEntitySign arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.IMerchant;)V`
     */
    void displayVillagerTradeGui(IMerchant arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.inventory.IInventory;)V`
     */
    void displayGUIChest(IInventory arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.passive.EntityHorse;Lnet.minecraft.inventory.IInventory;)V`
     */
    void displayGUIHorse(EntityHorse arg0, IInventory arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void displayGUIBook(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onCriticalHit(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEnchantmentCritical(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void addChatComponentMessage(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(I)V`
     */
    void addExperienceLevel(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(I)V`
     */
    void removeExperienceLevel(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.item.ItemStack;I)V`
     */
    void setItemInUse(ItemStack arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Z)V`
     */
    void clonePlayer(EntityPlayer arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void sendPlayerAbilities();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.world.WorldSettings$GameType;)V`
     */
    void setGameType(WorldSettings_GameType arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(I)V`
     */
    void travelToDimension(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayerMP;)Z`
     */
    bool isSpectatedByPlayer(EntityPlayerMP arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()Z`
     */
    bool isSpectator();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void removeEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.util.DamageSource;)V`
     */
    void onDeath(DamageSource arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.world.IInteractionObject;)V`
     */
    void displayGui(IInteractionObject arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.entity.player.EntityPlayer$EnumStatus;`
     */
    EntityPlayer_EnumStatus trySleep(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.stats.StatBase;I)V`
     */
    void addStat(StatBase arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `()V`
     */
    void addSelfToInternalCraftingInventory();

    /**
     * Declaring class: `net.minecraft.entity.player.EntityPlayerMP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void attackTargetEntityWithCurrentItem(Entity arg0);
};


/**
 * Classpath: `io.netty.channel.SimpleChannelInboundHandler`
 * Package name: `io.netty.channel`
 */
class SimpleChannelInboundHandler : public ChannelInboundHandlerAdapter {
protected:
    const inline static char *className = "io.netty.channel.SimpleChannelInboundHandler";
public:
    STATICINITIALIZE;

    SimpleChannelInboundHandler(jobject object) : ChannelInboundHandlerAdapter(object) {}


    /**
     * Declaring class: `io.netty.channel.SimpleChannelInboundHandler`
     * Signature: `(Ljava.lang.Object;)Z`
     * Throws: `java.lang.Exception`
     */
    bool acceptInboundMessage(Object arg0);

    /**
     * Declaring class: `io.netty.channel.SimpleChannelInboundHandler`
     * Signature: `(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Object;)V`
     * Throws: `java.lang.Exception`
     */
    void channelRead0(ChannelHandlerContext arg0, Object arg1);
};


/**
 * Classpath: `net.minecraft.client.entity.AbstractClientPlayer`
 * Package name: `net.minecraft.client.entity`
 */
class AbstractClientPlayer : public EntityPlayer {
protected:
    const inline static char *className = "net.minecraft.client.entity.AbstractClientPlayer";
public:
    STATICINITIALIZE;

    AbstractClientPlayer(jobject object) : EntityPlayer(object) {}


    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()Lnet.minecraft.client.network.NetworkPlayerInfo;`
     */
    NetworkPlayerInfo getPlayerInfo();

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()Z`
     */
    bool hasPlayerInfo();

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `(Ljava.lang.String;)Lnet.minecraft.util.ResourceLocation;`
     */
    static ResourceLocation getLocationSkin(String arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getLocationSkin();

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()Lnet.minecraft.util.ResourceLocation;`
     */
    ResourceLocation getLocationCape();

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `(Lnet.minecraft.util.ResourceLocation;Ljava.lang.String;)Lnet.minecraft.client.renderer.ThreadDownloadImageData;`
     */
    static ThreadDownloadImageData getDownloadImageSkin(ResourceLocation arg0, String arg1);

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()Ljava.lang.String;`
     */
    String getSkinType();

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()F`
     */
    float getFovModifier();

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()Z`
     */
    bool isSpectator();

    /**
     * Declaring class: `net.minecraft.client.entity.AbstractClientPlayer`
     * Signature: `()Z`
     */
    bool hasSkin();
};


/**
 * Classpath: `java.awt.Rectangle`
 * Package name: `java.awt`
 */
class Rectangle : public Rectangle2D {
protected:
    const inline static char *className = "java.awt.Rectangle";
public:
    STATICINITIALIZE;

    Rectangle(jobject object) : Rectangle2D(object) {}


    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()D`
     */
    double getX();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()D`
     */
    double getY();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()D`
     */
    double getWidth();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()D`
     */
    double getHeight();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)V`
     */
    void translate(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;`
     */
    Rectangle union_(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.Rectangle;)V`
     */
    void setBounds(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(IIII)V`
     */
    void setBounds(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(IIII)V`
     */
    void reshape(int arg0, int arg1, int arg2, int arg3);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(DZ)I`
     */
    static int clip(double arg0, bool arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)V`
     */
    void setLocation(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void setLocation(Point arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)Z`
     */
    bool inside(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(DDDD)V`
     */
    void setRect(double arg0, double arg1, double arg2, double arg3);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(DD)I`
     */
    int outcode(double arg0, double arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D createIntersection(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;`
     */
    Rectangle2D createUnion(Rectangle2D arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.Point;)V`
     */
    void add(Point arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.Rectangle;)V`
     */
    void add(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)V`
     */
    void add(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.lang.Object;)Z`
     */
    bool equals(Object arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()Ljava.lang.String;`
     */
    String toString();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()Z`
     */
    bool isEmpty();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocation();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()Ljava.awt.Dimension;`
     */
    Dimension getSize();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)V`
     */
    void grow(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)V`
     */
    void resize(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)V`
     */
    void move(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;`
     */
    Rectangle intersection(Rectangle arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(Ljava.awt.Dimension;)V`
     */
    void setSize(Dimension arg0);

    /**
     * Declaring class: `java.awt.Rectangle`
     * Signature: `(II)V`
     */
    void setSize(int arg0, int arg1);
};


/**
 * Classpath: `java.awt.event.InputEvent`
 * Package name: `java.awt.event`
 */
class InputEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.InputEvent";
public:
    STATICINITIALIZE;

    InputEvent(jobject object) : ComponentEvent(object) {}


    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()Z`
     */
    bool isControlDown();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()Z`
     */
    bool isShiftDown();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()V`
     */
    void consume();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()Z`
     */
    bool isConsumed();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()J`
     */
    long getWhen();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()Z`
     */
    bool canAccessSystemClipboard();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()I`
     */
    int getModifiersEx();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getModifiersExText(int arg0);

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `(I)I`
     */
    static int getMaskForButton(int arg0);

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()Z`
     */
    bool isMetaDown();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()Z`
     */
    bool isAltDown();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()Z`
     */
    bool isAltGraphDown();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()I`
     */
    int getModifiers();

    /**
     * Declaring class: `java.awt.event.InputEvent`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.event.MouseEvent`
 * Package name: `java.awt.event`
 */
class MouseEvent : public InputEvent {
protected:
    const inline static char *className = "java.awt.event.MouseEvent";
public:
    STATICINITIALIZE;

    MouseEvent(jobject object) : InputEvent(object) {}


    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()I`
     */
    int getX();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()I`
     */
    int getY();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getLocationOnScreen();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()I`
     */
    int getXOnScreen();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()I`
     */
    int getYOnScreen();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()I`
     */
    int getClickCount();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()Z`
     */
    bool isPopupTrigger();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()I`
     */
    int getModifiersEx();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()V`
     */
    void setNewModifiers();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()V`
     */
    void setOldModifiers();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()I`
     */
    int getButton();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getMouseModifiersText(int arg0);

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()Ljava.awt.Point;`
     */
    Point getPoint();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `(II)V`
     */
    void translatePoint(int arg0, int arg1);

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.event.MouseEvent`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.Menu`
 * Package name: `java.awt`
 */
class Menu : public MenuItem {
protected:
    const inline static char *className = "java.awt.Menu";
public:
    STATICINITIALIZE;

    Menu(jobject object) : MenuItem(object) {}


    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.awt.event.KeyEvent;)Z`
     */
    bool handleShortcut(KeyEvent arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()V`
     */
    void removeNotify();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()I`
     */
    int countItems();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()I`
     */
    int countItemsImpl();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(I)Ljava.awt.MenuItem;`
     */
    MenuItem getItemImpl(int arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()V`
     */
    void addSeparator();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.awt.MenuShortcut;)Ljava.awt.MenuItem;`
     */
    MenuItem getShortcutMenuItem(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()Ljava.util.Enumeration;`
     */
    Enumeration shortcuts();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.awt.MenuShortcut;)V`
     */
    void deleteShortcut(MenuShortcut arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()Z`
     */
    bool isTearOff();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(I)V`
     */
    void insertSeparator(int arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.awt.MenuComponent;)I`
     */
    int getAccessibleChildIndex(MenuComponent arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.lang.String;)V`
     */
    void add(String arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.awt.MenuItem;)Ljava.awt.MenuItem;`
     */
    MenuItem add(MenuItem arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.lang.String;I)V`
     */
    void insert(String arg0, int arg1);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.awt.MenuItem;I)V`
     */
    void insert(MenuItem arg0, int arg1);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException, java.awt.HeadlessException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(Ljava.io.ObjectOutputStream;)V`
     * Throws: `java.io.IOException`
     */
    void writeObject(ObjectOutputStream arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()V`
     */
    void removeAll();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()V`
     */
    static void initIDs();

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `(I)Ljava.awt.MenuItem;`
     */
    MenuItem getItem(int arg0);

    /**
     * Declaring class: `java.awt.Menu`
     * Signature: `()I`
     */
    int getItemCount();
};


/**
 * Classpath: `sun.awt.PeerEvent`
 * Package name: `sun.awt`
 */
class PeerEvent : public InvocationEvent {
protected:
    const inline static char *className = "sun.awt.PeerEvent";
public:
    STATICINITIALIZE;

    PeerEvent(jobject object) : InvocationEvent(object) {}


    /**
     * Declaring class: `sun.awt.PeerEvent`
     * Signature: `()J`
     */
    long getFlags();

    /**
     * Declaring class: `sun.awt.PeerEvent`
     * Signature: `(Lsun.awt.PeerEvent;)Lsun.awt.PeerEvent;`
     */
    PeerEvent coalesceEvents(PeerEvent arg0);
};


/**
 * Classpath: `java.awt.geom.GeneralPath`
 * Package name: `java.awt.geom`
 */
class GeneralPath : public Path2D_Float {
protected:
    const inline static char *className = "java.awt.geom.GeneralPath";
public:
    STATICINITIALIZE;

    GeneralPath(jobject object) : Path2D_Float(object) {}

};


/**
 * Classpath: `net.minecraft.client.entity.EntityPlayerSP`
 * Package name: `net.minecraft.client.entity`
 */
class EntityPlayerSP : public AbstractClientPlayer {
protected:
    const inline static char *className = "net.minecraft.client.entity.EntityPlayerSP";
public:
    STATICINITIALIZE;

    EntityPlayerSP(jobject object) : AbstractClientPlayer(object) {}


    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()Z`
     */
    bool isServerWorld();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void onUpdateWalkingPlayer();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()Z`
     */
    bool isCurrentViewEntity();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void closeScreenAndDropStack();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(F)V`
     */
    void setPlayerSPHealth(float arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void sendHorseJump();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()F`
     */
    float getHorseJumpPower();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.util.BlockPos;)Z`
     */
    bool isOpenBlockSpace(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Ljava.lang.String;)V`
     */
    void sendChatMessage(String arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()Z`
     */
    bool isRidingHorse();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void sendHorseInventory();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Z)Lnet.minecraft.entity.item.EntityItem;`
     */
    EntityItem dropOneItem(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void closeScreen();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void mountEntity(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void updateEntityActionState();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void onLivingUpdate();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.entity.item.EntityItem;)V`
     */
    void joinEntityItemWithWorld(EntityItem arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)V`
     */
    void damageEntity(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.tileentity.TileEntitySign;)V`
     */
    void openEditSign(TileEntitySign arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.command.server.CommandBlockLogic;)V`
     */
    void openEditCommandBlock(CommandBlockLogic arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.entity.IMerchant;)V`
     */
    void displayVillagerTradeGui(IMerchant arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.inventory.IInventory;)V`
     */
    void displayGUIChest(IInventory arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.entity.passive.EntityHorse;Lnet.minecraft.inventory.IInventory;)V`
     */
    void displayGUIHorse(EntityHorse arg0, IInventory arg1);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void displayGUIBook(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Z)V`
     */
    void setSprinting(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onCriticalHit(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.entity.Entity;)V`
     */
    void onEnchantmentCritical(Entity arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void respawnPlayer();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void addChatComponentMessage(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void sendPlayerAbilities();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(DDD)Z`
     */
    bool pushOutOfBlocks(double arg0, double arg1, double arg2);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()Ljava.lang.String;`
     */
    String getClientBrand();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()Lnet.minecraft.stats.StatFileWriter;`
     */
    StatFileWriter getStatFileWriter();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setClientBrand(String arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Ljava.lang.String;FF)V`
     */
    void playSound(String arg0, float arg1, float arg2);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()Z`
     */
    bool isSneaking();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(F)V`
     */
    void heal(float arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.world.IInteractionObject;)V`
     */
    void displayGui(IInteractionObject arg0);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()Z`
     */
    bool isUser();

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(FII)V`
     */
    void setXPStats(float arg0, int arg1, int arg2);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `(Lnet.minecraft.stats.StatBase;I)V`
     */
    void addStat(StatBase arg0, int arg1);

    /**
     * Declaring class: `net.minecraft.client.entity.EntityPlayerSP`
     * Signature: `()V`
     */
    void swingItem();
};


/**
 * Classpath: `net.minecraft.client.model.ModelPlayer`
 * Package name: `net.minecraft.client.model`
 */
class ModelPlayer : public ModelBiped {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelPlayer";
public:
    STATICINITIALIZE;

    ModelPlayer(jobject object) : ModelBiped(object) {}


    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `(FFFFFFLnet.minecraft.entity.Entity;)V`
     */
    void setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6);

    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `(F)V`
     */
    void postRenderArm(float arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `(F)V`
     */
    void renderDeadmau5Head(float arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `(Z)V`
     */
    void setInvisible(bool arg0);

    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `()V`
     */
    void renderRightArm();

    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `()V`
     */
    void renderLeftArm();

    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `(Lnet.minecraft.entity.Entity;FFFFFF)V`
     */
    void render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6);

    /**
     * Declaring class: `net.minecraft.client.model.ModelPlayer`
     * Signature: `(F)V`
     */
    void renderCape(float arg0);
};


/**
 * Classpath: `net.minecraft.entity.EntityAgeable`
 * Package name: `net.minecraft.entity`
 */
class EntityAgeable : public EntityCreature {
protected:
    const inline static char *className = "net.minecraft.entity.EntityAgeable";
public:
    STATICINITIALIZE;

    EntityAgeable(jobject object) : EntityCreature(object) {}


    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(Z)V`
     */
    void setScaleForAge(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `()I`
     */
    int getGrowingAge();

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(Lnet.minecraft.entity.EntityAgeable;)Lnet.minecraft.entity.EntityAgeable;`
     */
    EntityAgeable createChild(EntityAgeable arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(I)V`
     */
    void setGrowingAge(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(IZ)V`
     */
    void func_175501_a(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `()V`
     */
    void onGrowingAdult();

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `()V`
     */
    void onLivingUpdate();

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `()Z`
     */
    bool isChild();

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool interact(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(I)V`
     */
    void addGrowth(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(F)V`
     */
    void setScale(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.EntityAgeable`
     * Signature: `(FF)V`
     */
    void setSize(float arg0, float arg1);
};


/**
 * Classpath: `net.minecraft.network.NetworkManager`
 * Package name: `net.minecraft.network`
 */
class NetworkManager : public SimpleChannelInboundHandler {
protected:
    const inline static char *className = "net.minecraft.network.NetworkManager";
public:
    STATICINITIALIZE;

    NetworkManager(jobject object) : SimpleChannelInboundHandler(object) {}


    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Lnet.minecraft.util.IChatComponent;)V`
     */
    void closeChannel(IChatComponent arg0);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()Z`
     */
    bool isChannelOpen();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()V`
     */
    void checkDisconnected();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()Z`
     */
    bool isLocalChannel();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(I)V`
     */
    void setCompressionTreshold(int arg0);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()Ljava.net.SocketAddress;`
     */
    SocketAddress getRemoteAddress();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()Z`
     */
    bool hasNoChannel();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()V`
     */
    void disableAutoRead();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Lnet.minecraft.network.EnumConnectionState;)V`
     */
    void setConnectionState(EnumConnectionState arg0);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Lio.netty.channel.ChannelHandlerContext;Lnet.minecraft.network.Packet;)V`
     * Throws: `java.lang.Exception`
     */
    void channelRead0(ChannelHandlerContext arg0, Packet arg1);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()V`
     */
    void flushOutboundQueue();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Lnet.minecraft.network.Packet;[Lio.netty.util.concurrent.GenericFutureListener;)V`
     */
    void dispatchPacket(Packet arg0, GenericFutureListener_interface arg1);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Ljava.net.InetAddress;IZ)Lnet.minecraft.network.NetworkManager;`
     */
    static NetworkManager func_181124_a(InetAddress arg0, int arg1, bool arg2);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Ljavax.crypto.SecretKey;)V`
     */
    void enableEncryption(SecretKey arg0);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()Z`
     */
    bool getIsencrypted();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()Lnet.minecraft.util.IChatComponent;`
     */
    IChatComponent getExitMessage();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()Lnet.minecraft.network.INetHandler;`
     */
    INetHandler getNetHandler();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `()V`
     */
    void processReceivedPackets();

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Ljava.net.SocketAddress;)Lnet.minecraft.network.NetworkManager;`
     */
    static NetworkManager provideLocalClient(SocketAddress arg0);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Lnet.minecraft.network.INetHandler;)V`
     */
    void setNetHandler(INetHandler arg0);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Lnet.minecraft.network.Packet;)V`
     */
    void sendPacket(Packet arg0);

    /**
     * Declaring class: `net.minecraft.network.NetworkManager`
     * Signature: `(Lnet.minecraft.network.Packet;Lio.netty.util.concurrent.GenericFutureListener;[Lio.netty.util.concurrent.GenericFutureListener;)V`
     */
    void sendPacket(Packet arg0, GenericFutureListener arg1, GenericFutureListener_interface arg2);
};


/**
 * Classpath: `java.awt.event.KeyEvent`
 * Package name: `java.awt.event`
 */
class KeyEvent : public InputEvent {
protected:
    const inline static char *className = "java.awt.event.KeyEvent";
public:
    STATICINITIALIZE;

    KeyEvent(jobject object) : InputEvent(object) {}


    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()I`
     */
    int getKeyCode();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `(I)V`
     */
    void setKeyCode(int arg0);

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()Z`
     */
    bool isActionKey();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `(C)V`
     */
    void setKeyChar(char arg0);

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `(I)V`
     */
    void setModifiers(int arg0);

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()C`
     */
    char getKeyChar();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()V`
     */
    void setNewModifiers();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()V`
     */
    void setOldModifiers();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getKeyText(int arg0);

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `(I)Ljava.lang.String;`
     */
    static String getKeyModifiersText(int arg0);

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `(I)I`
     */
    static int getExtendedKeyCodeForChar(int arg0);

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()I`
     */
    int getKeyLocation();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()I`
     */
    int getExtendedKeyCode();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `(Ljava.io.ObjectInputStream;)V`
     * Throws: `java.io.IOException, java.lang.ClassNotFoundException`
     */
    void readObject(ObjectInputStream arg0);

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();

    /**
     * Declaring class: `java.awt.event.KeyEvent`
     * Signature: `()V`
     */
    static void initIDs();
};


/**
 * Classpath: `java.awt.event.MouseWheelEvent`
 * Package name: `java.awt.event`
 */
class MouseWheelEvent : public MouseEvent {
protected:
    const inline static char *className = "java.awt.event.MouseWheelEvent";
public:
    STATICINITIALIZE;

    MouseWheelEvent(jobject object) : MouseEvent(object) {}


    /**
     * Declaring class: `java.awt.event.MouseWheelEvent`
     * Signature: `()I`
     */
    int getScrollType();

    /**
     * Declaring class: `java.awt.event.MouseWheelEvent`
     * Signature: `()I`
     */
    int getScrollAmount();

    /**
     * Declaring class: `java.awt.event.MouseWheelEvent`
     * Signature: `()I`
     */
    int getWheelRotation();

    /**
     * Declaring class: `java.awt.event.MouseWheelEvent`
     * Signature: `()D`
     */
    double getPreciseWheelRotation();

    /**
     * Declaring class: `java.awt.event.MouseWheelEvent`
     * Signature: `()I`
     */
    int getUnitsToScroll();

    /**
     * Declaring class: `java.awt.event.MouseWheelEvent`
     * Signature: `()Ljava.lang.String;`
     */
    String paramString();
};


/**
 * Classpath: `java.awt.PopupMenu`
 * Package name: `java.awt`
 */
class PopupMenu : public Menu {
protected:
    const inline static char *className = "java.awt.PopupMenu";
public:
    STATICINITIALIZE;

    PopupMenu(jobject object) : Menu(object) {}


    /**
     * Declaring class: `java.awt.PopupMenu`
     * Signature: `()V`
     */
    void addNotify();

    /**
     * Declaring class: `java.awt.PopupMenu`
     * Signature: `(Ljava.awt.Component;II)V`
     */
    void show(Component arg0, int arg1, int arg2);

    /**
     * Declaring class: `java.awt.PopupMenu`
     * Signature: `()Ljava.lang.String;`
     */
    String constructComponentName();

    /**
     * Declaring class: `java.awt.PopupMenu`
     * Signature: `()Ljava.awt.MenuContainer;`
     */
    MenuContainer getParent();
};


/**
 * Classpath: `net.minecraft.entity.passive.EntityAnimal`
 * Package name: `net.minecraft.entity.passive`
 */
class EntityAnimal : public EntityAgeable {
protected:
    const inline static char *className = "net.minecraft.entity.passive.EntityAnimal";
public:
    STATICINITIALIZE;

    EntityAnimal(jobject object) : EntityAgeable(object) {}


    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()Z`
     */
    bool getCanSpawnHere();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()I`
     */
    int getTalkInterval();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool isBreedingItem(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.entity.passive.EntityAnimal;)Z`
     */
    bool canMateWith(EntityAnimal arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()V`
     */
    void updateAITasks();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.util.BlockPos;)F`
     */
    float getBlockPathWeight(BlockPos arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.item.ItemStack;)V`
     */
    void consumeItemFromStack(EntityPlayer arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()Lnet.minecraft.entity.player.EntityPlayer;`
     */
    EntityPlayer getPlayerInLove();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()V`
     */
    void resetInLove();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(B)V`
     */
    void handleStatusUpdate(byte arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()V`
     */
    void onLivingUpdate();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)I`
     */
    int getExperiencePoints(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool interact(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void setInLove(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()Z`
     */
    bool isInLove();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityAnimal`
     * Signature: `()Z`
     */
    bool canDespawn();
};


/**
 * Classpath: `net.minecraft.entity.passive.EntityHorse`
 * Package name: `net.minecraft.entity.passive`
 */
class EntityHorse : public EntityAnimal {
protected:
    const inline static char *className = "net.minecraft.entity.passive.EntityHorse";
public:
    STATICINITIALIZE;

    EntityHorse(jobject object) : EntityAnimal(object) {}


    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()F`
     */
    float getSoundVolume();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool canBePushed();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isHorseSaddled();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void initHorseChest();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(I)V`
     */
    void setHorseType(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void resetTexturePrefix();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getHorseType();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(I)V`
     */
    void setHorseVariant(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getHorseVariant();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(I)Z`
     */
    bool getHorseWatchableBoolean(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(IZ)V`
     */
    void setHorseWatchableBoolean(int arg0, bool arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isAdultHorse();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool func_110253_bW();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()F`
     */
    float getHorseSize();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setScaleForAge(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isHorseJumping();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setHorseTamed(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setHorseJumping(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool allowLeashing();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(F)V`
     */
    void func_142017_o(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isEatingHaystack();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setEatingHaystack(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getHorseArmorIndexSynced();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.item.ItemStack;)I`
     */
    int getHorseArmorIndex(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool getHasReproduced();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.item.ItemStack;)V`
     */
    void setHorseArmorStack(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setBreeding(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setHasReproduced(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setHorseSaddled(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(I)I`
     */
    int increaseTemper(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getMaxTemper();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool prepareChunkForSpawn();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void func_110266_cB();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void openHorseMouth();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getChestSize();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void updateHorseSlots();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool canWearArmor();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool getCanSpawnHere();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.Entity;D)Lnet.minecraft.entity.passive.EntityHorse;`
     */
    EntityHorse getClosestHorse(Entity arg0, double arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()D`
     */
    double getHorseJumpStrength();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Lnet.minecraft.item.Item;`
     */
    Item getDropItem();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void makeHorseRear();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Ljava.lang.String;`
     */
    String getLivingSound();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Ljava.lang.String;`
     */
    String getAngrySoundName();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getMaxSpawnedInChunk();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getTalkInterval();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool func_110239_cn();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool func_175507_cI();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void setHorseTexturePaths();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Ljava.lang.String;`
     */
    String getHorseTexture();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void makeHorseRearWithSound();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool canCarryChest();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.item.ItemStack;)Z`
     */
    bool isBreedingItem(ItemStack arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void func_110210_cH();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void dropChestItems();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.Entity;Lnet.minecraft.inventory.AnimalChest;)V`
     */
    void dropItemsInChest(Entity arg0, AnimalChest arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.item.Item;)Z`
     */
    static bool isArmorItem(Item arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.passive.EntityAnimal;)Z`
     */
    bool canMateWith(EntityAnimal arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.EntityAgeable;)Lnet.minecraft.entity.EntityAgeable;`
     */
    EntityAgeable createChild(EntityAgeable arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()F`
     */
    float getModifiedMaxHealth();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()D`
     */
    double getModifiedJumpStrength();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()D`
     */
    double getModifiedMovementSpeed();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.world.DifficultyInstance;Lnet.minecraft.entity.IEntityLivingData;)Lnet.minecraft.entity.IEntityLivingData;`
     */
    IEntityLivingData onInitialSpawn(DifficultyInstance arg0, IEntityLivingData arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(F)F`
     */
    float getGrassEatingAmount(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(F)F`
     */
    float getRearingAmount(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(F)F`
     */
    float getMouthOpennessAngle(float arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(I)V`
     */
    void setJumpPower(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void spawnHorseParticles(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void applyEntityAttributes();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()F`
     */
    float getEyeHeight();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(B)V`
     */
    void handleStatusUpdate(byte arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isMovementBlocked();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void onLivingUpdate();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Ljava.lang.String;`
     */
    String getHurtSound();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Ljava.lang.String;`
     */
    String getDeathSound();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void readEntityFromNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.nbt.NBTTagCompound;)V`
     */
    void writeEntityToNBT(NBTTagCompound arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.util.DamageSource;F)Z`
     */
    bool attackEntityFrom(DamageSource arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getTotalArmorValue();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(FF)V`
     */
    void moveEntityWithHeading(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(ILnet.minecraft.item.ItemStack;)Z`
     */
    bool replaceItemInInventory(int arg0, ItemStack arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V`
     */
    void playStepSound(BlockPos arg0, Block arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void updateRiderPosition();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(I)V`
     */
    void setTemper(int arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()I`
     */
    int getTemper();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setChested(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isTame();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Ljava.lang.String;`
     */
    String getOwnerId();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Ljava.lang.String;)V`
     */
    void setOwnerId(String arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isUndead();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isChested();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isRearing();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isBreeding();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void dropChests();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void entityInit();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setEating(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()V`
     */
    void onUpdate();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.util.DamageSource;)V`
     */
    void onDeath(DamageSource arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isOnLadder();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(FF)V`
     */
    void fall(float arg0, float arg1);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void openGUI(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool interact(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)V`
     */
    void mountTo(EntityPlayer arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Z)V`
     */
    void setRearing(bool arg0);

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool isSterile();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `()Z`
     */
    bool canMate();

    /**
     * Declaring class: `net.minecraft.entity.passive.EntityHorse`
     * Signature: `(Lnet.minecraft.entity.player.EntityPlayer;)Z`
     */
    bool setTamedBy(EntityPlayer arg0);
};




#endif
