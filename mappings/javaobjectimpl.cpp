//
//  javaobjectimpl.cpp
//  math
//
//  Created by Derek Li on 10/12/23.
//

#include "javaobjectimpl.hpp"

Proxy Minecraft::getProxy() { return Proxy(*classes[className]->invokeMethod<jobject>(this->object, "getProxy", "()Ljava/net/Proxy;")); }
String Minecraft::getVersion() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getVersion", "()Ljava/lang/String;")); }
void Minecraft::initStream() { (classes[className]->invokeMethod<void>(this->object, "initStream", "()V")); }
bool Minecraft::isUnicode() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUnicode", "()Z")); }
void Minecraft::crashed(CrashReport arg0) { (classes[className]->invokeMethod<void>(this->object, "crashed", "(Lnet/minecraft/crash/CrashReport;)V", arg0)); }
void Minecraft::loadWorld(WorldClient arg0) { (classes[className]->invokeMethod<void>(this->object, "loadWorld", "(Lnet/minecraft/client/multiplayer/WorldClient;)V", arg0)); }
void Minecraft::loadWorld(WorldClient arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "loadWorld", "(Lnet/minecraft/client/multiplayer/WorldClient;Ljava/lang/String;)V", arg0, arg1)); }
void Minecraft::runTick() { (classes[className]->invokeMethod<void>(this->object, "runTick", "()V")); }
void Minecraft::clickMouse() { (classes[className]->invokeMethod<void>(this->object, "clickMouse", "()V")); }
Session Minecraft::getSession() { return Session(*classes[className]->invokeMethod<jobject>(this->object, "getSession", "()Lnet/minecraft/util/Session;")); }
bool Minecraft::isDemo() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDemo", "()Z")); }
bool Minecraft::isJvm64bit() { return bool(*classes[className]->invokeStaticMethod<bool>("isJvm64bit", "()Z")); }
void Minecraft::startGame() { (classes[className]->invokeMethod<void>(this->object, "startGame", "()V")); }
bool Minecraft::isGamePaused() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isGamePaused", "()Z")); }
long Minecraft::getSystemTime() { return long(*classes[className]->invokeStaticMethod<long>("getSystemTime", "()J")); }
void Minecraft::displayCrashReport(CrashReport arg0) { (classes[className]->invokeMethod<void>(this->object, "displayCrashReport", "(Lnet/minecraft/crash/CrashReport;)V", arg0)); }
void Minecraft::runGameLoop() { (classes[className]->invokeMethod<void>(this->object, "runGameLoop", "()V")); }
void Minecraft::displayGuiScreen(GuiScreen arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGuiScreen", "(Lnet/minecraft/client/gui/GuiScreen;)V", arg0)); }
void Minecraft::shutdownMinecraftApplet() { (classes[className]->invokeMethod<void>(this->object, "shutdownMinecraftApplet", "()V")); }
void Minecraft::startTimerHackThread() { (classes[className]->invokeMethod<void>(this->object, "startTimerHackThread", "()V")); }
void Minecraft::setWindowIcon() { (classes[className]->invokeMethod<void>(this->object, "setWindowIcon", "()V")); }
void Minecraft::setInitialDisplayMode() { (classes[className]->invokeMethod<void>(this->object, "setInitialDisplayMode", "()V")); }
void Minecraft::createDisplay() { (classes[className]->invokeMethod<void>(this->object, "createDisplay", "()V")); }
void Minecraft::refreshResources() { (classes[className]->invokeMethod<void>(this->object, "refreshResources", "()V")); }
void Minecraft::drawSplashScreen(TextureManager arg0) { (classes[className]->invokeMethod<void>(this->object, "drawSplashScreen", "(Lnet/minecraft/client/renderer/texture/TextureManager;)V", arg0)); }
void Minecraft::checkGLError(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkGLError", "(Ljava/lang/String;)V", arg0)); }
void Minecraft::toggleFullscreen() { (classes[className]->invokeMethod<void>(this->object, "toggleFullscreen", "()V")); }
void Minecraft::updateDisplayMode() { (classes[className]->invokeMethod<void>(this->object, "updateDisplayMode", "()V")); }
ByteBuffer Minecraft::readImageToBuffer(InputStream arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "readImageToBuffer", "(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;", arg0)); }
Framebuffer Minecraft::getFramebuffer() { return Framebuffer(*classes[className]->invokeMethod<jobject>(this->object, "getFramebuffer", "()Lnet/minecraft/client/shader/Framebuffer;")); }
Minecraft Minecraft::getMinecraft() { return Minecraft(*classes[className]->invokeStaticMethod<jobject>("getMinecraft", "()Lnet/minecraft/client/Minecraft;")); }
void Minecraft::func_181536_a(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) { (classes[className]->invokeMethod<void>(this->object, "func_181536_a", "(IIIIIIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
void Minecraft::updateDisplay() { (classes[className]->invokeMethod<void>(this->object, "updateDisplay", "()V")); }
ISaveFormat Minecraft::getSaveLoader() { return ISaveFormat(*classes[className]->invokeMethod<jobject>(this->object, "getSaveLoader", "()Lnet/minecraft/world/storage/ISaveFormat;")); }
void Minecraft::setIngameNotInFocus() { (classes[className]->invokeMethod<void>(this->object, "setIngameNotInFocus", "()V")); }
void Minecraft::setIngameFocus() { (classes[className]->invokeMethod<void>(this->object, "setIngameFocus", "()V")); }
void Minecraft::displayDebugInfo(long arg0) { (classes[className]->invokeMethod<void>(this->object, "displayDebugInfo", "(J)V", arg0)); }
bool Minecraft::isSingleplayer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSingleplayer", "()Z")); }
bool Minecraft::isFramerateLimitBelowMax() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFramerateLimitBelowMax", "()Z")); }
int Minecraft::getLimitFramerate() { return int(*classes[className]->invokeMethod<int>(this->object, "getLimitFramerate", "()I")); }
void Minecraft::checkWindowResize() { (classes[className]->invokeMethod<void>(this->object, "checkWindowResize", "()V")); }
void Minecraft::updateDebugProfilerName(int arg0) { (classes[className]->invokeMethod<void>(this->object, "updateDebugProfilerName", "(I)V", arg0)); }
void Minecraft::displayInGameMenu() { (classes[className]->invokeMethod<void>(this->object, "displayInGameMenu", "()V")); }
void Minecraft::sendClickBlockToController(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "sendClickBlockToController", "(Z)V", arg0)); }
void Minecraft::rightClickMouse() { (classes[className]->invokeMethod<void>(this->object, "rightClickMouse", "()V")); }
void Minecraft::updateFramebufferSize() { (classes[className]->invokeMethod<void>(this->object, "updateFramebufferSize", "()V")); }
MusicTicker Minecraft::func_181535_r() { return MusicTicker(*classes[className]->invokeMethod<jobject>(this->object, "func_181535_r", "()Lnet/minecraft/client/audio/MusicTicker;")); }
void Minecraft::dispatchKeypresses() { (classes[className]->invokeMethod<void>(this->object, "dispatchKeypresses", "()V")); }
Entity Minecraft::getRenderViewEntity() { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getRenderViewEntity", "()Lnet/minecraft/entity/Entity;")); }
NetHandlerPlayClient Minecraft::getNetHandler() { return NetHandlerPlayClient(*classes[className]->invokeMethod<jobject>(this->object, "getNetHandler", "()Lnet/minecraft/client/network/NetHandlerPlayClient;")); }
void Minecraft::middleClickMouse() { (classes[className]->invokeMethod<void>(this->object, "middleClickMouse", "()V")); }
void Minecraft::launchIntegratedServer(String arg0, String arg1, WorldSettings arg2) { (classes[className]->invokeMethod<void>(this->object, "launchIntegratedServer", "(Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/world/WorldSettings;)V", arg0, arg1, arg2)); }
void Minecraft::setServerData(ServerData arg0) { (classes[className]->invokeMethod<void>(this->object, "setServerData", "(Lnet/minecraft/client/multiplayer/ServerData;)V", arg0)); }
void Minecraft::setDimensionAndSpawnPlayer(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setDimensionAndSpawnPlayer", "(I)V", arg0)); }
bool Minecraft::isGuiEnabled() { return bool(*classes[className]->invokeStaticMethod<bool>("isGuiEnabled", "()Z")); }
bool Minecraft::isFancyGraphicsEnabled() { return bool(*classes[className]->invokeStaticMethod<bool>("isFancyGraphicsEnabled", "()Z")); }
bool Minecraft::isAmbientOcclusionEnabled() { return bool(*classes[className]->invokeStaticMethod<bool>("isAmbientOcclusionEnabled", "()Z")); }
ItemStack Minecraft::func_181036_a(Item arg0, int arg1, TileEntity arg2) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "func_181036_a", "(Lnet/minecraft/item/Item;ILnet/minecraft/tileentity/TileEntity;)Lnet/minecraft/item/ItemStack;", arg0, arg1, arg2)); }
ListenableFuture Minecraft::scheduleResourcesRefresh() { return ListenableFuture(*classes[className]->invokeMethod<jobject>(this->object, "scheduleResourcesRefresh", "()Lcom/google/common/util/concurrent/ListenableFuture;")); }
String Minecraft::func_181538_aA() { return String(*classes[className]->invokeMethod<jobject>(this->object, "func_181538_aA", "()Ljava/lang/String;")); }
PlayerUsageSnooper Minecraft::getPlayerUsageSnooper() { return PlayerUsageSnooper(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerUsageSnooper", "()Lnet/minecraft/profiler/PlayerUsageSnooper;")); }
int Minecraft::getGLMaximumTextureSize() { return int(*classes[className]->invokeStaticMethod<int>("getGLMaximumTextureSize", "()I")); }
ServerData Minecraft::getCurrentServerData() { return ServerData(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentServerData", "()Lnet/minecraft/client/multiplayer/ServerData;")); }
bool Minecraft::isIntegratedServerRunning() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isIntegratedServerRunning", "()Z")); }
IntegratedServer Minecraft::getIntegratedServer() { return IntegratedServer(*classes[className]->invokeMethod<jobject>(this->object, "getIntegratedServer", "()Lnet/minecraft/server/integrated/IntegratedServer;")); }
void Minecraft::stopIntegratedServer() { (classes[className]->invokeStaticMethod<void>("stopIntegratedServer", "()V")); }
bool Minecraft::isFullScreen() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFullScreen", "()Z")); }
PropertyMap Minecraft::getTwitchDetails() { return PropertyMap(*classes[className]->invokeMethod<jobject>(this->object, "getTwitchDetails", "()Lcom/mojang/authlib/properties/PropertyMap;")); }
PropertyMap Minecraft::func_181037_M() { return PropertyMap(*classes[className]->invokeMethod<jobject>(this->object, "func_181037_M", "()Lcom/mojang/authlib/properties/PropertyMap;")); }
MinecraftSessionService Minecraft::getSessionService() { return MinecraftSessionService(*classes[className]->invokeMethod<jobject>(this->object, "getSessionService", "()Lcom/mojang/authlib/minecraft/MinecraftSessionService;")); }
TextureManager Minecraft::getTextureManager() { return TextureManager(*classes[className]->invokeMethod<jobject>(this->object, "getTextureManager", "()Lnet/minecraft/client/renderer/texture/TextureManager;")); }
IResourceManager Minecraft::getResourceManager() { return IResourceManager(*classes[className]->invokeMethod<jobject>(this->object, "getResourceManager", "()Lnet/minecraft/client/resources/IResourceManager;")); }
ResourcePackRepository Minecraft::getResourcePackRepository() { return ResourcePackRepository(*classes[className]->invokeMethod<jobject>(this->object, "getResourcePackRepository", "()Lnet/minecraft/client/resources/ResourcePackRepository;")); }
LanguageManager Minecraft::getLanguageManager() { return LanguageManager(*classes[className]->invokeMethod<jobject>(this->object, "getLanguageManager", "()Lnet/minecraft/client/resources/LanguageManager;")); }
TextureMap Minecraft::getTextureMapBlocks() { return TextureMap(*classes[className]->invokeMethod<jobject>(this->object, "getTextureMapBlocks", "()Lnet/minecraft/client/renderer/texture/TextureMap;")); }
bool Minecraft::isJava64bit() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isJava64bit", "()Z")); }
SoundHandler Minecraft::getSoundHandler() { return SoundHandler(*classes[className]->invokeMethod<jobject>(this->object, "getSoundHandler", "()Lnet/minecraft/client/audio/SoundHandler;")); }
MusicTicker_MusicType Minecraft::getAmbientMusicType() { return MusicTicker_MusicType(*classes[className]->invokeMethod<jobject>(this->object, "getAmbientMusicType", "()Lnet/minecraft/client/audio/MusicTicker$MusicType;")); }
IStream Minecraft::getTwitchStream() { return IStream(*classes[className]->invokeMethod<jobject>(this->object, "getTwitchStream", "()Lnet/minecraft/client/stream/IStream;")); }
SkinManager Minecraft::getSkinManager() { return SkinManager(*classes[className]->invokeMethod<jobject>(this->object, "getSkinManager", "()Lnet/minecraft/client/resources/SkinManager;")); }
void Minecraft::setRenderViewEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "setRenderViewEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
BlockRendererDispatcher Minecraft::getBlockRendererDispatcher() { return BlockRendererDispatcher(*classes[className]->invokeMethod<jobject>(this->object, "getBlockRendererDispatcher", "()Lnet/minecraft/client/renderer/BlockRendererDispatcher;")); }
RenderManager Minecraft::getRenderManager() { return RenderManager(*classes[className]->invokeMethod<jobject>(this->object, "getRenderManager", "()Lnet/minecraft/client/renderer/entity/RenderManager;")); }
RenderItem Minecraft::getRenderItem() { return RenderItem(*classes[className]->invokeMethod<jobject>(this->object, "getRenderItem", "()Lnet/minecraft/client/renderer/entity/RenderItem;")); }
ItemRenderer Minecraft::getItemRenderer() { return ItemRenderer(*classes[className]->invokeMethod<jobject>(this->object, "getItemRenderer", "()Lnet/minecraft/client/renderer/ItemRenderer;")); }
int Minecraft::getDebugFPS() { return int(*classes[className]->invokeStaticMethod<int>("getDebugFPS", "()I")); }
FrameTimer Minecraft::func_181539_aj() { return FrameTimer(*classes[className]->invokeMethod<jobject>(this->object, "func_181539_aj", "()Lnet/minecraft/util/FrameTimer;")); }
Map Minecraft::getSessionInfo() { return Map(*classes[className]->invokeStaticMethod<jobject>("getSessionInfo", "()Ljava/util/Map;")); }
bool Minecraft::func_181540_al() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181540_al", "()Z")); }
void Minecraft::func_181537_a(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181537_a", "(Z)V", arg0)); }
CrashReport Minecraft::addGraphicsAndWorldToCrashReport(CrashReport arg0) { return CrashReport(*classes[className]->invokeMethod<jobject>(this->object, "addGraphicsAndWorldToCrashReport", "(Lnet/minecraft/crash/CrashReport;)Lnet/minecraft/crash/CrashReport;", arg0)); }
void Minecraft::registerMetadataSerializers() { (classes[className]->invokeMethod<void>(this->object, "registerMetadataSerializers", "()V")); }
void Minecraft::run() { (classes[className]->invokeMethod<void>(this->object, "run", "()V")); }
void Minecraft::shutdown() { (classes[className]->invokeMethod<void>(this->object, "shutdown", "()V")); }
Minecraft_Test Minecraft::test() { return Minecraft_Test(*classes[className]->invokeMethod<jobject>(this->object, "test", "()Lnet/minecraft/client/Minecraft$Test;")); }
void Minecraft::freeMemory() { (classes[className]->invokeMethod<void>(this->object, "freeMemory", "()V")); }
void Minecraft::resize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "resize", "(II)V", arg0, arg1)); }

Proxy_Type Proxy::type() { return Proxy_Type(*classes[className]->invokeMethod<jobject>(this->object, "type", "()Ljava/net/Proxy$Type;")); }
bool Proxy::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Proxy::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Proxy::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
SocketAddress Proxy::address() { return SocketAddress(*classes[className]->invokeMethod<jobject>(this->object, "address", "()Ljava/net/SocketAddress;")); }

Proxy_Type Proxy_Type::valueOf(String arg0) { return Proxy_Type(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/net/Proxy$Type;", arg0)); }

bool String::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int String::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void String::getChars(int arg0, int arg1, arr_C arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "getChars", "(II[CI)V", arg0, arg1, arg2, arg3)); }
int String::indexOf(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(I)I", arg0)); }
int String::indexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;)I", arg0)); }
int String::indexOf(arr_B arg0, byte arg1, int arg2, String arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("indexOf", "([BBILjava/lang/String;I)I", arg0, arg1, arg2, arg3, arg4)); }
int String::indexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
int String::indexOf(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(II)I", arg0, arg1)); }
void String::checkIndex(int arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("checkIndex", "(II)V", arg0, arg1)); }
String String::valueOf(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(I)Ljava/lang/String;", arg0)); }
String String::valueOf(arr_C arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "([C)Ljava/lang/String;", arg0)); }
String String::valueOf(Object arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/Object;)Ljava/lang/String;", arg0)); }
String String::valueOf(bool arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Z)Ljava/lang/String;", arg0)); }
String String::valueOf(arr_C arg0, int arg1, int arg2) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "([CII)Ljava/lang/String;", arg0, arg1, arg2)); }
String String::valueOf(char arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(C)Ljava/lang/String;", arg0)); }
String String::valueOf(double arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(D)Ljava/lang/String;", arg0)); }
String String::valueOf(float arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(F)Ljava/lang/String;", arg0)); }
String String::valueOf(long arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(J)Ljava/lang/String;", arg0)); }
byte String::coder() { return byte(*classes[className]->invokeMethod<byte>(this->object, "coder", "()B")); }
Void String::rangeCheck(arr_C arg0, int arg1, int arg2) { return Void(*classes[className]->invokeStaticMethod<jobject>("rangeCheck", "([CII)Ljava/lang/Void;", arg0, arg1, arg2)); }
void String::checkBoundsOffCount(int arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("checkBoundsOffCount", "(III)V", arg0, arg1, arg2)); }
Charset String::lookupCharset(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("lookupCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
bool String::isNotContinuation(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isNotContinuation", "(I)Z", arg0)); }
char String::decode2(int arg0, int arg1) { return char(*classes[className]->invokeStaticMethod<char>("decode2", "(II)C", arg0, arg1)); }
int String::decodeUTF8_UTF16(arr_B arg0, int arg1, int arg2, arr_B arg3, int arg4, bool arg5) { return int(*classes[className]->invokeStaticMethod<int>("decodeUTF8_UTF16", "([BII[BIZ)I", arg0, arg1, arg2, arg3, arg4, arg5)); }
int String::scale(int arg0, float arg1) { return int(*classes[className]->invokeStaticMethod<int>("scale", "(IF)I", arg0, arg1)); }
int String::decodeWithDecoder(CharsetDecoder arg0, arr_C arg1, arr_B arg2, int arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("decodeWithDecoder", "(Ljava/nio/charset/CharsetDecoder;[C[BII)I", arg0, arg1, arg2, arg3, arg4)); }
String String::newStringNoRepl1(arr_B arg0, Charset arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("newStringNoRepl1", "([BLjava/nio/charset/Charset;)Ljava/lang/String;", arg0, arg1)); }
String String::newStringUTF8NoRepl(arr_B arg0, int arg1, int arg2) { return String(*classes[className]->invokeStaticMethod<jobject>("newStringUTF8NoRepl", "([BII)Ljava/lang/String;", arg0, arg1, arg2)); }
void String::throwMalformed(int arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("throwMalformed", "(II)V", arg0, arg1)); }
void String::throwMalformed(arr_B arg0) { (classes[className]->invokeStaticMethod<void>("throwMalformed", "([B)V", arg0)); }
bool String::isASCII(arr_B arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isASCII", "([B)Z", arg0)); }
void String::throwUnmappable(int arg0) { (classes[className]->invokeStaticMethod<void>("throwUnmappable", "(I)V", arg0)); }
void String::throwUnmappable(arr_B arg0) { (classes[className]->invokeStaticMethod<void>("throwUnmappable", "([B)V", arg0)); }
bool String::isMalformed3(int arg0, int arg1, int arg2) { return bool(*classes[className]->invokeStaticMethod<bool>("isMalformed3", "(III)Z", arg0, arg1, arg2)); }
int String::malformed3(arr_B arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("malformed3", "([BI)I", arg0, arg1)); }
char String::decode3(int arg0, int arg1, int arg2) { return char(*classes[className]->invokeStaticMethod<char>("decode3", "(III)C", arg0, arg1, arg2)); }
bool String::isMalformed3_2(int arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isMalformed3_2", "(II)Z", arg0, arg1)); }
int String::decode4(int arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("decode4", "(IIII)I", arg0, arg1, arg2, arg3)); }
bool String::isMalformed4(int arg0, int arg1, int arg2) { return bool(*classes[className]->invokeStaticMethod<bool>("isMalformed4", "(III)Z", arg0, arg1, arg2)); }
int String::malformed4(arr_B arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("malformed4", "([BI)I", arg0, arg1)); }
bool String::isMalformed4_2(int arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isMalformed4_2", "(II)Z", arg0, arg1)); }
bool String::isMalformed4_3(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isMalformed4_3", "(I)Z", arg0)); }
bool String::isLatin1() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLatin1", "()Z")); }
int String::codePointAt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointAt", "(I)I", arg0)); }
int String::codePointBefore(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointBefore", "(I)I", arg0)); }
int String::codePointCount(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointCount", "(II)I", arg0, arg1)); }
int String::offsetByCodePoints(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "offsetByCodePoints", "(II)I", arg0, arg1)); }
void String::checkBoundsBeginEnd(int arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("checkBoundsBeginEnd", "(III)V", arg0, arg1, arg2)); }
void String::getBytes(arr_B arg0, int arg1, byte arg2) { (classes[className]->invokeMethod<void>(this->object, "getBytes", "([BIB)V", arg0, arg1, arg2)); }
void String::getBytes(int arg0, int arg1, arr_B arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "getBytes", "(II[BI)V", arg0, arg1, arg2, arg3)); }
void String::getBytes(arr_B arg0, int arg1, int arg2, byte arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "getBytes", "([BIIBI)V", arg0, arg1, arg2, arg3, arg4)); }
bool String::contentEquals(CharSequence arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contentEquals", "(Ljava/lang/CharSequence;)Z", arg0)); }
bool String::contentEquals(StringBuffer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contentEquals", "(Ljava/lang/StringBuffer;)Z", arg0)); }
bool String::nonSyncContentEquals(AbstractStringBuilder arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "nonSyncContentEquals", "(Ljava/lang/AbstractStringBuilder;)Z", arg0)); }
bool String::regionMatches(bool arg0, int arg1, String arg2, int arg3, int arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "regionMatches", "(ZILjava/lang/String;II)Z", arg0, arg1, arg2, arg3, arg4)); }
bool String::regionMatches(int arg0, String arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "regionMatches", "(ILjava/lang/String;II)Z", arg0, arg1, arg2, arg3)); }
bool String::startsWith(String arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "startsWith", "(Ljava/lang/String;I)Z", arg0, arg1)); }
bool String::startsWith(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "startsWith", "(Ljava/lang/String;)Z", arg0)); }
int String::lastIndexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;)I", arg0)); }
int String::lastIndexOf(arr_B arg0, byte arg1, int arg2, String arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("lastIndexOf", "([BBILjava/lang/String;I)I", arg0, arg1, arg2, arg3, arg4)); }
int String::lastIndexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
int String::lastIndexOf(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(II)I", arg0, arg1)); }
int String::lastIndexOf(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(I)I", arg0)); }
String String::substring(int arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "substring", "(II)Ljava/lang/String;", arg0, arg1)); }
String String::substring(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "substring", "(I)Ljava/lang/String;", arg0)); }
String String::replace(char arg0, char arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "replace", "(CC)Ljava/lang/String;", arg0, arg1)); }
String String::replace(CharSequence arg0, CharSequence arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;", arg0, arg1)); }
bool String::matches(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "matches", "(Ljava/lang/String;)Z", arg0)); }
String String::replaceFirst(String arg0, String arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
String String::replaceAll(String arg0, String arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
String String::join(CharSequence arg0, CharSequence_interface arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("join", "(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;", arg0, arg1)); }
String String::join(String arg0, String arg1, String arg2, String_interface arg3, int arg4) { return String(*classes[className]->invokeStaticMethod<jobject>("join", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)Ljava/lang/String;", arg0, arg1, arg2, arg3, arg4)); }
String String::join(CharSequence arg0, Iterable arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("join", "(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;", arg0, arg1)); }
String String::toLowerCase() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toLowerCase", "()Ljava/lang/String;")); }
String String::toLowerCase(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String String::toUpperCase() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toUpperCase", "()Ljava/lang/String;")); }
String String::toUpperCase(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String String::trim() { return String(*classes[className]->invokeMethod<jobject>(this->object, "trim", "()Ljava/lang/String;")); }
String String::strip() { return String(*classes[className]->invokeMethod<jobject>(this->object, "strip", "()Ljava/lang/String;")); }
String String::stripLeading() { return String(*classes[className]->invokeMethod<jobject>(this->object, "stripLeading", "()Ljava/lang/String;")); }
String String::stripTrailing() { return String(*classes[className]->invokeMethod<jobject>(this->object, "stripTrailing", "()Ljava/lang/String;")); }
int String::indexOfNonWhitespace() { return int(*classes[className]->invokeMethod<int>(this->object, "indexOfNonWhitespace", "()I")); }
Stream String::lines() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "lines", "()Ljava/util/stream/Stream;")); }
String String::repeat(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "repeat", "(I)Ljava/lang/String;", arg0)); }
int String::lastIndexOfNonWhitespace() { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOfNonWhitespace", "()I")); }
int String::outdent(List arg0) { return int(*classes[className]->invokeStaticMethod<int>("outdent", "(Ljava/util/List;)I", arg0)); }
bool String::isBlank() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlank", "()Z")); }
String String::format(String arg0, Object_interface arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", arg0, arg1)); }
String String::format(Locale arg0, String arg1, Object_interface arg2) { return String(*classes[className]->invokeStaticMethod<jobject>("format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", arg0, arg1, arg2)); }
String String::resolveConstantDesc(MethodHandles_Lookup arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/String;", arg0)); }
String String::newStringNoRepl(arr_B arg0, Charset arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("newStringNoRepl", "([BLjava/nio/charset/Charset;)Ljava/lang/String;", arg0, arg1)); }
int String::decodeASCII(arr_B arg0, int arg1, arr_C arg2, int arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("decodeASCII", "([BI[CII)I", arg0, arg1, arg2, arg3, arg4)); }
bool String::equalsIgnoreCase(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equalsIgnoreCase", "(Ljava/lang/String;)Z", arg0)); }
int String::compareToIgnoreCase(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareToIgnoreCase", "(Ljava/lang/String;)I", arg0)); }
bool String::endsWith(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "endsWith", "(Ljava/lang/String;)Z", arg0)); }
String String::concat(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "concat", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool String::contains(CharSequence arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/lang/CharSequence;)Z", arg0)); }
String String::indent(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "indent", "(I)Ljava/lang/String;", arg0)); }
String String::stripIndent() { return String(*classes[className]->invokeMethod<jobject>(this->object, "stripIndent", "()Ljava/lang/String;")); }
String String::translateEscapes() { return String(*classes[className]->invokeMethod<jobject>(this->object, "translateEscapes", "()Ljava/lang/String;")); }
Object String::transform(Function arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "transform", "(Ljava/util/function/Function;)Ljava/lang/Object;", arg0)); }
String String::formatted(Object_interface arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "formatted", "([Ljava/lang/Object;)Ljava/lang/String;", arg0)); }
String String::copyValueOf(arr_C arg0, int arg1, int arg2) { return String(*classes[className]->invokeStaticMethod<jobject>("copyValueOf", "([CII)Ljava/lang/String;", arg0, arg1, arg2)); }
String String::copyValueOf(arr_C arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("copyValueOf", "([C)Ljava/lang/String;", arg0)); }
String String::intern() { return String(*classes[className]->invokeMethod<jobject>(this->object, "intern", "()Ljava/lang/String;")); }
void String::checkOffset(int arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("checkOffset", "(II)V", arg0, arg1)); }
String String::valueOfCodePoint(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("valueOfCodePoint", "(I)Ljava/lang/String;", arg0)); }

void Object::finalize() { (classes[className]->invokeMethod<void>(this->object, "finalize", "()V")); }
void Object::wait(long arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "wait", "(JI)V", arg0, arg1)); }
void Object::wait() { (classes[className]->invokeMethod<void>(this->object, "wait", "()V")); }
void Object::wait(long arg0) { (classes[className]->invokeMethod<void>(this->object, "wait", "(J)V", arg0)); }
bool Object::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Object::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Object::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Class Object::getClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getClass", "()Ljava/lang/Class;")); }
Object Object::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void Object::notify() { (classes[className]->invokeMethod<void>(this->object, "notify", "()V")); }
void Object::notifyAll() { (classes[className]->invokeMethod<void>(this->object, "notifyAll", "()V")); }

String Class::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
void Class::checkPackageAccess(SecurityManager arg0, ClassLoader arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "checkPackageAccess", "(Ljava/lang/SecurityManager;Ljava/lang/ClassLoader;Z)V", arg0, arg1, arg2)); }
Class Class::forName(String arg0, bool arg1, ClassLoader arg2) { return Class(*classes[className]->invokeStaticMethod<jobject>("forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", arg0, arg1, arg2)); }
Class Class::forName(String arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("forName", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class Class::forName(Module arg0, String arg1) { return Class(*classes[className]->invokeStaticMethod<jobject>("forName", "(Ljava/lang/Module;Ljava/lang/String;)Ljava/lang/Class;", arg0, arg1)); }
Class Class::forName0(String arg0, bool arg1, ClassLoader arg2, Class arg3) { return Class(*classes[className]->invokeStaticMethod<jobject>("forName0", "(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;", arg0, arg1, arg2, arg3)); }
String Class::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Module Class::getModule() { return Module(*classes[className]->invokeMethod<jobject>(this->object, "getModule", "()Ljava/lang/Module;")); }
ProtectionDomain Class::getProtectionDomain() { return ProtectionDomain(*classes[className]->invokeMethod<jobject>(this->object, "getProtectionDomain", "()Ljava/security/ProtectionDomain;")); }
bool Class::isAssignableFrom(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAssignableFrom", "(Ljava/lang/Class;)Z", arg0)); }
bool Class::isInstance(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInstance", "(Ljava/lang/Object;)Z", arg0)); }
int Class::getModifiers() { return int(*classes[className]->invokeMethod<int>(this->object, "getModifiers", "()I")); }
bool Class::isInterface() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInterface", "()Z")); }
bool Class::isHidden() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHidden", "()Z")); }
Class Class::getSuperclass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getSuperclass", "()Ljava/lang/Class;")); }
Object Class::cast(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Class Class::componentType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "componentType", "()Ljava/lang/Class;")); }
ClassLoader Class::getClassLoader0() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoader0", "()Ljava/lang/ClassLoader;")); }
Class Class::getComponentType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getComponentType", "()Ljava/lang/Class;")); }
bool Class::isAnnotation() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnnotation", "()Z")); }
bool Class::isEnum() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnum", "()Z")); }
bool Class::isRecord() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRecord", "()Z")); }
ClassLoader Class::getClassLoader() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava/lang/ClassLoader;")); }
void Class::checkMemberAccess(SecurityManager arg0, int arg1, Class arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "checkMemberAccess", "(Ljava/lang/SecurityManager;ILjava/lang/Class;Z)V", arg0, arg1, arg2, arg3)); }
ReflectionFactory Class::getReflectionFactory() { return ReflectionFactory(*classes[className]->invokeStaticMethod<jobject>("getReflectionFactory", "()Ljdk/internal/reflect/ReflectionFactory;")); }
Constructor Class::getConstructor0(Class_interface arg0, int arg1) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "getConstructor0", "([Ljava/lang/Class;I)Ljava/lang/reflect/Constructor;", arg0, arg1)); }
Object Class::newInstance() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "newInstance", "()Ljava/lang/Object;")); }
String Class::initClassName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "initClassName", "()Ljava/lang/String;")); }
ClassRepository Class::getGenericInfo() { return ClassRepository(*classes[className]->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun/reflect/generics/repository/ClassRepository;")); }
Class Class::elementType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "elementType", "()Ljava/lang/Class;")); }
Class_ReflectionData Class::reflectionData() { return Class_ReflectionData(*classes[className]->invokeMethod<jobject>(this->object, "reflectionData", "()Ljava/lang/Class$ReflectionData;")); }
Class_EnclosingMethodInfo Class::getEnclosingMethodInfo() { return Class_EnclosingMethodInfo(*classes[className]->invokeMethod<jobject>(this->object, "getEnclosingMethodInfo", "()Ljava/lang/Class$EnclosingMethodInfo;")); }
GenericsFactory Class::getFactory() { return GenericsFactory(*classes[className]->invokeMethod<jobject>(this->object, "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;")); }
Class Class::toClass(Type arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("toClass", "(Ljava/lang/reflect/Type;)Ljava/lang/Class;", arg0)); }
Class Class::getEnclosingClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getEnclosingClass", "()Ljava/lang/Class;")); }
bool Class::arrayContentsEq(Object_interface arg0, Object_interface arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("arrayContentsEq", "([Ljava/lang/Object;[Ljava/lang/Object;)Z", arg0, arg1)); }
Class Class::getDeclaringClass0() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaringClass0", "()Ljava/lang/Class;")); }
String Class::getSimpleName0() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSimpleName0", "()Ljava/lang/String;")); }
String Class::getSimpleName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSimpleName", "()Ljava/lang/String;")); }
String Class::getSimpleBinaryName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSimpleBinaryName", "()Ljava/lang/String;")); }
String Class::getCanonicalName0() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCanonicalName0", "()Ljava/lang/String;")); }
String Class::getCanonicalName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCanonicalName", "()Ljava/lang/String;")); }
bool Class::isLocalOrAnonymousClass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLocalOrAnonymousClass", "()Z")); }
String Class::getSimpleBinaryName0() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSimpleBinaryName0", "()Ljava/lang/String;")); }
bool Class::isTopLevelClass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTopLevelClass", "()Z")); }
bool Class::hasEnclosingMethodInfo() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasEnclosingMethodInfo", "()Z")); }
Field Class::getField0(String arg0) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getField0", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0)); }
Method Class::getMethod0(String arg0, Class_interface arg1) { return Method(*classes[className]->invokeMethod<jobject>(this->object, "getMethod0", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1)); }
String Class::methodToString(String arg0, Class_interface arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "methodToString", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/String;", arg0, arg1)); }
Field Class::searchFields(Field_interface arg0, String arg1) { return Field(*classes[className]->invokeStaticMethod<jobject>("searchFields", "([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0, arg1)); }
Method Class::searchMethods(Method_interface arg0, String arg1, Class_interface arg2) { return Method(*classes[className]->invokeStaticMethod<jobject>("searchMethods", "([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1, arg2)); }
String Class::resolveName(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "resolveName", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool Class::isOpenToCaller(String arg0, Class arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpenToCaller", "(Ljava/lang/String;Ljava/lang/Class;)Z", arg0, arg1)); }
InputStream Class::getResourceAsStream(String arg0) { return InputStream(*classes[className]->invokeMethod<jobject>(this->object, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", arg0)); }
URL Class::getResource(String arg0) { return URL(*classes[className]->invokeMethod<jobject>(this->object, "getResource", "(Ljava/lang/String;)Ljava/net/URL;", arg0)); }
ProtectionDomain Class::protectionDomain() { return ProtectionDomain(*classes[className]->invokeMethod<jobject>(this->object, "protectionDomain", "()Ljava/security/ProtectionDomain;")); }
ProtectionDomain Class::getProtectionDomain0() { return ProtectionDomain(*classes[className]->invokeMethod<jobject>(this->object, "getProtectionDomain0", "()Ljava/security/ProtectionDomain;")); }
String Class::getPackageName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPackageName", "()Ljava/lang/String;")); }
Class_ReflectionData Class::newReflectionData(SoftReference arg0, int arg1) { return Class_ReflectionData(*classes[className]->invokeMethod<jobject>(this->object, "newReflectionData", "(Ljava/lang/ref/SoftReference;I)Ljava/lang/Class$ReflectionData;", arg0, arg1)); }
String Class::getGenericSignature0() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getGenericSignature0", "()Ljava/lang/String;")); }
void Class::addAll(Collection arg0, Field_interface arg1) { (classes[className]->invokeStaticMethod<void>("addAll", "(Ljava/util/Collection;[Ljava/lang/reflect/Field;)V", arg0, arg1)); }
PublicMethods_MethodList Class::getMethodsRecursive(String arg0, Class_interface arg1, bool arg2) { return PublicMethods_MethodList(*classes[className]->invokeMethod<jobject>(this->object, "getMethodsRecursive", "(Ljava/lang/String;[Ljava/lang/Class;Z)Ljava/lang/PublicMethods$MethodList;", arg0, arg1, arg2)); }
bool Class::desiredAssertionStatus0(Class arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("desiredAssertionStatus0", "(Ljava/lang/Class;)Z", arg0)); }
bool Class::desiredAssertionStatus() { return bool(*classes[className]->invokeMethod<bool>(this->object, "desiredAssertionStatus", "()Z")); }
bool Class::isRecord0() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRecord0", "()Z")); }
Method Class::getMethod(String arg0, Class_interface arg1) { return Method(*classes[className]->invokeMethod<jobject>(this->object, "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1)); }
Map Class::enumConstantDirectory() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "enumConstantDirectory", "()Ljava/util/Map;")); }
String Class::cannotCastMsg(Object arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "cannotCastMsg", "(Ljava/lang/Object;)Ljava/lang/String;", arg0)); }
Class_AnnotationData Class::annotationData() { return Class_AnnotationData(*classes[className]->invokeMethod<jobject>(this->object, "annotationData", "()Ljava/lang/Class$AnnotationData;")); }
Class_AnnotationData Class::createAnnotationData(int arg0) { return Class_AnnotationData(*classes[className]->invokeMethod<jobject>(this->object, "createAnnotationData", "(I)Ljava/lang/Class$AnnotationData;", arg0)); }
ConstantPool Class::getConstantPool() { return ConstantPool(*classes[className]->invokeMethod<jobject>(this->object, "getConstantPool", "()Ljdk/internal/reflect/ConstantPool;")); }
bool Class::casAnnotationType(AnnotationType arg0, AnnotationType arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "casAnnotationType", "(Lsun/reflect/annotation/AnnotationType;Lsun/reflect/annotation/AnnotationType;)Z", arg0, arg1)); }
Class Class::getNestHost0() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getNestHost0", "()Ljava/lang/Class;")); }
Class Class::getNestHost() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getNestHost", "()Ljava/lang/Class;")); }
void Class::checkPackageAccessForPermittedSubclasses(SecurityManager arg0, ClassLoader arg1, Class_interface arg2) { (classes[className]->invokeStaticMethod<void>("checkPackageAccessForPermittedSubclasses", "(Ljava/lang/SecurityManager;Ljava/lang/ClassLoader;[Ljava/lang/Class;)V", arg0, arg1, arg2)); }
Class Class::arrayType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "arrayType", "()Ljava/lang/Class;")); }
bool Class::isDirectSubType(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirectSubType", "(Ljava/lang/Class;)Z", arg0)); }
void Class::registerNatives() { (classes[className]->invokeStaticMethod<void>("registerNatives", "()V")); }
String Class::toGenericString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava/lang/String;")); }
String Class::typeVarBounds(TypeVariable arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("typeVarBounds", "(Ljava/lang/reflect/TypeVariable;)Ljava/lang/String;", arg0)); }
bool Class::isSynthetic() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSynthetic", "()Z")); }
Object Class::getClassData() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getClassData", "()Ljava/lang/Object;")); }
Type Class::getGenericSuperclass() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "getGenericSuperclass", "()Ljava/lang/reflect/Type;")); }
Package Class::getPackage() { return Package(*classes[className]->invokeMethod<jobject>(this->object, "getPackage", "()Ljava/lang/Package;")); }
void Class::setSigners(Object_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setSigners", "([Ljava/lang/Object;)V", arg0)); }
Method Class::getEnclosingMethod() { return Method(*classes[className]->invokeMethod<jobject>(this->object, "getEnclosingMethod", "()Ljava/lang/reflect/Method;")); }
Constructor Class::getEnclosingConstructor() { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "getEnclosingConstructor", "()Ljava/lang/reflect/Constructor;")); }
Class Class::getDeclaringClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava/lang/Class;")); }
bool Class::isAnonymousClass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnonymousClass", "()Z")); }
bool Class::isLocalClass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLocalClass", "()Z")); }
bool Class::isMemberClass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMemberClass", "()Z")); }
Field Class::getField(String arg0) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0)); }
Constructor Class::getConstructor(Class_interface arg0) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "getConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0)); }
Field Class::getDeclaredField(String arg0) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0)); }
Method Class::getDeclaredMethod(String arg0, Class_interface arg1) { return Method(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1)); }
List Class::getDeclaredPublicMethods(String arg0, Class_interface arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaredPublicMethods", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/util/List;", arg0, arg1)); }
Constructor Class::getDeclaredConstructor(Class_interface arg0) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaredConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0)); }
Class Class::getPrimitiveClass(String arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("getPrimitiveClass", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class Class::asSubclass(Class arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;", arg0)); }
AnnotationType Class::getAnnotationType() { return AnnotationType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotationType", "()Lsun/reflect/annotation/AnnotationType;")); }
Map Class::getDeclaredAnnotationMap() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaredAnnotationMap", "()Ljava/util/Map;")); }
AnnotatedType Class::getAnnotatedSuperclass() { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedSuperclass", "()Ljava/lang/reflect/AnnotatedType;")); }
bool Class::isNestmateOf(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNestmateOf", "(Ljava/lang/Class;)Z", arg0)); }
bool Class::isSealed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSealed", "()Z")); }

void SecurityManager::checkPackageAccess(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkPackageAccess", "(Ljava/lang/String;)V", arg0)); }
void SecurityManager::checkPermission(Permission arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "checkPermission", "(Ljava/security/Permission;Ljava/lang/Object;)V", arg0, arg1)); }
void SecurityManager::checkPermission(Permission arg0) { (classes[className]->invokeMethod<void>(this->object, "checkPermission", "(Ljava/security/Permission;)V", arg0)); }
void SecurityManager::checkCreateClassLoader() { (classes[className]->invokeMethod<void>(this->object, "checkCreateClassLoader", "()V")); }
void SecurityManager::checkPropertiesAccess() { (classes[className]->invokeMethod<void>(this->object, "checkPropertiesAccess", "()V")); }
void SecurityManager::checkPropertyAccess(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkPropertyAccess", "(Ljava/lang/String;)V", arg0)); }
ThreadGroup SecurityManager::getThreadGroup() { return ThreadGroup(*classes[className]->invokeMethod<jobject>(this->object, "getThreadGroup", "()Ljava/lang/ThreadGroup;")); }
Set SecurityManager::nonExportedPkgs(ModuleDescriptor arg0) { return Set(*classes[className]->invokeStaticMethod<jobject>("nonExportedPkgs", "(Ljava/lang/module/ModuleDescriptor;)Ljava/util/Set;", arg0)); }
ThreadGroup SecurityManager::getRootGroup() { return ThreadGroup(*classes[className]->invokeStaticMethod<jobject>("getRootGroup", "()Ljava/lang/ThreadGroup;")); }
void SecurityManager::addNonExportedPackages(ModuleLayer arg0) { (classes[className]->invokeStaticMethod<void>("addNonExportedPackages", "(Ljava/lang/ModuleLayer;)V", arg0)); }
Object SecurityManager::getSecurityContext() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getSecurityContext", "()Ljava/lang/Object;")); }
void SecurityManager::checkAccess(Thread arg0) { (classes[className]->invokeMethod<void>(this->object, "checkAccess", "(Ljava/lang/Thread;)V", arg0)); }
void SecurityManager::checkAccess(ThreadGroup arg0) { (classes[className]->invokeMethod<void>(this->object, "checkAccess", "(Ljava/lang/ThreadGroup;)V", arg0)); }
void SecurityManager::checkExit(int arg0) { (classes[className]->invokeMethod<void>(this->object, "checkExit", "(I)V", arg0)); }
void SecurityManager::checkExec(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkExec", "(Ljava/lang/String;)V", arg0)); }
void SecurityManager::checkLink(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkLink", "(Ljava/lang/String;)V", arg0)); }
void SecurityManager::checkRead(FileDescriptor arg0) { (classes[className]->invokeMethod<void>(this->object, "checkRead", "(Ljava/io/FileDescriptor;)V", arg0)); }
void SecurityManager::checkRead(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkRead", "(Ljava/lang/String;)V", arg0)); }
void SecurityManager::checkRead(String arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "checkRead", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
void SecurityManager::checkWrite(FileDescriptor arg0) { (classes[className]->invokeMethod<void>(this->object, "checkWrite", "(Ljava/io/FileDescriptor;)V", arg0)); }
void SecurityManager::checkWrite(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkWrite", "(Ljava/lang/String;)V", arg0)); }
void SecurityManager::checkDelete(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkDelete", "(Ljava/lang/String;)V", arg0)); }
void SecurityManager::checkConnect(String arg0, int arg1, Object arg2) { (classes[className]->invokeMethod<void>(this->object, "checkConnect", "(Ljava/lang/String;ILjava/lang/Object;)V", arg0, arg1, arg2)); }
void SecurityManager::checkConnect(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "checkConnect", "(Ljava/lang/String;I)V", arg0, arg1)); }
void SecurityManager::checkListen(int arg0) { (classes[className]->invokeMethod<void>(this->object, "checkListen", "(I)V", arg0)); }
void SecurityManager::checkAccept(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "checkAccept", "(Ljava/lang/String;I)V", arg0, arg1)); }
void SecurityManager::checkMulticast(InetAddress arg0) { (classes[className]->invokeMethod<void>(this->object, "checkMulticast", "(Ljava/net/InetAddress;)V", arg0)); }
void SecurityManager::checkMulticast(InetAddress arg0, byte arg1) { (classes[className]->invokeMethod<void>(this->object, "checkMulticast", "(Ljava/net/InetAddress;B)V", arg0, arg1)); }
void SecurityManager::checkPrintJobAccess() { (classes[className]->invokeMethod<void>(this->object, "checkPrintJobAccess", "()V")); }
void SecurityManager::invalidatePackageAccessCache() { (classes[className]->invokeStaticMethod<void>("invalidatePackageAccessCache", "()V")); }
void SecurityManager::checkPackageDefinition(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkPackageDefinition", "(Ljava/lang/String;)V", arg0)); }
void SecurityManager::checkSetFactory() { (classes[className]->invokeMethod<void>(this->object, "checkSetFactory", "()V")); }
void SecurityManager::checkSecurityAccess(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkSecurityAccess", "(Ljava/lang/String;)V", arg0)); }

PermissionCollection Permission::newPermissionCollection() { return PermissionCollection(*classes[className]->invokeMethod<jobject>(this->object, "newPermissionCollection", "()Ljava/security/PermissionCollection;")); }
String Permission::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool Permission::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Permission::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Permission::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool Permission::implies(Permission arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "implies", "(Ljava/security/Permission;)Z", arg0)); }
String Permission::getActions() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getActions", "()Ljava/lang/String;")); }

Stream PermissionCollection::elementsAsStream() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "elementsAsStream", "()Ljava/util/stream/Stream;")); }
void PermissionCollection::add(Permission arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/security/Permission;)V", arg0)); }
String PermissionCollection::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Enumeration PermissionCollection::elements() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "elements", "()Ljava/util/Enumeration;")); }
void PermissionCollection::setReadOnly() { (classes[className]->invokeMethod<void>(this->object, "setReadOnly", "()V")); }
bool PermissionCollection::implies(Permission arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "implies", "(Ljava/security/Permission;)Z", arg0)); }
bool PermissionCollection::isReadOnly() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReadOnly", "()Z")); }



String ThreadGroup::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
void ThreadGroup::add(ThreadGroup arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/lang/ThreadGroup;)V", arg0)); }
void ThreadGroup::add(Thread arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/lang/Thread;)V", arg0)); }
void ThreadGroup::remove(ThreadGroup arg0) { (classes[className]->invokeMethod<void>(this->object, "remove", "(Ljava/lang/ThreadGroup;)V", arg0)); }
void ThreadGroup::remove(Thread arg0) { (classes[className]->invokeMethod<void>(this->object, "remove", "(Ljava/lang/Thread;)V", arg0)); }
String ThreadGroup::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void ThreadGroup::list() { (classes[className]->invokeMethod<void>(this->object, "list", "()V")); }
void ThreadGroup::list(PrintStream arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "list", "(Ljava/io/PrintStream;I)V", arg0, arg1)); }
ThreadGroup ThreadGroup::getParent() { return ThreadGroup(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/lang/ThreadGroup;")); }
void ThreadGroup::checkAccess() { (classes[className]->invokeMethod<void>(this->object, "checkAccess", "()V")); }
void ThreadGroup::setDaemon(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDaemon", "(Z)V", arg0)); }
void ThreadGroup::addUnstarted() { (classes[className]->invokeMethod<void>(this->object, "addUnstarted", "()V")); }
bool ThreadGroup::isDaemon() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDaemon", "()Z")); }
void ThreadGroup::threadStartFailed(Thread arg0) { (classes[className]->invokeMethod<void>(this->object, "threadStartFailed", "(Ljava/lang/Thread;)V", arg0)); }
void ThreadGroup::threadTerminated(Thread arg0) { (classes[className]->invokeMethod<void>(this->object, "threadTerminated", "(Ljava/lang/Thread;)V", arg0)); }
void ThreadGroup::resume() { (classes[className]->invokeMethod<void>(this->object, "resume", "()V")); }
void ThreadGroup::interrupt() { (classes[className]->invokeMethod<void>(this->object, "interrupt", "()V")); }
int ThreadGroup::getMaxPriority() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxPriority", "()I")); }
int ThreadGroup::activeCount() { return int(*classes[className]->invokeMethod<int>(this->object, "activeCount", "()I")); }
int ThreadGroup::enumerate(ThreadGroup_interface arg0, bool arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "enumerate", "([Ljava/lang/ThreadGroup;Z)I", arg0, arg1)); }
int ThreadGroup::enumerate(Thread_interface arg0, int arg1, bool arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "enumerate", "([Ljava/lang/Thread;IZ)I", arg0, arg1, arg2)); }
int ThreadGroup::enumerate(ThreadGroup_interface arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "enumerate", "([Ljava/lang/ThreadGroup;)I", arg0)); }
int ThreadGroup::enumerate(Thread_interface arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "enumerate", "([Ljava/lang/Thread;)I", arg0)); }
int ThreadGroup::enumerate(Thread_interface arg0, bool arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "enumerate", "([Ljava/lang/Thread;Z)I", arg0, arg1)); }
int ThreadGroup::enumerate(ThreadGroup_interface arg0, int arg1, bool arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "enumerate", "([Ljava/lang/ThreadGroup;IZ)I", arg0, arg1, arg2)); }
void ThreadGroup::stop() { (classes[className]->invokeMethod<void>(this->object, "stop", "()V")); }
void ThreadGroup::suspend() { (classes[className]->invokeMethod<void>(this->object, "suspend", "()V")); }
Void ThreadGroup::checkParentAccess(ThreadGroup arg0) { return Void(*classes[className]->invokeStaticMethod<jobject>("checkParentAccess", "(Ljava/lang/ThreadGroup;)Ljava/lang/Void;", arg0)); }
void ThreadGroup::setMaxPriority(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setMaxPriority", "(I)V", arg0)); }
int ThreadGroup::activeGroupCount() { return int(*classes[className]->invokeMethod<int>(this->object, "activeGroupCount", "()I")); }
bool ThreadGroup::stopOrSuspend(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "stopOrSuspend", "(Z)Z", arg0)); }
void ThreadGroup::destroy() { (classes[className]->invokeMethod<void>(this->object, "destroy", "()V")); }
bool ThreadGroup::isDestroyed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDestroyed", "()Z")); }
bool ThreadGroup::parentOf(ThreadGroup arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "parentOf", "(Ljava/lang/ThreadGroup;)Z", arg0)); }
bool ThreadGroup::allowThreadSuspension(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "allowThreadSuspension", "(Z)Z", arg0)); }

String Thread::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
void Thread::exit() { (classes[className]->invokeMethod<void>(this->object, "exit", "()V")); }
void Thread::dispatchUncaughtException(Throwable arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchUncaughtException", "(Ljava/lang/Throwable;)V", arg0)); }
String Thread::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Object Thread::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
Thread Thread::currentThread() { return Thread(*classes[className]->invokeStaticMethod<jobject>("currentThread", "()Ljava/lang/Thread;")); }
void Thread::onSpinWait() { (classes[className]->invokeStaticMethod<void>("onSpinWait", "()V")); }
void Thread::join() { (classes[className]->invokeMethod<void>(this->object, "join", "()V")); }
void Thread::join(long arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "join", "(JI)V", arg0, arg1)); }
void Thread::join(long arg0) { (classes[className]->invokeMethod<void>(this->object, "join", "(J)V", arg0)); }
void Thread::start() { (classes[className]->invokeMethod<void>(this->object, "start", "()V")); }
void Thread::registerNatives() { (classes[className]->invokeStaticMethod<void>("registerNatives", "()V")); }
ThreadGroup Thread::getThreadGroup() { return ThreadGroup(*classes[className]->invokeMethod<jobject>(this->object, "getThreadGroup", "()Ljava/lang/ThreadGroup;")); }
void Thread::setContextClassLoader(ClassLoader arg0) { (classes[className]->invokeMethod<void>(this->object, "setContextClassLoader", "(Ljava/lang/ClassLoader;)V", arg0)); }
bool Thread::holdsLock(Object arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("holdsLock", "(Ljava/lang/Object;)Z", arg0)); }
void Thread::checkAccess() { (classes[className]->invokeMethod<void>(this->object, "checkAccess", "()V")); }
void Thread::dumpStack() { (classes[className]->invokeStaticMethod<void>("dumpStack", "()V")); }
void Thread::setPriority(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setPriority", "(I)V", arg0)); }
void Thread::setDaemon(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDaemon", "(Z)V", arg0)); }
void Thread::sleep(long arg0) { (classes[className]->invokeStaticMethod<void>("sleep", "(J)V", arg0)); }
void Thread::sleep(long arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("sleep", "(JI)V", arg0, arg1)); }
bool Thread::isCCLOverridden(Class arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isCCLOverridden", "(Ljava/lang/Class;)Z", arg0)); }
bool Thread::isDaemon() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDaemon", "()Z")); }
int Thread::getPriority() { return int(*classes[className]->invokeMethod<int>(this->object, "getPriority", "()I")); }
ClassLoader Thread::getContextClassLoader() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getContextClassLoader", "()Ljava/lang/ClassLoader;")); }
long Thread::nextThreadID() { return long(*classes[className]->invokeStaticMethod<long>("nextThreadID", "()J")); }
int Thread::nextThreadNum() { return int(*classes[className]->invokeStaticMethod<int>("nextThreadNum", "()I")); }
void Thread::start0() { (classes[className]->invokeMethod<void>(this->object, "start0", "()V")); }
void Thread::resume() { (classes[className]->invokeMethod<void>(this->object, "resume", "()V")); }
void Thread::stop0(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "stop0", "(Ljava/lang/Object;)V", arg0)); }
bool Thread::interrupted() { return bool(*classes[className]->invokeStaticMethod<bool>("interrupted", "()Z")); }
void Thread::interrupt0() { (classes[className]->invokeMethod<void>(this->object, "interrupt0", "()V")); }
void Thread::interrupt() { (classes[className]->invokeMethod<void>(this->object, "interrupt", "()V")); }
void Thread::clearInterruptEvent() { (classes[className]->invokeStaticMethod<void>("clearInterruptEvent", "()V")); }
void Thread::suspend0() { (classes[className]->invokeMethod<void>(this->object, "suspend0", "()V")); }
void Thread::resume0() { (classes[className]->invokeMethod<void>(this->object, "resume0", "()V")); }
void Thread::setPriority0(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setPriority0", "(I)V", arg0)); }
void Thread::setNativeName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setNativeName", "(Ljava/lang/String;)V", arg0)); }
int Thread::activeCount() { return int(*classes[className]->invokeStaticMethod<int>("activeCount", "()I")); }
int Thread::enumerate(Thread_interface arg0) { return int(*classes[className]->invokeStaticMethod<int>("enumerate", "([Ljava/lang/Thread;)I", arg0)); }
bool Thread::isAlive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAlive", "()Z")); }
void Thread::processQueue(ReferenceQueue arg0, ConcurrentMap arg1) { (classes[className]->invokeStaticMethod<void>("processQueue", "(Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V", arg0, arg1)); }
bool Thread::auditSubclass(Class arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("auditSubclass", "(Ljava/lang/Class;)Z", arg0)); }
void Thread::setDefaultUncaughtExceptionHandler(Thread_UncaughtExceptionHandler arg0) { (classes[className]->invokeStaticMethod<void>("setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V", arg0)); }
Thread_UncaughtExceptionHandler Thread::getUncaughtExceptionHandler() { return Thread_UncaughtExceptionHandler(*classes[className]->invokeMethod<jobject>(this->object, "getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;")); }
void Thread::blockedOn(Interruptible arg0) { (classes[className]->invokeStaticMethod<void>("blockedOn", "(Lsun/nio/ch/Interruptible;)V", arg0)); }
void Thread::yield() { (classes[className]->invokeStaticMethod<void>("yield", "()V")); }
void Thread::stop() { (classes[className]->invokeMethod<void>(this->object, "stop", "()V")); }
bool Thread::isInterrupted() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInterrupted", "()Z")); }
void Thread::suspend() { (classes[className]->invokeMethod<void>(this->object, "suspend", "()V")); }
void Thread::setName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setName", "(Ljava/lang/String;)V", arg0)); }
int Thread::countStackFrames() { return int(*classes[className]->invokeMethod<int>(this->object, "countStackFrames", "()I")); }
Map Thread::getAllStackTraces() { return Map(*classes[className]->invokeStaticMethod<jobject>("getAllStackTraces", "()Ljava/util/Map;")); }
long Thread::getId() { return long(*classes[className]->invokeMethod<long>(this->object, "getId", "()J")); }
Thread_State Thread::getState() { return Thread_State(*classes[className]->invokeMethod<jobject>(this->object, "getState", "()Ljava/lang/Thread$State;")); }
Thread_UncaughtExceptionHandler Thread::getDefaultUncaughtExceptionHandler() { return Thread_UncaughtExceptionHandler(*classes[className]->invokeStaticMethod<jobject>("getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;")); }
void Thread::setUncaughtExceptionHandler(Thread_UncaughtExceptionHandler arg0) { (classes[className]->invokeMethod<void>(this->object, "setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V", arg0)); }

void Throwable::printStackTrace() { (classes[className]->invokeMethod<void>(this->object, "printStackTrace", "()V")); }
void Throwable::printStackTrace(PrintStream arg0) { (classes[className]->invokeMethod<void>(this->object, "printStackTrace", "(Ljava/io/PrintStream;)V", arg0)); }
void Throwable::printStackTrace(PrintWriter arg0) { (classes[className]->invokeMethod<void>(this->object, "printStackTrace", "(Ljava/io/PrintWriter;)V", arg0)); }
void Throwable::printStackTrace(Throwable_PrintStreamOrWriter arg0) { (classes[className]->invokeMethod<void>(this->object, "printStackTrace", "(Ljava/lang/Throwable$PrintStreamOrWriter;)V", arg0)); }
Throwable Throwable::fillInStackTrace(int arg0) { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "fillInStackTrace", "(I)Ljava/lang/Throwable;", arg0)); }
Throwable Throwable::fillInStackTrace() { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "fillInStackTrace", "()Ljava/lang/Throwable;")); }
Throwable Throwable::getCause() { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "getCause", "()Ljava/lang/Throwable;")); }
Throwable Throwable::initCause(Throwable arg0) { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;", arg0)); }
String Throwable::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String Throwable::getMessage() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getMessage", "()Ljava/lang/String;")); }
String Throwable::getLocalizedMessage() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLocalizedMessage", "()Ljava/lang/String;")); }
void Throwable::printEnclosedStackTrace(Throwable_PrintStreamOrWriter arg0, StackTraceElement_interface arg1, String arg2, String arg3, Set arg4) { (classes[className]->invokeMethod<void>(this->object, "printEnclosedStackTrace", "(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V", arg0, arg1, arg2, arg3, arg4)); }
int Throwable::validateSuppressedExceptionsList(List arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "validateSuppressedExceptionsList", "(Ljava/util/List;)I", arg0)); }
void Throwable::setCause(Throwable arg0) { (classes[className]->invokeMethod<void>(this->object, "setCause", "(Ljava/lang/Throwable;)V", arg0)); }
void Throwable::setStackTrace(StackTraceElement_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setStackTrace", "([Ljava/lang/StackTraceElement;)V", arg0)); }
void Throwable::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Throwable::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
void Throwable::addSuppressed(Throwable arg0) { (classes[className]->invokeMethod<void>(this->object, "addSuppressed", "(Ljava/lang/Throwable;)V", arg0)); }

void PrintStream::writeBytes(arr_B arg0) { (classes[className]->invokeMethod<void>(this->object, "writeBytes", "([B)V", arg0)); }
Charset PrintStream::toCharset(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("toCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
void PrintStream::ensureOpen() { (classes[className]->invokeMethod<void>(this->object, "ensureOpen", "()V")); }
bool PrintStream::checkError() { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkError", "()Z")); }
void PrintStream::writeln(String arg0) { (classes[className]->invokeMethod<void>(this->object, "writeln", "(Ljava/lang/String;)V", arg0)); }
void PrintStream::writeln(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "writeln", "([C)V", arg0)); }
void PrintStream::setError() { (classes[className]->invokeMethod<void>(this->object, "setError", "()V")); }
void PrintStream::clearError() { (classes[className]->invokeMethod<void>(this->object, "clearError", "()V")); }
void PrintStream::println(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "([C)V", arg0)); }
void PrintStream::println(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Z)V", arg0)); }
void PrintStream::println(long arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(J)V", arg0)); }
void PrintStream::println(int arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(I)V", arg0)); }
void PrintStream::println(char arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(C)V", arg0)); }
void PrintStream::println(float arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(F)V", arg0)); }
void PrintStream::println(double arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(D)V", arg0)); }
void PrintStream::println() { (classes[className]->invokeMethod<void>(this->object, "println", "()V")); }
void PrintStream::println(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Ljava/lang/Object;)V", arg0)); }
void PrintStream::println(String arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Ljava/lang/String;)V", arg0)); }
PrintStream PrintStream::append(char arg0) { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "append", "(C)Ljava/io/PrintStream;", arg0)); }
PrintStream PrintStream::append(CharSequence arg0, int arg1, int arg2) { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintStream;", arg0, arg1, arg2)); }
PrintStream PrintStream::append(CharSequence arg0) { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintStream;", arg0)); }
Object PrintStream::requireNonNull(Object arg0, String arg1) { return Object(*classes[className]->invokeStaticMethod<jobject>("requireNonNull", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", arg0, arg1)); }
PrintStream PrintStream::format(String arg0, Object_interface arg1) { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;", arg0, arg1)); }
PrintStream PrintStream::format(Locale arg0, String arg1, Object_interface arg2) { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;", arg0, arg1, arg2)); }
PrintStream PrintStream::printf(Locale arg0, String arg1, Object_interface arg2) { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;", arg0, arg1, arg2)); }
PrintStream PrintStream::printf(String arg0, Object_interface arg1) { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;", arg0, arg1)); }
void PrintStream::write(String arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/lang/String;)V", arg0)); }
void PrintStream::write(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "([C)V", arg0)); }
void PrintStream::write(int arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }
void PrintStream::write(arr_B arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }
void PrintStream::write(arr_B arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }
void PrintStream::print(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(Z)V", arg0)); }
void PrintStream::print(long arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(J)V", arg0)); }
void PrintStream::print(float arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(F)V", arg0)); }
void PrintStream::print(double arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(D)V", arg0)); }
void PrintStream::print(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "([C)V", arg0)); }
void PrintStream::print(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(Ljava/lang/Object;)V", arg0)); }
void PrintStream::print(String arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(Ljava/lang/String;)V", arg0)); }
void PrintStream::print(char arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(C)V", arg0)); }
void PrintStream::print(int arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(I)V", arg0)); }
void PrintStream::newLine() { (classes[className]->invokeMethod<void>(this->object, "newLine", "()V")); }


Charset Charset::lookup2(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("lookup2", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
Charset Charset::lookupExtendedCharset(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("lookupExtendedCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
Set Charset::aliases() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "aliases", "()Ljava/util/Set;")); }
bool Charset::isSupported(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isSupported", "(Ljava/lang/String;)Z", arg0)); }
SortedMap Charset::availableCharsets() { return SortedMap(*classes[className]->invokeStaticMethod<jobject>("availableCharsets", "()Ljava/util/SortedMap;")); }
String Charset::displayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "displayName", "()Ljava/lang/String;")); }
String Charset::displayName(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "displayName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Charset::name() { return String(*classes[className]->invokeMethod<jobject>(this->object, "name", "()Ljava/lang/String;")); }
void Charset::put(Iterator arg0, Map arg1) { (classes[className]->invokeStaticMethod<void>("put", "(Ljava/util/Iterator;Ljava/util/Map;)V", arg0, arg1)); }
Charset Charset::forName(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("forName", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
void Charset::cache(String arg0, Charset arg1) { (classes[className]->invokeStaticMethod<void>("cache", "(Ljava/lang/String;Ljava/nio/charset/Charset;)V", arg0, arg1)); }
bool Charset::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Charset::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Charset::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
CharsetDecoder Charset::newDecoder() { return CharsetDecoder(*classes[className]->invokeMethod<jobject>(this->object, "newDecoder", "()Ljava/nio/charset/CharsetDecoder;")); }
CharBuffer Charset::decode(ByteBuffer arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "decode", "(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;", arg0)); }
CharsetEncoder Charset::newEncoder() { return CharsetEncoder(*classes[className]->invokeMethod<jobject>(this->object, "newEncoder", "()Ljava/nio/charset/CharsetEncoder;")); }
ByteBuffer Charset::encode(CharBuffer arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "encode", "(Ljava/nio/CharBuffer;)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer Charset::encode(String arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "encode", "(Ljava/lang/String;)Ljava/nio/ByteBuffer;", arg0)); }
Charset Charset::defaultCharset() { return Charset(*classes[className]->invokeStaticMethod<jobject>("defaultCharset", "()Ljava/nio/charset/Charset;")); }
bool Charset::canEncode() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEncode", "()Z")); }
bool Charset::contains(Charset arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/nio/charset/Charset;)Z", arg0)); }
Charset Charset::lookup(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("lookup", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
bool Charset::isRegistered() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRegistered", "()Z")); }
void Charset::checkName(String arg0) { (classes[className]->invokeStaticMethod<void>("checkName", "(Ljava/lang/String;)V", arg0)); }
Charset Charset::lookupViaProviders(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("lookupViaProviders", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
Iterator Charset::providers() { return Iterator(*classes[className]->invokeStaticMethod<jobject>("providers", "()Ljava/util/Iterator;")); }



String Locale::getDisplayName(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Locale::getDisplayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava/lang/String;")); }
String Locale::convertOldISOCodes(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("convertOldISOCodes", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
LocaleExtensions Locale::getCompatibilityExtensions(String arg0, String arg1, String arg2, String arg3) { return LocaleExtensions(*classes[className]->invokeStaticMethod<jobject>("getCompatibilityExtensions", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/LocaleExtensions;", arg0, arg1, arg2, arg3)); }
Locale Locale::getDisplayLocale() { return Locale(*classes[className]->invokeStaticMethod<jobject>("getDisplayLocale", "()Ljava/util/Locale;")); }
Locale Locale::getFormatLocale() { return Locale(*classes[className]->invokeStaticMethod<jobject>("getFormatLocale", "()Ljava/util/Locale;")); }
Locale Locale::initDefault() { return Locale(*classes[className]->invokeStaticMethod<jobject>("initDefault", "()Ljava/util/Locale;")); }
Locale Locale::initDefault(Locale_Category arg0) { return Locale(*classes[className]->invokeStaticMethod<jobject>("initDefault", "(Ljava/util/Locale$Category;)Ljava/util/Locale;", arg0)); }
Optional Locale::getDefaultExtensions(String arg0) { return Optional(*classes[className]->invokeStaticMethod<jobject>("getDefaultExtensions", "(Ljava/lang/String;)Ljava/util/Optional;", arg0)); }
String Locale::getScript() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getScript", "()Ljava/lang/String;")); }
String Locale::getCountry() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCountry", "()Ljava/lang/String;")); }
String Locale::getVariant() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getVariant", "()Ljava/lang/String;")); }
LocaleExtensions Locale::getLocaleExtensions() { return LocaleExtensions(*classes[className]->invokeMethod<jobject>(this->object, "getLocaleExtensions", "()Lsun/util/locale/LocaleExtensions;")); }
void Locale::setDefault(Locale arg0) { (classes[className]->invokeStaticMethod<void>("setDefault", "(Ljava/util/Locale;)V", arg0)); }
void Locale::setDefault(Locale_Category arg0, Locale arg1) { (classes[className]->invokeStaticMethod<void>("setDefault", "(Ljava/util/Locale$Category;Ljava/util/Locale;)V", arg0, arg1)); }
bool Locale::hasExtensions() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasExtensions", "()Z")); }
Set Locale::getUnicodeLocaleAttributes() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getUnicodeLocaleAttributes", "()Ljava/util/Set;")); }
bool Locale::isUnicodeExtensionKey(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isUnicodeExtensionKey", "(Ljava/lang/String;)Z", arg0)); }
String Locale::getUnicodeLocaleType(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnicodeLocaleType", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
Set Locale::getUnicodeLocaleKeys() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getUnicodeLocaleKeys", "()Ljava/util/Set;")); }
BaseLocale Locale::getBaseLocale() { return BaseLocale(*classes[className]->invokeMethod<jobject>(this->object, "getBaseLocale", "()Lsun/util/locale/BaseLocale;")); }
String Locale::getISO3Code(String arg0, String arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("getISO3Code", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
String Locale::getDisplayLanguage() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayLanguage", "()Ljava/lang/String;")); }
String Locale::getDisplayLanguage(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayLanguage", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Locale::getDisplayString(String arg0, String arg1, Locale arg2, int arg3) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayString", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;I)Ljava/lang/String;", arg0, arg1, arg2, arg3)); }
String Locale::getDisplayScript() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayScript", "()Ljava/lang/String;")); }
String Locale::getDisplayScript(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayScript", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Locale::getDisplayCountry() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayCountry", "()Ljava/lang/String;")); }
String Locale::getDisplayCountry(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayCountry", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Locale::getDisplayVariant() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayVariant", "()Ljava/lang/String;")); }
String Locale::getDisplayVariant(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayVariant", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Locale::formatList(String_interface arg0, String arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("formatList", "([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
List Locale::filterTags(List arg0, Collection arg1, Locale_FilteringMode arg2) { return List(*classes[className]->invokeStaticMethod<jobject>("filterTags", "(Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;", arg0, arg1, arg2)); }
List Locale::filterTags(List arg0, Collection arg1) { return List(*classes[className]->invokeStaticMethod<jobject>("filterTags", "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;", arg0, arg1)); }
String Locale::lookupTag(List arg0, Collection arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("lookupTag", "(Ljava/util/List;Ljava/util/Collection;)Ljava/lang/String;", arg0, arg1)); }
String Locale::getDisplayKeyTypeExtensionString(String arg0, LocaleResources arg1, Locale arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayKeyTypeExtensionString", "(Ljava/lang/String;Lsun/util/locale/provider/LocaleResources;Ljava/util/Locale;)Ljava/lang/String;", arg0, arg1, arg2)); }
Locale Locale::createConstant(byte arg0) { return Locale(*classes[className]->invokeStaticMethod<jobject>("createConstant", "(B)Ljava/util/Locale;", arg0)); }
Set Locale::getISOCountries(Locale_IsoCountryCode arg0) { return Set(*classes[className]->invokeStaticMethod<jobject>("getISOCountries", "(Ljava/util/Locale$IsoCountryCode;)Ljava/util/Set;", arg0)); }
Locale Locale::stripExtensions() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "stripExtensions", "()Ljava/util/Locale;")); }
String Locale::getExtension(char arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getExtension", "(C)Ljava/lang/String;", arg0)); }
Set Locale::getExtensionKeys() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getExtensionKeys", "()Ljava/util/Set;")); }
String Locale::toLanguageTag() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toLanguageTag", "()Ljava/lang/String;")); }
Locale Locale::forLanguageTag(String arg0) { return Locale(*classes[className]->invokeStaticMethod<jobject>("forLanguageTag", "(Ljava/lang/String;)Ljava/util/Locale;", arg0)); }
String Locale::getISO3Language() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getISO3Language", "()Ljava/lang/String;")); }
String Locale::getISO3Country() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getISO3Country", "()Ljava/lang/String;")); }
String Locale::getLanguage() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLanguage", "()Ljava/lang/String;")); }
bool Locale::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Locale::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Locale::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object Locale::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
Locale Locale::getDefault() { return Locale(*classes[className]->invokeStaticMethod<jobject>("getDefault", "()Ljava/util/Locale;")); }
Locale Locale::getDefault(Locale_Category arg0) { return Locale(*classes[className]->invokeStaticMethod<jobject>("getDefault", "(Ljava/util/Locale$Category;)Ljava/util/Locale;", arg0)); }
Locale Locale::lookup(List arg0, Collection arg1) { return Locale(*classes[className]->invokeStaticMethod<jobject>("lookup", "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/Locale;", arg0, arg1)); }
List Locale::filter(List arg0, Collection arg1) { return List(*classes[className]->invokeStaticMethod<jobject>("filter", "(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;", arg0, arg1)); }
List Locale::filter(List arg0, Collection arg1, Locale_FilteringMode arg2) { return List(*classes[className]->invokeStaticMethod<jobject>("filter", "(Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;", arg0, arg1, arg2)); }
Locale Locale::getInstance(BaseLocale arg0, LocaleExtensions arg1) { return Locale(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;", arg0, arg1)); }
Locale Locale::getInstance(String arg0, String arg1, String arg2) { return Locale(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;", arg0, arg1, arg2)); }
Locale Locale::getInstance(String arg0, String arg1, String arg2, String arg3, LocaleExtensions arg4) { return Locale(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;", arg0, arg1, arg2, arg3, arg4)); }
void Locale::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Locale::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
Object Locale::readResolve() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readResolve", "()Ljava/lang/Object;")); }

bool LocaleExtensions::isValidKey(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isValidKey", "(C)Z", arg0)); }
String LocaleExtensions::getExtensionValue(Character arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getExtensionValue", "(Ljava/lang/Character;)Ljava/lang/String;", arg0)); }
Set LocaleExtensions::getKeys() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getKeys", "()Ljava/util/Set;")); }
Set LocaleExtensions::getUnicodeLocaleAttributes() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getUnicodeLocaleAttributes", "()Ljava/util/Set;")); }
String LocaleExtensions::getUnicodeLocaleType(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnicodeLocaleType", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
Set LocaleExtensions::getUnicodeLocaleKeys() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getUnicodeLocaleKeys", "()Ljava/util/Set;")); }
String LocaleExtensions::getID() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getID", "()Ljava/lang/String;")); }
String LocaleExtensions::toID(SortedMap arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toID", "(Ljava/util/SortedMap;)Ljava/lang/String;", arg0)); }
bool LocaleExtensions::isValidUnicodeLocaleKey(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isValidUnicodeLocaleKey", "(Ljava/lang/String;)Z", arg0)); }
Extension LocaleExtensions::getExtension(Character arg0) { return Extension(*classes[className]->invokeMethod<jobject>(this->object, "getExtension", "(Ljava/lang/Character;)Lsun/util/locale/Extension;", arg0)); }
bool LocaleExtensions::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String LocaleExtensions::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LocaleExtensions::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool LocaleExtensions::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }

String Character::getName(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getName", "(I)Ljava/lang/String;", arg0)); }
bool Character::isJavaIdentifierStart(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isJavaIdentifierStart", "(C)Z", arg0)); }
bool Character::isJavaIdentifierStart(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isJavaIdentifierStart", "(I)Z", arg0)); }
bool Character::isJavaIdentifierPart(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isJavaIdentifierPart", "(C)Z", arg0)); }
bool Character::isJavaIdentifierPart(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isJavaIdentifierPart", "(I)Z", arg0)); }
bool Character::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Character::toString(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(I)Ljava/lang/String;", arg0)); }
String Character::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String Character::toString(char arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(C)Ljava/lang/String;", arg0)); }
int Character::hashCode(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("hashCode", "(C)I", arg0)); }
int Character::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
char Character::reverseBytes(char arg0) { return char(*classes[className]->invokeStaticMethod<char>("reverseBytes", "(C)C", arg0)); }
bool Character::isDigit(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isDigit", "(I)Z", arg0)); }
bool Character::isDigit(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isDigit", "(C)Z", arg0)); }
bool Character::isLowerCase(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLowerCase", "(I)Z", arg0)); }
bool Character::isLowerCase(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLowerCase", "(C)Z", arg0)); }
bool Character::isUpperCase(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isUpperCase", "(C)Z", arg0)); }
bool Character::isUpperCase(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isUpperCase", "(I)Z", arg0)); }
bool Character::isWhitespace(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isWhitespace", "(I)Z", arg0)); }
bool Character::isWhitespace(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isWhitespace", "(C)Z", arg0)); }
int Character::compare(char arg0, char arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(CC)I", arg0, arg1)); }
char Character::charValue() { return char(*classes[className]->invokeMethod<char>(this->object, "charValue", "()C")); }
Character Character::valueOf(char arg0) { return Character(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(C)Ljava/lang/Character;", arg0)); }
int Character::toChars(int arg0, arr_C arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("toChars", "(I[CI)I", arg0, arg1, arg2)); }
bool Character::isHighSurrogate(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isHighSurrogate", "(C)Z", arg0)); }
bool Character::isLowSurrogate(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLowSurrogate", "(C)Z", arg0)); }
bool Character::isSurrogate(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isSurrogate", "(C)Z", arg0)); }
bool Character::isSupplementaryCodePoint(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isSupplementaryCodePoint", "(I)Z", arg0)); }
char Character::highSurrogate(int arg0) { return char(*classes[className]->invokeStaticMethod<char>("highSurrogate", "(I)C", arg0)); }
char Character::lowSurrogate(int arg0) { return char(*classes[className]->invokeStaticMethod<char>("lowSurrogate", "(I)C", arg0)); }
int Character::toCodePoint(char arg0, char arg1) { return int(*classes[className]->invokeStaticMethod<int>("toCodePoint", "(CC)I", arg0, arg1)); }
int Character::codePointAt(arr_C arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("codePointAt", "([CI)I", arg0, arg1)); }
int Character::codePointAt(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("codePointAt", "([CII)I", arg0, arg1, arg2)); }
int Character::codePointAt(CharSequence arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("codePointAt", "(Ljava/lang/CharSequence;I)I", arg0, arg1)); }
int Character::codePointBefore(CharSequence arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("codePointBefore", "(Ljava/lang/CharSequence;I)I", arg0, arg1)); }
int Character::codePointBefore(arr_C arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("codePointBefore", "([CI)I", arg0, arg1)); }
int Character::codePointBefore(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("codePointBefore", "([CII)I", arg0, arg1, arg2)); }
int Character::codePointCount(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("codePointCount", "([CII)I", arg0, arg1, arg2)); }
int Character::codePointCount(CharSequence arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("codePointCount", "(Ljava/lang/CharSequence;II)I", arg0, arg1, arg2)); }
int Character::offsetByCodePoints(CharSequence arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("offsetByCodePoints", "(Ljava/lang/CharSequence;II)I", arg0, arg1, arg2)); }
int Character::offsetByCodePoints(arr_C arg0, int arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("offsetByCodePoints", "([CIIII)I", arg0, arg1, arg2, arg3, arg4)); }
int Character::toLowerCase(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("toLowerCase", "(I)I", arg0)); }
char Character::toLowerCase(char arg0) { return char(*classes[className]->invokeStaticMethod<char>("toLowerCase", "(C)C", arg0)); }
char Character::toUpperCase(char arg0) { return char(*classes[className]->invokeStaticMethod<char>("toUpperCase", "(C)C", arg0)); }
int Character::toUpperCase(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("toUpperCase", "(I)I", arg0)); }
bool Character::isBmpCodePoint(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isBmpCodePoint", "(I)Z", arg0)); }
int Character::getType(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("getType", "(C)I", arg0)); }
int Character::getType(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getType", "(I)I", arg0)); }
bool Character::isLetter(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLetter", "(C)Z", arg0)); }
bool Character::isLetter(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLetter", "(I)Z", arg0)); }
bool Character::isLetterOrDigit(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLetterOrDigit", "(I)Z", arg0)); }
bool Character::isLetterOrDigit(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLetterOrDigit", "(C)Z", arg0)); }
int Character::codePointAtImpl(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("codePointAtImpl", "([CII)I", arg0, arg1, arg2)); }
int Character::codePointBeforeImpl(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("codePointBeforeImpl", "([CII)I", arg0, arg1, arg2)); }
bool Character::isValidCodePoint(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isValidCodePoint", "(I)Z", arg0)); }
void Character::toSurrogates(int arg0, arr_C arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("toSurrogates", "(I[CI)V", arg0, arg1, arg2)); }
int Character::codePointCountImpl(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("codePointCountImpl", "([CII)I", arg0, arg1, arg2)); }
int Character::offsetByCodePointsImpl(arr_C arg0, int arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("offsetByCodePointsImpl", "([CIIII)I", arg0, arg1, arg2, arg3, arg4)); }
bool Character::isTitleCase(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isTitleCase", "(I)Z", arg0)); }
bool Character::isTitleCase(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isTitleCase", "(C)Z", arg0)); }
bool Character::isDefined(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isDefined", "(I)Z", arg0)); }
bool Character::isDefined(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isDefined", "(C)Z", arg0)); }
bool Character::isIdeographic(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isIdeographic", "(I)Z", arg0)); }
bool Character::isUnicodeIdentifierStart(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isUnicodeIdentifierStart", "(I)Z", arg0)); }
bool Character::isUnicodeIdentifierStart(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isUnicodeIdentifierStart", "(C)Z", arg0)); }
bool Character::isUnicodeIdentifierPart(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isUnicodeIdentifierPart", "(I)Z", arg0)); }
bool Character::isUnicodeIdentifierPart(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isUnicodeIdentifierPart", "(C)Z", arg0)); }
bool Character::isIdentifierIgnorable(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isIdentifierIgnorable", "(I)Z", arg0)); }
bool Character::isIdentifierIgnorable(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isIdentifierIgnorable", "(C)Z", arg0)); }
int Character::toTitleCase(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("toTitleCase", "(I)I", arg0)); }
char Character::toTitleCase(char arg0) { return char(*classes[className]->invokeStaticMethod<char>("toTitleCase", "(C)C", arg0)); }
int Character::digit(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("digit", "(II)I", arg0, arg1)); }
int Character::digit(char arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("digit", "(CI)I", arg0, arg1)); }
int Character::getNumericValue(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getNumericValue", "(I)I", arg0)); }
int Character::getNumericValue(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("getNumericValue", "(C)I", arg0)); }
bool Character::isSpaceChar(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isSpaceChar", "(I)Z", arg0)); }
bool Character::isSpaceChar(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isSpaceChar", "(C)Z", arg0)); }
bool Character::isISOControl(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isISOControl", "(C)Z", arg0)); }
bool Character::isISOControl(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isISOControl", "(I)Z", arg0)); }
byte Character::getDirectionality(int arg0) { return byte(*classes[className]->invokeStaticMethod<byte>("getDirectionality", "(I)B", arg0)); }
byte Character::getDirectionality(char arg0) { return byte(*classes[className]->invokeStaticMethod<byte>("getDirectionality", "(C)B", arg0)); }
bool Character::isMirrored(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isMirrored", "(C)Z", arg0)); }
bool Character::isMirrored(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isMirrored", "(I)Z", arg0)); }
int Character::toUpperCaseEx(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("toUpperCaseEx", "(I)I", arg0)); }
bool Character::isSurrogatePair(char arg0, char arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isSurrogatePair", "(CC)Z", arg0, arg1)); }
int Character::charCount(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("charCount", "(I)I", arg0)); }
bool Character::isJavaLetter(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isJavaLetter", "(C)Z", arg0)); }
bool Character::isJavaLetterOrDigit(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isJavaLetterOrDigit", "(C)Z", arg0)); }
bool Character::isAlphabetic(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isAlphabetic", "(I)Z", arg0)); }
bool Character::isSpace(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isSpace", "(C)Z", arg0)); }
char Character::forDigit(int arg0, int arg1) { return char(*classes[className]->invokeStaticMethod<char>("forDigit", "(II)C", arg0, arg1)); }
int Character::codePointOf(String arg0) { return int(*classes[className]->invokeStaticMethod<int>("codePointOf", "(Ljava/lang/String;)I", arg0)); }



String Extension::getID() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getID", "()Ljava/lang/String;")); }
String Extension::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String Extension::getValue() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getValue", "()Ljava/lang/String;")); }
char Extension::getKey() { return char(*classes[className]->invokeMethod<char>(this->object, "getKey", "()C")); }
void Extension::setValue(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setValue", "(Ljava/lang/String;)V", arg0)); }

Locale_Category Locale_Category::valueOf(String arg0) { return Locale_Category(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/util/Locale$Category;", arg0)); }

void Enum::readObjectNoData() { (classes[className]->invokeMethod<void>(this->object, "readObjectNoData", "()V")); }
String Enum::name() { return String(*classes[className]->invokeMethod<jobject>(this->object, "name", "()Ljava/lang/String;")); }
void Enum::finalize() { (classes[className]->invokeMethod<void>(this->object, "finalize", "()V")); }
bool Enum::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Enum::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Enum::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object Enum::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
Enum Enum::valueOf(Class arg0, String arg1) { return Enum(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", arg0, arg1)); }
Class Enum::getDeclaringClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava/lang/Class;")); }
void Enum::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
int Enum::ordinal() { return int(*classes[className]->invokeMethod<int>(this->object, "ordinal", "()I")); }

Class ObjectInputStream::readClass(bool arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "readClass", "(Z)Ljava/lang/Class;", arg0)); }
String ObjectInputStream::readString(bool arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readString", "(Z)Ljava/lang/String;", arg0)); }
String ObjectInputStream::readString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "readString", "()Ljava/lang/String;")); }
void ObjectInputStream::verifySubclass() { (classes[className]->invokeMethod<void>(this->object, "verifySubclass", "()V")); }
void ObjectInputStream::readStreamHeader() { (classes[className]->invokeMethod<void>(this->object, "readStreamHeader", "()V")); }
Object ObjectInputStream::readObjectOverride() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readObjectOverride", "()Ljava/lang/Object;")); }
Object ObjectInputStream::readObject0(Class arg0, bool arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readObject0", "(Ljava/lang/Class;Z)Ljava/lang/Object;", arg0, arg1)); }
void ObjectInputStream::filterCheck(Class arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "filterCheck", "(Ljava/lang/Class;I)V", arg0, arg1)); }
void ObjectInputStream::handleReset() { (classes[className]->invokeMethod<void>(this->object, "handleReset", "()V")); }
Object ObjectInputStream::readNull() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readNull", "()Ljava/lang/Object;")); }
Object ObjectInputStream::readHandle(bool arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readHandle", "(Z)Ljava/lang/Object;", arg0)); }
ObjectStreamClass ObjectInputStream::readClassDesc(bool arg0) { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "readClassDesc", "(Z)Ljava/io/ObjectStreamClass;", arg0)); }
Object ObjectInputStream::checkResolve(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "checkResolve", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object ObjectInputStream::readArray(bool arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readArray", "(Z)Ljava/lang/Object;", arg0)); }
Enum ObjectInputStream::readEnum(bool arg0) { return Enum(*classes[className]->invokeMethod<jobject>(this->object, "readEnum", "(Z)Ljava/lang/Enum;", arg0)); }
Object ObjectInputStream::readOrdinaryObject(bool arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readOrdinaryObject", "(Z)Ljava/lang/Object;", arg0)); }
IOException ObjectInputStream::readFatalException() { return IOException(*classes[className]->invokeMethod<jobject>(this->object, "readFatalException", "()Ljava/io/IOException;")); }
Object ObjectInputStream::resolveObject(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "resolveObject", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
ObjectStreamClass ObjectInputStream::readProxyDesc(bool arg0) { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "readProxyDesc", "(Z)Ljava/io/ObjectStreamClass;", arg0)); }
ObjectStreamClass ObjectInputStream::readNonProxyDesc(bool arg0) { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "readNonProxyDesc", "(Z)Ljava/io/ObjectStreamClass;", arg0)); }
Class ObjectInputStream::resolveProxyClass(String_interface arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "resolveProxyClass", "([Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
void ObjectInputStream::skipCustomData() { (classes[className]->invokeMethod<void>(this->object, "skipCustomData", "()V")); }
ObjectStreamClass ObjectInputStream::readClassDescriptor() { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "readClassDescriptor", "()Ljava/io/ObjectStreamClass;")); }
bool ObjectInputStream::isCustomSubclass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCustomSubclass", "()Z")); }
Object ObjectInputStream::readRecord(ObjectStreamClass arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readRecord", "(Ljava/io/ObjectStreamClass;)Ljava/lang/Object;", arg0)); }
void ObjectInputStream::readExternalData(Externalizable arg0, ObjectStreamClass arg1) { (classes[className]->invokeMethod<void>(this->object, "readExternalData", "(Ljava/io/Externalizable;Ljava/io/ObjectStreamClass;)V", arg0, arg1)); }
void ObjectInputStream::readSerialData(Object arg0, ObjectStreamClass arg1) { (classes[className]->invokeMethod<void>(this->object, "readSerialData", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V", arg0, arg1)); }
Object ObjectInputStream::readUnshared() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readUnshared", "()Ljava/lang/Object;")); }
void ObjectInputStream::registerValidation(ObjectInputValidation arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "registerValidation", "(Ljava/io/ObjectInputValidation;I)V", arg0, arg1)); }
bool ObjectInputStream::enableResolveObject(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "enableResolveObject", "(Z)Z", arg0)); }
ObjectInputFilter ObjectInputStream::getObjectInputFilter() { return ObjectInputFilter(*classes[className]->invokeMethod<jobject>(this->object, "getObjectInputFilter", "()Ljava/io/ObjectInputFilter;")); }
void ObjectInputStream::setObjectInputFilter(ObjectInputFilter arg0) { (classes[className]->invokeMethod<void>(this->object, "setObjectInputFilter", "(Ljava/io/ObjectInputFilter;)V", arg0)); }
String ObjectInputStream::readTypeString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "readTypeString", "()Ljava/lang/String;")); }
ClassLoader ObjectInputStream::latestUserDefinedLoader() { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("latestUserDefinedLoader", "()Ljava/lang/ClassLoader;")); }
void ObjectInputStream::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
Object ObjectInputStream::cloneArray(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("cloneArray", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Class ObjectInputStream::resolveClass(ObjectStreamClass arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "resolveClass", "(Ljava/io/ObjectStreamClass;)Ljava/lang/Class;", arg0)); }
void ObjectInputStream::defaultReadObject() { (classes[className]->invokeMethod<void>(this->object, "defaultReadObject", "()V")); }
ObjectInputStream_GetField ObjectInputStream::readFields() { return ObjectInputStream_GetField(*classes[className]->invokeMethod<jobject>(this->object, "readFields", "()Ljava/io/ObjectInputStream$GetField;")); }
Boolean ObjectInputStream::auditSubclass(Class arg0) { return Boolean(*classes[className]->invokeStaticMethod<jobject>("auditSubclass", "(Ljava/lang/Class;)Ljava/lang/Boolean;", arg0)); }
void ObjectInputStream::checkArray(Class arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "checkArray", "(Ljava/lang/Class;I)V", arg0, arg1)); }
void ObjectInputStream::freeze() { (classes[className]->invokeMethod<void>(this->object, "freeze", "()V")); }

void ObjectStreamClass::requireInitialized() { (classes[className]->invokeMethod<void>(this->object, "requireInitialized", "()V")); }
long ObjectStreamClass::getSerialVersionUID() { return long(*classes[className]->invokeMethod<long>(this->object, "getSerialVersionUID", "()J")); }
ObjectStreamClass_FieldReflector ObjectStreamClass::getReflector(ObjectStreamField_interface arg0, ObjectStreamClass arg1) { return ObjectStreamClass_FieldReflector(*classes[className]->invokeStaticMethod<jobject>("getReflector", "([Ljava/io/ObjectStreamField;Ljava/io/ObjectStreamClass;)Ljava/io/ObjectStreamClass$FieldReflector;", arg0, arg1)); }
ProtectionDomain ObjectStreamClass::noPermissionsDomain() { return ProtectionDomain(*classes[className]->invokeMethod<jobject>(this->object, "noPermissionsDomain", "()Ljava/security/ProtectionDomain;")); }
bool ObjectStreamClass::classNamesEqual(String arg0, String arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("classNamesEqual", "(Ljava/lang/String;Ljava/lang/String;)Z", arg0, arg1)); }
void ObjectStreamClass::computeFieldOffsets() { (classes[className]->invokeMethod<void>(this->object, "computeFieldOffsets", "()V")); }
void ObjectStreamClass::throwMiscException(Throwable arg0) { (classes[className]->invokeStaticMethod<void>("throwMiscException", "(Ljava/lang/Throwable;)V", arg0)); }
ObjectStreamClass ObjectStreamClass::getVariantFor(Class arg0) { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "getVariantFor", "(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;", arg0)); }
void ObjectStreamClass::setPrimFieldValues(Object arg0, arr_B arg1) { (classes[className]->invokeMethod<void>(this->object, "setPrimFieldValues", "(Ljava/lang/Object;[B)V", arg0, arg1)); }
void ObjectStreamClass::setObjFieldValues(Object arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "setObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V", arg0, arg1)); }
void ObjectStreamClass::initNative() { (classes[className]->invokeStaticMethod<void>("initNative", "()V")); }
ObjectStreamClass ObjectStreamClass::lookupAny(Class arg0) { return ObjectStreamClass(*classes[className]->invokeStaticMethod<jobject>("lookupAny", "(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;", arg0)); }
ObjectStreamClass ObjectStreamClass::getLocalDesc() { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "getLocalDesc", "()Ljava/io/ObjectStreamClass;")); }
void ObjectStreamClass::checkObjFieldValueTypes(Object arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "checkObjFieldValueTypes", "(Ljava/lang/Object;[Ljava/lang/Object;)V", arg0, arg1)); }
Constructor ObjectStreamClass::getExternalizableConstructor(Class arg0) { return Constructor(*classes[className]->invokeStaticMethod<jobject>("getExternalizableConstructor", "(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0)); }
Constructor ObjectStreamClass::getSerializableConstructor(Class arg0) { return Constructor(*classes[className]->invokeStaticMethod<jobject>("getSerializableConstructor", "(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0)); }
MethodHandle ObjectStreamClass::canonicalRecordCtr(Class arg0) { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("canonicalRecordCtr", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle ObjectStreamClass::getRecordConstructor() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getRecordConstructor", "()Ljava/lang/invoke/MethodHandle;")); }
Method ObjectStreamClass::getInheritableMethod(Class arg0, String arg1, Class_interface arg2, Class arg3) { return Method(*classes[className]->invokeStaticMethod<jobject>("getInheritableMethod", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1, arg2, arg3)); }
Method ObjectStreamClass::getPrivateMethod(Class arg0, String arg1, Class_interface arg2, Class arg3) { return Method(*classes[className]->invokeStaticMethod<jobject>("getPrivateMethod", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0, arg1, arg2, arg3)); }
String ObjectStreamClass::getMethodSignature(Class_interface arg0, Class arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("getMethodSignature", "([Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/String;", arg0, arg1)); }
Long ObjectStreamClass::getDeclaredSUID(Class arg0) { return Long(*classes[className]->invokeStaticMethod<jobject>("getDeclaredSUID", "(Ljava/lang/Class;)Ljava/lang/Long;", arg0)); }
long ObjectStreamClass::computeDefaultSUID(Class arg0) { return long(*classes[className]->invokeStaticMethod<long>("computeDefaultSUID", "(Ljava/lang/Class;)J", arg0)); }
bool ObjectStreamClass::hasWriteObjectData() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasWriteObjectData", "()Z")); }
void ObjectStreamClass::readNonProxy(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readNonProxy", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Class ObjectStreamClass::forClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "forClass", "()Ljava/lang/Class;")); }
ClassNotFoundException ObjectStreamClass::getResolveException() { return ClassNotFoundException(*classes[className]->invokeMethod<jobject>(this->object, "getResolveException", "()Ljava/lang/ClassNotFoundException;")); }
void ObjectStreamClass::initProxy(Class arg0, ClassNotFoundException arg1, ObjectStreamClass arg2) { (classes[className]->invokeMethod<void>(this->object, "initProxy", "(Ljava/lang/Class;Ljava/lang/ClassNotFoundException;Ljava/io/ObjectStreamClass;)V", arg0, arg1, arg2)); }
void ObjectStreamClass::initNonProxy(ObjectStreamClass arg0, Class arg1, ClassNotFoundException arg2, ObjectStreamClass arg3) { (classes[className]->invokeMethod<void>(this->object, "initNonProxy", "(Ljava/io/ObjectStreamClass;Ljava/lang/Class;Ljava/lang/ClassNotFoundException;Ljava/io/ObjectStreamClass;)V", arg0, arg1, arg2, arg3)); }
void ObjectStreamClass::checkDeserialize() { (classes[className]->invokeMethod<void>(this->object, "checkDeserialize", "()V")); }
bool ObjectStreamClass::isInstantiable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInstantiable", "()Z")); }
bool ObjectStreamClass::isExternalizable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isExternalizable", "()Z")); }
bool ObjectStreamClass::hasReadResolveMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasReadResolveMethod", "()Z")); }
Object ObjectStreamClass::invokeReadResolve(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeReadResolve", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
bool ObjectStreamClass::hasBlockExternalData() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasBlockExternalData", "()Z")); }
bool ObjectStreamClass::hasReadObjectMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasReadObjectMethod", "()Z")); }
bool ObjectStreamClass::hasReadObjectNoDataMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasReadObjectNoDataMethod", "()Z")); }
void ObjectStreamClass::invokeReadObject(Object arg0, ObjectInputStream arg1) { (classes[className]->invokeMethod<void>(this->object, "invokeReadObject", "(Ljava/lang/Object;Ljava/io/ObjectInputStream;)V", arg0, arg1)); }
void ObjectStreamClass::invokeReadObjectNoData(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "invokeReadObjectNoData", "(Ljava/lang/Object;)V", arg0)); }
void ObjectStreamClass::writeNonProxy(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeNonProxy", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
bool ObjectStreamClass::hasWriteReplaceMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasWriteReplaceMethod", "()Z")); }
Object ObjectStreamClass::invokeWriteReplace(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeWriteReplace", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
bool ObjectStreamClass::isProxy() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isProxy", "()Z")); }
ObjectStreamClass ObjectStreamClass::getSuperDesc() { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "getSuperDesc", "()Ljava/io/ObjectStreamClass;")); }
void ObjectStreamClass::checkSerialize() { (classes[className]->invokeMethod<void>(this->object, "checkSerialize", "()V")); }
bool ObjectStreamClass::hasWriteObjectMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasWriteObjectMethod", "()Z")); }
void ObjectStreamClass::invokeWriteObject(Object arg0, ObjectOutputStream arg1) { (classes[className]->invokeMethod<void>(this->object, "invokeWriteObject", "(Ljava/lang/Object;Ljava/io/ObjectOutputStream;)V", arg0, arg1)); }
void ObjectStreamClass::checkDefaultSerialize() { (classes[className]->invokeMethod<void>(this->object, "checkDefaultSerialize", "()V")); }
int ObjectStreamClass::getPrimDataSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getPrimDataSize", "()I")); }
void ObjectStreamClass::getPrimFieldValues(Object arg0, arr_B arg1) { (classes[className]->invokeMethod<void>(this->object, "getPrimFieldValues", "(Ljava/lang/Object;[B)V", arg0, arg1)); }
int ObjectStreamClass::getNumObjFields() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumObjFields", "()I")); }
void ObjectStreamClass::getObjFieldValues(Object arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "getObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V", arg0, arg1)); }
bool ObjectStreamClass::isSerializable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSerializable", "()Z")); }
bool ObjectStreamClass::packageEquals(Class arg0, Class arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("packageEquals", "(Ljava/lang/Class;Ljava/lang/Class;)Z", arg0, arg1)); }
bool ObjectStreamClass::hasStaticInitializer(Class arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("hasStaticInitializer", "(Ljava/lang/Class;)Z", arg0)); }
String ObjectStreamClass::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
String ObjectStreamClass::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
ObjectStreamClass ObjectStreamClass::lookup(Class arg0, bool arg1) { return ObjectStreamClass(*classes[className]->invokeStaticMethod<jobject>("lookup", "(Ljava/lang/Class;Z)Ljava/io/ObjectStreamClass;", arg0, arg1)); }
ObjectStreamClass ObjectStreamClass::lookup(Class arg0) { return ObjectStreamClass(*classes[className]->invokeStaticMethod<jobject>("lookup", "(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;", arg0)); }
bool ObjectStreamClass::isEnum() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnum", "()Z")); }
bool ObjectStreamClass::isRecord() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRecord", "()Z")); }
Object ObjectStreamClass::newInstance() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "newInstance", "()Ljava/lang/Object;")); }
ObjectStreamField ObjectStreamClass::getField(String arg0, Class arg1) { return ObjectStreamField(*classes[className]->invokeMethod<jobject>(this->object, "getField", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/ObjectStreamField;", arg0, arg1)); }
ObjectStreamField ObjectStreamClass::getField(String arg0) { return ObjectStreamField(*classes[className]->invokeMethod<jobject>(this->object, "getField", "(Ljava/lang/String;)Ljava/io/ObjectStreamField;", arg0)); }
void ObjectStreamClass::processQueue(ReferenceQueue arg0, ConcurrentMap arg1) { (classes[className]->invokeStaticMethod<void>("processQueue", "(Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V", arg0, arg1)); }
void ObjectStreamClass::checkInitialized() { (classes[className]->invokeMethod<void>(this->object, "checkInitialized", "()V")); }


void ObjectStreamClass_FieldReflector::setPrimFieldValues(Object arg0, arr_B arg1) { (classes[className]->invokeMethod<void>(this->object, "setPrimFieldValues", "(Ljava/lang/Object;[B)V", arg0, arg1)); }
void ObjectStreamClass_FieldReflector::checkObjectFieldValueTypes(Object arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "checkObjectFieldValueTypes", "(Ljava/lang/Object;[Ljava/lang/Object;)V", arg0, arg1)); }
void ObjectStreamClass_FieldReflector::setObjFieldValues(Object arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "setObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V", arg0, arg1)); }
void ObjectStreamClass_FieldReflector::setObjFieldValues(Object arg0, Object_interface arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "setObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;Z)V", arg0, arg1, arg2)); }
void ObjectStreamClass_FieldReflector::getPrimFieldValues(Object arg0, arr_B arg1) { (classes[className]->invokeMethod<void>(this->object, "getPrimFieldValues", "(Ljava/lang/Object;[B)V", arg0, arg1)); }
void ObjectStreamClass_FieldReflector::getObjFieldValues(Object arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "getObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V", arg0, arg1)); }


String ProtectionDomain::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
ClassLoader ProtectionDomain::getClassLoader() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava/lang/ClassLoader;")); }
CodeSource ProtectionDomain::getCodeSource() { return CodeSource(*classes[className]->invokeMethod<jobject>(this->object, "getCodeSource", "()Ljava/security/CodeSource;")); }
bool ProtectionDomain::implies(Permission arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "implies", "(Ljava/security/Permission;)Z", arg0)); }
bool ProtectionDomain::seeAllp() { return bool(*classes[className]->invokeStaticMethod<bool>("seeAllp", "()Z")); }
PermissionCollection ProtectionDomain::mergePermissions() { return PermissionCollection(*classes[className]->invokeMethod<jobject>(this->object, "mergePermissions", "()Ljava/security/PermissionCollection;")); }
PermissionCollection ProtectionDomain::getPermissions() { return PermissionCollection(*classes[className]->invokeMethod<jobject>(this->object, "getPermissions", "()Ljava/security/PermissionCollection;")); }
bool ProtectionDomain::staticPermissionsOnly() { return bool(*classes[className]->invokeMethod<bool>(this->object, "staticPermissionsOnly", "()Z")); }
bool ProtectionDomain::impliesWithAltFilePerm(Permission arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "impliesWithAltFilePerm", "(Ljava/security/Permission;)Z", arg0)); }

String ClassLoader::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
String ClassLoader::name() { return String(*classes[className]->invokeMethod<jobject>(this->object, "name", "()Ljava/lang/String;")); }
Class ClassLoader::loadClass(String arg0, bool arg1) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "loadClass", "(Ljava/lang/String;Z)Ljava/lang/Class;", arg0, arg1)); }
Class ClassLoader::loadClass(String arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class ClassLoader::loadClass(Module arg0, String arg1) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "loadClass", "(Ljava/lang/Module;Ljava/lang/String;)Ljava/lang/Class;", arg0, arg1)); }
long ClassLoader::findNative(ClassLoader arg0, String arg1) { return long(*classes[className]->invokeStaticMethod<long>("findNative", "(Ljava/lang/ClassLoader;Ljava/lang/String;)J", arg0, arg1)); }
ClassLoader ClassLoader::getPlatformClassLoader() { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("getPlatformClassLoader", "()Ljava/lang/ClassLoader;")); }
ClassLoader ClassLoader::getSystemClassLoader() { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("getSystemClassLoader", "()Ljava/lang/ClassLoader;")); }
void ClassLoader::checkPackageAccess(Class arg0, ProtectionDomain arg1) { (classes[className]->invokeMethod<void>(this->object, "checkPackageAccess", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V", arg0, arg1)); }
ClassLoader ClassLoader::getClassLoader(Class arg0) { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("getClassLoader", "(Ljava/lang/Class;)Ljava/lang/ClassLoader;", arg0)); }
void ClassLoader::checkClassLoaderPermission(ClassLoader arg0, Class arg1) { (classes[className]->invokeStaticMethod<void>("checkClassLoaderPermission", "(Ljava/lang/ClassLoader;Ljava/lang/Class;)V", arg0, arg1)); }
Package ClassLoader::definePackage(String arg0, Module arg1) { return Package(*classes[className]->invokeMethod<jobject>(this->object, "definePackage", "(Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/Package;", arg0, arg1)); }
Package ClassLoader::definePackage(String arg0, String arg1, String arg2, String arg3, String arg4, String arg5, String arg6, URL arg7) { return Package(*classes[className]->invokeMethod<jobject>(this->object, "definePackage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
Package ClassLoader::definePackage(Class arg0) { return Package(*classes[className]->invokeMethod<jobject>(this->object, "definePackage", "(Ljava/lang/Class;)Ljava/lang/Package;", arg0)); }
URL ClassLoader::findResource(String arg0) { return URL(*classes[className]->invokeMethod<jobject>(this->object, "findResource", "(Ljava/lang/String;)Ljava/net/URL;", arg0)); }
URL ClassLoader::findResource(String arg0, String arg1) { return URL(*classes[className]->invokeMethod<jobject>(this->object, "findResource", "(Ljava/lang/String;Ljava/lang/String;)Ljava/net/URL;", arg0, arg1)); }
InputStream ClassLoader::getSystemResourceAsStream(String arg0) { return InputStream(*classes[className]->invokeStaticMethod<jobject>("getSystemResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", arg0)); }
InputStream ClassLoader::getResourceAsStream(String arg0) { return InputStream(*classes[className]->invokeMethod<jobject>(this->object, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", arg0)); }
URL ClassLoader::getSystemResource(String arg0) { return URL(*classes[className]->invokeStaticMethod<jobject>("getSystemResource", "(Ljava/lang/String;)Ljava/net/URL;", arg0)); }
URL ClassLoader::getResource(String arg0) { return URL(*classes[className]->invokeMethod<jobject>(this->object, "getResource", "(Ljava/lang/String;)Ljava/net/URL;", arg0)); }
Stream ClassLoader::packages() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "packages", "()Ljava/util/stream/Stream;")); }
bool ClassLoader::desiredAssertionStatus(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "desiredAssertionStatus", "(Ljava/lang/String;)Z", arg0)); }
void ClassLoader::registerNatives() { (classes[className]->invokeStaticMethod<void>("registerNatives", "()V")); }
Package ClassLoader::getPackage(String arg0) { return Package(*classes[className]->invokeMethod<jobject>(this->object, "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;", arg0)); }
void ClassLoader::setSigners(Class arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "setSigners", "(Ljava/lang/Class;[Ljava/lang/Object;)V", arg0, arg1)); }
Void ClassLoader::checkCreateClassLoader() { return Void(*classes[className]->invokeStaticMethod<jobject>("checkCreateClassLoader", "()Ljava/lang/Void;")); }
Void ClassLoader::checkCreateClassLoader(String arg0) { return Void(*classes[className]->invokeStaticMethod<jobject>("checkCreateClassLoader", "(Ljava/lang/String;)Ljava/lang/Void;", arg0)); }
String ClassLoader::nameAndId(ClassLoader arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("nameAndId", "(Ljava/lang/ClassLoader;)Ljava/lang/String;", arg0)); }
Object ClassLoader::getClassLoadingLock(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoadingLock", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }
Class ClassLoader::findLoadedClass(String arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "findLoadedClass", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class ClassLoader::findBootstrapClassOrNull(String arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("findBootstrapClassOrNull", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class ClassLoader::findClass(String arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class ClassLoader::findClass(String arg0, String arg1) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "findClass", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Class;", arg0, arg1)); }
void ClassLoader::resolveClass(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "resolveClass", "(Ljava/lang/Class;)V", arg0)); }
Class ClassLoader::defineClass(arr_B arg0, int arg1, int arg2) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "defineClass", "([BII)Ljava/lang/Class;", arg0, arg1, arg2)); }
Class ClassLoader::defineClass(String arg0, ByteBuffer arg1, ProtectionDomain arg2) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "defineClass", "(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;", arg0, arg1, arg2)); }
Class ClassLoader::defineClass(String arg0, arr_B arg1, int arg2, int arg3, ProtectionDomain arg4) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;", arg0, arg1, arg2, arg3, arg4)); }
Class ClassLoader::defineClass(String arg0, arr_B arg1, int arg2, int arg3) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "defineClass", "(Ljava/lang/String;[BII)Ljava/lang/Class;", arg0, arg1, arg2, arg3)); }
bool ClassLoader::checkName(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("checkName", "(Ljava/lang/String;)Z", arg0)); }
ClassLoader ClassLoader::getBuiltinPlatformClassLoader() { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("getBuiltinPlatformClassLoader", "()Ljava/lang/ClassLoader;")); }
void ClassLoader::checkCerts(String arg0, CodeSource arg1) { (classes[className]->invokeMethod<void>(this->object, "checkCerts", "(Ljava/lang/String;Ljava/security/CodeSource;)V", arg0, arg1)); }
NamedPackage ClassLoader::getNamedPackage(String arg0, Module arg1) { return NamedPackage(*classes[className]->invokeMethod<jobject>(this->object, "getNamedPackage", "(Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/NamedPackage;", arg0, arg1)); }
ProtectionDomain ClassLoader::preDefineClass(String arg0, ProtectionDomain arg1) { return ProtectionDomain(*classes[className]->invokeMethod<jobject>(this->object, "preDefineClass", "(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;", arg0, arg1)); }
String ClassLoader::defineClassSourceLocation(ProtectionDomain arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "defineClassSourceLocation", "(Ljava/security/ProtectionDomain;)Ljava/lang/String;", arg0)); }
Class ClassLoader::defineClass1(ClassLoader arg0, String arg1, arr_B arg2, int arg3, int arg4, ProtectionDomain arg5, String arg6) { return Class(*classes[className]->invokeStaticMethod<jobject>("defineClass1", "(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ClassLoader::postDefineClass(Class arg0, ProtectionDomain arg1) { (classes[className]->invokeMethod<void>(this->object, "postDefineClass", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V", arg0, arg1)); }
Class ClassLoader::defineClass2(ClassLoader arg0, String arg1, ByteBuffer arg2, int arg3, int arg4, ProtectionDomain arg5, String arg6) { return Class(*classes[className]->invokeStaticMethod<jobject>("defineClass2", "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
bool ClassLoader::compareCerts(Certificate_interface arg0, Certificate_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "compareCerts", "([Ljava/security/cert/Certificate;[Ljava/security/cert/Certificate;)Z", arg0, arg1)); }
Class ClassLoader::findBootstrapClass(String arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("findBootstrapClass", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class ClassLoader::findLoadedClass0(String arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "findLoadedClass0", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Enumeration ClassLoader::getResources(String arg0) { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "getResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", arg0)); }
Enumeration ClassLoader::findResources(String arg0) { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "findResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", arg0)); }
ClassLoader ClassLoader::getBuiltinAppClassLoader() { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("getBuiltinAppClassLoader", "()Ljava/lang/ClassLoader;")); }
bool ClassLoader::isAncestor(ClassLoader arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAncestor", "(Ljava/lang/ClassLoader;)Z", arg0)); }
bool ClassLoader::needsClassLoaderPermissionCheck(ClassLoader arg0, ClassLoader arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("needsClassLoaderPermissionCheck", "(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z", arg0, arg1)); }
Package ClassLoader::toPackage(String arg0, NamedPackage arg1, Module arg2) { return Package(*classes[className]->invokeMethod<jobject>(this->object, "toPackage", "(Ljava/lang/String;Ljava/lang/NamedPackage;Ljava/lang/Module;)Ljava/lang/Package;", arg0, arg1, arg2)); }
Package ClassLoader::getDefinedPackage(String arg0) { return Package(*classes[className]->invokeMethod<jobject>(this->object, "getDefinedPackage", "(Ljava/lang/String;)Ljava/lang/Package;", arg0)); }
NativeLibrary ClassLoader::loadLibrary(Class arg0, String arg1) { return NativeLibrary(*classes[className]->invokeStaticMethod<jobject>("loadLibrary", "(Ljava/lang/Class;Ljava/lang/String;)Ljdk/internal/loader/NativeLibrary;", arg0, arg1)); }
NativeLibrary ClassLoader::loadLibrary(Class arg0, File arg1) { return NativeLibrary(*classes[className]->invokeStaticMethod<jobject>("loadLibrary", "(Ljava/lang/Class;Ljava/io/File;)Ljdk/internal/loader/NativeLibrary;", arg0, arg1)); }
String ClassLoader::findLibrary(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "findLibrary", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void ClassLoader::initializeJavaAssertionMaps() { (classes[className]->invokeMethod<void>(this->object, "initializeJavaAssertionMaps", "()V")); }
AssertionStatusDirectives ClassLoader::retrieveDirectives() { return AssertionStatusDirectives(*classes[className]->invokeStaticMethod<jobject>("retrieveDirectives", "()Ljava/lang/AssertionStatusDirectives;")); }
bool ClassLoader::trySetObjectField(String arg0, Object arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "trySetObjectField", "(Ljava/lang/String;Ljava/lang/Object;)Z", arg0, arg1)); }
void ClassLoader::addClass(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "addClass", "(Ljava/lang/Class;)V", arg0)); }
Class ClassLoader::defineClass0(ClassLoader arg0, Class arg1, String arg2, arr_B arg3, int arg4, int arg5, ProtectionDomain arg6, bool arg7, int arg8, Object arg9) { return Class(*classes[className]->invokeStaticMethod<jobject>("defineClass0", "(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BIILjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
Class ClassLoader::findSystemClass(String arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "findSystemClass", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Stream ClassLoader::resources(String arg0) { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "resources", "(Ljava/lang/String;)Ljava/util/stream/Stream;", arg0)); }
bool ClassLoader::registerAsParallelCapable() { return bool(*classes[className]->invokeStaticMethod<bool>("registerAsParallelCapable", "()Z")); }
bool ClassLoader::isRegisteredAsParallelCapable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRegisteredAsParallelCapable", "()Z")); }
Enumeration ClassLoader::getSystemResources(String arg0) { return Enumeration(*classes[className]->invokeStaticMethod<jobject>("getSystemResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", arg0)); }
ClassLoader ClassLoader::getParent() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/lang/ClassLoader;")); }
Module ClassLoader::getUnnamedModule() { return Module(*classes[className]->invokeMethod<jobject>(this->object, "getUnnamedModule", "()Ljava/lang/Module;")); }
ClassLoader ClassLoader::initSystemClassLoader() { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("initSystemClassLoader", "()Ljava/lang/ClassLoader;")); }
void ClassLoader::setDefaultAssertionStatus(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDefaultAssertionStatus", "(Z)V", arg0)); }
void ClassLoader::setPackageAssertionStatus(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setPackageAssertionStatus", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void ClassLoader::setClassAssertionStatus(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setClassAssertionStatus", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void ClassLoader::clearAssertionStatus() { (classes[className]->invokeMethod<void>(this->object, "clearAssertionStatus", "()V")); }
ConcurrentHashMap ClassLoader::createOrGetClassLoaderValueMap() { return ConcurrentHashMap(*classes[className]->invokeMethod<jobject>(this->object, "createOrGetClassLoaderValueMap", "()Ljava/util/concurrent/ConcurrentHashMap;")); }
void ClassLoader::resetArchivedStates() { (classes[className]->invokeMethod<void>(this->object, "resetArchivedStates", "()V")); }

String Module::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
String Module::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Module Module::addReads(Module arg0) { return Module(*classes[className]->invokeMethod<jobject>(this->object, "addReads", "(Ljava/lang/Module;)Ljava/lang/Module;", arg0)); }
Module Module::addExports(String arg0, Module arg1) { return Module(*classes[className]->invokeMethod<jobject>(this->object, "addExports", "(Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/Module;", arg0, arg1)); }
Module Module::addOpens(String arg0, Module arg1) { return Module(*classes[className]->invokeMethod<jobject>(this->object, "addOpens", "(Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/Module;", arg0, arg1)); }
Module Module::addUses(Class arg0) { return Module(*classes[className]->invokeMethod<jobject>(this->object, "addUses", "(Ljava/lang/Class;)Ljava/lang/Module;", arg0)); }
ClassLoader Module::getClassLoader() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava/lang/ClassLoader;")); }
ModuleDescriptor Module::getDescriptor() { return ModuleDescriptor(*classes[className]->invokeMethod<jobject>(this->object, "getDescriptor", "()Ljava/lang/module/ModuleDescriptor;")); }
bool Module::isNamed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNamed", "()Z")); }
InputStream Module::getResourceAsStream(String arg0) { return InputStream(*classes[className]->invokeMethod<jobject>(this->object, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", arg0)); }
bool Module::isOpen(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpen", "(Ljava/lang/String;)Z", arg0)); }
bool Module::isOpen(String arg0, Module arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpen", "(Ljava/lang/String;Ljava/lang/Module;)Z", arg0, arg1)); }
Set Module::getPackages() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getPackages", "()Ljava/util/Set;")); }
void Module::defineModule0(Module arg0, bool arg1, String arg2, String arg3, Object_interface arg4) { (classes[className]->invokeStaticMethod<void>("defineModule0", "(Ljava/lang/Module;ZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1, arg2, arg3, arg4)); }
Module Module::implAddEnableNativeAccess() { return Module(*classes[className]->invokeMethod<jobject>(this->object, "implAddEnableNativeAccess", "()Ljava/lang/Module;")); }
Module Module::getCallerModule(Class arg0) { return Module(*classes[className]->invokeMethod<jobject>(this->object, "getCallerModule", "(Ljava/lang/Class;)Ljava/lang/Module;", arg0)); }
void Module::implAddReads(Module arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "implAddReads", "(Ljava/lang/Module;Z)V", arg0, arg1)); }
void Module::implAddReads(Module arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddReads", "(Ljava/lang/Module;)V", arg0)); }
bool Module::canRead(Module arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canRead", "(Ljava/lang/Module;)Z", arg0)); }
void Module::addReads0(Module arg0, Module arg1) { (classes[className]->invokeStaticMethod<void>("addReads0", "(Ljava/lang/Module;Ljava/lang/Module;)V", arg0, arg1)); }
bool Module::implIsExportedOrOpen(String arg0, Module arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "implIsExportedOrOpen", "(Ljava/lang/String;Ljava/lang/Module;Z)Z", arg0, arg1, arg2)); }
bool Module::isStaticallyExportedOrOpen(String arg0, Module arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStaticallyExportedOrOpen", "(Ljava/lang/String;Ljava/lang/Module;Z)Z", arg0, arg1, arg2)); }
bool Module::isReflectivelyExportedOrOpen(String arg0, Module arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReflectivelyExportedOrOpen", "(Ljava/lang/String;Ljava/lang/Module;Z)Z", arg0, arg1, arg2)); }
bool Module::allows(Set arg0, Module arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "allows", "(Ljava/util/Set;Ljava/lang/Module;)Z", arg0, arg1)); }
void Module::implAddExportsOrOpens(String arg0, Module arg1, bool arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "implAddExportsOrOpens", "(Ljava/lang/String;Ljava/lang/Module;ZZ)V", arg0, arg1, arg2, arg3)); }
void Module::addExportsToAll0(Module arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("addExportsToAll0", "(Ljava/lang/Module;Ljava/lang/String;)V", arg0, arg1)); }
void Module::addExportsToAllUnnamed0(Module arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("addExportsToAllUnnamed0", "(Ljava/lang/Module;Ljava/lang/String;)V", arg0, arg1)); }
void Module::addExports0(Module arg0, String arg1, Module arg2) { (classes[className]->invokeStaticMethod<void>("addExports0", "(Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)V", arg0, arg1, arg2)); }
void Module::implAddOpensToAllUnnamed(Set arg0, Set arg1) { (classes[className]->invokeMethod<void>(this->object, "implAddOpensToAllUnnamed", "(Ljava/util/Set;Ljava/util/Set;)V", arg0, arg1)); }
void Module::implAddOpensToAllUnnamed(Set arg0, Map arg1) { (classes[className]->invokeMethod<void>(this->object, "implAddOpensToAllUnnamed", "(Ljava/util/Set;Ljava/util/Map;)V", arg0, arg1)); }
void Module::implAddOpensToAllUnnamed(String arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddOpensToAllUnnamed", "(Ljava/lang/String;)V", arg0)); }
void Module::implAddUses(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddUses", "(Ljava/lang/Class;)V", arg0)); }
bool Module::canUse(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canUse", "(Ljava/lang/Class;)Z", arg0)); }
Module Module::findModule(ModuleLayer arg0, ResolvedModule arg1) { return Module(*classes[className]->invokeStaticMethod<jobject>("findModule", "(Ljava/lang/ModuleLayer;Ljava/lang/module/ResolvedModule;)Ljava/lang/Module;", arg0, arg1)); }
Module Module::findModule(String arg0, Map arg1, Map arg2, List arg3) { return Module(*classes[className]->invokeStaticMethod<jobject>("findModule", "(Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Ljava/lang/Module;", arg0, arg1, arg2, arg3)); }
void Module::initExports(Module arg0, Map arg1) { (classes[className]->invokeStaticMethod<void>("initExports", "(Ljava/lang/Module;Ljava/util/Map;)V", arg0, arg1)); }
void Module::initExportsAndOpens(Module arg0, Map arg1, Map arg2, List arg3) { (classes[className]->invokeStaticMethod<void>("initExportsAndOpens", "(Ljava/lang/Module;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)V", arg0, arg1, arg2, arg3)); }
Class Module::moduleInfoClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "moduleInfoClass", "()Ljava/lang/Class;")); }
Class Module::loadModuleInfoClass(InputStream arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "loadModuleInfoClass", "(Ljava/io/InputStream;)Ljava/lang/Class;", arg0)); }
Class Module::loadModuleInfoClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "loadModuleInfoClass", "()Ljava/lang/Class;")); }
ModuleLayer Module::getLayer() { return ModuleLayer(*classes[className]->invokeMethod<jobject>(this->object, "getLayer", "()Ljava/lang/ModuleLayer;")); }
void Module::implAddEnableNativeAccessAllUnnamed() { (classes[className]->invokeStaticMethod<void>("implAddEnableNativeAccessAllUnnamed", "()V")); }
bool Module::implIsEnableNativeAccess() { return bool(*classes[className]->invokeMethod<bool>(this->object, "implIsEnableNativeAccess", "()Z")); }
void Module::implAddReadsAllUnnamed() { (classes[className]->invokeMethod<void>(this->object, "implAddReadsAllUnnamed", "()V")); }
void Module::implAddReadsNoSync(Module arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddReadsNoSync", "(Ljava/lang/Module;)V", arg0)); }
bool Module::isExported(String arg0, Module arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isExported", "(Ljava/lang/String;Ljava/lang/Module;)Z", arg0, arg1)); }
bool Module::isExported(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isExported", "(Ljava/lang/String;)Z", arg0)); }
bool Module::isReflectivelyExported(String arg0, Module arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReflectivelyExported", "(Ljava/lang/String;Ljava/lang/Module;)Z", arg0, arg1)); }
bool Module::isReflectivelyOpened(String arg0, Module arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReflectivelyOpened", "(Ljava/lang/String;Ljava/lang/Module;)Z", arg0, arg1)); }
void Module::implAddExports(String arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddExports", "(Ljava/lang/String;)V", arg0)); }
void Module::implAddExports(String arg0, Module arg1) { (classes[className]->invokeMethod<void>(this->object, "implAddExports", "(Ljava/lang/String;Ljava/lang/Module;)V", arg0, arg1)); }
void Module::implAddExportsToAllUnnamed(String arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddExportsToAllUnnamed", "(Ljava/lang/String;)V", arg0)); }
void Module::implAddExportsNoSync(String arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddExportsNoSync", "(Ljava/lang/String;)V", arg0)); }
void Module::implAddExportsNoSync(String arg0, Module arg1) { (classes[className]->invokeMethod<void>(this->object, "implAddExportsNoSync", "(Ljava/lang/String;Ljava/lang/Module;)V", arg0, arg1)); }
void Module::implAddOpens(String arg0) { (classes[className]->invokeMethod<void>(this->object, "implAddOpens", "(Ljava/lang/String;)V", arg0)); }
void Module::implAddOpens(String arg0, Module arg1) { (classes[className]->invokeMethod<void>(this->object, "implAddOpens", "(Ljava/lang/String;Ljava/lang/Module;)V", arg0, arg1)); }
Map Module::defineModules(Configuration arg0, Function arg1, ModuleLayer arg2) { return Map(*classes[className]->invokeStaticMethod<jobject>("defineModules", "(Ljava/lang/module/Configuration;Ljava/util/function/Function;Ljava/lang/ModuleLayer;)Ljava/util/Map;", arg0, arg1, arg2)); }

Set ModuleDescriptor::requires_() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "requires", "()Ljava/util/Set;")); }
Optional ModuleDescriptor::mainClass() { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "mainClass", "()Ljava/util/Optional;")); }
long ModuleDescriptor::modsValue(Set arg0) { return long(*classes[className]->invokeStaticMethod<long>("modsValue", "(Ljava/util/Set;)J", arg0)); }
String ModuleDescriptor::toNameAndVersion() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toNameAndVersion", "()Ljava/lang/String;")); }
Optional ModuleDescriptor::rawVersion() { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "rawVersion", "()Ljava/util/Optional;")); }
ModuleDescriptor_Builder ModuleDescriptor::newModule(String arg0, Set arg1) { return ModuleDescriptor_Builder(*classes[className]->invokeStaticMethod<jobject>("newModule", "(Ljava/lang/String;Ljava/util/Set;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1)); }
ModuleDescriptor_Builder ModuleDescriptor::newModule(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeStaticMethod<jobject>("newModule", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor::newOpenModule(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeStaticMethod<jobject>("newOpenModule", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor::newAutomaticModule(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeStaticMethod<jobject>("newAutomaticModule", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
Set ModuleDescriptor::modifiers() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "modifiers", "()Ljava/util/Set;")); }
String ModuleDescriptor::name() { return String(*classes[className]->invokeMethod<jobject>(this->object, "name", "()Ljava/lang/String;")); }
bool ModuleDescriptor::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ModuleDescriptor::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String ModuleDescriptor::toString(Set arg0, String arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(Ljava/util/Set;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
Optional ModuleDescriptor::version() { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "version", "()Ljava/util/Optional;")); }
int ModuleDescriptor::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int ModuleDescriptor::compare(Object arg0, Object arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", arg0, arg1)); }
int ModuleDescriptor::compare(Set arg0, Set arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(Ljava/util/Set;Ljava/util/Set;)I", arg0, arg1)); }
String ModuleDescriptor::packageName(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("packageName", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
Set ModuleDescriptor::packages() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "packages", "()Ljava/util/Set;")); }
bool ModuleDescriptor::isOpen() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpen", "()Z")); }
ModuleDescriptor ModuleDescriptor::read(InputStream arg0) { return ModuleDescriptor(*classes[className]->invokeStaticMethod<jobject>("read", "(Ljava/io/InputStream;)Ljava/lang/module/ModuleDescriptor;", arg0)); }
ModuleDescriptor ModuleDescriptor::read(ByteBuffer arg0) { return ModuleDescriptor(*classes[className]->invokeStaticMethod<jobject>("read", "(Ljava/nio/ByteBuffer;)Ljava/lang/module/ModuleDescriptor;", arg0)); }
ModuleDescriptor ModuleDescriptor::read(ByteBuffer arg0, Supplier arg1) { return ModuleDescriptor(*classes[className]->invokeStaticMethod<jobject>("read", "(Ljava/nio/ByteBuffer;Ljava/util/function/Supplier;)Ljava/lang/module/ModuleDescriptor;", arg0, arg1)); }
ModuleDescriptor ModuleDescriptor::read(InputStream arg0, Supplier arg1) { return ModuleDescriptor(*classes[className]->invokeStaticMethod<jobject>("read", "(Ljava/io/InputStream;Ljava/util/function/Supplier;)Ljava/lang/module/ModuleDescriptor;", arg0, arg1)); }
Set ModuleDescriptor::exports() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "exports", "()Ljava/util/Set;")); }
Set ModuleDescriptor::opens() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "opens", "()Ljava/util/Set;")); }
bool ModuleDescriptor::isAutomatic() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAutomatic", "()Z")); }
Set ModuleDescriptor::uses() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "uses", "()Ljava/util/Set;")); }
Set ModuleDescriptor::provides() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "provides", "()Ljava/util/Set;")); }

Optional Optional::ofNullable(Object arg0) { return Optional(*classes[className]->invokeStaticMethod<jobject>("ofNullable", "(Ljava/lang/Object;)Ljava/util/Optional;", arg0)); }
void Optional::ifPresent(Consumer arg0) { (classes[className]->invokeMethod<void>(this->object, "ifPresent", "(Ljava/util/function/Consumer;)V", arg0)); }
void Optional::ifPresentOrElse(Consumer arg0, Runnable arg1) { (classes[className]->invokeMethod<void>(this->object, "ifPresentOrElse", "(Ljava/util/function/Consumer;Ljava/lang/Runnable;)V", arg0, arg1)); }
Optional Optional::or_(Supplier arg0) { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "or", "(Ljava/util/function/Supplier;)Ljava/util/Optional;", arg0)); }
Object Optional::orElseGet(Supplier arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "orElseGet", "(Ljava/util/function/Supplier;)Ljava/lang/Object;", arg0)); }
Object Optional::get() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "()Ljava/lang/Object;")); }
bool Optional::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Optional::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Optional::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool Optional::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
Optional Optional::map(Function arg0) { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "map", "(Ljava/util/function/Function;)Ljava/util/Optional;", arg0)); }
Stream Optional::stream() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "stream", "()Ljava/util/stream/Stream;")); }
Optional Optional::of(Object arg0) { return Optional(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;)Ljava/util/Optional;", arg0)); }
Optional Optional::filter(Predicate arg0) { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "filter", "(Ljava/util/function/Predicate;)Ljava/util/Optional;", arg0)); }
Optional Optional::empty() { return Optional(*classes[className]->invokeStaticMethod<jobject>("empty", "()Ljava/util/Optional;")); }
Optional Optional::flatMap(Function arg0) { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "flatMap", "(Ljava/util/function/Function;)Ljava/util/Optional;", arg0)); }
bool Optional::isPresent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPresent", "()Z")); }
Object Optional::orElse(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object Optional::orElseThrow(Supplier arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "orElseThrow", "(Ljava/util/function/Supplier;)Ljava/lang/Object;", arg0)); }
Object Optional::orElseThrow() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "orElseThrow", "()Ljava/lang/Object;")); }






ModuleDescriptor_Builder ModuleDescriptor_Builder::requires_(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "requires", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::requires_(Set arg0, String arg1, String arg2) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "requires", "(Ljava/util/Set;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1, arg2)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::requires_(Set arg0, String arg1, ModuleDescriptor_Version arg2) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "requires", "(Ljava/util/Set;Ljava/lang/String;Ljava/lang/module/ModuleDescriptor$Version;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1, arg2)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::requires_(ModuleDescriptor_Requires arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "requires", "(Ljava/lang/module/ModuleDescriptor$Requires;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::requires_(Set arg0, String arg1) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "requires", "(Ljava/util/Set;Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::mainClass(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "mainClass", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor ModuleDescriptor_Builder::build() { return ModuleDescriptor(*classes[className]->invokeMethod<jobject>(this->object, "build", "()Ljava/lang/module/ModuleDescriptor;")); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::version(ModuleDescriptor_Version arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "version", "(Ljava/lang/module/ModuleDescriptor$Version;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::version(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "version", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::packages(Set arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "packages", "(Ljava/util/Set;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
Set ModuleDescriptor_Builder::packages() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "packages", "()Ljava/util/Set;")); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::exports(String arg0, Set arg1) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "exports", "(Ljava/lang/String;Ljava/util/Set;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::exports(Set arg0, String arg1, Set arg2) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "exports", "(Ljava/util/Set;Ljava/lang/String;Ljava/util/Set;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1, arg2)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::exports(ModuleDescriptor_Exports arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "exports", "(Ljava/lang/module/ModuleDescriptor$Exports;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::exports(Set arg0, String arg1) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "exports", "(Ljava/util/Set;Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::exports(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "exports", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::opens(ModuleDescriptor_Opens arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "opens", "(Ljava/lang/module/ModuleDescriptor$Opens;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::opens(Set arg0, String arg1) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "opens", "(Ljava/util/Set;Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::opens(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "opens", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::opens(String arg0, Set arg1) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "opens", "(Ljava/lang/String;Ljava/util/Set;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::opens(Set arg0, String arg1, Set arg2) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "opens", "(Ljava/util/Set;Ljava/lang/String;Ljava/util/Set;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1, arg2)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::uses(String arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "uses", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::provides(ModuleDescriptor_Provides arg0) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "provides", "(Ljava/lang/module/ModuleDescriptor$Provides;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0)); }
ModuleDescriptor_Builder ModuleDescriptor_Builder::provides(String arg0, List arg1) { return ModuleDescriptor_Builder(*classes[className]->invokeMethod<jobject>(this->object, "provides", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/module/ModuleDescriptor$Builder;", arg0, arg1)); }

ModuleDescriptor_Version ModuleDescriptor_Version::parse(String arg0) { return ModuleDescriptor_Version(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Version;", arg0)); }
int ModuleDescriptor_Version::takeNumber(String arg0, int arg1, List arg2) { return int(*classes[className]->invokeStaticMethod<int>("takeNumber", "(Ljava/lang/String;ILjava/util/List;)I", arg0, arg1, arg2)); }
int ModuleDescriptor_Version::takeString(String arg0, int arg1, List arg2) { return int(*classes[className]->invokeStaticMethod<int>("takeString", "(Ljava/lang/String;ILjava/util/List;)I", arg0, arg1, arg2)); }
int ModuleDescriptor_Version::compareTokens(List arg0, List arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "compareTokens", "(Ljava/util/List;Ljava/util/List;)I", arg0, arg1)); }
int ModuleDescriptor_Version::cmp(Object arg0, Object arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "cmp", "(Ljava/lang/Object;Ljava/lang/Object;)I", arg0, arg1)); }
bool ModuleDescriptor_Version::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ModuleDescriptor_Version::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ModuleDescriptor_Version::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }


Optional ModuleDescriptor_Requires::rawCompiledVersion() { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "rawCompiledVersion", "()Ljava/util/Optional;")); }
Optional ModuleDescriptor_Requires::compiledVersion() { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "compiledVersion", "()Ljava/util/Optional;")); }
Set ModuleDescriptor_Requires::modifiers() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "modifiers", "()Ljava/util/Set;")); }
String ModuleDescriptor_Requires::name() { return String(*classes[className]->invokeMethod<jobject>(this->object, "name", "()Ljava/lang/String;")); }
bool ModuleDescriptor_Requires::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ModuleDescriptor_Requires::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ModuleDescriptor_Requires::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

Set ModuleDescriptor_Exports::modifiers() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "modifiers", "()Ljava/util/Set;")); }
bool ModuleDescriptor_Exports::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ModuleDescriptor_Exports::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ModuleDescriptor_Exports::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String ModuleDescriptor_Exports::source() { return String(*classes[className]->invokeMethod<jobject>(this->object, "source", "()Ljava/lang/String;")); }
bool ModuleDescriptor_Exports::isQualified() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isQualified", "()Z")); }
Set ModuleDescriptor_Exports::targets() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "targets", "()Ljava/util/Set;")); }

Set ModuleDescriptor_Opens::modifiers() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "modifiers", "()Ljava/util/Set;")); }
bool ModuleDescriptor_Opens::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ModuleDescriptor_Opens::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ModuleDescriptor_Opens::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String ModuleDescriptor_Opens::source() { return String(*classes[className]->invokeMethod<jobject>(this->object, "source", "()Ljava/lang/String;")); }
bool ModuleDescriptor_Opens::isQualified() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isQualified", "()Z")); }
Set ModuleDescriptor_Opens::targets() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "targets", "()Ljava/util/Set;")); }

bool ModuleDescriptor_Provides::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ModuleDescriptor_Provides::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ModuleDescriptor_Provides::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String ModuleDescriptor_Provides::service() { return String(*classes[className]->invokeMethod<jobject>(this->object, "service", "()Ljava/lang/String;")); }
List ModuleDescriptor_Provides::providers() { return List(*classes[className]->invokeMethod<jobject>(this->object, "providers", "()Ljava/util/List;")); }

int InputStream::read(arr_B arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "read", "([BII)I", arg0, arg1, arg2)); }
int InputStream::read(arr_B arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "read", "([B)I", arg0)); }
int InputStream::read() { return int(*classes[className]->invokeMethod<int>(this->object, "read", "()I")); }
void InputStream::mark(int arg0) { (classes[className]->invokeMethod<void>(this->object, "mark", "(I)V", arg0)); }
int InputStream::readNBytes(arr_B arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "readNBytes", "([BII)I", arg0, arg1, arg2)); }
long InputStream::transferTo(OutputStream arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "transferTo", "(Ljava/io/OutputStream;)J", arg0)); }
long InputStream::skip(long arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "skip", "(J)J", arg0)); }
int InputStream::available() { return int(*classes[className]->invokeMethod<int>(this->object, "available", "()I")); }
bool InputStream::markSupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "markSupported", "()Z")); }
void InputStream::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }
InputStream InputStream::nullInputStream() { return InputStream(*classes[className]->invokeStaticMethod<jobject>("nullInputStream", "()Ljava/io/InputStream;")); }
void InputStream::skipNBytes(long arg0) { (classes[className]->invokeMethod<void>(this->object, "skipNBytes", "(J)V", arg0)); }

OutputStream OutputStream::nullOutputStream() { return OutputStream(*classes[className]->invokeStaticMethod<jobject>("nullOutputStream", "()Ljava/io/OutputStream;")); }
void OutputStream::write(arr_B arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }
void OutputStream::write(arr_B arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }
void OutputStream::write(int arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

ByteBuffer ByteBuffer::allocate(int arg0) { return ByteBuffer(*classes[className]->invokeStaticMethod<jobject>("allocate", "(I)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::getArray(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getArray", "(I[BII)Ljava/nio/ByteBuffer;", arg0, arg1, arg2, arg3)); }
void ByteBuffer::putBuffer(int arg0, ByteBuffer arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBuffer", "(ILjava/nio/ByteBuffer;II)V", arg0, arg1, arg2, arg3)); }
ByteBuffer ByteBuffer::putArray(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putArray", "(I[BII)Ljava/nio/ByteBuffer;", arg0, arg1, arg2, arg3)); }
int ByteBuffer::alignmentOffset(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "alignmentOffset", "(II)I", arg0, arg1)); }
ByteBuffer ByteBuffer::allocateDirect(int arg0) { return ByteBuffer(*classes[className]->invokeStaticMethod<jobject>("allocateDirect", "(I)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::asReadOnlyBuffer() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::compact() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "compact", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::alignedSlice(int arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "alignedSlice", "(I)Ljava/nio/ByteBuffer;", arg0)); }
CharBuffer ByteBuffer::asCharBuffer() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asCharBuffer", "()Ljava/nio/CharBuffer;")); }
ShortBuffer ByteBuffer::asShortBuffer() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asShortBuffer", "()Ljava/nio/ShortBuffer;")); }
IntBuffer ByteBuffer::asIntBuffer() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asIntBuffer", "()Ljava/nio/IntBuffer;")); }
LongBuffer ByteBuffer::asLongBuffer() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asLongBuffer", "()Ljava/nio/LongBuffer;")); }
FloatBuffer ByteBuffer::asFloatBuffer() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asFloatBuffer", "()Ljava/nio/FloatBuffer;")); }
DoubleBuffer ByteBuffer::asDoubleBuffer() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asDoubleBuffer", "()Ljava/nio/DoubleBuffer;")); }
int ByteBuffer::mismatch(ByteBuffer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "mismatch", "(Ljava/nio/ByteBuffer;)I", arg0)); }
Object ByteBuffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
byte ByteBuffer::get() { return byte(*classes[className]->invokeMethod<byte>(this->object, "get", "()B")); }
ByteBuffer ByteBuffer::get(arr_B arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([B)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::get(arr_B arg0, int arg1, int arg2) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([BII)Ljava/nio/ByteBuffer;", arg0, arg1, arg2)); }
byte ByteBuffer::get(int arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "get", "(I)B", arg0)); }
ByteBuffer ByteBuffer::get(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[BII)Ljava/nio/ByteBuffer;", arg0, arg1, arg2, arg3)); }
ByteBuffer ByteBuffer::get(int arg0, arr_B arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[B)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::put(int arg0, byte arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(IB)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::put(int arg0, ByteBuffer arg1, int arg2, int arg3) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ILjava/nio/ByteBuffer;II)Ljava/nio/ByteBuffer;", arg0, arg1, arg2, arg3)); }
ByteBuffer ByteBuffer::put(byte arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(B)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::put(ByteBuffer arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::put(arr_B arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([B)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::put(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[BII)Ljava/nio/ByteBuffer;", arg0, arg1, arg2, arg3)); }
ByteBuffer ByteBuffer::put(int arg0, arr_B arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[B)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::put(arr_B arg0, int arg1, int arg2) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([BII)Ljava/nio/ByteBuffer;", arg0, arg1, arg2)); }
bool ByteBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ByteBuffer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ByteBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
short ByteBuffer::getShort(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }
short ByteBuffer::getShort() { return short(*classes[className]->invokeMethod<short>(this->object, "getShort", "()S")); }
ByteBuffer ByteBuffer::putShort(int arg0, short arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putShort", "(IS)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::putShort(short arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putShort", "(S)Ljava/nio/ByteBuffer;", arg0)); }
char ByteBuffer::getChar(int arg0) { return char(*classes[className]->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }
char ByteBuffer::getChar() { return char(*classes[className]->invokeMethod<char>(this->object, "getChar", "()C")); }
ByteBuffer ByteBuffer::putChar(char arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putChar", "(C)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::putChar(int arg0, char arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putChar", "(IC)Ljava/nio/ByteBuffer;", arg0, arg1)); }
int ByteBuffer::getInt() { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "()I")); }
int ByteBuffer::getInt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }
ByteBuffer ByteBuffer::putInt(int arg0, int arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putInt", "(II)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::putInt(int arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putInt", "(I)Ljava/nio/ByteBuffer;", arg0)); }
long ByteBuffer::getLong(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }
long ByteBuffer::getLong() { return long(*classes[className]->invokeMethod<long>(this->object, "getLong", "()J")); }
ByteBuffer ByteBuffer::putLong(int arg0, long arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putLong", "(IJ)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::putLong(long arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putLong", "(J)Ljava/nio/ByteBuffer;", arg0)); }
float ByteBuffer::getFloat(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }
float ByteBuffer::getFloat() { return float(*classes[className]->invokeMethod<float>(this->object, "getFloat", "()F")); }
ByteBuffer ByteBuffer::putFloat(int arg0, float arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putFloat", "(IF)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::putFloat(float arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putFloat", "(F)Ljava/nio/ByteBuffer;", arg0)); }
double ByteBuffer::getDouble(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }
double ByteBuffer::getDouble() { return double(*classes[className]->invokeMethod<double>(this->object, "getDouble", "()D")); }
ByteBuffer ByteBuffer::putDouble(double arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putDouble", "(D)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::putDouble(int arg0, double arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putDouble", "(ID)Ljava/nio/ByteBuffer;", arg0, arg1)); }
int ByteBuffer::compare(byte arg0, byte arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(BB)I", arg0, arg1)); }
ByteBuffer ByteBuffer::clear() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::wrap(arr_B arg0, int arg1, int arg2) { return ByteBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([BII)Ljava/nio/ByteBuffer;", arg0, arg1, arg2)); }
ByteBuffer ByteBuffer::wrap(arr_B arg0) { return ByteBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([B)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::position(int arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/ByteBuffer;", arg0)); }
ByteBuffer ByteBuffer::limit(int arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/ByteBuffer;", arg0)); }
bool ByteBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool ByteBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int ByteBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
ByteBuffer ByteBuffer::mark() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::reset() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::flip() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::rewind() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::slice(int arg0, int arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer ByteBuffer::slice() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::duplicate() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuffer::order(ByteOrder arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "order", "(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;", arg0)); }
ByteOrder ByteBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }

CharBuffer CharBuffer::allocate(int arg0) { return CharBuffer(*classes[className]->invokeStaticMethod<jobject>("allocate", "(I)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::getArray(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getArray", "(I[CII)Ljava/nio/CharBuffer;", arg0, arg1, arg2, arg3)); }
void CharBuffer::putBuffer(int arg0, CharBuffer arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBuffer", "(ILjava/nio/CharBuffer;II)V", arg0, arg1, arg2, arg3)); }
CharBuffer CharBuffer::putArray(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putArray", "(I[CII)Ljava/nio/CharBuffer;", arg0, arg1, arg2, arg3)); }
CharBuffer CharBuffer::asReadOnlyBuffer() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava/nio/CharBuffer;")); }
CharBuffer CharBuffer::compact() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "compact", "()Ljava/nio/CharBuffer;")); }
int CharBuffer::mismatch(CharBuffer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "mismatch", "(Ljava/nio/CharBuffer;)I", arg0)); }
bool CharBuffer::isAddressable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAddressable", "()Z")); }
char CharBuffer::getUnchecked(int arg0) { return char(*classes[className]->invokeMethod<char>(this->object, "getUnchecked", "(I)C", arg0)); }
ByteOrder CharBuffer::charRegionOrder() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "charRegionOrder", "()Ljava/nio/ByteOrder;")); }
Object CharBuffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
CharBuffer CharBuffer::get(int arg0, arr_C arg1) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[C)Ljava/nio/CharBuffer;", arg0, arg1)); }
CharBuffer CharBuffer::get(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[CII)Ljava/nio/CharBuffer;", arg0, arg1, arg2, arg3)); }
CharBuffer CharBuffer::get(arr_C arg0, int arg1, int arg2) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([CII)Ljava/nio/CharBuffer;", arg0, arg1, arg2)); }
CharBuffer CharBuffer::get(arr_C arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([C)Ljava/nio/CharBuffer;", arg0)); }
char CharBuffer::get() { return char(*classes[className]->invokeMethod<char>(this->object, "get", "()C")); }
char CharBuffer::get(int arg0) { return char(*classes[className]->invokeMethod<char>(this->object, "get", "(I)C", arg0)); }
CharBuffer CharBuffer::put(arr_C arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([C)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::put(String arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/lang/String;)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::put(arr_C arg0, int arg1, int arg2) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([CII)Ljava/nio/CharBuffer;", arg0, arg1, arg2)); }
CharBuffer CharBuffer::put(int arg0, arr_C arg1) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[C)Ljava/nio/CharBuffer;", arg0, arg1)); }
CharBuffer CharBuffer::put(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[CII)Ljava/nio/CharBuffer;", arg0, arg1, arg2, arg3)); }
CharBuffer CharBuffer::put(char arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(C)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::put(int arg0, char arg1) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(IC)Ljava/nio/CharBuffer;", arg0, arg1)); }
CharBuffer CharBuffer::put(String arg0, int arg1, int arg2) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/lang/String;II)Ljava/nio/CharBuffer;", arg0, arg1, arg2)); }
CharBuffer CharBuffer::put(CharBuffer arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::put(int arg0, CharBuffer arg1, int arg2, int arg3) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ILjava/nio/CharBuffer;II)Ljava/nio/CharBuffer;", arg0, arg1, arg2, arg3)); }
bool CharBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
CharBuffer CharBuffer::append(CharSequence arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::append(CharSequence arg0, int arg1, int arg2) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;", arg0, arg1, arg2)); }
CharBuffer CharBuffer::append(char arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(C)Ljava/nio/CharBuffer;", arg0)); }
int CharBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
CharBuffer CharBuffer::clear() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/CharBuffer;")); }
CharBuffer CharBuffer::wrap(arr_C arg0) { return CharBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([C)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::wrap(CharSequence arg0) { return CharBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::wrap(CharSequence arg0, int arg1, int arg2) { return CharBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;", arg0, arg1, arg2)); }
CharBuffer CharBuffer::wrap(arr_C arg0, int arg1, int arg2) { return CharBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([CII)Ljava/nio/CharBuffer;", arg0, arg1, arg2)); }
CharBuffer CharBuffer::position(int arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/CharBuffer;", arg0)); }
CharBuffer CharBuffer::subSequence(int arg0, int arg1) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava/nio/CharBuffer;", arg0, arg1)); }
CharBuffer CharBuffer::limit(int arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/CharBuffer;", arg0)); }
bool CharBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool CharBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int CharBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
CharBuffer CharBuffer::mark() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/CharBuffer;")); }
CharBuffer CharBuffer::reset() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/CharBuffer;")); }
CharBuffer CharBuffer::flip() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/CharBuffer;")); }
CharBuffer CharBuffer::rewind() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/CharBuffer;")); }
CharBuffer CharBuffer::slice(int arg0, int arg1) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/CharBuffer;", arg0, arg1)); }
CharBuffer CharBuffer::slice() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/CharBuffer;")); }
CharBuffer CharBuffer::duplicate() { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/CharBuffer;")); }
ByteOrder CharBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }

ByteOrder ByteOrder::nativeOrder() { return ByteOrder(*classes[className]->invokeStaticMethod<jobject>("nativeOrder", "()Ljava/nio/ByteOrder;")); }
String ByteOrder::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

Object Buffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
int Buffer::checkIndex(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "checkIndex", "(II)I", arg0, arg1)); }
int Buffer::checkIndex(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "checkIndex", "(I)I", arg0)); }
Buffer Buffer::clear() { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/Buffer;")); }
int Buffer::position() { return int(*classes[className]->invokeMethod<int>(this->object, "position", "()I")); }
Buffer Buffer::position(int arg0) { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/Buffer;", arg0)); }
Buffer Buffer::limit(int arg0) { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/Buffer;", arg0)); }
int Buffer::limit() { return int(*classes[className]->invokeMethod<int>(this->object, "limit", "()I")); }
int Buffer::remaining() { return int(*classes[className]->invokeMethod<int>(this->object, "remaining", "()I")); }
bool Buffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool Buffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
Object Buffer::array() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "array", "()Ljava/lang/Object;")); }
int Buffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
int Buffer::capacity() { return int(*classes[className]->invokeMethod<int>(this->object, "capacity", "()I")); }
Buffer Buffer::mark() { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/Buffer;")); }
Buffer Buffer::reset() { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/Buffer;")); }
IllegalArgumentException Buffer::createCapacityException(int arg0) { return IllegalArgumentException(*classes[className]->invokeStaticMethod<jobject>("createCapacityException", "(I)Ljava/lang/IllegalArgumentException;", arg0)); }
IllegalArgumentException Buffer::createPositionException(int arg0) { return IllegalArgumentException(*classes[className]->invokeMethod<jobject>(this->object, "createPositionException", "(I)Ljava/lang/IllegalArgumentException;", arg0)); }
IllegalArgumentException Buffer::createLimitException(int arg0) { return IllegalArgumentException(*classes[className]->invokeMethod<jobject>(this->object, "createLimitException", "(I)Ljava/lang/IllegalArgumentException;", arg0)); }
ScopedMemoryAccess_Scope Buffer::scope() { return ScopedMemoryAccess_Scope(*classes[className]->invokeMethod<jobject>(this->object, "scope", "()Ljdk/internal/misc/ScopedMemoryAccess$Scope;")); }
IllegalArgumentException Buffer::createSameBufferException() { return IllegalArgumentException(*classes[className]->invokeStaticMethod<jobject>("createSameBufferException", "()Ljava/lang/IllegalArgumentException;")); }
Buffer Buffer::flip() { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/Buffer;")); }
Buffer Buffer::rewind() { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/Buffer;")); }
bool Buffer::hasRemaining() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasRemaining", "()Z")); }
bool Buffer::isReadOnly() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReadOnly", "()Z")); }
Buffer Buffer::slice(int arg0, int arg1) { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/Buffer;", arg0, arg1)); }
Buffer Buffer::slice() { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/Buffer;")); }
Buffer Buffer::duplicate() { return Buffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/Buffer;")); }
int Buffer::nextGetIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "nextGetIndex", "()I")); }
int Buffer::nextGetIndex(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "nextGetIndex", "(I)I", arg0)); }
int Buffer::nextPutIndex(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "nextPutIndex", "(I)I", arg0)); }
int Buffer::nextPutIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "nextPutIndex", "()I")); }
int Buffer::markValue() { return int(*classes[className]->invokeMethod<int>(this->object, "markValue", "()I")); }
void Buffer::discardMark() { (classes[className]->invokeMethod<void>(this->object, "discardMark", "()V")); }
void Buffer::checkScope() { (classes[className]->invokeMethod<void>(this->object, "checkScope", "()V")); }





ShortBuffer ShortBuffer::allocate(int arg0) { return ShortBuffer(*classes[className]->invokeStaticMethod<jobject>("allocate", "(I)Ljava/nio/ShortBuffer;", arg0)); }
ShortBuffer ShortBuffer::getArray(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getArray", "(I[SII)Ljava/nio/ShortBuffer;", arg0, arg1, arg2, arg3)); }
void ShortBuffer::putBuffer(int arg0, ShortBuffer arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBuffer", "(ILjava/nio/ShortBuffer;II)V", arg0, arg1, arg2, arg3)); }
ShortBuffer ShortBuffer::putArray(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putArray", "(I[SII)Ljava/nio/ShortBuffer;", arg0, arg1, arg2, arg3)); }
ShortBuffer ShortBuffer::asReadOnlyBuffer() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava/nio/ShortBuffer;")); }
ShortBuffer ShortBuffer::compact() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "compact", "()Ljava/nio/ShortBuffer;")); }
int ShortBuffer::mismatch(ShortBuffer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "mismatch", "(Ljava/nio/ShortBuffer;)I", arg0)); }
Object ShortBuffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
ShortBuffer ShortBuffer::get(arr_S arg0, int arg1, int arg2) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([SII)Ljava/nio/ShortBuffer;", arg0, arg1, arg2)); }
ShortBuffer ShortBuffer::get(arr_S arg0) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([S)Ljava/nio/ShortBuffer;", arg0)); }
ShortBuffer ShortBuffer::get(int arg0, arr_S arg1) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[S)Ljava/nio/ShortBuffer;", arg0, arg1)); }
short ShortBuffer::get() { return short(*classes[className]->invokeMethod<short>(this->object, "get", "()S")); }
ShortBuffer ShortBuffer::get(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[SII)Ljava/nio/ShortBuffer;", arg0, arg1, arg2, arg3)); }
short ShortBuffer::get(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "get", "(I)S", arg0)); }
ShortBuffer ShortBuffer::put(arr_S arg0) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([S)Ljava/nio/ShortBuffer;", arg0)); }
ShortBuffer ShortBuffer::put(arr_S arg0, int arg1, int arg2) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([SII)Ljava/nio/ShortBuffer;", arg0, arg1, arg2)); }
ShortBuffer ShortBuffer::put(int arg0, arr_S arg1) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[S)Ljava/nio/ShortBuffer;", arg0, arg1)); }
ShortBuffer ShortBuffer::put(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[SII)Ljava/nio/ShortBuffer;", arg0, arg1, arg2, arg3)); }
ShortBuffer ShortBuffer::put(short arg0) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(S)Ljava/nio/ShortBuffer;", arg0)); }
ShortBuffer ShortBuffer::put(ShortBuffer arg0) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/nio/ShortBuffer;)Ljava/nio/ShortBuffer;", arg0)); }
ShortBuffer ShortBuffer::put(int arg0, ShortBuffer arg1, int arg2, int arg3) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ILjava/nio/ShortBuffer;II)Ljava/nio/ShortBuffer;", arg0, arg1, arg2, arg3)); }
ShortBuffer ShortBuffer::put(int arg0, short arg1) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(IS)Ljava/nio/ShortBuffer;", arg0, arg1)); }
bool ShortBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ShortBuffer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ShortBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int ShortBuffer::compare(short arg0, short arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(SS)I", arg0, arg1)); }
ShortBuffer ShortBuffer::clear() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/ShortBuffer;")); }
ShortBuffer ShortBuffer::wrap(arr_S arg0) { return ShortBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([S)Ljava/nio/ShortBuffer;", arg0)); }
ShortBuffer ShortBuffer::wrap(arr_S arg0, int arg1, int arg2) { return ShortBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([SII)Ljava/nio/ShortBuffer;", arg0, arg1, arg2)); }
ShortBuffer ShortBuffer::position(int arg0) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/ShortBuffer;", arg0)); }
ShortBuffer ShortBuffer::limit(int arg0) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/ShortBuffer;", arg0)); }
bool ShortBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool ShortBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int ShortBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
ShortBuffer ShortBuffer::mark() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/ShortBuffer;")); }
ShortBuffer ShortBuffer::reset() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/ShortBuffer;")); }
ShortBuffer ShortBuffer::flip() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/ShortBuffer;")); }
ShortBuffer ShortBuffer::rewind() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/ShortBuffer;")); }
ShortBuffer ShortBuffer::slice() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/ShortBuffer;")); }
ShortBuffer ShortBuffer::slice(int arg0, int arg1) { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/ShortBuffer;", arg0, arg1)); }
ShortBuffer ShortBuffer::duplicate() { return ShortBuffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/ShortBuffer;")); }
ByteOrder ShortBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }


IntBuffer IntBuffer::allocate(int arg0) { return IntBuffer(*classes[className]->invokeStaticMethod<jobject>("allocate", "(I)Ljava/nio/IntBuffer;", arg0)); }
IntBuffer IntBuffer::getArray(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getArray", "(I[III)Ljava/nio/IntBuffer;", arg0, arg1, arg2, arg3)); }
void IntBuffer::putBuffer(int arg0, IntBuffer arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBuffer", "(ILjava/nio/IntBuffer;II)V", arg0, arg1, arg2, arg3)); }
IntBuffer IntBuffer::putArray(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putArray", "(I[III)Ljava/nio/IntBuffer;", arg0, arg1, arg2, arg3)); }
IntBuffer IntBuffer::asReadOnlyBuffer() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava/nio/IntBuffer;")); }
IntBuffer IntBuffer::compact() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "compact", "()Ljava/nio/IntBuffer;")); }
int IntBuffer::mismatch(IntBuffer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "mismatch", "(Ljava/nio/IntBuffer;)I", arg0)); }
Object IntBuffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
IntBuffer IntBuffer::get(arr_I arg0, int arg1, int arg2) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([III)Ljava/nio/IntBuffer;", arg0, arg1, arg2)); }
IntBuffer IntBuffer::get(arr_I arg0) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([I)Ljava/nio/IntBuffer;", arg0)); }
IntBuffer IntBuffer::get(int arg0, arr_I arg1) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[I)Ljava/nio/IntBuffer;", arg0, arg1)); }
int IntBuffer::get() { return int(*classes[className]->invokeMethod<int>(this->object, "get", "()I")); }
IntBuffer IntBuffer::get(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[III)Ljava/nio/IntBuffer;", arg0, arg1, arg2, arg3)); }
int IntBuffer::get(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "get", "(I)I", arg0)); }
IntBuffer IntBuffer::put(arr_I arg0) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([I)Ljava/nio/IntBuffer;", arg0)); }
IntBuffer IntBuffer::put(arr_I arg0, int arg1, int arg2) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([III)Ljava/nio/IntBuffer;", arg0, arg1, arg2)); }
IntBuffer IntBuffer::put(int arg0, arr_I arg1) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[I)Ljava/nio/IntBuffer;", arg0, arg1)); }
IntBuffer IntBuffer::put(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[III)Ljava/nio/IntBuffer;", arg0, arg1, arg2, arg3)); }
IntBuffer IntBuffer::put(int arg0) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I)Ljava/nio/IntBuffer;", arg0)); }
IntBuffer IntBuffer::put(IntBuffer arg0) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/nio/IntBuffer;)Ljava/nio/IntBuffer;", arg0)); }
IntBuffer IntBuffer::put(int arg0, IntBuffer arg1, int arg2, int arg3) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ILjava/nio/IntBuffer;II)Ljava/nio/IntBuffer;", arg0, arg1, arg2, arg3)); }
IntBuffer IntBuffer::put(int arg0, int arg1) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(II)Ljava/nio/IntBuffer;", arg0, arg1)); }
bool IntBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String IntBuffer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int IntBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int IntBuffer::compare(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(II)I", arg0, arg1)); }
IntBuffer IntBuffer::clear() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/IntBuffer;")); }
IntBuffer IntBuffer::wrap(arr_I arg0) { return IntBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([I)Ljava/nio/IntBuffer;", arg0)); }
IntBuffer IntBuffer::wrap(arr_I arg0, int arg1, int arg2) { return IntBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([III)Ljava/nio/IntBuffer;", arg0, arg1, arg2)); }
IntBuffer IntBuffer::position(int arg0) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/IntBuffer;", arg0)); }
IntBuffer IntBuffer::limit(int arg0) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/IntBuffer;", arg0)); }
bool IntBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool IntBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int IntBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
IntBuffer IntBuffer::mark() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/IntBuffer;")); }
IntBuffer IntBuffer::reset() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/IntBuffer;")); }
IntBuffer IntBuffer::flip() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/IntBuffer;")); }
IntBuffer IntBuffer::rewind() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/IntBuffer;")); }
IntBuffer IntBuffer::slice() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/IntBuffer;")); }
IntBuffer IntBuffer::slice(int arg0, int arg1) { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/IntBuffer;", arg0, arg1)); }
IntBuffer IntBuffer::duplicate() { return IntBuffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/IntBuffer;")); }
ByteOrder IntBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }


LongBuffer LongBuffer::allocate(int arg0) { return LongBuffer(*classes[className]->invokeStaticMethod<jobject>("allocate", "(I)Ljava/nio/LongBuffer;", arg0)); }
LongBuffer LongBuffer::getArray(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getArray", "(I[JII)Ljava/nio/LongBuffer;", arg0, arg1, arg2, arg3)); }
void LongBuffer::putBuffer(int arg0, LongBuffer arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBuffer", "(ILjava/nio/LongBuffer;II)V", arg0, arg1, arg2, arg3)); }
LongBuffer LongBuffer::putArray(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putArray", "(I[JII)Ljava/nio/LongBuffer;", arg0, arg1, arg2, arg3)); }
LongBuffer LongBuffer::asReadOnlyBuffer() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava/nio/LongBuffer;")); }
LongBuffer LongBuffer::compact() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "compact", "()Ljava/nio/LongBuffer;")); }
int LongBuffer::mismatch(LongBuffer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "mismatch", "(Ljava/nio/LongBuffer;)I", arg0)); }
Object LongBuffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
LongBuffer LongBuffer::get(arr_J arg0, int arg1, int arg2) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([JII)Ljava/nio/LongBuffer;", arg0, arg1, arg2)); }
LongBuffer LongBuffer::get(arr_J arg0) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([J)Ljava/nio/LongBuffer;", arg0)); }
LongBuffer LongBuffer::get(int arg0, arr_J arg1) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[J)Ljava/nio/LongBuffer;", arg0, arg1)); }
long LongBuffer::get() { return long(*classes[className]->invokeMethod<long>(this->object, "get", "()J")); }
LongBuffer LongBuffer::get(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[JII)Ljava/nio/LongBuffer;", arg0, arg1, arg2, arg3)); }
long LongBuffer::get(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "get", "(I)J", arg0)); }
LongBuffer LongBuffer::put(arr_J arg0) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([J)Ljava/nio/LongBuffer;", arg0)); }
LongBuffer LongBuffer::put(arr_J arg0, int arg1, int arg2) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([JII)Ljava/nio/LongBuffer;", arg0, arg1, arg2)); }
LongBuffer LongBuffer::put(int arg0, arr_J arg1) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[J)Ljava/nio/LongBuffer;", arg0, arg1)); }
LongBuffer LongBuffer::put(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[JII)Ljava/nio/LongBuffer;", arg0, arg1, arg2, arg3)); }
LongBuffer LongBuffer::put(long arg0) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(J)Ljava/nio/LongBuffer;", arg0)); }
LongBuffer LongBuffer::put(LongBuffer arg0) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/nio/LongBuffer;)Ljava/nio/LongBuffer;", arg0)); }
LongBuffer LongBuffer::put(int arg0, LongBuffer arg1, int arg2, int arg3) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ILjava/nio/LongBuffer;II)Ljava/nio/LongBuffer;", arg0, arg1, arg2, arg3)); }
LongBuffer LongBuffer::put(int arg0, long arg1) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(IJ)Ljava/nio/LongBuffer;", arg0, arg1)); }
bool LongBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String LongBuffer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LongBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int LongBuffer::compare(long arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(JJ)I", arg0, arg1)); }
LongBuffer LongBuffer::clear() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/LongBuffer;")); }
LongBuffer LongBuffer::wrap(arr_J arg0) { return LongBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([J)Ljava/nio/LongBuffer;", arg0)); }
LongBuffer LongBuffer::wrap(arr_J arg0, int arg1, int arg2) { return LongBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([JII)Ljava/nio/LongBuffer;", arg0, arg1, arg2)); }
LongBuffer LongBuffer::position(int arg0) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/LongBuffer;", arg0)); }
LongBuffer LongBuffer::limit(int arg0) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/LongBuffer;", arg0)); }
bool LongBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool LongBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int LongBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
LongBuffer LongBuffer::mark() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/LongBuffer;")); }
LongBuffer LongBuffer::reset() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/LongBuffer;")); }
LongBuffer LongBuffer::flip() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/LongBuffer;")); }
LongBuffer LongBuffer::rewind() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/LongBuffer;")); }
LongBuffer LongBuffer::slice() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/LongBuffer;")); }
LongBuffer LongBuffer::slice(int arg0, int arg1) { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/LongBuffer;", arg0, arg1)); }
LongBuffer LongBuffer::duplicate() { return LongBuffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/LongBuffer;")); }
ByteOrder LongBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }


FloatBuffer FloatBuffer::allocate(int arg0) { return FloatBuffer(*classes[className]->invokeStaticMethod<jobject>("allocate", "(I)Ljava/nio/FloatBuffer;", arg0)); }
FloatBuffer FloatBuffer::getArray(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getArray", "(I[FII)Ljava/nio/FloatBuffer;", arg0, arg1, arg2, arg3)); }
void FloatBuffer::putBuffer(int arg0, FloatBuffer arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBuffer", "(ILjava/nio/FloatBuffer;II)V", arg0, arg1, arg2, arg3)); }
FloatBuffer FloatBuffer::putArray(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putArray", "(I[FII)Ljava/nio/FloatBuffer;", arg0, arg1, arg2, arg3)); }
FloatBuffer FloatBuffer::asReadOnlyBuffer() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava/nio/FloatBuffer;")); }
FloatBuffer FloatBuffer::compact() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "compact", "()Ljava/nio/FloatBuffer;")); }
int FloatBuffer::mismatch(FloatBuffer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "mismatch", "(Ljava/nio/FloatBuffer;)I", arg0)); }
Object FloatBuffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
FloatBuffer FloatBuffer::get(arr_F arg0, int arg1, int arg2) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([FII)Ljava/nio/FloatBuffer;", arg0, arg1, arg2)); }
FloatBuffer FloatBuffer::get(arr_F arg0) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([F)Ljava/nio/FloatBuffer;", arg0)); }
FloatBuffer FloatBuffer::get(int arg0, arr_F arg1) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[F)Ljava/nio/FloatBuffer;", arg0, arg1)); }
float FloatBuffer::get() { return float(*classes[className]->invokeMethod<float>(this->object, "get", "()F")); }
FloatBuffer FloatBuffer::get(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[FII)Ljava/nio/FloatBuffer;", arg0, arg1, arg2, arg3)); }
float FloatBuffer::get(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "get", "(I)F", arg0)); }
FloatBuffer FloatBuffer::put(arr_F arg0) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([F)Ljava/nio/FloatBuffer;", arg0)); }
FloatBuffer FloatBuffer::put(arr_F arg0, int arg1, int arg2) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([FII)Ljava/nio/FloatBuffer;", arg0, arg1, arg2)); }
FloatBuffer FloatBuffer::put(int arg0, arr_F arg1) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[F)Ljava/nio/FloatBuffer;", arg0, arg1)); }
FloatBuffer FloatBuffer::put(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[FII)Ljava/nio/FloatBuffer;", arg0, arg1, arg2, arg3)); }
FloatBuffer FloatBuffer::put(float arg0) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(F)Ljava/nio/FloatBuffer;", arg0)); }
FloatBuffer FloatBuffer::put(FloatBuffer arg0) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/nio/FloatBuffer;)Ljava/nio/FloatBuffer;", arg0)); }
FloatBuffer FloatBuffer::put(int arg0, FloatBuffer arg1, int arg2, int arg3) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ILjava/nio/FloatBuffer;II)Ljava/nio/FloatBuffer;", arg0, arg1, arg2, arg3)); }
FloatBuffer FloatBuffer::put(int arg0, float arg1) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(IF)Ljava/nio/FloatBuffer;", arg0, arg1)); }
bool FloatBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String FloatBuffer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int FloatBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int FloatBuffer::compare(float arg0, float arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(FF)I", arg0, arg1)); }
FloatBuffer FloatBuffer::clear() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/FloatBuffer;")); }
FloatBuffer FloatBuffer::wrap(arr_F arg0) { return FloatBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([F)Ljava/nio/FloatBuffer;", arg0)); }
FloatBuffer FloatBuffer::wrap(arr_F arg0, int arg1, int arg2) { return FloatBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([FII)Ljava/nio/FloatBuffer;", arg0, arg1, arg2)); }
FloatBuffer FloatBuffer::position(int arg0) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/FloatBuffer;", arg0)); }
FloatBuffer FloatBuffer::limit(int arg0) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/FloatBuffer;", arg0)); }
bool FloatBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool FloatBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int FloatBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
FloatBuffer FloatBuffer::mark() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/FloatBuffer;")); }
FloatBuffer FloatBuffer::reset() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/FloatBuffer;")); }
FloatBuffer FloatBuffer::flip() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/FloatBuffer;")); }
FloatBuffer FloatBuffer::rewind() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/FloatBuffer;")); }
FloatBuffer FloatBuffer::slice() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/FloatBuffer;")); }
FloatBuffer FloatBuffer::slice(int arg0, int arg1) { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/FloatBuffer;", arg0, arg1)); }
FloatBuffer FloatBuffer::duplicate() { return FloatBuffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/FloatBuffer;")); }
ByteOrder FloatBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }


DoubleBuffer DoubleBuffer::allocate(int arg0) { return DoubleBuffer(*classes[className]->invokeStaticMethod<jobject>("allocate", "(I)Ljava/nio/DoubleBuffer;", arg0)); }
DoubleBuffer DoubleBuffer::getArray(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getArray", "(I[DII)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2, arg3)); }
void DoubleBuffer::putBuffer(int arg0, DoubleBuffer arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBuffer", "(ILjava/nio/DoubleBuffer;II)V", arg0, arg1, arg2, arg3)); }
DoubleBuffer DoubleBuffer::putArray(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "putArray", "(I[DII)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2, arg3)); }
DoubleBuffer DoubleBuffer::asReadOnlyBuffer() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava/nio/DoubleBuffer;")); }
DoubleBuffer DoubleBuffer::compact() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "compact", "()Ljava/nio/DoubleBuffer;")); }
int DoubleBuffer::mismatch(DoubleBuffer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "mismatch", "(Ljava/nio/DoubleBuffer;)I", arg0)); }
Object DoubleBuffer::base() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "base", "()Ljava/lang/Object;")); }
DoubleBuffer DoubleBuffer::get(arr_D arg0, int arg1, int arg2) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([DII)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2)); }
DoubleBuffer DoubleBuffer::get(arr_D arg0) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "([D)Ljava/nio/DoubleBuffer;", arg0)); }
DoubleBuffer DoubleBuffer::get(int arg0, arr_D arg1) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[D)Ljava/nio/DoubleBuffer;", arg0, arg1)); }
double DoubleBuffer::get() { return double(*classes[className]->invokeMethod<double>(this->object, "get", "()D")); }
DoubleBuffer DoubleBuffer::get(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I[DII)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2, arg3)); }
double DoubleBuffer::get(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "get", "(I)D", arg0)); }
DoubleBuffer DoubleBuffer::put(arr_D arg0) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([D)Ljava/nio/DoubleBuffer;", arg0)); }
DoubleBuffer DoubleBuffer::put(arr_D arg0, int arg1, int arg2) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "([DII)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2)); }
DoubleBuffer DoubleBuffer::put(int arg0, arr_D arg1) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[D)Ljava/nio/DoubleBuffer;", arg0, arg1)); }
DoubleBuffer DoubleBuffer::put(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(I[DII)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2, arg3)); }
DoubleBuffer DoubleBuffer::put(double arg0) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(D)Ljava/nio/DoubleBuffer;", arg0)); }
DoubleBuffer DoubleBuffer::put(DoubleBuffer arg0) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/nio/DoubleBuffer;)Ljava/nio/DoubleBuffer;", arg0)); }
DoubleBuffer DoubleBuffer::put(int arg0, DoubleBuffer arg1, int arg2, int arg3) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ILjava/nio/DoubleBuffer;II)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2, arg3)); }
DoubleBuffer DoubleBuffer::put(int arg0, double arg1) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "put", "(ID)Ljava/nio/DoubleBuffer;", arg0, arg1)); }
bool DoubleBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String DoubleBuffer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int DoubleBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int DoubleBuffer::compare(double arg0, double arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(DD)I", arg0, arg1)); }
DoubleBuffer DoubleBuffer::clear() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Ljava/nio/DoubleBuffer;")); }
DoubleBuffer DoubleBuffer::wrap(arr_D arg0) { return DoubleBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([D)Ljava/nio/DoubleBuffer;", arg0)); }
DoubleBuffer DoubleBuffer::wrap(arr_D arg0, int arg1, int arg2) { return DoubleBuffer(*classes[className]->invokeStaticMethod<jobject>("wrap", "([DII)Ljava/nio/DoubleBuffer;", arg0, arg1, arg2)); }
DoubleBuffer DoubleBuffer::position(int arg0) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "position", "(I)Ljava/nio/DoubleBuffer;", arg0)); }
DoubleBuffer DoubleBuffer::limit(int arg0) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "limit", "(I)Ljava/nio/DoubleBuffer;", arg0)); }
bool DoubleBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool DoubleBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int DoubleBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
DoubleBuffer DoubleBuffer::mark() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "mark", "()Ljava/nio/DoubleBuffer;")); }
DoubleBuffer DoubleBuffer::reset() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/DoubleBuffer;")); }
DoubleBuffer DoubleBuffer::flip() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "flip", "()Ljava/nio/DoubleBuffer;")); }
DoubleBuffer DoubleBuffer::rewind() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "rewind", "()Ljava/nio/DoubleBuffer;")); }
DoubleBuffer DoubleBuffer::slice() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Ljava/nio/DoubleBuffer;")); }
DoubleBuffer DoubleBuffer::slice(int arg0, int arg1) { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Ljava/nio/DoubleBuffer;", arg0, arg1)); }
DoubleBuffer DoubleBuffer::duplicate() { return DoubleBuffer(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Ljava/nio/DoubleBuffer;")); }
ByteOrder DoubleBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }



ModuleLayer_Controller ModuleLayer::defineModulesWithOneLoader(Configuration arg0, List arg1, ClassLoader arg2) { return ModuleLayer_Controller(*classes[className]->invokeStaticMethod<jobject>("defineModulesWithOneLoader", "(Ljava/lang/module/Configuration;Ljava/util/List;Ljava/lang/ClassLoader;)Ljava/lang/ModuleLayer$Controller;", arg0, arg1, arg2)); }
ModuleLayer ModuleLayer::defineModulesWithOneLoader(Configuration arg0, ClassLoader arg1) { return ModuleLayer(*classes[className]->invokeMethod<jobject>(this->object, "defineModulesWithOneLoader", "(Ljava/lang/module/Configuration;Ljava/lang/ClassLoader;)Ljava/lang/ModuleLayer;", arg0, arg1)); }
ModuleLayer_Controller ModuleLayer::defineModulesWithManyLoaders(Configuration arg0, List arg1, ClassLoader arg2) { return ModuleLayer_Controller(*classes[className]->invokeStaticMethod<jobject>("defineModulesWithManyLoaders", "(Ljava/lang/module/Configuration;Ljava/util/List;Ljava/lang/ClassLoader;)Ljava/lang/ModuleLayer$Controller;", arg0, arg1, arg2)); }
ModuleLayer ModuleLayer::defineModulesWithManyLoaders(Configuration arg0, ClassLoader arg1) { return ModuleLayer(*classes[className]->invokeMethod<jobject>(this->object, "defineModulesWithManyLoaders", "(Ljava/lang/module/Configuration;Ljava/lang/ClassLoader;)Ljava/lang/ModuleLayer;", arg0, arg1)); }
void ModuleLayer::checkConfiguration(Configuration arg0, List arg1) { (classes[className]->invokeStaticMethod<void>("checkConfiguration", "(Ljava/lang/module/Configuration;Ljava/util/List;)V", arg0, arg1)); }
void ModuleLayer::checkCreateClassLoaderPermission() { (classes[className]->invokeStaticMethod<void>("checkCreateClassLoaderPermission", "()V")); }
void ModuleLayer::checkGetClassLoaderPermission() { (classes[className]->invokeStaticMethod<void>("checkGetClassLoaderPermission", "()V")); }
void ModuleLayer::checkForDuplicatePkgs(Configuration arg0, Function arg1) { (classes[className]->invokeStaticMethod<void>("checkForDuplicatePkgs", "(Ljava/lang/module/Configuration;Ljava/util/function/Function;)V", arg0, arg1)); }
ClassLoader ModuleLayer::findLoader(String arg0) { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "findLoader", "(Ljava/lang/String;)Ljava/lang/ClassLoader;", arg0)); }
String ModuleLayer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
ModuleLayer ModuleLayer::empty() { return ModuleLayer(*classes[className]->invokeStaticMethod<jobject>("empty", "()Ljava/lang/ModuleLayer;")); }
ModuleLayer ModuleLayer::boot() { return ModuleLayer(*classes[className]->invokeStaticMethod<jobject>("boot", "()Ljava/lang/ModuleLayer;")); }
Set ModuleLayer::modules() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "modules", "()Ljava/util/Set;")); }
Configuration ModuleLayer::configuration() { return Configuration(*classes[className]->invokeMethod<jobject>(this->object, "configuration", "()Ljava/lang/module/Configuration;")); }
List ModuleLayer::parents() { return List(*classes[className]->invokeMethod<jobject>(this->object, "parents", "()Ljava/util/List;")); }
Optional ModuleLayer::findModule(String arg0) { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "findModule", "(Ljava/lang/String;)Ljava/util/Optional;", arg0)); }
ServicesCatalog ModuleLayer::getServicesCatalog() { return ServicesCatalog(*classes[className]->invokeMethod<jobject>(this->object, "getServicesCatalog", "()Ljdk/internal/module/ServicesCatalog;")); }
void ModuleLayer::bindToLoader(ClassLoader arg0) { (classes[className]->invokeMethod<void>(this->object, "bindToLoader", "(Ljava/lang/ClassLoader;)V", arg0)); }
Stream ModuleLayer::layers() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "layers", "()Ljava/util/stream/Stream;")); }
Stream ModuleLayer::layers(ClassLoader arg0) { return Stream(*classes[className]->invokeStaticMethod<jobject>("layers", "(Ljava/lang/ClassLoader;)Ljava/util/stream/Stream;", arg0)); }
ModuleLayer ModuleLayer::defineModules(Configuration arg0, Function arg1) { return ModuleLayer(*classes[className]->invokeMethod<jobject>(this->object, "defineModules", "(Ljava/lang/module/Configuration;Ljava/util/function/Function;)Ljava/lang/ModuleLayer;", arg0, arg1)); }
ModuleLayer_Controller ModuleLayer::defineModules(Configuration arg0, List arg1, Function arg2) { return ModuleLayer_Controller(*classes[className]->invokeStaticMethod<jobject>("defineModules", "(Ljava/lang/module/Configuration;Ljava/util/List;Ljava/util/function/Function;)Ljava/lang/ModuleLayer$Controller;", arg0, arg1, arg2)); }
LayerInstantiationException ModuleLayer::fail(String arg0, Object_interface arg1) { return LayerInstantiationException(*classes[className]->invokeStaticMethod<jobject>("fail", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/LayerInstantiationException;", arg0, arg1)); }

Stream Configuration::configurations() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "configurations", "()Ljava/util/stream/Stream;")); }
Set Configuration::descriptors() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "descriptors", "()Ljava/util/Set;")); }
String Configuration::targetPlatform() { return String(*classes[className]->invokeMethod<jobject>(this->object, "targetPlatform", "()Ljava/lang/String;")); }
String Configuration::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Configuration Configuration::empty() { return Configuration(*classes[className]->invokeStaticMethod<jobject>("empty", "()Ljava/lang/module/Configuration;")); }
Configuration Configuration::resolve(ModuleFinder arg0, List arg1, ModuleFinder arg2, Collection arg3) { return Configuration(*classes[className]->invokeStaticMethod<jobject>("resolve", "(Ljava/lang/module/ModuleFinder;Ljava/util/List;Ljava/lang/module/ModuleFinder;Ljava/util/Collection;)Ljava/lang/module/Configuration;", arg0, arg1, arg2, arg3)); }
Configuration Configuration::resolve(ModuleFinder arg0, ModuleFinder arg1, Collection arg2) { return Configuration(*classes[className]->invokeMethod<jobject>(this->object, "resolve", "(Ljava/lang/module/ModuleFinder;Ljava/lang/module/ModuleFinder;Ljava/util/Collection;)Ljava/lang/module/Configuration;", arg0, arg1, arg2)); }
Set Configuration::modules() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "modules", "()Ljava/util/Set;")); }
Set Configuration::reads(ResolvedModule arg0) { return Set(*classes[className]->invokeMethod<jobject>(this->object, "reads", "(Ljava/lang/module/ResolvedModule;)Ljava/util/Set;", arg0)); }
List Configuration::parents() { return List(*classes[className]->invokeMethod<jobject>(this->object, "parents", "()Ljava/util/List;")); }
Optional Configuration::findModule(String arg0) { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "findModule", "(Ljava/lang/String;)Ljava/util/Optional;", arg0)); }
Configuration Configuration::resolveAndBind(ModuleFinder arg0, List arg1, ModuleFinder arg2, Collection arg3) { return Configuration(*classes[className]->invokeStaticMethod<jobject>("resolveAndBind", "(Ljava/lang/module/ModuleFinder;Ljava/util/List;Ljava/lang/module/ModuleFinder;Ljava/util/Collection;)Ljava/lang/module/Configuration;", arg0, arg1, arg2, arg3)); }
Configuration Configuration::resolveAndBind(ModuleFinder arg0, ModuleFinder arg1, Collection arg2) { return Configuration(*classes[className]->invokeMethod<jobject>(this->object, "resolveAndBind", "(Ljava/lang/module/ModuleFinder;Ljava/lang/module/ModuleFinder;Ljava/util/Collection;)Ljava/lang/module/Configuration;", arg0, arg1, arg2)); }
Configuration Configuration::resolveAndBind(ModuleFinder arg0, Collection arg1, PrintStream arg2) { return Configuration(*classes[className]->invokeStaticMethod<jobject>("resolveAndBind", "(Ljava/lang/module/ModuleFinder;Ljava/util/Collection;Ljava/io/PrintStream;)Ljava/lang/module/Configuration;", arg0, arg1, arg2)); }



String ResolvedModule::name() { return String(*classes[className]->invokeMethod<jobject>(this->object, "name", "()Ljava/lang/String;")); }
bool ResolvedModule::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ResolvedModule::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ResolvedModule::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
ModuleDescriptor ResolvedModule::descriptor() { return ModuleDescriptor(*classes[className]->invokeMethod<jobject>(this->object, "descriptor", "()Ljava/lang/module/ModuleDescriptor;")); }
Set ResolvedModule::reads() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "reads", "()Ljava/util/Set;")); }
ModuleReference ResolvedModule::reference() { return ModuleReference(*classes[className]->invokeMethod<jobject>(this->object, "reference", "()Ljava/lang/module/ModuleReference;")); }
Configuration ResolvedModule::configuration() { return Configuration(*classes[className]->invokeMethod<jobject>(this->object, "configuration", "()Ljava/lang/module/Configuration;")); }

ModuleDescriptor ModuleReference::descriptor() { return ModuleDescriptor(*classes[className]->invokeMethod<jobject>(this->object, "descriptor", "()Ljava/lang/module/ModuleDescriptor;")); }
Optional ModuleReference::location() { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "location", "()Ljava/util/Optional;")); }
ModuleReader ModuleReference::open() { return ModuleReader(*classes[className]->invokeMethod<jobject>(this->object, "open", "()Ljava/lang/module/ModuleReader;")); }


void ModuleLayer_Controller::ensureInLayer(Module arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureInLayer", "(Ljava/lang/Module;)V", arg0)); }
ModuleLayer_Controller ModuleLayer_Controller::addReads(Module arg0, Module arg1) { return ModuleLayer_Controller(*classes[className]->invokeMethod<jobject>(this->object, "addReads", "(Ljava/lang/Module;Ljava/lang/Module;)Ljava/lang/ModuleLayer$Controller;", arg0, arg1)); }
ModuleLayer_Controller ModuleLayer_Controller::addExports(Module arg0, String arg1, Module arg2) { return ModuleLayer_Controller(*classes[className]->invokeMethod<jobject>(this->object, "addExports", "(Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/ModuleLayer$Controller;", arg0, arg1, arg2)); }
ModuleLayer_Controller ModuleLayer_Controller::addOpens(Module arg0, String arg1, Module arg2) { return ModuleLayer_Controller(*classes[className]->invokeMethod<jobject>(this->object, "addOpens", "(Ljava/lang/Module;Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/ModuleLayer$Controller;", arg0, arg1, arg2)); }
ModuleLayer ModuleLayer_Controller::layer() { return ModuleLayer(*classes[className]->invokeMethod<jobject>(this->object, "layer", "()Ljava/lang/ModuleLayer;")); }

void ServicesCatalog::addProviders(String arg0, ServicesCatalog_ServiceProvider_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "addProviders", "(Ljava/lang/String;[Ljdk/internal/module/ServicesCatalog$ServiceProvider;)V", arg0, arg1)); }
List ServicesCatalog::findServices(String arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "findServices", "(Ljava/lang/String;)Ljava/util/List;", arg0)); }
ServicesCatalog ServicesCatalog::getServicesCatalogOrNull(ClassLoader arg0) { return ServicesCatalog(*classes[className]->invokeStaticMethod<jobject>("getServicesCatalogOrNull", "(Ljava/lang/ClassLoader;)Ljdk/internal/module/ServicesCatalog;", arg0)); }
void ServicesCatalog::register_(Module arg0) { (classes[className]->invokeMethod<void>(this->object, "register", "(Ljava/lang/Module;)V", arg0)); }
ServicesCatalog ServicesCatalog::getServicesCatalog(ClassLoader arg0) { return ServicesCatalog(*classes[className]->invokeStaticMethod<jobject>("getServicesCatalog", "(Ljava/lang/ClassLoader;)Ljdk/internal/module/ServicesCatalog;", arg0)); }
void ServicesCatalog::addProvider(Module arg0, Class arg1, Class arg2) { (classes[className]->invokeMethod<void>(this->object, "addProvider", "(Ljava/lang/Module;Ljava/lang/Class;Ljava/lang/Class;)V", arg0, arg1, arg2)); }
ServicesCatalog ServicesCatalog::create() { return ServicesCatalog(*classes[className]->invokeStaticMethod<jobject>("create", "()Ljdk/internal/module/ServicesCatalog;")); }
void ServicesCatalog::putServicesCatalog(ClassLoader arg0, ServicesCatalog arg1) { (classes[className]->invokeStaticMethod<void>("putServicesCatalog", "(Ljava/lang/ClassLoader;Ljdk/internal/module/ServicesCatalog;)V", arg0, arg1)); }



Class Package::getPackageInfo() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getPackageInfo", "()Ljava/lang/Class;")); }
String Package::getSpecificationTitle() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSpecificationTitle", "()Ljava/lang/String;")); }
String Package::getSpecificationVersion() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSpecificationVersion", "()Ljava/lang/String;")); }
String Package::getSpecificationVendor() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSpecificationVendor", "()Ljava/lang/String;")); }
String Package::getImplementationTitle() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getImplementationTitle", "()Ljava/lang/String;")); }
String Package::getImplementationVersion() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getImplementationVersion", "()Ljava/lang/String;")); }
String Package::getImplementationVendor() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getImplementationVendor", "()Ljava/lang/String;")); }
bool Package::isCompatibleWith(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCompatibleWith", "(Ljava/lang/String;)Z", arg0)); }
String Package::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
String Package::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Package::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Package Package::getPackage(String arg0) { return Package(*classes[className]->invokeStaticMethod<jobject>("getPackage", "(Ljava/lang/String;)Ljava/lang/Package;", arg0)); }
bool Package::isSealed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSealed", "()Z")); }
bool Package::isSealed(URL arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSealed", "(Ljava/net/URL;)Z", arg0)); }

bool URL::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String URL::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int URL::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String URL::toLowerCase(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toLowerCase", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
InputStream URL::openStream() { return InputStream(*classes[className]->invokeMethod<jobject>(this->object, "openStream", "()Ljava/io/InputStream;")); }
void URL::set(String arg0, String arg1, int arg2, String arg3, String arg4, String arg5, String arg6, String arg7) { (classes[className]->invokeMethod<void>(this->object, "set", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
void URL::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void URL::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
InetAddress URL::getHostAddress() { return InetAddress(*classes[className]->invokeMethod<jobject>(this->object, "getHostAddress", "()Ljava/net/InetAddress;")); }
Object URL::readResolve() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readResolve", "()Ljava/lang/Object;")); }
void URL::checkSpecifyHandler(SecurityManager arg0) { (classes[className]->invokeMethod<void>(this->object, "checkSpecifyHandler", "(Ljava/lang/SecurityManager;)V", arg0)); }
URLStreamHandler URL::getURLStreamHandler(String arg0) { return URLStreamHandler(*classes[className]->invokeStaticMethod<jobject>("getURLStreamHandler", "(Ljava/lang/String;)Ljava/net/URLStreamHandler;", arg0)); }
bool URL::isBuiltinStreamHandler(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBuiltinStreamHandler", "(Ljava/lang/String;)Z", arg0)); }
bool URL::isBuiltinStreamHandler(URLStreamHandler arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBuiltinStreamHandler", "(Ljava/net/URLStreamHandler;)Z", arg0)); }
bool URL::isValidProtocol(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isValidProtocol", "(Ljava/lang/String;)Z", arg0)); }
String URL::getHost() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHost", "()Ljava/lang/String;")); }
int URL::getPort() { return int(*classes[className]->invokeMethod<int>(this->object, "getPort", "()I")); }
int URL::getDefaultPort() { return int(*classes[className]->invokeMethod<int>(this->object, "getDefaultPort", "()I")); }
bool URL::sameFile(URL arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "sameFile", "(Ljava/net/URL;)Z", arg0)); }
String URL::toExternalForm() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toExternalForm", "()Ljava/lang/String;")); }
URLConnection URL::openConnection() { return URLConnection(*classes[className]->invokeMethod<jobject>(this->object, "openConnection", "()Ljava/net/URLConnection;")); }
URLConnection URL::openConnection(Proxy arg0) { return URLConnection(*classes[className]->invokeMethod<jobject>(this->object, "openConnection", "(Ljava/net/Proxy;)Ljava/net/URLConnection;", arg0)); }
Object URL::getContent() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getContent", "()Ljava/lang/Object;")); }
Object URL::getContent(Class_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getContent", "([Ljava/lang/Class;)Ljava/lang/Object;", arg0)); }
bool URL::isOverrideable(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isOverrideable", "(Ljava/lang/String;)Z", arg0)); }
URLStreamHandler URL::lookupViaProviders(String arg0) { return URLStreamHandler(*classes[className]->invokeStaticMethod<jobject>("lookupViaProviders", "(Ljava/lang/String;)Ljava/net/URLStreamHandler;", arg0)); }
URLStreamHandler URL::lookupViaProperty(String arg0) { return URLStreamHandler(*classes[className]->invokeStaticMethod<jobject>("lookupViaProperty", "(Ljava/lang/String;)Ljava/net/URLStreamHandler;", arg0)); }
String URL::getProtocol() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getProtocol", "()Ljava/lang/String;")); }
URL URL::fabricateNewURL() { return URL(*classes[className]->invokeMethod<jobject>(this->object, "fabricateNewURL", "()Ljava/net/URL;")); }
URL URL::setDeserializedFields(URLStreamHandler arg0) { return URL(*classes[className]->invokeMethod<jobject>(this->object, "setDeserializedFields", "(Ljava/net/URLStreamHandler;)Ljava/net/URL;", arg0)); }
String URL::getAuthority() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAuthority", "()Ljava/lang/String;")); }
String URL::getFile() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFile", "()Ljava/lang/String;")); }
String URL::getRef() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRef", "()Ljava/lang/String;")); }
void URL::resetState() { (classes[className]->invokeMethod<void>(this->object, "resetState", "()V")); }
void URL::setSerializedHashCode(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSerializedHashCode", "(I)V", arg0)); }
URL URL::fromURI(URI arg0) { return URL(*classes[className]->invokeStaticMethod<jobject>("fromURI", "(Ljava/net/URI;)Ljava/net/URL;", arg0)); }
String URL::getQuery() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getQuery", "()Ljava/lang/String;")); }
String URL::getPath() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPath", "()Ljava/lang/String;")); }
String URL::getUserInfo() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUserInfo", "()Ljava/lang/String;")); }
URI URL::toURI() { return URI(*classes[className]->invokeMethod<jobject>(this->object, "toURI", "()Ljava/net/URI;")); }
void URL::setURLStreamHandlerFactory(URLStreamHandlerFactory arg0) { (classes[className]->invokeStaticMethod<void>("setURLStreamHandlerFactory", "(Ljava/net/URLStreamHandlerFactory;)V", arg0)); }
Iterator URL::providers() { return Iterator(*classes[className]->invokeStaticMethod<jobject>("providers", "()Ljava/util/Iterator;")); }

void ObjectOutputStream::writeString(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "writeString", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void ObjectOutputStream::verifySubclass() { (classes[className]->invokeMethod<void>(this->object, "verifySubclass", "()V")); }
bool ObjectOutputStream::isCustomSubclass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCustomSubclass", "()Z")); }
void ObjectOutputStream::writeStreamHeader() { (classes[className]->invokeMethod<void>(this->object, "writeStreamHeader", "()V")); }
void ObjectOutputStream::writeObjectOverride(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObjectOverride", "(Ljava/lang/Object;)V", arg0)); }
void ObjectOutputStream::writeObject0(Object arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "writeObject0", "(Ljava/lang/Object;Z)V", arg0, arg1)); }
void ObjectOutputStream::writeFatalException(IOException arg0) { (classes[className]->invokeMethod<void>(this->object, "writeFatalException", "(Ljava/io/IOException;)V", arg0)); }
void ObjectOutputStream::defaultWriteFields(Object arg0, ObjectStreamClass arg1) { (classes[className]->invokeMethod<void>(this->object, "defaultWriteFields", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V", arg0, arg1)); }
void ObjectOutputStream::drain() { (classes[className]->invokeMethod<void>(this->object, "drain", "()V")); }
void ObjectOutputStream::writeNull() { (classes[className]->invokeMethod<void>(this->object, "writeNull", "()V")); }
void ObjectOutputStream::writeHandle(int arg0) { (classes[className]->invokeMethod<void>(this->object, "writeHandle", "(I)V", arg0)); }
void ObjectOutputStream::writeClass(Class arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "writeClass", "(Ljava/lang/Class;Z)V", arg0, arg1)); }
void ObjectOutputStream::writeClassDesc(ObjectStreamClass arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "writeClassDesc", "(Ljava/io/ObjectStreamClass;Z)V", arg0, arg1)); }
Object ObjectOutputStream::replaceObject(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "replaceObject", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
void ObjectOutputStream::writeArray(Object arg0, ObjectStreamClass arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "writeArray", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V", arg0, arg1, arg2)); }
void ObjectOutputStream::writeEnum(Enum arg0, ObjectStreamClass arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "writeEnum", "(Ljava/lang/Enum;Ljava/io/ObjectStreamClass;Z)V", arg0, arg1, arg2)); }
void ObjectOutputStream::writeOrdinaryObject(Object arg0, ObjectStreamClass arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "writeOrdinaryObject", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V", arg0, arg1, arg2)); }
void ObjectOutputStream::writeProxyDesc(ObjectStreamClass arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "writeProxyDesc", "(Ljava/io/ObjectStreamClass;Z)V", arg0, arg1)); }
void ObjectOutputStream::writeNonProxyDesc(ObjectStreamClass arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "writeNonProxyDesc", "(Ljava/io/ObjectStreamClass;Z)V", arg0, arg1)); }
void ObjectOutputStream::annotateProxyClass(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "annotateProxyClass", "(Ljava/lang/Class;)V", arg0)); }
void ObjectOutputStream::writeClassDescriptor(ObjectStreamClass arg0) { (classes[className]->invokeMethod<void>(this->object, "writeClassDescriptor", "(Ljava/io/ObjectStreamClass;)V", arg0)); }
void ObjectOutputStream::annotateClass(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "annotateClass", "(Ljava/lang/Class;)V", arg0)); }
void ObjectOutputStream::writeRecordData(Object arg0, ObjectStreamClass arg1) { (classes[className]->invokeMethod<void>(this->object, "writeRecordData", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V", arg0, arg1)); }
void ObjectOutputStream::writeExternalData(Externalizable arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternalData", "(Ljava/io/Externalizable;)V", arg0)); }
void ObjectOutputStream::writeSerialData(Object arg0, ObjectStreamClass arg1) { (classes[className]->invokeMethod<void>(this->object, "writeSerialData", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V", arg0, arg1)); }
void ObjectOutputStream::useProtocolVersion(int arg0) { (classes[className]->invokeMethod<void>(this->object, "useProtocolVersion", "(I)V", arg0)); }
void ObjectOutputStream::writeUnshared(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "writeUnshared", "(Ljava/lang/Object;)V", arg0)); }
bool ObjectOutputStream::enableReplaceObject(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "enableReplaceObject", "(Z)Z", arg0)); }
int ObjectOutputStream::getProtocolVersion() { return int(*classes[className]->invokeMethod<int>(this->object, "getProtocolVersion", "()I")); }
void ObjectOutputStream::writeTypeString(String arg0) { (classes[className]->invokeMethod<void>(this->object, "writeTypeString", "(Ljava/lang/String;)V", arg0)); }
void ObjectOutputStream::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
void ObjectOutputStream::defaultWriteObject() { (classes[className]->invokeMethod<void>(this->object, "defaultWriteObject", "()V")); }
ObjectOutputStream_PutField ObjectOutputStream::putFields() { return ObjectOutputStream_PutField(*classes[className]->invokeMethod<jobject>(this->object, "putFields", "()Ljava/io/ObjectOutputStream$PutField;")); }
void ObjectOutputStream::writeFields() { (classes[className]->invokeMethod<void>(this->object, "writeFields", "()V")); }
Boolean ObjectOutputStream::auditSubclass(Class arg0) { return Boolean(*classes[className]->invokeStaticMethod<jobject>("auditSubclass", "(Ljava/lang/Class;)Ljava/lang/Boolean;", arg0)); }
void ObjectOutputStream::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }



void ObjectOutputStream_PutField::put(String arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;F)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, long arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;J)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;I)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;D)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, byte arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;B)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, char arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;C)V", arg0, arg1)); }
void ObjectOutputStream_PutField::put(String arg0, short arg1) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljava/lang/String;S)V", arg0, arg1)); }
void ObjectOutputStream_PutField::write(ObjectOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/io/ObjectOutput;)V", arg0)); }


bool Boolean::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Boolean::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String Boolean::toString(bool arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(Z)Ljava/lang/String;", arg0)); }
int Boolean::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int Boolean::hashCode(bool arg0) { return int(*classes[className]->invokeStaticMethod<int>("hashCode", "(Z)I", arg0)); }
bool Boolean::getBoolean(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("getBoolean", "(Ljava/lang/String;)Z", arg0)); }
int Boolean::compare(bool arg0, bool arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(ZZ)I", arg0, arg1)); }
bool Boolean::booleanValue() { return bool(*classes[className]->invokeMethod<bool>(this->object, "booleanValue", "()Z")); }
Boolean Boolean::valueOf(String arg0) { return Boolean(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;", arg0)); }
Boolean Boolean::valueOf(bool arg0) { return Boolean(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Z)Ljava/lang/Boolean;", arg0)); }
bool Boolean::parseBoolean(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("parseBoolean", "(Ljava/lang/String;)Z", arg0)); }
bool Boolean::logicalAnd(bool arg0, bool arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("logicalAnd", "(ZZ)Z", arg0, arg1)); }
bool Boolean::logicalOr(bool arg0, bool arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("logicalOr", "(ZZ)Z", arg0, arg1)); }
bool Boolean::logicalXor(bool arg0, bool arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("logicalXor", "(ZZ)Z", arg0, arg1)); }

bool InetAddress::isReachable(NetworkInterface arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReachable", "(Ljava/net/NetworkInterface;II)Z", arg0, arg1, arg2)); }
bool InetAddress::isReachable(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReachable", "(I)Z", arg0)); }
String InetAddress::getHostFromNameService(InetAddress arg0, bool arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("getHostFromNameService", "(Ljava/net/InetAddress;Z)Ljava/lang/String;", arg0, arg1)); }
int InetAddress::checkNumericZone(String arg0) { return int(*classes[className]->invokeStaticMethod<int>("checkNumericZone", "(Ljava/lang/String;)I", arg0)); }
InetAddress InetAddress::getByAddress(arr_B arg0) { return InetAddress(*classes[className]->invokeStaticMethod<jobject>("getByAddress", "([B)Ljava/net/InetAddress;", arg0)); }
InetAddress InetAddress::getByAddress(String arg0, arr_B arg1) { return InetAddress(*classes[className]->invokeStaticMethod<jobject>("getByAddress", "(Ljava/lang/String;[B)Ljava/net/InetAddress;", arg0, arg1)); }
InetAddress InetAddress::anyLocalAddress() { return InetAddress(*classes[className]->invokeStaticMethod<jobject>("anyLocalAddress", "()Ljava/net/InetAddress;")); }
InetAddress_NameService InetAddress::createNameService() { return InetAddress_NameService(*classes[className]->invokeStaticMethod<jobject>("createNameService", "()Ljava/net/InetAddress$NameService;")); }
bool InetAddress::isMulticastAddress() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMulticastAddress", "()Z")); }
bool InetAddress::isAnyLocalAddress() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnyLocalAddress", "()Z")); }
bool InetAddress::isLoopbackAddress() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLoopbackAddress", "()Z")); }
bool InetAddress::isSiteLocalAddress() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSiteLocalAddress", "()Z")); }
bool InetAddress::isMCGlobal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMCGlobal", "()Z")); }
bool InetAddress::isMCNodeLocal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMCNodeLocal", "()Z")); }
bool InetAddress::isMCLinkLocal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMCLinkLocal", "()Z")); }
bool InetAddress::isMCSiteLocal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMCSiteLocal", "()Z")); }
bool InetAddress::isMCOrgLocal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMCOrgLocal", "()Z")); }
String InetAddress::getCanonicalHostName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCanonicalHostName", "()Ljava/lang/String;")); }
InetAddress InetAddress::getLoopbackAddress() { return InetAddress(*classes[className]->invokeStaticMethod<jobject>("getLoopbackAddress", "()Ljava/net/InetAddress;")); }
InetAddressImpl InetAddress::loadImpl(String arg0) { return InetAddressImpl(*classes[className]->invokeStaticMethod<jobject>("loadImpl", "(Ljava/lang/String;)Ljava/net/InetAddressImpl;", arg0)); }
InetAddress InetAddress::getLocalHost() { return InetAddress(*classes[className]->invokeStaticMethod<jobject>("getLocalHost", "()Ljava/net/InetAddress;")); }
void InetAddress::readObjectNoData() { (classes[className]->invokeMethod<void>(this->object, "readObjectNoData", "()V")); }
bool InetAddress::isLinkLocalAddress() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLinkLocalAddress", "()Z")); }
bool InetAddress::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String InetAddress::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int InetAddress::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void InetAddress::init() { (classes[className]->invokeStaticMethod<void>("init", "()V")); }
void InetAddress::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void InetAddress::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
String InetAddress::getHostAddress() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHostAddress", "()Ljava/lang/String;")); }
Object InetAddress::readResolve() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readResolve", "()Ljava/lang/Object;")); }
InetAddress InetAddress::getByName(String arg0, InetAddress arg1) { return InetAddress(*classes[className]->invokeStaticMethod<jobject>("getByName", "(Ljava/lang/String;Ljava/net/InetAddress;)Ljava/net/InetAddress;", arg0, arg1)); }
InetAddress InetAddress::getByName(String arg0) { return InetAddress(*classes[className]->invokeStaticMethod<jobject>("getByName", "(Ljava/lang/String;)Ljava/net/InetAddress;", arg0)); }
String InetAddress::getHostName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHostName", "()Ljava/lang/String;")); }
String InetAddress::getHostName(bool arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHostName", "(Z)Ljava/lang/String;", arg0)); }
InetAddress_InetAddressHolder InetAddress::holder() { return InetAddress_InetAddressHolder(*classes[className]->invokeMethod<jobject>(this->object, "holder", "()Ljava/net/InetAddress$InetAddressHolder;")); }

String NetworkInterface::getDisplayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava/lang/String;")); }
Enumeration NetworkInterface::getInetAddresses() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "getInetAddresses", "()Ljava/util/Enumeration;")); }
bool NetworkInterface::isBoundInetAddress(InetAddress arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isBoundInetAddress", "(Ljava/net/InetAddress;)Z", arg0)); }
Enumeration NetworkInterface::getNetworkInterfaces() { return Enumeration(*classes[className]->invokeStaticMethod<jobject>("getNetworkInterfaces", "()Ljava/util/Enumeration;")); }
Enumeration NetworkInterface::enumerationFromArray(Object_interface arg0) { return Enumeration(*classes[className]->invokeStaticMethod<jobject>("enumerationFromArray", "([Ljava/lang/Object;)Ljava/util/Enumeration;", arg0)); }
Stream NetworkInterface::streamFromArray(Object_interface arg0) { return Stream(*classes[className]->invokeStaticMethod<jobject>("streamFromArray", "([Ljava/lang/Object;)Ljava/util/stream/Stream;", arg0)); }
NetworkInterface NetworkInterface::getByName0(String arg0) { return NetworkInterface(*classes[className]->invokeStaticMethod<jobject>("getByName0", "(Ljava/lang/String;)Ljava/net/NetworkInterface;", arg0)); }
NetworkInterface NetworkInterface::getByIndex0(int arg0) { return NetworkInterface(*classes[className]->invokeStaticMethod<jobject>("getByIndex0", "(I)Ljava/net/NetworkInterface;", arg0)); }
NetworkInterface NetworkInterface::getByInetAddress0(InetAddress arg0) { return NetworkInterface(*classes[className]->invokeStaticMethod<jobject>("getByInetAddress0", "(Ljava/net/InetAddress;)Ljava/net/NetworkInterface;", arg0)); }
bool NetworkInterface::boundInetAddress0(InetAddress arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("boundInetAddress0", "(Ljava/net/InetAddress;)Z", arg0)); }
bool NetworkInterface::isUp0(String arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isUp0", "(Ljava/lang/String;I)Z", arg0, arg1)); }
bool NetworkInterface::isLoopback0(String arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isLoopback0", "(Ljava/lang/String;I)Z", arg0, arg1)); }
bool NetworkInterface::isP2P0(String arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isP2P0", "(Ljava/lang/String;I)Z", arg0, arg1)); }
bool NetworkInterface::supportsMulticast0(String arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("supportsMulticast0", "(Ljava/lang/String;I)Z", arg0, arg1)); }
int NetworkInterface::getMTU0(String arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("getMTU0", "(Ljava/lang/String;I)I", arg0, arg1)); }
List NetworkInterface::getInterfaceAddresses() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getInterfaceAddresses", "()Ljava/util/List;")); }
Enumeration NetworkInterface::getSubInterfaces() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "getSubInterfaces", "()Ljava/util/Enumeration;")); }
Stream NetworkInterface::subInterfaces() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "subInterfaces", "()Ljava/util/stream/Stream;")); }
NetworkInterface NetworkInterface::getByIndex(int arg0) { return NetworkInterface(*classes[className]->invokeStaticMethod<jobject>("getByIndex", "(I)Ljava/net/NetworkInterface;", arg0)); }
NetworkInterface NetworkInterface::getByInetAddress(InetAddress arg0) { return NetworkInterface(*classes[className]->invokeStaticMethod<jobject>("getByInetAddress", "(Ljava/net/InetAddress;)Ljava/net/NetworkInterface;", arg0)); }
bool NetworkInterface::isUp() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUp", "()Z")); }
bool NetworkInterface::isLoopback() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLoopback", "()Z")); }
bool NetworkInterface::isPointToPoint() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPointToPoint", "()Z")); }
bool NetworkInterface::supportsMulticast() { return bool(*classes[className]->invokeMethod<bool>(this->object, "supportsMulticast", "()Z")); }
int NetworkInterface::getMTU() { return int(*classes[className]->invokeMethod<int>(this->object, "getMTU", "()I")); }
bool NetworkInterface::isVirtual() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVirtual", "()Z")); }
Stream NetworkInterface::networkInterfaces() { return Stream(*classes[className]->invokeStaticMethod<jobject>("networkInterfaces", "()Ljava/util/stream/Stream;")); }
Stream NetworkInterface::inetAddresses() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "inetAddresses", "()Ljava/util/stream/Stream;")); }
String NetworkInterface::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool NetworkInterface::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String NetworkInterface::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int NetworkInterface::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
NetworkInterface NetworkInterface::getDefault() { return NetworkInterface(*classes[className]->invokeStaticMethod<jobject>("getDefault", "()Ljava/net/NetworkInterface;")); }
NetworkInterface NetworkInterface::getParent() { return NetworkInterface(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/net/NetworkInterface;")); }
void NetworkInterface::init() { (classes[className]->invokeStaticMethod<void>("init", "()V")); }
NetworkInterface NetworkInterface::getByName(String arg0) { return NetworkInterface(*classes[className]->invokeStaticMethod<jobject>("getByName", "(Ljava/lang/String;)Ljava/net/NetworkInterface;", arg0)); }
int NetworkInterface::getIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getIndex", "()I")); }



int InetAddress_InetAddressHolder::getFamily() { return int(*classes[className]->invokeMethod<int>(this->object, "getFamily", "()I")); }
String InetAddress_InetAddressHolder::getOriginalHostName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getOriginalHostName", "()Ljava/lang/String;")); }
void InetAddress_InetAddressHolder::init(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "init", "(Ljava/lang/String;I)V", arg0, arg1)); }
int InetAddress_InetAddressHolder::getAddress() { return int(*classes[className]->invokeMethod<int>(this->object, "getAddress", "()I")); }
String InetAddress_InetAddressHolder::getHostName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHostName", "()Ljava/lang/String;")); }

bool URLStreamHandler::hostsEqual(URL arg0, URL arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hostsEqual", "(Ljava/net/URL;Ljava/net/URL;)Z", arg0, arg1)); }
void URLStreamHandler::setURL(URL arg0, String arg1, String arg2, int arg3, String arg4, String arg5) { (classes[className]->invokeMethod<void>(this->object, "setURL", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void URLStreamHandler::setURL(URL arg0, String arg1, String arg2, int arg3, String arg4, String arg5, String arg6, String arg7, String arg8) { (classes[className]->invokeMethod<void>(this->object, "setURL", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
bool URLStreamHandler::equals(URL arg0, URL arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/net/URL;Ljava/net/URL;)Z", arg0, arg1)); }
int URLStreamHandler::hashCode(URL arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "(Ljava/net/URL;)I", arg0)); }
InetAddress URLStreamHandler::getHostAddress(URL arg0) { return InetAddress(*classes[className]->invokeMethod<jobject>(this->object, "getHostAddress", "(Ljava/net/URL;)Ljava/net/InetAddress;", arg0)); }
void URLStreamHandler::parseURL(URL arg0, String arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "parseURL", "(Ljava/net/URL;Ljava/lang/String;II)V", arg0, arg1, arg2, arg3)); }
int URLStreamHandler::getDefaultPort() { return int(*classes[className]->invokeMethod<int>(this->object, "getDefaultPort", "()I")); }
bool URLStreamHandler::sameFile(URL arg0, URL arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "sameFile", "(Ljava/net/URL;Ljava/net/URL;)Z", arg0, arg1)); }
String URLStreamHandler::toExternalForm(URL arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toExternalForm", "(Ljava/net/URL;)Ljava/lang/String;", arg0)); }
URLConnection URLStreamHandler::openConnection(URL arg0) { return URLConnection(*classes[className]->invokeMethod<jobject>(this->object, "openConnection", "(Ljava/net/URL;)Ljava/net/URLConnection;", arg0)); }
URLConnection URLStreamHandler::openConnection(URL arg0, Proxy arg1) { return URLConnection(*classes[className]->invokeMethod<jobject>(this->object, "openConnection", "(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/URLConnection;", arg0, arg1)); }

void URLConnection::setRequestProperty(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "setRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
bool URLConnection::getDefaultUseCaches() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getDefaultUseCaches", "()Z")); }
bool URLConnection::getDefaultUseCaches(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("getDefaultUseCaches", "(Ljava/lang/String;)Z", arg0)); }
long URLConnection::getContentLengthLong() { return long(*classes[className]->invokeMethod<long>(this->object, "getContentLengthLong", "()J")); }
long URLConnection::getHeaderFieldLong(String arg0, long arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "getHeaderFieldLong", "(Ljava/lang/String;J)J", arg0, arg1)); }
String URLConnection::getHeaderField(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHeaderField", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String URLConnection::getHeaderField(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHeaderField", "(I)Ljava/lang/String;", arg0)); }
long URLConnection::getHeaderFieldDate(String arg0, long arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "getHeaderFieldDate", "(Ljava/lang/String;J)J", arg0, arg1)); }
ContentHandler URLConnection::getContentHandler() { return ContentHandler(*classes[className]->invokeMethod<jobject>(this->object, "getContentHandler", "()Ljava/net/ContentHandler;")); }
void URLConnection::checkConnected() { (classes[className]->invokeMethod<void>(this->object, "checkConnected", "()V")); }
String URLConnection::getContentType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getContentType", "()Ljava/lang/String;")); }
String URLConnection::stripOffParameters(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "stripOffParameters", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
ContentHandler URLConnection::lookupContentHandlerViaProvider(String arg0) { return ContentHandler(*classes[className]->invokeMethod<jobject>(this->object, "lookupContentHandlerViaProvider", "(Ljava/lang/String;)Ljava/net/ContentHandler;", arg0)); }
ContentHandler URLConnection::lookupContentHandlerClassFor(String arg0) { return ContentHandler(*classes[className]->invokeMethod<jobject>(this->object, "lookupContentHandlerClassFor", "(Ljava/lang/String;)Ljava/net/ContentHandler;", arg0)); }
String URLConnection::typeToPackageName(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "typeToPackageName", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String URLConnection::getContentHandlerPkgPrefixes() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getContentHandlerPkgPrefixes", "()Ljava/lang/String;")); }
FileNameMap URLConnection::getFileNameMap() { return FileNameMap(*classes[className]->invokeStaticMethod<jobject>("getFileNameMap", "()Ljava/net/FileNameMap;")); }
bool URLConnection::checkfpx(InputStream arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("checkfpx", "(Ljava/io/InputStream;)Z", arg0)); }
long URLConnection::skipForward(InputStream arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("skipForward", "(Ljava/io/InputStream;J)J", arg0, arg1)); }
void URLConnection::setFileNameMap(FileNameMap arg0) { (classes[className]->invokeStaticMethod<void>("setFileNameMap", "(Ljava/net/FileNameMap;)V", arg0)); }
void URLConnection::setConnectTimeout(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setConnectTimeout", "(I)V", arg0)); }
int URLConnection::getConnectTimeout() { return int(*classes[className]->invokeMethod<int>(this->object, "getConnectTimeout", "()I")); }
void URLConnection::setReadTimeout(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setReadTimeout", "(I)V", arg0)); }
int URLConnection::getReadTimeout() { return int(*classes[className]->invokeMethod<int>(this->object, "getReadTimeout", "()I")); }
String URLConnection::getContentEncoding() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getContentEncoding", "()Ljava/lang/String;")); }
long URLConnection::getExpiration() { return long(*classes[className]->invokeMethod<long>(this->object, "getExpiration", "()J")); }
long URLConnection::getDate() { return long(*classes[className]->invokeMethod<long>(this->object, "getDate", "()J")); }
long URLConnection::getLastModified() { return long(*classes[className]->invokeMethod<long>(this->object, "getLastModified", "()J")); }
Map URLConnection::getHeaderFields() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getHeaderFields", "()Ljava/util/Map;")); }
int URLConnection::getHeaderFieldInt(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getHeaderFieldInt", "(Ljava/lang/String;I)I", arg0, arg1)); }
String URLConnection::getHeaderFieldKey(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHeaderFieldKey", "(I)Ljava/lang/String;", arg0)); }
OutputStream URLConnection::getOutputStream() { return OutputStream(*classes[className]->invokeMethod<jobject>(this->object, "getOutputStream", "()Ljava/io/OutputStream;")); }
void URLConnection::setDoInput(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDoInput", "(Z)V", arg0)); }
bool URLConnection::getDoInput() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getDoInput", "()Z")); }
void URLConnection::setDoOutput(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDoOutput", "(Z)V", arg0)); }
bool URLConnection::getDoOutput() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getDoOutput", "()Z")); }
void URLConnection::setAllowUserInteraction(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAllowUserInteraction", "(Z)V", arg0)); }
bool URLConnection::getAllowUserInteraction() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAllowUserInteraction", "()Z")); }
void URLConnection::setDefaultAllowUserInteraction(bool arg0) { (classes[className]->invokeStaticMethod<void>("setDefaultAllowUserInteraction", "(Z)V", arg0)); }
bool URLConnection::getDefaultAllowUserInteraction() { return bool(*classes[className]->invokeStaticMethod<bool>("getDefaultAllowUserInteraction", "()Z")); }
bool URLConnection::getUseCaches() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getUseCaches", "()Z")); }
void URLConnection::setIfModifiedSince(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setIfModifiedSince", "(J)V", arg0)); }
long URLConnection::getIfModifiedSince() { return long(*classes[className]->invokeMethod<long>(this->object, "getIfModifiedSince", "()J")); }
void URLConnection::setDefaultUseCaches(String arg0, bool arg1) { (classes[className]->invokeStaticMethod<void>("setDefaultUseCaches", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void URLConnection::setDefaultUseCaches(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDefaultUseCaches", "(Z)V", arg0)); }
void URLConnection::addRequestProperty(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "addRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
String URLConnection::getRequestProperty(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRequestProperty", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
Map URLConnection::getRequestProperties() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getRequestProperties", "()Ljava/util/Map;")); }
void URLConnection::setDefaultRequestProperty(String arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("setDefaultRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
String URLConnection::getDefaultRequestProperty(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getDefaultRequestProperty", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void URLConnection::setContentHandlerFactory(ContentHandlerFactory arg0) { (classes[className]->invokeStaticMethod<void>("setContentHandlerFactory", "(Ljava/net/ContentHandlerFactory;)V", arg0)); }
String URLConnection::guessContentTypeFromName(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("guessContentTypeFromName", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String URLConnection::guessContentTypeFromStream(InputStream arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("guessContentTypeFromStream", "(Ljava/io/InputStream;)Ljava/lang/String;", arg0)); }
int URLConnection::readBytes(arr_I arg0, int arg1, InputStream arg2) { return int(*classes[className]->invokeStaticMethod<int>("readBytes", "([IILjava/io/InputStream;)I", arg0, arg1, arg2)); }
URL URLConnection::getURL() { return URL(*classes[className]->invokeMethod<jobject>(this->object, "getURL", "()Ljava/net/URL;")); }
void URLConnection::setUseCaches(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setUseCaches", "(Z)V", arg0)); }
int URLConnection::getContentLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getContentLength", "()I")); }
Permission URLConnection::getPermission() { return Permission(*classes[className]->invokeMethod<jobject>(this->object, "getPermission", "()Ljava/security/Permission;")); }
String URLConnection::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void URLConnection::connect() { (classes[className]->invokeMethod<void>(this->object, "connect", "()V")); }
InputStream URLConnection::getInputStream() { return InputStream(*classes[className]->invokeMethod<jobject>(this->object, "getInputStream", "()Ljava/io/InputStream;")); }
Object URLConnection::getContent(Class_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getContent", "([Ljava/lang/Class;)Ljava/lang/Object;", arg0)); }
Object URLConnection::getContent() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getContent", "()Ljava/lang/Object;")); }

Object ContentHandler::getContent(URLConnection arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getContent", "(Ljava/net/URLConnection;)Ljava/lang/Object;", arg0)); }
Object ContentHandler::getContent(URLConnection arg0, Class_interface arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getContent", "(Ljava/net/URLConnection;[Ljava/lang/Class;)Ljava/lang/Object;", arg0, arg1)); }




String URI::getRawAuthority() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRawAuthority", "()Ljava/lang/String;")); }
URI URI::relativize(URI arg0) { return URI(*classes[className]->invokeMethod<jobject>(this->object, "relativize", "(Ljava/net/URI;)Ljava/net/URI;", arg0)); }
URI URI::relativize(URI arg0, URI arg1) { return URI(*classes[className]->invokeStaticMethod<jobject>("relativize", "(Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;", arg0, arg1)); }
void URI::checkPath(String arg0, String arg1, String arg2) { (classes[className]->invokeStaticMethod<void>("checkPath", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2)); }
bool URI::validSchemeAndPath(String arg0, String arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("validSchemeAndPath", "(Ljava/lang/String;Ljava/lang/String;)Z", arg0, arg1)); }
void URI::appendSchemeSpecificPart(StringBuilder arg0, String arg1, String arg2, String arg3, String arg4, int arg5, String arg6, String arg7) { (classes[className]->invokeMethod<void>(this->object, "appendSchemeSpecificPart", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
String URI::getRawSchemeSpecificPart() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRawSchemeSpecificPart", "()Ljava/lang/String;")); }
bool URI::equalIgnoringCase(String arg0, String arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("equalIgnoringCase", "(Ljava/lang/String;Ljava/lang/String;)Z", arg0, arg1)); }
int URI::hashIgnoringCase(int arg0, String arg1) { return int(*classes[className]->invokeStaticMethod<int>("hashIgnoringCase", "(ILjava/lang/String;)I", arg0, arg1)); }
int URI::compareIgnoringCase(String arg0, String arg1) { return int(*classes[className]->invokeStaticMethod<int>("compareIgnoringCase", "(Ljava/lang/String;Ljava/lang/String;)I", arg0, arg1)); }
String URI::defineString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "defineString", "()Ljava/lang/String;")); }
int URI::percentNormalizedComparison(String arg0, String arg1, bool arg2) { return int(*classes[className]->invokeStaticMethod<int>("percentNormalizedComparison", "(Ljava/lang/String;Ljava/lang/String;Z)I", arg0, arg1, arg2)); }
int URI::normalizedHash(int arg0, String arg1) { return int(*classes[className]->invokeStaticMethod<int>("normalizedHash", "(ILjava/lang/String;)I", arg0, arg1)); }
int URI::toUpper(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("toUpper", "(C)I", arg0)); }
String URI::quote(String arg0, long arg1, long arg2) { return String(*classes[className]->invokeStaticMethod<jobject>("quote", "(Ljava/lang/String;JJ)Ljava/lang/String;", arg0, arg1, arg2)); }
void URI::appendAuthority(StringBuilder arg0, String arg1, String arg2, String arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "appendAuthority", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", arg0, arg1, arg2, arg3, arg4)); }
void URI::appendFragment(StringBuilder arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "appendFragment", "(Ljava/lang/StringBuilder;Ljava/lang/String;)V", arg0, arg1)); }
String URI::resolvePath(String arg0, String arg1, bool arg2) { return String(*classes[className]->invokeStaticMethod<jobject>("resolvePath", "(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;", arg0, arg1, arg2)); }
int URI::needsNormalization(String arg0) { return int(*classes[className]->invokeStaticMethod<int>("needsNormalization", "(Ljava/lang/String;)I", arg0)); }
void URI::removeDots(arr_C arg0, arr_I arg1) { (classes[className]->invokeStaticMethod<void>("removeDots", "([C[I)V", arg0, arg1)); }
void URI::maybeAddLeadingDot(arr_C arg0, arr_I arg1) { (classes[className]->invokeStaticMethod<void>("maybeAddLeadingDot", "([C[I)V", arg0, arg1)); }
void URI::appendEscape(StringBuilder arg0, byte arg1) { (classes[className]->invokeStaticMethod<void>("appendEscape", "(Ljava/lang/StringBuilder;B)V", arg0, arg1)); }
void URI::appendEncoded(CharsetEncoder arg0, StringBuilder arg1, char arg2) { (classes[className]->invokeStaticMethod<void>("appendEncoded", "(Ljava/nio/charset/CharsetEncoder;Ljava/lang/StringBuilder;C)V", arg0, arg1, arg2)); }
URI URI::parseServerAuthority() { return URI(*classes[className]->invokeMethod<jobject>(this->object, "parseServerAuthority", "()Ljava/net/URI;")); }
String URI::getSchemeSpecificPart() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSchemeSpecificPart", "()Ljava/lang/String;")); }
String URI::getRawUserInfo() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRawUserInfo", "()Ljava/lang/String;")); }
String URI::getFragment() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFragment", "()Ljava/lang/String;")); }
String URI::toASCIIString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toASCIIString", "()Ljava/lang/String;")); }
bool URI::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String URI::toString(String arg0, String arg1, String arg2, String arg3, String arg4, int arg5, String arg6, String arg7, String arg8) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
String URI::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int URI::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int URI::compare(String arg0, String arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(Ljava/lang/String;Ljava/lang/String;)I", arg0, arg1)); }
int URI::hash(int arg0, String arg1) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(ILjava/lang/String;)I", arg0, arg1)); }
int URI::decode(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("decode", "(C)I", arg0)); }
String URI::decode(String arg0, bool arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("decode", "(Ljava/lang/String;Z)Ljava/lang/String;", arg0, arg1)); }
String URI::decode(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("decode", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
byte URI::decode(char arg0, char arg1) { return byte(*classes[className]->invokeStaticMethod<byte>("decode", "(CC)B", arg0, arg1)); }
String URI::encode(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("encode", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void URI::split(arr_C arg0, arr_I arg1) { (classes[className]->invokeStaticMethod<void>("split", "([C[I)V", arg0, arg1)); }
int URI::join(arr_C arg0, arr_I arg1) { return int(*classes[className]->invokeStaticMethod<int>("join", "([C[I)I", arg0, arg1)); }
bool URI::isAbsolute() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAbsolute", "()Z")); }
URI URI::resolve(URI arg0) { return URI(*classes[className]->invokeMethod<jobject>(this->object, "resolve", "(Ljava/net/URI;)Ljava/net/URI;", arg0)); }
URI URI::resolve(URI arg0, URI arg1) { return URI(*classes[className]->invokeStaticMethod<jobject>("resolve", "(Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;", arg0, arg1)); }
URI URI::resolve(String arg0) { return URI(*classes[className]->invokeMethod<jobject>(this->object, "resolve", "(Ljava/lang/String;)Ljava/net/URI;", arg0)); }
bool URI::match(char arg0, long arg1, long arg2) { return bool(*classes[className]->invokeStaticMethod<bool>("match", "(CJJ)Z", arg0, arg1, arg2)); }
void URI::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void URI::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
URI URI::normalize(URI arg0) { return URI(*classes[className]->invokeStaticMethod<jobject>("normalize", "(Ljava/net/URI;)Ljava/net/URI;", arg0)); }
String URI::normalize(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("normalize", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
URI URI::normalize() { return URI(*classes[className]->invokeMethod<jobject>(this->object, "normalize", "()Ljava/net/URI;")); }
String URI::getScheme() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getScheme", "()Ljava/lang/String;")); }
bool URI::isOpaque() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpaque", "()Z")); }
String URI::getRawFragment() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRawFragment", "()Ljava/lang/String;")); }
String URI::getRawQuery() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRawQuery", "()Ljava/lang/String;")); }
String URI::getRawPath() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRawPath", "()Ljava/lang/String;")); }
String URI::getHost() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHost", "()Ljava/lang/String;")); }
int URI::getPort() { return int(*classes[className]->invokeMethod<int>(this->object, "getPort", "()I")); }
URI URI::create(String arg0) { return URI(*classes[className]->invokeStaticMethod<jobject>("create", "(Ljava/lang/String;)Ljava/net/URI;", arg0)); }
String URI::getAuthority() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAuthority", "()Ljava/lang/String;")); }
String URI::getQuery() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getQuery", "()Ljava/lang/String;")); }
String URI::getPath() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPath", "()Ljava/lang/String;")); }
String URI::getUserInfo() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUserInfo", "()Ljava/lang/String;")); }
int URI::toLower(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("toLower", "(C)I", arg0)); }
URL URI::toURL() { return URL(*classes[className]->invokeMethod<jobject>(this->object, "toURL", "()Ljava/net/URL;")); }
bool URI::equal(String arg0, String arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("equal", "(Ljava/lang/String;Ljava/lang/String;)Z", arg0, arg1)); }

StringBuilder StringBuilder::append(CharSequence arg0, int arg1, int arg2) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;", arg0, arg1, arg2)); }
StringBuilder StringBuilder::append(arr_C arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "([C)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(arr_C arg0, int arg1, int arg2) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "([CII)Ljava/lang/StringBuilder;", arg0, arg1, arg2)); }
StringBuilder StringBuilder::append(bool arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Z)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(CharSequence arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(StringBuffer arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(String arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(float arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(F)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(double arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(D)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(Object arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(char arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(C)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(int arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(I)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::append(long arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(J)Ljava/lang/StringBuilder;", arg0)); }
int StringBuilder::indexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;)I", arg0)); }
int StringBuilder::indexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, float arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, long arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, int arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(II)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, arr_C arg1, int arg2, int arg3) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava/lang/StringBuilder;", arg0, arg1, arg2, arg3)); }
StringBuilder StringBuilder::insert(int arg0, CharSequence arg1, int arg2, int arg3) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/StringBuilder;", arg0, arg1, arg2, arg3)); }
StringBuilder StringBuilder::insert(int arg0, CharSequence arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, arr_C arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, String arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/String;)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, bool arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, char arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, Object arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/Object;)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::insert(int arg0, double arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava/lang/StringBuilder;", arg0, arg1)); }
int StringBuilder::lastIndexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
int StringBuilder::lastIndexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;)I", arg0)); }
StringBuilder StringBuilder::replace(int arg0, int arg1, String arg2) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "replace", "(IILjava/lang/String;)Ljava/lang/StringBuilder;", arg0, arg1, arg2)); }
void StringBuilder::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void StringBuilder::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
StringBuilder StringBuilder::delete_(int arg0, int arg1) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "delete", "(II)Ljava/lang/StringBuilder;", arg0, arg1)); }
StringBuilder StringBuilder::appendCodePoint(int arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::deleteCharAt(int arg0) { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava/lang/StringBuilder;", arg0)); }
StringBuilder StringBuilder::reverse() { return StringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "reverse", "()Ljava/lang/StringBuilder;")); }

StringBuffer StringBuffer::append(int arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(I)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(long arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(J)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(float arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(F)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(arr_C arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "([C)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(arr_C arg0, int arg1, int arg2) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "([CII)Ljava/lang/StringBuffer;", arg0, arg1, arg2)); }
StringBuffer StringBuffer::append(bool arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Z)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(char arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(C)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(double arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(D)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(String arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(StringBuffer arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(AbstractStringBuilder arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/AbstractStringBuilder;)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(CharSequence arg0, int arg1, int arg2) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/StringBuffer;", arg0, arg1, arg2)); }
StringBuffer StringBuffer::append(Object arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/Object;)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::append(CharSequence arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuffer;", arg0)); }
void StringBuffer::getChars(int arg0, int arg1, arr_C arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "getChars", "(II[CI)V", arg0, arg1, arg2, arg3)); }
int StringBuffer::indexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;)I", arg0)); }
int StringBuffer::indexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, arr_C arg1, int arg2, int arg3) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava/lang/StringBuffer;", arg0, arg1, arg2, arg3)); }
StringBuffer StringBuffer::insert(int arg0, float arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, CharSequence arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/CharSequence;)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, double arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, arr_C arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, String arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/String;)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, bool arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, char arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, int arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(II)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, long arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, Object arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/Object;)Ljava/lang/StringBuffer;", arg0, arg1)); }
StringBuffer StringBuffer::insert(int arg0, CharSequence arg1, int arg2, int arg3) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/StringBuffer;", arg0, arg1, arg2, arg3)); }
int StringBuffer::codePointAt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointAt", "(I)I", arg0)); }
int StringBuffer::codePointBefore(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointBefore", "(I)I", arg0)); }
int StringBuffer::codePointCount(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointCount", "(II)I", arg0, arg1)); }
int StringBuffer::offsetByCodePoints(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "offsetByCodePoints", "(II)I", arg0, arg1)); }
void StringBuffer::getBytes(arr_B arg0, int arg1, byte arg2) { (classes[className]->invokeMethod<void>(this->object, "getBytes", "([BIB)V", arg0, arg1, arg2)); }
int StringBuffer::lastIndexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
int StringBuffer::lastIndexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;)I", arg0)); }
String StringBuffer::substring(int arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "substring", "(II)Ljava/lang/String;", arg0, arg1)); }
String StringBuffer::substring(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "substring", "(I)Ljava/lang/String;", arg0)); }
StringBuffer StringBuffer::replace(int arg0, int arg1, String arg2) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "replace", "(IILjava/lang/String;)Ljava/lang/StringBuffer;", arg0, arg1, arg2)); }
void StringBuffer::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void StringBuffer::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
StringBuffer StringBuffer::delete_(int arg0, int arg1) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "delete", "(II)Ljava/lang/StringBuffer;", arg0, arg1)); }
void StringBuffer::setLength(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setLength", "(I)V", arg0)); }
int StringBuffer::capacity() { return int(*classes[className]->invokeMethod<int>(this->object, "capacity", "()I")); }
void StringBuffer::ensureCapacity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }
void StringBuffer::trimToSize() { (classes[className]->invokeMethod<void>(this->object, "trimToSize", "()V")); }
void StringBuffer::setCharAt(int arg0, char arg1) { (classes[className]->invokeMethod<void>(this->object, "setCharAt", "(IC)V", arg0, arg1)); }
StringBuffer StringBuffer::appendCodePoint(int arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::deleteCharAt(int arg0) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava/lang/StringBuffer;", arg0)); }
StringBuffer StringBuffer::reverse() { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "reverse", "()Ljava/lang/StringBuffer;")); }

AbstractStringBuilder AbstractStringBuilder::append(AbstractStringBuilder arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/AbstractStringBuilder;)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(CharSequence arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(CharSequence arg0, int arg1, int arg2) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;", arg0, arg1, arg2)); }
AbstractStringBuilder AbstractStringBuilder::append(arr_C arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "([C)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(Object arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(StringBuffer arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(String arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(int arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(I)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(long arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(J)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(float arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(F)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(double arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(D)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(char arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(C)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(bool arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Z)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::append(arr_C arg0, int arg1, int arg2) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "append", "([CII)Ljava/lang/AbstractStringBuilder;", arg0, arg1, arg2)); }
void AbstractStringBuilder::inflate() { (classes[className]->invokeMethod<void>(this->object, "inflate", "()V")); }
void AbstractStringBuilder::getChars(int arg0, int arg1, arr_C arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "getChars", "(II[CI)V", arg0, arg1, arg2, arg3)); }
int AbstractStringBuilder::compareTo(AbstractStringBuilder arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareTo", "(Ljava/lang/AbstractStringBuilder;)I", arg0)); }
int AbstractStringBuilder::indexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;)I", arg0)); }
int AbstractStringBuilder::indexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, String arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, CharSequence arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, arr_C arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, Object arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, arr_C arg1, int arg2, int arg3) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava/lang/AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, bool arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, float arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, double arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, long arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, CharSequence arg1, int arg2, int arg3) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, int arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(II)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::insert(int arg0, char arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
bool AbstractStringBuilder::isLatin1() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLatin1", "()Z")); }
int AbstractStringBuilder::codePointAt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointAt", "(I)I", arg0)); }
int AbstractStringBuilder::codePointBefore(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointBefore", "(I)I", arg0)); }
int AbstractStringBuilder::codePointCount(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "codePointCount", "(II)I", arg0, arg1)); }
int AbstractStringBuilder::offsetByCodePoints(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "offsetByCodePoints", "(II)I", arg0, arg1)); }
void AbstractStringBuilder::getBytes(arr_B arg0, int arg1, byte arg2) { (classes[className]->invokeMethod<void>(this->object, "getBytes", "([BIB)V", arg0, arg1, arg2)); }
byte AbstractStringBuilder::getCoder() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getCoder", "()B")); }
int AbstractStringBuilder::lastIndexOf(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;)I", arg0)); }
int AbstractStringBuilder::lastIndexOf(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/String;I)I", arg0, arg1)); }
String AbstractStringBuilder::substring(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "substring", "(I)Ljava/lang/String;", arg0)); }
String AbstractStringBuilder::substring(int arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "substring", "(II)Ljava/lang/String;", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::replace(int arg0, int arg1, String arg2) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "replace", "(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;", arg0, arg1, arg2)); }
AbstractStringBuilder AbstractStringBuilder::delete_(int arg0, int arg1) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "delete", "(II)Ljava/lang/AbstractStringBuilder;", arg0, arg1)); }
void AbstractStringBuilder::setLength(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setLength", "(I)V", arg0)); }
int AbstractStringBuilder::newCapacity(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "newCapacity", "(I)I", arg0)); }
int AbstractStringBuilder::capacity() { return int(*classes[className]->invokeMethod<int>(this->object, "capacity", "()I")); }
void AbstractStringBuilder::ensureCapacity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }
void AbstractStringBuilder::trimToSize() { (classes[className]->invokeMethod<void>(this->object, "trimToSize", "()V")); }
void AbstractStringBuilder::setCharAt(int arg0, char arg1) { (classes[className]->invokeMethod<void>(this->object, "setCharAt", "(IC)V", arg0, arg1)); }
AbstractStringBuilder AbstractStringBuilder::appendCodePoint(int arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::deleteCharAt(int arg0) { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava/lang/AbstractStringBuilder;", arg0)); }
AbstractStringBuilder AbstractStringBuilder::reverse() { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "reverse", "()Ljava/lang/AbstractStringBuilder;")); }
void AbstractStringBuilder::initBytes(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "initBytes", "([CII)V", arg0, arg1, arg2)); }
void AbstractStringBuilder::ensureCapacityInternal(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacityInternal", "(I)V", arg0)); }
void AbstractStringBuilder::checkRangeSIOOBE(int arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("checkRangeSIOOBE", "(III)V", arg0, arg1, arg2)); }
void AbstractStringBuilder::checkRange(int arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("checkRange", "(III)V", arg0, arg1, arg2)); }
AbstractStringBuilder AbstractStringBuilder::appendNull() { return AbstractStringBuilder(*classes[className]->invokeMethod<jobject>(this->object, "appendNull", "()Ljava/lang/AbstractStringBuilder;")); }
void AbstractStringBuilder::putStringAt(int arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "putStringAt", "(ILjava/lang/String;)V", arg0, arg1)); }
void AbstractStringBuilder::putStringAt(int arg0, String arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putStringAt", "(ILjava/lang/String;II)V", arg0, arg1, arg2, arg3)); }
void AbstractStringBuilder::putCharsAt(int arg0, arr_C arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putCharsAt", "(I[CII)V", arg0, arg1, arg2, arg3)); }
void AbstractStringBuilder::putCharsAt(int arg0, CharSequence arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putCharsAt", "(ILjava/lang/CharSequence;II)V", arg0, arg1, arg2, arg3)); }
void AbstractStringBuilder::appendChars(CharSequence arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "appendChars", "(Ljava/lang/CharSequence;II)V", arg0, arg1, arg2)); }
void AbstractStringBuilder::appendChars(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "appendChars", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
void AbstractStringBuilder::appendChars(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "appendChars", "([CII)V", arg0, arg1, arg2)); }
void AbstractStringBuilder::shift(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "shift", "(II)V", arg0, arg1)); }

CoderResult CharsetEncoder::implFlush(ByteBuffer arg0) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "implFlush", "(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;", arg0)); }
bool CharsetEncoder::isLegalReplacement(arr_B arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLegalReplacement", "([B)Z", arg0)); }
CoderResult CharsetEncoder::encodeLoop(CharBuffer arg0, ByteBuffer arg1) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "encodeLoop", "(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;", arg0, arg1)); }
CodingErrorAction CharsetEncoder::malformedInputAction() { return CodingErrorAction(*classes[className]->invokeMethod<jobject>(this->object, "malformedInputAction", "()Ljava/nio/charset/CodingErrorAction;")); }
CodingErrorAction CharsetEncoder::unmappableCharacterAction() { return CodingErrorAction(*classes[className]->invokeMethod<jobject>(this->object, "unmappableCharacterAction", "()Ljava/nio/charset/CodingErrorAction;")); }
float CharsetEncoder::averageBytesPerChar() { return float(*classes[className]->invokeMethod<float>(this->object, "averageBytesPerChar", "()F")); }
CharsetEncoder CharsetEncoder::replaceWith(arr_B arg0) { return CharsetEncoder(*classes[className]->invokeMethod<jobject>(this->object, "replaceWith", "([B)Ljava/nio/charset/CharsetEncoder;", arg0)); }
void CharsetEncoder::implReplaceWith(arr_B arg0) { (classes[className]->invokeMethod<void>(this->object, "implReplaceWith", "([B)V", arg0)); }
void CharsetEncoder::implOnMalformedInput(CodingErrorAction arg0) { (classes[className]->invokeMethod<void>(this->object, "implOnMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)V", arg0)); }
void CharsetEncoder::implOnUnmappableCharacter(CodingErrorAction arg0) { (classes[className]->invokeMethod<void>(this->object, "implOnUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)V", arg0)); }
void CharsetEncoder::throwIllegalStateException(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "throwIllegalStateException", "(II)V", arg0, arg1)); }
void CharsetEncoder::implReset() { (classes[className]->invokeMethod<void>(this->object, "implReset", "()V")); }
CharsetEncoder CharsetEncoder::onMalformedInput(CodingErrorAction arg0) { return CharsetEncoder(*classes[className]->invokeMethod<jobject>(this->object, "onMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;", arg0)); }
CharsetEncoder CharsetEncoder::onUnmappableCharacter(CodingErrorAction arg0) { return CharsetEncoder(*classes[className]->invokeMethod<jobject>(this->object, "onUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;", arg0)); }
float CharsetEncoder::maxBytesPerChar() { return float(*classes[className]->invokeMethod<float>(this->object, "maxBytesPerChar", "()F")); }
ByteBuffer CharsetEncoder::encode(CharBuffer arg0) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "encode", "(Ljava/nio/CharBuffer;)Ljava/nio/ByteBuffer;", arg0)); }
CoderResult CharsetEncoder::encode(CharBuffer arg0, ByteBuffer arg1, bool arg2) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "encode", "(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;", arg0, arg1, arg2)); }
CoderResult CharsetEncoder::flush(ByteBuffer arg0) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "flush", "(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;", arg0)); }
bool CharsetEncoder::canEncode(CharSequence arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEncode", "(Ljava/lang/CharSequence;)Z", arg0)); }
bool CharsetEncoder::canEncode(char arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEncode", "(C)Z", arg0)); }
bool CharsetEncoder::canEncode(CharBuffer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEncode", "(Ljava/nio/CharBuffer;)Z", arg0)); }
Charset CharsetEncoder::charset() { return Charset(*classes[className]->invokeMethod<jobject>(this->object, "charset", "()Ljava/nio/charset/Charset;")); }
CharsetEncoder CharsetEncoder::reset() { return CharsetEncoder(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/charset/CharsetEncoder;")); }

bool CoderResult::isOverflow() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOverflow", "()Z")); }
bool CoderResult::isError() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isError", "()Z")); }
CoderResult CoderResult::malformedForLength(int arg0) { return CoderResult(*classes[className]->invokeStaticMethod<jobject>("malformedForLength", "(I)Ljava/nio/charset/CoderResult;", arg0)); }
bool CoderResult::isMalformed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMalformed", "()Z")); }
bool CoderResult::isUnmappable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUnmappable", "()Z")); }
CoderResult CoderResult::unmappableForLength(int arg0) { return CoderResult(*classes[className]->invokeStaticMethod<jobject>("unmappableForLength", "(I)Ljava/nio/charset/CoderResult;", arg0)); }
int CoderResult::length() { return int(*classes[className]->invokeMethod<int>(this->object, "length", "()I")); }
String CoderResult::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
bool CoderResult::isUnderflow() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUnderflow", "()Z")); }
void CoderResult::throwException() { (classes[className]->invokeMethod<void>(this->object, "throwException", "()V")); }

String CodingErrorAction::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }



Module NamedPackage::module() { return Module(*classes[className]->invokeMethod<jobject>(this->object, "module", "()Ljava/lang/Module;")); }
String NamedPackage::packageName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "packageName", "()Ljava/lang/String;")); }
Package NamedPackage::toPackage(String arg0, Module arg1) { return Package(*classes[className]->invokeStaticMethod<jobject>("toPackage", "(Ljava/lang/String;Ljava/lang/Module;)Ljava/lang/Package;", arg0, arg1)); }
URI NamedPackage::location() { return URI(*classes[className]->invokeMethod<jobject>(this->object, "location", "()Ljava/net/URI;")); }


bool CodeSource::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String CodeSource::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int CodeSource::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
URL CodeSource::getLocation() { return URL(*classes[className]->invokeMethod<jobject>(this->object, "getLocation", "()Ljava/net/URL;")); }
void CodeSource::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void CodeSource::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
bool CodeSource::implies(CodeSource arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "implies", "(Ljava/security/CodeSource;)Z", arg0)); }
bool CodeSource::matchCerts(CodeSource arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "matchCerts", "(Ljava/security/CodeSource;Z)Z", arg0, arg1)); }
bool CodeSource::matchLocation(CodeSource arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "matchLocation", "(Ljava/security/CodeSource;)Z", arg0)); }
String CodeSource::getLocationNoFragString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLocationNoFragString", "()Ljava/lang/String;")); }



String File::getAbsolutePath() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAbsolutePath", "()Ljava/lang/String;")); }
String File::getCanonicalPath() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCanonicalPath", "()Ljava/lang/String;")); }
bool File::isDirectory() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirectory", "()Z")); }
String File::slashify(String arg0, bool arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("slashify", "(Ljava/lang/String;Z)Ljava/lang/String;", arg0, arg1)); }
File File::getAbsoluteFile() { return File(*classes[className]->invokeMethod<jobject>(this->object, "getAbsoluteFile", "()Ljava/io/File;")); }
bool File::mkdir() { return bool(*classes[className]->invokeMethod<bool>(this->object, "mkdir", "()Z")); }
File File::getCanonicalFile() { return File(*classes[className]->invokeMethod<jobject>(this->object, "getCanonicalFile", "()Ljava/io/File;")); }
File File::getParentFile() { return File(*classes[className]->invokeMethod<jobject>(this->object, "getParentFile", "()Ljava/io/File;")); }
bool File::mkdirs() { return bool(*classes[className]->invokeMethod<bool>(this->object, "mkdirs", "()Z")); }
bool File::setWritable(bool arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setWritable", "(ZZ)Z", arg0, arg1)); }
bool File::setWritable(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setWritable", "(Z)Z", arg0)); }
bool File::setReadable(bool arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setReadable", "(ZZ)Z", arg0, arg1)); }
bool File::setReadable(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setReadable", "(Z)Z", arg0)); }
bool File::setExecutable(bool arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setExecutable", "(ZZ)Z", arg0, arg1)); }
bool File::setExecutable(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setExecutable", "(Z)Z", arg0)); }
File File::createTempFile(String arg0, String arg1) { return File(*classes[className]->invokeStaticMethod<jobject>("createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;", arg0, arg1)); }
File File::createTempFile(String arg0, String arg1, File arg2) { return File(*classes[className]->invokeStaticMethod<jobject>("createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;", arg0, arg1, arg2)); }
int File::getPrefixLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getPrefixLength", "()I")); }
bool File::canWrite() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canWrite", "()Z")); }
bool File::isFile() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFile", "()Z")); }
long File::lastModified() { return long(*classes[className]->invokeMethod<long>(this->object, "lastModified", "()J")); }
void File::deleteOnExit() { (classes[className]->invokeMethod<void>(this->object, "deleteOnExit", "()V")); }
bool File::setLastModified(long arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setLastModified", "(J)Z", arg0)); }
bool File::canExecute() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canExecute", "()Z")); }
long File::getTotalSpace() { return long(*classes[className]->invokeMethod<long>(this->object, "getTotalSpace", "()J")); }
long File::getFreeSpace() { return long(*classes[className]->invokeMethod<long>(this->object, "getFreeSpace", "()J")); }
long File::getUsableSpace() { return long(*classes[className]->invokeMethod<long>(this->object, "getUsableSpace", "()J")); }
Path File::toPath() { return Path(*classes[className]->invokeMethod<jobject>(this->object, "toPath", "()Ljava/nio/file/Path;")); }
bool File::isInvalid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvalid", "()Z")); }
String File::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool File::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
long File::length() { return long(*classes[className]->invokeMethod<long>(this->object, "length", "()J")); }
String File::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int File::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool File::isHidden() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHidden", "()Z")); }
bool File::isAbsolute() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAbsolute", "()Z")); }
String File::getParent() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/lang/String;")); }
void File::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void File::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
bool File::delete_() { return bool(*classes[className]->invokeMethod<bool>(this->object, "delete", "()Z")); }
bool File::setReadOnly() { return bool(*classes[className]->invokeMethod<bool>(this->object, "setReadOnly", "()Z")); }
bool File::canRead() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canRead", "()Z")); }
String File::getPath() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPath", "()Ljava/lang/String;")); }
URI File::toURI() { return URI(*classes[className]->invokeMethod<jobject>(this->object, "toURI", "()Ljava/net/URI;")); }
URL File::toURL() { return URL(*classes[className]->invokeMethod<jobject>(this->object, "toURL", "()Ljava/net/URL;")); }
bool File::exists() { return bool(*classes[className]->invokeMethod<bool>(this->object, "exists", "()Z")); }
bool File::createNewFile() { return bool(*classes[className]->invokeMethod<bool>(this->object, "createNewFile", "()Z")); }
bool File::renameTo(File arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renameTo", "(Ljava/io/File;)Z", arg0)); }



String ConcurrentHashMap::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
bool ConcurrentHashMap::contains(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/lang/Object;)Z", arg0)); }
Enumeration ConcurrentHashMap::elements() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "elements", "()Ljava/util/Enumeration;")); }
void ConcurrentHashMap::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void ConcurrentHashMap::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
Enumeration ConcurrentHashMap::keys() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "keys", "()Ljava/util/Enumeration;")); }
ConcurrentHashMap_KeySetView ConcurrentHashMap::keySet(Object arg0) { return ConcurrentHashMap_KeySetView(*classes[className]->invokeMethod<jobject>(this->object, "keySet", "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;", arg0)); }
ConcurrentHashMap_KeySetView ConcurrentHashMap::keySet() { return ConcurrentHashMap_KeySetView(*classes[className]->invokeMethod<jobject>(this->object, "keySet", "()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;")); }
int ConcurrentHashMap::tableSizeFor(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("tableSizeFor", "(I)I", arg0)); }
long ConcurrentHashMap::sumCount() { return long(*classes[className]->invokeMethod<long>(this->object, "sumCount", "()J")); }
int ConcurrentHashMap::spread(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("spread", "(I)I", arg0)); }
ConcurrentHashMap_Node ConcurrentHashMap::tabAt(ConcurrentHashMap_Node_interface arg0, int arg1) { return ConcurrentHashMap_Node(*classes[className]->invokeStaticMethod<jobject>("tabAt", "([Ljava/util/concurrent/ConcurrentHashMap$Node;I)Ljava/util/concurrent/ConcurrentHashMap$Node;", arg0, arg1)); }
Object ConcurrentHashMap::putVal(Object arg0, Object arg1, bool arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "putVal", "(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object;", arg0, arg1, arg2)); }
bool ConcurrentHashMap::casTabAt(ConcurrentHashMap_Node_interface arg0, int arg1, ConcurrentHashMap_Node arg2, ConcurrentHashMap_Node arg3) { return bool(*classes[className]->invokeStaticMethod<bool>("casTabAt", "([Ljava/util/concurrent/ConcurrentHashMap$Node;ILjava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$Node;)Z", arg0, arg1, arg2, arg3)); }
void ConcurrentHashMap::treeifyBin(ConcurrentHashMap_Node_interface arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "treeifyBin", "([Ljava/util/concurrent/ConcurrentHashMap$Node;I)V", arg0, arg1)); }
void ConcurrentHashMap::addCount(long arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addCount", "(JI)V", arg0, arg1)); }
void ConcurrentHashMap::tryPresize(int arg0) { (classes[className]->invokeMethod<void>(this->object, "tryPresize", "(I)V", arg0)); }
Object ConcurrentHashMap::replaceNode(Object arg0, Object arg1, Object arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "replaceNode", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1, arg2)); }
void ConcurrentHashMap::setTabAt(ConcurrentHashMap_Node_interface arg0, int arg1, ConcurrentHashMap_Node arg2) { (classes[className]->invokeStaticMethod<void>("setTabAt", "([Ljava/util/concurrent/ConcurrentHashMap$Node;ILjava/util/concurrent/ConcurrentHashMap$Node;)V", arg0, arg1, arg2)); }
ConcurrentHashMap_Node ConcurrentHashMap::untreeify(ConcurrentHashMap_Node arg0) { return ConcurrentHashMap_Node(*classes[className]->invokeStaticMethod<jobject>("untreeify", "(Ljava/util/concurrent/ConcurrentHashMap$Node;)Ljava/util/concurrent/ConcurrentHashMap$Node;", arg0)); }
void ConcurrentHashMap::fullAddCount(long arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "fullAddCount", "(JZ)V", arg0, arg1)); }
int ConcurrentHashMap::resizeStamp(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("resizeStamp", "(I)I", arg0)); }
void ConcurrentHashMap::transfer(ConcurrentHashMap_Node_interface arg0, ConcurrentHashMap_Node_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "transfer", "([Ljava/util/concurrent/ConcurrentHashMap$Node;[Ljava/util/concurrent/ConcurrentHashMap$Node;)V", arg0, arg1)); }
int ConcurrentHashMap::batchFor(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "batchFor", "(J)I", arg0)); }
Class ConcurrentHashMap::comparableClassFor(Object arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("comparableClassFor", "(Ljava/lang/Object;)Ljava/lang/Class;", arg0)); }
int ConcurrentHashMap::compareComparables(Class arg0, Object arg1, Object arg2) { return int(*classes[className]->invokeStaticMethod<int>("compareComparables", "(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)I", arg0, arg1, arg2)); }
bool ConcurrentHashMap::removeEntryIf(Predicate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "removeEntryIf", "(Ljava/util/function/Predicate;)Z", arg0)); }
bool ConcurrentHashMap::removeValueIf(Predicate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "removeValueIf", "(Ljava/util/function/Predicate;)Z", arg0)); }
long ConcurrentHashMap::mappingCount() { return long(*classes[className]->invokeMethod<long>(this->object, "mappingCount", "()J")); }
ConcurrentHashMap_KeySetView ConcurrentHashMap::newKeySet(int arg0) { return ConcurrentHashMap_KeySetView(*classes[className]->invokeStaticMethod<jobject>("newKeySet", "(I)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;", arg0)); }
ConcurrentHashMap_KeySetView ConcurrentHashMap::newKeySet() { return ConcurrentHashMap_KeySetView(*classes[className]->invokeStaticMethod<jobject>("newKeySet", "()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;")); }
Object ConcurrentHashMap::search(long arg0, BiFunction arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "search", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1)); }
Object ConcurrentHashMap::reduce(long arg0, BiFunction arg1, BiFunction arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "reduce", "(JLjava/util/function/BiFunction;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2)); }
double ConcurrentHashMap::reduceToDouble(long arg0, ToDoubleBiFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*classes[className]->invokeMethod<double>(this->object, "reduceToDouble", "(JLjava/util/function/ToDoubleBiFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }
long ConcurrentHashMap::reduceToLong(long arg0, ToLongBiFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*classes[className]->invokeMethod<long>(this->object, "reduceToLong", "(JLjava/util/function/ToLongBiFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }
int ConcurrentHashMap::reduceToInt(long arg0, ToIntBiFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "reduceToInt", "(JLjava/util/function/ToIntBiFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }
void ConcurrentHashMap::forEachKey(long arg0, Consumer arg1) { (classes[className]->invokeMethod<void>(this->object, "forEachKey", "(JLjava/util/function/Consumer;)V", arg0, arg1)); }
void ConcurrentHashMap::forEachKey(long arg0, Function arg1, Consumer arg2) { (classes[className]->invokeMethod<void>(this->object, "forEachKey", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2)); }
Object ConcurrentHashMap::searchKeys(long arg0, Function arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "searchKeys", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1)); }
Object ConcurrentHashMap::reduceKeys(long arg0, BiFunction arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "reduceKeys", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1)); }
Object ConcurrentHashMap::reduceKeys(long arg0, Function arg1, BiFunction arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "reduceKeys", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2)); }
double ConcurrentHashMap::reduceKeysToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*classes[className]->invokeMethod<double>(this->object, "reduceKeysToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }
long ConcurrentHashMap::reduceKeysToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*classes[className]->invokeMethod<long>(this->object, "reduceKeysToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }
int ConcurrentHashMap::reduceKeysToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "reduceKeysToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }
void ConcurrentHashMap::forEachValue(long arg0, Function arg1, Consumer arg2) { (classes[className]->invokeMethod<void>(this->object, "forEachValue", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2)); }
void ConcurrentHashMap::forEachValue(long arg0, Consumer arg1) { (classes[className]->invokeMethod<void>(this->object, "forEachValue", "(JLjava/util/function/Consumer;)V", arg0, arg1)); }
Object ConcurrentHashMap::searchValues(long arg0, Function arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "searchValues", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1)); }
Object ConcurrentHashMap::reduceValues(long arg0, BiFunction arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "reduceValues", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1)); }
Object ConcurrentHashMap::reduceValues(long arg0, Function arg1, BiFunction arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "reduceValues", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2)); }
double ConcurrentHashMap::reduceValuesToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*classes[className]->invokeMethod<double>(this->object, "reduceValuesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }
long ConcurrentHashMap::reduceValuesToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*classes[className]->invokeMethod<long>(this->object, "reduceValuesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }
int ConcurrentHashMap::reduceValuesToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "reduceValuesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }
void ConcurrentHashMap::forEachEntry(long arg0, Consumer arg1) { (classes[className]->invokeMethod<void>(this->object, "forEachEntry", "(JLjava/util/function/Consumer;)V", arg0, arg1)); }
void ConcurrentHashMap::forEachEntry(long arg0, Function arg1, Consumer arg2) { (classes[className]->invokeMethod<void>(this->object, "forEachEntry", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V", arg0, arg1, arg2)); }
Object ConcurrentHashMap::searchEntries(long arg0, Function arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "searchEntries", "(JLjava/util/function/Function;)Ljava/lang/Object;", arg0, arg1)); }
Map_Entry ConcurrentHashMap::reduceEntries(long arg0, BiFunction arg1) { return Map_Entry(*classes[className]->invokeMethod<jobject>(this->object, "reduceEntries", "(JLjava/util/function/BiFunction;)Ljava/util/Map$Entry;", arg0, arg1)); }
Object ConcurrentHashMap::reduceEntries(long arg0, Function arg1, BiFunction arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "reduceEntries", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;", arg0, arg1, arg2)); }
double ConcurrentHashMap::reduceEntriesToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*classes[className]->invokeMethod<double>(this->object, "reduceEntriesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }
long ConcurrentHashMap::reduceEntriesToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*classes[className]->invokeMethod<long>(this->object, "reduceEntriesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }
int ConcurrentHashMap::reduceEntriesToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "reduceEntriesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }

Object ConcurrentHashMap_KeySetView::getMappedValue() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getMappedValue", "()Ljava/lang/Object;")); }

ConcurrentHashMap ConcurrentHashMap_CollectionView::getMap() { return ConcurrentHashMap(*classes[className]->invokeMethod<jobject>(this->object, "getMap", "()Ljava/util/concurrent/ConcurrentHashMap;")); }
String ConcurrentHashMap_CollectionView::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }


String ConcurrentHashMap_Node::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
ConcurrentHashMap_Node ConcurrentHashMap_Node::find(int arg0, Object arg1) { return ConcurrentHashMap_Node(*classes[className]->invokeMethod<jobject>(this->object, "find", "(ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$Node;", arg0, arg1)); }












String AbstractMap::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Object AbstractMap::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
bool AbstractMap::eq(Object arg0, Object arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("eq", "(Ljava/lang/Object;Ljava/lang/Object;)Z", arg0, arg1)); }

bool Constructor::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Constructor::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Constructor::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object Constructor::newInstance(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "newInstance", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
ConstructorRepository Constructor::getGenericInfo() { return ConstructorRepository(*classes[className]->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun/reflect/generics/repository/ConstructorRepository;")); }
GenericsFactory Constructor::getFactory() { return GenericsFactory(*classes[className]->invokeMethod<jobject>(this->object, "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;")); }
String Constructor::toGenericString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava/lang/String;")); }
void Constructor::setAccessible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }
void Constructor::checkCanSetAccessible(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava/lang/Class;)V", arg0)); }
String Constructor::toShortString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toShortString", "()Ljava/lang/String;")); }
Constructor Constructor::getRoot() { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "getRoot", "()Ljava/lang/reflect/Constructor;")); }
Constructor Constructor::copy() { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Ljava/lang/reflect/Constructor;")); }
bool Constructor::isVarArgs() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVarArgs", "()Z")); }
int Constructor::getParameterCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getParameterCount", "()I")); }
bool Constructor::hasGenericInformation() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasGenericInformation", "()Z")); }
void Constructor::specificToStringHeader(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "specificToStringHeader", "(Ljava/lang/StringBuilder;)V", arg0)); }
void Constructor::specificToGenericStringHeader(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "specificToGenericStringHeader", "(Ljava/lang/StringBuilder;)V", arg0)); }
AnnotatedType Constructor::getAnnotatedReturnType() { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedReturnType", "()Ljava/lang/reflect/AnnotatedType;")); }
bool Constructor::handleParameterNumberMismatch(int arg0, Class_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleParameterNumberMismatch", "(I[Ljava/lang/Class;)Z", arg0, arg1)); }
AnnotatedType Constructor::getAnnotatedReceiverType() { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedReceiverType", "()Ljava/lang/reflect/AnnotatedType;")); }
String Constructor::getSignature() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSignature", "()Ljava/lang/String;")); }
Object Constructor::newInstanceWithCaller(Object_interface arg0, bool arg1, Class arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "newInstanceWithCaller", "([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object;", arg0, arg1, arg2)); }
ConstructorAccessor Constructor::acquireConstructorAccessor() { return ConstructorAccessor(*classes[className]->invokeMethod<jobject>(this->object, "acquireConstructorAccessor", "()Ljdk/internal/reflect/ConstructorAccessor;")); }
ConstructorAccessor Constructor::getConstructorAccessor() { return ConstructorAccessor(*classes[className]->invokeMethod<jobject>(this->object, "getConstructorAccessor", "()Ljdk/internal/reflect/ConstructorAccessor;")); }
void Constructor::setConstructorAccessor(ConstructorAccessor arg0) { (classes[className]->invokeMethod<void>(this->object, "setConstructorAccessor", "(Ljdk/internal/reflect/ConstructorAccessor;)V", arg0)); }
int Constructor::getSlot() { return int(*classes[className]->invokeMethod<int>(this->object, "getSlot", "()I")); }

MethodTypeSignature ConstructorRepository::parse(String arg0) { return MethodTypeSignature(*classes[className]->invokeMethod<jobject>(this->object, "parse", "(Ljava/lang/String;)Lsun/reflect/generics/tree/MethodTypeSignature;", arg0)); }
ConstructorRepository ConstructorRepository::make(String arg0, GenericsFactory arg1) { return ConstructorRepository(*classes[className]->invokeStaticMethod<jobject>("make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/ConstructorRepository;", arg0, arg1)); }

MethodTypeSignature MethodTypeSignature::make(FormalTypeParameter_interface arg0, TypeSignature_interface arg1, ReturnType arg2, FieldTypeSignature_interface arg3) { return MethodTypeSignature(*classes[className]->invokeStaticMethod<jobject>("make", "([Lsun/reflect/generics/tree/FormalTypeParameter;[Lsun/reflect/generics/tree/TypeSignature;Lsun/reflect/generics/tree/ReturnType;[Lsun/reflect/generics/tree/FieldTypeSignature;)Lsun/reflect/generics/tree/MethodTypeSignature;", arg0, arg1, arg2, arg3)); }
ReturnType MethodTypeSignature::getReturnType() { return ReturnType(*classes[className]->invokeMethod<jobject>(this->object, "getReturnType", "()Lsun/reflect/generics/tree/ReturnType;")); }
void MethodTypeSignature::accept(Visitor arg0) { (classes[className]->invokeMethod<void>(this->object, "accept", "(Lsun/reflect/generics/visitor/Visitor;)V", arg0)); }








Tree AbstractRepository::parse(String arg0) { return Tree(*classes[className]->invokeMethod<jobject>(this->object, "parse", "(Ljava/lang/String;)Lsun/reflect/generics/tree/Tree;", arg0)); }
Reifier AbstractRepository::getReifier() { return Reifier(*classes[className]->invokeMethod<jobject>(this->object, "getReifier", "()Lsun/reflect/generics/visitor/Reifier;")); }
Tree AbstractRepository::getTree() { return Tree(*classes[className]->invokeMethod<jobject>(this->object, "getTree", "()Lsun/reflect/generics/tree/Tree;")); }
GenericsFactory AbstractRepository::getFactory() { return GenericsFactory(*classes[className]->invokeMethod<jobject>(this->object, "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;")); }


Type Reifier::getResult() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "getResult", "()Ljava/lang/reflect/Type;")); }
GenericsFactory Reifier::getFactory() { return GenericsFactory(*classes[className]->invokeMethod<jobject>(this->object, "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;")); }
Reifier Reifier::make(GenericsFactory arg0) { return Reifier(*classes[className]->invokeStaticMethod<jobject>("make", "(Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/visitor/Reifier;", arg0)); }




ConstructorRepository Executable::getGenericInfo() { return ConstructorRepository(*classes[className]->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun/reflect/generics/repository/ConstructorRepository;")); }
Map Executable::declaredAnnotations() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "declaredAnnotations", "()Ljava/util/Map;")); }
String Executable::toGenericString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava/lang/String;")); }
String Executable::typeVarBounds(TypeVariable arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("typeVarBounds", "(Ljava/lang/reflect/TypeVariable;)Ljava/lang/String;", arg0)); }
bool Executable::hasRealParameterData() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasRealParameterData", "()Z")); }
bool Executable::isVarArgs() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVarArgs", "()Z")); }
int Executable::getParameterCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getParameterCount", "()I")); }
bool Executable::equalParamTypes(Class_interface arg0, Class_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equalParamTypes", "([Ljava/lang/Class;[Ljava/lang/Class;)Z", arg0, arg1)); }
String Executable::sharedToString(int arg0, bool arg1, Class_interface arg2, Class_interface arg3) { return String(*classes[className]->invokeMethod<jobject>(this->object, "sharedToString", "(IZ[Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/String;", arg0, arg1, arg2, arg3)); }
String Executable::sharedToGenericString(int arg0, bool arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "sharedToGenericString", "(IZ)Ljava/lang/String;", arg0, arg1)); }
AnnotatedType Executable::getAnnotatedReturnType0(Type arg0) { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedReturnType0", "(Ljava/lang/reflect/Type;)Ljava/lang/reflect/AnnotatedType;", arg0)); }
bool Executable::hasGenericInformation() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasGenericInformation", "()Z")); }
void Executable::specificToStringHeader(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "specificToStringHeader", "(Ljava/lang/StringBuilder;)V", arg0)); }
void Executable::specificToGenericStringHeader(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "specificToGenericStringHeader", "(Ljava/lang/StringBuilder;)V", arg0)); }
AnnotatedType Executable::getAnnotatedReturnType() { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedReturnType", "()Ljava/lang/reflect/AnnotatedType;")); }
bool Executable::handleParameterNumberMismatch(int arg0, Class_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleParameterNumberMismatch", "(I[Ljava/lang/Class;)Z", arg0, arg1)); }
void Executable::printModifiersIfNonzero(StringBuilder arg0, int arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "printModifiersIfNonzero", "(Ljava/lang/StringBuilder;IZ)V", arg0, arg1, arg2)); }
void Executable::verifyParameters(Parameter_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "verifyParameters", "([Ljava/lang/reflect/Parameter;)V", arg0)); }
Type Executable::parameterize(Class arg0) { return Type(*classes[className]->invokeMethod<jobject>(this->object, "parameterize", "(Ljava/lang/Class;)Ljava/lang/reflect/Type;", arg0)); }
AnnotatedType Executable::getAnnotatedReceiverType() { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedReceiverType", "()Ljava/lang/reflect/AnnotatedType;")); }



void AccessibleObject::checkPermission() { (classes[className]->invokeStaticMethod<void>("checkPermission", "()V")); }
void AccessibleObject::setAccessible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }
void AccessibleObject::setAccessible(AccessibleObject_interface arg0, bool arg1) { (classes[className]->invokeStaticMethod<void>("setAccessible", "([Ljava/lang/reflect/AccessibleObject;Z)V", arg0, arg1)); }
void AccessibleObject::checkAccess(Class arg0, Class arg1, Class arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "checkAccess", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;I)V", arg0, arg1, arg2, arg3)); }
void AccessibleObject::checkCanSetAccessible(Class arg0, Class arg1) { (classes[className]->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava/lang/Class;Ljava/lang/Class;)V", arg0, arg1)); }
void AccessibleObject::checkCanSetAccessible(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava/lang/Class;)V", arg0)); }
bool AccessibleObject::checkCanSetAccessible(Class arg0, Class arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkCanSetAccessible", "(Ljava/lang/Class;Ljava/lang/Class;Z)Z", arg0, arg1, arg2)); }
bool AccessibleObject::setAccessible0(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setAccessible0", "(Z)Z", arg0)); }
bool AccessibleObject::isSubclassOf(Class arg0, Class arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSubclassOf", "(Ljava/lang/Class;Ljava/lang/Class;)Z", arg0, arg1)); }
bool AccessibleObject::printStackTraceWhenAccessFails() { return bool(*classes[className]->invokeStaticMethod<bool>("printStackTraceWhenAccessFails", "()Z")); }
bool AccessibleObject::verifyAccess(Class arg0, Class arg1, Class arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "verifyAccess", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;I)Z", arg0, arg1, arg2, arg3)); }
bool AccessibleObject::isAccessChecked(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAccessChecked", "(Ljava/lang/Class;)Z", arg0)); }
bool AccessibleObject::isAccessChecked(Class arg0, Class arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAccessChecked", "(Ljava/lang/Class;Ljava/lang/Class;)Z", arg0, arg1)); }
bool AccessibleObject::slowVerifyAccess(Class arg0, Class arg1, Class arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "slowVerifyAccess", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;I)Z", arg0, arg1, arg2, arg3)); }
bool AccessibleObject::trySetAccessible() { return bool(*classes[className]->invokeMethod<bool>(this->object, "trySetAccessible", "()Z")); }
String AccessibleObject::toShortString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toShortString", "()Ljava/lang/String;")); }
bool AccessibleObject::isAccessible() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAccessible", "()Z")); }
bool AccessibleObject::canAccess(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAccess", "(Ljava/lang/Object;)Z", arg0)); }
AccessibleObject AccessibleObject::getRoot() { return AccessibleObject(*classes[className]->invokeMethod<jobject>(this->object, "getRoot", "()Ljava/lang/reflect/AccessibleObject;")); }


Object MethodHandle::invokeBasic(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeBasic", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::linkToVirtual(Object_interface arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("linkToVirtual", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::linkToStatic(Object_interface arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("linkToStatic", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::linkToSpecial(Object_interface arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("linkToSpecial", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::linkToInterface(Object_interface arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("linkToInterface", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::linkToNative(Object_interface arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("linkToNative", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::invoke(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invoke", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::invokeExact(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeExact", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
MethodType MethodHandle::type() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "type", "()Ljava/lang/invoke/MethodType;")); }
String MethodHandle::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
bool MethodHandle::viewAsTypeChecks(MethodType arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "viewAsTypeChecks", "(Ljava/lang/invoke/MethodType;Z)Z", arg0, arg1)); }
MemberName MethodHandle::internalMemberName() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "internalMemberName", "()Ljava/lang/invoke/MemberName;")); }
void MethodHandle::updateForm(Function arg0) { (classes[className]->invokeMethod<void>(this->object, "updateForm", "(Ljava/util/function/Function;)V", arg0)); }
Object MethodHandle::internalProperties() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "internalProperties", "()Ljava/lang/Object;")); }
BoundMethodHandle MethodHandle::rebind() { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "rebind", "()Ljava/lang/invoke/BoundMethodHandle;")); }
MethodHandle MethodHandle::copyWith(MethodType arg0, LambdaForm arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWith", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandle::viewAsType(MethodType arg0, bool arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "viewAsType", "(Ljava/lang/invoke/MethodType;Z)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
bool MethodHandle::isCrackable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCrackable", "()Z")); }
MethodHandle MethodHandle::asType(MethodType arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asType", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0)); }
Object MethodHandle::invokeWithArguments(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeWithArguments", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object MethodHandle::invokeWithArguments(List arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeWithArguments", "(Ljava/util/List;)Ljava/lang/Object;", arg0)); }
MethodHandle MethodHandle::asTypeCached(MethodType arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asTypeCached", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandle::asTypeUncached(MethodType arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asTypeUncached", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandle::asSpreader(int arg0, Class arg1, int arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asSpreader", "(ILjava/lang/Class;I)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandle::asSpreader(Class arg0, int arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asSpreader", "(Ljava/lang/Class;I)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodType MethodHandle::asSpreaderChecks(Class arg0, int arg1, int arg2) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "asSpreaderChecks", "(Ljava/lang/Class;II)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }
void MethodHandle::spreadArrayChecks(Class arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "spreadArrayChecks", "(Ljava/lang/Class;I)V", arg0, arg1)); }
bool MethodHandle::isVarargsCollector() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVarargsCollector", "()Z")); }
MethodHandle MethodHandle::asVarargsCollector(Class arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asVarargsCollector", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandle::asCollector(Class arg0, int arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asCollector", "(Ljava/lang/Class;I)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandle::asCollector(int arg0, Class arg1, int arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asCollector", "(ILjava/lang/Class;I)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
bool MethodHandle::asCollectorChecks(Class arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "asCollectorChecks", "(Ljava/lang/Class;II)Z", arg0, arg1, arg2)); }
BoundMethodHandle MethodHandle::bindArgumentL(int arg0, Object arg1) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentL", "(ILjava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1)); }
String MethodHandle::debugString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "debugString", "()Ljava/lang/String;")); }
String MethodHandle::standardString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "standardString", "()Ljava/lang/String;")); }
LambdaForm MethodHandle::internalForm() { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "internalForm", "()Ljava/lang/invoke/LambdaForm;")); }
MethodHandle MethodHandle::withVarargs(bool arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "withVarargs", "(Z)Ljava/lang/invoke/MethodHandle;", arg0)); }
void MethodHandle::customize() { (classes[className]->invokeMethod<void>(this->object, "customize", "()V")); }
MethodHandle MethodHandle::asFixedArity() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "asFixedArity", "()Ljava/lang/invoke/MethodHandle;")); }
MethodHandle MethodHandle::bindTo(Object arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindTo", "(Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandle::setVarargs(MemberName arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "setVarargs", "(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;", arg0)); }
Class MethodHandle::internalCallerClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "internalCallerClass", "()Ljava/lang/Class;")); }
MethodHandleImpl_Intrinsic MethodHandle::intrinsicName() { return MethodHandleImpl_Intrinsic(*classes[className]->invokeMethod<jobject>(this->object, "intrinsicName", "()Ljava/lang/invoke/MethodHandleImpl$Intrinsic;")); }
Object MethodHandle::intrinsicData() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "intrinsicData", "()Ljava/lang/Object;")); }
MethodHandle MethodHandle::withInternalMemberName(MemberName arg0, bool arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "withInternalMemberName", "(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
bool MethodHandle::isInvokeSpecial() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvokeSpecial", "()Z")); }
Object MethodHandle::internalValues() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "internalValues", "()Ljava/lang/Object;")); }
void MethodHandle::maybeCustomize() { (classes[className]->invokeMethod<void>(this->object, "maybeCustomize", "()V")); }

Class MethodType::returnType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "returnType", "()Ljava/lang/Class;")); }
bool MethodType::equals(MethodType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/MethodType;)Z", arg0)); }
bool MethodType::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String MethodType::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
MethodType MethodType::basicType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "basicType", "()Ljava/lang/invoke/MethodType;")); }
int MethodType::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
MethodType MethodType::wrap() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "wrap", "()Ljava/lang/invoke/MethodType;")); }
void MethodType::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void MethodType::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
Class MethodType::parameterType(int arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava/lang/Class;", arg0)); }
MethodType MethodType::insertParameterTypes(int arg0, List arg1) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "insertParameterTypes", "(ILjava/util/List;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::insertParameterTypes(int arg0, Class_interface arg1) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "insertParameterTypes", "(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::changeReturnType(Class arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "changeReturnType", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0)); }
MethodTypeForm MethodType::form() { return MethodTypeForm(*classes[className]->invokeMethod<jobject>(this->object, "form", "()Ljava/lang/invoke/MethodTypeForm;")); }
MethodType MethodType::methodType(Class arg0, Class_interface arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("methodType", "(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::methodType(Class arg0, MethodType arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("methodType", "(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::methodType(Class arg0, Class arg1, Class_interface arg2) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("methodType", "(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }
MethodType MethodType::methodType(Class arg0, List arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("methodType", "(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::methodType(Class arg0, Class arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("methodType", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::methodType(Class arg0) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("methodType", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0)); }
MethodType MethodType::dropParameterTypes(int arg0, int arg1) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "dropParameterTypes", "(II)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::appendParameterTypes(List arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "appendParameterTypes", "(Ljava/util/List;)Ljava/lang/invoke/MethodType;", arg0)); }
MethodType MethodType::appendParameterTypes(Class_interface arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "appendParameterTypes", "([Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0)); }
MethodType MethodType::invokerType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "invokerType", "()Ljava/lang/invoke/MethodType;")); }
MethodType MethodType::genericMethodType(int arg0, bool arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("genericMethodType", "(IZ)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::genericMethodType(int arg0) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("genericMethodType", "(I)Ljava/lang/invoke/MethodType;", arg0)); }
Invokers MethodType::invokers() { return Invokers(*classes[className]->invokeMethod<jobject>(this->object, "invokers", "()Ljava/lang/invoke/Invokers;")); }
bool MethodType::isConvertibleTo(MethodType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConvertibleTo", "(Ljava/lang/invoke/MethodType;)Z", arg0)); }
MethodType MethodType::replaceParameterTypes(int arg0, int arg1, Class_interface arg2) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "replaceParameterTypes", "(II[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }
bool MethodType::canConvert(Class arg0, Class arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("canConvert", "(Ljava/lang/Class;Ljava/lang/Class;)Z", arg0, arg1)); }
MethodType MethodType::asSpreaderType(Class arg0, int arg1, int arg2) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "asSpreaderType", "(Ljava/lang/Class;II)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }
Class MethodType::lastParameterType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "lastParameterType", "()Ljava/lang/Class;")); }
MethodType MethodType::asCollectorType(Class arg0, int arg1, int arg2) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "asCollectorType", "(Ljava/lang/Class;II)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }
Class MethodType::leadingReferenceParameter() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "leadingReferenceParameter", "()Ljava/lang/Class;")); }
bool MethodType::isViewableAs(MethodType arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isViewableAs", "(Ljava/lang/invoke/MethodType;Z)Z", arg0, arg1)); }
MethodType MethodType::erase() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "erase", "()Ljava/lang/invoke/MethodType;")); }
MethodType MethodType::fromDescriptor(String arg0, ClassLoader arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("fromDescriptor", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodType MethodType::makeImpl(Class arg0, Class_interface arg1, bool arg2) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("makeImpl", "(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }
String MethodType::toMethodDescriptorString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toMethodDescriptorString", "()Ljava/lang/String;")); }
Class MethodType::rtype() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "rtype", "()Ljava/lang/Class;")); }
void MethodType::checkSlotCount(int arg0) { (classes[className]->invokeStaticMethod<void>("checkSlotCount", "(I)V", arg0)); }
int MethodType::checkPtypes(Class_interface arg0) { return int(*classes[className]->invokeStaticMethod<int>("checkPtypes", "([Ljava/lang/Class;)I", arg0)); }
IndexOutOfBoundsException MethodType::newIndexOutOfBoundsException(Object arg0) { return IndexOutOfBoundsException(*classes[className]->invokeStaticMethod<jobject>("newIndexOutOfBoundsException", "(Ljava/lang/Object;)Ljava/lang/IndexOutOfBoundsException;", arg0)); }
int MethodType::parameterSlotCount() { return int(*classes[className]->invokeMethod<int>(this->object, "parameterSlotCount", "()I")); }
bool MethodType::isGeneric() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isGeneric", "()Z")); }
bool MethodType::hasPrimitives() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasPrimitives", "()Z")); }
MethodType MethodType::unwrap() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "unwrap", "()Ljava/lang/invoke/MethodType;")); }
MethodType MethodType::wrapWithPrims(MethodType arg0) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("wrapWithPrims", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodType;", arg0)); }
MethodType MethodType::unwrapWithNoPrims(MethodType arg0) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("unwrapWithNoPrims", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodType;", arg0)); }
bool MethodType::canConvertParameters(Class_interface arg0, Class_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canConvertParameters", "([Ljava/lang/Class;[Ljava/lang/Class;)Z", arg0, arg1)); }
bool MethodType::explicitCastEquivalentToAsType(MethodType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "explicitCastEquivalentToAsType", "(Ljava/lang/invoke/MethodType;)Z", arg0)); }
bool MethodType::explicitCastEquivalentToAsType(Class arg0, Class arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("explicitCastEquivalentToAsType", "(Ljava/lang/Class;Ljava/lang/Class;)Z", arg0, arg1)); }
MethodType MethodType::changeParameterType(int arg0, Class arg1) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "changeParameterType", "(ILjava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
void MethodType::setForm(MethodTypeForm arg0) { (classes[className]->invokeMethod<void>(this->object, "setForm", "(Ljava/lang/invoke/MethodTypeForm;)V", arg0)); }
bool MethodType::hasWrappers() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasWrappers", "()Z")); }
MethodType MethodType::generic() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "generic", "()Ljava/lang/invoke/MethodType;")); }
bool MethodType::effectivelyIdenticalParameters(int arg0, List arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "effectivelyIdenticalParameters", "(ILjava/util/List;)Z", arg0, arg1)); }
MethodType MethodType::fromMethodDescriptorString(String arg0, ClassLoader arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("fromMethodDescriptorString", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
String MethodType::toFieldDescriptorString(Class arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toFieldDescriptorString", "(Ljava/lang/Class;)Ljava/lang/String;", arg0)); }
Object MethodType::readResolve() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readResolve", "()Ljava/lang/Object;")); }

String MethodTypeForm::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
MethodType MethodTypeForm::basicType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "basicType", "()Ljava/lang/invoke/MethodType;")); }
LambdaForm MethodTypeForm::cachedLambdaForm(int arg0) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "cachedLambdaForm", "(I)Ljava/lang/invoke/LambdaForm;", arg0)); }
LambdaForm MethodTypeForm::setCachedLambdaForm(int arg0, LambdaForm arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "setCachedLambdaForm", "(ILjava/lang/invoke/LambdaForm;)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
int MethodTypeForm::parameterCount() { return int(*classes[className]->invokeMethod<int>(this->object, "parameterCount", "()I")); }
MethodTypeForm MethodTypeForm::findForm(MethodType arg0) { return MethodTypeForm(*classes[className]->invokeStaticMethod<jobject>("findForm", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodTypeForm;", arg0)); }
int MethodTypeForm::parameterSlotCount() { return int(*classes[className]->invokeMethod<int>(this->object, "parameterSlotCount", "()I")); }
bool MethodTypeForm::hasPrimitives() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasPrimitives", "()Z")); }
MethodType MethodTypeForm::erasedType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "erasedType", "()Ljava/lang/invoke/MethodType;")); }
Class MethodTypeForm::canonicalize(Class arg0, int arg1) { return Class(*classes[className]->invokeStaticMethod<jobject>("canonicalize", "(Ljava/lang/Class;I)Ljava/lang/Class;", arg0, arg1)); }
MethodType MethodTypeForm::canonicalize(MethodType arg0, int arg1) { return MethodType(*classes[className]->invokeStaticMethod<jobject>("canonicalize", "(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/MethodType;", arg0, arg1)); }
MethodHandle MethodTypeForm::cachedMethodHandle(int arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "cachedMethodHandle", "(I)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodTypeForm::setCachedMethodHandle(int arg0, MethodHandle arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "setCachedMethodHandle", "(ILjava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }

LambdaForm_BasicType LambdaForm::returnType() { return LambdaForm_BasicType(*classes[className]->invokeMethod<jobject>(this->object, "returnType", "()Ljava/lang/invoke/LambdaForm$BasicType;")); }
bool LambdaForm::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
bool LambdaForm::equals(LambdaForm arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/LambdaForm;)Z", arg0)); }
String LambdaForm::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LambdaForm::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool LambdaForm::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
bool LambdaForm::contains(LambdaForm_Name arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/lang/invoke/LambdaForm$Name;)Z", arg0)); }
LambdaForm_NamedFunction LambdaForm::identity(LambdaForm_BasicType arg0) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("identity", "(Ljava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0)); }
LambdaForm_BasicType LambdaForm::parameterType(int arg0) { return LambdaForm_BasicType(*classes[className]->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava/lang/invoke/LambdaForm$BasicType;", arg0)); }
LambdaForm_Name LambdaForm::parameter(int arg0) { return LambdaForm_Name(*classes[className]->invokeMethod<jobject>(this->object, "parameter", "(I)Ljava/lang/invoke/LambdaForm$Name;", arg0)); }
MethodType LambdaForm::methodType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "methodType", "()Ljava/lang/invoke/MethodType;")); }
void LambdaForm::compileToBytecode() { (classes[className]->invokeMethod<void>(this->object, "compileToBytecode", "()V")); }
bool LambdaForm::debugNames() { return bool(*classes[className]->invokeStaticMethod<bool>("debugNames", "()Z")); }
void LambdaForm::associateWithDebugName(LambdaForm arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("associateWithDebugName", "(Ljava/lang/invoke/LambdaForm;Ljava/lang/String;)V", arg0, arg1)); }
LambdaForm LambdaForm::uncustomize() { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "uncustomize", "()Ljava/lang/invoke/LambdaForm;")); }
void LambdaForm::prepare() { (classes[className]->invokeMethod<void>(this->object, "prepare", "()V")); }
LambdaFormEditor LambdaForm::editor() { return LambdaFormEditor(*classes[className]->invokeMethod<jobject>(this->object, "editor", "()Ljava/lang/invoke/LambdaFormEditor;")); }
LambdaForm LambdaForm::customize(MethodHandle arg0) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "customize", "(Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/LambdaForm;", arg0)); }
bool LambdaForm::namesOK(int arg0, LambdaForm_Name_interface arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("namesOK", "(I[Ljava/lang/invoke/LambdaForm$Name;)Z", arg0, arg1)); }
int LambdaForm::arity() { return int(*classes[className]->invokeMethod<int>(this->object, "arity", "()I")); }
int LambdaForm::fixResult(int arg0, LambdaForm_Name_interface arg1) { return int(*classes[className]->invokeStaticMethod<int>("fixResult", "(I[Ljava/lang/invoke/LambdaForm$Name;)I", arg0, arg1)); }
int LambdaForm::normalize() { return int(*classes[className]->invokeMethod<int>(this->object, "normalize", "()I")); }
bool LambdaForm::nameRefsAreLegal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "nameRefsAreLegal", "()Z")); }
String LambdaForm::basicTypeSignature() { return String(*classes[className]->invokeMethod<jobject>(this->object, "basicTypeSignature", "()Ljava/lang/String;")); }
String LambdaForm::basicTypeSignature(MethodType arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("basicTypeSignature", "(Ljava/lang/invoke/MethodType;)Ljava/lang/String;", arg0)); }
bool LambdaForm::isValidSignature(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isValidSignature", "(Ljava/lang/String;)Z", arg0)); }
LambdaForm_NamedFunction LambdaForm::constantZero(LambdaForm_BasicType arg0) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("constantZero", "(Ljava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0)); }
String LambdaForm::generateDebugName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "generateDebugName", "()Ljava/lang/String;")); }
LambdaForm_Name LambdaForm::internArgument(LambdaForm_Name arg0) { return LambdaForm_Name(*classes[className]->invokeStaticMethod<jobject>("internArgument", "(Ljava/lang/invoke/LambdaForm$Name;)Ljava/lang/invoke/LambdaForm$Name;", arg0)); }
int LambdaForm::lastUseIndex(LambdaForm_Name arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastUseIndex", "(Ljava/lang/invoke/LambdaForm$Name;)I", arg0)); }
bool LambdaForm::isMatchingIdiom(int arg0, String arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMatchingIdiom", "(ILjava/lang/String;I)Z", arg0, arg1, arg2)); }
bool LambdaForm::forceInterpretation() { return bool(*classes[className]->invokeMethod<bool>(this->object, "forceInterpretation", "()Z")); }
void LambdaForm::traceInterpreter(String arg0, Object arg1) { (classes[className]->invokeStaticMethod<void>("traceInterpreter", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
void LambdaForm::traceInterpreter(String arg0, Object arg1, Object_interface arg2) { (classes[className]->invokeStaticMethod<void>("traceInterpreter", "(Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)V", arg0, arg1, arg2)); }
PerfCounter LambdaForm::failedCompilationCounter() { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("failedCompilationCounter", "()Ljdk/internal/perf/PerfCounter;")); }
int LambdaForm::signatureArity(String arg0) { return int(*classes[className]->invokeStaticMethod<int>("signatureArity", "(Ljava/lang/String;)I", arg0)); }
bool LambdaForm::valueMatches(LambdaForm_BasicType arg0, Class arg1, Object arg2) { return bool(*classes[className]->invokeStaticMethod<bool>("valueMatches", "(Ljava/lang/invoke/LambdaForm$BasicType;Ljava/lang/Class;Ljava/lang/Object;)Z", arg0, arg1, arg2)); }
bool LambdaForm::checkInt(Class arg0, Object arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("checkInt", "(Ljava/lang/Class;Ljava/lang/Object;)Z", arg0, arg1)); }
bool LambdaForm::checkRef(Class arg0, Object arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("checkRef", "(Ljava/lang/Class;Ljava/lang/Object;)Z", arg0, arg1)); }
Object LambdaForm::interpretWithArgumentsTracing(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "interpretWithArgumentsTracing", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
void LambdaForm::checkInvocationCounter() { (classes[className]->invokeMethod<void>(this->object, "checkInvocationCounter", "()V")); }
bool LambdaForm::arityCheck(Object_interface arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "arityCheck", "([Ljava/lang/Object;)Z", arg0)); }
Object LambdaForm::interpretName(LambdaForm_Name arg0, Object_interface arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "interpretName", "(Ljava/lang/invoke/LambdaForm$Name;[Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1)); }
bool LambdaForm::resultCheck(Object_interface arg0, Object arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "resultCheck", "([Ljava/lang/Object;Ljava/lang/Object;)Z", arg0, arg1)); }
bool LambdaForm::argumentTypesMatch(String arg0, Object_interface arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("argumentTypesMatch", "(Ljava/lang/String;[Ljava/lang/Object;)Z", arg0, arg1)); }
String LambdaForm::lambdaName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "lambdaName", "()Ljava/lang/String;")); }
int LambdaForm::useCount(LambdaForm_Name arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "useCount", "(Ljava/lang/invoke/LambdaForm$Name;)I", arg0)); }
LambdaForm_Name LambdaForm::argument(int arg0, LambdaForm_BasicType arg1) { return LambdaForm_Name(*classes[className]->invokeStaticMethod<jobject>("argument", "(ILjava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm$Name;", arg0, arg1)); }
void LambdaForm::createFormsFor(LambdaForm_BasicType arg0) { (classes[className]->invokeStaticMethod<void>("createFormsFor", "(Ljava/lang/invoke/LambdaForm$BasicType;)V", arg0)); }
Object LambdaForm::parameterConstraint(int arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "parameterConstraint", "(I)Ljava/lang/Object;", arg0)); }
int LambdaForm::expressionCount() { return int(*classes[className]->invokeMethod<int>(this->object, "expressionCount", "()I")); }
bool LambdaForm::isSelectAlternative(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSelectAlternative", "(I)Z", arg0)); }
bool LambdaForm::isGuardWithCatch(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isGuardWithCatch", "(I)Z", arg0)); }
bool LambdaForm::isTryFinally(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTryFinally", "(I)Z", arg0)); }
bool LambdaForm::isTableSwitch(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTableSwitch", "(I)Z", arg0)); }
bool LambdaForm::isLoop(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLoop", "(I)Z", arg0)); }
Object LambdaForm::interpretWithArguments(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "interpretWithArguments", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
String LambdaForm::shortenSignature(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("shortenSignature", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
LambdaForm LambdaForm::identityForm(LambdaForm_BasicType arg0) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("identityForm", "(Ljava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm;", arg0)); }
LambdaForm LambdaForm::zeroForm(LambdaForm_BasicType arg0) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("zeroForm", "(Ljava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm;", arg0)); }
int LambdaForm::identity_I(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("identity_I", "(I)I", arg0)); }
long LambdaForm::identity_J(long arg0) { return long(*classes[className]->invokeStaticMethod<long>("identity_J", "(J)J", arg0)); }
float LambdaForm::identity_F(float arg0) { return float(*classes[className]->invokeStaticMethod<float>("identity_F", "(F)F", arg0)); }
double LambdaForm::identity_D(double arg0) { return double(*classes[className]->invokeStaticMethod<double>("identity_D", "(D)D", arg0)); }
Object LambdaForm::identity_L(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("identity_L", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
void LambdaForm::identity_V() { (classes[className]->invokeStaticMethod<void>("identity_V", "()V")); }
int LambdaForm::zero_I() { return int(*classes[className]->invokeStaticMethod<int>("zero_I", "()I")); }
long LambdaForm::zero_J() { return long(*classes[className]->invokeStaticMethod<long>("zero_J", "()J")); }
float LambdaForm::zero_F() { return float(*classes[className]->invokeStaticMethod<float>("zero_F", "()F")); }
double LambdaForm::zero_D() { return double(*classes[className]->invokeStaticMethod<double>("zero_D", "()D")); }
Object LambdaForm::zero_L() { return Object(*classes[className]->invokeStaticMethod<jobject>("zero_L", "()Ljava/lang/Object;")); }

bool LambdaForm_BasicType::checkBasicType() { return bool(*classes[className]->invokeStaticMethod<bool>("checkBasicType", "()Z")); }
Class LambdaForm_BasicType::basicTypeClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "basicTypeClass", "()Ljava/lang/Class;")); }
Wrapper LambdaForm_BasicType::basicTypeWrapper() { return Wrapper(*classes[className]->invokeMethod<jobject>(this->object, "basicTypeWrapper", "()Lsun/invoke/util/Wrapper;")); }
int LambdaForm_BasicType::basicTypeSlots() { return int(*classes[className]->invokeMethod<int>(this->object, "basicTypeSlots", "()I")); }
LambdaForm_BasicType LambdaForm_BasicType::basicType(Wrapper arg0) { return LambdaForm_BasicType(*classes[className]->invokeStaticMethod<jobject>("basicType", "(Lsun/invoke/util/Wrapper;)Ljava/lang/invoke/LambdaForm$BasicType;", arg0)); }
LambdaForm_BasicType LambdaForm_BasicType::basicType(byte arg0) { return LambdaForm_BasicType(*classes[className]->invokeStaticMethod<jobject>("basicType", "(B)Ljava/lang/invoke/LambdaForm$BasicType;", arg0)); }
LambdaForm_BasicType LambdaForm_BasicType::basicType(Class arg0) { return LambdaForm_BasicType(*classes[className]->invokeStaticMethod<jobject>("basicType", "(Ljava/lang/Class;)Ljava/lang/invoke/LambdaForm$BasicType;", arg0)); }
LambdaForm_BasicType LambdaForm_BasicType::basicType(char arg0) { return LambdaForm_BasicType(*classes[className]->invokeStaticMethod<jobject>("basicType", "(C)Ljava/lang/invoke/LambdaForm$BasicType;", arg0)); }
LambdaForm_BasicType LambdaForm_BasicType::valueOf(String arg0) { return LambdaForm_BasicType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/invoke/LambdaForm$BasicType;", arg0)); }
char LambdaForm_BasicType::basicTypeChar() { return char(*classes[className]->invokeMethod<char>(this->object, "basicTypeChar", "()C")); }
char LambdaForm_BasicType::basicTypeChar(Class arg0) { return char(*classes[className]->invokeStaticMethod<char>("basicTypeChar", "(Ljava/lang/Class;)C", arg0)); }
bool LambdaForm_BasicType::isArgBasicTypeChar(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isArgBasicTypeChar", "(C)Z", arg0)); }
bool LambdaForm_BasicType::isBasicTypeChar(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isBasicTypeChar", "(C)Z", arg0)); }

Class Wrapper::asPrimitiveType(Class arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("asPrimitiveType", "(Ljava/lang/Class;)Ljava/lang/Class;", arg0)); }
int Wrapper::hashWrap(Class arg0) { return int(*classes[className]->invokeStaticMethod<int>("hashWrap", "(Ljava/lang/Class;)I", arg0)); }
int Wrapper::hashChar(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("hashChar", "(C)I", arg0)); }
Class Wrapper::forceType(Class arg0, Class arg1) { return Class(*classes[className]->invokeStaticMethod<jobject>("forceType", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Class;", arg0, arg1)); }
ClassCastException Wrapper::newClassCastException(Class arg0, Class arg1) { return ClassCastException(*classes[className]->invokeStaticMethod<jobject>("newClassCastException", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/ClassCastException;", arg0, arg1)); }
Number Wrapper::numberValue(Object arg0) { return Number(*classes[className]->invokeStaticMethod<jobject>("numberValue", "(Ljava/lang/Object;)Ljava/lang/Number;", arg0)); }
bool Wrapper::boolValue(byte arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("boolValue", "(B)Z", arg0)); }
bool Wrapper::checkConvertibleFrom() { return bool(*classes[className]->invokeStaticMethod<bool>("checkConvertibleFrom", "()Z")); }
String Wrapper::detailString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "detailString", "()Ljava/lang/String;")); }
int Wrapper::bitWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "bitWidth", "()I")); }
int Wrapper::stackSlots() { return int(*classes[className]->invokeMethod<int>(this->object, "stackSlots", "()I")); }
bool Wrapper::isUnsigned() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUnsigned", "()Z")); }
bool Wrapper::isPrimitiveType(Class arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isPrimitiveType", "(Ljava/lang/Class;)Z", arg0)); }
Object Wrapper::makeArray(int arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "makeArray", "(I)Ljava/lang/Object;", arg0)); }
void Wrapper::copyArrayUnboxing(Object_interface arg0, int arg1, Object arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "copyArrayUnboxing", "([Ljava/lang/Object;ILjava/lang/Object;II)V", arg0, arg1, arg2, arg3, arg4)); }
void Wrapper::copyArrayBoxing(Object arg0, int arg1, Object_interface arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "copyArrayBoxing", "(Ljava/lang/Object;I[Ljava/lang/Object;II)V", arg0, arg1, arg2, arg3, arg4)); }
bool Wrapper::isNumeric() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNumeric", "()Z")); }
bool Wrapper::isDoubleWord() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDoubleWord", "()Z")); }
Class Wrapper::asWrapperType(Class arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("asWrapperType", "(Ljava/lang/Class;)Ljava/lang/Class;", arg0)); }
String Wrapper::wrapperSimpleName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "wrapperSimpleName", "()Ljava/lang/String;")); }
String Wrapper::primitiveSimpleName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "primitiveSimpleName", "()Ljava/lang/String;")); }
bool Wrapper::isIntegral() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isIntegral", "()Z")); }
bool Wrapper::isSingleWord() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSingleWord", "()Z")); }
bool Wrapper::isOther() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOther", "()Z")); }
bool Wrapper::isFloating() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFloating", "()Z")); }
bool Wrapper::isSigned() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSigned", "()Z")); }
Wrapper Wrapper::findPrimitiveType(Class arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("findPrimitiveType", "(Ljava/lang/Class;)Lsun/invoke/util/Wrapper;", arg0)); }
int Wrapper::hashPrim(Class arg0) { return int(*classes[className]->invokeStaticMethod<int>("hashPrim", "(Ljava/lang/Class;)I", arg0)); }
Wrapper Wrapper::findWrapperType(Class arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("findWrapperType", "(Ljava/lang/Class;)Lsun/invoke/util/Wrapper;", arg0)); }
Object Wrapper::cast(Object arg0, Class arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "cast", "(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;", arg0, arg1)); }
Object Wrapper::convert(Object arg0, Class arg1, bool arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "convert", "(Ljava/lang/Object;Ljava/lang/Class;Z)Ljava/lang/Object;", arg0, arg1, arg2)); }
Object Wrapper::convert(Object arg0, Class arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "convert", "(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;", arg0, arg1)); }
Wrapper Wrapper::valueOf(String arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lsun/invoke/util/Wrapper;", arg0)); }
Object Wrapper::wrap(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "wrap", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object Wrapper::wrap(int arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "wrap", "(I)Ljava/lang/Object;", arg0)); }
Wrapper Wrapper::forPrimitiveType(char arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("forPrimitiveType", "(C)Lsun/invoke/util/Wrapper;", arg0)); }
Wrapper Wrapper::forPrimitiveType(Class arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("forPrimitiveType", "(Ljava/lang/Class;)Lsun/invoke/util/Wrapper;", arg0)); }
String Wrapper::basicTypeString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "basicTypeString", "()Ljava/lang/String;")); }
Class Wrapper::arrayType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "arrayType", "()Ljava/lang/Class;")); }
Class Wrapper::primitiveType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "primitiveType", "()Ljava/lang/Class;")); }
RuntimeException Wrapper::newIllegalArgumentException(String arg0) { return RuntimeException(*classes[className]->invokeStaticMethod<jobject>("newIllegalArgumentException", "(Ljava/lang/String;)Ljava/lang/RuntimeException;", arg0)); }
RuntimeException Wrapper::newIllegalArgumentException(String arg0, Object arg1) { return RuntimeException(*classes[className]->invokeStaticMethod<jobject>("newIllegalArgumentException", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/RuntimeException;", arg0, arg1)); }
Wrapper Wrapper::forBasicType(Class arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("forBasicType", "(Ljava/lang/Class;)Lsun/invoke/util/Wrapper;", arg0)); }
Wrapper Wrapper::forBasicType(char arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("forBasicType", "(C)Lsun/invoke/util/Wrapper;", arg0)); }
char Wrapper::basicTypeChar() { return char(*classes[className]->invokeMethod<char>(this->object, "basicTypeChar", "()C")); }
char Wrapper::basicTypeChar(Class arg0) { return char(*classes[className]->invokeStaticMethod<char>("basicTypeChar", "(Ljava/lang/Class;)C", arg0)); }
bool Wrapper::isSubwordOrInt() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSubwordOrInt", "()Z")); }
Object Wrapper::zero() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "zero", "()Ljava/lang/Object;")); }
Object Wrapper::zero(Class arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "zero", "(Ljava/lang/Class;)Ljava/lang/Object;", arg0)); }
bool Wrapper::isConvertibleFrom(Wrapper arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConvertibleFrom", "(Lsun/invoke/util/Wrapper;)Z", arg0)); }
Class Wrapper::wrapperType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "wrapperType", "()Ljava/lang/Class;")); }
Class Wrapper::wrapperType(Class arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "wrapperType", "(Ljava/lang/Class;)Ljava/lang/Class;", arg0)); }
bool Wrapper::isWrapperType(Class arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isWrapperType", "(Ljava/lang/Class;)Z", arg0)); }
Wrapper Wrapper::forWrapperType(Class arg0) { return Wrapper(*classes[className]->invokeStaticMethod<jobject>("forWrapperType", "(Ljava/lang/Class;)Lsun/invoke/util/Wrapper;", arg0)); }


byte Number::byteValue() { return byte(*classes[className]->invokeMethod<byte>(this->object, "byteValue", "()B")); }
short Number::shortValue() { return short(*classes[className]->invokeMethod<short>(this->object, "shortValue", "()S")); }
int Number::intValue() { return int(*classes[className]->invokeMethod<int>(this->object, "intValue", "()I")); }
long Number::longValue() { return long(*classes[className]->invokeMethod<long>(this->object, "longValue", "()J")); }
float Number::floatValue() { return float(*classes[className]->invokeMethod<float>(this->object, "floatValue", "()F")); }
double Number::doubleValue() { return double(*classes[className]->invokeMethod<double>(this->object, "doubleValue", "()D")); }

LambdaForm_Name LambdaForm_Name::withConstraint(Object arg0) { return LambdaForm_Name(*classes[className]->invokeMethod<jobject>(this->object, "withConstraint", "(Ljava/lang/Object;)Ljava/lang/invoke/LambdaForm$Name;", arg0)); }
bool LambdaForm_Name::typesMatch(LambdaForm_BasicType arg0, Object arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("typesMatch", "(Ljava/lang/invoke/LambdaForm$BasicType;Ljava/lang/Object;)Z", arg0, arg1)); }
bool LambdaForm_Name::typesMatch(LambdaForm_NamedFunction arg0, Object_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "typesMatch", "(Ljava/lang/invoke/LambdaForm$NamedFunction;[Ljava/lang/Object;)Z", arg0, arg1)); }
char LambdaForm_Name::typeChar() { return char(*classes[className]->invokeMethod<char>(this->object, "typeChar", "()C")); }
LambdaForm_Name LambdaForm_Name::replaceName(LambdaForm_Name arg0, LambdaForm_Name arg1) { return LambdaForm_Name(*classes[className]->invokeMethod<jobject>(this->object, "replaceName", "(Ljava/lang/invoke/LambdaForm$Name;Ljava/lang/invoke/LambdaForm$Name;)Ljava/lang/invoke/LambdaForm$Name;", arg0, arg1)); }
bool LambdaForm_Name::isLinkerMethodInvoke() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLinkerMethodInvoke", "()Z")); }
int LambdaForm_Name::index() { return int(*classes[className]->invokeMethod<int>(this->object, "index", "()I")); }
LambdaForm_BasicType LambdaForm_Name::type() { return LambdaForm_BasicType(*classes[className]->invokeMethod<jobject>(this->object, "type", "()Ljava/lang/invoke/LambdaForm$BasicType;")); }
bool LambdaForm_Name::equals(LambdaForm_Name arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/LambdaForm$Name;)Z", arg0)); }
bool LambdaForm_Name::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String LambdaForm_Name::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LambdaForm_Name::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool LambdaForm_Name::refersTo(Class arg0, String arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "refersTo", "(Ljava/lang/Class;Ljava/lang/String;)Z", arg0, arg1)); }
String LambdaForm_Name::debugString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "debugString", "()Ljava/lang/String;")); }
LambdaForm_Name LambdaForm_Name::newIndex(int arg0) { return LambdaForm_Name(*classes[className]->invokeMethod<jobject>(this->object, "newIndex", "(I)Ljava/lang/invoke/LambdaForm$Name;", arg0)); }
bool LambdaForm_Name::isParam() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isParam", "()Z")); }
bool LambdaForm_Name::initIndex(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "initIndex", "(I)Z", arg0)); }
LambdaForm_Name LambdaForm_Name::cloneWithIndex(int arg0) { return LambdaForm_Name(*classes[className]->invokeMethod<jobject>(this->object, "cloneWithIndex", "(I)Ljava/lang/invoke/LambdaForm$Name;", arg0)); }
LambdaForm_Name LambdaForm_Name::replaceNames(LambdaForm_Name_interface arg0, LambdaForm_Name_interface arg1, int arg2, int arg3) { return LambdaForm_Name(*classes[className]->invokeMethod<jobject>(this->object, "replaceNames", "([Ljava/lang/invoke/LambdaForm$Name;[Ljava/lang/invoke/LambdaForm$Name;II)Ljava/lang/invoke/LambdaForm$Name;", arg0, arg1, arg2, arg3)); }
void LambdaForm_Name::internArguments() { (classes[className]->invokeMethod<void>(this->object, "internArguments", "()V")); }
bool LambdaForm_Name::isInvokeBasic() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvokeBasic", "()Z")); }
int LambdaForm_Name::lastUseIndex(LambdaForm_Name arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastUseIndex", "(Ljava/lang/invoke/LambdaForm$Name;)I", arg0)); }
bool LambdaForm_Name::isConstantZero() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConstantZero", "()Z")); }
String LambdaForm_Name::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }
String LambdaForm_Name::exprString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "exprString", "()Ljava/lang/String;")); }
int LambdaForm_Name::useCount(LambdaForm_Name arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "useCount", "(Ljava/lang/invoke/LambdaForm$Name;)I", arg0)); }

MethodHandle LambdaForm_NamedFunction::resolvedHandle() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "resolvedHandle", "()Ljava/lang/invoke/MethodHandle;")); }
Object LambdaForm_NamedFunction::invokeWithArgumentsTracing(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeWithArgumentsTracing", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
MethodHandle LambdaForm_NamedFunction::computeInvoker(MethodTypeForm arg0) { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("computeInvoker", "(Ljava/lang/invoke/MethodTypeForm;)Ljava/lang/invoke/MethodHandle;", arg0)); }
bool LambdaForm_NamedFunction::assertMemberIsConsistent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "assertMemberIsConsistent", "()Z")); }
Class LambdaForm_NamedFunction::memberDeclaringClassOrNull() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "memberDeclaringClassOrNull", "()Ljava/lang/Class;")); }
LambdaForm_BasicType LambdaForm_NamedFunction::returnType() { return LambdaForm_BasicType(*classes[className]->invokeMethod<jobject>(this->object, "returnType", "()Ljava/lang/invoke/LambdaForm$BasicType;")); }
bool LambdaForm_NamedFunction::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String LambdaForm_NamedFunction::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LambdaForm_NamedFunction::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void LambdaForm_NamedFunction::resolve() { (classes[className]->invokeMethod<void>(this->object, "resolve", "()V")); }
LambdaForm_BasicType LambdaForm_NamedFunction::parameterType(int arg0) { return LambdaForm_BasicType(*classes[className]->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava/lang/invoke/LambdaForm$BasicType;", arg0)); }
MemberName LambdaForm_NamedFunction::member() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "member", "()Ljava/lang/invoke/MemberName;")); }
MethodType LambdaForm_NamedFunction::methodType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "methodType", "()Ljava/lang/invoke/MethodType;")); }
Object LambdaForm_NamedFunction::invokeWithArguments(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invokeWithArguments", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
MethodHandleImpl_Intrinsic LambdaForm_NamedFunction::intrinsicName() { return MethodHandleImpl_Intrinsic(*classes[className]->invokeMethod<jobject>(this->object, "intrinsicName", "()Ljava/lang/invoke/MethodHandleImpl$Intrinsic;")); }
Object LambdaForm_NamedFunction::intrinsicData() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "intrinsicData", "()Ljava/lang/Object;")); }
int LambdaForm_NamedFunction::arity() { return int(*classes[className]->invokeMethod<int>(this->object, "arity", "()I")); }
bool LambdaForm_NamedFunction::isInvokeBasic(MemberName arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isInvokeBasic", "(Ljava/lang/invoke/MemberName;)Z", arg0)); }
bool LambdaForm_NamedFunction::isConstantZero() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConstantZero", "()Z")); }
bool LambdaForm_NamedFunction::isIdentity() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isIdentity", "()Z")); }
MethodHandle LambdaForm_NamedFunction::invoker() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "invoker", "()Ljava/lang/invoke/MethodHandle;")); }

bool MemberName::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
bool MemberName::equals(MemberName arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/MemberName;)Z", arg0)); }
String MemberName::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int MemberName::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
MemberName MemberName::clone() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/invoke/MemberName;")); }
ClassLoader MemberName::getClassLoader() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava/lang/ClassLoader;")); }
bool MemberName::isMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMethod", "()Z")); }
MemberName_Factory MemberName::getFactory() { return MemberName_Factory(*classes[className]->invokeStaticMethod<jobject>("getFactory", "()Ljava/lang/invoke/MemberName$Factory;")); }
Class MemberName::getReturnType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getReturnType", "()Ljava/lang/Class;")); }
bool MemberName::isConstructor() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConstructor", "()Z")); }
bool MemberName::isStatic() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStatic", "()Z")); }
void MemberName::init(Class arg0, String arg1, Object arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "init", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;I)V", arg0, arg1, arg2, arg3)); }
bool MemberName::isPublic() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPublic", "()Z")); }
String MemberName::message() { return String(*classes[className]->invokeMethod<jobject>(this->object, "message", "()Ljava/lang/String;")); }
bool MemberName::refersTo(Class arg0, String arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "refersTo", "(Ljava/lang/Class;Ljava/lang/String;)Z", arg0, arg1)); }
bool MemberName::isProtected() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isProtected", "()Z")); }
Object MemberName::getType() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getType", "()Ljava/lang/Object;")); }
bool MemberName::isBridge() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBridge", "()Z")); }
String MemberName::getSignature() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSignature", "()Ljava/lang/String;")); }
bool MemberName::isFinal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFinal", "()Z")); }
bool MemberName::isResolved() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isResolved", "()Z")); }
byte MemberName::getReferenceKind() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getReferenceKind", "()B")); }
bool MemberName::isAbstract() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAbstract", "()Z")); }
MethodType MemberName::getMethodType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "getMethodType", "()Ljava/lang/invoke/MethodType;")); }
MethodType MemberName::getMethodOrFieldType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "getMethodOrFieldType", "()Ljava/lang/invoke/MethodType;")); }
bool MemberName::isField() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isField", "()Z")); }
MemberName MemberName::asSpecial() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "asSpecial", "()Ljava/lang/invoke/MemberName;")); }
MemberName MemberName::asConstructor() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "asConstructor", "()Ljava/lang/invoke/MemberName;")); }
bool MemberName::isInvocable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvocable", "()Z")); }
MethodType MemberName::getInvocationType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "getInvocationType", "()Ljava/lang/invoke/MethodType;")); }
bool MemberName::isMethodHandleInvoke() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMethodHandleInvoke", "()Z")); }
Class MemberName::getFieldType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getFieldType", "()Ljava/lang/Class;")); }
bool MemberName::isVolatile() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVolatile", "()Z")); }
bool MemberName::isGetter() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isGetter", "()Z")); }
bool MemberName::isVarargs() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVarargs", "()Z")); }
IllegalAccessException MemberName::makeAccessException(String arg0, Object arg1) { return IllegalAccessException(*classes[className]->invokeMethod<jobject>(this->object, "makeAccessException", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/IllegalAccessException;", arg0, arg1)); }
ReflectiveOperationException MemberName::makeAccessException() { return ReflectiveOperationException(*classes[className]->invokeMethod<jobject>(this->object, "makeAccessException", "()Ljava/lang/ReflectiveOperationException;")); }
void MemberName::expandFromVM() { (classes[className]->invokeMethod<void>(this->object, "expandFromVM", "()V")); }
bool MemberName::isSetter() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSetter", "()Z")); }
bool MemberName::isType() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isType", "()Z")); }
bool MemberName::staticIsConsistent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "staticIsConsistent", "()Z")); }
bool MemberName::isObjectPublicMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isObjectPublicMethod", "()Z")); }
bool MemberName::testFlags(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "testFlags", "(II)Z", arg0, arg1)); }
bool MemberName::isMethodHandleInvokeName(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isMethodHandleInvokeName", "(Ljava/lang/String;)Z", arg0)); }
bool MemberName::isVarHandleMethodInvokeName(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isVarHandleMethodInvokeName", "(Ljava/lang/String;)Z", arg0)); }
bool MemberName::isPrivate() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPrivate", "()Z")); }
bool MemberName::isNative() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNative", "()Z")); }
bool MemberName::testAllFlags(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "testAllFlags", "(I)Z", arg0)); }
bool MemberName::testAnyFlags(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "testAnyFlags", "(I)Z", arg0)); }
int MemberName::flagsMods(int arg0, int arg1, byte arg2) { return int(*classes[className]->invokeStaticMethod<int>("flagsMods", "(IIB)I", arg0, arg1, arg2)); }
bool MemberName::isVarHandleMethodInvoke() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVarHandleMethodInvoke", "()Z")); }
MemberName MemberName::changeReferenceKind(byte arg0, byte arg1) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "changeReferenceKind", "(BB)Ljava/lang/invoke/MemberName;", arg0, arg1)); }
bool MemberName::referenceKindIsConsistentWith(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "referenceKindIsConsistentWith", "(I)Z", arg0)); }
void MemberName::initResolved(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "initResolved", "(Z)V", arg0)); }
MemberName MemberName::makeMethodHandleInvoke(String arg0, MethodType arg1) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("makeMethodHandleInvoke", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0, arg1)); }
MemberName MemberName::makeMethodHandleInvoke(String arg0, MethodType arg1, int arg2) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("makeMethodHandleInvoke", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2)); }
MemberName MemberName::makeVarHandleMethodInvoke(String arg0, MethodType arg1) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("makeVarHandleMethodInvoke", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0, arg1)); }
MemberName MemberName::makeVarHandleMethodInvoke(String arg0, MethodType arg1, int arg2) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("makeVarHandleMethodInvoke", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2)); }
String MemberName::getMethodDescriptor() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getMethodDescriptor", "()Ljava/lang/String;")); }
bool MemberName::referenceKindIsConsistent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "referenceKindIsConsistent", "()Z")); }
bool MemberName::vminfoIsConsistent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "vminfoIsConsistent", "()Z")); }
bool MemberName::canBeStaticallyBound() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeStaticallyBound", "()Z")); }
bool MemberName::isFieldOrMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFieldOrMethod", "()Z")); }
bool MemberName::isPackage() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPackage", "()Z")); }
bool MemberName::isCallerSensitive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCallerSensitive", "()Z")); }
bool MemberName::isTrustedFinalField() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTrustedFinalField", "()Z")); }
bool MemberName::isAccessibleFrom(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAccessibleFrom", "(Ljava/lang/Class;)Z", arg0)); }
MemberName MemberName::asNormalOriginal() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "asNormalOriginal", "()Ljava/lang/invoke/MemberName;")); }
MemberName MemberName::asSetter() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "asSetter", "()Ljava/lang/invoke/MemberName;")); }
MemberName MemberName::getDefinition() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "getDefinition", "()Ljava/lang/invoke/MemberName;")); }
bool MemberName::hasReceiverTypeDispatch() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasReceiverTypeDispatch", "()Z")); }
void MemberName::checkForTypeAlias(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "checkForTypeAlias", "(Ljava/lang/Class;)V", arg0)); }

List MemberName_Factory::getNestedTypes(Class arg0, bool arg1, Class arg2) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getNestedTypes", "(Ljava/lang/Class;ZLjava/lang/Class;)Ljava/util/List;", arg0, arg1, arg2)); }
List MemberName_Factory::getFields(Class arg0, bool arg1, Class arg2) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getFields", "(Ljava/lang/Class;ZLjava/lang/Class;)Ljava/util/List;", arg0, arg1, arg2)); }
List MemberName_Factory::getFields(Class arg0, bool arg1, String arg2, Class arg3, Class arg4) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getFields", "(Ljava/lang/Class;ZLjava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;", arg0, arg1, arg2, arg3, arg4)); }
List MemberName_Factory::getMethods(Class arg0, bool arg1, String arg2, MethodType arg3, Class arg4) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getMethods", "(Ljava/lang/Class;ZLjava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Class;)Ljava/util/List;", arg0, arg1, arg2, arg3, arg4)); }
List MemberName_Factory::getMethods(Class arg0, bool arg1, Class arg2) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getMethods", "(Ljava/lang/Class;ZLjava/lang/Class;)Ljava/util/List;", arg0, arg1, arg2)); }
List MemberName_Factory::getConstructors(Class arg0, Class arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getConstructors", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;", arg0, arg1)); }
MemberName MemberName_Factory::resolve(byte arg0, MemberName arg1, Class arg2, int arg3, bool arg4) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolve", "(BLjava/lang/invoke/MemberName;Ljava/lang/Class;IZ)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2, arg3, arg4)); }
MemberName MemberName_Factory::resolveOrNull(byte arg0, MemberName arg1, Class arg2, int arg3) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveOrNull", "(BLjava/lang/invoke/MemberName;Ljava/lang/Class;I)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2, arg3)); }
MemberName MemberName_Factory::resolveOrFail(byte arg0, MemberName arg1, Class arg2, int arg3, Class arg4) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava/lang/invoke/MemberName;Ljava/lang/Class;ILjava/lang/Class;)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2, arg3, arg4)); }
List MemberName_Factory::getMembers(Class arg0, String arg1, Object arg2, int arg3, Class arg4) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getMembers", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;ILjava/lang/Class;)Ljava/util/List;", arg0, arg1, arg2, arg3, arg4)); }



MethodHandleImpl_Intrinsic MethodHandleImpl_Intrinsic::valueOf(String arg0) { return MethodHandleImpl_Intrinsic(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/invoke/MethodHandleImpl$Intrinsic;", arg0)); }


LambdaForm LambdaFormEditor::noteLoopLocalTypesForm(int arg0, LambdaForm_BasicType_interface arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "noteLoopLocalTypesForm", "(I[Ljava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
BoundMethodHandle_SpeciesData LambdaFormEditor::newSpeciesData(LambdaForm_BasicType arg0) { return BoundMethodHandle_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "newSpeciesData", "(Ljava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/BoundMethodHandle$SpeciesData;", arg0)); }
BoundMethodHandle_SpeciesData LambdaFormEditor::oldSpeciesData() { return BoundMethodHandle_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "oldSpeciesData", "()Ljava/lang/invoke/BoundMethodHandle$SpeciesData;")); }
MethodType LambdaFormEditor::bindArgumentType(BoundMethodHandle arg0, int arg1, LambdaForm_BasicType arg2) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentType", "(Ljava/lang/invoke/BoundMethodHandle;ILjava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }
LambdaForm LambdaFormEditor::bindArgumentForm(int arg0) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentForm", "(I)Ljava/lang/invoke/LambdaForm;", arg0)); }
LambdaForm LambdaFormEditor::getInCache(LambdaFormEditor_TransformKey arg0) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "getInCache", "(Ljava/lang/invoke/LambdaFormEditor$TransformKey;)Ljava/lang/invoke/LambdaForm;", arg0)); }
LambdaForm LambdaFormEditor::putInCache(LambdaFormEditor_TransformKey arg0, LambdaForm arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "putInCache", "(Ljava/lang/invoke/LambdaFormEditor$TransformKey;Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm LambdaFormEditor::makeArgumentCombinationForm(int arg0, MethodType arg1, bool arg2, bool arg3) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "makeArgumentCombinationForm", "(ILjava/lang/invoke/MethodType;ZZ)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2, arg3)); }
LambdaForm LambdaFormEditor::makeArgumentCombinationForm(int arg0, MethodType arg1, arr_I arg2, bool arg3, bool arg4) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "makeArgumentCombinationForm", "(ILjava/lang/invoke/MethodType;[IZZ)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2, arg3, arg4)); }
bool LambdaFormEditor::formParametersMatch(LambdaForm arg0, LambdaForm_BasicType arg1, arr_I arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "formParametersMatch", "(Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/LambdaForm$BasicType;[I)Z", arg0, arg1, arg2)); }
LambdaForm LambdaFormEditor::makeRepeatedFilterForm(MethodType arg0, arr_I arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "makeRepeatedFilterForm", "(Ljava/lang/invoke/MethodType;[I)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
bool LambdaFormEditor::permutedTypesMatch(arr_I arg0, LambdaForm_BasicType_interface arg1, LambdaForm_Name_interface arg2, int arg3) { return bool(*classes[className]->invokeStaticMethod<bool>("permutedTypesMatch", "([I[Ljava/lang/invoke/LambdaForm$BasicType;[Ljava/lang/invoke/LambdaForm$Name;I)Z", arg0, arg1, arg2, arg3)); }
LambdaFormBuffer LambdaFormEditor::buffer() { return LambdaFormBuffer(*classes[className]->invokeMethod<jobject>(this->object, "buffer", "()Ljava/lang/invoke/LambdaFormBuffer;")); }
LambdaForm LambdaFormEditor::spreadArgumentsForm(int arg0, Class arg1, int arg2) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "spreadArgumentsForm", "(ILjava/lang/Class;I)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2)); }
LambdaForm LambdaFormEditor::collectArgumentsForm(int arg0, MethodType arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "collectArgumentsForm", "(ILjava/lang/invoke/MethodType;)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
BoundMethodHandle LambdaFormEditor::bindArgumentL(BoundMethodHandle arg0, int arg1, Object arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentL", "(Ljava/lang/invoke/BoundMethodHandle;ILjava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
LambdaFormEditor LambdaFormEditor::lambdaFormEditor(LambdaForm arg0) { return LambdaFormEditor(*classes[className]->invokeStaticMethod<jobject>("lambdaFormEditor", "(Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/LambdaFormEditor;", arg0)); }
LambdaForm LambdaFormEditor::dupArgumentForm(int arg0, int arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "dupArgumentForm", "(II)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm LambdaFormEditor::addArgumentForm(int arg0, LambdaForm_BasicType arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "addArgumentForm", "(ILjava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm LambdaFormEditor::permuteArgumentsForm(int arg0, arr_I arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "permuteArgumentsForm", "(I[I)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
BoundMethodHandle LambdaFormEditor::bindArgumentI(BoundMethodHandle arg0, int arg1, int arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentI", "(Ljava/lang/invoke/BoundMethodHandle;II)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle LambdaFormEditor::bindArgumentJ(BoundMethodHandle arg0, int arg1, long arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentJ", "(Ljava/lang/invoke/BoundMethodHandle;IJ)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle LambdaFormEditor::bindArgumentF(BoundMethodHandle arg0, int arg1, float arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentF", "(Ljava/lang/invoke/BoundMethodHandle;IF)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle LambdaFormEditor::bindArgumentD(BoundMethodHandle arg0, int arg1, double arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentD", "(Ljava/lang/invoke/BoundMethodHandle;ID)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
LambdaForm LambdaFormEditor::filterReturnForm(LambdaForm_BasicType arg0, bool arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "filterReturnForm", "(Ljava/lang/invoke/LambdaForm$BasicType;Z)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm LambdaFormEditor::filterRepeatedArgumentForm(LambdaForm_BasicType arg0, arr_I arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "filterRepeatedArgumentForm", "(Ljava/lang/invoke/LambdaForm$BasicType;[I)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm LambdaFormEditor::filterArgumentForm(int arg0, LambdaForm_BasicType arg1) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "filterArgumentForm", "(ILjava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm LambdaFormEditor::collectReturnValueForm(MethodType arg0) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "collectReturnValueForm", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/LambdaForm;", arg0)); }
LambdaForm LambdaFormEditor::foldArgumentsForm(int arg0, bool arg1, MethodType arg2) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "foldArgumentsForm", "(IZLjava/lang/invoke/MethodType;)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2)); }
LambdaForm LambdaFormEditor::foldArgumentsForm(int arg0, bool arg1, MethodType arg2, arr_I arg3) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "foldArgumentsForm", "(IZLjava/lang/invoke/MethodType;[I)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2, arg3)); }
LambdaForm LambdaFormEditor::filterArgumentsForm(int arg0, MethodType arg1, arr_I arg2) { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "filterArgumentsForm", "(ILjava/lang/invoke/MethodType;[I)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2)); }


BoundMethodHandle_SpeciesData BoundMethodHandle_SpeciesData::extendWith(byte arg0) { return BoundMethodHandle_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "extendWith", "(B)Ljava/lang/invoke/BoundMethodHandle$SpeciesData;", arg0)); }
String BoundMethodHandle_SpeciesData::deriveTypeString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "deriveTypeString", "()Ljava/lang/String;")); }
bool BoundMethodHandle_SpeciesData::verifyTHAargs(MemberName arg0, int arg1, List arg2, List arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "verifyTHAargs", "(Ljava/lang/invoke/MemberName;ILjava/util/List;Ljava/util/List;)Z", arg0, arg1, arg2, arg3)); }
List BoundMethodHandle_SpeciesData::deriveFieldTypes(String arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "deriveFieldTypes", "(Ljava/lang/String;)Ljava/util/List;", arg0)); }
String BoundMethodHandle_SpeciesData::deriveClassName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "deriveClassName", "()Ljava/lang/String;")); }
MethodHandle BoundMethodHandle_SpeciesData::deriveTransformHelper(MemberName arg0, int arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "deriveTransformHelper", "(Ljava/lang/invoke/MemberName;I)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
List BoundMethodHandle_SpeciesData::deriveTransformHelperArguments(MemberName arg0, int arg1, List arg2, List arg3) { return List(*classes[className]->invokeMethod<jobject>(this->object, "deriveTransformHelperArguments", "(Ljava/lang/invoke/MemberName;ILjava/util/List;Ljava/util/List;)Ljava/util/List;", arg0, arg1, arg2, arg3)); }

LambdaForm_NamedFunction ClassSpecializer_SpeciesData::getterFunction(int arg0) { return LambdaForm_NamedFunction(*classes[className]->invokeMethod<jobject>(this->object, "getterFunction", "(I)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0)); }
MethodHandle ClassSpecializer_SpeciesData::getter(int arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getter", "(I)Ljava/lang/invoke/MethodHandle;", arg0)); }
int ClassSpecializer_SpeciesData::fieldCount() { return int(*classes[className]->invokeMethod<int>(this->object, "fieldCount", "()I")); }
List ClassSpecializer_SpeciesData::fieldTypes() { return List(*classes[className]->invokeMethod<jobject>(this->object, "fieldTypes", "()Ljava/util/List;")); }
String ClassSpecializer_SpeciesData::deriveTypeString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "deriveTypeString", "()Ljava/lang/String;")); }
List ClassSpecializer_SpeciesData::deriveFieldTypes(Object arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "deriveFieldTypes", "(Ljava/lang/Object;)Ljava/util/List;", arg0)); }
ClassSpecializer ClassSpecializer_SpeciesData::outer() { return ClassSpecializer(*classes[className]->invokeMethod<jobject>(this->object, "outer", "()Ljava/lang/invoke/ClassSpecializer;")); }
String ClassSpecializer_SpeciesData::deriveClassName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "deriveClassName", "()Ljava/lang/String;")); }
MethodHandle ClassSpecializer_SpeciesData::deriveTransformHelper(MemberName arg0, int arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "deriveTransformHelper", "(Ljava/lang/invoke/MemberName;I)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
List ClassSpecializer_SpeciesData::deriveTransformHelperArguments(MemberName arg0, int arg1, List arg2, List arg3) { return List(*classes[className]->invokeMethod<jobject>(this->object, "deriveTransformHelperArguments", "(Ljava/lang/invoke/MemberName;ILjava/util/List;Ljava/util/List;)Ljava/util/List;", arg0, arg1, arg2, arg3)); }
Class ClassSpecializer_SpeciesData::speciesCode() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "speciesCode", "()Ljava/lang/Class;")); }
List ClassSpecializer_SpeciesData::getters() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getters", "()Ljava/util/List;")); }
MethodType ClassSpecializer_SpeciesData::transformHelperType(int arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "transformHelperType", "(I)Ljava/lang/invoke/MethodType;", arg0)); }
List ClassSpecializer_SpeciesData::getterFunctions() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getterFunctions", "()Ljava/util/List;")); }
MethodHandle ClassSpecializer_SpeciesData::transformHelper(int arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "transformHelper", "(I)Ljava/lang/invoke/MethodHandle;", arg0)); }
Class ClassSpecializer_SpeciesData::deriveSuperClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "deriveSuperClass", "()Ljava/lang/Class;")); }
bool ClassSpecializer_SpeciesData::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ClassSpecializer_SpeciesData::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ClassSpecializer_SpeciesData::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
MethodHandle ClassSpecializer_SpeciesData::factory() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "factory", "()Ljava/lang/invoke/MethodHandle;")); }
Object ClassSpecializer_SpeciesData::key() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "key", "()Ljava/lang/Object;")); }
bool ClassSpecializer_SpeciesData::isResolved() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isResolved", "()Z")); }

Class ClassSpecializer::keyType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "keyType", "()Ljava/lang/Class;")); }
ClassSpecializer_SpeciesData ClassSpecializer::topSpecies() { return ClassSpecializer_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "topSpecies", "()Ljava/lang/invoke/ClassSpecializer$SpeciesData;")); }
ClassSpecializer_SpeciesData ClassSpecializer::findSpecies(Object arg0) { return ClassSpecializer_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "findSpecies", "(Ljava/lang/Object;)Ljava/lang/invoke/ClassSpecializer$SpeciesData;", arg0)); }
ClassSpecializer_Factory ClassSpecializer::makeFactory() { return ClassSpecializer_Factory(*classes[className]->invokeMethod<jobject>(this->object, "makeFactory", "()Ljava/lang/invoke/ClassSpecializer$Factory;")); }
Object ClassSpecializer::topSpeciesKey() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "topSpeciesKey", "()Ljava/lang/Object;")); }
ClassSpecializer_SpeciesData ClassSpecializer::newSpeciesData(Object arg0) { return ClassSpecializer_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "newSpeciesData", "(Ljava/lang/Object;)Ljava/lang/invoke/ClassSpecializer$SpeciesData;", arg0)); }
Class ClassSpecializer::topClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "topClass", "()Ljava/lang/Class;")); }
Class ClassSpecializer::metaType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "metaType", "()Ljava/lang/Class;")); }
MethodType ClassSpecializer::baseConstructorType() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "baseConstructorType", "()Ljava/lang/invoke/MethodType;")); }
List ClassSpecializer::transformMethods() { return List(*classes[className]->invokeMethod<jobject>(this->object, "transformMethods", "()Ljava/util/List;")); }
RuntimeException ClassSpecializer::newIAE(String arg0, Throwable arg1) { return RuntimeException(*classes[className]->invokeStaticMethod<jobject>("newIAE", "(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/lang/RuntimeException;", arg0, arg1)); }
String ClassSpecializer::classBCName(Class arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("classBCName", "(Ljava/lang/Class;)Ljava/lang/String;", arg0)); }
String ClassSpecializer::classBCName(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("classBCName", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String ClassSpecializer::classSig(Class arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("classSig", "(Ljava/lang/Class;)Ljava/lang/String;", arg0)); }
String ClassSpecializer::classSig(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("classSig", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
Constructor ClassSpecializer::reflectConstructor(Class arg0, Class_interface arg1) { return Constructor(*classes[className]->invokeStaticMethod<jobject>("reflectConstructor", "(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0, arg1)); }
Field ClassSpecializer::reflectField(Class arg0, String arg1) { return Field(*classes[className]->invokeStaticMethod<jobject>("reflectField", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;", arg0, arg1)); }
String ClassSpecializer::methodSig(MethodType arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("methodSig", "(Ljava/lang/invoke/MethodType;)Ljava/lang/String;", arg0)); }
String ClassSpecializer::className_(Class arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("className", "(Ljava/lang/Class;)Ljava/lang/String;", arg0)); }
ClassSpecializer_Factory ClassSpecializer::factory() { return ClassSpecializer_Factory(*classes[className]->invokeMethod<jobject>(this->object, "factory", "()Ljava/lang/invoke/ClassSpecializer$Factory;")); }

ClassSpecializer_SpeciesData ClassSpecializer_Factory::loadSpecies(ClassSpecializer_SpeciesData arg0) { return ClassSpecializer_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "loadSpecies", "(Ljava/lang/invoke/ClassSpecializer$SpeciesData;)Ljava/lang/invoke/ClassSpecializer$SpeciesData;", arg0)); }
String ClassSpecializer_Factory::chooseFieldName(Class arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "chooseFieldName", "(Ljava/lang/Class;I)Ljava/lang/String;", arg0, arg1)); }
void ClassSpecializer_Factory::linkSpeciesDataToCode(ClassSpecializer_SpeciesData arg0, Class arg1) { (classes[className]->invokeMethod<void>(this->object, "linkSpeciesDataToCode", "(Ljava/lang/invoke/ClassSpecializer$SpeciesData;Ljava/lang/Class;)V", arg0, arg1)); }
void ClassSpecializer_Factory::linkCodeToSpeciesData(Class arg0, ClassSpecializer_SpeciesData arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "linkCodeToSpeciesData", "(Ljava/lang/Class;Ljava/lang/invoke/ClassSpecializer$SpeciesData;Z)V", arg0, arg1, arg2)); }
Class ClassSpecializer_Factory::generateConcreteSpeciesCode(String arg0, ClassSpecializer_SpeciesData arg1) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "generateConcreteSpeciesCode", "(Ljava/lang/String;Ljava/lang/invoke/ClassSpecializer$SpeciesData;)Ljava/lang/Class;", arg0, arg1)); }
ClassSpecializer_SpeciesData ClassSpecializer_Factory::loadSpeciesDataFromCode(Class arg0) { return ClassSpecializer_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "loadSpeciesDataFromCode", "(Ljava/lang/Class;)Ljava/lang/invoke/ClassSpecializer$SpeciesData;", arg0)); }
void ClassSpecializer_Factory::emitIntConstant(int arg0, MethodVisitor arg1) { (classes[className]->invokeMethod<void>(this->object, "emitIntConstant", "(ILjdk/internal/org/objectweb/asm/MethodVisitor;)V", arg0, arg1)); }
MethodHandle ClassSpecializer_Factory::findFactory(Class arg0, List arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findFactory", "(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
List ClassSpecializer_Factory::findFactories(Class arg0, List arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "findFactories", "(Ljava/lang/Class;Ljava/util/List;)Ljava/util/List;", arg0, arg1)); }
List ClassSpecializer_Factory::findGetters(Class arg0, List arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "findGetters", "(Ljava/lang/Class;Ljava/util/List;)Ljava/util/List;", arg0, arg1)); }
List ClassSpecializer_Factory::makeNominalGetters(List arg0, List arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "makeNominalGetters", "(Ljava/util/List;Ljava/util/List;)Ljava/util/List;", arg0, arg1)); }
ClassSpecializer_SpeciesData ClassSpecializer_Factory::readSpeciesDataFromCode(Class arg0) { return ClassSpecializer_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "readSpeciesDataFromCode", "(Ljava/lang/Class;)Ljava/lang/invoke/ClassSpecializer$SpeciesData;", arg0)); }
int ClassSpecializer_Factory::typeLoadOp(char arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "typeLoadOp", "(C)I", arg0)); }
Field ClassSpecializer_Factory::reflectSDField(Class arg0) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "reflectSDField", "(Ljava/lang/Class;)Ljava/lang/reflect/Field;", arg0)); }
MethodHandle ClassSpecializer_Factory::findGetter(Class arg0, List arg1, int arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findGetter", "(Ljava/lang/Class;Ljava/util/List;I)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }

void MethodVisitor::visitParameter(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "visitParameter", "(Ljava/lang/String;I)V", arg0, arg1)); }
AnnotationVisitor MethodVisitor::visitAnnotationDefault() { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitAnnotationDefault", "()Ljdk/internal/org/objectweb/asm/AnnotationVisitor;")); }
void MethodVisitor::visitAnnotableParameterCount(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "visitAnnotableParameterCount", "(IZ)V", arg0, arg1)); }
AnnotationVisitor MethodVisitor::visitParameterAnnotation(int arg0, String arg1, bool arg2) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitParameterAnnotation", "(ILjava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2)); }
void MethodVisitor::visitInvokeDynamicInsn(String arg0, String arg1, Handle arg2, Object_interface arg3) { (classes[className]->invokeMethod<void>(this->object, "visitInvokeDynamicInsn", "(Ljava/lang/String;Ljava/lang/String;Ljdk/internal/org/objectweb/asm/Handle;[Ljava/lang/Object;)V", arg0, arg1, arg2, arg3)); }
void MethodVisitor::visitIincInsn(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "visitIincInsn", "(II)V", arg0, arg1)); }
void MethodVisitor::visitLookupSwitchInsn(Label arg0, arr_I arg1, Label_interface arg2) { (classes[className]->invokeMethod<void>(this->object, "visitLookupSwitchInsn", "(Ljdk/internal/org/objectweb/asm/Label;[I[Ljdk/internal/org/objectweb/asm/Label;)V", arg0, arg1, arg2)); }
void MethodVisitor::visitMultiANewArrayInsn(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "visitMultiANewArrayInsn", "(Ljava/lang/String;I)V", arg0, arg1)); }
AnnotationVisitor MethodVisitor::visitInsnAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitInsnAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3)); }
AnnotationVisitor MethodVisitor::visitTryCatchAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitTryCatchAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3)); }
void MethodVisitor::visitLocalVariable(String arg0, String arg1, String arg2, Label arg3, Label arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "visitLocalVariable", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljdk/internal/org/objectweb/asm/Label;Ljdk/internal/org/objectweb/asm/Label;I)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
AnnotationVisitor MethodVisitor::visitLocalVariableAnnotation(int arg0, TypePath arg1, Label_interface arg2, Label_interface arg3, arr_I arg4, String arg5, bool arg6) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitLocalVariableAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;[Ljdk/internal/org/objectweb/asm/Label;[Ljdk/internal/org/objectweb/asm/Label;[ILjava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void MethodVisitor::visitLineNumber(int arg0, Label arg1) { (classes[className]->invokeMethod<void>(this->object, "visitLineNumber", "(ILjdk/internal/org/objectweb/asm/Label;)V", arg0, arg1)); }
void MethodVisitor::visitMaxs(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "visitMaxs", "(II)V", arg0, arg1)); }
void MethodVisitor::visitEnd() { (classes[className]->invokeMethod<void>(this->object, "visitEnd", "()V")); }
void MethodVisitor::visitCode() { (classes[className]->invokeMethod<void>(this->object, "visitCode", "()V")); }
void MethodVisitor::visitLdcInsn(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "visitLdcInsn", "(Ljava/lang/Object;)V", arg0)); }
void MethodVisitor::visitMethodInsn(int arg0, String arg1, String arg2, String arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "visitMethodInsn", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V", arg0, arg1, arg2, arg3, arg4)); }
void MethodVisitor::visitMethodInsn(int arg0, String arg1, String arg2, String arg3) { (classes[className]->invokeMethod<void>(this->object, "visitMethodInsn", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3)); }
void MethodVisitor::visitTypeInsn(int arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "visitTypeInsn", "(ILjava/lang/String;)V", arg0, arg1)); }
void MethodVisitor::visitVarInsn(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "visitVarInsn", "(II)V", arg0, arg1)); }
void MethodVisitor::visitFieldInsn(int arg0, String arg1, String arg2, String arg3) { (classes[className]->invokeMethod<void>(this->object, "visitFieldInsn", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3)); }
void MethodVisitor::visitInsn(int arg0) { (classes[className]->invokeMethod<void>(this->object, "visitInsn", "(I)V", arg0)); }
void MethodVisitor::visitIntInsn(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "visitIntInsn", "(II)V", arg0, arg1)); }
AnnotationVisitor MethodVisitor::visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1)); }
void MethodVisitor::visitJumpInsn(int arg0, Label arg1) { (classes[className]->invokeMethod<void>(this->object, "visitJumpInsn", "(ILjdk/internal/org/objectweb/asm/Label;)V", arg0, arg1)); }
void MethodVisitor::visitLabel(Label arg0) { (classes[className]->invokeMethod<void>(this->object, "visitLabel", "(Ljdk/internal/org/objectweb/asm/Label;)V", arg0)); }
void MethodVisitor::visitTryCatchBlock(Label arg0, Label arg1, Label arg2, String arg3) { (classes[className]->invokeMethod<void>(this->object, "visitTryCatchBlock", "(Ljdk/internal/org/objectweb/asm/Label;Ljdk/internal/org/objectweb/asm/Label;Ljdk/internal/org/objectweb/asm/Label;Ljava/lang/String;)V", arg0, arg1, arg2, arg3)); }
void MethodVisitor::visitTableSwitchInsn(int arg0, int arg1, Label arg2, Label_interface arg3) { (classes[className]->invokeMethod<void>(this->object, "visitTableSwitchInsn", "(IILjdk/internal/org/objectweb/asm/Label;[Ljdk/internal/org/objectweb/asm/Label;)V", arg0, arg1, arg2, arg3)); }
AnnotationVisitor MethodVisitor::visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3)); }
void MethodVisitor::visitAttribute(Attribute arg0) { (classes[className]->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk/internal/org/objectweb/asm/Attribute;)V", arg0)); }
void MethodVisitor::visitFrame(int arg0, int arg1, Object_interface arg2, int arg3, Object_interface arg4) { (classes[className]->invokeMethod<void>(this->object, "visitFrame", "(II[Ljava/lang/Object;I[Ljava/lang/Object;)V", arg0, arg1, arg2, arg3, arg4)); }

void AnnotationVisitor::visitEnum(String arg0, String arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "visitEnum", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2)); }
AnnotationVisitor AnnotationVisitor::visitArray(String arg0) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitArray", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0)); }
void AnnotationVisitor::visit(String arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "visit", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
void AnnotationVisitor::visitEnd() { (classes[className]->invokeMethod<void>(this->object, "visitEnd", "()V")); }
AnnotationVisitor AnnotationVisitor::visitAnnotation(String arg0, String arg1) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava/lang/String;Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1)); }

int Handle::getTag() { return int(*classes[className]->invokeMethod<int>(this->object, "getTag", "()I")); }
String Handle::getDesc() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDesc", "()Ljava/lang/String;")); }
String Handle::getOwner() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getOwner", "()Ljava/lang/String;")); }
String Handle::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool Handle::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Handle::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Handle::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool Handle::isInterface() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInterface", "()Z")); }

void Label::markSubroutine(short arg0) { (classes[className]->invokeMethod<void>(this->object, "markSubroutine", "(S)V", arg0)); }
void Label::addSubroutineRetSuccessors(Label arg0) { (classes[className]->invokeMethod<void>(this->object, "addSubroutineRetSuccessors", "(Ljdk/internal/org/objectweb/asm/Label;)V", arg0)); }
void Label::addForwardReference(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "addForwardReference", "(III)V", arg0, arg1, arg2)); }
Label Label::pushSuccessors(Label arg0) { return Label(*classes[className]->invokeMethod<jobject>(this->object, "pushSuccessors", "(Ljdk/internal/org/objectweb/asm/Label;)Ljdk/internal/org/objectweb/asm/Label;", arg0)); }
void Label::addLineNumber(int arg0) { (classes[className]->invokeMethod<void>(this->object, "addLineNumber", "(I)V", arg0)); }
Label Label::getCanonicalInstance() { return Label(*classes[className]->invokeMethod<jobject>(this->object, "getCanonicalInstance", "()Ljdk/internal/org/objectweb/asm/Label;")); }
void Label::put(ByteVector arg0, int arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "put", "(Ljdk/internal/org/objectweb/asm/ByteVector;IZ)V", arg0, arg1, arg2)); }
String Label::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
bool Label::resolve(arr_B arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "resolve", "([BI)Z", arg0, arg1)); }
void Label::accept(MethodVisitor arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "accept", "(Ljdk/internal/org/objectweb/asm/MethodVisitor;Z)V", arg0, arg1)); }
int Label::getOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getOffset", "()I")); }

ByteVector ByteVector::encodeUtf8(String arg0, int arg1, int arg2) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "encodeUtf8", "(Ljava/lang/String;II)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0, arg1, arg2)); }
ByteVector ByteVector::putByteArray(arr_B arg0, int arg1, int arg2) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "putByteArray", "([BII)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0, arg1, arg2)); }
ByteVector ByteVector::put122(int arg0, int arg1, int arg2) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "put122", "(III)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0, arg1, arg2)); }
ByteVector ByteVector::putUTF8(String arg0) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "putUTF8", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0)); }
ByteVector ByteVector::put112(int arg0, int arg1, int arg2) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "put112", "(III)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0, arg1, arg2)); }
ByteVector ByteVector::put12(int arg0, int arg1) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "put12", "(II)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0, arg1)); }
void ByteVector::enlarge(int arg0) { (classes[className]->invokeMethod<void>(this->object, "enlarge", "(I)V", arg0)); }
ByteVector ByteVector::put11(int arg0, int arg1) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "put11", "(II)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0, arg1)); }
ByteVector ByteVector::putByte(int arg0) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "putByte", "(I)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0)); }
ByteVector ByteVector::putShort(int arg0) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "putShort", "(I)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0)); }
ByteVector ByteVector::putInt(int arg0) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "putInt", "(I)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0)); }
ByteVector ByteVector::putLong(long arg0) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "putLong", "(J)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0)); }


TypePath TypePath::fromString(String arg0) { return TypePath(*classes[className]->invokeStaticMethod<jobject>("fromString", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/TypePath;", arg0)); }
int TypePath::getStep(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getStep", "(I)I", arg0)); }
int TypePath::getStepArgument(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getStepArgument", "(I)I", arg0)); }
void TypePath::put(TypePath arg0, ByteVector arg1) { (classes[className]->invokeStaticMethod<void>("put", "(Ljdk/internal/org/objectweb/asm/TypePath;Ljdk/internal/org/objectweb/asm/ByteVector;)V", arg0, arg1)); }
String TypePath::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int TypePath::getLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getLength", "()I")); }

bool Attribute::isUnknown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUnknown", "()Z")); }
int Attribute::getAttributeCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getAttributeCount", "()I")); }
int Attribute::computeAttributesSize(SymbolTable arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("computeAttributesSize", "(Ljdk/internal/org/objectweb/asm/SymbolTable;II)I", arg0, arg1, arg2)); }
int Attribute::computeAttributesSize(SymbolTable arg0, arr_B arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "computeAttributesSize", "(Ljdk/internal/org/objectweb/asm/SymbolTable;[BIII)I", arg0, arg1, arg2, arg3, arg4)); }
int Attribute::computeAttributesSize(SymbolTable arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "computeAttributesSize", "(Ljdk/internal/org/objectweb/asm/SymbolTable;)I", arg0)); }
void Attribute::putAttributes(SymbolTable arg0, arr_B arg1, int arg2, int arg3, int arg4, ByteVector arg5) { (classes[className]->invokeMethod<void>(this->object, "putAttributes", "(Ljdk/internal/org/objectweb/asm/SymbolTable;[BIIILjdk/internal/org/objectweb/asm/ByteVector;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Attribute::putAttributes(SymbolTable arg0, ByteVector arg1) { (classes[className]->invokeMethod<void>(this->object, "putAttributes", "(Ljdk/internal/org/objectweb/asm/SymbolTable;Ljdk/internal/org/objectweb/asm/ByteVector;)V", arg0, arg1)); }
void Attribute::putAttributes(SymbolTable arg0, int arg1, int arg2, ByteVector arg3) { (classes[className]->invokeStaticMethod<void>("putAttributes", "(Ljdk/internal/org/objectweb/asm/SymbolTable;IILjdk/internal/org/objectweb/asm/ByteVector;)V", arg0, arg1, arg2, arg3)); }
bool Attribute::isCodeAttribute() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCodeAttribute", "()Z")); }
ByteVector Attribute::write(ClassWriter arg0, arr_B arg1, int arg2, int arg3, int arg4) { return ByteVector(*classes[className]->invokeMethod<jobject>(this->object, "write", "(Ljdk/internal/org/objectweb/asm/ClassWriter;[BIII)Ljdk/internal/org/objectweb/asm/ByteVector;", arg0, arg1, arg2, arg3, arg4)); }
Attribute Attribute::read(ClassReader arg0, int arg1, int arg2, arr_C arg3, int arg4, Label_interface arg5) { return Attribute(*classes[className]->invokeMethod<jobject>(this->object, "read", "(Ljdk/internal/org/objectweb/asm/ClassReader;II[CI[Ljdk/internal/org/objectweb/asm/Label;)Ljdk/internal/org/objectweb/asm/Attribute;", arg0, arg1, arg2, arg3, arg4, arg5)); }

int SymbolTable::setMajorVersionAndClassName(int arg0, String arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "setMajorVersionAndClassName", "(ILjava/lang/String;)I", arg0, arg1)); }
int SymbolTable::addConstantUtf8(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "addConstantUtf8", "(Ljava/lang/String;)I", arg0)); }
void SymbolTable::addConstantUtf8(int arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "addConstantUtf8", "(ILjava/lang/String;)V", arg0, arg1)); }
Symbol SymbolTable::addConstantClass(String arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantClass", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantModule(String arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantModule", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
int SymbolTable::addConstantNameAndType(String arg0, String arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "addConstantNameAndType", "(Ljava/lang/String;Ljava/lang/String;)I", arg0, arg1)); }
void SymbolTable::addConstantNameAndType(int arg0, String arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "addConstantNameAndType", "(ILjava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2)); }
int SymbolTable::computeBootstrapMethodsSize() { return int(*classes[className]->invokeMethod<int>(this->object, "computeBootstrapMethodsSize", "()I")); }
int SymbolTable::getConstantPoolLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getConstantPoolLength", "()I")); }
int SymbolTable::getConstantPoolCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getConstantPoolCount", "()I")); }
void SymbolTable::putConstantPool(ByteVector arg0) { (classes[className]->invokeMethod<void>(this->object, "putConstantPool", "(Ljdk/internal/org/objectweb/asm/ByteVector;)V", arg0)); }
void SymbolTable::putBootstrapMethods(ByteVector arg0) { (classes[className]->invokeMethod<void>(this->object, "putBootstrapMethods", "(Ljdk/internal/org/objectweb/asm/ByteVector;)V", arg0)); }
Symbol SymbolTable::addConstant(Object arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstant", "(Ljava/lang/Object;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantMethodType(String arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantMethodType", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantPackage(String arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantPackage", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantMethodHandle(int arg0, String arg1, String arg2, String arg3, bool arg4) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantMethodHandle", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1, arg2, arg3, arg4)); }
void SymbolTable::addConstantMethodHandle(int arg0, int arg1, String arg2, String arg3, String arg4) { (classes[className]->invokeMethod<void>(this->object, "addConstantMethodHandle", "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4)); }
Symbol SymbolTable::addConstantDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantDynamic", "(Ljava/lang/String;Ljava/lang/String;Ljdk/internal/org/objectweb/asm/Handle;[Ljava/lang/Object;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1, arg2, arg3)); }
Symbol SymbolTable::addConstantInvokeDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantInvokeDynamic", "(Ljava/lang/String;Ljava/lang/String;Ljdk/internal/org/objectweb/asm/Handle;[Ljava/lang/Object;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1, arg2, arg3)); }
Symbol SymbolTable::addConstantFieldref(String arg0, String arg1, String arg2) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantFieldref", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1, arg2)); }
Symbol SymbolTable::addConstantMethodref(String arg0, String arg1, String arg2, bool arg3) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantMethodref", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1, arg2, arg3)); }
void SymbolTable::addConstantMemberReference(int arg0, int arg1, String arg2, String arg3, String arg4) { (classes[className]->invokeMethod<void>(this->object, "addConstantMemberReference", "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4)); }
SymbolTable_Entry SymbolTable::addConstantMemberReference(int arg0, String arg1, String arg2, String arg3) { return SymbolTable_Entry(*classes[className]->invokeMethod<jobject>(this->object, "addConstantMemberReference", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/SymbolTable$Entry;", arg0, arg1, arg2, arg3)); }
Symbol SymbolTable::addConstantIntegerOrFloat(int arg0, int arg1) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantIntegerOrFloat", "(II)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1)); }
void SymbolTable::addConstantIntegerOrFloat(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "addConstantIntegerOrFloat", "(III)V", arg0, arg1, arg2)); }
void SymbolTable::addConstantLongOrDouble(int arg0, int arg1, long arg2) { (classes[className]->invokeMethod<void>(this->object, "addConstantLongOrDouble", "(IIJ)V", arg0, arg1, arg2)); }
Symbol SymbolTable::addConstantLongOrDouble(int arg0, long arg1) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantLongOrDouble", "(IJ)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1)); }
void SymbolTable::addConstantDynamicOrInvokeDynamicReference(int arg0, int arg1, String arg2, String arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "addConstantDynamicOrInvokeDynamicReference", "(IILjava/lang/String;Ljava/lang/String;I)V", arg0, arg1, arg2, arg3, arg4)); }
Symbol SymbolTable::addConstantDynamicOrInvokeDynamicReference(int arg0, String arg1, String arg2, int arg3) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantDynamicOrInvokeDynamicReference", "(ILjava/lang/String;Ljava/lang/String;I)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1, arg2, arg3)); }
Symbol SymbolTable::addConstantUtf8Reference(int arg0, String arg1) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantUtf8Reference", "(ILjava/lang/String;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1)); }
void SymbolTable::addConstantUtf8Reference(int arg0, int arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "addConstantUtf8Reference", "(IILjava/lang/String;)V", arg0, arg1, arg2)); }
void SymbolTable::copyBootstrapMethods(ClassReader arg0, arr_C arg1) { (classes[className]->invokeMethod<void>(this->object, "copyBootstrapMethods", "(Ljdk/internal/org/objectweb/asm/ClassReader;[C)V", arg0, arg1)); }
Symbol SymbolTable::addConstantInteger(int arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantInteger", "(I)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantFloat(float arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantFloat", "(F)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantLong(long arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantLong", "(J)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantDouble(double arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantDouble", "(D)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addConstantString(String arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addConstantString", "(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
Symbol SymbolTable::addBootstrapMethod(Handle arg0, Object_interface arg1) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addBootstrapMethod", "(Ljdk/internal/org/objectweb/asm/Handle;[Ljava/lang/Object;)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1)); }
Symbol SymbolTable::addBootstrapMethod(int arg0, int arg1, int arg2) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "addBootstrapMethod", "(III)Ljdk/internal/org/objectweb/asm/Symbol;", arg0, arg1, arg2)); }
int SymbolTable::addTypeInternal(SymbolTable_Entry arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "addTypeInternal", "(Ljdk/internal/org/objectweb/asm/SymbolTable$Entry;)I", arg0)); }
int SymbolTable::addType(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "addType", "(Ljava/lang/String;)I", arg0)); }
ClassReader SymbolTable::getSource() { return ClassReader(*classes[className]->invokeMethod<jobject>(this->object, "getSource", "()Ljdk/internal/org/objectweb/asm/ClassReader;")); }
int SymbolTable::getMajorVersion() { return int(*classes[className]->invokeMethod<int>(this->object, "getMajorVersion", "()I")); }
int SymbolTable::addUninitializedType(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "addUninitializedType", "(Ljava/lang/String;I)I", arg0, arg1)); }
int SymbolTable::addMergedType(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "addMergedType", "(II)I", arg0, arg1)); }
void SymbolTable::add(SymbolTable_Entry arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljdk/internal/org/objectweb/asm/SymbolTable$Entry;)V", arg0)); }
SymbolTable_Entry SymbolTable::get(int arg0) { return SymbolTable_Entry(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I)Ljdk/internal/org/objectweb/asm/SymbolTable$Entry;", arg0)); }
SymbolTable_Entry SymbolTable::put(SymbolTable_Entry arg0) { return SymbolTable_Entry(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljdk/internal/org/objectweb/asm/SymbolTable$Entry;)Ljdk/internal/org/objectweb/asm/SymbolTable$Entry;", arg0)); }
int SymbolTable::hash(int arg0, String arg1, String arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(ILjava/lang/String;Ljava/lang/String;I)I", arg0, arg1, arg2, arg3)); }
int SymbolTable::hash(int arg0, String arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(ILjava/lang/String;I)I", arg0, arg1, arg2)); }
int SymbolTable::hash(int arg0, String arg1, String arg2) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(ILjava/lang/String;Ljava/lang/String;)I", arg0, arg1, arg2)); }
int SymbolTable::hash(int arg0, String arg1, String arg2, String arg3) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", arg0, arg1, arg2, arg3)); }
int SymbolTable::hash(int arg0, String arg1, String arg2, String arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)I", arg0, arg1, arg2, arg3, arg4)); }
int SymbolTable::hash(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(II)I", arg0, arg1)); }
int SymbolTable::hash(int arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(IJ)I", arg0, arg1)); }
int SymbolTable::hash(int arg0, String arg1) { return int(*classes[className]->invokeStaticMethod<int>("hash", "(ILjava/lang/String;)I", arg0, arg1)); }
Symbol SymbolTable::getType(int arg0) { return Symbol(*classes[className]->invokeMethod<jobject>(this->object, "getType", "(I)Ljdk/internal/org/objectweb/asm/Symbol;", arg0)); }
String SymbolTable::getClassName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getClassName", "()Ljava/lang/String;")); }

int Symbol::getArgumentsAndReturnSizes() { return int(*classes[className]->invokeMethod<int>(this->object, "getArgumentsAndReturnSizes", "()I")); }


short ClassReader::readShort(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "readShort", "(I)S", arg0)); }
Attribute ClassReader::readAttribute(Attribute_interface arg0, String arg1, int arg2, int arg3, arr_C arg4, int arg5, Label_interface arg6) { return Attribute(*classes[className]->invokeMethod<jobject>(this->object, "readAttribute", "([Ljdk/internal/org/objectweb/asm/Attribute;Ljava/lang/String;II[CI[Ljdk/internal/org/objectweb/asm/Label;)Ljdk/internal/org/objectweb/asm/Attribute;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
int ClassReader::getItem(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getItem", "(I)I", arg0)); }
int ClassReader::getItemCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getItemCount", "()I")); }
int ClassReader::getMaxStringLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxStringLength", "()I")); }
int ClassReader::readUnsignedShort(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "readUnsignedShort", "(I)I", arg0)); }
String ClassReader::readClass(int arg0, arr_C arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readClass", "(I[C)Ljava/lang/String;", arg0, arg1)); }
String ClassReader::readUTF8(int arg0, arr_C arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readUTF8", "(I[C)Ljava/lang/String;", arg0, arg1)); }
long ClassReader::readLong(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "readLong", "(I)J", arg0)); }
String ClassReader::readUtf(int arg0, int arg1, arr_C arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readUtf", "(II[C)Ljava/lang/String;", arg0, arg1, arg2)); }
String ClassReader::readUtf(int arg0, arr_C arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readUtf", "(I[C)Ljava/lang/String;", arg0, arg1)); }
int ClassReader::readByte(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "readByte", "(I)I", arg0)); }
int ClassReader::getFirstAttributeOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getFirstAttributeOffset", "()I")); }
Object ClassReader::readConst(int arg0, arr_C arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readConst", "(I[C)Ljava/lang/Object;", arg0, arg1)); }
void ClassReader::readModuleAttributes(ClassVisitor arg0, Context arg1, int arg2, int arg3, String arg4) { (classes[className]->invokeMethod<void>(this->object, "readModuleAttributes", "(Ljdk/internal/org/objectweb/asm/ClassVisitor;Ljdk/internal/org/objectweb/asm/Context;IILjava/lang/String;)V", arg0, arg1, arg2, arg3, arg4)); }
int ClassReader::readElementValues(AnnotationVisitor arg0, int arg1, bool arg2, arr_C arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "readElementValues", "(Ljdk/internal/org/objectweb/asm/AnnotationVisitor;IZ[C)I", arg0, arg1, arg2, arg3)); }
int ClassReader::readTypeAnnotationTarget(Context arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "readTypeAnnotationTarget", "(Ljdk/internal/org/objectweb/asm/Context;I)I", arg0, arg1)); }
int ClassReader::readRecordComponent(ClassVisitor arg0, Context arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "readRecordComponent", "(Ljdk/internal/org/objectweb/asm/ClassVisitor;Ljdk/internal/org/objectweb/asm/Context;I)I", arg0, arg1, arg2)); }
int ClassReader::readField(ClassVisitor arg0, Context arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "readField", "(Ljdk/internal/org/objectweb/asm/ClassVisitor;Ljdk/internal/org/objectweb/asm/Context;I)I", arg0, arg1, arg2)); }
int ClassReader::readMethod(ClassVisitor arg0, Context arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "readMethod", "(Ljdk/internal/org/objectweb/asm/ClassVisitor;Ljdk/internal/org/objectweb/asm/Context;I)I", arg0, arg1, arg2)); }
String ClassReader::readModule(int arg0, arr_C arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readModule", "(I[C)Ljava/lang/String;", arg0, arg1)); }
String ClassReader::readPackage(int arg0, arr_C arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readPackage", "(I[C)Ljava/lang/String;", arg0, arg1)); }
int ClassReader::readElementValue(AnnotationVisitor arg0, int arg1, String arg2, arr_C arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "readElementValue", "(Ljdk/internal/org/objectweb/asm/AnnotationVisitor;ILjava/lang/String;[C)I", arg0, arg1, arg2, arg3)); }
void ClassReader::readParameterAnnotations(MethodVisitor arg0, Context arg1, int arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "readParameterAnnotations", "(Ljdk/internal/org/objectweb/asm/MethodVisitor;Ljdk/internal/org/objectweb/asm/Context;IZ)V", arg0, arg1, arg2, arg3)); }
void ClassReader::readCode(MethodVisitor arg0, Context arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "readCode", "(Ljdk/internal/org/objectweb/asm/MethodVisitor;Ljdk/internal/org/objectweb/asm/Context;I)V", arg0, arg1, arg2)); }
Label ClassReader::createLabel(int arg0, Label_interface arg1) { return Label(*classes[className]->invokeMethod<jobject>(this->object, "createLabel", "(I[Ljdk/internal/org/objectweb/asm/Label;)Ljdk/internal/org/objectweb/asm/Label;", arg0, arg1)); }
void ClassReader::createDebugLabel(int arg0, Label_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "createDebugLabel", "(I[Ljdk/internal/org/objectweb/asm/Label;)V", arg0, arg1)); }
void ClassReader::computeImplicitFrame(Context arg0) { (classes[className]->invokeMethod<void>(this->object, "computeImplicitFrame", "(Ljdk/internal/org/objectweb/asm/Context;)V", arg0)); }
int ClassReader::getTypeAnnotationBytecodeOffset(arr_I arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getTypeAnnotationBytecodeOffset", "([II)I", arg0, arg1)); }
int ClassReader::readStackMapFrame(int arg0, bool arg1, bool arg2, Context arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "readStackMapFrame", "(IZZLjdk/internal/org/objectweb/asm/Context;)I", arg0, arg1, arg2, arg3)); }
Label ClassReader::readLabel(int arg0, Label_interface arg1) { return Label(*classes[className]->invokeMethod<jobject>(this->object, "readLabel", "(I[Ljdk/internal/org/objectweb/asm/Label;)Ljdk/internal/org/objectweb/asm/Label;", arg0, arg1)); }
int ClassReader::readVerificationTypeInfo(int arg0, Object_interface arg1, int arg2, arr_C arg3, Label_interface arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "readVerificationTypeInfo", "(I[Ljava/lang/Object;I[C[Ljdk/internal/org/objectweb/asm/Label;)I", arg0, arg1, arg2, arg3, arg4)); }
String ClassReader::readStringish(int arg0, arr_C arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readStringish", "(I[C)Ljava/lang/String;", arg0, arg1)); }
ConstantDynamic ClassReader::readConstantDynamic(int arg0, arr_C arg1) { return ConstantDynamic(*classes[className]->invokeMethod<jobject>(this->object, "readConstantDynamic", "(I[C)Ljdk/internal/org/objectweb/asm/ConstantDynamic;", arg0, arg1)); }
int ClassReader::getAccess() { return int(*classes[className]->invokeMethod<int>(this->object, "getAccess", "()I")); }
String ClassReader::getSuperName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSuperName", "()Ljava/lang/String;")); }
void ClassReader::accept(ClassVisitor arg0, Attribute_interface arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "accept", "(Ljdk/internal/org/objectweb/asm/ClassVisitor;[Ljdk/internal/org/objectweb/asm/Attribute;I)V", arg0, arg1, arg2)); }
void ClassReader::accept(ClassVisitor arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "accept", "(Ljdk/internal/org/objectweb/asm/ClassVisitor;I)V", arg0, arg1)); }
int ClassReader::readInt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "readInt", "(I)I", arg0)); }
String ClassReader::getClassName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getClassName", "()Ljava/lang/String;")); }


void ClassVisitor::visit(int arg0, int arg1, String arg2, String arg3, String arg4, String_interface arg5) { (classes[className]->invokeMethod<void>(this->object, "visit", "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void ClassVisitor::visitSource(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "visitSource", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
MethodVisitor ClassVisitor::visitMethod(int arg0, String arg1, String arg2, String arg3, String_interface arg4) { return MethodVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitMethod", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/MethodVisitor;", arg0, arg1, arg2, arg3, arg4)); }
void ClassVisitor::visitEnd() { (classes[className]->invokeMethod<void>(this->object, "visitEnd", "()V")); }
FieldVisitor ClassVisitor::visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) { return FieldVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitField", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljdk/internal/org/objectweb/asm/FieldVisitor;", arg0, arg1, arg2, arg3, arg4)); }
AnnotationVisitor ClassVisitor::visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1)); }
ModuleVisitor ClassVisitor::visitModule(String arg0, int arg1, String arg2) { return ModuleVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitModule", "(Ljava/lang/String;ILjava/lang/String;)Ljdk/internal/org/objectweb/asm/ModuleVisitor;", arg0, arg1, arg2)); }
void ClassVisitor::visitNestHost(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitNestHost", "(Ljava/lang/String;)V", arg0)); }
void ClassVisitor::visitOuterClass(String arg0, String arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "visitOuterClass", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2)); }
AnnotationVisitor ClassVisitor::visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3)); }
void ClassVisitor::visitAttribute(Attribute arg0) { (classes[className]->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk/internal/org/objectweb/asm/Attribute;)V", arg0)); }
void ClassVisitor::visitNestMember(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitNestMember", "(Ljava/lang/String;)V", arg0)); }
void ClassVisitor::visitPermittedSubclassExperimental(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitPermittedSubclassExperimental", "(Ljava/lang/String;)V", arg0)); }
void ClassVisitor::visitInnerClass(String arg0, String arg1, String arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "visitInnerClass", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", arg0, arg1, arg2, arg3)); }
RecordComponentVisitor ClassVisitor::visitRecordComponent(String arg0, String arg1, String arg2) { return RecordComponentVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitRecordComponent", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/RecordComponentVisitor;", arg0, arg1, arg2)); }


void FieldVisitor::visitEnd() { (classes[className]->invokeMethod<void>(this->object, "visitEnd", "()V")); }
AnnotationVisitor FieldVisitor::visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1)); }
AnnotationVisitor FieldVisitor::visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3)); }
void FieldVisitor::visitAttribute(Attribute arg0) { (classes[className]->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk/internal/org/objectweb/asm/Attribute;)V", arg0)); }

void ModuleVisitor::visitEnd() { (classes[className]->invokeMethod<void>(this->object, "visitEnd", "()V")); }
void ModuleVisitor::visitMainClass(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitMainClass", "(Ljava/lang/String;)V", arg0)); }
void ModuleVisitor::visitPackage(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitPackage", "(Ljava/lang/String;)V", arg0)); }
void ModuleVisitor::visitRequire(String arg0, int arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "visitRequire", "(Ljava/lang/String;ILjava/lang/String;)V", arg0, arg1, arg2)); }
void ModuleVisitor::visitExport(String arg0, int arg1, String_interface arg2) { (classes[className]->invokeMethod<void>(this->object, "visitExport", "(Ljava/lang/String;I[Ljava/lang/String;)V", arg0, arg1, arg2)); }
void ModuleVisitor::visitOpen(String arg0, int arg1, String_interface arg2) { (classes[className]->invokeMethod<void>(this->object, "visitOpen", "(Ljava/lang/String;I[Ljava/lang/String;)V", arg0, arg1, arg2)); }
void ModuleVisitor::visitUse(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitUse", "(Ljava/lang/String;)V", arg0)); }
void ModuleVisitor::visitProvide(String arg0, String_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "visitProvide", "(Ljava/lang/String;[Ljava/lang/String;)V", arg0, arg1)); }

void RecordComponentVisitor::visitEnd() { (classes[className]->invokeMethod<void>(this->object, "visitEnd", "()V")); }
AnnotationVisitor RecordComponentVisitor::visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1)); }
AnnotationVisitor RecordComponentVisitor::visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3)); }
void RecordComponentVisitor::visitAttribute(Attribute arg0) { (classes[className]->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk/internal/org/objectweb/asm/Attribute;)V", arg0)); }
RecordComponentVisitor RecordComponentVisitor::getDelegate() { return RecordComponentVisitor(*classes[className]->invokeMethod<jobject>(this->object, "getDelegate", "()Ljdk/internal/org/objectweb/asm/RecordComponentVisitor;")); }


int ConstantDynamic::getBootstrapMethodArgumentCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getBootstrapMethodArgumentCount", "()I")); }
Object ConstantDynamic::getBootstrapMethodArgument(int arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getBootstrapMethodArgument", "(I)Ljava/lang/Object;", arg0)); }
Handle ConstantDynamic::getBootstrapMethod() { return Handle(*classes[className]->invokeMethod<jobject>(this->object, "getBootstrapMethod", "()Ljdk/internal/org/objectweb/asm/Handle;")); }
String ConstantDynamic::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool ConstantDynamic::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ConstantDynamic::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ConstantDynamic::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String ConstantDynamic::getDescriptor() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDescriptor", "()Ljava/lang/String;")); }
int ConstantDynamic::getSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSize", "()I")); }

int ClassWriter::newModule(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "newModule", "(Ljava/lang/String;)I", arg0)); }
void ClassWriter::visit(int arg0, int arg1, String arg2, String arg3, String arg4, String_interface arg5) { (classes[className]->invokeMethod<void>(this->object, "visit", "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void ClassWriter::visitSource(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "visitSource", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
MethodVisitor ClassWriter::visitMethod(int arg0, String arg1, String arg2, String arg3, String_interface arg4) { return MethodVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitMethod", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/MethodVisitor;", arg0, arg1, arg2, arg3, arg4)); }
void ClassWriter::visitEnd() { (classes[className]->invokeMethod<void>(this->object, "visitEnd", "()V")); }
FieldVisitor ClassWriter::visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) { return FieldVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitField", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljdk/internal/org/objectweb/asm/FieldVisitor;", arg0, arg1, arg2, arg3, arg4)); }
AnnotationVisitor ClassWriter::visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1)); }
int ClassWriter::newHandle(int arg0, String arg1, String arg2, String arg3, bool arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "newHandle", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I", arg0, arg1, arg2, arg3, arg4)); }
int ClassWriter::newHandle(int arg0, String arg1, String arg2, String arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "newHandle", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", arg0, arg1, arg2, arg3)); }
ModuleVisitor ClassWriter::visitModule(String arg0, int arg1, String arg2) { return ModuleVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitModule", "(Ljava/lang/String;ILjava/lang/String;)Ljdk/internal/org/objectweb/asm/ModuleVisitor;", arg0, arg1, arg2)); }
void ClassWriter::visitNestHost(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitNestHost", "(Ljava/lang/String;)V", arg0)); }
void ClassWriter::visitOuterClass(String arg0, String arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "visitOuterClass", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2)); }
AnnotationVisitor ClassWriter::visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk/internal/org/objectweb/asm/TypePath;Ljava/lang/String;Z)Ljdk/internal/org/objectweb/asm/AnnotationVisitor;", arg0, arg1, arg2, arg3)); }
void ClassWriter::visitAttribute(Attribute arg0) { (classes[className]->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk/internal/org/objectweb/asm/Attribute;)V", arg0)); }
void ClassWriter::visitNestMember(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitNestMember", "(Ljava/lang/String;)V", arg0)); }
void ClassWriter::visitPermittedSubclassExperimental(String arg0) { (classes[className]->invokeMethod<void>(this->object, "visitPermittedSubclassExperimental", "(Ljava/lang/String;)V", arg0)); }
void ClassWriter::visitInnerClass(String arg0, String arg1, String arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "visitInnerClass", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", arg0, arg1, arg2, arg3)); }
RecordComponentVisitor ClassWriter::visitRecordComponent(String arg0, String arg1, String arg2) { return RecordComponentVisitor(*classes[className]->invokeMethod<jobject>(this->object, "visitRecordComponent", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/RecordComponentVisitor;", arg0, arg1, arg2)); }
int ClassWriter::newConst(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "newConst", "(Ljava/lang/Object;)I", arg0)); }
int ClassWriter::newUTF8(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "newUTF8", "(Ljava/lang/String;)I", arg0)); }
int ClassWriter::newClass(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "newClass", "(Ljava/lang/String;)I", arg0)); }
int ClassWriter::newMethodType(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "newMethodType", "(Ljava/lang/String;)I", arg0)); }
int ClassWriter::newPackage(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "newPackage", "(Ljava/lang/String;)I", arg0)); }
int ClassWriter::newConstantDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "newConstantDynamic", "(Ljava/lang/String;Ljava/lang/String;Ljdk/internal/org/objectweb/asm/Handle;[Ljava/lang/Object;)I", arg0, arg1, arg2, arg3)); }
int ClassWriter::newInvokeDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "newInvokeDynamic", "(Ljava/lang/String;Ljava/lang/String;Ljdk/internal/org/objectweb/asm/Handle;[Ljava/lang/Object;)I", arg0, arg1, arg2, arg3)); }
int ClassWriter::newField(String arg0, String arg1, String arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "newField", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", arg0, arg1, arg2)); }
int ClassWriter::newMethod(String arg0, String arg1, String arg2, bool arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "newMethod", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I", arg0, arg1, arg2, arg3)); }
int ClassWriter::newNameType(String arg0, String arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "newNameType", "(Ljava/lang/String;Ljava/lang/String;)I", arg0, arg1)); }
String ClassWriter::getCommonSuperClass(String arg0, String arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCommonSuperClass", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
ClassLoader ClassWriter::getClassLoader() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava/lang/ClassLoader;")); }

Object Field::get(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
bool Field::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Field::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Field::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool Field::getBoolean(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getBoolean", "(Ljava/lang/Object;)Z", arg0)); }
byte Field::getByte(Object arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getByte", "(Ljava/lang/Object;)B", arg0)); }
short Field::getShort(Object arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getShort", "(Ljava/lang/Object;)S", arg0)); }
char Field::getChar(Object arg0) { return char(*classes[className]->invokeMethod<char>(this->object, "getChar", "(Ljava/lang/Object;)C", arg0)); }
int Field::getInt(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "(Ljava/lang/Object;)I", arg0)); }
long Field::getLong(Object arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getLong", "(Ljava/lang/Object;)J", arg0)); }
float Field::getFloat(Object arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloat", "(Ljava/lang/Object;)F", arg0)); }
double Field::getDouble(Object arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDouble", "(Ljava/lang/Object;)D", arg0)); }
FieldRepository Field::getGenericInfo() { return FieldRepository(*classes[className]->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun/reflect/generics/repository/FieldRepository;")); }
GenericsFactory Field::getFactory() { return GenericsFactory(*classes[className]->invokeMethod<jobject>(this->object, "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;")); }
Map Field::declaredAnnotations() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "declaredAnnotations", "()Ljava/util/Map;")); }
String Field::toGenericString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava/lang/String;")); }
void Field::set(Object arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", arg0, arg1)); }
void Field::setAccessible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }
void Field::checkAccess(Class arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "checkAccess", "(Ljava/lang/Class;Ljava/lang/Object;)V", arg0, arg1)); }
void Field::checkCanSetAccessible(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava/lang/Class;)V", arg0)); }
String Field::toShortString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toShortString", "()Ljava/lang/String;")); }
Field Field::getRoot() { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getRoot", "()Ljava/lang/reflect/Field;")); }
String Field::getGenericSignature() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getGenericSignature", "()Ljava/lang/String;")); }
Type Field::getGenericType() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "getGenericType", "()Ljava/lang/reflect/Type;")); }
Class Field::getType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getType", "()Ljava/lang/Class;")); }
FieldAccessor Field::getFieldAccessor(Object arg0) { return FieldAccessor(*classes[className]->invokeMethod<jobject>(this->object, "getFieldAccessor", "(Ljava/lang/Object;)Ljdk/internal/reflect/FieldAccessor;", arg0)); }
FieldAccessor Field::getFieldAccessor(bool arg0) { return FieldAccessor(*classes[className]->invokeMethod<jobject>(this->object, "getFieldAccessor", "(Z)Ljdk/internal/reflect/FieldAccessor;", arg0)); }
void Field::setBoolean(Object arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setBoolean", "(Ljava/lang/Object;Z)V", arg0, arg1)); }
void Field::setByte(Object arg0, byte arg1) { (classes[className]->invokeMethod<void>(this->object, "setByte", "(Ljava/lang/Object;B)V", arg0, arg1)); }
void Field::setChar(Object arg0, char arg1) { (classes[className]->invokeMethod<void>(this->object, "setChar", "(Ljava/lang/Object;C)V", arg0, arg1)); }
void Field::setShort(Object arg0, short arg1) { (classes[className]->invokeMethod<void>(this->object, "setShort", "(Ljava/lang/Object;S)V", arg0, arg1)); }
void Field::setInt(Object arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setInt", "(Ljava/lang/Object;I)V", arg0, arg1)); }
void Field::setLong(Object arg0, long arg1) { (classes[className]->invokeMethod<void>(this->object, "setLong", "(Ljava/lang/Object;J)V", arg0, arg1)); }
void Field::setFloat(Object arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setFloat", "(Ljava/lang/Object;F)V", arg0, arg1)); }
void Field::setDouble(Object arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setDouble", "(Ljava/lang/Object;D)V", arg0, arg1)); }
FieldAccessor Field::acquireFieldAccessor(bool arg0) { return FieldAccessor(*classes[className]->invokeMethod<jobject>(this->object, "acquireFieldAccessor", "(Z)Ljdk/internal/reflect/FieldAccessor;", arg0)); }
void Field::setFieldAccessor(FieldAccessor arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setFieldAccessor", "(Ljdk/internal/reflect/FieldAccessor;Z)V", arg0, arg1)); }
Field Field::copy() { return Field(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Ljava/lang/reflect/Field;")); }
bool Field::isEnumConstant() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnumConstant", "()Z")); }
bool Field::isTrustedFinal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTrustedFinal", "()Z")); }
AnnotatedType Field::getAnnotatedType() { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedType", "()Ljava/lang/reflect/AnnotatedType;")); }

TypeSignature FieldRepository::parse(String arg0) { return TypeSignature(*classes[className]->invokeMethod<jobject>(this->object, "parse", "(Ljava/lang/String;)Lsun/reflect/generics/tree/TypeSignature;", arg0)); }
Type FieldRepository::computeGenericType() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "computeGenericType", "()Ljava/lang/reflect/Type;")); }
FieldRepository FieldRepository::make(String arg0, GenericsFactory arg1) { return FieldRepository(*classes[className]->invokeStaticMethod<jobject>("make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/FieldRepository;", arg0, arg1)); }
Type FieldRepository::getGenericType() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "getGenericType", "()Ljava/lang/reflect/Type;")); }



BoundMethodHandle_SpeciesData BoundMethodHandle::speciesData_LLLL() { return BoundMethodHandle_SpeciesData(*classes[className]->invokeStaticMethod<jobject>("speciesData_LLLL", "()Ljava/lang/invoke/BoundMethodHandle$SpeciesData;")); }
BoundMethodHandle_SpeciesData BoundMethodHandle::speciesData_LLL() { return BoundMethodHandle_SpeciesData(*classes[className]->invokeStaticMethod<jobject>("speciesData_LLL", "()Ljava/lang/invoke/BoundMethodHandle$SpeciesData;")); }
BoundMethodHandle_SpeciesData BoundMethodHandle::speciesData_LLLLL() { return BoundMethodHandle_SpeciesData(*classes[className]->invokeStaticMethod<jobject>("speciesData_LLLLL", "()Ljava/lang/invoke/BoundMethodHandle$SpeciesData;")); }
BoundMethodHandle_SpeciesData BoundMethodHandle::speciesData_L() { return BoundMethodHandle_SpeciesData(*classes[className]->invokeStaticMethod<jobject>("speciesData_L", "()Ljava/lang/invoke/BoundMethodHandle$SpeciesData;")); }
BoundMethodHandle BoundMethodHandle::bindSingle(MethodType arg0, LambdaForm arg1, Object arg2) { return BoundMethodHandle(*classes[className]->invokeStaticMethod<jobject>("bindSingle", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle BoundMethodHandle::bindSingle(MethodType arg0, LambdaForm arg1, LambdaForm_BasicType arg2, Object arg3) { return BoundMethodHandle(*classes[className]->invokeStaticMethod<jobject>("bindSingle", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/LambdaForm$BasicType;Ljava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2, arg3)); }
BoundMethodHandle_SpeciesData BoundMethodHandle::speciesData() { return BoundMethodHandle_SpeciesData(*classes[className]->invokeMethod<jobject>(this->object, "speciesData", "()Ljava/lang/invoke/BoundMethodHandle$SpeciesData;")); }
BoundMethodHandle_SpeciesData BoundMethodHandle::speciesDataFor(LambdaForm arg0) { return BoundMethodHandle_SpeciesData(*classes[className]->invokeStaticMethod<jobject>("speciesDataFor", "(Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/BoundMethodHandle$SpeciesData;", arg0)); }
bool BoundMethodHandle::tooComplex() { return bool(*classes[className]->invokeMethod<bool>(this->object, "tooComplex", "()Z")); }
int BoundMethodHandle::fieldCount() { return int(*classes[className]->invokeMethod<int>(this->object, "fieldCount", "()I")); }
BoundMethodHandle BoundMethodHandle::copyWithExtendI(MethodType arg0, LambdaForm arg1, int arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWithExtendI", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;I)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle BoundMethodHandle::copyWithExtendJ(MethodType arg0, LambdaForm arg1, long arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWithExtendJ", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;J)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle BoundMethodHandle::copyWithExtendF(MethodType arg0, LambdaForm arg1, float arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWithExtendF", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;F)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle BoundMethodHandle::copyWithExtendD(MethodType arg0, LambdaForm arg1, double arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWithExtendD", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;D)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle_SpeciesData BoundMethodHandle::speciesData_LL() { return BoundMethodHandle_SpeciesData(*classes[className]->invokeStaticMethod<jobject>("speciesData_LL", "()Ljava/lang/invoke/BoundMethodHandle$SpeciesData;")); }
Object BoundMethodHandle::arg(int arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "arg", "(I)Ljava/lang/Object;", arg0)); }
BoundMethodHandle BoundMethodHandle::makeReinvoker(MethodHandle arg0) { return BoundMethodHandle(*classes[className]->invokeStaticMethod<jobject>("makeReinvoker", "(Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/BoundMethodHandle;", arg0)); }
Object BoundMethodHandle::internalProperties() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "internalProperties", "()Ljava/lang/Object;")); }
BoundMethodHandle BoundMethodHandle::rebind() { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "rebind", "()Ljava/lang/invoke/BoundMethodHandle;")); }
BoundMethodHandle BoundMethodHandle::copyWith(MethodType arg0, LambdaForm arg1) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWith", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1)); }
LambdaFormEditor BoundMethodHandle::editor() { return LambdaFormEditor(*classes[className]->invokeMethod<jobject>(this->object, "editor", "()Ljava/lang/invoke/LambdaFormEditor;")); }
BoundMethodHandle BoundMethodHandle::copyWithExtendL(MethodType arg0, LambdaForm arg1, Object arg2) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWithExtendL", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1, arg2)); }
BoundMethodHandle BoundMethodHandle::bindArgumentL(int arg0, Object arg1) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentL", "(ILjava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1)); }
String BoundMethodHandle::internalValues() { return String(*classes[className]->invokeMethod<jobject>(this->object, "internalValues", "()Ljava/lang/String;")); }
BoundMethodHandle BoundMethodHandle::bindArgumentI(int arg0, int arg1) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentI", "(II)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1)); }
BoundMethodHandle BoundMethodHandle::bindArgumentJ(int arg0, long arg1) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentJ", "(IJ)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1)); }
BoundMethodHandle BoundMethodHandle::bindArgumentF(int arg0, float arg1) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentF", "(IF)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1)); }
BoundMethodHandle BoundMethodHandle::bindArgumentD(int arg0, double arg1) { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bindArgumentD", "(ID)Ljava/lang/invoke/BoundMethodHandle;", arg0, arg1)); }

LambdaFormEditor_Transform LambdaFormEditor_TransformKey::withResult(LambdaForm arg0) { return LambdaFormEditor_Transform(*classes[className]->invokeMethod<jobject>(this->object, "withResult", "(Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/LambdaFormEditor$Transform;", arg0)); }
long LambdaFormEditor_TransformKey::packedBytes(int arg0, int arg1, int arg2, int arg3) { return long(*classes[className]->invokeStaticMethod<long>("packedBytes", "(IIII)J", arg0, arg1, arg2, arg3)); }
long LambdaFormEditor_TransformKey::packedBytes(int arg0, int arg1, int arg2) { return long(*classes[className]->invokeStaticMethod<long>("packedBytes", "(III)J", arg0, arg1, arg2)); }
long LambdaFormEditor_TransformKey::packedBytes(arr_B arg0) { return long(*classes[className]->invokeStaticMethod<long>("packedBytes", "([B)J", arg0)); }
long LambdaFormEditor_TransformKey::packedBytes(int arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("packedBytes", "(II)J", arg0, arg1)); }
byte LambdaFormEditor_TransformKey::bval(int arg0) { return byte(*classes[className]->invokeStaticMethod<byte>("bval", "(I)B", arg0)); }
bool LambdaFormEditor_TransformKey::inRange(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("inRange", "(I)Z", arg0)); }
LambdaFormEditor_TransformKey LambdaFormEditor_TransformKey::ofBothArrays(byte arg0, arr_I arg1, arr_B arg2) { return LambdaFormEditor_TransformKey(*classes[className]->invokeStaticMethod<jobject>("ofBothArrays", "(B[I[B)Ljava/lang/invoke/LambdaFormEditor$TransformKey;", arg0, arg1, arg2)); }
bool LambdaFormEditor_TransformKey::equals(LambdaFormEditor_TransformKey arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/LambdaFormEditor$TransformKey;)Z", arg0)); }
bool LambdaFormEditor_TransformKey::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
bool LambdaFormEditor_TransformKey::equals(LambdaFormEditor_Transform arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/LambdaFormEditor$Transform;)Z", arg0)); }
String LambdaFormEditor_TransformKey::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LambdaFormEditor_TransformKey::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
LambdaFormEditor_TransformKey LambdaFormEditor_TransformKey::of(byte arg0, int arg1, int arg2, arr_B arg3) { return LambdaFormEditor_TransformKey(*classes[className]->invokeStaticMethod<jobject>("of", "(BII[B)Ljava/lang/invoke/LambdaFormEditor$TransformKey;", arg0, arg1, arg2, arg3)); }
LambdaFormEditor_TransformKey LambdaFormEditor_TransformKey::of(byte arg0, int arg1, int arg2) { return LambdaFormEditor_TransformKey(*classes[className]->invokeStaticMethod<jobject>("of", "(BII)Ljava/lang/invoke/LambdaFormEditor$TransformKey;", arg0, arg1, arg2)); }
LambdaFormEditor_TransformKey LambdaFormEditor_TransformKey::of(byte arg0, int arg1) { return LambdaFormEditor_TransformKey(*classes[className]->invokeStaticMethod<jobject>("of", "(BI)Ljava/lang/invoke/LambdaFormEditor$TransformKey;", arg0, arg1)); }
LambdaFormEditor_TransformKey LambdaFormEditor_TransformKey::of(byte arg0, arr_I arg1) { return LambdaFormEditor_TransformKey(*classes[className]->invokeStaticMethod<jobject>("of", "(B[I)Ljava/lang/invoke/LambdaFormEditor$TransformKey;", arg0, arg1)); }
LambdaFormEditor_TransformKey LambdaFormEditor_TransformKey::of(byte arg0, int arg1, arr_I arg2) { return LambdaFormEditor_TransformKey(*classes[className]->invokeStaticMethod<jobject>("of", "(BI[I)Ljava/lang/invoke/LambdaFormEditor$TransformKey;", arg0, arg1, arg2)); }
LambdaFormEditor_TransformKey LambdaFormEditor_TransformKey::of(byte arg0, int arg1, int arg2, int arg3) { return LambdaFormEditor_TransformKey(*classes[className]->invokeStaticMethod<jobject>("of", "(BIII)Ljava/lang/invoke/LambdaFormEditor$TransformKey;", arg0, arg1, arg2, arg3)); }

bool LambdaFormEditor_Transform::equals(LambdaFormEditor_Transform arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/LambdaFormEditor$Transform;)Z", arg0)); }
bool LambdaFormEditor_Transform::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
bool LambdaFormEditor_Transform::equals(LambdaFormEditor_TransformKey arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/invoke/LambdaFormEditor$TransformKey;)Z", arg0)); }
String LambdaFormEditor_Transform::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LambdaFormEditor_Transform::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

Object SoftReference::get() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "()Ljava/lang/Object;")); }

Object Reference::get() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "()Ljava/lang/Object;")); }
bool Reference::refersTo0(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "refersTo0", "(Ljava/lang/Object;)Z", arg0)); }
Object Reference::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void Reference::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
void Reference::reachabilityFence(Object arg0) { (classes[className]->invokeStaticMethod<void>("reachabilityFence", "(Ljava/lang/Object;)V", arg0)); }
bool Reference::enqueue() { return bool(*classes[className]->invokeMethod<bool>(this->object, "enqueue", "()Z")); }
void Reference::waitForReferencePendingList() { (classes[className]->invokeStaticMethod<void>("waitForReferencePendingList", "()V")); }
Reference Reference::getAndClearReferencePendingList() { return Reference(*classes[className]->invokeStaticMethod<jobject>("getAndClearReferencePendingList", "()Ljava/lang/ref/Reference;")); }
void Reference::enqueueFromPending() { (classes[className]->invokeMethod<void>(this->object, "enqueueFromPending", "()V")); }
bool Reference::hasReferencePendingList() { return bool(*classes[className]->invokeStaticMethod<bool>("hasReferencePendingList", "()Z")); }
void Reference::clear0() { (classes[className]->invokeMethod<void>(this->object, "clear0", "()V")); }
void Reference::processPendingReferences() { (classes[className]->invokeStaticMethod<void>("processPendingReferences", "()V")); }
bool Reference::waitForReferenceProcessing() { return bool(*classes[className]->invokeStaticMethod<bool>("waitForReferenceProcessing", "()Z")); }
bool Reference::refersTo(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "refersTo", "(Ljava/lang/Object;)Z", arg0)); }
Object Reference::getFromInactiveFinalReference() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getFromInactiveFinalReference", "()Ljava/lang/Object;")); }
void Reference::clearInactiveFinalReference() { (classes[className]->invokeMethod<void>(this->object, "clearInactiveFinalReference", "()V")); }
bool Reference::isEnqueued() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnqueued", "()Z")); }

void LambdaFormBuffer::replaceName(int arg0, LambdaForm_Name arg1) { (classes[className]->invokeMethod<void>(this->object, "replaceName", "(ILjava/lang/invoke/LambdaForm$Name;)V", arg0, arg1)); }
LambdaForm LambdaFormBuffer::lambdaForm() { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "lambdaForm", "()Ljava/lang/invoke/LambdaForm;")); }
void LambdaFormBuffer::startEdit() { (classes[className]->invokeMethod<void>(this->object, "startEdit", "()V")); }
LambdaFormBuffer LambdaFormBuffer::replaceFunctions(List arg0, List arg1, Object_interface arg2) { return LambdaFormBuffer(*classes[className]->invokeMethod<jobject>(this->object, "replaceFunctions", "(Ljava/util/List;Ljava/util/List;[Ljava/lang/Object;)Ljava/lang/invoke/LambdaFormBuffer;", arg0, arg1, arg2)); }
LambdaFormBuffer LambdaFormBuffer::renameParameter(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*classes[className]->invokeMethod<jobject>(this->object, "renameParameter", "(ILjava/lang/invoke/LambdaForm$Name;)Ljava/lang/invoke/LambdaFormBuffer;", arg0, arg1)); }
LambdaFormBuffer LambdaFormBuffer::replaceParameterByNewExpression(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*classes[className]->invokeMethod<jobject>(this->object, "replaceParameterByNewExpression", "(ILjava/lang/invoke/LambdaForm$Name;)Ljava/lang/invoke/LambdaFormBuffer;", arg0, arg1)); }
LambdaFormBuffer LambdaFormBuffer::insertParameter(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insertParameter", "(ILjava/lang/invoke/LambdaForm$Name;)Ljava/lang/invoke/LambdaFormBuffer;", arg0, arg1)); }
LambdaForm LambdaFormBuffer::endEdit() { return LambdaForm(*classes[className]->invokeMethod<jobject>(this->object, "endEdit", "()Ljava/lang/invoke/LambdaForm;")); }
LambdaFormBuffer LambdaFormBuffer::replaceParameterByCopy(int arg0, int arg1) { return LambdaFormBuffer(*classes[className]->invokeMethod<jobject>(this->object, "replaceParameterByCopy", "(II)Ljava/lang/invoke/LambdaFormBuffer;", arg0, arg1)); }
LambdaFormBuffer LambdaFormBuffer::insertExpression(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*classes[className]->invokeMethod<jobject>(this->object, "insertExpression", "(ILjava/lang/invoke/LambdaForm$Name;)Ljava/lang/invoke/LambdaFormBuffer;", arg0, arg1)); }
void LambdaFormBuffer::setResult(LambdaForm_Name arg0) { (classes[className]->invokeMethod<void>(this->object, "setResult", "(Ljava/lang/invoke/LambdaForm$Name;)V", arg0)); }
void LambdaFormBuffer::changeName(int arg0, LambdaForm_Name arg1) { (classes[className]->invokeMethod<void>(this->object, "changeName", "(ILjava/lang/invoke/LambdaForm$Name;)V", arg0, arg1)); }
void LambdaFormBuffer::setNames(LambdaForm_Name_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setNames", "([Ljava/lang/invoke/LambdaForm$Name;)V", arg0)); }
bool LambdaFormBuffer::inTrans() { return bool(*classes[className]->invokeMethod<bool>(this->object, "inTrans", "()Z")); }
int LambdaFormBuffer::resultIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "resultIndex", "()I")); }
int LambdaFormBuffer::ownedCount() { return int(*classes[className]->invokeMethod<int>(this->object, "ownedCount", "()I")); }
bool LambdaFormBuffer::verifyArity() { return bool(*classes[className]->invokeMethod<bool>(this->object, "verifyArity", "()Z")); }
bool LambdaFormBuffer::verifyFirstChange() { return bool(*classes[className]->invokeMethod<bool>(this->object, "verifyFirstChange", "()Z")); }
void LambdaFormBuffer::growNames(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "growNames", "(II)V", arg0, arg1)); }
void LambdaFormBuffer::clearDuplicatesAndNulls() { (classes[className]->invokeMethod<void>(this->object, "clearDuplicatesAndNulls", "()V")); }
void LambdaFormBuffer::noteDuplicate(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "noteDuplicate", "(II)V", arg0, arg1)); }
void LambdaFormBuffer::insertName(int arg0, LambdaForm_Name arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "insertName", "(ILjava/lang/invoke/LambdaForm$Name;Z)V", arg0, arg1, arg2)); }
LambdaForm_Name LambdaFormBuffer::name(int arg0) { return LambdaForm_Name(*classes[className]->invokeMethod<jobject>(this->object, "name", "(I)Ljava/lang/invoke/LambdaForm$Name;", arg0)); }
int LambdaFormBuffer::indexOf(LambdaForm_NamedFunction arg0, List arg1) { return int(*classes[className]->invokeStaticMethod<int>("indexOf", "(Ljava/lang/invoke/LambdaForm$NamedFunction;Ljava/util/List;)I", arg0, arg1)); }
int LambdaFormBuffer::indexOf(LambdaForm_Name arg0, LambdaForm_Name_interface arg1) { return int(*classes[className]->invokeStaticMethod<int>("indexOf", "(Ljava/lang/invoke/LambdaForm$Name;[Ljava/lang/invoke/LambdaForm$Name;)I", arg0, arg1)); }
int LambdaFormBuffer::lastIndexOf(LambdaForm_Name arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava/lang/invoke/LambdaForm$Name;)I", arg0)); }

PerfCounter PerfCounter::getZipFileOpenTime() { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("getZipFileOpenTime", "()Ljdk/internal/perf/PerfCounter;")); }
PerfCounter PerfCounter::getZipFileCount() { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("getZipFileCount", "()Ljdk/internal/perf/PerfCounter;")); }
PerfCounter PerfCounter::newConstantPerfCounter(String arg0) { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("newConstantPerfCounter", "(Ljava/lang/String;)Ljdk/internal/perf/PerfCounter;", arg0)); }
PerfCounter PerfCounter::getReadClassBytesTime() { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("getReadClassBytesTime", "()Ljdk/internal/perf/PerfCounter;")); }
void PerfCounter::add(long arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(J)V", arg0)); }
long PerfCounter::get() { return long(*classes[className]->invokeMethod<long>(this->object, "get", "()J")); }
String PerfCounter::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
PerfCounter PerfCounter::getParentDelegationTime() { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("getParentDelegationTime", "()Ljdk/internal/perf/PerfCounter;")); }
void PerfCounter::addTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "addTime", "(J)V", arg0)); }
PerfCounter PerfCounter::getFindClassTime() { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("getFindClassTime", "()Ljdk/internal/perf/PerfCounter;")); }
void PerfCounter::addElapsedTimeFrom(long arg0) { (classes[className]->invokeMethod<void>(this->object, "addElapsedTimeFrom", "(J)V", arg0)); }
PerfCounter PerfCounter::getFindClasses() { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("getFindClasses", "()Ljdk/internal/perf/PerfCounter;")); }
void PerfCounter::increment() { (classes[className]->invokeMethod<void>(this->object, "increment", "()V")); }
void PerfCounter::set(long arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "(J)V", arg0)); }
PerfCounter PerfCounter::newPerfCounter(String arg0) { return PerfCounter(*classes[className]->invokeStaticMethod<jobject>("newPerfCounter", "(Ljava/lang/String;)Ljdk/internal/perf/PerfCounter;", arg0)); }

MemberName Invokers::invokeBasicMethod(MethodType arg0) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("invokeBasicMethod", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0)); }
MethodHandle Invokers::cachedInvoker(int arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "cachedInvoker", "(I)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle Invokers::makeExactOrGeneralInvoker(bool arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "makeExactOrGeneralInvoker", "(Z)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle Invokers::setCachedInvoker(int arg0, MethodHandle arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "setCachedInvoker", "(ILjava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
bool Invokers::checkInvoker(MethodHandle arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkInvoker", "(Ljava/lang/invoke/MethodHandle;)Z", arg0)); }
MethodHandle Invokers::cachedVHInvoker(bool arg0, VarHandle_AccessMode arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "cachedVHInvoker", "(ZLjava/lang/invoke/VarHandle$AccessMode;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle Invokers::makeVarHandleMethodInvoker(VarHandle_AccessMode arg0, bool arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "makeVarHandleMethodInvoker", "(Ljava/lang/invoke/VarHandle$AccessMode;Z)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle Invokers::setCachedVHInvoker(bool arg0, VarHandle_AccessMode arg1, MethodHandle arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "setCachedVHInvoker", "(ZLjava/lang/invoke/VarHandle$AccessMode;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
LambdaForm Invokers::invokeHandleForm(MethodType arg0, bool arg1, int arg2) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("invokeHandleForm", "(Ljava/lang/invoke/MethodType;ZI)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2)); }
void Invokers::maybeCompileToBytecode(MethodHandle arg0) { (classes[className]->invokeMethod<void>(this->object, "maybeCompileToBytecode", "(Ljava/lang/invoke/MethodHandle;)V", arg0)); }
LambdaForm Invokers::varHandleMethodInvokerHandleForm(MethodType arg0, bool arg1) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("varHandleMethodInvokerHandleForm", "(Ljava/lang/invoke/MethodType;Z)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
bool Invokers::checkVarHandleInvoker(MethodHandle arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkVarHandleInvoker", "(Ljava/lang/invoke/MethodHandle;)Z", arg0)); }
Class Invokers::impliedRestargType(MethodType arg0, int arg1) { return Class(*classes[className]->invokeStaticMethod<jobject>("impliedRestargType", "(Ljava/lang/invoke/MethodType;I)Ljava/lang/Class;", arg0, arg1)); }
LambdaForm Invokers::varHandleMethodGenericLinkerHandleForm(MethodType arg0) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("varHandleMethodGenericLinkerHandleForm", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/LambdaForm;", arg0)); }
WrongMethodTypeException Invokers::newWrongMethodTypeException(MethodType arg0, MethodType arg1) { return WrongMethodTypeException(*classes[className]->invokeStaticMethod<jobject>("newWrongMethodTypeException", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/WrongMethodTypeException;", arg0, arg1)); }
LambdaForm Invokers::callSiteForm(MethodType arg0, bool arg1) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("callSiteForm", "(Ljava/lang/invoke/MethodType;Z)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
void Invokers::checkExactType(MethodHandle arg0, MethodType arg1) { (classes[className]->invokeStaticMethod<void>("checkExactType", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)V", arg0, arg1)); }
MethodHandle Invokers::checkGenericType(MethodHandle arg0, MethodType arg1) { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("checkGenericType", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle Invokers::getCallSiteTarget(CallSite arg0) { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("getCallSiteTarget", "(Ljava/lang/invoke/CallSite;)Ljava/lang/invoke/MethodHandle;", arg0)); }
void Invokers::checkCustomized(MethodHandle arg0) { (classes[className]->invokeStaticMethod<void>("checkCustomized", "(Ljava/lang/invoke/MethodHandle;)V", arg0)); }
MethodHandle Invokers::checkVarHandleGenericType(VarHandle arg0, VarHandle_AccessDescriptor arg1) { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("checkVarHandleGenericType", "(Ljava/lang/invoke/VarHandle;Ljava/lang/invoke/VarHandle$AccessDescriptor;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle Invokers::checkVarHandleExactType(VarHandle arg0, VarHandle_AccessDescriptor arg1) { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("checkVarHandleExactType", "(Ljava/lang/invoke/VarHandle;Ljava/lang/invoke/VarHandle$AccessDescriptor;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
VarHandle Invokers::directVarHandleTarget(VarHandle arg0) { return VarHandle(*classes[className]->invokeStaticMethod<jobject>("directVarHandleTarget", "(Ljava/lang/invoke/VarHandle;)Ljava/lang/invoke/VarHandle;", arg0)); }
String Invokers::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
LambdaForm_NamedFunction Invokers::getFunction(byte arg0) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("getFunction", "(B)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0)); }
LambdaForm_NamedFunction Invokers::createFunction(byte arg0) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("createFunction", "(B)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0)); }
LambdaForm_NamedFunction Invokers::getNamedFunction(String arg0, MethodType arg1) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("getNamedFunction", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0, arg1)); }
MethodHandle Invokers::spreadInvoker(int arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "spreadInvoker", "(I)Ljava/lang/invoke/MethodHandle;", arg0)); }
void Invokers::maybeCustomize(MethodHandle arg0) { (classes[className]->invokeStaticMethod<void>("maybeCustomize", "(Ljava/lang/invoke/MethodHandle;)V", arg0)); }
MemberName Invokers::linkToTargetMethod(MethodType arg0) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("linkToTargetMethod", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0)); }
MemberName Invokers::linkToCallSiteMethod(MethodType arg0) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("linkToCallSiteMethod", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0)); }
MemberName Invokers::methodHandleInvokeLinkerMethod(String arg0, MethodType arg1, Object_interface arg2) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("methodHandleInvokeLinkerMethod", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2)); }
MemberName Invokers::varHandleInvokeLinkerMethod(MethodType arg0) { return MemberName(*classes[className]->invokeStaticMethod<jobject>("varHandleInvokeLinkerMethod", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0)); }
MethodHandle Invokers::exactInvoker() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "exactInvoker", "()Ljava/lang/invoke/MethodHandle;")); }
MethodHandle Invokers::genericInvoker() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "genericInvoker", "()Ljava/lang/invoke/MethodHandle;")); }
MethodHandle Invokers::varHandleMethodExactInvoker(VarHandle_AccessMode arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "varHandleMethodExactInvoker", "(Ljava/lang/invoke/VarHandle$AccessMode;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle Invokers::varHandleMethodInvoker(VarHandle_AccessMode arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "varHandleMethodInvoker", "(Ljava/lang/invoke/VarHandle$AccessMode;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle Invokers::basicInvoker() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "basicInvoker", "()Ljava/lang/invoke/MethodHandle;")); }

String VarHandle_AccessMode::methodName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "methodName", "()Ljava/lang/String;")); }
VarHandle_AccessMode VarHandle_AccessMode::valueOf(String arg0) { return VarHandle_AccessMode(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/invoke/VarHandle$AccessMode;", arg0)); }
VarHandle_AccessMode VarHandle_AccessMode::valueFromMethodName(String arg0) { return VarHandle_AccessMode(*classes[className]->invokeStaticMethod<jobject>("valueFromMethodName", "(Ljava/lang/String;)Ljava/lang/invoke/VarHandle$AccessMode;", arg0)); }


void CallSite::setTargetNormal(MethodHandle arg0) { (classes[className]->invokeMethod<void>(this->object, "setTargetNormal", "(Ljava/lang/invoke/MethodHandle;)V", arg0)); }
void CallSite::setTargetVolatile(MethodHandle arg0) { (classes[className]->invokeMethod<void>(this->object, "setTargetVolatile", "(Ljava/lang/invoke/MethodHandle;)V", arg0)); }
MethodType CallSite::type() { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "type", "()Ljava/lang/invoke/MethodType;")); }
CallSite CallSite::makeSite(MethodHandle arg0, String arg1, MethodType arg2, Object arg3, Class arg4) { return CallSite(*classes[className]->invokeStaticMethod<jobject>("makeSite", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/invoke/CallSite;", arg0, arg1, arg2, arg3, arg4)); }
MethodHandle CallSite::dynamicInvoker() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "dynamicInvoker", "()Ljava/lang/invoke/MethodHandle;")); }
MethodHandle CallSite::makeUninitializedCallSite(MethodType arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "makeUninitializedCallSite", "(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0)); }
WrongMethodTypeException CallSite::wrongTargetType(MethodHandle arg0, MethodType arg1) { return WrongMethodTypeException(*classes[className]->invokeStaticMethod<jobject>("wrongTargetType", "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/WrongMethodTypeException;", arg0, arg1)); }
MethodHandle CallSite::getTargetHandle() { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("getTargetHandle", "()Ljava/lang/invoke/MethodHandle;")); }
MethodHandle CallSite::getTarget() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getTarget", "()Ljava/lang/invoke/MethodHandle;")); }
Object CallSite::uninitializedCallSite(Object_interface arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("uninitializedCallSite", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
MethodHandle CallSite::uninitializedCallSiteHandle() { return MethodHandle(*classes[className]->invokeStaticMethod<jobject>("uninitializedCallSiteHandle", "()Ljava/lang/invoke/MethodHandle;")); }
void CallSite::checkTargetChange(MethodHandle arg0) { (classes[className]->invokeMethod<void>(this->object, "checkTargetChange", "(Ljava/lang/invoke/MethodHandle;)V", arg0)); }
long CallSite::getTargetOffset() { return long(*classes[className]->invokeStaticMethod<long>("getTargetOffset", "()J")); }
void CallSite::setTarget(MethodHandle arg0) { (classes[className]->invokeMethod<void>(this->object, "setTarget", "(Ljava/lang/invoke/MethodHandle;)V", arg0)); }
MethodHandle CallSite::makeDynamicInvoker() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "makeDynamicInvoker", "()Ljava/lang/invoke/MethodHandle;")); }
MethodHandle CallSite::getTargetVolatile() { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getTargetVolatile", "()Ljava/lang/invoke/MethodHandle;")); }

Object VarHandle::get(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
VarHandle VarHandle::target() { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "target", "()Ljava/lang/invoke/VarHandle;")); }
String VarHandle::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void VarHandle::fullFence() { (classes[className]->invokeStaticMethod<void>("fullFence", "()V")); }
bool VarHandle::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
void VarHandle::set(Object_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "([Ljava/lang/Object;)V", arg0)); }
Class VarHandle::varType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "varType", "()Ljava/lang/Class;")); }
List VarHandle::coordinateTypes() { return List(*classes[className]->invokeMethod<jobject>(this->object, "coordinateTypes", "()Ljava/util/List;")); }
MethodType VarHandle::accessModeType(VarHandle_AccessMode arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "accessModeType", "(Ljava/lang/invoke/VarHandle$AccessMode;)Ljava/lang/invoke/MethodType;", arg0)); }
MethodType VarHandle::accessModeType(int arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "accessModeType", "(I)Ljava/lang/invoke/MethodType;", arg0)); }
void VarHandle::throwWrongMethodTypeException(VarHandle_AccessDescriptor arg0) { (classes[className]->invokeMethod<void>(this->object, "throwWrongMethodTypeException", "(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V", arg0)); }
VarHandle_TypesAndInvokers VarHandle::getTypesAndInvokers() { return VarHandle_TypesAndInvokers(*classes[className]->invokeMethod<jobject>(this->object, "getTypesAndInvokers", "()Ljava/lang/invoke/VarHandle$TypesAndInvokers;")); }
MethodType VarHandle::accessModeTypeUncached(VarHandle_AccessType arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "accessModeTypeUncached", "(Ljava/lang/invoke/VarHandle$AccessType;)Ljava/lang/invoke/MethodType;", arg0)); }
MethodType VarHandle::accessModeTypeUncached(int arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "accessModeTypeUncached", "(I)Ljava/lang/invoke/MethodType;", arg0)); }
bool VarHandle::isAccessModeSupported(VarHandle_AccessMode arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAccessModeSupported", "(Ljava/lang/invoke/VarHandle$AccessMode;)Z", arg0)); }
MethodHandle VarHandle::getMethodHandle(int arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getMethodHandle", "(I)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle VarHandle::getMethodHandleUncached(int arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getMethodHandleUncached", "(I)Ljava/lang/invoke/MethodHandle;", arg0)); }
void VarHandle::loadLoadFence() { (classes[className]->invokeStaticMethod<void>("loadLoadFence", "()V")); }
void VarHandle::storeStoreFence() { (classes[className]->invokeStaticMethod<void>("storeStoreFence", "()V")); }
RuntimeException VarHandle::unsupported() { return RuntimeException(*classes[className]->invokeMethod<jobject>(this->object, "unsupported", "()Ljava/lang/RuntimeException;")); }
VarHandle VarHandle::asDirect() { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "asDirect", "()Ljava/lang/invoke/VarHandle;")); }
bool VarHandle::hasInvokeExactBehavior() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasInvokeExactBehavior", "()Z")); }
Object VarHandle::getVolatile(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getVolatile", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
void VarHandle::setVolatile(Object_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setVolatile", "([Ljava/lang/Object;)V", arg0)); }
Object VarHandle::getOpaque(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getOpaque", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
void VarHandle::setOpaque(Object_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setOpaque", "([Ljava/lang/Object;)V", arg0)); }
Object VarHandle::getAcquire(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAcquire", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
void VarHandle::setRelease(Object_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setRelease", "([Ljava/lang/Object;)V", arg0)); }
bool VarHandle::compareAndSet(Object_interface arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "compareAndSet", "([Ljava/lang/Object;)Z", arg0)); }
Object VarHandle::compareAndExchange(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "compareAndExchange", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::compareAndExchangeAcquire(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "compareAndExchangeAcquire", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::compareAndExchangeRelease(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "compareAndExchangeRelease", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
bool VarHandle::weakCompareAndSetPlain(Object_interface arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSetPlain", "([Ljava/lang/Object;)Z", arg0)); }
bool VarHandle::weakCompareAndSet(Object_interface arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSet", "([Ljava/lang/Object;)Z", arg0)); }
bool VarHandle::weakCompareAndSetAcquire(Object_interface arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSetAcquire", "([Ljava/lang/Object;)Z", arg0)); }
bool VarHandle::weakCompareAndSetRelease(Object_interface arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSetRelease", "([Ljava/lang/Object;)Z", arg0)); }
Object VarHandle::getAndSet(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndSet", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndSetAcquire(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndSetAcquire", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndSetRelease(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndSetRelease", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndAdd(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndAdd", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndAddAcquire(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndAddAcquire", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndAddRelease(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndAddRelease", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseOr(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseOr", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseOrAcquire(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseOrAcquire", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseOrRelease(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseOrRelease", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseAnd(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseAnd", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseAndAcquire(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseAndAcquire", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseAndRelease(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseAndRelease", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseXor(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseXor", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseXorAcquire(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseXorAcquire", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object VarHandle::getAndBitwiseXorRelease(Object_interface arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAndBitwiseXorRelease", "([Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
VarHandle VarHandle::withInvokeExactBehavior() { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "withInvokeExactBehavior", "()Ljava/lang/invoke/VarHandle;")); }
VarHandle VarHandle::withInvokeBehavior() { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "withInvokeBehavior", "()Ljava/lang/invoke/VarHandle;")); }
void VarHandle::checkExactAccessMode(VarHandle_AccessDescriptor arg0) { (classes[className]->invokeMethod<void>(this->object, "checkExactAccessMode", "(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V", arg0)); }
MethodHandle VarHandle::toMethodHandle(VarHandle_AccessMode arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "toMethodHandle", "(Ljava/lang/invoke/VarHandle$AccessMode;)Ljava/lang/invoke/MethodHandle;", arg0)); }
void VarHandle::updateVarForm(VarForm arg0) { (classes[className]->invokeMethod<void>(this->object, "updateVarForm", "(Ljava/lang/invoke/VarForm;)V", arg0)); }
void VarHandle::acquireFence() { (classes[className]->invokeStaticMethod<void>("acquireFence", "()V")); }
void VarHandle::releaseFence() { (classes[className]->invokeStaticMethod<void>("releaseFence", "()V")); }



int VarHandle_AccessType::fillParameters(Class_interface arg0, Class arg1, Class_interface arg2) { return int(*classes[className]->invokeStaticMethod<int>("fillParameters", "([Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)I", arg0, arg1, arg2)); }
VarHandle_AccessType VarHandle_AccessType::valueOf(String arg0) { return VarHandle_AccessType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/invoke/VarHandle$AccessType;", arg0)); }
MethodType VarHandle_AccessType::accessModeType(Class arg0, Class arg1, Class_interface arg2) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "accessModeType", "(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;", arg0, arg1, arg2)); }

void VarForm::initMethodTypes(Class arg0, Class_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "initMethodTypes", "(Ljava/lang/Class;[Ljava/lang/Class;)V", arg0, arg1)); }
MemberName VarForm::resolveMemberName(int arg0) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveMemberName", "(I)Ljava/lang/invoke/MemberName;", arg0)); }
MethodType VarForm::getMethodType_V(int arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "getMethodType_V", "(I)Ljava/lang/invoke/MethodType;", arg0)); }
MethodType VarForm::getMethodType(int arg0) { return MethodType(*classes[className]->invokeMethod<jobject>(this->object, "getMethodType", "(I)Ljava/lang/invoke/MethodType;", arg0)); }
MemberName VarForm::getMemberNameOrNull(int arg0) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "getMemberNameOrNull", "(I)Ljava/lang/invoke/MemberName;", arg0)); }
MemberName VarForm::getMemberName(int arg0) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "getMemberName", "(I)Ljava/lang/invoke/MemberName;", arg0)); }


Object Method::invoke(Object arg0, Object_interface arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1)); }
bool Method::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Method::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Method::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
MethodRepository Method::getGenericInfo() { return MethodRepository(*classes[className]->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun/reflect/generics/repository/MethodRepository;")); }
GenericsFactory Method::getFactory() { return GenericsFactory(*classes[className]->invokeMethod<jobject>(this->object, "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;")); }
Class Method::getReturnType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getReturnType", "()Ljava/lang/Class;")); }
String Method::toGenericString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava/lang/String;")); }
void Method::setAccessible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }
void Method::checkCanSetAccessible(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava/lang/Class;)V", arg0)); }
String Method::toShortString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toShortString", "()Ljava/lang/String;")); }
Method Method::getRoot() { return Method(*classes[className]->invokeMethod<jobject>(this->object, "getRoot", "()Ljava/lang/reflect/Method;")); }
String Method::getGenericSignature() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getGenericSignature", "()Ljava/lang/String;")); }
Method Method::copy() { return Method(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Ljava/lang/reflect/Method;")); }
bool Method::isVarArgs() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVarArgs", "()Z")); }
int Method::getParameterCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getParameterCount", "()I")); }
bool Method::isDefault() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDefault", "()Z")); }
String Method::toShortSignature() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toShortSignature", "()Ljava/lang/String;")); }
Type Method::getGenericReturnType() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "getGenericReturnType", "()Ljava/lang/reflect/Type;")); }
MethodAccessor Method::acquireMethodAccessor() { return MethodAccessor(*classes[className]->invokeMethod<jobject>(this->object, "acquireMethodAccessor", "()Ljdk/internal/reflect/MethodAccessor;")); }
MethodAccessor Method::getMethodAccessor() { return MethodAccessor(*classes[className]->invokeMethod<jobject>(this->object, "getMethodAccessor", "()Ljdk/internal/reflect/MethodAccessor;")); }
void Method::setMethodAccessor(MethodAccessor arg0) { (classes[className]->invokeMethod<void>(this->object, "setMethodAccessor", "(Ljdk/internal/reflect/MethodAccessor;)V", arg0)); }
Method Method::leafCopy() { return Method(*classes[className]->invokeMethod<jobject>(this->object, "leafCopy", "()Ljava/lang/reflect/Method;")); }
bool Method::hasGenericInformation() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasGenericInformation", "()Z")); }
void Method::specificToStringHeader(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "specificToStringHeader", "(Ljava/lang/StringBuilder;)V", arg0)); }
void Method::specificToGenericStringHeader(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "specificToGenericStringHeader", "(Ljava/lang/StringBuilder;)V", arg0)); }
bool Method::isBridge() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBridge", "()Z")); }
Object Method::getDefaultValue() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultValue", "()Ljava/lang/Object;")); }
AnnotatedType Method::getAnnotatedReturnType() { return AnnotatedType(*classes[className]->invokeMethod<jobject>(this->object, "getAnnotatedReturnType", "()Ljava/lang/reflect/AnnotatedType;")); }
bool Method::handleParameterNumberMismatch(int arg0, Class_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleParameterNumberMismatch", "(I[Ljava/lang/Class;)Z", arg0, arg1)); }

Type MethodRepository::computeReturnType() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "computeReturnType", "()Ljava/lang/reflect/Type;")); }
MethodRepository MethodRepository::make(String arg0, GenericsFactory arg1) { return MethodRepository(*classes[className]->invokeStaticMethod<jobject>("make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/MethodRepository;", arg0, arg1)); }
Type MethodRepository::getReturnType() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "getReturnType", "()Ljava/lang/reflect/Type;")); }


int Long::numberOfLeadingZeros(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("numberOfLeadingZeros", "(J)I", arg0)); }
int Long::numberOfTrailingZeros(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("numberOfTrailingZeros", "(J)I", arg0)); }
int Long::bitCount(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("bitCount", "(J)I", arg0)); }
bool Long::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Long::toString(long arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(J)Ljava/lang/String;", arg0)); }
String Long::toString(long arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(JI)Ljava/lang/String;", arg0, arg1)); }
String Long::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Long::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int Long::hashCode(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("hashCode", "(J)I", arg0)); }
long Long::min(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("min", "(JJ)J", arg0, arg1)); }
long Long::max(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("max", "(JJ)J", arg0, arg1)); }
int Long::signum(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("signum", "(J)I", arg0)); }
long Long::reverseBytes(long arg0) { return long(*classes[className]->invokeStaticMethod<long>("reverseBytes", "(J)J", arg0)); }
int Long::getChars(long arg0, int arg1, arr_B arg2) { return int(*classes[className]->invokeStaticMethod<int>("getChars", "(JI[B)I", arg0, arg1, arg2)); }
Long Long::getLong(String arg0, long arg1) { return Long(*classes[className]->invokeStaticMethod<jobject>("getLong", "(Ljava/lang/String;J)Ljava/lang/Long;", arg0, arg1)); }
Long Long::getLong(String arg0) { return Long(*classes[className]->invokeStaticMethod<jobject>("getLong", "(Ljava/lang/String;)Ljava/lang/Long;", arg0)); }
Long Long::getLong(String arg0, Long arg1) { return Long(*classes[className]->invokeStaticMethod<jobject>("getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;", arg0, arg1)); }
int Long::compare(long arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(JJ)I", arg0, arg1)); }
byte Long::byteValue() { return byte(*classes[className]->invokeMethod<byte>(this->object, "byteValue", "()B")); }
short Long::shortValue() { return short(*classes[className]->invokeMethod<short>(this->object, "shortValue", "()S")); }
int Long::intValue() { return int(*classes[className]->invokeMethod<int>(this->object, "intValue", "()I")); }
long Long::longValue() { return long(*classes[className]->invokeMethod<long>(this->object, "longValue", "()J")); }
float Long::floatValue() { return float(*classes[className]->invokeMethod<float>(this->object, "floatValue", "()F")); }
double Long::doubleValue() { return double(*classes[className]->invokeMethod<double>(this->object, "doubleValue", "()D")); }
Long Long::valueOf(String arg0, int arg1) { return Long(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;", arg0, arg1)); }
Long Long::valueOf(long arg0) { return Long(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(J)Ljava/lang/Long;", arg0)); }
Long Long::valueOf(String arg0) { return Long(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/Long;", arg0)); }
String Long::toHexString(long arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toHexString", "(J)Ljava/lang/String;", arg0)); }
Long Long::decode(String arg0) { return Long(*classes[className]->invokeStaticMethod<jobject>("decode", "(Ljava/lang/String;)Ljava/lang/Long;", arg0)); }
Long Long::resolveConstantDesc(MethodHandles_Lookup arg0) { return Long(*classes[className]->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Long;", arg0)); }
long Long::reverse(long arg0) { return long(*classes[className]->invokeStaticMethod<long>("reverse", "(J)J", arg0)); }
int Long::stringSize(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("stringSize", "(J)I", arg0)); }
long Long::sum(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("sum", "(JJ)J", arg0, arg1)); }
int Long::compareUnsigned(long arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("compareUnsigned", "(JJ)I", arg0, arg1)); }
String Long::toStringUTF16(long arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toStringUTF16", "(JI)Ljava/lang/String;", arg0, arg1)); }
String Long::toUnsignedString(long arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toUnsignedString", "(JI)Ljava/lang/String;", arg0, arg1)); }
String Long::toUnsignedString(long arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toUnsignedString", "(J)Ljava/lang/String;", arg0)); }
String Long::toUnsignedString0(long arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toUnsignedString0", "(JI)Ljava/lang/String;", arg0, arg1)); }
long Long::parseLong(CharSequence arg0, int arg1, int arg2, int arg3) { return long(*classes[className]->invokeStaticMethod<long>("parseLong", "(Ljava/lang/CharSequence;III)J", arg0, arg1, arg2, arg3)); }
long Long::parseLong(String arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("parseLong", "(Ljava/lang/String;I)J", arg0, arg1)); }
long Long::parseLong(String arg0) { return long(*classes[className]->invokeStaticMethod<long>("parseLong", "(Ljava/lang/String;)J", arg0)); }
String Long::toOctalString(long arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toOctalString", "(J)Ljava/lang/String;", arg0)); }
String Long::toBinaryString(long arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toBinaryString", "(J)Ljava/lang/String;", arg0)); }
long Long::divideUnsigned(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("divideUnsigned", "(JJ)J", arg0, arg1)); }
long Long::remainderUnsigned(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("remainderUnsigned", "(JJ)J", arg0, arg1)); }
long Long::highestOneBit(long arg0) { return long(*classes[className]->invokeStaticMethod<long>("highestOneBit", "(J)J", arg0)); }
long Long::lowestOneBit(long arg0) { return long(*classes[className]->invokeStaticMethod<long>("lowestOneBit", "(J)J", arg0)); }
long Long::rotateLeft(long arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("rotateLeft", "(JI)J", arg0, arg1)); }
long Long::rotateRight(long arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("rotateRight", "(JI)J", arg0, arg1)); }
BigInteger Long::toUnsignedBigInteger(long arg0) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("toUnsignedBigInteger", "(J)Ljava/math/BigInteger;", arg0)); }
void Long::formatUnsignedLong0(long arg0, int arg1, arr_B arg2, int arg3, int arg4) { (classes[className]->invokeStaticMethod<void>("formatUnsignedLong0", "(JI[BII)V", arg0, arg1, arg2, arg3, arg4)); }
void Long::formatUnsignedLong0UTF16(long arg0, int arg1, arr_B arg2, int arg3, int arg4) { (classes[className]->invokeStaticMethod<void>("formatUnsignedLong0UTF16", "(JI[BII)V", arg0, arg1, arg2, arg3, arg4)); }
long Long::parseUnsignedLong(String arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("parseUnsignedLong", "(Ljava/lang/String;I)J", arg0, arg1)); }
long Long::parseUnsignedLong(CharSequence arg0, int arg1, int arg2, int arg3) { return long(*classes[className]->invokeStaticMethod<long>("parseUnsignedLong", "(Ljava/lang/CharSequence;III)J", arg0, arg1, arg2, arg3)); }
long Long::parseUnsignedLong(String arg0) { return long(*classes[className]->invokeStaticMethod<long>("parseUnsignedLong", "(Ljava/lang/String;)J", arg0)); }
String Long::fastUUID(long arg0, long arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("fastUUID", "(JJ)Ljava/lang/String;", arg0, arg1)); }

void MethodHandles_Lookup::checkUnprivilegedlookupClass(Class arg0) { (classes[className]->invokeStaticMethod<void>("checkUnprivilegedlookupClass", "(Ljava/lang/Class;)V", arg0)); }
bool MethodHandles_Lookup::isClassAccessible(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isClassAccessible", "(Ljava/lang/Class;)Z", arg0)); }
void MethodHandles_Lookup::ensureDefineClassPermission() { (classes[className]->invokeMethod<void>(this->object, "ensureDefineClassPermission", "()V")); }
MethodHandles_Lookup_ClassDefiner MethodHandles_Lookup::makeClassDefiner(arr_B arg0) { return MethodHandles_Lookup_ClassDefiner(*classes[className]->invokeMethod<jobject>(this->object, "makeClassDefiner", "([B)Ljava/lang/invoke/MethodHandles$Lookup$ClassDefiner;", arg0)); }
bool MethodHandles_Lookup::hasFullPrivilegeAccess() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasFullPrivilegeAccess", "()Z")); }
MethodHandles_Lookup_ClassDefiner MethodHandles_Lookup::makeHiddenClassDefiner(String arg0, arr_B arg1) { return MethodHandles_Lookup_ClassDefiner(*classes[className]->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "(Ljava/lang/String;[B)Ljava/lang/invoke/MethodHandles$Lookup$ClassDefiner;", arg0, arg1)); }
MethodHandles_Lookup_ClassDefiner MethodHandles_Lookup::makeHiddenClassDefiner(arr_B arg0, Set arg1, bool arg2) { return MethodHandles_Lookup_ClassDefiner(*classes[className]->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "([BLjava/util/Set;Z)Ljava/lang/invoke/MethodHandles$Lookup$ClassDefiner;", arg0, arg1, arg2)); }
MethodHandles_Lookup_ClassDefiner MethodHandles_Lookup::makeHiddenClassDefiner(arr_B arg0) { return MethodHandles_Lookup_ClassDefiner(*classes[className]->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "([B)Ljava/lang/invoke/MethodHandles$Lookup$ClassDefiner;", arg0)); }
MethodHandles_Lookup_ClassDefiner MethodHandles_Lookup::makeHiddenClassDefiner(MethodHandles_Lookup_ClassFile arg0, Set arg1, bool arg2) { return MethodHandles_Lookup_ClassDefiner(*classes[className]->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "(Ljava/lang/invoke/MethodHandles$Lookup$ClassFile;Ljava/util/Set;Z)Ljava/lang/invoke/MethodHandles$Lookup$ClassDefiner;", arg0, arg1, arg2)); }
MethodHandles_Lookup MethodHandles_Lookup::findBoundCallerLookup(MemberName arg0) { return MethodHandles_Lookup(*classes[className]->invokeMethod<jobject>(this->object, "findBoundCallerLookup", "(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandles$Lookup;", arg0)); }
MethodHandle MethodHandles_Lookup::getDirectMethod(byte arg0, Class arg1, MemberName arg2, MethodHandles_Lookup arg3) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectMethod", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2, arg3)); }
MethodHandle MethodHandles_Lookup::findVirtualForMH(String arg0, MethodType arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findVirtualForMH", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::findVirtualForVH(String arg0, MethodType arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findVirtualForVH", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::getDirectConstructor(Class arg0, MemberName arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectConstructor", "(Ljava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
Class MethodHandles_Lookup::accessClass(Class arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "accessClass", "(Ljava/lang/Class;)Ljava/lang/Class;", arg0)); }
void MethodHandles_Lookup::checkSecurityManager(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "checkSecurityManager", "(Ljava/lang/Class;)V", arg0)); }
void MethodHandles_Lookup::checkSecurityManager(Class arg0, MemberName arg1) { (classes[className]->invokeMethod<void>(this->object, "checkSecurityManager", "(Ljava/lang/Class;Ljava/lang/invoke/MemberName;)V", arg0, arg1)); }
void MethodHandles_Lookup::checkSpecialCaller(Class arg0, Class arg1) { (classes[className]->invokeMethod<void>(this->object, "checkSpecialCaller", "(Ljava/lang/Class;Ljava/lang/Class;)V", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::getDirectField(byte arg0, Class arg1, MemberName arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectField", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
VarHandle MethodHandles_Lookup::getFieldVarHandle(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4) { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "getFieldVarHandle", "(BBLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/VarHandle;", arg0, arg1, arg2, arg3, arg4)); }
MethodHandle MethodHandles_Lookup::getDirectMethodNoRestrictInvokeSpecial(Class arg0, MemberName arg1, MethodHandles_Lookup arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectMethodNoRestrictInvokeSpecial", "(Ljava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::unreflectForMH(Method arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectForMH", "(Ljava/lang/reflect/Method;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandles_Lookup::unreflectForVH(Method arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectForVH", "(Ljava/lang/reflect/Method;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandles_Lookup::getDirectMethodNoSecurityManager(byte arg0, Class arg1, MemberName arg2, MethodHandles_Lookup arg3) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectMethodNoSecurityManager", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2, arg3)); }
MethodHandle MethodHandles_Lookup::getDirectConstructorNoSecurityManager(Class arg0, MemberName arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectConstructorNoSecurityManager", "(Ljava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::unreflectField(Field arg0, bool arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectField", "(Ljava/lang/reflect/Field;Z)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::getDirectFieldNoSecurityManager(byte arg0, Class arg1, MemberName arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectFieldNoSecurityManager", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
VarHandle MethodHandles_Lookup::getFieldVarHandleNoSecurityManager(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4) { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "getFieldVarHandleNoSecurityManager", "(BBLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/VarHandle;", arg0, arg1, arg2, arg3, arg4)); }
void MethodHandles_Lookup::checkSymbolicClass(Class arg0) { (classes[className]->invokeMethod<void>(this->object, "checkSymbolicClass", "(Ljava/lang/Class;)V", arg0)); }
Class MethodHandles_Lookup::lookupClassOrNull() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "lookupClassOrNull", "()Ljava/lang/Class;")); }
void MethodHandles_Lookup::checkMethodName(byte arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "checkMethodName", "(BLjava/lang/String;)V", arg0, arg1)); }
int MethodHandles_Lookup::fixmods(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("fixmods", "(I)I", arg0)); }
String MethodHandles_Lookup::accessFailedMessage(Class arg0, MemberName arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "accessFailedMessage", "(Ljava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/String;", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::getDirectMethodCommon(byte arg0, Class arg1, MemberName arg2, bool arg3, bool arg4, MethodHandles_Lookup arg5) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectMethodCommon", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;ZZLjava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2, arg3, arg4, arg5)); }
void MethodHandles_Lookup::checkMethod(byte arg0, Class arg1, MemberName arg2) { (classes[className]->invokeMethod<void>(this->object, "checkMethod", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)V", arg0, arg1, arg2)); }
bool MethodHandles_Lookup::restrictProtectedReceiver(MemberName arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "restrictProtectedReceiver", "(Ljava/lang/invoke/MemberName;)Z", arg0)); }
MethodHandle MethodHandles_Lookup::restrictReceiver(MemberName arg0, DirectMethodHandle arg1, Class arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "restrictReceiver", "(Ljava/lang/invoke/MemberName;Ljava/lang/invoke/DirectMethodHandle;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::maybeBindCaller(MemberName arg0, MethodHandle arg1, MethodHandles_Lookup arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "maybeBindCaller", "(Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::getDirectFieldCommon(byte arg0, Class arg1, MemberName arg2, bool arg3) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectFieldCommon", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2, arg3)); }
void MethodHandles_Lookup::checkField(byte arg0, Class arg1, MemberName arg2) { (classes[className]->invokeMethod<void>(this->object, "checkField", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)V", arg0, arg1, arg2)); }
VarHandle MethodHandles_Lookup::getFieldVarHandleCommon(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4, bool arg5) { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "getFieldVarHandleCommon", "(BBLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/VarHandle;", arg0, arg1, arg2, arg3, arg4, arg5)); }
MethodHandle MethodHandles_Lookup::getDirectConstructorCommon(Class arg0, MemberName arg1, bool arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectConstructorCommon", "(Ljava/lang/Class;Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::getDirectMethodForConstant(byte arg0, Class arg1, MemberName arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getDirectMethodForConstant", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
bool MethodHandles_Lookup::canBeCached(byte arg0, Class arg1, MemberName arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeCached", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Z", arg0, arg1, arg2)); }
MethodHandles_Lookup MethodHandles_Lookup::dropLookupMode(int arg0) { return MethodHandles_Lookup(*classes[className]->invokeMethod<jobject>(this->object, "dropLookupMode", "(I)Ljava/lang/invoke/MethodHandles$Lookup;", arg0)); }
MethodHandles_Lookup MethodHandles_Lookup::defineHiddenClass(arr_B arg0, bool arg1, MethodHandles_Lookup_ClassOption_interface arg2) { return MethodHandles_Lookup(*classes[className]->invokeMethod<jobject>(this->object, "defineHiddenClass", "([BZ[Ljava/lang/invoke/MethodHandles$Lookup$ClassOption;)Ljava/lang/invoke/MethodHandles$Lookup;", arg0, arg1, arg2)); }
MethodHandles_Lookup MethodHandles_Lookup::defineHiddenClassWithClassData(arr_B arg0, Object arg1, bool arg2, MethodHandles_Lookup_ClassOption_interface arg3) { return MethodHandles_Lookup(*classes[className]->invokeMethod<jobject>(this->object, "defineHiddenClassWithClassData", "([BLjava/lang/Object;Z[Ljava/lang/invoke/MethodHandles$Lookup$ClassOption;)Ljava/lang/invoke/MethodHandles$Lookup;", arg0, arg1, arg2, arg3)); }
ProtectionDomain MethodHandles_Lookup::lookupClassProtectionDomain() { return ProtectionDomain(*classes[className]->invokeMethod<jobject>(this->object, "lookupClassProtectionDomain", "()Ljava/security/ProtectionDomain;")); }
MethodHandle MethodHandles_Lookup::findConstructor(Class arg0, MethodType arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findConstructor", "(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::findSpecial(Class arg0, String arg1, MethodType arg2, Class arg3) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findSpecial", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2, arg3)); }
MethodHandle MethodHandles_Lookup::findGetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findGetter", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::findSetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findSetter", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
VarHandle MethodHandles_Lookup::findVarHandle(Class arg0, String arg1, Class arg2) { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "findVarHandle", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/VarHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::findStaticGetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findStaticGetter", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::findStaticSetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findStaticSetter", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
VarHandle MethodHandles_Lookup::findStaticVarHandle(Class arg0, String arg1, Class arg2) { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "findStaticVarHandle", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/VarHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::bind(Object arg0, String arg1, MethodType arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "bind", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::unreflect(Method arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflect", "(Ljava/lang/reflect/Method;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandles_Lookup::unreflectSpecial(Method arg0, Class arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectSpecial", "(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle MethodHandles_Lookup::unreflectConstructor(Constructor arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectConstructor", "(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandles_Lookup::unreflectGetter(Field arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectGetter", "(Ljava/lang/reflect/Field;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle MethodHandles_Lookup::unreflectSetter(Field arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectSetter", "(Ljava/lang/reflect/Field;)Ljava/lang/invoke/MethodHandle;", arg0)); }
VarHandle MethodHandles_Lookup::unreflectVarHandle(Field arg0) { return VarHandle(*classes[className]->invokeMethod<jobject>(this->object, "unreflectVarHandle", "(Ljava/lang/reflect/Field;)Ljava/lang/invoke/VarHandle;", arg0)); }
bool MethodHandles_Lookup::hasPrivateAccess() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasPrivateAccess", "()Z")); }
MethodHandle MethodHandles_Lookup::linkMethodHandleConstant(byte arg0, Class arg1, String arg2, Object arg3) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "linkMethodHandleConstant", "(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2, arg3)); }
String MethodHandles_Lookup::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Class MethodHandles_Lookup::findClass(String arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;", arg0)); }
Class MethodHandles_Lookup::defineClass(arr_B arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "defineClass", "([B)Ljava/lang/Class;", arg0)); }
MethodHandles_Lookup MethodHandles_Lookup::in(Class arg0) { return MethodHandles_Lookup(*classes[className]->invokeMethod<jobject>(this->object, "in", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandles$Lookup;", arg0)); }
void MethodHandles_Lookup::checkAccess(byte arg0, Class arg1, MemberName arg2) { (classes[className]->invokeMethod<void>(this->object, "checkAccess", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)V", arg0, arg1, arg2)); }
MemberName MethodHandles_Lookup::resolveOrNull(byte arg0, Class arg1, String arg2, MethodType arg3) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveOrNull", "(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2, arg3)); }
MemberName MethodHandles_Lookup::resolveOrNull(byte arg0, MemberName arg1) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveOrNull", "(BLjava/lang/invoke/MemberName;)Ljava/lang/invoke/MemberName;", arg0, arg1)); }
MemberName MethodHandles_Lookup::resolveOrFail(byte arg0, Class arg1, String arg2, Class arg3) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2, arg3)); }
MemberName MethodHandles_Lookup::resolveOrFail(byte arg0, MemberName arg1) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava/lang/invoke/MemberName;)Ljava/lang/invoke/MemberName;", arg0, arg1)); }
MemberName MethodHandles_Lookup::resolveOrFail(byte arg0, Class arg1, String arg2, MethodType arg3) { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;", arg0, arg1, arg2, arg3)); }
Class MethodHandles_Lookup::ensureInitialized(Class arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "ensureInitialized", "(Ljava/lang/Class;)Ljava/lang/Class;", arg0)); }
MethodHandleInfo MethodHandles_Lookup::revealDirect(MethodHandle arg0) { return MethodHandleInfo(*classes[className]->invokeMethod<jobject>(this->object, "revealDirect", "(Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandleInfo;", arg0)); }
IllegalAccessException MethodHandles_Lookup::makeAccessException(Class arg0) { return IllegalAccessException(*classes[className]->invokeMethod<jobject>(this->object, "makeAccessException", "(Ljava/lang/Class;)Ljava/lang/IllegalAccessException;", arg0)); }
Class MethodHandles_Lookup::lookupClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "lookupClass", "()Ljava/lang/Class;")); }
Class MethodHandles_Lookup::previousLookupClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "previousLookupClass", "()Ljava/lang/Class;")); }
MethodHandle MethodHandles_Lookup::findVirtual(Class arg0, String arg1, MethodType arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findVirtual", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle MethodHandles_Lookup::findStatic(Class arg0, String arg1, MethodType arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findStatic", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
int MethodHandles_Lookup::lookupModes() { return int(*classes[className]->invokeMethod<int>(this->object, "lookupModes", "()I")); }
MethodHandles_Lookup MethodHandles_Lookup::newLookup(Class arg0, Class arg1, int arg2) { return MethodHandles_Lookup(*classes[className]->invokeStaticMethod<jobject>("newLookup", "(Ljava/lang/Class;Ljava/lang/Class;I)Ljava/lang/invoke/MethodHandles$Lookup;", arg0, arg1, arg2)); }

bool MethodHandles_Lookup_ClassDefiner::isNestmate() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNestmate", "()Z")); }
MethodHandles_Lookup MethodHandles_Lookup_ClassDefiner::defineClassAsLookup(bool arg0, Object arg1) { return MethodHandles_Lookup(*classes[className]->invokeMethod<jobject>(this->object, "defineClassAsLookup", "(ZLjava/lang/Object;)Ljava/lang/invoke/MethodHandles$Lookup;", arg0, arg1)); }
MethodHandles_Lookup MethodHandles_Lookup_ClassDefiner::defineClassAsLookup(bool arg0) { return MethodHandles_Lookup(*classes[className]->invokeMethod<jobject>(this->object, "defineClassAsLookup", "(Z)Ljava/lang/invoke/MethodHandles$Lookup;", arg0)); }
String MethodHandles_Lookup_ClassDefiner::className_() { return String(*classes[className]->invokeMethod<jobject>(this->object, "className", "()Ljava/lang/String;")); }
Class MethodHandles_Lookup_ClassDefiner::defineClass(bool arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "defineClass", "(Z)Ljava/lang/Class;", arg0)); }
Class MethodHandles_Lookup_ClassDefiner::defineClass(bool arg0, Object arg1) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "defineClass", "(ZLjava/lang/Object;)Ljava/lang/Class;", arg0, arg1)); }

int MethodHandles_Lookup_ClassFile::readUnsignedShort(arr_B arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("readUnsignedShort", "([BI)I", arg0, arg1)); }
MethodHandles_Lookup_ClassFile MethodHandles_Lookup_ClassFile::newInstanceNoCheck(String arg0, arr_B arg1) { return MethodHandles_Lookup_ClassFile(*classes[className]->invokeStaticMethod<jobject>("newInstanceNoCheck", "(Ljava/lang/String;[B)Ljava/lang/invoke/MethodHandles$Lookup$ClassFile;", arg0, arg1)); }
MethodHandles_Lookup_ClassFile MethodHandles_Lookup_ClassFile::newInstance(arr_B arg0, String arg1) { return MethodHandles_Lookup_ClassFile(*classes[className]->invokeStaticMethod<jobject>("newInstance", "([BLjava/lang/String;)Ljava/lang/invoke/MethodHandles$Lookup$ClassFile;", arg0, arg1)); }
int MethodHandles_Lookup_ClassFile::readInt(arr_B arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("readInt", "([BI)I", arg0, arg1)); }

Object DirectMethodHandle::allocateInstance(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("allocateInstance", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
DirectMethodHandle DirectMethodHandle::make(byte arg0, Class arg1, MemberName arg2, Class arg3) { return DirectMethodHandle(*classes[className]->invokeStaticMethod<jobject>("make", "(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/Class;)Ljava/lang/invoke/DirectMethodHandle;", arg0, arg1, arg2, arg3)); }
DirectMethodHandle DirectMethodHandle::make(Class arg0, MemberName arg1) { return DirectMethodHandle(*classes[className]->invokeStaticMethod<jobject>("make", "(Ljava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/DirectMethodHandle;", arg0, arg1)); }
DirectMethodHandle DirectMethodHandle::make(MemberName arg0) { return DirectMethodHandle(*classes[className]->invokeStaticMethod<jobject>("make", "(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/DirectMethodHandle;", arg0)); }
long DirectMethodHandle::fieldOffset(Object arg0) { return long(*classes[className]->invokeStaticMethod<long>("fieldOffset", "(Ljava/lang/Object;)J", arg0)); }
LambdaForm DirectMethodHandle::preparedLambdaForm(MemberName arg0, bool arg1) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("preparedLambdaForm", "(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm DirectMethodHandle::preparedLambdaForm(MethodType arg0, int arg1) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("preparedLambdaForm", "(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm DirectMethodHandle::preparedLambdaForm(MemberName arg0) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("preparedLambdaForm", "(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/LambdaForm;", arg0)); }
LambdaForm DirectMethodHandle::preparedFieldLambdaForm(MemberName arg0) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("preparedFieldLambdaForm", "(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/LambdaForm;", arg0)); }
LambdaForm DirectMethodHandle::preparedFieldLambdaForm(byte arg0, bool arg1, Class arg2) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("preparedFieldLambdaForm", "(BZLjava/lang/Class;)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2)); }
DirectMethodHandle DirectMethodHandle::makeAllocator(MemberName arg0) { return DirectMethodHandle(*classes[className]->invokeStaticMethod<jobject>("makeAllocator", "(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/DirectMethodHandle;", arg0)); }
MemberName DirectMethodHandle::internalMemberName() { return MemberName(*classes[className]->invokeMethod<jobject>(this->object, "internalMemberName", "()Ljava/lang/invoke/MemberName;")); }
Object DirectMethodHandle::internalMemberName(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("internalMemberName", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
bool DirectMethodHandle::shouldBeInitialized(MemberName arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("shouldBeInitialized", "(Ljava/lang/invoke/MemberName;)Z", arg0)); }
void DirectMethodHandle::maybeCompile(LambdaForm arg0, MemberName arg1) { (classes[className]->invokeStaticMethod<void>("maybeCompile", "(Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/MemberName;)V", arg0, arg1)); }
LambdaForm DirectMethodHandle::makePreparedLambdaForm(MethodType arg0, int arg1) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("makePreparedLambdaForm", "(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;", arg0, arg1)); }
LambdaForm_NamedFunction DirectMethodHandle::getFunction(byte arg0) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("getFunction", "(B)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0)); }
Object DirectMethodHandle::findDirectMethodHandle(LambdaForm_Name arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("findDirectMethodHandle", "(Ljava/lang/invoke/LambdaForm$Name;)Ljava/lang/Object;", arg0)); }
void DirectMethodHandle::ensureInitialized(Object arg0) { (classes[className]->invokeStaticMethod<void>("ensureInitialized", "(Ljava/lang/Object;)V", arg0)); }
void DirectMethodHandle::ensureInitialized() { (classes[className]->invokeMethod<void>(this->object, "ensureInitialized", "()V")); }
bool DirectMethodHandle::checkInitialized(MemberName arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("checkInitialized", "(Ljava/lang/invoke/MemberName;)Z", arg0)); }
Object DirectMethodHandle::staticBase(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("staticBase", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
long DirectMethodHandle::staticOffset(Object arg0) { return long(*classes[className]->invokeStaticMethod<long>("staticOffset", "(Ljava/lang/Object;)J", arg0)); }
Object DirectMethodHandle::checkCast(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "checkCast", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object DirectMethodHandle::checkCast(Object arg0, Object arg1) { return Object(*classes[className]->invokeStaticMethod<jobject>("checkCast", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1)); }
int DirectMethodHandle::ftypeKind(Class arg0) { return int(*classes[className]->invokeStaticMethod<int>("ftypeKind", "(Ljava/lang/Class;)I", arg0)); }
int DirectMethodHandle::afIndex(byte arg0, bool arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("afIndex", "(BZI)I", arg0, arg1, arg2)); }
LambdaForm DirectMethodHandle::makePreparedFieldLambdaForm(byte arg0, bool arg1, int arg2) { return LambdaForm(*classes[className]->invokeStaticMethod<jobject>("makePreparedFieldLambdaForm", "(BZI)Ljava/lang/invoke/LambdaForm;", arg0, arg1, arg2)); }
LambdaForm_Kind DirectMethodHandle::getFieldKind(bool arg0, bool arg1, Wrapper arg2) { return LambdaForm_Kind(*classes[className]->invokeStaticMethod<jobject>("getFieldKind", "(ZZLsun/invoke/util/Wrapper;)Ljava/lang/invoke/LambdaForm$Kind;", arg0, arg1, arg2)); }
LambdaForm_NamedFunction DirectMethodHandle::createFunction(byte arg0) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("createFunction", "(B)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0)); }
LambdaForm_NamedFunction DirectMethodHandle::getNamedFunction(String arg0, MethodType arg1) { return LambdaForm_NamedFunction(*classes[className]->invokeStaticMethod<jobject>("getNamedFunction", "(Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/LambdaForm$NamedFunction;", arg0, arg1)); }
Object DirectMethodHandle::internalMemberNameEnsureInit(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("internalMemberNameEnsureInit", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object DirectMethodHandle::checkBase(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("checkBase", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object DirectMethodHandle::constructorMethod(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("constructorMethod", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object DirectMethodHandle::checkReceiver(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "checkReceiver", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
String DirectMethodHandle::internalProperties() { return String(*classes[className]->invokeMethod<jobject>(this->object, "internalProperties", "()Ljava/lang/String;")); }
BoundMethodHandle DirectMethodHandle::rebind() { return BoundMethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "rebind", "()Ljava/lang/invoke/BoundMethodHandle;")); }
MethodHandle DirectMethodHandle::copyWith(MethodType arg0, LambdaForm arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "copyWith", "(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
MethodHandle DirectMethodHandle::viewAsType(MethodType arg0, bool arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "viewAsType", "(Ljava/lang/invoke/MethodType;Z)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
bool DirectMethodHandle::isCrackable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCrackable", "()Z")); }
Object DirectMethodHandle::nullCheck(Object arg0) { return Object(*classes[className]->invokeStaticMethod<jobject>("nullCheck", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }

LambdaForm_Kind LambdaForm_Kind::valueOf(String arg0) { return LambdaForm_Kind(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/invoke/LambdaForm$Kind;", arg0)); }



BigInteger BigInteger::xor_(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "xor", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
int BigInteger::signBit() { return int(*classes[className]->invokeMethod<int>(this->object, "signBit", "()I")); }
BigInteger BigInteger::negate() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "negate", "()Ljava/math/BigInteger;")); }
BigInteger BigInteger::and_(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "and", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::not_() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "not", "()Ljava/math/BigInteger;")); }
void BigInteger::reportOverflow() { (classes[className]->invokeStaticMethod<void>("reportOverflow", "()V")); }
void BigInteger::destructiveMulAdd(arr_I arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("destructiveMulAdd", "([III)V", arg0, arg1, arg2)); }
BigInteger BigInteger::smallPrime(int arg0, int arg1, Random arg2) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("smallPrime", "(IILjava/util/Random;)Ljava/math/BigInteger;", arg0, arg1, arg2)); }
BigInteger BigInteger::largePrime(int arg0, int arg1, Random arg2) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("largePrime", "(IILjava/util/Random;)Ljava/math/BigInteger;", arg0, arg1, arg2)); }
BigInteger BigInteger::remainder(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "remainder", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
bool BigInteger::primeToCertainty(int arg0, Random arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "primeToCertainty", "(ILjava/util/Random;)Z", arg0, arg1)); }
int BigInteger::getPrimeSearchLen(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getPrimeSearchLen", "(I)I", arg0)); }
int BigInteger::bitLength(arr_I arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("bitLength", "([II)I", arg0, arg1)); }
int BigInteger::bitLength() { return int(*classes[className]->invokeMethod<int>(this->object, "bitLength", "()I")); }
bool BigInteger::testBit(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "testBit", "(I)Z", arg0)); }
BigInteger BigInteger::subtract(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "subtract", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
bool BigInteger::passesMillerRabin(int arg0, Random arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "passesMillerRabin", "(ILjava/util/Random;)Z", arg0, arg1)); }
bool BigInteger::passesLucasLehmer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "passesLucasLehmer", "()Z")); }
int BigInteger::jacobiSymbol(int arg0, BigInteger arg1) { return int(*classes[className]->invokeStaticMethod<int>("jacobiSymbol", "(ILjava/math/BigInteger;)I", arg0, arg1)); }
BigInteger BigInteger::lucasLehmerSequence(int arg0, BigInteger arg1, BigInteger arg2) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("lucasLehmerSequence", "(ILjava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0, arg1, arg2)); }
BigInteger BigInteger::square() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "square", "()Ljava/math/BigInteger;")); }
BigInteger BigInteger::square(bool arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "square", "(Z)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::shiftRight(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "shiftRight", "(I)Ljava/math/BigInteger;", arg0)); }
int BigInteger::getLowestSetBit() { return int(*classes[className]->invokeMethod<int>(this->object, "getLowestSetBit", "()I")); }
BigInteger BigInteger::modPow(BigInteger arg0, BigInteger arg1) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "modPow", "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0, arg1)); }
int BigInteger::compareMagnitude(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareMagnitude", "(J)I", arg0)); }
int BigInteger::compareMagnitude(BigInteger arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareMagnitude", "(Ljava/math/BigInteger;)I", arg0)); }
BigInteger BigInteger::multiplyByInt(arr_I arg0, int arg1, int arg2) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("multiplyByInt", "([III)Ljava/math/BigInteger;", arg0, arg1, arg2)); }
BigInteger BigInteger::multiplyKaratsuba(BigInteger arg0, BigInteger arg1) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("multiplyKaratsuba", "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0, arg1)); }
BigInteger BigInteger::multiplyToomCook3(BigInteger arg0, BigInteger arg1) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("multiplyToomCook3", "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0, arg1)); }
void BigInteger::multiplyToLenCheck(arr_I arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("multiplyToLenCheck", "([II)V", arg0, arg1)); }
BigInteger BigInteger::getLower(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getLower", "(I)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::getUpper(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getUpper", "(I)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::getToomSlice(int arg0, int arg1, int arg2, int arg3) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getToomSlice", "(IIII)Ljava/math/BigInteger;", arg0, arg1, arg2, arg3)); }
BigInteger BigInteger::exactDivideBy3() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "exactDivideBy3", "()Ljava/math/BigInteger;")); }
BigInteger BigInteger::squareKaratsuba() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "squareKaratsuba", "()Ljava/math/BigInteger;")); }
BigInteger BigInteger::squareToomCook3() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "squareToomCook3", "()Ljava/math/BigInteger;")); }
void BigInteger::implSquareToLenChecks(arr_I arg0, int arg1, arr_I arg2, int arg3) { (classes[className]->invokeStaticMethod<void>("implSquareToLenChecks", "([II[II)V", arg0, arg1, arg2, arg3)); }
int BigInteger::mulAdd(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("mulAdd", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }
int BigInteger::addOne(arr_I arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("addOne", "([IIII)I", arg0, arg1, arg2, arg3)); }
void BigInteger::primitiveLeftShift(arr_I arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("primitiveLeftShift", "([III)V", arg0, arg1, arg2)); }
BigInteger BigInteger::divideKnuth(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divideKnuth", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::divideBurnikelZiegler(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divideBurnikelZiegler", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::remainderKnuth(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "remainderKnuth", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::remainderBurnikelZiegler(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "remainderBurnikelZiegler", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
int BigInteger::bitLengthForInt(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("bitLengthForInt", "(I)I", arg0)); }
void BigInteger::primitiveRightShift(arr_I arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("primitiveRightShift", "([III)V", arg0, arg1, arg2)); }
BigInteger BigInteger::oddModPow(BigInteger arg0, BigInteger arg1) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "oddModPow", "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0, arg1)); }
BigInteger BigInteger::modPow2(BigInteger arg0, int arg1) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "modPow2", "(Ljava/math/BigInteger;I)Ljava/math/BigInteger;", arg0, arg1)); }
BigInteger BigInteger::modInverse(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "modInverse", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::divide(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
void BigInteger::implMontgomeryMultiplyChecks(arr_I arg0, arr_I arg1, arr_I arg2, int arg3, arr_I arg4) { (classes[className]->invokeStaticMethod<void>("implMontgomeryMultiplyChecks", "([I[I[II[I)V", arg0, arg1, arg2, arg3, arg4)); }
int BigInteger::subN(arr_I arg0, arr_I arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("subN", "([I[II)I", arg0, arg1, arg2)); }
int BigInteger::intArrayCmpToLen(arr_I arg0, arr_I arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("intArrayCmpToLen", "([I[II)I", arg0, arg1, arg2)); }
void BigInteger::implMulAddCheck(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeStaticMethod<void>("implMulAddCheck", "([I[IIII)V", arg0, arg1, arg2, arg3, arg4)); }
BigInteger BigInteger::mod2(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "mod2", "(I)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::shiftRightImpl(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "shiftRightImpl", "(I)Ljava/math/BigInteger;", arg0)); }
int BigInteger::intLength() { return int(*classes[className]->invokeMethod<int>(this->object, "intLength", "()I")); }
void BigInteger::padWithZeros(StringBuilder arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("padWithZeros", "(Ljava/lang/StringBuilder;I)V", arg0, arg1)); }
void BigInteger::smallToString(int arg0, StringBuilder arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "smallToString", "(ILjava/lang/StringBuilder;I)V", arg0, arg1, arg2)); }
BigInteger BigInteger::getRadixConversionCache(int arg0, int arg1) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("getRadixConversionCache", "(II)Ljava/math/BigInteger;", arg0, arg1)); }
int BigInteger::signInt() { return int(*classes[className]->invokeMethod<int>(this->object, "signInt", "()I")); }
int BigInteger::firstNonzeroIntNum() { return int(*classes[className]->invokeMethod<int>(this->object, "firstNonzeroIntNum", "()I")); }
BigInteger BigInteger::probablePrime(int arg0, Random arg1) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("probablePrime", "(ILjava/util/Random;)Ljava/math/BigInteger;", arg0, arg1)); }
BigInteger BigInteger::nextProbablePrime() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "nextProbablePrime", "()Ljava/math/BigInteger;")); }
BigInteger BigInteger::gcd(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "gcd", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::andNot(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "andNot", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::clearBit(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "clearBit", "(I)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::flipBit(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "flipBit", "(I)Ljava/math/BigInteger;", arg0)); }
bool BigInteger::isProbablePrime(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isProbablePrime", "(I)Z", arg0)); }
long BigInteger::longValueExact() { return long(*classes[className]->invokeMethod<long>(this->object, "longValueExact", "()J")); }
int BigInteger::intValueExact() { return int(*classes[className]->invokeMethod<int>(this->object, "intValueExact", "()I")); }
short BigInteger::shortValueExact() { return short(*classes[className]->invokeMethod<short>(this->object, "shortValueExact", "()S")); }
byte BigInteger::byteValueExact() { return byte(*classes[className]->invokeMethod<byte>(this->object, "byteValueExact", "()B")); }
BigInteger BigInteger::multiply(long arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "multiply", "(J)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::multiply(BigInteger arg0, bool arg1) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "multiply", "(Ljava/math/BigInteger;Z)Ljava/math/BigInteger;", arg0, arg1)); }
BigInteger BigInteger::multiply(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "multiply", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::or_(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "or", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::add(long arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "add", "(J)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::add(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
int BigInteger::bitCount() { return int(*classes[className]->invokeMethod<int>(this->object, "bitCount", "()I")); }
bool BigInteger::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String BigInteger::toString(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "(I)Ljava/lang/String;", arg0)); }
String BigInteger::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void BigInteger::toString(BigInteger arg0, StringBuilder arg1, int arg2, int arg3) { (classes[className]->invokeStaticMethod<void>("toString", "(Ljava/math/BigInteger;Ljava/lang/StringBuilder;II)V", arg0, arg1, arg2, arg3)); }
int BigInteger::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
BigInteger BigInteger::abs() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "abs", "()Ljava/math/BigInteger;")); }
BigInteger BigInteger::sqrt() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "sqrt", "()Ljava/math/BigInteger;")); }
BigInteger BigInteger::pow(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "pow", "(I)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::min(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "min", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::max(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "max", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
int BigInteger::signum() { return int(*classes[className]->invokeMethod<int>(this->object, "signum", "()I")); }
int BigInteger::implMulAdd(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeStaticMethod<int>("implMulAdd", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }
void BigInteger::shiftRightImplWorker(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeStaticMethod<void>("shiftRightImplWorker", "([I[IIII)V", arg0, arg1, arg2, arg3, arg4)); }
void BigInteger::shiftLeftImplWorker(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeStaticMethod<void>("shiftLeftImplWorker", "([I[IIII)V", arg0, arg1, arg2, arg3, arg4)); }
int BigInteger::getInt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }
int BigInteger::intValue() { return int(*classes[className]->invokeMethod<int>(this->object, "intValue", "()I")); }
long BigInteger::longValue() { return long(*classes[className]->invokeMethod<long>(this->object, "longValue", "()J")); }
float BigInteger::floatValue() { return float(*classes[className]->invokeMethod<float>(this->object, "floatValue", "()F")); }
double BigInteger::doubleValue() { return double(*classes[className]->invokeMethod<double>(this->object, "doubleValue", "()D")); }
BigInteger BigInteger::valueOf(long arg0) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(J)Ljava/math/BigInteger;", arg0)); }
BigInteger BigInteger::valueOf(arr_I arg0) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("valueOf", "([I)Ljava/math/BigInteger;", arg0)); }
void BigInteger::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void BigInteger::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
BigInteger BigInteger::mod(BigInteger arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "mod", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;", arg0)); }
void BigInteger::checkRange() { (classes[className]->invokeMethod<void>(this->object, "checkRange", "()V")); }
BigInteger BigInteger::setBit(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "setBit", "(I)Ljava/math/BigInteger;", arg0)); }
int BigInteger::parseInt(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "parseInt", "([CII)I", arg0, arg1, arg2)); }
BigInteger BigInteger::shiftLeft(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "shiftLeft", "(I)Ljava/math/BigInteger;", arg0)); }

void Random::setSeed(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setSeed", "(J)V", arg0)); }
long Random::seedUniquifier() { return long(*classes[className]->invokeStaticMethod<long>("seedUniquifier", "()J")); }
long Random::initialScramble(long arg0) { return long(*classes[className]->invokeStaticMethod<long>("initialScramble", "(J)J", arg0)); }
void Random::resetSeed(long arg0) { (classes[className]->invokeMethod<void>(this->object, "resetSeed", "(J)V", arg0)); }
int Random::next(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "next", "(I)I", arg0)); }
void Random::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Random::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }

void ClassNotFoundException::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void ClassNotFoundException::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
Throwable ClassNotFoundException::getException() { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "getException", "()Ljava/lang/Throwable;")); }

String ObjectStreamField::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
String ObjectStreamField::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
bool ObjectStreamField::isPrimitive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPrimitive", "()Z")); }
Field ObjectStreamField::getField() { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getField", "()Ljava/lang/reflect/Field;")); }
Class ObjectStreamField::getType() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getType", "()Ljava/lang/Class;")); }
String ObjectStreamField::getSignature() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSignature", "()Ljava/lang/String;")); }
String ObjectStreamField::getPrimitiveSignature(Class arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getPrimitiveSignature", "(Ljava/lang/Class;)Ljava/lang/String;", arg0)); }
StringBuilder ObjectStreamField::appendClassSignature(StringBuilder arg0, Class arg1) { return StringBuilder(*classes[className]->invokeStaticMethod<jobject>("appendClassSignature", "(Ljava/lang/StringBuilder;Ljava/lang/Class;)Ljava/lang/StringBuilder;", arg0, arg1)); }
String ObjectStreamField::getClassSignature(Class arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getClassSignature", "(Ljava/lang/Class;)Ljava/lang/String;", arg0)); }
char ObjectStreamField::getTypeCode() { return char(*classes[className]->invokeMethod<char>(this->object, "getTypeCode", "()C")); }
String ObjectStreamField::getTypeString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTypeString", "()Ljava/lang/String;")); }
int ObjectStreamField::getOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getOffset", "()I")); }
void ObjectStreamField::setOffset(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setOffset", "(I)V", arg0)); }
bool ObjectStreamField::isUnshared() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUnshared", "()Z")); }

Reference ReferenceQueue::reallyPoll() { return Reference(*classes[className]->invokeMethod<jobject>(this->object, "reallyPoll", "()Ljava/lang/ref/Reference;")); }
Reference ReferenceQueue::remove(long arg0) { return Reference(*classes[className]->invokeMethod<jobject>(this->object, "remove", "(J)Ljava/lang/ref/Reference;", arg0)); }
Reference ReferenceQueue::remove() { return Reference(*classes[className]->invokeMethod<jobject>(this->object, "remove", "()Ljava/lang/ref/Reference;")); }
void ReferenceQueue::forEach(Consumer arg0) { (classes[className]->invokeMethod<void>(this->object, "forEach", "(Ljava/util/function/Consumer;)V", arg0)); }
bool ReferenceQueue::enqueue(Reference arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "enqueue", "(Ljava/lang/ref/Reference;)Z", arg0)); }
Reference ReferenceQueue::poll() { return Reference(*classes[className]->invokeMethod<jobject>(this->object, "poll", "()Ljava/lang/ref/Reference;")); }




ObjectStreamClass ObjectInputStream_GetField::getObjectStreamClass() { return ObjectStreamClass(*classes[className]->invokeMethod<jobject>(this->object, "getObjectStreamClass", "()Ljava/io/ObjectStreamClass;")); }
bool ObjectInputStream_GetField::defaulted(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "defaulted", "(Ljava/lang/String;)Z", arg0)); }
float ObjectInputStream_GetField::get(String arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "get", "(Ljava/lang/String;F)F", arg0, arg1)); }
long ObjectInputStream_GetField::get(String arg0, long arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "get", "(Ljava/lang/String;J)J", arg0, arg1)); }
int ObjectInputStream_GetField::get(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "get", "(Ljava/lang/String;I)I", arg0, arg1)); }
double ObjectInputStream_GetField::get(String arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "get", "(Ljava/lang/String;D)D", arg0, arg1)); }
Object ObjectInputStream_GetField::get(String arg0, Object arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1)); }
bool ObjectInputStream_GetField::get(String arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "get", "(Ljava/lang/String;Z)Z", arg0, arg1)); }
byte ObjectInputStream_GetField::get(String arg0, byte arg1) { return byte(*classes[className]->invokeMethod<byte>(this->object, "get", "(Ljava/lang/String;B)B", arg0, arg1)); }
char ObjectInputStream_GetField::get(String arg0, char arg1) { return char(*classes[className]->invokeMethod<char>(this->object, "get", "(Ljava/lang/String;C)C", arg0, arg1)); }
short ObjectInputStream_GetField::get(String arg0, short arg1) { return short(*classes[className]->invokeMethod<short>(this->object, "get", "(Ljava/lang/String;S)S", arg0, arg1)); }

String BaseLocale::convertOldISOCodes(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("convertOldISOCodes", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String BaseLocale::getScript() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getScript", "()Ljava/lang/String;")); }
String BaseLocale::getVariant() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getVariant", "()Ljava/lang/String;")); }
String BaseLocale::getRegion() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRegion", "()Ljava/lang/String;")); }
BaseLocale BaseLocale::createInstance(String arg0, String arg1) { return BaseLocale(*classes[className]->invokeStaticMethod<jobject>("createInstance", "(Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/BaseLocale;", arg0, arg1)); }
String BaseLocale::getLanguage() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLanguage", "()Ljava/lang/String;")); }
bool BaseLocale::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String BaseLocale::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int BaseLocale::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
BaseLocale BaseLocale::getInstance(String arg0, String arg1, String arg2, String arg3) { return BaseLocale(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/BaseLocale;", arg0, arg1, arg2, arg3)); }

Locale_FilteringMode Locale_FilteringMode::valueOf(String arg0) { return Locale_FilteringMode(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/util/Locale$FilteringMode;", arg0)); }

String LocaleResources::getLocaleName(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLocaleName", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String LocaleResources::getCurrencyName(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCurrencyName", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void LocaleResources::removeEmptyReferences() { (classes[className]->invokeMethod<void>(this->object, "removeEmptyReferences", "()V")); }
Object LocaleResources::getBreakIteratorInfo(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getBreakIteratorInfo", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }
String LocaleResources::getCalendarData(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarData", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String LocaleResources::getCollationData() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCollationData", "()Ljava/lang/String;")); }
Object LocaleResources::getTimeZoneNames(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getTimeZoneNames", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }
Set LocaleResources::getZoneIDs() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getZoneIDs", "()Ljava/util/Set;")); }
ResourceBundle LocaleResources::getJavaTimeFormatData() { return ResourceBundle(*classes[className]->invokeMethod<jobject>(this->object, "getJavaTimeFormatData", "()Ljava/util/ResourceBundle;")); }
String LocaleResources::getDateTimePattern(int arg0, int arg1, Calendar arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDateTimePattern", "(IILjava/util/Calendar;)Ljava/lang/String;", arg0, arg1, arg2)); }
String LocaleResources::getDateTimePattern(String arg0, int arg1, int arg2, String arg3) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDateTimePattern", "(Ljava/lang/String;IILjava/lang/String;)Ljava/lang/String;", arg0, arg1, arg2, arg3)); }
String LocaleResources::getDateTimePattern(String arg0, String arg1, int arg2, String arg3) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDateTimePattern", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;", arg0, arg1, arg2, arg3)); }
String LocaleResources::getJavaTimeDateTimePattern(int arg0, int arg1, String arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getJavaTimeDateTimePattern", "(IILjava/lang/String;)Ljava/lang/String;", arg0, arg1, arg2)); }
void LocaleResources::trace(String arg0, Object_interface arg1) { (classes[className]->invokeStaticMethod<void>("trace", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }

String ResourceBundle::getString(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getString", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
Enumeration ResourceBundle::getKeys() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "getKeys", "()Ljava/util/Enumeration;")); }
ServiceLoader ResourceBundle::getServiceLoader(Module arg0, String arg1) { return ServiceLoader(*classes[className]->invokeStaticMethod<jobject>("getServiceLoader", "(Ljava/lang/Module;Ljava/lang/String;)Ljava/util/ServiceLoader;", arg0, arg1)); }
void ResourceBundle::clearCache() { (classes[className]->invokeStaticMethod<void>("clearCache", "()V")); }
void ResourceBundle::clearCache(ClassLoader arg0) { (classes[className]->invokeStaticMethod<void>("clearCache", "(Ljava/lang/ClassLoader;)V", arg0)); }
void ResourceBundle::uncheckedThrow(Throwable arg0) { (classes[className]->invokeStaticMethod<void>("uncheckedThrow", "(Ljava/lang/Throwable;)V", arg0)); }
Object ResourceBundle::handleGetObject(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "handleGetObject", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }
Set ResourceBundle::handleKeySet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "handleKeySet", "()Ljava/util/Set;")); }
ResourceBundle_Control ResourceBundle::getDefaultControl(Module arg0, String arg1) { return ResourceBundle_Control(*classes[className]->invokeStaticMethod<jobject>("getDefaultControl", "(Ljava/lang/Module;Ljava/lang/String;)Ljava/util/ResourceBundle$Control;", arg0, arg1)); }
ResourceBundle_Control ResourceBundle::getDefaultControl(Class arg0, String arg1) { return ResourceBundle_Control(*classes[className]->invokeStaticMethod<jobject>("getDefaultControl", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/ResourceBundle$Control;", arg0, arg1)); }
ResourceBundle ResourceBundle::getBundleImpl(String arg0, Locale arg1, Class arg2, ClassLoader arg3, ResourceBundle_Control arg4) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundleImpl", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Class;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }
ResourceBundle ResourceBundle::getBundleImpl(String arg0, Locale arg1, Class arg2, ResourceBundle_Control arg3) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundleImpl", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Class;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3)); }
ResourceBundle ResourceBundle::getBundleImpl(Module arg0, Module arg1, String arg2, Locale arg3, ResourceBundle_Control arg4) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundleImpl", "(Ljava/lang/Module;Ljava/lang/Module;Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }
void ResourceBundle::checkNamedModule(Class arg0) { (classes[className]->invokeStaticMethod<void>("checkNamedModule", "(Ljava/lang/Class;)V", arg0)); }
ResourceBundle ResourceBundle::getBundleFromModule(Class arg0, Module arg1, String arg2, Locale arg3, ResourceBundle_Control arg4) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundleFromModule", "(Ljava/lang/Class;Ljava/lang/Module;Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }
bool ResourceBundle::isValidBundle(ResourceBundle arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isValidBundle", "(Ljava/util/ResourceBundle;)Z", arg0)); }
bool ResourceBundle::hasValidParentChain(ResourceBundle arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("hasValidParentChain", "(Ljava/util/ResourceBundle;)Z", arg0)); }
bool ResourceBundle::checkList(List arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("checkList", "(Ljava/util/List;)Z", arg0)); }
ResourceBundle ResourceBundle::findBundle(Module arg0, Module arg1, ResourceBundle_CacheKey arg2, List arg3, List arg4, int arg5, ResourceBundle_Control arg6, ResourceBundle arg7) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("findBundle", "(Ljava/lang/Module;Ljava/lang/Module;Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
void ResourceBundle::throwMissingResourceException(String arg0, Locale arg1, Throwable arg2) { (classes[className]->invokeStaticMethod<void>("throwMissingResourceException", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Throwable;)V", arg0, arg1, arg2)); }
ResourceBundle ResourceBundle::findBundleInCache(ResourceBundle_CacheKey arg0, ResourceBundle_Control arg1) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("findBundleInCache", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1)); }
ResourceBundle ResourceBundle::loadBundle(ResourceBundle_CacheKey arg0, List arg1, ResourceBundle_Control arg2, bool arg3) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("loadBundle", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/ResourceBundle$Control;Z)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3)); }
ResourceBundle ResourceBundle::loadBundle(ResourceBundle_CacheKey arg0, List arg1, ResourceBundle_Control arg2, Module arg3, Module arg4) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("loadBundle", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/ResourceBundle$Control;Ljava/lang/Module;Ljava/lang/Module;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }
ResourceBundle ResourceBundle::putBundleInCache(ResourceBundle_CacheKey arg0, ResourceBundle arg1, ResourceBundle_Control arg2) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("putBundleInCache", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1, arg2)); }
Locale ResourceBundle::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
ResourceBundle ResourceBundle::loadBundleFromProviders(String arg0, Locale arg1, ServiceLoader arg2, ResourceBundle_CacheKey arg3) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("loadBundleFromProviders", "(Ljava/lang/String;Ljava/util/Locale;Ljava/util/ServiceLoader;Ljava/util/ResourceBundle$CacheKey;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3)); }
Class ResourceBundle::getResourceBundleProviderType(String arg0, ClassLoader arg1) { return Class(*classes[className]->invokeStaticMethod<jobject>("getResourceBundleProviderType", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Class;", arg0, arg1)); }
ClassLoader ResourceBundle::getLoaderForControl(Module arg0) { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("getLoaderForControl", "(Ljava/lang/Module;)Ljava/lang/ClassLoader;", arg0)); }
void ResourceBundle::setExpirationTime(ResourceBundle_CacheKey arg0, ResourceBundle_Control arg1) { (classes[className]->invokeStaticMethod<void>("setExpirationTime", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle$Control;)V", arg0, arg1)); }
String ResourceBundle::getBaseBundleName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getBaseBundleName", "()Ljava/lang/String;")); }
ResourceBundle ResourceBundle::getBundle(String arg0, Module arg1) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;Ljava/lang/Module;)Ljava/util/ResourceBundle;", arg0, arg1)); }
ResourceBundle ResourceBundle::getBundle(String arg0, Locale arg1) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;", arg0, arg1)); }
ResourceBundle ResourceBundle::getBundle(String arg0, ResourceBundle_Control arg1) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1)); }
ResourceBundle ResourceBundle::getBundle(String arg0) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;)Ljava/util/ResourceBundle;", arg0)); }
ResourceBundle ResourceBundle::getBundle(String arg0, Locale arg1, ClassLoader arg2, ResourceBundle_Control arg3) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3)); }
ResourceBundle ResourceBundle::getBundle(String arg0, Locale arg1, ClassLoader arg2) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;", arg0, arg1, arg2)); }
ResourceBundle ResourceBundle::getBundle(String arg0, Locale arg1, ResourceBundle_Control arg2) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", arg0, arg1, arg2)); }
ResourceBundle ResourceBundle::getBundle(String arg0, Locale arg1, Module arg2) { return ResourceBundle(*classes[className]->invokeStaticMethod<jobject>("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Module;)Ljava/util/ResourceBundle;", arg0, arg1, arg2)); }
ClassLoader ResourceBundle::getLoader(Module arg0) { return ClassLoader(*classes[className]->invokeStaticMethod<jobject>("getLoader", "(Ljava/lang/Module;)Ljava/lang/ClassLoader;", arg0)); }
void ResourceBundle::trace(String arg0, Object_interface arg1) { (classes[className]->invokeStaticMethod<void>("trace", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
bool ResourceBundle::containsKey(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "containsKey", "(Ljava/lang/String;)Z", arg0)); }
Set ResourceBundle::keySet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "keySet", "()Ljava/util/Set;")); }
void ResourceBundle::setParent(ResourceBundle arg0) { (classes[className]->invokeMethod<void>(this->object, "setParent", "(Ljava/util/ResourceBundle;)V", arg0)); }
Object ResourceBundle::getObject(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getObject", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }

ServiceLoader ServiceLoader::loadInstalled(Class arg0) { return ServiceLoader(*classes[className]->invokeStaticMethod<jobject>("loadInstalled", "(Ljava/lang/Class;)Ljava/util/ServiceLoader;", arg0)); }
void ServiceLoader::checkCaller(Class arg0, Class arg1) { (classes[className]->invokeStaticMethod<void>("checkCaller", "(Ljava/lang/Class;Ljava/lang/Class;)V", arg0, arg1)); }
bool ServiceLoader::inExplicitModule(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "inExplicitModule", "(Ljava/lang/Class;)Z", arg0)); }
Method ServiceLoader::findStaticProviderMethod(Class arg0) { return Method(*classes[className]->invokeMethod<jobject>(this->object, "findStaticProviderMethod", "(Ljava/lang/Class;)Ljava/lang/reflect/Method;", arg0)); }
Iterator ServiceLoader::newLookupIterator() { return Iterator(*classes[className]->invokeMethod<jobject>(this->object, "newLookupIterator", "()Ljava/util/Iterator;")); }
ServiceLoader_Provider ServiceLoader::loadProvider(ServicesCatalog_ServiceProvider arg0) { return ServiceLoader_Provider(*classes[className]->invokeMethod<jobject>(this->object, "loadProvider", "(Ljdk/internal/module/ServicesCatalog$ServiceProvider;)Ljava/util/ServiceLoader$Provider;", arg0)); }
void ServiceLoader::reload() { (classes[className]->invokeMethod<void>(this->object, "reload", "()V")); }
String ServiceLoader::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
ServiceLoader ServiceLoader::load(Class arg0) { return ServiceLoader(*classes[className]->invokeStaticMethod<jobject>("load", "(Ljava/lang/Class;)Ljava/util/ServiceLoader;", arg0)); }
ServiceLoader ServiceLoader::load(ModuleLayer arg0, Class arg1) { return ServiceLoader(*classes[className]->invokeStaticMethod<jobject>("load", "(Ljava/lang/ModuleLayer;Ljava/lang/Class;)Ljava/util/ServiceLoader;", arg0, arg1)); }
ServiceLoader ServiceLoader::load(Class arg0, ClassLoader arg1) { return ServiceLoader(*classes[className]->invokeStaticMethod<jobject>("load", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;", arg0, arg1)); }
ServiceLoader ServiceLoader::load(Class arg0, ClassLoader arg1, Module arg2) { return ServiceLoader(*classes[className]->invokeStaticMethod<jobject>("load", "(Ljava/lang/Class;Ljava/lang/ClassLoader;Ljava/lang/Module;)Ljava/util/ServiceLoader;", arg0, arg1, arg2)); }
Stream ServiceLoader::stream() { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "stream", "()Ljava/util/stream/Stream;")); }
Constructor ServiceLoader::getConstructor(Class arg0) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "getConstructor", "(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0)); }
void ServiceLoader::fail(Class arg0, String arg1, Throwable arg2) { (classes[className]->invokeStaticMethod<void>("fail", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1, arg2)); }
void ServiceLoader::fail(Class arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("fail", "(Ljava/lang/Class;Ljava/lang/String;)V", arg0, arg1)); }
void ServiceLoader::fail(Class arg0, URL arg1, int arg2, String arg3) { (classes[className]->invokeStaticMethod<void>("fail", "(Ljava/lang/Class;Ljava/net/URL;ILjava/lang/String;)V", arg0, arg1, arg2, arg3)); }
Optional ServiceLoader::findFirst() { return Optional(*classes[className]->invokeMethod<jobject>(this->object, "findFirst", "()Ljava/util/Optional;")); }

String ServicesCatalog_ServiceProvider::providerName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "providerName", "()Ljava/lang/String;")); }
bool ServicesCatalog_ServiceProvider::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int ServicesCatalog_ServiceProvider::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Module ServicesCatalog_ServiceProvider::module() { return Module(*classes[className]->invokeMethod<jobject>(this->object, "module", "()Ljava/lang/Module;")); }


String ResourceBundle_Control::toBundleName(String arg0, Locale arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toBundleName", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", arg0, arg1)); }
ResourceBundle ResourceBundle_Control::newBundle0(String arg0, String arg1, ClassLoader arg2, bool arg3) { return ResourceBundle(*classes[className]->invokeMethod<jobject>(this->object, "newBundle0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3)); }
String ResourceBundle_Control::toResourceName0(String arg0, String arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toResourceName0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
String ResourceBundle_Control::toResourceName(String arg0, String arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toResourceName", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
ResourceBundle_Control ResourceBundle_Control::getNoFallbackControl(List arg0) { return ResourceBundle_Control(*classes[className]->invokeStaticMethod<jobject>("getNoFallbackControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", arg0)); }
ResourceBundle_Control ResourceBundle_Control::getControl(List arg0) { return ResourceBundle_Control(*classes[className]->invokeStaticMethod<jobject>("getControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", arg0)); }
List ResourceBundle_Control::getFormats(String arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getFormats", "(Ljava/lang/String;)Ljava/util/List;", arg0)); }
List ResourceBundle_Control::getCandidateLocales(String arg0, Locale arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getCandidateLocales", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;", arg0, arg1)); }
Locale ResourceBundle_Control::getFallbackLocale(String arg0, Locale arg1) { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getFallbackLocale", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;", arg0, arg1)); }
ResourceBundle ResourceBundle_Control::newBundle(String arg0, Locale arg1, String arg2, ClassLoader arg3, bool arg4) { return ResourceBundle(*classes[className]->invokeMethod<jobject>(this->object, "newBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }
bool ResourceBundle_Control::needsReload(String arg0, Locale arg1, String arg2, ClassLoader arg3, ResourceBundle arg4, long arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "needsReload", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
long ResourceBundle_Control::getTimeToLive(String arg0, Locale arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "getTimeToLive", "(Ljava/lang/String;Ljava/util/Locale;)J", arg0, arg1)); }

ResourceBundle_CacheKey ResourceBundle_CacheKey::setLocale(Locale arg0) { return ResourceBundle_CacheKey(*classes[className]->invokeMethod<jobject>(this->object, "setLocale", "(Ljava/util/Locale;)Ljava/util/ResourceBundle$CacheKey;", arg0)); }
ServiceLoader ResourceBundle_CacheKey::getProviders() { return ServiceLoader(*classes[className]->invokeMethod<jobject>(this->object, "getProviders", "()Ljava/util/ServiceLoader;")); }
Locale ResourceBundle_CacheKey::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
bool ResourceBundle_CacheKey::hasProviders() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasProviders", "()Z")); }
void ResourceBundle_CacheKey::setFormat(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setFormat", "(Ljava/lang/String;)V", arg0)); }
bool ResourceBundle_CacheKey::callerHasProvider() { return bool(*classes[className]->invokeMethod<bool>(this->object, "callerHasProvider", "()Z")); }
String ResourceBundle_CacheKey::getFormat() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFormat", "()Ljava/lang/String;")); }
String ResourceBundle_CacheKey::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
Throwable ResourceBundle_CacheKey::getCause() { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "getCause", "()Ljava/lang/Throwable;")); }
bool ResourceBundle_CacheKey::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ResourceBundle_CacheKey::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Module ResourceBundle_CacheKey::getModule() { return Module(*classes[className]->invokeMethod<jobject>(this->object, "getModule", "()Ljava/lang/Module;")); }
int ResourceBundle_CacheKey::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void ResourceBundle_CacheKey::setCause(Throwable arg0) { (classes[className]->invokeMethod<void>(this->object, "setCause", "(Ljava/lang/Throwable;)V", arg0)); }
Module ResourceBundle_CacheKey::getCallerModule() { return Module(*classes[className]->invokeMethod<jobject>(this->object, "getCallerModule", "()Ljava/lang/Module;")); }

Date Calendar::getTime() { return Date(*classes[className]->invokeMethod<jobject>(this->object, "getTime", "()Ljava/util/Date;")); }
void Calendar::setTimeInMillis(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setTimeInMillis", "(J)V", arg0)); }
String Calendar::getDisplayName(int arg0, int arg1, Locale arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(IILjava/util/Locale;)Ljava/lang/String;", arg0, arg1, arg2)); }
void Calendar::complete() { (classes[className]->invokeMethod<void>(this->object, "complete", "()V")); }
Instant Calendar::toInstant() { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "toInstant", "()Ljava/time/Instant;")); }
void Calendar::setTime(Date arg0) { (classes[className]->invokeMethod<void>(this->object, "setTime", "(Ljava/util/Date;)V", arg0)); }
String Calendar::getCalendarType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarType", "()Ljava/lang/String;")); }
void Calendar::setWeekCountData(Locale arg0) { (classes[className]->invokeMethod<void>(this->object, "setWeekCountData", "(Ljava/util/Locale;)V", arg0)); }
TimeZone Calendar::defaultTimeZone(Locale arg0) { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("defaultTimeZone", "(Ljava/util/Locale;)Ljava/util/TimeZone;", arg0)); }
Calendar Calendar::createCalendar(TimeZone arg0, Locale arg1) { return Calendar(*classes[className]->invokeStaticMethod<jobject>("createCalendar", "(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;", arg0, arg1)); }
long Calendar::getTimeInMillis() { return long(*classes[className]->invokeMethod<long>(this->object, "getTimeInMillis", "()J")); }
void Calendar::updateTime() { (classes[className]->invokeMethod<void>(this->object, "updateTime", "()V")); }
void Calendar::computeFields() { (classes[className]->invokeMethod<void>(this->object, "computeFields", "()V")); }
int Calendar::internalGet(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "internalGet", "(I)I", arg0)); }
void Calendar::internalSet(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "internalSet", "(II)V", arg0, arg1)); }
void Calendar::adjustStamp() { (classes[className]->invokeMethod<void>(this->object, "adjustStamp", "()V")); }
bool Calendar::checkDisplayNameParams(int arg0, int arg1, int arg2, int arg3, Locale arg4, int arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkDisplayNameParams", "(IIIILjava/util/Locale;I)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool Calendar::isStandaloneStyle(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStandaloneStyle", "(I)Z", arg0)); }
bool Calendar::isNarrowFormatStyle(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNarrowFormatStyle", "(I)Z", arg0)); }
int Calendar::toStandaloneStyle(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "toStandaloneStyle", "(I)I", arg0)); }
int Calendar::getBaseStyle(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getBaseStyle", "(I)I", arg0)); }
Map Calendar::getDisplayNamesImpl(int arg0, int arg1, Locale arg2) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayNamesImpl", "(IILjava/util/Locale;)Ljava/util/Map;", arg0, arg1, arg2)); }
bool Calendar::isFieldSet(int arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isFieldSet", "(II)Z", arg0, arg1)); }
int Calendar::aggregateStamp(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("aggregateStamp", "(II)I", arg0, arg1)); }
long Calendar::getMillisOf(Calendar arg0) { return long(*classes[className]->invokeStaticMethod<long>("getMillisOf", "(Ljava/util/Calendar;)J", arg0)); }
TimeZone Calendar::getTimeZone() { return TimeZone(*classes[className]->invokeMethod<jobject>(this->object, "getTimeZone", "()Ljava/util/TimeZone;")); }
void Calendar::roll(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "roll", "(II)V", arg0, arg1)); }
void Calendar::roll(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "roll", "(IZ)V", arg0, arg1)); }
void Calendar::invalidateWeekFields() { (classes[className]->invokeMethod<void>(this->object, "invalidateWeekFields", "()V")); }
int Calendar::getGreatestMinimum(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getGreatestMinimum", "(I)I", arg0)); }
int Calendar::getMinimum(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMinimum", "(I)I", arg0)); }
void Calendar::setLenient(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setLenient", "(Z)V", arg0)); }
int Calendar::getLeastMaximum(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getLeastMaximum", "(I)I", arg0)); }
int Calendar::getMaximum(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMaximum", "(I)I", arg0)); }
void Calendar::appendValue(StringBuilder arg0, String arg1, bool arg2, long arg3) { (classes[className]->invokeStaticMethod<void>("appendValue", "(Ljava/lang/StringBuilder;Ljava/lang/String;ZJ)V", arg0, arg1, arg2, arg3)); }
void Calendar::computeTime() { (classes[className]->invokeMethod<void>(this->object, "computeTime", "()V")); }
Map Calendar::getDisplayNames(int arg0, int arg1, Locale arg2) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayNames", "(IILjava/util/Locale;)Ljava/util/Map;", arg0, arg1, arg2)); }
bool Calendar::isExternallySet(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isExternallySet", "(I)Z", arg0)); }
int Calendar::getSetStateFields() { return int(*classes[className]->invokeMethod<int>(this->object, "getSetStateFields", "()I")); }
void Calendar::setFieldsComputed(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setFieldsComputed", "(I)V", arg0)); }
void Calendar::setFieldsNormalized(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setFieldsNormalized", "(I)V", arg0)); }
bool Calendar::isPartiallyNormalized() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPartiallyNormalized", "()Z")); }
bool Calendar::isFullyNormalized() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFullyNormalized", "()Z")); }
void Calendar::setUnnormalized() { (classes[className]->invokeMethod<void>(this->object, "setUnnormalized", "()V")); }
int Calendar::selectFields() { return int(*classes[className]->invokeMethod<int>(this->object, "selectFields", "()I")); }
bool Calendar::isNarrowStyle(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNarrowStyle", "(I)Z", arg0)); }
Set Calendar::getAvailableCalendarTypes() { return Set(*classes[className]->invokeStaticMethod<jobject>("getAvailableCalendarTypes", "()Ljava/util/Set;")); }
void Calendar::setTimeZone(TimeZone arg0) { (classes[className]->invokeMethod<void>(this->object, "setTimeZone", "(Ljava/util/TimeZone;)V", arg0)); }
TimeZone Calendar::getZone() { return TimeZone(*classes[className]->invokeMethod<jobject>(this->object, "getZone", "()Ljava/util/TimeZone;")); }
void Calendar::setZoneShared(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setZoneShared", "(Z)V", arg0)); }
bool Calendar::isLenient() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLenient", "()Z")); }
void Calendar::setFirstDayOfWeek(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setFirstDayOfWeek", "(I)V", arg0)); }
int Calendar::getFirstDayOfWeek() { return int(*classes[className]->invokeMethod<int>(this->object, "getFirstDayOfWeek", "()I")); }
void Calendar::setMinimalDaysInFirstWeek(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setMinimalDaysInFirstWeek", "(I)V", arg0)); }
int Calendar::getMinimalDaysInFirstWeek() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinimalDaysInFirstWeek", "()I")); }
bool Calendar::isWeekDateSupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWeekDateSupported", "()Z")); }
int Calendar::getWeekYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getWeekYear", "()I")); }
void Calendar::setWeekDate(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setWeekDate", "(III)V", arg0, arg1, arg2)); }
int Calendar::getWeeksInWeekYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getWeeksInWeekYear", "()I")); }
int Calendar::getActualMinimum(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getActualMinimum", "(I)I", arg0)); }
int Calendar::getActualMaximum(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getActualMaximum", "(I)I", arg0)); }
String Calendar::getFieldName(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getFieldName", "(I)Ljava/lang/String;", arg0)); }
bool Calendar::before(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "before", "(Ljava/lang/Object;)Z", arg0)); }
bool Calendar::after(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "after", "(Ljava/lang/Object;)Z", arg0)); }
void Calendar::add(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "add", "(II)V", arg0, arg1)); }
int Calendar::get(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "get", "(I)I", arg0)); }
bool Calendar::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Calendar::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Calendar::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object Calendar::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void Calendar::clear(int arg0) { (classes[className]->invokeMethod<void>(this->object, "clear", "(I)V", arg0)); }
void Calendar::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
Calendar Calendar::getInstance(Locale arg0) { return Calendar(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/util/Locale;)Ljava/util/Calendar;", arg0)); }
Calendar Calendar::getInstance(TimeZone arg0) { return Calendar(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/util/TimeZone;)Ljava/util/Calendar;", arg0)); }
Calendar Calendar::getInstance(TimeZone arg0, Locale arg1) { return Calendar(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;", arg0, arg1)); }
Calendar Calendar::getInstance() { return Calendar(*classes[className]->invokeStaticMethod<jobject>("getInstance", "()Ljava/util/Calendar;")); }
void Calendar::set(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "set", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Calendar::set(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(II)V", arg0, arg1)); }
void Calendar::set(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "set", "(III)V", arg0, arg1, arg2)); }
void Calendar::set(int arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "set", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }
void Calendar::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Calendar::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
bool Calendar::isSet(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSet", "(I)Z", arg0)); }

long Date::getTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getTime", "()J")); }
int Date::getDate() { return int(*classes[className]->invokeMethod<int>(this->object, "getDate", "()I")); }
long Date::parse(String arg0) { return long(*classes[className]->invokeStaticMethod<long>("parse", "(Ljava/lang/String;)J", arg0)); }
int Date::getYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getYear", "()I")); }
int Date::getSeconds() { return int(*classes[className]->invokeMethod<int>(this->object, "getSeconds", "()I")); }
Instant Date::toInstant() { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "toInstant", "()Ljava/time/Instant;")); }
long Date::UTC(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return long(*classes[className]->invokeStaticMethod<long>("UTC", "(IIIIII)J", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Date::setTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setTime", "(J)V", arg0)); }
long Date::getMillisOf(Date arg0) { return long(*classes[className]->invokeStaticMethod<long>("getMillisOf", "(Ljava/util/Date;)J", arg0)); }
BaseCalendar Date::getCalendarSystem(BaseCalendar_Date arg0) { return BaseCalendar(*classes[className]->invokeStaticMethod<jobject>("getCalendarSystem", "(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar;", arg0)); }
BaseCalendar Date::getCalendarSystem(int arg0) { return BaseCalendar(*classes[className]->invokeStaticMethod<jobject>("getCalendarSystem", "(I)Lsun/util/calendar/BaseCalendar;", arg0)); }
BaseCalendar Date::getCalendarSystem(long arg0) { return BaseCalendar(*classes[className]->invokeStaticMethod<jobject>("getCalendarSystem", "(J)Lsun/util/calendar/BaseCalendar;", arg0)); }
long Date::getTimeImpl() { return long(*classes[className]->invokeMethod<long>(this->object, "getTimeImpl", "()J")); }
BaseCalendar_Date Date::getCalendarDate() { return BaseCalendar_Date(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun/util/calendar/BaseCalendar$Date;")); }
void Date::setDate(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setDate", "(I)V", arg0)); }
int Date::getMonth() { return int(*classes[className]->invokeMethod<int>(this->object, "getMonth", "()I")); }
void Date::setMonth(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setMonth", "(I)V", arg0)); }
int Date::getHours() { return int(*classes[className]->invokeMethod<int>(this->object, "getHours", "()I")); }
void Date::setHours(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setHours", "(I)V", arg0)); }
int Date::getMinutes() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinutes", "()I")); }
void Date::setMinutes(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setMinutes", "(I)V", arg0)); }
void Date::setSeconds(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSeconds", "(I)V", arg0)); }
StringBuilder Date::convertToAbbr(StringBuilder arg0, String arg1) { return StringBuilder(*classes[className]->invokeStaticMethod<jobject>("convertToAbbr", "(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder;", arg0, arg1)); }
BaseCalendar Date::getJulianCalendar() { return BaseCalendar(*classes[className]->invokeStaticMethod<jobject>("getJulianCalendar", "()Lsun/util/calendar/BaseCalendar;")); }
void Date::setYear(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setYear", "(I)V", arg0)); }
int Date::getDay() { return int(*classes[className]->invokeMethod<int>(this->object, "getDay", "()I")); }
String Date::toLocaleString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toLocaleString", "()Ljava/lang/String;")); }
String Date::toGMTString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toGMTString", "()Ljava/lang/String;")); }
int Date::getTimezoneOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getTimezoneOffset", "()I")); }
bool Date::before(Date arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "before", "(Ljava/util/Date;)Z", arg0)); }
bool Date::after(Date arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "after", "(Ljava/util/Date;)Z", arg0)); }
bool Date::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Date::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Date::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object Date::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
Date Date::from(Instant arg0) { return Date(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/Instant;)Ljava/util/Date;", arg0)); }
void Date::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Date::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
BaseCalendar_Date Date::normalize() { return BaseCalendar_Date(*classes[className]->invokeMethod<jobject>(this->object, "normalize", "()Lsun/util/calendar/BaseCalendar$Date;")); }
BaseCalendar_Date Date::normalize(BaseCalendar_Date arg0) { return BaseCalendar_Date(*classes[className]->invokeMethod<jobject>(this->object, "normalize", "(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date;", arg0)); }

Instant Instant::parse(CharSequence arg0) { return Instant(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/Instant;", arg0)); }
Instant Instant::ofEpochMilli(long arg0) { return Instant(*classes[className]->invokeStaticMethod<jobject>("ofEpochMilli", "(J)Ljava/time/Instant;", arg0)); }
Instant Instant::now() { return Instant(*classes[className]->invokeStaticMethod<jobject>("now", "()Ljava/time/Instant;")); }
Instant Instant::now(Clock arg0) { return Instant(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/Clock;)Ljava/time/Instant;", arg0)); }
int Instant::getNano() { return int(*classes[className]->invokeMethod<int>(this->object, "getNano", "()I")); }
long Instant::getEpochSecond() { return long(*classes[className]->invokeMethod<long>(this->object, "getEpochSecond", "()J")); }
Instant Instant::ofEpochSecond(long arg0) { return Instant(*classes[className]->invokeStaticMethod<jobject>("ofEpochSecond", "(J)Ljava/time/Instant;", arg0)); }
Instant Instant::ofEpochSecond(long arg0, long arg1) { return Instant(*classes[className]->invokeStaticMethod<jobject>("ofEpochSecond", "(JJ)Ljava/time/Instant;", arg0, arg1)); }
Instant Instant::readExternal(DataInput arg0) { return Instant(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/Instant;", arg0)); }
void Instant::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
long Instant::toEpochMilli() { return long(*classes[className]->invokeMethod<long>(this->object, "toEpochMilli", "()J")); }
Instant Instant::plusNanos(long arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava/time/Instant;", arg0)); }
Instant Instant::plus(long arg0, long arg1) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JJ)Ljava/time/Instant;", arg0, arg1)); }
Instant Instant::plus(TemporalAmount arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;", arg0)); }
Instant Instant::plus(long arg0, TemporalUnit arg1) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;", arg0, arg1)); }
Instant Instant::plusMillis(long arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "plusMillis", "(J)Ljava/time/Instant;", arg0)); }
Instant Instant::plusSeconds(long arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava/time/Instant;", arg0)); }
Instant Instant::with(TemporalAdjuster arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/Instant;", arg0)); }
Instant Instant::with(TemporalField arg0, long arg1) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalField;J)Ljava/time/Instant;", arg0, arg1)); }
long Instant::nanosUntil(Instant arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "nanosUntil", "(Ljava/time/Instant;)J", arg0)); }
long Instant::secondsUntil(Instant arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "secondsUntil", "(Ljava/time/Instant;)J", arg0)); }
Instant Instant::minus(long arg0, TemporalUnit arg1) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;", arg0, arg1)); }
Instant Instant::minus(TemporalAmount arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;", arg0)); }
Instant Instant::truncatedTo(TemporalUnit arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/Instant;", arg0)); }
Instant Instant::minusSeconds(long arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava/time/Instant;", arg0)); }
Instant Instant::minusMillis(long arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "minusMillis", "(J)Ljava/time/Instant;", arg0)); }
Instant Instant::minusNanos(long arg0) { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava/time/Instant;", arg0)); }
OffsetDateTime Instant::atOffset(ZoneOffset arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atOffset", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0)); }
ZonedDateTime Instant::atZone(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atZone", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
bool Instant::isAfter(Instant arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAfter", "(Ljava/time/Instant;)Z", arg0)); }
bool Instant::isBefore(Instant arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBefore", "(Ljava/time/Instant;)Z", arg0)); }
bool Instant::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Instant::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Instant::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Instant Instant::from(TemporalAccessor arg0) { return Instant(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/Instant;", arg0)); }
void Instant::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Instant Instant::create(long arg0, int arg1) { return Instant(*classes[className]->invokeStaticMethod<jobject>("create", "(JI)Ljava/time/Instant;", arg0, arg1)); }
Object Instant::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

Clock Clock::tick(Clock arg0, Duration arg1) { return Clock(*classes[className]->invokeStaticMethod<jobject>("tick", "(Ljava/time/Clock;Ljava/time/Duration;)Ljava/time/Clock;", arg0, arg1)); }
ZoneId Clock::getZone() { return ZoneId(*classes[className]->invokeMethod<jobject>(this->object, "getZone", "()Ljava/time/ZoneId;")); }
Instant Clock::currentInstant() { return Instant(*classes[className]->invokeStaticMethod<jobject>("currentInstant", "()Ljava/time/Instant;")); }
Clock Clock::systemUTC() { return Clock(*classes[className]->invokeStaticMethod<jobject>("systemUTC", "()Ljava/time/Clock;")); }
Clock Clock::systemDefaultZone() { return Clock(*classes[className]->invokeStaticMethod<jobject>("systemDefaultZone", "()Ljava/time/Clock;")); }
Clock Clock::tickMillis(ZoneId arg0) { return Clock(*classes[className]->invokeStaticMethod<jobject>("tickMillis", "(Ljava/time/ZoneId;)Ljava/time/Clock;", arg0)); }
Clock Clock::tickSeconds(ZoneId arg0) { return Clock(*classes[className]->invokeStaticMethod<jobject>("tickSeconds", "(Ljava/time/ZoneId;)Ljava/time/Clock;", arg0)); }
Clock Clock::tickMinutes(ZoneId arg0) { return Clock(*classes[className]->invokeStaticMethod<jobject>("tickMinutes", "(Ljava/time/ZoneId;)Ljava/time/Clock;", arg0)); }
bool Clock::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int Clock::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Clock Clock::offset(Clock arg0, Duration arg1) { return Clock(*classes[className]->invokeStaticMethod<jobject>("offset", "(Ljava/time/Clock;Ljava/time/Duration;)Ljava/time/Clock;", arg0, arg1)); }
Clock Clock::system(ZoneId arg0) { return Clock(*classes[className]->invokeStaticMethod<jobject>("system", "(Ljava/time/ZoneId;)Ljava/time/Clock;", arg0)); }
Clock Clock::fixed(Instant arg0, ZoneId arg1) { return Clock(*classes[className]->invokeStaticMethod<jobject>("fixed", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/Clock;", arg0, arg1)); }

Duration Duration::parse(CharSequence arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/Duration;", arg0)); }
long Duration::toSeconds() { return long(*classes[className]->invokeMethod<long>(this->object, "toSeconds", "()J")); }
long Duration::getSeconds() { return long(*classes[className]->invokeMethod<long>(this->object, "getSeconds", "()J")); }
int Duration::getNano() { return int(*classes[className]->invokeMethod<int>(this->object, "getNano", "()I")); }
long Duration::toMinutes() { return long(*classes[className]->invokeMethod<long>(this->object, "toMinutes", "()J")); }
long Duration::toHours() { return long(*classes[className]->invokeMethod<long>(this->object, "toHours", "()J")); }
long Duration::toDays() { return long(*classes[className]->invokeMethod<long>(this->object, "toDays", "()J")); }
Duration Duration::readExternal(DataInput arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/Duration;", arg0)); }
void Duration::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
Duration Duration::plusNanos(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::plus(long arg0, TemporalUnit arg1) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;", arg0, arg1)); }
Duration Duration::plus(Duration arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/Duration;)Ljava/time/Duration;", arg0)); }
Duration Duration::plus(long arg0, long arg1) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JJ)Ljava/time/Duration;", arg0, arg1)); }
Duration Duration::plusMillis(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plusMillis", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::plusSeconds(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::minus(long arg0, TemporalUnit arg1) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;", arg0, arg1)); }
Duration Duration::minus(Duration arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/Duration;)Ljava/time/Duration;", arg0)); }
Duration Duration::truncatedTo(TemporalUnit arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/Duration;", arg0)); }
Duration Duration::minusSeconds(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::minusMillis(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minusMillis", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::minusNanos(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava/time/Duration;", arg0)); }
bool Duration::isNegative() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNegative", "()Z")); }
long Duration::parseNumber(CharSequence arg0, int arg1, int arg2, int arg3, String arg4) { return long(*classes[className]->invokeStaticMethod<long>("parseNumber", "(Ljava/lang/CharSequence;IIILjava/lang/String;)J", arg0, arg1, arg2, arg3, arg4)); }
bool Duration::isZero() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isZero", "()Z")); }
Duration Duration::ofHours(long arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("ofHours", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::plusDays(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::plusHours(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::plusMinutes(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::minusDays(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::minusHours(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::minusMinutes(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava/time/Duration;", arg0)); }
bool Duration::charMatch(CharSequence arg0, int arg1, int arg2, char arg3) { return bool(*classes[className]->invokeStaticMethod<bool>("charMatch", "(Ljava/lang/CharSequence;IIC)Z", arg0, arg1, arg2, arg3)); }
int Duration::parseFraction(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("parseFraction", "(Ljava/lang/CharSequence;III)I", arg0, arg1, arg2, arg3)); }
Duration Duration::ofSeconds(long arg0, long arg1) { return Duration(*classes[className]->invokeStaticMethod<jobject>("ofSeconds", "(JJ)Ljava/time/Duration;", arg0, arg1)); }
Duration Duration::ofSeconds(long arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("ofSeconds", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::negated() { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "negated", "()Ljava/time/Duration;")); }
Duration Duration::ofNanos(long arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("ofNanos", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::multipliedBy(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "multipliedBy", "(J)Ljava/time/Duration;", arg0)); }
BigDecimal Duration::toBigDecimalSeconds() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "toBigDecimalSeconds", "()Ljava/math/BigDecimal;")); }
Duration Duration::ofDays(long arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("ofDays", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::ofMinutes(long arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("ofMinutes", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::ofMillis(long arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("ofMillis", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::withSeconds(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "withSeconds", "(J)Ljava/time/Duration;", arg0)); }
Duration Duration::withNanos(int arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "withNanos", "(I)Ljava/time/Duration;", arg0)); }
long Duration::dividedBy(Duration arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "dividedBy", "(Ljava/time/Duration;)J", arg0)); }
Duration Duration::dividedBy(long arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "dividedBy", "(J)Ljava/time/Duration;", arg0)); }
long Duration::toDaysPart() { return long(*classes[className]->invokeMethod<long>(this->object, "toDaysPart", "()J")); }
int Duration::toHoursPart() { return int(*classes[className]->invokeMethod<int>(this->object, "toHoursPart", "()I")); }
int Duration::toMinutesPart() { return int(*classes[className]->invokeMethod<int>(this->object, "toMinutesPart", "()I")); }
int Duration::toSecondsPart() { return int(*classes[className]->invokeMethod<int>(this->object, "toSecondsPart", "()I")); }
int Duration::toMillisPart() { return int(*classes[className]->invokeMethod<int>(this->object, "toMillisPart", "()I")); }
int Duration::toNanosPart() { return int(*classes[className]->invokeMethod<int>(this->object, "toNanosPart", "()I")); }
long Duration::toNanos() { return long(*classes[className]->invokeMethod<long>(this->object, "toNanos", "()J")); }
Duration Duration::between(Temporal arg0, Temporal arg1) { return Duration(*classes[className]->invokeStaticMethod<jobject>("between", "(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;", arg0, arg1)); }
bool Duration::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Duration::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Duration::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Duration Duration::abs() { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "abs", "()Ljava/time/Duration;")); }
Duration Duration::of(long arg0, TemporalUnit arg1) { return Duration(*classes[className]->invokeStaticMethod<jobject>("of", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;", arg0, arg1)); }
Duration Duration::from(TemporalAmount arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Duration;", arg0)); }
void Duration::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
long Duration::toMillis() { return long(*classes[className]->invokeMethod<long>(this->object, "toMillis", "()J")); }
Duration Duration::create(BigDecimal arg0) { return Duration(*classes[className]->invokeStaticMethod<jobject>("create", "(Ljava/math/BigDecimal;)Ljava/time/Duration;", arg0)); }
Duration Duration::create(long arg0, int arg1) { return Duration(*classes[className]->invokeStaticMethod<jobject>("create", "(JI)Ljava/time/Duration;", arg0, arg1)); }
Duration Duration::create(bool arg0, long arg1, long arg2, long arg3, long arg4, int arg5) { return Duration(*classes[className]->invokeStaticMethod<jobject>("create", "(ZJJJJI)Ljava/time/Duration;", arg0, arg1, arg2, arg3, arg4, arg5)); }
Object Duration::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }




BigDecimal BigDecimal::negate(MathContext arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "negate", "(Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::negate() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "negate", "()Ljava/math/BigDecimal;")); }
BigDecimal BigDecimal::plus(MathContext arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::plus() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "plus", "()Ljava/math/BigDecimal;")); }
int BigDecimal::precision() { return int(*classes[className]->invokeMethod<int>(this->object, "precision", "()I")); }
int BigDecimal::precision(long arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("precision", "(JJ)I", arg0, arg1)); }
BigDecimal BigDecimal::remainder(BigDecimal arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "remainder", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::remainder(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "remainder", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::subtract(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "subtract", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::subtract(BigDecimal arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "subtract", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::square() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "square", "()Ljava/math/BigDecimal;")); }
int BigDecimal::compareMagnitude(BigDecimal arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareMagnitude", "(Ljava/math/BigDecimal;)I", arg0)); }
BigInteger BigDecimal::toBigInteger() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "toBigInteger", "()Ljava/math/BigInteger;")); }
BigDecimal BigDecimal::divide(BigDecimal arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::divide(BigDecimal arg0, int arg1, int arg2) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::divide(BigDecimal arg0, int arg1, RoundingMode arg2) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::divide(long arg0, int arg1, long arg2, int arg3, int arg4, int arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(JIJIII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::divide(BigInteger arg0, int arg1, long arg2, int arg3, int arg4, int arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(Ljava/math/BigInteger;IJIII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::divide(BigDecimal arg0, RoundingMode arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/BigDecimal;Ljava/math/RoundingMode;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::divide(BigInteger arg0, int arg1, BigInteger arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(Ljava/math/BigInteger;ILjava/math/BigInteger;IJLjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::divide(long arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(JIJIJLjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::divide(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::divide(long arg0, int arg1, BigInteger arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(JILjava/math/BigInteger;IJLjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::divide(BigDecimal arg0, int arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/BigDecimal;I)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::divide(BigInteger arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(Ljava/math/BigInteger;IJIJLjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::divide(long arg0, int arg1, BigInteger arg2, int arg3, int arg4, int arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(JILjava/math/BigInteger;III)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::divide(BigInteger arg0, int arg1, BigInteger arg2, int arg3, int arg4, int arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divide", "(Ljava/math/BigInteger;ILjava/math/BigInteger;III)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
long BigDecimal::longValueExact() { return long(*classes[className]->invokeMethod<long>(this->object, "longValueExact", "()J")); }
int BigDecimal::intValueExact() { return int(*classes[className]->invokeMethod<int>(this->object, "intValueExact", "()I")); }
short BigDecimal::shortValueExact() { return short(*classes[className]->invokeMethod<short>(this->object, "shortValueExact", "()S")); }
byte BigDecimal::byteValueExact() { return byte(*classes[className]->invokeMethod<byte>(this->object, "byteValueExact", "()B")); }
BigDecimal BigDecimal::divideToIntegralValue(BigDecimal arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divideToIntegralValue", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::divideToIntegralValue(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "divideToIntegralValue", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::movePointRight(int arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "movePointRight", "(I)Ljava/math/BigDecimal;", arg0)); }
BigInteger BigDecimal::toBigIntegerExact() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "toBigIntegerExact", "()Ljava/math/BigInteger;")); }
long BigDecimal::parseExp(arr_C arg0, int arg1, int arg2) { return long(*classes[className]->invokeStaticMethod<long>("parseExp", "([CII)J", arg0, arg1, arg2)); }
int BigDecimal::adjustScale(int arg0, long arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "adjustScale", "(IJ)I", arg0, arg1)); }
int BigDecimal::checkScaleNonZero(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("checkScaleNonZero", "(J)I", arg0)); }
long BigDecimal::divideAndRound(long arg0, long arg1, int arg2) { return long(*classes[className]->invokeStaticMethod<long>("divideAndRound", "(JJI)J", arg0, arg1, arg2)); }
BigDecimal BigDecimal::divideAndRound(BigInteger arg0, long arg1, int arg2, int arg3, int arg4) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divideAndRound", "(Ljava/math/BigInteger;JIII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }
BigInteger BigDecimal::divideAndRound(BigInteger arg0, BigInteger arg1, int arg2) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("divideAndRound", "(Ljava/math/BigInteger;Ljava/math/BigInteger;I)Ljava/math/BigInteger;", arg0, arg1, arg2)); }
BigInteger BigDecimal::divideAndRound(BigInteger arg0, long arg1, int arg2) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("divideAndRound", "(Ljava/math/BigInteger;JI)Ljava/math/BigInteger;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::divideAndRound(BigInteger arg0, BigInteger arg1, int arg2, int arg3, int arg4) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divideAndRound", "(Ljava/math/BigInteger;Ljava/math/BigInteger;III)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }
BigDecimal BigDecimal::divideAndRound(long arg0, long arg1, int arg2, int arg3, int arg4) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divideAndRound", "(JJIII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }
int BigDecimal::longDigitLength(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("longDigitLength", "(J)I", arg0)); }
long BigDecimal::compactValFor(BigInteger arg0) { return long(*classes[className]->invokeStaticMethod<long>("compactValFor", "(Ljava/math/BigInteger;)J", arg0)); }
BigInteger BigDecimal::divideAndRoundByTenPow(BigInteger arg0, int arg1, int arg2) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("divideAndRoundByTenPow", "(Ljava/math/BigInteger;II)Ljava/math/BigInteger;", arg0, arg1, arg2)); }
int BigDecimal::bigDigitLength(BigInteger arg0) { return int(*classes[className]->invokeStaticMethod<int>("bigDigitLength", "(Ljava/math/BigInteger;)I", arg0)); }
BigDecimal BigDecimal::zeroValueOf(int arg0) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("zeroValueOf", "(I)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::doRound(BigInteger arg0, int arg1, MathContext arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("doRound", "(Ljava/math/BigInteger;ILjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::doRound(BigDecimal arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("doRound", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::doRound(long arg0, int arg1, MathContext arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("doRound", "(JILjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::stripZerosToMatchScale(BigInteger arg0, long arg1, int arg2, int arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("stripZerosToMatchScale", "(Ljava/math/BigInteger;JII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::setScale(int arg0, RoundingMode arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "setScale", "(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::setScale(int arg0, int arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "setScale", "(II)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::setScale(int arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "setScale", "(I)Ljava/math/BigDecimal;", arg0)); }
void BigDecimal::matchScale(BigDecimal_interface arg0) { (classes[className]->invokeStaticMethod<void>("matchScale", "([Ljava/math/BigDecimal;)V", arg0)); }
BigInteger BigDecimal::inflated() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "inflated", "()Ljava/math/BigInteger;")); }
int BigDecimal::checkScale(BigInteger arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("checkScale", "(Ljava/math/BigInteger;J)I", arg0, arg1)); }
int BigDecimal::checkScale(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "checkScale", "(J)I", arg0)); }
int BigDecimal::checkScale(long arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("checkScale", "(JJ)I", arg0, arg1)); }
BigDecimal BigDecimal::multiplyAndRound(long arg0, BigInteger arg1, int arg2, MathContext arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("multiplyAndRound", "(JLjava/math/BigInteger;ILjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::multiplyAndRound(BigInteger arg0, BigInteger arg1, int arg2, MathContext arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("multiplyAndRound", "(Ljava/math/BigInteger;Ljava/math/BigInteger;ILjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::multiplyAndRound(long arg0, long arg1, int arg2, MathContext arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("multiplyAndRound", "(JJILjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
int BigDecimal::saturateLong(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("saturateLong", "(J)I", arg0)); }
BigDecimal BigDecimal::stripTrailingZeros() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "stripTrailingZeros", "()Ljava/math/BigDecimal;")); }
bool BigDecimal::isPowerOfTen() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPowerOfTen", "()Z")); }
BigDecimal BigDecimal::scaleByPowerOfTen(int arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "scaleByPowerOfTen", "(I)Ljava/math/BigDecimal;", arg0)); }
bool BigDecimal::squareRootResultAssertions(BigDecimal arg0, MathContext arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "squareRootResultAssertions", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Z", arg0, arg1)); }
BigInteger BigDecimal::unscaledValue() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "unscaledValue", "()Ljava/math/BigInteger;")); }
bool BigDecimal::squareRootZeroResultAssertions(BigDecimal arg0, MathContext arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "squareRootZeroResultAssertions", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Z", arg0, arg1)); }
long BigDecimal::longMultiplyPowerTen(long arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("longMultiplyPowerTen", "(JI)J", arg0, arg1)); }
BigInteger BigDecimal::bigMultiplyPowerTen(BigInteger arg0, int arg1) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("bigMultiplyPowerTen", "(Ljava/math/BigInteger;I)Ljava/math/BigInteger;", arg0, arg1)); }
BigInteger BigDecimal::bigMultiplyPowerTen(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "bigMultiplyPowerTen", "(I)Ljava/math/BigInteger;", arg0)); }
BigInteger BigDecimal::bigMultiplyPowerTen(long arg0, int arg1) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("bigMultiplyPowerTen", "(JI)Ljava/math/BigInteger;", arg0, arg1)); }
BigInteger BigDecimal::bigTenToThe(int arg0) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("bigTenToThe", "(I)Ljava/math/BigInteger;", arg0)); }
BigDecimal BigDecimal::createAndStripZerosToMatchScale(long arg0, int arg1, long arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("createAndStripZerosToMatchScale", "(JIJ)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::createAndStripZerosToMatchScale(BigInteger arg0, int arg1, long arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("createAndStripZerosToMatchScale", "(Ljava/math/BigInteger;IJ)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
int BigDecimal::longCompareMagnitude(long arg0, long arg1) { return int(*classes[className]->invokeStaticMethod<int>("longCompareMagnitude", "(JJ)I", arg0, arg1)); }
String BigDecimal::layoutChars(bool arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "layoutChars", "(Z)Ljava/lang/String;", arg0)); }
String BigDecimal::getValueString(int arg0, String arg1, int arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getValueString", "(ILjava/lang/String;I)Ljava/lang/String;", arg0, arg1, arg2)); }
bool BigDecimal::fractionOnly() { return bool(*classes[className]->invokeMethod<bool>(this->object, "fractionOnly", "()Z")); }
BigInteger BigDecimal::expandBigIntegerTenPowers(int arg0) { return BigInteger(*classes[className]->invokeStaticMethod<jobject>("expandBigIntegerTenPowers", "(I)Ljava/math/BigInteger;", arg0)); }
BigDecimal BigDecimal::audit() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "audit", "()Ljava/math/BigDecimal;")); }
bool BigDecimal::needIncrement(long arg0, int arg1, int arg2, MutableBigInteger arg3, long arg4) { return bool(*classes[className]->invokeStaticMethod<bool>("needIncrement", "(JIILjava/math/MutableBigInteger;J)Z", arg0, arg1, arg2, arg3, arg4)); }
bool BigDecimal::needIncrement(MutableBigInteger arg0, int arg1, int arg2, MutableBigInteger arg3, MutableBigInteger arg4) { return bool(*classes[className]->invokeStaticMethod<bool>("needIncrement", "(Ljava/math/MutableBigInteger;IILjava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)Z", arg0, arg1, arg2, arg3, arg4)); }
bool BigDecimal::needIncrement(long arg0, int arg1, int arg2, long arg3, long arg4) { return bool(*classes[className]->invokeStaticMethod<bool>("needIncrement", "(JIIJJ)Z", arg0, arg1, arg2, arg3, arg4)); }
bool BigDecimal::commonNeedIncrement(int arg0, int arg1, int arg2, bool arg3) { return bool(*classes[className]->invokeStaticMethod<bool>("commonNeedIncrement", "(IIIZ)Z", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::multiplyDivideAndRound(long arg0, long arg1, long arg2, int arg3, int arg4, int arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("multiplyDivideAndRound", "(JJJIII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
BigDecimal BigDecimal::roundedTenPower(int arg0, int arg1, int arg2, int arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("roundedTenPower", "(IIII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::divideSmallFastPath(long arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divideSmallFastPath", "(JIJIJLjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }
int BigDecimal::compareMagnitudeNormalized(long arg0, int arg1, BigInteger arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("compareMagnitudeNormalized", "(JILjava/math/BigInteger;I)I", arg0, arg1, arg2, arg3)); }
int BigDecimal::compareMagnitudeNormalized(long arg0, int arg1, long arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("compareMagnitudeNormalized", "(JIJI)I", arg0, arg1, arg2, arg3)); }
int BigDecimal::compareMagnitudeNormalized(BigInteger arg0, int arg1, BigInteger arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("compareMagnitudeNormalized", "(Ljava/math/BigInteger;ILjava/math/BigInteger;I)I", arg0, arg1, arg2, arg3)); }
long BigDecimal::make64(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("make64", "(JJ)J", arg0, arg1)); }
BigDecimal BigDecimal::divideAndRound128(long arg0, long arg1, long arg2, int arg3, int arg4, int arg5, int arg6) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("divideAndRound128", "(JJJIIII)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
bool BigDecimal::unsignedLongCompare(long arg0, long arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("unsignedLongCompare", "(JJ)Z", arg0, arg1)); }
long BigDecimal::mulsub(long arg0, long arg1, long arg2, long arg3, long arg4) { return long(*classes[className]->invokeStaticMethod<long>("mulsub", "(JJJJJ)J", arg0, arg1, arg2, arg3, arg4)); }
BigDecimal BigDecimal::scaledTenPow(int arg0, int arg1, int arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("scaledTenPow", "(III)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::doRound128(long arg0, long arg1, int arg2, int arg3, MathContext arg4) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("doRound128", "(JJIILjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }
bool BigDecimal::unsignedLongCompareEq(long arg0, long arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("unsignedLongCompareEq", "(JJ)Z", arg0, arg1)); }
bool BigDecimal::longLongCompareMagnitude(long arg0, long arg1, long arg2, long arg3) { return bool(*classes[className]->invokeStaticMethod<bool>("longLongCompareMagnitude", "(JJJJ)Z", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::movePointLeft(int arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "movePointLeft", "(I)Ljava/math/BigDecimal;", arg0)); }
String BigDecimal::toEngineeringString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toEngineeringString", "()Ljava/lang/String;")); }
String BigDecimal::toPlainString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toPlainString", "()Ljava/lang/String;")); }
BigDecimal BigDecimal::multiply(BigDecimal arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "multiply", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::multiply(BigInteger arg0, BigInteger arg1, int arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("multiply", "(Ljava/math/BigInteger;Ljava/math/BigInteger;I)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::multiply(long arg0, BigInteger arg1, int arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("multiply", "(JLjava/math/BigInteger;I)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::multiply(long arg0, long arg1, int arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("multiply", "(JJI)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
long BigDecimal::multiply(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("multiply", "(JJ)J", arg0, arg1)); }
BigDecimal BigDecimal::multiply(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "multiply", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::round(MathContext arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "round", "(Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::ulp() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "ulp", "()Ljava/math/BigDecimal;")); }
long BigDecimal::add(long arg0, long arg1) { return long(*classes[className]->invokeStaticMethod<long>("add", "(JJ)J", arg0, arg1)); }
BigDecimal BigDecimal::add(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::add(BigDecimal arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::add(BigInteger arg0, int arg1, BigInteger arg2, int arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("add", "(Ljava/math/BigInteger;ILjava/math/BigInteger;I)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::add(long arg0, int arg1, BigInteger arg2, int arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("add", "(JILjava/math/BigInteger;I)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
BigDecimal BigDecimal::add(long arg0, long arg1, int arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("add", "(JJI)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::add(long arg0, int arg1, long arg2, int arg3) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("add", "(JIJI)Ljava/math/BigDecimal;", arg0, arg1, arg2, arg3)); }
bool BigDecimal::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String BigDecimal::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int BigDecimal::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
BigDecimal BigDecimal::abs(MathContext arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "abs", "(Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::abs() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "abs", "()Ljava/math/BigDecimal;")); }
BigDecimal BigDecimal::sqrt(MathContext arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "sqrt", "(Ljava/math/MathContext;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::pow(int arg0, MathContext arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "pow", "(ILjava/math/MathContext;)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::pow(int arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "pow", "(I)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::min(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "min", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::max(BigDecimal arg0) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "max", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", arg0)); }
int BigDecimal::signum() { return int(*classes[className]->invokeMethod<int>(this->object, "signum", "()I")); }
int BigDecimal::intValue() { return int(*classes[className]->invokeMethod<int>(this->object, "intValue", "()I")); }
long BigDecimal::longValue() { return long(*classes[className]->invokeMethod<long>(this->object, "longValue", "()J")); }
float BigDecimal::floatValue() { return float(*classes[className]->invokeMethod<float>(this->object, "floatValue", "()F")); }
double BigDecimal::doubleValue() { return double(*classes[className]->invokeMethod<double>(this->object, "doubleValue", "()D")); }
BigDecimal BigDecimal::valueOf(BigInteger arg0, int arg1, int arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/math/BigInteger;II)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::valueOf(long arg0, int arg1, int arg2) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(JII)Ljava/math/BigDecimal;", arg0, arg1, arg2)); }
BigDecimal BigDecimal::valueOf(long arg0) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(J)Ljava/math/BigDecimal;", arg0)); }
BigDecimal BigDecimal::valueOf(long arg0, int arg1) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(JI)Ljava/math/BigDecimal;", arg0, arg1)); }
BigDecimal BigDecimal::valueOf(double arg0) { return BigDecimal(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(D)Ljava/math/BigDecimal;", arg0)); }
int BigDecimal::scale() { return int(*classes[className]->invokeMethod<int>(this->object, "scale", "()I")); }
void BigDecimal::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void BigDecimal::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
void BigDecimal::print(String arg0, BigDecimal arg1) { (classes[className]->invokeStaticMethod<void>("print", "(Ljava/lang/String;Ljava/math/BigDecimal;)V", arg0, arg1)); }

int MathContext::getPrecision() { return int(*classes[className]->invokeMethod<int>(this->object, "getPrecision", "()I")); }
RoundingMode MathContext::getRoundingMode() { return RoundingMode(*classes[className]->invokeMethod<jobject>(this->object, "getRoundingMode", "()Ljava/math/RoundingMode;")); }
bool MathContext::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String MathContext::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int MathContext::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void MathContext::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }

RoundingMode RoundingMode::valueOf(String arg0) { return RoundingMode(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/math/RoundingMode;", arg0)); }
RoundingMode RoundingMode::valueOf(int arg0) { return RoundingMode(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(I)Ljava/math/RoundingMode;", arg0)); }


MutableBigInteger MutableBigInteger::getBlock(int arg0, int arg1, int arg2) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getBlock", "(III)Ljava/math/MutableBigInteger;", arg0, arg1, arg2)); }
long MutableBigInteger::bitLength() { return long(*classes[className]->invokeMethod<long>(this->object, "bitLength", "()J")); }
int MutableBigInteger::subtract(MutableBigInteger arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "subtract", "(Ljava/math/MutableBigInteger;)I", arg0)); }
int MutableBigInteger::getLowestSetBit() { return int(*classes[className]->invokeMethod<int>(this->object, "getLowestSetBit", "()I")); }
BigInteger MutableBigInteger::getLower(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getLower", "(I)Ljava/math/BigInteger;", arg0)); }
void MutableBigInteger::primitiveLeftShift(int arg0) { (classes[className]->invokeMethod<void>(this->object, "primitiveLeftShift", "(I)V", arg0)); }
MutableBigInteger MutableBigInteger::divideKnuth(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divideKnuth", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0, arg1)); }
MutableBigInteger MutableBigInteger::divideKnuth(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divideKnuth", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;Z)Ljava/math/MutableBigInteger;", arg0, arg1, arg2)); }
BigInteger MutableBigInteger::toBigInteger() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "toBigInteger", "()Ljava/math/BigInteger;")); }
BigInteger MutableBigInteger::toBigInteger(int arg0) { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "toBigInteger", "(I)Ljava/math/BigInteger;", arg0)); }
MutableBigInteger MutableBigInteger::divideAndRemainderBurnikelZiegler(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divideAndRemainderBurnikelZiegler", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0, arg1)); }
bool MutableBigInteger::isZero() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isZero", "()Z")); }
MutableBigInteger MutableBigInteger::hybridGCD(MutableBigInteger arg0) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "hybridGCD", "(Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0)); }
void MutableBigInteger::primitiveRightShift(int arg0) { (classes[className]->invokeMethod<void>(this->object, "primitiveRightShift", "(I)V", arg0)); }
MutableBigInteger MutableBigInteger::modInverse(MutableBigInteger arg0) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "modInverse", "(Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0)); }
long MutableBigInteger::divide(long arg0, MutableBigInteger arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "divide", "(JLjava/math/MutableBigInteger;)J", arg0, arg1)); }
MutableBigInteger MutableBigInteger::divide(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0, arg1)); }
MutableBigInteger MutableBigInteger::divide(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divide", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;Z)Ljava/math/MutableBigInteger;", arg0, arg1, arg2)); }
long MutableBigInteger::inverseMod64(long arg0) { return long(*classes[className]->invokeStaticMethod<long>("inverseMod64", "(J)J", arg0)); }
void MutableBigInteger::leftShift(int arg0) { (classes[className]->invokeMethod<void>(this->object, "leftShift", "(I)V", arg0)); }
MutableBigInteger MutableBigInteger::mutableModInverse(MutableBigInteger arg0) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "mutableModInverse", "(Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0)); }
int MutableBigInteger::difference(MutableBigInteger arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "difference", "(Ljava/math/MutableBigInteger;)I", arg0)); }
BigDecimal MutableBigInteger::toBigDecimal(int arg0, int arg1) { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "toBigDecimal", "(II)Ljava/math/BigDecimal;", arg0, arg1)); }
long MutableBigInteger::toCompactValue(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "toCompactValue", "(I)J", arg0)); }
bool MutableBigInteger::isOdd() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOdd", "()Z")); }
int MutableBigInteger::compareHalf(MutableBigInteger arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareHalf", "(Ljava/math/MutableBigInteger;)I", arg0)); }
bool MutableBigInteger::unsignedLongCompare(long arg0, long arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "unsignedLongCompare", "(JJ)Z", arg0, arg1)); }
int MutableBigInteger::mulsub(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "mulsub", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }
void MutableBigInteger::rightShift(int arg0) { (classes[className]->invokeMethod<void>(this->object, "rightShift", "(I)V", arg0)); }
void MutableBigInteger::copyValue(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "copyValue", "([I)V", arg0)); }
void MutableBigInteger::copyValue(MutableBigInteger arg0) { (classes[className]->invokeMethod<void>(this->object, "copyValue", "(Ljava/math/MutableBigInteger;)V", arg0)); }
long MutableBigInteger::divWord(long arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("divWord", "(JI)J", arg0, arg1)); }
int MutableBigInteger::divideOneWord(int arg0, MutableBigInteger arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "divideOneWord", "(ILjava/math/MutableBigInteger;)I", arg0, arg1)); }
MutableBigInteger MutableBigInteger::divideMagnitude(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divideMagnitude", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;Z)Ljava/math/MutableBigInteger;", arg0, arg1, arg2)); }
void MutableBigInteger::safeLeftShift(int arg0) { (classes[className]->invokeMethod<void>(this->object, "safeLeftShift", "(I)V", arg0)); }
void MutableBigInteger::addDisjoint(MutableBigInteger arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addDisjoint", "(Ljava/math/MutableBigInteger;I)V", arg0, arg1)); }
MutableBigInteger MutableBigInteger::divide2n1n(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divide2n1n", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0, arg1)); }
void MutableBigInteger::addShifted(MutableBigInteger arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addShifted", "(Ljava/math/MutableBigInteger;I)V", arg0, arg1)); }
void MutableBigInteger::safeRightShift(int arg0) { (classes[className]->invokeMethod<void>(this->object, "safeRightShift", "(I)V", arg0)); }
void MutableBigInteger::keepLower(int arg0) { (classes[className]->invokeMethod<void>(this->object, "keepLower", "(I)V", arg0)); }
MutableBigInteger MutableBigInteger::divide3n2n(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divide3n2n", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0, arg1)); }
int MutableBigInteger::compareShifted(MutableBigInteger arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "compareShifted", "(Ljava/math/MutableBigInteger;I)I", arg0, arg1)); }
void MutableBigInteger::ones(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ones", "(I)V", arg0)); }
void MutableBigInteger::addLower(MutableBigInteger arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addLower", "(Ljava/math/MutableBigInteger;I)V", arg0, arg1)); }
MutableBigInteger MutableBigInteger::divideLongMagnitude(long arg0, MutableBigInteger arg1) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "divideLongMagnitude", "(JLjava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0, arg1)); }
long MutableBigInteger::toLong() { return long(*classes[className]->invokeMethod<long>(this->object, "toLong", "()J")); }
void MutableBigInteger::copyAndShift(arr_I arg0, int arg1, int arg2, arr_I arg3, int arg4, int arg5) { (classes[className]->invokeStaticMethod<void>("copyAndShift", "([III[III)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
int MutableBigInteger::divadd(arr_I arg0, arr_I arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "divadd", "([I[II)I", arg0, arg1, arg2)); }
int MutableBigInteger::mulsubBorrow(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "mulsubBorrow", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }
int MutableBigInteger::mulsubLong(arr_I arg0, int arg1, int arg2, int arg3, int arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "mulsubLong", "([IIIII)I", arg0, arg1, arg2, arg3, arg4)); }
int MutableBigInteger::divaddLong(int arg0, int arg1, arr_I arg2, int arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "divaddLong", "(II[II)I", arg0, arg1, arg2, arg3)); }
MutableBigInteger MutableBigInteger::binaryGCD(MutableBigInteger arg0) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "binaryGCD", "(Ljava/math/MutableBigInteger;)Ljava/math/MutableBigInteger;", arg0)); }
int MutableBigInteger::binaryGcd(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("binaryGcd", "(II)I", arg0, arg1)); }
bool MutableBigInteger::isEven() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEven", "()Z")); }
bool MutableBigInteger::isOne() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOne", "()Z")); }
MutableBigInteger MutableBigInteger::modInverseMP2(int arg0) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "modInverseMP2", "(I)Ljava/math/MutableBigInteger;", arg0)); }
MutableBigInteger MutableBigInteger::modInverseBP2(MutableBigInteger arg0, int arg1) { return MutableBigInteger(*classes[className]->invokeStaticMethod<jobject>("modInverseBP2", "(Ljava/math/MutableBigInteger;I)Ljava/math/MutableBigInteger;", arg0, arg1)); }
MutableBigInteger MutableBigInteger::euclidModInverse(int arg0) { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "euclidModInverse", "(I)Ljava/math/MutableBigInteger;", arg0)); }
int MutableBigInteger::inverseMod32(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("inverseMod32", "(I)I", arg0)); }
MutableBigInteger MutableBigInteger::fixup(MutableBigInteger arg0, MutableBigInteger arg1, int arg2) { return MutableBigInteger(*classes[className]->invokeStaticMethod<jobject>("fixup", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;I)Ljava/math/MutableBigInteger;", arg0, arg1, arg2)); }
void MutableBigInteger::mul(int arg0, MutableBigInteger arg1) { (classes[className]->invokeMethod<void>(this->object, "mul", "(ILjava/math/MutableBigInteger;)V", arg0, arg1)); }
bool MutableBigInteger::isNormal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNormal", "()Z")); }
void MutableBigInteger::multiply(MutableBigInteger arg0, MutableBigInteger arg1) { (classes[className]->invokeMethod<void>(this->object, "multiply", "(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)V", arg0, arg1)); }
void MutableBigInteger::add(MutableBigInteger arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/math/MutableBigInteger;)V", arg0)); }
String MutableBigInteger::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
MutableBigInteger MutableBigInteger::sqrt() { return MutableBigInteger(*classes[className]->invokeMethod<jobject>(this->object, "sqrt", "()Ljava/math/MutableBigInteger;")); }
int MutableBigInteger::getInt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }
long MutableBigInteger::getLong(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }
int MutableBigInteger::compare(MutableBigInteger arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compare", "(Ljava/math/MutableBigInteger;)I", arg0)); }
void MutableBigInteger::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
void MutableBigInteger::setValue(arr_I arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setValue", "([II)V", arg0, arg1)); }
void MutableBigInteger::setInt(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setInt", "(II)V", arg0, arg1)); }
void MutableBigInteger::normalize() { (classes[className]->invokeMethod<void>(this->object, "normalize", "()V")); }
void MutableBigInteger::ensureCapacity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }
void MutableBigInteger::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }



String ZoneId::getDisplayName(TextStyle arg0, Locale arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava/time/format/TextStyle;Ljava/util/Locale;)Ljava/lang/String;", arg0, arg1)); }
ZoneId ZoneId::normalized() { return ZoneId(*classes[className]->invokeMethod<jobject>(this->object, "normalized", "()Ljava/time/ZoneId;")); }
ZoneId ZoneId::systemDefault() { return ZoneId(*classes[className]->invokeStaticMethod<jobject>("systemDefault", "()Ljava/time/ZoneId;")); }
ZoneRules ZoneId::getRules() { return ZoneRules(*classes[className]->invokeMethod<jobject>(this->object, "getRules", "()Ljava/time/zone/ZoneRules;")); }
Set ZoneId::getAvailableZoneIds() { return Set(*classes[className]->invokeStaticMethod<jobject>("getAvailableZoneIds", "()Ljava/util/Set;")); }
ZoneId ZoneId::ofWithPrefix(String arg0, int arg1, bool arg2) { return ZoneId(*classes[className]->invokeStaticMethod<jobject>("ofWithPrefix", "(Ljava/lang/String;IZ)Ljava/time/ZoneId;", arg0, arg1, arg2)); }
ZoneId ZoneId::ofOffset(String arg0, ZoneOffset arg1) { return ZoneId(*classes[className]->invokeStaticMethod<jobject>("ofOffset", "(Ljava/lang/String;Ljava/time/ZoneOffset;)Ljava/time/ZoneId;", arg0, arg1)); }
TemporalAccessor ZoneId::toTemporal() { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "toTemporal", "()Ljava/time/temporal/TemporalAccessor;")); }
bool ZoneId::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ZoneId::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ZoneId::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
ZoneId ZoneId::of(String arg0, Map arg1) { return ZoneId(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/String;Ljava/util/Map;)Ljava/time/ZoneId;", arg0, arg1)); }
ZoneId ZoneId::of(String arg0) { return ZoneId(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/String;)Ljava/time/ZoneId;", arg0)); }
ZoneId ZoneId::of(String arg0, bool arg1) { return ZoneId(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/String;Z)Ljava/time/ZoneId;", arg0, arg1)); }
ZoneId ZoneId::from(TemporalAccessor arg0) { return ZoneId(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/ZoneId;", arg0)); }
void ZoneId::write(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/io/DataOutput;)V", arg0)); }
void ZoneId::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
String ZoneId::getId() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getId", "()Ljava/lang/String;")); }
Object ZoneId::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

int TextStyle::zoneNameStyleIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "zoneNameStyleIndex", "()I")); }
bool TextStyle::isStandalone() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStandalone", "()Z")); }
TextStyle TextStyle::asStandalone() { return TextStyle(*classes[className]->invokeMethod<jobject>(this->object, "asStandalone", "()Ljava/time/format/TextStyle;")); }
TextStyle TextStyle::asNormal() { return TextStyle(*classes[className]->invokeMethod<jobject>(this->object, "asNormal", "()Ljava/time/format/TextStyle;")); }
int TextStyle::toCalendarStyle() { return int(*classes[className]->invokeMethod<int>(this->object, "toCalendarStyle", "()I")); }
TextStyle TextStyle::valueOf(String arg0) { return TextStyle(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/time/format/TextStyle;", arg0)); }

ZoneRules ZoneRules::readExternal(DataInput arg0) { return ZoneRules(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/zone/ZoneRules;", arg0)); }
void ZoneRules::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
bool ZoneRules::isFixedOffset() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFixedOffset", "()Z")); }
List ZoneRules::getValidOffsets(LocalDateTime arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getValidOffsets", "(Ljava/time/LocalDateTime;)Ljava/util/List;", arg0)); }
ZoneOffsetTransition ZoneRules::getTransition(LocalDateTime arg0) { return ZoneOffsetTransition(*classes[className]->invokeMethod<jobject>(this->object, "getTransition", "(Ljava/time/LocalDateTime;)Ljava/time/zone/ZoneOffsetTransition;", arg0)); }
bool ZoneRules::isValidOffset(LocalDateTime arg0, ZoneOffset arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isValidOffset", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;)Z", arg0, arg1)); }
int ZoneRules::findYear(long arg0, ZoneOffset arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "findYear", "(JLjava/time/ZoneOffset;)I", arg0, arg1)); }
Object ZoneRules::getOffsetInfo(LocalDateTime arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getOffsetInfo", "(Ljava/time/LocalDateTime;)Ljava/lang/Object;", arg0)); }
Object ZoneRules::findOffsetInfo(LocalDateTime arg0, ZoneOffsetTransition arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "findOffsetInfo", "(Ljava/time/LocalDateTime;Ljava/time/zone/ZoneOffsetTransition;)Ljava/lang/Object;", arg0, arg1)); }
ZoneOffset ZoneRules::getStandardOffset(Instant arg0) { return ZoneOffset(*classes[className]->invokeMethod<jobject>(this->object, "getStandardOffset", "(Ljava/time/Instant;)Ljava/time/ZoneOffset;", arg0)); }
Duration ZoneRules::getDaylightSavings(Instant arg0) { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "getDaylightSavings", "(Ljava/time/Instant;)Ljava/time/Duration;", arg0)); }
bool ZoneRules::isDaylightSavings(Instant arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDaylightSavings", "(Ljava/time/Instant;)Z", arg0)); }
ZoneOffsetTransition ZoneRules::nextTransition(Instant arg0) { return ZoneOffsetTransition(*classes[className]->invokeMethod<jobject>(this->object, "nextTransition", "(Ljava/time/Instant;)Ljava/time/zone/ZoneOffsetTransition;", arg0)); }
ZoneOffsetTransition ZoneRules::previousTransition(Instant arg0) { return ZoneOffsetTransition(*classes[className]->invokeMethod<jobject>(this->object, "previousTransition", "(Ljava/time/Instant;)Ljava/time/zone/ZoneOffsetTransition;", arg0)); }
List ZoneRules::getTransitions() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getTransitions", "()Ljava/util/List;")); }
List ZoneRules::getTransitionRules() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getTransitionRules", "()Ljava/util/List;")); }
bool ZoneRules::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ZoneRules::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ZoneRules::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
ZoneRules ZoneRules::of(ZoneOffset arg0, ZoneOffset arg1, List arg2, List arg3, List arg4) { return ZoneRules(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Ljava/time/zone/ZoneRules;", arg0, arg1, arg2, arg3, arg4)); }
ZoneRules ZoneRules::of(ZoneOffset arg0) { return ZoneRules(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneRules;", arg0)); }
void ZoneRules::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
ZoneOffset ZoneRules::getOffset(LocalDateTime arg0) { return ZoneOffset(*classes[className]->invokeMethod<jobject>(this->object, "getOffset", "(Ljava/time/LocalDateTime;)Ljava/time/ZoneOffset;", arg0)); }
ZoneOffset ZoneRules::getOffset(Instant arg0) { return ZoneOffset(*classes[className]->invokeMethod<jobject>(this->object, "getOffset", "(Ljava/time/Instant;)Ljava/time/ZoneOffset;", arg0)); }
Object ZoneRules::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

LocalDateTime LocalDateTime::parse(CharSequence arg0, DateTimeFormatter arg1) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDateTime::parse(CharSequence arg0) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/LocalDateTime;", arg0)); }
int LocalDateTime::getYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getYear", "()I")); }
int LocalDateTime::getMonthValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getMonthValue", "()I")); }
int LocalDateTime::getDayOfMonth() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfMonth", "()I")); }
int LocalDateTime::getHour() { return int(*classes[className]->invokeMethod<int>(this->object, "getHour", "()I")); }
int LocalDateTime::getMinute() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinute", "()I")); }
int LocalDateTime::getSecond() { return int(*classes[className]->invokeMethod<int>(this->object, "getSecond", "()I")); }
LocalDateTime LocalDateTime::ofInstant(Instant arg0, ZoneId arg1) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("ofInstant", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDateTime::now() { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "()Ljava/time/LocalDateTime;")); }
LocalDateTime LocalDateTime::now(ZoneId arg0) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/ZoneId;)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::now(Clock arg0) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/Clock;)Ljava/time/LocalDateTime;", arg0)); }
int LocalDateTime::getNano() { return int(*classes[className]->invokeMethod<int>(this->object, "getNano", "()I")); }
LocalDateTime LocalDateTime::ofEpochSecond(long arg0, int arg1, ZoneOffset arg2) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("ofEpochSecond", "(JILjava/time/ZoneOffset;)Ljava/time/LocalDateTime;", arg0, arg1, arg2)); }
LocalDateTime LocalDateTime::readExternal(DataInput arg0) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/LocalDateTime;", arg0)); }
void LocalDateTime::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
Month LocalDateTime::getMonth() { return Month(*classes[className]->invokeMethod<jobject>(this->object, "getMonth", "()Ljava/time/Month;")); }
DayOfWeek LocalDateTime::getDayOfWeek() { return DayOfWeek(*classes[className]->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava/time/DayOfWeek;")); }
LocalDateTime LocalDateTime::plusNanos(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plus(TemporalAmount arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plus(long arg0, TemporalUnit arg1) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDateTime::plusSeconds(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::with(TemporalAdjuster arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::with(LocalDate arg0, LocalTime arg1) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/LocalDate;Ljava/time/LocalTime;)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDateTime::with(TemporalField arg0, long arg1) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalField;J)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDateTime::minus(TemporalAmount arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minus(long arg0, TemporalUnit arg1) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDateTime::truncatedTo(TemporalUnit arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusSeconds(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusNanos(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava/time/LocalDateTime;", arg0)); }
OffsetDateTime LocalDateTime::atOffset(ZoneOffset arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atOffset", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0)); }
ZonedDateTime LocalDateTime::atZone(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atZone", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
int LocalDateTime::getDayOfYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfYear", "()I")); }
LocalDate LocalDateTime::toLocalDate() { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava/time/LocalDate;")); }
LocalDateTime LocalDateTime::withYear(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::withMonth(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::withDayOfMonth(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::withDayOfYear(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::withHour(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::withMinute(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::withSecond(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::withNano(int arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plusYears(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plusMonths(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plusWeeks(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plusDays(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plusHours(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plusMinutes(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusYears(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusMonths(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusWeeks(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusDays(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusHours(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::minusMinutes(long arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDateTime::plusWithOverflow(LocalDate arg0, long arg1, long arg2, long arg3, long arg4, int arg5) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusWithOverflow", "(Ljava/time/LocalDate;JJJJI)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5)); }
int LocalDateTime::compareTo0(LocalDateTime arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareTo0", "(Ljava/time/LocalDateTime;)I", arg0)); }
LocalDateTime LocalDateTime::of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(IIIIIII)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
LocalDateTime LocalDateTime::of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(IIIIII)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5)); }
LocalDateTime LocalDateTime::of(int arg0, int arg1, int arg2, int arg3, int arg4) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(IIIII)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3, arg4)); }
LocalDateTime LocalDateTime::of(int arg0, Month arg1, int arg2, int arg3, int arg4, int arg5, int arg6) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(ILjava/time/Month;IIIII)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
LocalDateTime LocalDateTime::of(LocalDate arg0, LocalTime arg1) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/LocalDate;Ljava/time/LocalTime;)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDateTime::of(int arg0, Month arg1, int arg2, int arg3, int arg4, int arg5) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(ILjava/time/Month;IIII)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5)); }
LocalDateTime LocalDateTime::of(int arg0, Month arg1, int arg2, int arg3, int arg4) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(ILjava/time/Month;III)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3, arg4)); }
LocalDateTime LocalDateTime::from(TemporalAccessor arg0) { return LocalDateTime(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/LocalDateTime;", arg0)); }
void LocalDateTime::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Object LocalDateTime::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

Object DateTimeFormatter::parse(CharSequence arg0, TemporalQuery arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "parse", "(Ljava/lang/CharSequence;Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;", arg0, arg1)); }
TemporalAccessor DateTimeFormatter::parse(CharSequence arg0, ParsePosition arg1) { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "parse", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;", arg0, arg1)); }
TemporalAccessor DateTimeFormatter::parse(CharSequence arg0) { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "parse", "(Ljava/lang/CharSequence;)Ljava/time/temporal/TemporalAccessor;", arg0)); }
ZoneId DateTimeFormatter::getZone() { return ZoneId(*classes[className]->invokeMethod<jobject>(this->object, "getZone", "()Ljava/time/ZoneId;")); }
DateTimeFormatter DateTimeFormatter::withZone(ZoneId arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "withZone", "(Ljava/time/ZoneId;)Ljava/time/format/DateTimeFormatter;", arg0)); }
Locale DateTimeFormatter::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
Chronology DateTimeFormatter::getChronology() { return Chronology(*classes[className]->invokeMethod<jobject>(this->object, "getChronology", "()Ljava/time/chrono/Chronology;")); }
void DateTimeFormatter::formatTo(TemporalAccessor arg0, Appendable arg1) { (classes[className]->invokeMethod<void>(this->object, "formatTo", "(Ljava/time/temporal/TemporalAccessor;Ljava/lang/Appendable;)V", arg0, arg1)); }
TemporalAccessor DateTimeFormatter::parseResolved0(CharSequence arg0, ParsePosition arg1) { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "parseResolved0", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;", arg0, arg1)); }
DateTimeParseException DateTimeFormatter::createError(CharSequence arg0, RuntimeException arg1) { return DateTimeParseException(*classes[className]->invokeMethod<jobject>(this->object, "createError", "(Ljava/lang/CharSequence;Ljava/lang/RuntimeException;)Ljava/time/format/DateTimeParseException;", arg0, arg1)); }
DateTimeParseContext DateTimeFormatter::parseUnresolved0(CharSequence arg0, ParsePosition arg1) { return DateTimeParseContext(*classes[className]->invokeMethod<jobject>(this->object, "parseUnresolved0", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/format/DateTimeParseContext;", arg0, arg1)); }
DateTimeFormatter DateTimeFormatter::ofPattern(String arg0) { return DateTimeFormatter(*classes[className]->invokeStaticMethod<jobject>("ofPattern", "(Ljava/lang/String;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DateTimeFormatter DateTimeFormatter::ofPattern(String arg0, Locale arg1) { return DateTimeFormatter(*classes[className]->invokeStaticMethod<jobject>("ofPattern", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", arg0, arg1)); }
DateTimeFormatter DateTimeFormatter::ofLocalizedDate(FormatStyle arg0) { return DateTimeFormatter(*classes[className]->invokeStaticMethod<jobject>("ofLocalizedDate", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DateTimeFormatter DateTimeFormatter::ofLocalizedTime(FormatStyle arg0) { return DateTimeFormatter(*classes[className]->invokeStaticMethod<jobject>("ofLocalizedTime", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DateTimeFormatter DateTimeFormatter::ofLocalizedDateTime(FormatStyle arg0) { return DateTimeFormatter(*classes[className]->invokeStaticMethod<jobject>("ofLocalizedDateTime", "(Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DateTimeFormatter DateTimeFormatter::ofLocalizedDateTime(FormatStyle arg0, FormatStyle arg1) { return DateTimeFormatter(*classes[className]->invokeStaticMethod<jobject>("ofLocalizedDateTime", "(Ljava/time/format/FormatStyle;Ljava/time/format/FormatStyle;)Ljava/time/format/DateTimeFormatter;", arg0, arg1)); }
TemporalQuery DateTimeFormatter::parsedExcessDays() { return TemporalQuery(*classes[className]->invokeStaticMethod<jobject>("parsedExcessDays", "()Ljava/time/temporal/TemporalQuery;")); }
TemporalQuery DateTimeFormatter::parsedLeapSecond() { return TemporalQuery(*classes[className]->invokeStaticMethod<jobject>("parsedLeapSecond", "()Ljava/time/temporal/TemporalQuery;")); }
DateTimeFormatter DateTimeFormatter::withLocale(Locale arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "withLocale", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DateTimeFormatter DateTimeFormatter::localizedBy(Locale arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "localizedBy", "(Ljava/util/Locale;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DecimalStyle DateTimeFormatter::getDecimalStyle() { return DecimalStyle(*classes[className]->invokeMethod<jobject>(this->object, "getDecimalStyle", "()Ljava/time/format/DecimalStyle;")); }
DateTimeFormatter DateTimeFormatter::withDecimalStyle(DecimalStyle arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "withDecimalStyle", "(Ljava/time/format/DecimalStyle;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DateTimeFormatter DateTimeFormatter::withChronology(Chronology arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "withChronology", "(Ljava/time/chrono/Chronology;)Ljava/time/format/DateTimeFormatter;", arg0)); }
ResolverStyle DateTimeFormatter::getResolverStyle() { return ResolverStyle(*classes[className]->invokeMethod<jobject>(this->object, "getResolverStyle", "()Ljava/time/format/ResolverStyle;")); }
DateTimeFormatter DateTimeFormatter::withResolverStyle(ResolverStyle arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "withResolverStyle", "(Ljava/time/format/ResolverStyle;)Ljava/time/format/DateTimeFormatter;", arg0)); }
Set DateTimeFormatter::getResolverFields() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getResolverFields", "()Ljava/util/Set;")); }
DateTimeFormatter DateTimeFormatter::withResolverFields(TemporalField_interface arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "withResolverFields", "([Ljava/time/temporal/TemporalField;)Ljava/time/format/DateTimeFormatter;", arg0)); }
DateTimeFormatter DateTimeFormatter::withResolverFields(Set arg0) { return DateTimeFormatter(*classes[className]->invokeMethod<jobject>(this->object, "withResolverFields", "(Ljava/util/Set;)Ljava/time/format/DateTimeFormatter;", arg0)); }
TemporalAccessor DateTimeFormatter::parseBest(CharSequence arg0, TemporalQuery_interface arg1) { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "parseBest", "(Ljava/lang/CharSequence;[Ljava/time/temporal/TemporalQuery;)Ljava/time/temporal/TemporalAccessor;", arg0, arg1)); }
TemporalAccessor DateTimeFormatter::parseUnresolved(CharSequence arg0, ParsePosition arg1) { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "parseUnresolved", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Ljava/time/temporal/TemporalAccessor;", arg0, arg1)); }
DateTimeFormatterBuilder_CompositePrinterParser DateTimeFormatter::toPrinterParser(bool arg0) { return DateTimeFormatterBuilder_CompositePrinterParser(*classes[className]->invokeMethod<jobject>(this->object, "toPrinterParser", "(Z)Ljava/time/format/DateTimeFormatterBuilder$CompositePrinterParser;", arg0)); }
Format DateTimeFormatter::toFormat() { return Format(*classes[className]->invokeMethod<jobject>(this->object, "toFormat", "()Ljava/text/Format;")); }
Format DateTimeFormatter::toFormat(TemporalQuery arg0) { return Format(*classes[className]->invokeMethod<jobject>(this->object, "toFormat", "(Ljava/time/temporal/TemporalQuery;)Ljava/text/Format;", arg0)); }
String DateTimeFormatter::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String DateTimeFormatter::format(TemporalAccessor arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/time/temporal/TemporalAccessor;)Ljava/lang/String;", arg0)); }


int ParsePosition::getErrorIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getErrorIndex", "()I")); }
void ParsePosition::setErrorIndex(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setErrorIndex", "(I)V", arg0)); }
void ParsePosition::setIndex(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setIndex", "(I)V", arg0)); }
bool ParsePosition::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ParsePosition::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ParsePosition::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int ParsePosition::getIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getIndex", "()I")); }




int DateTimeParseException::getErrorIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getErrorIndex", "()I")); }
String DateTimeParseException::getParsedString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getParsedString", "()Ljava/lang/String;")); }


bool DateTimeParseContext::isStrict() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStrict", "()Z")); }
Locale DateTimeParseContext::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
TemporalAccessor DateTimeParseContext::toResolved(ResolverStyle arg0, Set arg1) { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "toResolved", "(Ljava/time/format/ResolverStyle;Ljava/util/Set;)Ljava/time/temporal/TemporalAccessor;", arg0, arg1)); }
Parsed DateTimeParseContext::toUnresolved() { return Parsed(*classes[className]->invokeMethod<jobject>(this->object, "toUnresolved", "()Ljava/time/format/Parsed;")); }
DecimalStyle DateTimeParseContext::getDecimalStyle() { return DecimalStyle(*classes[className]->invokeMethod<jobject>(this->object, "getDecimalStyle", "()Ljava/time/format/DecimalStyle;")); }
Parsed DateTimeParseContext::currentParsed() { return Parsed(*classes[className]->invokeMethod<jobject>(this->object, "currentParsed", "()Ljava/time/format/Parsed;")); }
bool DateTimeParseContext::isCaseSensitive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCaseSensitive", "()Z")); }
bool DateTimeParseContext::charEqualsIgnoreCase(char arg0, char arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("charEqualsIgnoreCase", "(CC)Z", arg0, arg1)); }
Chronology DateTimeParseContext::getEffectiveChronology() { return Chronology(*classes[className]->invokeMethod<jobject>(this->object, "getEffectiveChronology", "()Ljava/time/chrono/Chronology;")); }
void DateTimeParseContext::setCaseSensitive(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setCaseSensitive", "(Z)V", arg0)); }
bool DateTimeParseContext::subSequenceEquals(CharSequence arg0, int arg1, CharSequence arg2, int arg3, int arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "subSequenceEquals", "(Ljava/lang/CharSequence;ILjava/lang/CharSequence;II)Z", arg0, arg1, arg2, arg3, arg4)); }
bool DateTimeParseContext::charEquals(char arg0, char arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "charEquals", "(CC)Z", arg0, arg1)); }
void DateTimeParseContext::setStrict(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setStrict", "(Z)V", arg0)); }
void DateTimeParseContext::startOptional() { (classes[className]->invokeMethod<void>(this->object, "startOptional", "()V")); }
void DateTimeParseContext::endOptional(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "endOptional", "(Z)V", arg0)); }
Long DateTimeParseContext::getParsed(TemporalField arg0) { return Long(*classes[className]->invokeMethod<jobject>(this->object, "getParsed", "(Ljava/time/temporal/TemporalField;)Ljava/lang/Long;", arg0)); }
int DateTimeParseContext::setParsedField(TemporalField arg0, long arg1, int arg2, int arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "setParsedField", "(Ljava/time/temporal/TemporalField;JII)I", arg0, arg1, arg2, arg3)); }
void DateTimeParseContext::setParsed(ZoneId arg0) { (classes[className]->invokeMethod<void>(this->object, "setParsed", "(Ljava/time/ZoneId;)V", arg0)); }
void DateTimeParseContext::setParsed(Chronology arg0) { (classes[className]->invokeMethod<void>(this->object, "setParsed", "(Ljava/time/chrono/Chronology;)V", arg0)); }
void DateTimeParseContext::addChronoChangedListener(Consumer arg0) { (classes[className]->invokeMethod<void>(this->object, "addChronoChangedListener", "(Ljava/util/function/Consumer;)V", arg0)); }
void DateTimeParseContext::setParsedLeapSecond() { (classes[className]->invokeMethod<void>(this->object, "setParsedLeapSecond", "()V")); }
void DateTimeParseContext::setParsedDayPeriod(DateTimeFormatterBuilder_DayPeriod arg0) { (classes[className]->invokeMethod<void>(this->object, "setParsedDayPeriod", "(Ljava/time/format/DateTimeFormatterBuilder$DayPeriod;)V", arg0)); }
String DateTimeParseContext::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
DateTimeParseContext DateTimeParseContext::copy() { return DateTimeParseContext(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Ljava/time/format/DateTimeParseContext;")); }

ResolverStyle ResolverStyle::valueOf(String arg0) { return ResolverStyle(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/time/format/ResolverStyle;", arg0)); }

void Parsed::resolveInstant() { (classes[className]->invokeMethod<void>(this->object, "resolveInstant", "()V")); }
void Parsed::resolveFields() { (classes[className]->invokeMethod<void>(this->object, "resolveFields", "()V")); }
void Parsed::resolveTimeLenient() { (classes[className]->invokeMethod<void>(this->object, "resolveTimeLenient", "()V")); }
void Parsed::crossCheck(TemporalAccessor arg0) { (classes[className]->invokeMethod<void>(this->object, "crossCheck", "(Ljava/time/temporal/TemporalAccessor;)V", arg0)); }
void Parsed::crossCheck() { (classes[className]->invokeMethod<void>(this->object, "crossCheck", "()V")); }
void Parsed::resolvePeriod() { (classes[className]->invokeMethod<void>(this->object, "resolvePeriod", "()V")); }
void Parsed::resolveFractional() { (classes[className]->invokeMethod<void>(this->object, "resolveFractional", "()V")); }
void Parsed::resolveInstantFields() { (classes[className]->invokeMethod<void>(this->object, "resolveInstantFields", "()V")); }
void Parsed::resolveDateFields() { (classes[className]->invokeMethod<void>(this->object, "resolveDateFields", "()V")); }
void Parsed::resolveTimeFields() { (classes[className]->invokeMethod<void>(this->object, "resolveTimeFields", "()V")); }
void Parsed::updateCheckConflict(ChronoLocalDate arg0) { (classes[className]->invokeMethod<void>(this->object, "updateCheckConflict", "(Ljava/time/chrono/ChronoLocalDate;)V", arg0)); }
void Parsed::updateCheckConflict(LocalTime arg0, Period arg1) { (classes[className]->invokeMethod<void>(this->object, "updateCheckConflict", "(Ljava/time/LocalTime;Ljava/time/Period;)V", arg0, arg1)); }
void Parsed::updateCheckConflict(TemporalField arg0, TemporalField arg1, Long arg2) { (classes[className]->invokeMethod<void>(this->object, "updateCheckConflict", "(Ljava/time/temporal/TemporalField;Ljava/time/temporal/TemporalField;Ljava/lang/Long;)V", arg0, arg1, arg2)); }
void Parsed::resolveInstantFields0(ZoneId arg0) { (classes[className]->invokeMethod<void>(this->object, "resolveInstantFields0", "(Ljava/time/ZoneId;)V", arg0)); }
void Parsed::resolveTime(long arg0, long arg1, long arg2, long arg3) { (classes[className]->invokeMethod<void>(this->object, "resolveTime", "(JJJJ)V", arg0, arg1, arg2, arg3)); }
String Parsed::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
TemporalAccessor Parsed::resolve(ResolverStyle arg0, Set arg1) { return TemporalAccessor(*classes[className]->invokeMethod<jobject>(this->object, "resolve", "(Ljava/time/format/ResolverStyle;Ljava/util/Set;)Ljava/time/temporal/TemporalAccessor;", arg0, arg1)); }
Parsed Parsed::copy() { return Parsed(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Ljava/time/format/Parsed;")); }


LocalTime LocalTime::parse(CharSequence arg0) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::parse(CharSequence arg0, DateTimeFormatter arg1) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/LocalTime;", arg0, arg1)); }
long LocalTime::toEpochSecond(LocalDate arg0, ZoneOffset arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "toEpochSecond", "(Ljava/time/LocalDate;Ljava/time/ZoneOffset;)J", arg0, arg1)); }
int LocalTime::getHour() { return int(*classes[className]->invokeMethod<int>(this->object, "getHour", "()I")); }
int LocalTime::getMinute() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinute", "()I")); }
int LocalTime::getSecond() { return int(*classes[className]->invokeMethod<int>(this->object, "getSecond", "()I")); }
LocalTime LocalTime::ofInstant(Instant arg0, ZoneId arg1) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("ofInstant", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalTime;", arg0, arg1)); }
LocalTime LocalTime::now(Clock arg0) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/Clock;)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::now(ZoneId arg0) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/ZoneId;)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::now() { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("now", "()Ljava/time/LocalTime;")); }
int LocalTime::getNano() { return int(*classes[className]->invokeMethod<int>(this->object, "getNano", "()I")); }
LocalTime LocalTime::readExternal(DataInput arg0) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/LocalTime;", arg0)); }
void LocalTime::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
LocalTime LocalTime::plusNanos(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::plus(long arg0, TemporalUnit arg1) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;", arg0, arg1)); }
LocalTime LocalTime::plus(TemporalAmount arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::plusSeconds(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::with(TemporalAdjuster arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::with(TemporalField arg0, long arg1) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalField;J)Ljava/time/LocalTime;", arg0, arg1)); }
LocalTime LocalTime::minus(long arg0, TemporalUnit arg1) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;", arg0, arg1)); }
LocalTime LocalTime::minus(TemporalAmount arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::truncatedTo(TemporalUnit arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::minusSeconds(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::minusNanos(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava/time/LocalTime;", arg0)); }
OffsetTime LocalTime::atOffset(ZoneOffset arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "atOffset", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetTime;", arg0)); }
bool LocalTime::isAfter(LocalTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAfter", "(Ljava/time/LocalTime;)Z", arg0)); }
bool LocalTime::isBefore(LocalTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBefore", "(Ljava/time/LocalTime;)Z", arg0)); }
LocalTime LocalTime::withHour(int arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::withMinute(int arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::withSecond(int arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::withNano(int arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::plusHours(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::plusMinutes(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava/time/LocalTime;", arg0)); }
long LocalTime::toNanoOfDay() { return long(*classes[className]->invokeMethod<long>(this->object, "toNanoOfDay", "()J")); }
LocalTime LocalTime::minusHours(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava/time/LocalTime;", arg0)); }
LocalTime LocalTime::minusMinutes(long arg0) { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava/time/LocalTime;", arg0)); }
int LocalTime::toSecondOfDay() { return int(*classes[className]->invokeMethod<int>(this->object, "toSecondOfDay", "()I")); }
LocalTime LocalTime::ofNanoOfDay(long arg0) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("ofNanoOfDay", "(J)Ljava/time/LocalTime;", arg0)); }
int LocalTime::get0(TemporalField arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "get0", "(Ljava/time/temporal/TemporalField;)I", arg0)); }
LocalTime LocalTime::ofSecondOfDay(long arg0) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("ofSecondOfDay", "(J)Ljava/time/LocalTime;", arg0)); }
LocalDateTime LocalTime::atDate(LocalDate arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atDate", "(Ljava/time/LocalDate;)Ljava/time/LocalDateTime;", arg0)); }
bool LocalTime::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String LocalTime::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int LocalTime::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String LocalTime::format(DateTimeFormatter arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;", arg0)); }
LocalTime LocalTime::of(int arg0, int arg1, int arg2) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("of", "(III)Ljava/time/LocalTime;", arg0, arg1, arg2)); }
LocalTime LocalTime::of(int arg0, int arg1) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("of", "(II)Ljava/time/LocalTime;", arg0, arg1)); }
LocalTime LocalTime::of(int arg0, int arg1, int arg2, int arg3) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("of", "(IIII)Ljava/time/LocalTime;", arg0, arg1, arg2, arg3)); }
LocalTime LocalTime::from(TemporalAccessor arg0) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/LocalTime;", arg0)); }
void LocalTime::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
LocalTime LocalTime::create(int arg0, int arg1, int arg2, int arg3) { return LocalTime(*classes[className]->invokeStaticMethod<jobject>("create", "(IIII)Ljava/time/LocalTime;", arg0, arg1, arg2, arg3)); }
Object LocalTime::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

LocalDate LocalDate::parse(CharSequence arg0, DateTimeFormatter arg1) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/LocalDate;", arg0, arg1)); }
LocalDate LocalDate::parse(CharSequence arg0) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/LocalDate;", arg0)); }
long LocalDate::toEpochSecond(LocalTime arg0, ZoneOffset arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "toEpochSecond", "(Ljava/time/LocalTime;Ljava/time/ZoneOffset;)J", arg0, arg1)); }
int LocalDate::getYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getYear", "()I")); }
int LocalDate::getMonthValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getMonthValue", "()I")); }
int LocalDate::getDayOfMonth() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfMonth", "()I")); }
LocalDate LocalDate::ofInstant(Instant arg0, ZoneId arg1) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("ofInstant", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDate;", arg0, arg1)); }
LocalDate LocalDate::now() { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("now", "()Ljava/time/LocalDate;")); }
LocalDate LocalDate::now(ZoneId arg0) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/ZoneId;)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::now(Clock arg0) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/Clock;)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::readExternal(DataInput arg0) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/LocalDate;", arg0)); }
void LocalDate::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
Month LocalDate::getMonth() { return Month(*classes[className]->invokeMethod<jobject>(this->object, "getMonth", "()Ljava/time/Month;")); }
DayOfWeek LocalDate::getDayOfWeek() { return DayOfWeek(*classes[className]->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava/time/DayOfWeek;")); }
IsoEra LocalDate::getEra() { return IsoEra(*classes[className]->invokeMethod<jobject>(this->object, "getEra", "()Ljava/time/chrono/IsoEra;")); }
LocalDate LocalDate::plus(long arg0, TemporalUnit arg1) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalDate;", arg0, arg1)); }
LocalDate LocalDate::plus(TemporalAmount arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::with(TemporalField arg0, long arg1) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalField;J)Ljava/time/LocalDate;", arg0, arg1)); }
LocalDate LocalDate::with(TemporalAdjuster arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::minus(TemporalAmount arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::minus(long arg0, TemporalUnit arg1) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/LocalDate;", arg0, arg1)); }
Period LocalDate::until(ChronoLocalDate arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "until", "(Ljava/time/chrono/ChronoLocalDate;)Ljava/time/Period;", arg0)); }
int LocalDate::getDayOfYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfYear", "()I")); }
LocalDate LocalDate::withYear(int arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::withMonth(int arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::withDayOfMonth(int arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::withDayOfYear(int arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::plusYears(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::plusMonths(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::plusWeeks(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::plusDays(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::minusYears(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::minusMonths(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::minusWeeks(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate LocalDate::minusDays(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava/time/LocalDate;", arg0)); }
IsoChronology LocalDate::getChronology() { return IsoChronology(*classes[className]->invokeMethod<jobject>(this->object, "getChronology", "()Ljava/time/chrono/IsoChronology;")); }
LocalDate LocalDate::ofEpochDay(long arg0) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("ofEpochDay", "(J)Ljava/time/LocalDate;", arg0)); }
long LocalDate::daysUntil(LocalDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "daysUntil", "(Ljava/time/LocalDate;)J", arg0)); }
int LocalDate::compareTo0(LocalDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "compareTo0", "(Ljava/time/LocalDate;)I", arg0)); }
int LocalDate::get0(TemporalField arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "get0", "(Ljava/time/temporal/TemporalField;)I", arg0)); }
long LocalDate::getProlepticMonth() { return long(*classes[className]->invokeMethod<long>(this->object, "getProlepticMonth", "()J")); }
LocalDate LocalDate::resolvePreviousValid(int arg0, int arg1, int arg2) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("resolvePreviousValid", "(III)Ljava/time/LocalDate;", arg0, arg1, arg2)); }
LocalDate LocalDate::ofYearDay(int arg0, int arg1) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("ofYearDay", "(II)Ljava/time/LocalDate;", arg0, arg1)); }
long LocalDate::monthsUntil(LocalDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "monthsUntil", "(Ljava/time/LocalDate;)J", arg0)); }
LocalDateTime LocalDate::atTime(int arg0, int arg1) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atTime", "(II)Ljava/time/LocalDateTime;", arg0, arg1)); }
LocalDateTime LocalDate::atTime(LocalTime arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atTime", "(Ljava/time/LocalTime;)Ljava/time/LocalDateTime;", arg0)); }
LocalDateTime LocalDate::atTime(int arg0, int arg1, int arg2) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atTime", "(III)Ljava/time/LocalDateTime;", arg0, arg1, arg2)); }
LocalDateTime LocalDate::atTime(int arg0, int arg1, int arg2, int arg3) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atTime", "(IIII)Ljava/time/LocalDateTime;", arg0, arg1, arg2, arg3)); }
OffsetDateTime LocalDate::atTime(OffsetTime arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atTime", "(Ljava/time/OffsetTime;)Ljava/time/OffsetDateTime;", arg0)); }
Stream LocalDate::datesUntil(LocalDate arg0, Period arg1) { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "datesUntil", "(Ljava/time/LocalDate;Ljava/time/Period;)Ljava/util/stream/Stream;", arg0, arg1)); }
Stream LocalDate::datesUntil(LocalDate arg0) { return Stream(*classes[className]->invokeMethod<jobject>(this->object, "datesUntil", "(Ljava/time/LocalDate;)Ljava/util/stream/Stream;", arg0)); }
ZonedDateTime LocalDate::atStartOfDay(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atStartOfDay", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
LocalDateTime LocalDate::atStartOfDay() { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atStartOfDay", "()Ljava/time/LocalDateTime;")); }
LocalDate LocalDate::of(int arg0, Month arg1, int arg2) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("of", "(ILjava/time/Month;I)Ljava/time/LocalDate;", arg0, arg1, arg2)); }
LocalDate LocalDate::of(int arg0, int arg1, int arg2) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("of", "(III)Ljava/time/LocalDate;", arg0, arg1, arg2)); }
LocalDate LocalDate::from(TemporalAccessor arg0) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/LocalDate;", arg0)); }
void LocalDate::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
LocalDate LocalDate::create(int arg0, int arg1, int arg2) { return LocalDate(*classes[className]->invokeStaticMethod<jobject>("create", "(III)Ljava/time/LocalDate;", arg0, arg1, arg2)); }
Object LocalDate::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

ZoneRules ZoneOffset::getRules() { return ZoneRules(*classes[className]->invokeMethod<jobject>(this->object, "getRules", "()Ljava/time/zone/ZoneRules;")); }
ZoneOffset ZoneOffset::readExternal(DataInput arg0) { return ZoneOffset(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/ZoneOffset;", arg0)); }
void ZoneOffset::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
int ZoneOffset::parseNumber(CharSequence arg0, int arg1, bool arg2) { return int(*classes[className]->invokeStaticMethod<int>("parseNumber", "(Ljava/lang/CharSequence;IZ)I", arg0, arg1, arg2)); }
ZoneOffset ZoneOffset::ofHoursMinutesSeconds(int arg0, int arg1, int arg2) { return ZoneOffset(*classes[className]->invokeStaticMethod<jobject>("ofHoursMinutesSeconds", "(III)Ljava/time/ZoneOffset;", arg0, arg1, arg2)); }
int ZoneOffset::totalSeconds(int arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("totalSeconds", "(III)I", arg0, arg1, arg2)); }
ZoneOffset ZoneOffset::ofTotalSeconds(int arg0) { return ZoneOffset(*classes[className]->invokeStaticMethod<jobject>("ofTotalSeconds", "(I)Ljava/time/ZoneOffset;", arg0)); }
String ZoneOffset::buildId(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("buildId", "(I)Ljava/lang/String;", arg0)); }
ZoneOffset ZoneOffset::ofHours(int arg0) { return ZoneOffset(*classes[className]->invokeStaticMethod<jobject>("ofHours", "(I)Ljava/time/ZoneOffset;", arg0)); }
ZoneOffset ZoneOffset::ofHoursMinutes(int arg0, int arg1) { return ZoneOffset(*classes[className]->invokeStaticMethod<jobject>("ofHoursMinutes", "(II)Ljava/time/ZoneOffset;", arg0, arg1)); }
int ZoneOffset::getTotalSeconds() { return int(*classes[className]->invokeMethod<int>(this->object, "getTotalSeconds", "()I")); }
bool ZoneOffset::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ZoneOffset::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ZoneOffset::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
ZoneOffset ZoneOffset::of(String arg0) { return ZoneOffset(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/String;)Ljava/time/ZoneOffset;", arg0)); }
ZoneOffset ZoneOffset::from(TemporalAccessor arg0) { return ZoneOffset(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/ZoneOffset;", arg0)); }
void ZoneOffset::validate(int arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("validate", "(III)V", arg0, arg1, arg2)); }
void ZoneOffset::write(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/io/DataOutput;)V", arg0)); }
void ZoneOffset::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
String ZoneOffset::getId() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getId", "()Ljava/lang/String;")); }
Object ZoneOffset::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

String Month::getDisplayName(TextStyle arg0, Locale arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava/time/format/TextStyle;Ljava/util/Locale;)Ljava/lang/String;", arg0, arg1)); }
int Month::minLength() { return int(*classes[className]->invokeMethod<int>(this->object, "minLength", "()I")); }
int Month::maxLength() { return int(*classes[className]->invokeMethod<int>(this->object, "maxLength", "()I")); }
Month Month::plus(long arg0) { return Month(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(J)Ljava/time/Month;", arg0)); }
Month Month::minus(long arg0) { return Month(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(J)Ljava/time/Month;", arg0)); }
int Month::firstDayOfYear(bool arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "firstDayOfYear", "(Z)I", arg0)); }
Month Month::firstMonthOfQuarter() { return Month(*classes[className]->invokeMethod<jobject>(this->object, "firstMonthOfQuarter", "()Ljava/time/Month;")); }
int Month::length(bool arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "length", "(Z)I", arg0)); }
Month Month::valueOf(String arg0) { return Month(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/time/Month;", arg0)); }
int Month::getValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getValue", "()I")); }
Month Month::of(int arg0) { return Month(*classes[className]->invokeStaticMethod<jobject>("of", "(I)Ljava/time/Month;", arg0)); }
Month Month::from(TemporalAccessor arg0) { return Month(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/Month;", arg0)); }

String DayOfWeek::getDisplayName(TextStyle arg0, Locale arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava/time/format/TextStyle;Ljava/util/Locale;)Ljava/lang/String;", arg0, arg1)); }
DayOfWeek DayOfWeek::plus(long arg0) { return DayOfWeek(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(J)Ljava/time/DayOfWeek;", arg0)); }
DayOfWeek DayOfWeek::minus(long arg0) { return DayOfWeek(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(J)Ljava/time/DayOfWeek;", arg0)); }
DayOfWeek DayOfWeek::valueOf(String arg0) { return DayOfWeek(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/time/DayOfWeek;", arg0)); }
int DayOfWeek::getValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getValue", "()I")); }
DayOfWeek DayOfWeek::of(int arg0) { return DayOfWeek(*classes[className]->invokeStaticMethod<jobject>("of", "(I)Ljava/time/DayOfWeek;", arg0)); }
DayOfWeek DayOfWeek::from(TemporalAccessor arg0) { return DayOfWeek(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/DayOfWeek;", arg0)); }

IsoEra IsoEra::valueOf(String arg0) { return IsoEra(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/time/chrono/IsoEra;", arg0)); }
IsoEra IsoEra::of(int arg0) { return IsoEra(*classes[className]->invokeStaticMethod<jobject>("of", "(I)Ljava/time/chrono/IsoEra;", arg0)); }



Period Period::normalized() { return Period(*classes[className]->invokeMethod<jobject>(this->object, "normalized", "()Ljava/time/Period;")); }
Period Period::parse(CharSequence arg0) { return Period(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/Period;", arg0)); }
Period Period::readExternal(DataInput arg0) { return Period(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/Period;", arg0)); }
void Period::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
int Period::getMonths() { return int(*classes[className]->invokeMethod<int>(this->object, "getMonths", "()I")); }
Period Period::plus(TemporalAmount arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Period;", arg0)); }
Period Period::minus(TemporalAmount arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Period;", arg0)); }
int Period::parseNumber(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("parseNumber", "(Ljava/lang/CharSequence;III)I", arg0, arg1, arg2, arg3)); }
Period Period::plusYears(long arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava/time/Period;", arg0)); }
Period Period::plusMonths(long arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava/time/Period;", arg0)); }
Period Period::plusDays(long arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava/time/Period;", arg0)); }
Period Period::minusYears(long arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava/time/Period;", arg0)); }
Period Period::minusMonths(long arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava/time/Period;", arg0)); }
Period Period::minusDays(long arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava/time/Period;", arg0)); }
IsoChronology Period::getChronology() { return IsoChronology(*classes[className]->invokeMethod<jobject>(this->object, "getChronology", "()Ljava/time/chrono/IsoChronology;")); }
bool Period::charMatch(CharSequence arg0, int arg1, int arg2, char arg3) { return bool(*classes[className]->invokeStaticMethod<bool>("charMatch", "(Ljava/lang/CharSequence;IIC)Z", arg0, arg1, arg2, arg3)); }
Period Period::negated() { return Period(*classes[className]->invokeMethod<jobject>(this->object, "negated", "()Ljava/time/Period;")); }
Period Period::multipliedBy(int arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "multipliedBy", "(I)Ljava/time/Period;", arg0)); }
Period Period::ofDays(int arg0) { return Period(*classes[className]->invokeStaticMethod<jobject>("ofDays", "(I)Ljava/time/Period;", arg0)); }
long Period::toTotalMonths() { return long(*classes[className]->invokeMethod<long>(this->object, "toTotalMonths", "()J")); }
int Period::getDays() { return int(*classes[className]->invokeMethod<int>(this->object, "getDays", "()I")); }
int Period::getYears() { return int(*classes[className]->invokeMethod<int>(this->object, "getYears", "()I")); }
void Period::validateChrono(TemporalAccessor arg0) { (classes[className]->invokeMethod<void>(this->object, "validateChrono", "(Ljava/time/temporal/TemporalAccessor;)V", arg0)); }
Period Period::ofYears(int arg0) { return Period(*classes[className]->invokeStaticMethod<jobject>("ofYears", "(I)Ljava/time/Period;", arg0)); }
Period Period::ofMonths(int arg0) { return Period(*classes[className]->invokeStaticMethod<jobject>("ofMonths", "(I)Ljava/time/Period;", arg0)); }
Period Period::ofWeeks(int arg0) { return Period(*classes[className]->invokeStaticMethod<jobject>("ofWeeks", "(I)Ljava/time/Period;", arg0)); }
Period Period::withYears(int arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "withYears", "(I)Ljava/time/Period;", arg0)); }
Period Period::withMonths(int arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "withMonths", "(I)Ljava/time/Period;", arg0)); }
Period Period::withDays(int arg0) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "withDays", "(I)Ljava/time/Period;", arg0)); }
Period Period::between(LocalDate arg0, LocalDate arg1) { return Period(*classes[className]->invokeStaticMethod<jobject>("between", "(Ljava/time/LocalDate;Ljava/time/LocalDate;)Ljava/time/Period;", arg0, arg1)); }
Period Period::of(int arg0, int arg1, int arg2) { return Period(*classes[className]->invokeStaticMethod<jobject>("of", "(III)Ljava/time/Period;", arg0, arg1, arg2)); }
Period Period::from(TemporalAmount arg0) { return Period(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/Period;", arg0)); }
void Period::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Period Period::create(int arg0, int arg1, int arg2) { return Period(*classes[className]->invokeStaticMethod<jobject>("create", "(III)Ljava/time/Period;", arg0, arg1, arg2)); }
Object Period::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

LocalDate IsoChronology::date(Era arg0, int arg1, int arg2, int arg3) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "date", "(Ljava/time/chrono/Era;III)Ljava/time/LocalDate;", arg0, arg1, arg2, arg3)); }
LocalDate IsoChronology::date(int arg0, int arg1, int arg2) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "date", "(III)Ljava/time/LocalDate;", arg0, arg1, arg2)); }
LocalDate IsoChronology::date(TemporalAccessor arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "date", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/LocalDate;", arg0)); }
LocalDateTime IsoChronology::localDateTime(TemporalAccessor arg0) { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "localDateTime", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/LocalDateTime;", arg0)); }
ZonedDateTime IsoChronology::zonedDateTime(TemporalAccessor arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime IsoChronology::zonedDateTime(Instant arg0, ZoneId arg1) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1)); }
IsoEra IsoChronology::eraOf(int arg0) { return IsoEra(*classes[className]->invokeMethod<jobject>(this->object, "eraOf", "(I)Ljava/time/chrono/IsoEra;", arg0)); }
LocalDate IsoChronology::dateYearDay(Era arg0, int arg1, int arg2) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "dateYearDay", "(Ljava/time/chrono/Era;II)Ljava/time/LocalDate;", arg0, arg1, arg2)); }
LocalDate IsoChronology::dateYearDay(int arg0, int arg1) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "dateYearDay", "(II)Ljava/time/LocalDate;", arg0, arg1)); }
LocalDate IsoChronology::dateNow(Clock arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "dateNow", "(Ljava/time/Clock;)Ljava/time/LocalDate;", arg0)); }
LocalDate IsoChronology::dateNow() { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "dateNow", "()Ljava/time/LocalDate;")); }
LocalDate IsoChronology::dateNow(ZoneId arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "dateNow", "(Ljava/time/ZoneId;)Ljava/time/LocalDate;", arg0)); }
LocalDate IsoChronology::dateEpochDay(long arg0) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "dateEpochDay", "(J)Ljava/time/LocalDate;", arg0)); }
LocalDate IsoChronology::resolveDate(Map arg0, ResolverStyle arg1) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveDate", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/LocalDate;", arg0, arg1)); }
Period IsoChronology::period(int arg0, int arg1, int arg2) { return Period(*classes[className]->invokeMethod<jobject>(this->object, "period", "(III)Ljava/time/Period;", arg0, arg1, arg2)); }
int IsoChronology::numberOfDaysOfMonth(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "numberOfDaysOfMonth", "(II)I", arg0, arg1)); }
LocalDate IsoChronology::resolveYMD(Map arg0, ResolverStyle arg1) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYMD", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/LocalDate;", arg0, arg1)); }
LocalDate IsoChronology::resolveYearOfEra(Map arg0, ResolverStyle arg1) { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYearOfEra", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/LocalDate;", arg0, arg1)); }
void IsoChronology::resolveProlepticMonth(Map arg0, ResolverStyle arg1) { (classes[className]->invokeMethod<void>(this->object, "resolveProlepticMonth", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)V", arg0, arg1)); }
void IsoChronology::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Object IsoChronology::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }


ZonedDateTime ZonedDateTime::parse(CharSequence arg0) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::parse(CharSequence arg0, DateTimeFormatter arg1) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/ZonedDateTime;", arg0, arg1)); }
int ZonedDateTime::getYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getYear", "()I")); }
int ZonedDateTime::getMonthValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getMonthValue", "()I")); }
int ZonedDateTime::getDayOfMonth() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfMonth", "()I")); }
int ZonedDateTime::getHour() { return int(*classes[className]->invokeMethod<int>(this->object, "getHour", "()I")); }
int ZonedDateTime::getMinute() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinute", "()I")); }
int ZonedDateTime::getSecond() { return int(*classes[className]->invokeMethod<int>(this->object, "getSecond", "()I")); }
ZonedDateTime ZonedDateTime::ofInstant(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("ofInstant", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1, arg2)); }
ZonedDateTime ZonedDateTime::ofInstant(Instant arg0, ZoneId arg1) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("ofInstant", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1)); }
ZonedDateTime ZonedDateTime::now() { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "()Ljava/time/ZonedDateTime;")); }
ZonedDateTime ZonedDateTime::now(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::now(Clock arg0) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/Clock;)Ljava/time/ZonedDateTime;", arg0)); }
int ZonedDateTime::getNano() { return int(*classes[className]->invokeMethod<int>(this->object, "getNano", "()I")); }
ZonedDateTime ZonedDateTime::readExternal(ObjectInput arg0) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/ObjectInput;)Ljava/time/ZonedDateTime;", arg0)); }
void ZonedDateTime::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
Month ZonedDateTime::getMonth() { return Month(*classes[className]->invokeMethod<jobject>(this->object, "getMonth", "()Ljava/time/Month;")); }
DayOfWeek ZonedDateTime::getDayOfWeek() { return DayOfWeek(*classes[className]->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava/time/DayOfWeek;")); }
ZonedDateTime ZonedDateTime::plusNanos(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plus(TemporalAmount arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plus(long arg0, TemporalUnit arg1) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/ZonedDateTime;", arg0, arg1)); }
ZonedDateTime ZonedDateTime::plusSeconds(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::with(TemporalField arg0, long arg1) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalField;J)Ljava/time/ZonedDateTime;", arg0, arg1)); }
ZonedDateTime ZonedDateTime::with(TemporalAdjuster arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minus(long arg0, TemporalUnit arg1) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/ZonedDateTime;", arg0, arg1)); }
ZonedDateTime ZonedDateTime::minus(TemporalAmount arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::truncatedTo(TemporalUnit arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minusSeconds(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minusNanos(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava/time/ZonedDateTime;", arg0)); }
int ZonedDateTime::getDayOfYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfYear", "()I")); }
LocalDateTime ZonedDateTime::toLocalDateTime() { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "toLocalDateTime", "()Ljava/time/LocalDateTime;")); }
LocalDate ZonedDateTime::toLocalDate() { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava/time/LocalDate;")); }
ZonedDateTime ZonedDateTime::withYear(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withMonth(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withDayOfMonth(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withDayOfYear(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withHour(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withMinute(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withSecond(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withNano(int arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plusYears(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plusMonths(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plusWeeks(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plusDays(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plusHours(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::plusMinutes(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::ofLocal(LocalDateTime arg0, ZoneId arg1, ZoneOffset arg2) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("ofLocal", "(Ljava/time/LocalDateTime;Ljava/time/ZoneId;Ljava/time/ZoneOffset;)Ljava/time/ZonedDateTime;", arg0, arg1, arg2)); }
ZonedDateTime ZonedDateTime::minusYears(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minusMonths(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minusWeeks(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minusDays(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minusHours(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::minusMinutes(long arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::resolveLocal(LocalDateTime arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "resolveLocal", "(Ljava/time/LocalDateTime;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::resolveOffset(ZoneOffset arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "resolveOffset", "(Ljava/time/ZoneOffset;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::resolveInstant(LocalDateTime arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "resolveInstant", "(Ljava/time/LocalDateTime;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withZoneSameInstant(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withZoneSameInstant", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
OffsetDateTime ZonedDateTime::toOffsetDateTime() { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "toOffsetDateTime", "()Ljava/time/OffsetDateTime;")); }
ZonedDateTime ZonedDateTime::ofLenient(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("ofLenient", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1, arg2)); }
ZonedDateTime ZonedDateTime::withZoneSameLocal(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withZoneSameLocal", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime ZonedDateTime::withLaterOffsetAtOverlap() { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withLaterOffsetAtOverlap", "()Ljava/time/ZonedDateTime;")); }
ZonedDateTime ZonedDateTime::withEarlierOffsetAtOverlap() { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withEarlierOffsetAtOverlap", "()Ljava/time/ZonedDateTime;")); }
ZonedDateTime ZonedDateTime::ofStrict(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("ofStrict", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1, arg2)); }
ZonedDateTime ZonedDateTime::withFixedOffsetZone() { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withFixedOffsetZone", "()Ljava/time/ZonedDateTime;")); }
ZonedDateTime ZonedDateTime::of(LocalDateTime arg0, ZoneId arg1) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/LocalDateTime;Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1)); }
ZonedDateTime ZonedDateTime::of(LocalDate arg0, LocalTime arg1, ZoneId arg2) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/LocalDate;Ljava/time/LocalTime;Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1, arg2)); }
ZonedDateTime ZonedDateTime::of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, ZoneId arg7) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(IIIIIIILjava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
ZonedDateTime ZonedDateTime::from(TemporalAccessor arg0) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/ZonedDateTime;", arg0)); }
void ZonedDateTime::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
ZonedDateTime ZonedDateTime::create(long arg0, int arg1, ZoneId arg2) { return ZonedDateTime(*classes[className]->invokeStaticMethod<jobject>("create", "(JILjava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0, arg1, arg2)); }
Object ZonedDateTime::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }


OffsetDateTime OffsetDateTime::parse(CharSequence arg0) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::parse(CharSequence arg0, DateTimeFormatter arg1) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/OffsetDateTime;", arg0, arg1)); }
long OffsetDateTime::toEpochSecond() { return long(*classes[className]->invokeMethod<long>(this->object, "toEpochSecond", "()J")); }
int OffsetDateTime::getYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getYear", "()I")); }
int OffsetDateTime::getMonthValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getMonthValue", "()I")); }
int OffsetDateTime::getDayOfMonth() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfMonth", "()I")); }
int OffsetDateTime::getHour() { return int(*classes[className]->invokeMethod<int>(this->object, "getHour", "()I")); }
int OffsetDateTime::getMinute() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinute", "()I")); }
int OffsetDateTime::getSecond() { return int(*classes[className]->invokeMethod<int>(this->object, "getSecond", "()I")); }
OffsetDateTime OffsetDateTime::ofInstant(Instant arg0, ZoneId arg1) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("ofInstant", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/OffsetDateTime;", arg0, arg1)); }
bool OffsetDateTime::isEqual(OffsetDateTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEqual", "(Ljava/time/OffsetDateTime;)Z", arg0)); }
OffsetDateTime OffsetDateTime::now() { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "()Ljava/time/OffsetDateTime;")); }
OffsetDateTime OffsetDateTime::now(Clock arg0) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/Clock;)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::now(ZoneId arg0) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/ZoneId;)Ljava/time/OffsetDateTime;", arg0)); }
int OffsetDateTime::getNano() { return int(*classes[className]->invokeMethod<int>(this->object, "getNano", "()I")); }
Instant OffsetDateTime::toInstant() { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "toInstant", "()Ljava/time/Instant;")); }
OffsetDateTime OffsetDateTime::readExternal(ObjectInput arg0) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/ObjectInput;)Ljava/time/OffsetDateTime;", arg0)); }
void OffsetDateTime::writeExternal(ObjectOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/ObjectOutput;)V", arg0)); }
Month OffsetDateTime::getMonth() { return Month(*classes[className]->invokeMethod<jobject>(this->object, "getMonth", "()Ljava/time/Month;")); }
DayOfWeek OffsetDateTime::getDayOfWeek() { return DayOfWeek(*classes[className]->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava/time/DayOfWeek;")); }
OffsetDateTime OffsetDateTime::plusNanos(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plus(long arg0, TemporalUnit arg1) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/OffsetDateTime;", arg0, arg1)); }
OffsetDateTime OffsetDateTime::plus(TemporalAmount arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plusSeconds(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::with(TemporalField arg0, long arg1) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalField;J)Ljava/time/OffsetDateTime;", arg0, arg1)); }
OffsetDateTime OffsetDateTime::with(LocalDateTime arg0, ZoneOffset arg1) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0, arg1)); }
OffsetDateTime OffsetDateTime::with(TemporalAdjuster arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minus(long arg0, TemporalUnit arg1) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/OffsetDateTime;", arg0, arg1)); }
OffsetDateTime OffsetDateTime::minus(TemporalAmount arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::truncatedTo(TemporalUnit arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusSeconds(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusNanos(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava/time/OffsetDateTime;", arg0)); }
bool OffsetDateTime::isAfter(OffsetDateTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAfter", "(Ljava/time/OffsetDateTime;)Z", arg0)); }
bool OffsetDateTime::isBefore(OffsetDateTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBefore", "(Ljava/time/OffsetDateTime;)Z", arg0)); }
int OffsetDateTime::getDayOfYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfYear", "()I")); }
LocalDateTime OffsetDateTime::toLocalDateTime() { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "toLocalDateTime", "()Ljava/time/LocalDateTime;")); }
LocalTime OffsetDateTime::toLocalTime() { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava/time/LocalTime;")); }
LocalDate OffsetDateTime::toLocalDate() { return LocalDate(*classes[className]->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava/time/LocalDate;")); }
OffsetDateTime OffsetDateTime::withYear(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withMonth(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withDayOfMonth(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withDayOfYear(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withHour(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withMinute(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withSecond(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withNano(int arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plusYears(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plusMonths(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plusWeeks(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plusDays(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plusHours(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::plusMinutes(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::withOffsetSameInstant(ZoneOffset arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withOffsetSameInstant", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0)); }
int OffsetDateTime::compareInstant(OffsetDateTime arg0, OffsetDateTime arg1) { return int(*classes[className]->invokeStaticMethod<int>("compareInstant", "(Ljava/time/OffsetDateTime;Ljava/time/OffsetDateTime;)I", arg0, arg1)); }
Comparator OffsetDateTime::timeLineOrder() { return Comparator(*classes[className]->invokeStaticMethod<jobject>("timeLineOrder", "()Ljava/util/Comparator;")); }
OffsetDateTime OffsetDateTime::withOffsetSameLocal(ZoneOffset arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "withOffsetSameLocal", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusYears(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusMonths(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusWeeks(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusDays(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusHours(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava/time/OffsetDateTime;", arg0)); }
OffsetDateTime OffsetDateTime::minusMinutes(long arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava/time/OffsetDateTime;", arg0)); }
ZonedDateTime OffsetDateTime::atZoneSameInstant(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atZoneSameInstant", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
ZonedDateTime OffsetDateTime::atZoneSimilarLocal(ZoneId arg0) { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atZoneSimilarLocal", "(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;", arg0)); }
OffsetTime OffsetDateTime::toOffsetTime() { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "toOffsetTime", "()Ljava/time/OffsetTime;")); }
ZonedDateTime OffsetDateTime::toZonedDateTime() { return ZonedDateTime(*classes[className]->invokeMethod<jobject>(this->object, "toZonedDateTime", "()Ljava/time/ZonedDateTime;")); }
bool OffsetDateTime::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String OffsetDateTime::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int OffsetDateTime::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String OffsetDateTime::format(DateTimeFormatter arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;", arg0)); }
OffsetDateTime OffsetDateTime::of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, ZoneOffset arg7) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(IIIIIIILjava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
OffsetDateTime OffsetDateTime::of(LocalDateTime arg0, ZoneOffset arg1) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0, arg1)); }
OffsetDateTime OffsetDateTime::of(LocalDate arg0, LocalTime arg1, ZoneOffset arg2) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/LocalDate;Ljava/time/LocalTime;Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;", arg0, arg1, arg2)); }
OffsetDateTime OffsetDateTime::from(TemporalAccessor arg0) { return OffsetDateTime(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/OffsetDateTime;", arg0)); }
void OffsetDateTime::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
ZoneOffset OffsetDateTime::getOffset() { return ZoneOffset(*classes[className]->invokeMethod<jobject>(this->object, "getOffset", "()Ljava/time/ZoneOffset;")); }
Object OffsetDateTime::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }


OffsetTime OffsetTime::parse(CharSequence arg0, DateTimeFormatter arg1) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;Ljava/time/format/DateTimeFormatter;)Ljava/time/OffsetTime;", arg0, arg1)); }
OffsetTime OffsetTime::parse(CharSequence arg0) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("parse", "(Ljava/lang/CharSequence;)Ljava/time/OffsetTime;", arg0)); }
long OffsetTime::toEpochSecond(LocalDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "toEpochSecond", "(Ljava/time/LocalDate;)J", arg0)); }
int OffsetTime::getHour() { return int(*classes[className]->invokeMethod<int>(this->object, "getHour", "()I")); }
int OffsetTime::getMinute() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinute", "()I")); }
int OffsetTime::getSecond() { return int(*classes[className]->invokeMethod<int>(this->object, "getSecond", "()I")); }
OffsetTime OffsetTime::ofInstant(Instant arg0, ZoneId arg1) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("ofInstant", "(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/OffsetTime;", arg0, arg1)); }
bool OffsetTime::isEqual(OffsetTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEqual", "(Ljava/time/OffsetTime;)Z", arg0)); }
OffsetTime OffsetTime::now() { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("now", "()Ljava/time/OffsetTime;")); }
OffsetTime OffsetTime::now(Clock arg0) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/Clock;)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::now(ZoneId arg0) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("now", "(Ljava/time/ZoneId;)Ljava/time/OffsetTime;", arg0)); }
int OffsetTime::getNano() { return int(*classes[className]->invokeMethod<int>(this->object, "getNano", "()I")); }
OffsetTime OffsetTime::readExternal(ObjectInput arg0) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/ObjectInput;)Ljava/time/OffsetTime;", arg0)); }
void OffsetTime::writeExternal(ObjectOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/ObjectOutput;)V", arg0)); }
OffsetTime OffsetTime::plusNanos(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::plus(TemporalAmount arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::plus(long arg0, TemporalUnit arg1) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "plus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/OffsetTime;", arg0, arg1)); }
OffsetTime OffsetTime::plusSeconds(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::with(TemporalAdjuster arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::with(TemporalField arg0, long arg1) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/temporal/TemporalField;J)Ljava/time/OffsetTime;", arg0, arg1)); }
OffsetTime OffsetTime::with(LocalTime arg0, ZoneOffset arg1) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "with", "(Ljava/time/LocalTime;Ljava/time/ZoneOffset;)Ljava/time/OffsetTime;", arg0, arg1)); }
OffsetTime OffsetTime::minus(TemporalAmount arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(Ljava/time/temporal/TemporalAmount;)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::minus(long arg0, TemporalUnit arg1) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "minus", "(JLjava/time/temporal/TemporalUnit;)Ljava/time/OffsetTime;", arg0, arg1)); }
OffsetTime OffsetTime::truncatedTo(TemporalUnit arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava/time/temporal/TemporalUnit;)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::minusSeconds(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::minusNanos(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava/time/OffsetTime;", arg0)); }
bool OffsetTime::isAfter(OffsetTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAfter", "(Ljava/time/OffsetTime;)Z", arg0)); }
bool OffsetTime::isBefore(OffsetTime arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBefore", "(Ljava/time/OffsetTime;)Z", arg0)); }
LocalTime OffsetTime::toLocalTime() { return LocalTime(*classes[className]->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava/time/LocalTime;")); }
OffsetTime OffsetTime::withHour(int arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::withMinute(int arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::withSecond(int arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::withNano(int arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::plusHours(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::plusMinutes(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::withOffsetSameInstant(ZoneOffset arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "withOffsetSameInstant", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::withOffsetSameLocal(ZoneOffset arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "withOffsetSameLocal", "(Ljava/time/ZoneOffset;)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::minusHours(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava/time/OffsetTime;", arg0)); }
OffsetTime OffsetTime::minusMinutes(long arg0) { return OffsetTime(*classes[className]->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava/time/OffsetTime;", arg0)); }
OffsetDateTime OffsetTime::atDate(LocalDate arg0) { return OffsetDateTime(*classes[className]->invokeMethod<jobject>(this->object, "atDate", "(Ljava/time/LocalDate;)Ljava/time/OffsetDateTime;", arg0)); }
long OffsetTime::toEpochNano() { return long(*classes[className]->invokeMethod<long>(this->object, "toEpochNano", "()J")); }
bool OffsetTime::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String OffsetTime::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int OffsetTime::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String OffsetTime::format(DateTimeFormatter arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/time/format/DateTimeFormatter;)Ljava/lang/String;", arg0)); }
OffsetTime OffsetTime::of(int arg0, int arg1, int arg2, int arg3, ZoneOffset arg4) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("of", "(IIIILjava/time/ZoneOffset;)Ljava/time/OffsetTime;", arg0, arg1, arg2, arg3, arg4)); }
OffsetTime OffsetTime::of(LocalTime arg0, ZoneOffset arg1) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/LocalTime;Ljava/time/ZoneOffset;)Ljava/time/OffsetTime;", arg0, arg1)); }
OffsetTime OffsetTime::from(TemporalAccessor arg0) { return OffsetTime(*classes[className]->invokeStaticMethod<jobject>("from", "(Ljava/time/temporal/TemporalAccessor;)Ljava/time/OffsetTime;", arg0)); }
void OffsetTime::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
ZoneOffset OffsetTime::getOffset() { return ZoneOffset(*classes[className]->invokeMethod<jobject>(this->object, "getOffset", "()Ljava/time/ZoneOffset;")); }
Object OffsetTime::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

Chronology AbstractChronology::readExternal(DataInput arg0) { return Chronology(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/chrono/Chronology;", arg0)); }
void AbstractChronology::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
void AbstractChronology::addFieldValue(Map arg0, ChronoField arg1, long arg2) { (classes[className]->invokeMethod<void>(this->object, "addFieldValue", "(Ljava/util/Map;Ljava/time/temporal/ChronoField;J)V", arg0, arg1, arg2)); }
ChronoLocalDate AbstractChronology::resolveYMD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYMD", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1)); }
ChronoLocalDate AbstractChronology::resolveYearOfEra(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYearOfEra", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1)); }
void AbstractChronology::resolveProlepticMonth(Map arg0, ResolverStyle arg1) { (classes[className]->invokeMethod<void>(this->object, "resolveProlepticMonth", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)V", arg0, arg1)); }
Chronology AbstractChronology::registerChrono(Chronology arg0, String arg1) { return Chronology(*classes[className]->invokeStaticMethod<jobject>("registerChrono", "(Ljava/time/chrono/Chronology;Ljava/lang/String;)Ljava/time/chrono/Chronology;", arg0, arg1)); }
Chronology AbstractChronology::registerChrono(Chronology arg0) { return Chronology(*classes[className]->invokeStaticMethod<jobject>("registerChrono", "(Ljava/time/chrono/Chronology;)Ljava/time/chrono/Chronology;", arg0)); }
bool AbstractChronology::initCache() { return bool(*classes[className]->invokeStaticMethod<bool>("initCache", "()Z")); }
Chronology AbstractChronology::of0(String arg0) { return Chronology(*classes[className]->invokeStaticMethod<jobject>("of0", "(Ljava/lang/String;)Ljava/time/chrono/Chronology;", arg0)); }
ChronoLocalDate AbstractChronology::resolveYMAA(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYMAA", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1)); }
ChronoLocalDate AbstractChronology::resolveYMAD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYMAD", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1)); }
ChronoLocalDate AbstractChronology::resolveYD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYD", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1)); }
ChronoLocalDate AbstractChronology::resolveYAA(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYAA", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1)); }
ChronoLocalDate AbstractChronology::resolveYAD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveYAD", "(Ljava/util/Map;Ljava/time/format/ResolverStyle;)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1)); }
ChronoLocalDate AbstractChronology::resolveAligned(ChronoLocalDate arg0, long arg1, long arg2, long arg3) { return ChronoLocalDate(*classes[className]->invokeMethod<jobject>(this->object, "resolveAligned", "(Ljava/time/chrono/ChronoLocalDate;JJJ)Ljava/time/chrono/ChronoLocalDate;", arg0, arg1, arg2, arg3)); }
void AbstractChronology::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Object AbstractChronology::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

int ChronoField::checkValidIntValue(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "checkValidIntValue", "(J)I", arg0)); }
long ChronoField::checkValidValue(long arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "checkValidValue", "(J)J", arg0)); }
ChronoField ChronoField::valueOf(String arg0) { return ChronoField(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/time/temporal/ChronoField;", arg0)); }

Set DecimalStyle::getAvailableLocales() { return Set(*classes[className]->invokeStaticMethod<jobject>("getAvailableLocales", "()Ljava/util/Set;")); }
char DecimalStyle::getZeroDigit() { return char(*classes[className]->invokeMethod<char>(this->object, "getZeroDigit", "()C")); }
char DecimalStyle::getDecimalSeparator() { return char(*classes[className]->invokeMethod<char>(this->object, "getDecimalSeparator", "()C")); }
DecimalStyle DecimalStyle::ofDefaultLocale() { return DecimalStyle(*classes[className]->invokeStaticMethod<jobject>("ofDefaultLocale", "()Ljava/time/format/DecimalStyle;")); }
DecimalStyle DecimalStyle::withZeroDigit(char arg0) { return DecimalStyle(*classes[className]->invokeMethod<jobject>(this->object, "withZeroDigit", "(C)Ljava/time/format/DecimalStyle;", arg0)); }
char DecimalStyle::getPositiveSign() { return char(*classes[className]->invokeMethod<char>(this->object, "getPositiveSign", "()C")); }
DecimalStyle DecimalStyle::withPositiveSign(char arg0) { return DecimalStyle(*classes[className]->invokeMethod<jobject>(this->object, "withPositiveSign", "(C)Ljava/time/format/DecimalStyle;", arg0)); }
char DecimalStyle::getNegativeSign() { return char(*classes[className]->invokeMethod<char>(this->object, "getNegativeSign", "()C")); }
DecimalStyle DecimalStyle::withNegativeSign(char arg0) { return DecimalStyle(*classes[className]->invokeMethod<jobject>(this->object, "withNegativeSign", "(C)Ljava/time/format/DecimalStyle;", arg0)); }
DecimalStyle DecimalStyle::withDecimalSeparator(char arg0) { return DecimalStyle(*classes[className]->invokeMethod<jobject>(this->object, "withDecimalSeparator", "(C)Ljava/time/format/DecimalStyle;", arg0)); }
int DecimalStyle::convertToDigit(char arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "convertToDigit", "(C)I", arg0)); }
String DecimalStyle::convertNumberToI18N(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "convertNumberToI18N", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool DecimalStyle::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String DecimalStyle::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int DecimalStyle::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
DecimalStyle DecimalStyle::of(Locale arg0) { return DecimalStyle(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/util/Locale;)Ljava/time/format/DecimalStyle;", arg0)); }
DecimalStyle DecimalStyle::create(Locale arg0) { return DecimalStyle(*classes[className]->invokeStaticMethod<jobject>("create", "(Ljava/util/Locale;)Ljava/time/format/DecimalStyle;", arg0)); }

long DateTimeFormatterBuilder_DayPeriod::duration() { return long(*classes[className]->invokeMethod<long>(this->object, "duration", "()J")); }
DateTimeFormatterBuilder_DayPeriod DateTimeFormatterBuilder_DayPeriod::ofLocale(Locale arg0, long arg1) { return DateTimeFormatterBuilder_DayPeriod(*classes[className]->invokeStaticMethod<jobject>("ofLocale", "(Ljava/util/Locale;J)Ljava/time/format/DateTimeFormatterBuilder$DayPeriod;", arg0, arg1)); }
bool DateTimeFormatterBuilder_DayPeriod::includes(long arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "includes", "(J)Z", arg0)); }
Map DateTimeFormatterBuilder_DayPeriod::getDayPeriodMap(Locale arg0) { return Map(*classes[className]->invokeStaticMethod<jobject>("getDayPeriodMap", "(Ljava/util/Locale;)Ljava/util/Map;", arg0)); }
long DateTimeFormatterBuilder_DayPeriod::mapToIndex(String arg0) { return long(*classes[className]->invokeStaticMethod<long>("mapToIndex", "(Ljava/lang/String;)J", arg0)); }
bool DateTimeFormatterBuilder_DayPeriod::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String DateTimeFormatterBuilder_DayPeriod::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
long DateTimeFormatterBuilder_DayPeriod::mid() { return long(*classes[className]->invokeMethod<long>(this->object, "mid", "()J")); }
int DateTimeFormatterBuilder_DayPeriod::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
long DateTimeFormatterBuilder_DayPeriod::getIndex() { return long(*classes[className]->invokeMethod<long>(this->object, "getIndex", "()J")); }

FormatStyle FormatStyle::valueOf(String arg0) { return FormatStyle(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/time/format/FormatStyle;", arg0)); }



DateTimeFormatterBuilder_CompositePrinterParser DateTimeFormatterBuilder_CompositePrinterParser::withOptional(bool arg0) { return DateTimeFormatterBuilder_CompositePrinterParser(*classes[className]->invokeMethod<jobject>(this->object, "withOptional", "(Z)Ljava/time/format/DateTimeFormatterBuilder$CompositePrinterParser;", arg0)); }
String DateTimeFormatterBuilder_CompositePrinterParser::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

AttributedCharacterIterator Format::createAttributedCharacterIterator(String arg0) { return AttributedCharacterIterator(*classes[className]->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "(Ljava/lang/String;)Ljava/text/AttributedCharacterIterator;", arg0)); }
AttributedCharacterIterator Format::createAttributedCharacterIterator(AttributedCharacterIterator_interface arg0) { return AttributedCharacterIterator(*classes[className]->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "([Ljava/text/AttributedCharacterIterator;)Ljava/text/AttributedCharacterIterator;", arg0)); }
AttributedCharacterIterator Format::createAttributedCharacterIterator(String arg0, AttributedCharacterIterator_Attribute arg1, Object arg2) { return AttributedCharacterIterator(*classes[className]->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "(Ljava/lang/String;Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;", arg0, arg1, arg2)); }
AttributedCharacterIterator Format::createAttributedCharacterIterator(AttributedCharacterIterator arg0, AttributedCharacterIterator_Attribute arg1, Object arg2) { return AttributedCharacterIterator(*classes[className]->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "(Ljava/text/AttributedCharacterIterator;Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;", arg0, arg1, arg2)); }
Object Format::parseObject(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "parseObject", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }
Object Format::parseObject(String arg0, ParsePosition arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;", arg0, arg1)); }
AttributedCharacterIterator Format::formatToCharacterIterator(Object arg0) { return AttributedCharacterIterator(*classes[className]->invokeMethod<jobject>(this->object, "formatToCharacterIterator", "(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;", arg0)); }
Object Format::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
String Format::format(Object arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/lang/Object;)Ljava/lang/String;", arg0)); }
StringBuffer Format::format(Object arg0, StringBuffer arg1, FieldPosition arg2) { return StringBuffer(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", arg0, arg1, arg2)); }



String AttributedCharacterIterator_Attribute::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool AttributedCharacterIterator_Attribute::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String AttributedCharacterIterator_Attribute::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int AttributedCharacterIterator_Attribute::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object AttributedCharacterIterator_Attribute::readResolve() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readResolve", "()Ljava/lang/Object;")); }

int FieldPosition::getBeginIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getBeginIndex", "()I")); }
int FieldPosition::getEndIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getEndIndex", "()I")); }
Format_Field FieldPosition::getFieldAttribute() { return Format_Field(*classes[className]->invokeMethod<jobject>(this->object, "getFieldAttribute", "()Ljava/text/Format$Field;")); }
void FieldPosition::setBeginIndex(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setBeginIndex", "(I)V", arg0)); }
void FieldPosition::setEndIndex(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setEndIndex", "(I)V", arg0)); }
Format_FieldDelegate FieldPosition::getFieldDelegate() { return Format_FieldDelegate(*classes[className]->invokeMethod<jobject>(this->object, "getFieldDelegate", "()Ljava/text/Format$FieldDelegate;")); }
bool FieldPosition::matchesField(Format_Field arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "matchesField", "(Ljava/text/Format$Field;)Z", arg0)); }
bool FieldPosition::matchesField(Format_Field arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "matchesField", "(Ljava/text/Format$Field;I)Z", arg0, arg1)); }
bool FieldPosition::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String FieldPosition::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int FieldPosition::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int FieldPosition::getField() { return int(*classes[className]->invokeMethod<int>(this->object, "getField", "()I")); }



Duration ZoneOffsetTransition::getDuration() { return Duration(*classes[className]->invokeMethod<jobject>(this->object, "getDuration", "()Ljava/time/Duration;")); }
long ZoneOffsetTransition::toEpochSecond() { return long(*classes[className]->invokeMethod<long>(this->object, "toEpochSecond", "()J")); }
ZoneOffsetTransition ZoneOffsetTransition::readExternal(DataInput arg0) { return ZoneOffsetTransition(*classes[className]->invokeStaticMethod<jobject>("readExternal", "(Ljava/io/DataInput;)Ljava/time/zone/ZoneOffsetTransition;", arg0)); }
void ZoneOffsetTransition::writeExternal(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "writeExternal", "(Ljava/io/DataOutput;)V", arg0)); }
List ZoneOffsetTransition::getValidOffsets() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getValidOffsets", "()Ljava/util/List;")); }
ZoneOffset ZoneOffsetTransition::getOffsetAfter() { return ZoneOffset(*classes[className]->invokeMethod<jobject>(this->object, "getOffsetAfter", "()Ljava/time/ZoneOffset;")); }
bool ZoneOffsetTransition::isValidOffset(ZoneOffset arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isValidOffset", "(Ljava/time/ZoneOffset;)Z", arg0)); }
bool ZoneOffsetTransition::isGap() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isGap", "()Z")); }
bool ZoneOffsetTransition::isOverlap() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOverlap", "()Z")); }
ZoneOffset ZoneOffsetTransition::getOffsetBefore() { return ZoneOffset(*classes[className]->invokeMethod<jobject>(this->object, "getOffsetBefore", "()Ljava/time/ZoneOffset;")); }
LocalDateTime ZoneOffsetTransition::getDateTimeBefore() { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "getDateTimeBefore", "()Ljava/time/LocalDateTime;")); }
LocalDateTime ZoneOffsetTransition::getDateTimeAfter() { return LocalDateTime(*classes[className]->invokeMethod<jobject>(this->object, "getDateTimeAfter", "()Ljava/time/LocalDateTime;")); }
int ZoneOffsetTransition::getDurationSeconds() { return int(*classes[className]->invokeMethod<int>(this->object, "getDurationSeconds", "()I")); }
Instant ZoneOffsetTransition::getInstant() { return Instant(*classes[className]->invokeMethod<jobject>(this->object, "getInstant", "()Ljava/time/Instant;")); }
bool ZoneOffsetTransition::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ZoneOffsetTransition::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ZoneOffsetTransition::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
ZoneOffsetTransition ZoneOffsetTransition::of(LocalDateTime arg0, ZoneOffset arg1, ZoneOffset arg2) { return ZoneOffsetTransition(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/time/LocalDateTime;Ljava/time/ZoneOffset;Ljava/time/ZoneOffset;)Ljava/time/zone/ZoneOffsetTransition;", arg0, arg1, arg2)); }
void ZoneOffsetTransition::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Object ZoneOffsetTransition::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

BaseCalendar_Date BaseCalendar_Date::setNormalizedDate(int arg0, int arg1, int arg2) { return BaseCalendar_Date(*classes[className]->invokeMethod<jobject>(this->object, "setNormalizedDate", "(III)Lsun/util/calendar/BaseCalendar$Date;", arg0, arg1, arg2)); }
void BaseCalendar_Date::setNormalizedYear(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setNormalizedYear", "(I)V", arg0)); }
int BaseCalendar_Date::getNormalizedYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getNormalizedYear", "()I")); }
bool BaseCalendar_Date::hit(long arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hit", "(J)Z", arg0)); }
bool BaseCalendar_Date::hit(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hit", "(I)Z", arg0)); }
int BaseCalendar_Date::getCachedYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getCachedYear", "()I")); }
long BaseCalendar_Date::getCachedJan1() { return long(*classes[className]->invokeMethod<long>(this->object, "getCachedJan1", "()J")); }
void BaseCalendar_Date::setCache(int arg0, long arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setCache", "(IJI)V", arg0, arg1, arg2)); }

void CalendarDate::setLocale(Locale arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocale", "(Ljava/util/Locale;)V", arg0)); }
bool CalendarDate::isNormalized() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNormalized", "()Z")); }
int CalendarDate::getYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getYear", "()I")); }
int CalendarDate::getDayOfMonth() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfMonth", "()I")); }
int CalendarDate::getSeconds() { return int(*classes[className]->invokeMethod<int>(this->object, "getSeconds", "()I")); }
TimeZone CalendarDate::getZone() { return TimeZone(*classes[className]->invokeMethod<jobject>(this->object, "getZone", "()Ljava/util/TimeZone;")); }
void CalendarDate::setTimeOfDay(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setTimeOfDay", "(J)V", arg0)); }
CalendarDate CalendarDate::setTimeOfDay(int arg0, int arg1, int arg2, int arg3) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setTimeOfDay", "(IIII)Lsun/util/calendar/CalendarDate;", arg0, arg1, arg2, arg3)); }
CalendarDate CalendarDate::setDate(int arg0, int arg1, int arg2) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setDate", "(III)Lsun/util/calendar/CalendarDate;", arg0, arg1, arg2)); }
int CalendarDate::getMonth() { return int(*classes[className]->invokeMethod<int>(this->object, "getMonth", "()I")); }
CalendarDate CalendarDate::setMonth(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setMonth", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::setDayOfMonth(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setDayOfMonth", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
int CalendarDate::getDayOfWeek() { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfWeek", "()I")); }
int CalendarDate::getHours() { return int(*classes[className]->invokeMethod<int>(this->object, "getHours", "()I")); }
CalendarDate CalendarDate::setHours(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setHours", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
int CalendarDate::getMinutes() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinutes", "()I")); }
CalendarDate CalendarDate::setMinutes(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setMinutes", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::setSeconds(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setSeconds", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
bool CalendarDate::isDaylightTime() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDaylightTime", "()Z")); }
int CalendarDate::getZoneOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getZoneOffset", "()I")); }
CalendarDate CalendarDate::setZone(TimeZone arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setZone", "(Ljava/util/TimeZone;)Lsun/util/calendar/CalendarDate;", arg0)); }
int CalendarDate::getMillis() { return int(*classes[className]->invokeMethod<int>(this->object, "getMillis", "()I")); }
Era CalendarDate::getEra() { return Era(*classes[className]->invokeMethod<jobject>(this->object, "getEra", "()Lsun/util/calendar/Era;")); }
CalendarDate CalendarDate::setYear(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setYear", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::addYear(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addYear", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::addMonth(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addMonth", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::addDayOfMonth(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addDayOfMonth", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::setMillis(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setMillis", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::addHours(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addHours", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::addMinutes(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addMinutes", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::addSeconds(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addSeconds", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarDate::addMillis(int arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addMillis", "(I)Lsun/util/calendar/CalendarDate;", arg0)); }
bool CalendarDate::isStandardTime() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStandardTime", "()Z")); }
CalendarDate CalendarDate::setEra(Era arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setEra", "(Lsun/util/calendar/Era;)Lsun/util/calendar/CalendarDate;", arg0)); }
bool CalendarDate::isLeapYear() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLeapYear", "()Z")); }
void CalendarDate::setLeapYear(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setLeapYear", "(Z)V", arg0)); }
long CalendarDate::getTimeOfDay() { return long(*classes[className]->invokeMethod<long>(this->object, "getTimeOfDay", "()J")); }
CalendarDate CalendarDate::addDate(int arg0, int arg1, int arg2) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addDate", "(III)Lsun/util/calendar/CalendarDate;", arg0, arg1, arg2)); }
CalendarDate CalendarDate::addTimeOfDay(int arg0, int arg1, int arg2, int arg3) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "addTimeOfDay", "(IIII)Lsun/util/calendar/CalendarDate;", arg0, arg1, arg2, arg3)); }
void CalendarDate::setStandardTime(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setStandardTime", "(Z)V", arg0)); }
bool CalendarDate::isSameDate(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSameDate", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }
void CalendarDate::setDayOfWeek(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setDayOfWeek", "(I)V", arg0)); }
void CalendarDate::setNormalized(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setNormalized", "(Z)V", arg0)); }
void CalendarDate::setZoneOffset(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setZoneOffset", "(I)V", arg0)); }
int CalendarDate::getDaylightSaving() { return int(*classes[className]->invokeMethod<int>(this->object, "getDaylightSaving", "()I")); }
void CalendarDate::setDaylightSaving(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setDaylightSaving", "(I)V", arg0)); }
bool CalendarDate::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String CalendarDate::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int CalendarDate::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object CalendarDate::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }

String TimeZone::getDisplayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava/lang/String;")); }
String TimeZone::getDisplayName(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String TimeZone::getDisplayName(bool arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(ZI)Ljava/lang/String;", arg0, arg1)); }
String TimeZone::getDisplayName(bool arg0, int arg1, Locale arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "(ZILjava/util/Locale;)Ljava/lang/String;", arg0, arg1, arg2)); }
void TimeZone::setDefault(TimeZone arg0) { (classes[className]->invokeStaticMethod<void>("setDefault", "(Ljava/util/TimeZone;)V", arg0)); }
String TimeZone::getID() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getID", "()Ljava/lang/String;")); }
TimeZone TimeZone::getDefaultRef() { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("getDefaultRef", "()Ljava/util/TimeZone;")); }
TimeZone TimeZone::getTimeZone(String arg0, bool arg1) { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("getTimeZone", "(Ljava/lang/String;Z)Ljava/util/TimeZone;", arg0, arg1)); }
TimeZone TimeZone::getTimeZone(String arg0) { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("getTimeZone", "(Ljava/lang/String;)Ljava/util/TimeZone;", arg0)); }
TimeZone TimeZone::getTimeZone(ZoneId arg0) { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("getTimeZone", "(Ljava/time/ZoneId;)Ljava/util/TimeZone;", arg0)); }
int TimeZone::getRawOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getRawOffset", "()I")); }
bool TimeZone::hasSameRules(TimeZone arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasSameRules", "(Ljava/util/TimeZone;)Z", arg0)); }
int TimeZone::getOffsets(long arg0, arr_I arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getOffsets", "(J[I)I", arg0, arg1)); }
bool TimeZone::inDaylightTime(Date arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "inDaylightTime", "(Ljava/util/Date;)Z", arg0)); }
int TimeZone::getDSTSavings() { return int(*classes[className]->invokeMethod<int>(this->object, "getDSTSavings", "()I")); }
bool TimeZone::useDaylightTime() { return bool(*classes[className]->invokeMethod<bool>(this->object, "useDaylightTime", "()Z")); }
ZoneId TimeZone::toZoneId0() { return ZoneId(*classes[className]->invokeMethod<jobject>(this->object, "toZoneId0", "()Ljava/time/ZoneId;")); }
ZoneId TimeZone::toZoneId() { return ZoneId(*classes[className]->invokeMethod<jobject>(this->object, "toZoneId", "()Ljava/time/ZoneId;")); }
TimeZone TimeZone::parseCustomTimeZone(String arg0) { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("parseCustomTimeZone", "(Ljava/lang/String;)Ljava/util/TimeZone;", arg0)); }
TimeZone TimeZone::setDefaultZone() { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("setDefaultZone", "()Ljava/util/TimeZone;")); }
String TimeZone::getSystemTimeZoneID(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getSystemTimeZoneID", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String TimeZone::getSystemGMTOffsetID() { return String(*classes[className]->invokeStaticMethod<jobject>("getSystemGMTOffsetID", "()Ljava/lang/String;")); }
void TimeZone::setID(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setID", "(Ljava/lang/String;)V", arg0)); }
void TimeZone::setRawOffset(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setRawOffset", "(I)V", arg0)); }
bool TimeZone::observesDaylightTime() { return bool(*classes[className]->invokeMethod<bool>(this->object, "observesDaylightTime", "()Z")); }
Object TimeZone::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
TimeZone TimeZone::getDefault() { return TimeZone(*classes[className]->invokeStaticMethod<jobject>("getDefault", "()Ljava/util/TimeZone;")); }
int TimeZone::getOffset(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return int(*classes[className]->invokeMethod<int>(this->object, "getOffset", "(IIIIII)I", arg0, arg1, arg2, arg3, arg4, arg5)); }
int TimeZone::getOffset(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getOffset", "(J)I", arg0)); }


int BaseCalendar::getDayOfWeek(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getDayOfWeek", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
bool BaseCalendar::isLeapYear(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLeapYear", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }
bool BaseCalendar::isLeapYear(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLeapYear", "(I)Z", arg0)); }
int BaseCalendar::getMonthLength(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMonthLength", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
int BaseCalendar::getMonthLength(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getMonthLength", "(II)I", arg0, arg1)); }
void BaseCalendar::normalizeMonth(CalendarDate arg0) { (classes[className]->invokeMethod<void>(this->object, "normalizeMonth", "(Lsun/util/calendar/CalendarDate;)V", arg0)); }
long BaseCalendar::getFixedDate(int arg0, int arg1, int arg2, BaseCalendar_Date arg3) { return long(*classes[className]->invokeMethod<long>(this->object, "getFixedDate", "(IIILsun/util/calendar/BaseCalendar$Date;)J", arg0, arg1, arg2, arg3)); }
long BaseCalendar::getFixedDate(CalendarDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getFixedDate", "(Lsun/util/calendar/CalendarDate;)J", arg0)); }
void BaseCalendar::getCalendarDateFromFixedDate(CalendarDate arg0, long arg1) { (classes[className]->invokeMethod<void>(this->object, "getCalendarDateFromFixedDate", "(Lsun/util/calendar/CalendarDate;J)V", arg0, arg1)); }
long BaseCalendar::getDayOfYear(int arg0, int arg1, int arg2) { return long(*classes[className]->invokeMethod<long>(this->object, "getDayOfYear", "(III)J", arg0, arg1, arg2)); }
long BaseCalendar::getDayOfYear(CalendarDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getDayOfYear", "(Lsun/util/calendar/CalendarDate;)J", arg0)); }
int BaseCalendar::getGregorianYearFromFixedDate(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getGregorianYearFromFixedDate", "(J)I", arg0)); }
int BaseCalendar::getDayOfWeekFromFixedDate(long arg0) { return int(*classes[className]->invokeStaticMethod<int>("getDayOfWeekFromFixedDate", "(J)I", arg0)); }
int BaseCalendar::getYearLength(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getYearLength", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
int BaseCalendar::getYearLengthInMonths(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getYearLengthInMonths", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
int BaseCalendar::getYearFromFixedDate(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getYearFromFixedDate", "(J)I", arg0)); }
bool BaseCalendar::validate(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "validate", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }
bool BaseCalendar::normalize(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "normalize", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }

long AbstractCalendar::getTime(CalendarDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getTime", "(Lsun/util/calendar/CalendarDate;)J", arg0)); }
CalendarDate AbstractCalendar::setTimeOfDay(CalendarDate arg0, int arg1) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setTimeOfDay", "(Lsun/util/calendar/CalendarDate;I)Lsun/util/calendar/CalendarDate;", arg0, arg1)); }
CalendarDate AbstractCalendar::getCalendarDate(long arg0, CalendarDate arg1) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;", arg0, arg1)); }
CalendarDate AbstractCalendar::getCalendarDate(long arg0, TimeZone arg1) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLjava/util/TimeZone;)Lsun/util/calendar/CalendarDate;", arg0, arg1)); }
CalendarDate AbstractCalendar::getCalendarDate(long arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(J)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate AbstractCalendar::getCalendarDate() { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun/util/calendar/CalendarDate;")); }
Era AbstractCalendar::getEra(String arg0) { return Era(*classes[className]->invokeMethod<jobject>(this->object, "getEra", "(Ljava/lang/String;)Lsun/util/calendar/Era;", arg0)); }
void AbstractCalendar::setEras(Era_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setEras", "([Lsun/util/calendar/Era;)V", arg0)); }
void AbstractCalendar::setEra(CalendarDate arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "setEra", "(Lsun/util/calendar/CalendarDate;Ljava/lang/String;)V", arg0, arg1)); }
bool AbstractCalendar::isLeapYear(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLeapYear", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }
long AbstractCalendar::getTimeOfDay(CalendarDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getTimeOfDay", "(Lsun/util/calendar/CalendarDate;)J", arg0)); }
bool AbstractCalendar::validateTime(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "validateTime", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }
int AbstractCalendar::normalizeTime(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "normalizeTime", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
long AbstractCalendar::getFixedDate(CalendarDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getFixedDate", "(Lsun/util/calendar/CalendarDate;)J", arg0)); }
void AbstractCalendar::getCalendarDateFromFixedDate(CalendarDate arg0, long arg1) { (classes[className]->invokeMethod<void>(this->object, "getCalendarDateFromFixedDate", "(Lsun/util/calendar/CalendarDate;J)V", arg0, arg1)); }
long AbstractCalendar::getTimeOfDayValue(CalendarDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getTimeOfDayValue", "(Lsun/util/calendar/CalendarDate;)J", arg0)); }
long AbstractCalendar::getDayOfWeekDateBefore(long arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("getDayOfWeekDateBefore", "(JI)J", arg0, arg1)); }
long AbstractCalendar::getDayOfWeekDateAfter(long arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("getDayOfWeekDateAfter", "(JI)J", arg0, arg1)); }
long AbstractCalendar::getDayOfWeekDateOnOrBefore(long arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("getDayOfWeekDateOnOrBefore", "(JI)J", arg0, arg1)); }
int AbstractCalendar::getWeekLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getWeekLength", "()I")); }
CalendarDate AbstractCalendar::getNthDayOfWeek(int arg0, int arg1, CalendarDate arg2) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getNthDayOfWeek", "(IILsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;", arg0, arg1, arg2)); }


long CalendarSystem::getTime(CalendarDate arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getTime", "(Lsun/util/calendar/CalendarDate;)J", arg0)); }
CalendarDate CalendarSystem::newCalendarDate(TimeZone arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "newCalendarDate", "(Ljava/util/TimeZone;)Lsun/util/calendar/CalendarDate;", arg0)); }
CalendarDate CalendarSystem::newCalendarDate() { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "newCalendarDate", "()Lsun/util/calendar/CalendarDate;")); }
CalendarDate CalendarSystem::setTimeOfDay(CalendarDate arg0, int arg1) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "setTimeOfDay", "(Lsun/util/calendar/CalendarDate;I)Lsun/util/calendar/CalendarDate;", arg0, arg1)); }
CalendarDate CalendarSystem::getCalendarDate() { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun/util/calendar/CalendarDate;")); }
CalendarDate CalendarSystem::getCalendarDate(long arg0, TimeZone arg1) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLjava/util/TimeZone;)Lsun/util/calendar/CalendarDate;", arg0, arg1)); }
CalendarDate CalendarSystem::getCalendarDate(long arg0, CalendarDate arg1) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;", arg0, arg1)); }
CalendarDate CalendarSystem::getCalendarDate(long arg0) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(J)Lsun/util/calendar/CalendarDate;", arg0)); }
Era CalendarSystem::getEra(String arg0) { return Era(*classes[className]->invokeMethod<jobject>(this->object, "getEra", "(Ljava/lang/String;)Lsun/util/calendar/Era;", arg0)); }
Gregorian CalendarSystem::getGregorianCalendar() { return Gregorian(*classes[className]->invokeStaticMethod<jobject>("getGregorianCalendar", "()Lsun/util/calendar/Gregorian;")); }
void CalendarSystem::setEra(CalendarDate arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "setEra", "(Lsun/util/calendar/CalendarDate;Ljava/lang/String;)V", arg0, arg1)); }
int CalendarSystem::getMonthLength(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMonthLength", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
int CalendarSystem::getYearLength(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getYearLength", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
int CalendarSystem::getYearLengthInMonths(CalendarDate arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getYearLengthInMonths", "(Lsun/util/calendar/CalendarDate;)I", arg0)); }
int CalendarSystem::getWeekLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getWeekLength", "()I")); }
CalendarDate CalendarSystem::getNthDayOfWeek(int arg0, int arg1, CalendarDate arg2) { return CalendarDate(*classes[className]->invokeMethod<jobject>(this->object, "getNthDayOfWeek", "(IILsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;", arg0, arg1, arg2)); }
void CalendarSystem::initNames() { (classes[className]->invokeStaticMethod<void>("initNames", "()V")); }
String CalendarSystem::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
CalendarSystem CalendarSystem::forName(String arg0) { return CalendarSystem(*classes[className]->invokeStaticMethod<jobject>("forName", "(Ljava/lang/String;)Lsun/util/calendar/CalendarSystem;", arg0)); }
bool CalendarSystem::validate(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "validate", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }
bool CalendarSystem::normalize(CalendarDate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "normalize", "(Lsun/util/calendar/CalendarDate;)Z", arg0)); }

Gregorian_Date Gregorian::newCalendarDate() { return Gregorian_Date(*classes[className]->invokeMethod<jobject>(this->object, "newCalendarDate", "()Lsun/util/calendar/Gregorian$Date;")); }
Gregorian_Date Gregorian::newCalendarDate(TimeZone arg0) { return Gregorian_Date(*classes[className]->invokeMethod<jobject>(this->object, "newCalendarDate", "(Ljava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;", arg0)); }
Gregorian_Date Gregorian::getCalendarDate(long arg0) { return Gregorian_Date(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(J)Lsun/util/calendar/Gregorian$Date;", arg0)); }
Gregorian_Date Gregorian::getCalendarDate(long arg0, TimeZone arg1) { return Gregorian_Date(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;", arg0, arg1)); }
Gregorian_Date Gregorian::getCalendarDate() { return Gregorian_Date(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun/util/calendar/Gregorian$Date;")); }
Gregorian_Date Gregorian::getCalendarDate(long arg0, CalendarDate arg1) { return Gregorian_Date(*classes[className]->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;", arg0, arg1)); }
String Gregorian::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }

void Gregorian_Date::setNormalizedYear(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setNormalizedYear", "(I)V", arg0)); }
int Gregorian_Date::getNormalizedYear() { return int(*classes[className]->invokeMethod<int>(this->object, "getNormalizedYear", "()I")); }

Set Locale_IsoCountryCode::retrieveISOCountryCodes(Locale_IsoCountryCode arg0) { return Set(*classes[className]->invokeStaticMethod<jobject>("retrieveISOCountryCodes", "(Ljava/util/Locale$IsoCountryCode;)Ljava/util/Set;", arg0)); }
Set Locale_IsoCountryCode::createCountryCodeSet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "createCountryCodeSet", "()Ljava/util/Set;")); }
Locale_IsoCountryCode Locale_IsoCountryCode::valueOf(String arg0) { return Locale_IsoCountryCode(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/util/Locale$IsoCountryCode;", arg0)); }

CoderResult CharsetDecoder::implFlush(CharBuffer arg0) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "implFlush", "(Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;", arg0)); }
CodingErrorAction CharsetDecoder::malformedInputAction() { return CodingErrorAction(*classes[className]->invokeMethod<jobject>(this->object, "malformedInputAction", "()Ljava/nio/charset/CodingErrorAction;")); }
CodingErrorAction CharsetDecoder::unmappableCharacterAction() { return CodingErrorAction(*classes[className]->invokeMethod<jobject>(this->object, "unmappableCharacterAction", "()Ljava/nio/charset/CodingErrorAction;")); }
CharsetDecoder CharsetDecoder::replaceWith(String arg0) { return CharsetDecoder(*classes[className]->invokeMethod<jobject>(this->object, "replaceWith", "(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;", arg0)); }
void CharsetDecoder::implReplaceWith(String arg0) { (classes[className]->invokeMethod<void>(this->object, "implReplaceWith", "(Ljava/lang/String;)V", arg0)); }
void CharsetDecoder::implOnMalformedInput(CodingErrorAction arg0) { (classes[className]->invokeMethod<void>(this->object, "implOnMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)V", arg0)); }
void CharsetDecoder::implOnUnmappableCharacter(CodingErrorAction arg0) { (classes[className]->invokeMethod<void>(this->object, "implOnUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)V", arg0)); }
void CharsetDecoder::throwIllegalStateException(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "throwIllegalStateException", "(II)V", arg0, arg1)); }
void CharsetDecoder::implReset() { (classes[className]->invokeMethod<void>(this->object, "implReset", "()V")); }
CoderResult CharsetDecoder::decodeLoop(ByteBuffer arg0, CharBuffer arg1) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "decodeLoop", "(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;", arg0, arg1)); }
float CharsetDecoder::averageCharsPerByte() { return float(*classes[className]->invokeMethod<float>(this->object, "averageCharsPerByte", "()F")); }
bool CharsetDecoder::isAutoDetecting() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAutoDetecting", "()Z")); }
bool CharsetDecoder::isCharsetDetected() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCharsetDetected", "()Z")); }
Charset CharsetDecoder::detectedCharset() { return Charset(*classes[className]->invokeMethod<jobject>(this->object, "detectedCharset", "()Ljava/nio/charset/Charset;")); }
float CharsetDecoder::maxCharsPerByte() { return float(*classes[className]->invokeMethod<float>(this->object, "maxCharsPerByte", "()F")); }
CharsetDecoder CharsetDecoder::onMalformedInput(CodingErrorAction arg0) { return CharsetDecoder(*classes[className]->invokeMethod<jobject>(this->object, "onMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;", arg0)); }
CharsetDecoder CharsetDecoder::onUnmappableCharacter(CodingErrorAction arg0) { return CharsetDecoder(*classes[className]->invokeMethod<jobject>(this->object, "onUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;", arg0)); }
CharBuffer CharsetDecoder::decode(ByteBuffer arg0) { return CharBuffer(*classes[className]->invokeMethod<jobject>(this->object, "decode", "(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;", arg0)); }
CoderResult CharsetDecoder::decode(ByteBuffer arg0, CharBuffer arg1, bool arg2) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "decode", "(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;", arg0, arg1, arg2)); }
CoderResult CharsetDecoder::flush(CharBuffer arg0) { return CoderResult(*classes[className]->invokeMethod<jobject>(this->object, "flush", "(Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;", arg0)); }
Charset CharsetDecoder::charset() { return Charset(*classes[className]->invokeMethod<jobject>(this->object, "charset", "()Ljava/nio/charset/Charset;")); }
String CharsetDecoder::replacement() { return String(*classes[className]->invokeMethod<jobject>(this->object, "replacement", "()Ljava/lang/String;")); }
CharsetDecoder CharsetDecoder::reset() { return CharsetDecoder(*classes[className]->invokeMethod<jobject>(this->object, "reset", "()Ljava/nio/charset/CharsetDecoder;")); }

void FilterOutputStream::write(arr_B arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }
void FilterOutputStream::write(arr_B arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }
void FilterOutputStream::write(int arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

Charset PrintWriter::toCharset(String arg0) { return Charset(*classes[className]->invokeStaticMethod<jobject>("toCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;", arg0)); }
void PrintWriter::ensureOpen() { (classes[className]->invokeMethod<void>(this->object, "ensureOpen", "()V")); }
bool PrintWriter::checkError() { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkError", "()Z")); }
void PrintWriter::setError() { (classes[className]->invokeMethod<void>(this->object, "setError", "()V")); }
void PrintWriter::clearError() { (classes[className]->invokeMethod<void>(this->object, "clearError", "()V")); }
void PrintWriter::println(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "([C)V", arg0)); }
void PrintWriter::println(double arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(D)V", arg0)); }
void PrintWriter::println(float arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(F)V", arg0)); }
void PrintWriter::println(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Ljava/lang/Object;)V", arg0)); }
void PrintWriter::println(String arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Ljava/lang/String;)V", arg0)); }
void PrintWriter::println(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Z)V", arg0)); }
void PrintWriter::println(char arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(C)V", arg0)); }
void PrintWriter::println(int arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(I)V", arg0)); }
void PrintWriter::println(long arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(J)V", arg0)); }
void PrintWriter::println() { (classes[className]->invokeMethod<void>(this->object, "println", "()V")); }
PrintWriter PrintWriter::append(CharSequence arg0) { return PrintWriter(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;", arg0)); }
PrintWriter PrintWriter::append(CharSequence arg0, int arg1, int arg2) { return PrintWriter(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;", arg0, arg1, arg2)); }
PrintWriter PrintWriter::append(char arg0) { return PrintWriter(*classes[className]->invokeMethod<jobject>(this->object, "append", "(C)Ljava/io/PrintWriter;", arg0)); }
PrintWriter PrintWriter::format(Locale arg0, String arg1, Object_interface arg2) { return PrintWriter(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;", arg0, arg1, arg2)); }
PrintWriter PrintWriter::format(String arg0, Object_interface arg1) { return PrintWriter(*classes[className]->invokeMethod<jobject>(this->object, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;", arg0, arg1)); }
PrintWriter PrintWriter::printf(String arg0, Object_interface arg1) { return PrintWriter(*classes[className]->invokeMethod<jobject>(this->object, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;", arg0, arg1)); }
PrintWriter PrintWriter::printf(Locale arg0, String arg1, Object_interface arg2) { return PrintWriter(*classes[className]->invokeMethod<jobject>(this->object, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;", arg0, arg1, arg2)); }
void PrintWriter::write(String arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/lang/String;)V", arg0)); }
void PrintWriter::write(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "([C)V", arg0)); }
void PrintWriter::write(int arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }
void PrintWriter::write(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "([CII)V", arg0, arg1, arg2)); }
void PrintWriter::write(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
void PrintWriter::print(long arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(J)V", arg0)); }
void PrintWriter::print(int arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(I)V", arg0)); }
void PrintWriter::print(float arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(F)V", arg0)); }
void PrintWriter::print(double arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(D)V", arg0)); }
void PrintWriter::print(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "([C)V", arg0)); }
void PrintWriter::print(String arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(Ljava/lang/String;)V", arg0)); }
void PrintWriter::print(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(Ljava/lang/Object;)V", arg0)); }
void PrintWriter::print(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(Z)V", arg0)); }
void PrintWriter::print(char arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(C)V", arg0)); }
void PrintWriter::newLine() { (classes[className]->invokeMethod<void>(this->object, "newLine", "()V")); }

Writer Writer::nullWriter() { return Writer(*classes[className]->invokeStaticMethod<jobject>("nullWriter", "()Ljava/io/Writer;")); }
Writer Writer::append(char arg0) { return Writer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(C)Ljava/io/Writer;", arg0)); }
Writer Writer::append(CharSequence arg0, int arg1, int arg2) { return Writer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;", arg0, arg1, arg2)); }
Writer Writer::append(CharSequence arg0) { return Writer(*classes[className]->invokeMethod<jobject>(this->object, "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;", arg0)); }
void Writer::write(int arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }
void Writer::write(arr_C arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "([C)V", arg0)); }
void Writer::write(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "([CII)V", arg0, arg1, arg2)); }
void Writer::write(String arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/lang/String;)V", arg0)); }
void Writer::write(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }

void Throwable_PrintStreamOrWriter::println(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Ljava/lang/Object;)V", arg0)); }
Object Throwable_PrintStreamOrWriter::lock() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "lock", "()Ljava/lang/Object;")); }





Thread_State Thread_State::valueOf(String arg0) { return Thread_State(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/Thread$State;", arg0)); }


void FileDescriptor::attach(Closeable arg0) { (classes[className]->invokeMethod<void>(this->object, "attach", "(Ljava/io/Closeable;)V", arg0)); }
void FileDescriptor::closeAll(Closeable arg0) { (classes[className]->invokeMethod<void>(this->object, "closeAll", "(Ljava/io/Closeable;)V", arg0)); }
void FileDescriptor::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
long FileDescriptor::getHandle(int arg0) { return long(*classes[className]->invokeStaticMethod<long>("getHandle", "(I)J", arg0)); }
bool FileDescriptor::getAppend(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("getAppend", "(I)Z", arg0)); }
void FileDescriptor::unregisterCleanup() { (classes[className]->invokeMethod<void>(this->object, "unregisterCleanup", "()V")); }
void FileDescriptor::close0() { (classes[className]->invokeMethod<void>(this->object, "close0", "()V")); }
bool FileDescriptor::valid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "valid", "()Z")); }
void FileDescriptor::setHandle(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setHandle", "(J)V", arg0)); }
void FileDescriptor::registerCleanup(PhantomCleanable arg0) { (classes[className]->invokeMethod<void>(this->object, "registerCleanup", "(Ljdk/internal/ref/PhantomCleanable;)V", arg0)); }
void FileDescriptor::sync() { (classes[className]->invokeMethod<void>(this->object, "sync", "()V")); }
void FileDescriptor::set(int arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "(I)V", arg0)); }
void FileDescriptor::close() { (classes[className]->invokeMethod<void>(this->object, "close", "()V")); }


void PhantomCleanable::performCleanup() { (classes[className]->invokeMethod<void>(this->object, "performCleanup", "()V")); }
bool PhantomCleanable::isListEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isListEmpty", "()Z")); }
bool PhantomCleanable::remove() { return bool(*classes[className]->invokeMethod<bool>(this->object, "remove", "()Z")); }
void PhantomCleanable::insert() { (classes[className]->invokeMethod<void>(this->object, "insert", "()V")); }
void PhantomCleanable::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
bool PhantomCleanable::enqueue() { return bool(*classes[className]->invokeMethod<bool>(this->object, "enqueue", "()Z")); }
bool PhantomCleanable::isEnqueued() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnqueued", "()Z")); }

Object PhantomReference::get() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "()Ljava/lang/Object;")); }
bool PhantomReference::refersTo0(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "refersTo0", "(Ljava/lang/Object;)Z", arg0)); }

Constructor ReflectionFactory::newConstructorForExternalization(Class arg0) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "newConstructorForExternalization", "(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0)); }
Constructor ReflectionFactory::newConstructorForSerialization(Class arg0) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "newConstructorForSerialization", "(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;", arg0)); }
Constructor ReflectionFactory::newConstructorForSerialization(Class arg0, Constructor arg1) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "newConstructorForSerialization", "(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)Ljava/lang/reflect/Constructor;", arg0, arg1)); }
MethodHandle ReflectionFactory::readObjectForSerialization(Class arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "readObjectForSerialization", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle ReflectionFactory::readObjectNoDataForSerialization(Class arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "readObjectNoDataForSerialization", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle ReflectionFactory::writeObjectForSerialization(Class arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "writeObjectForSerialization", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle ReflectionFactory::writeReplaceForSerialization(Class arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "writeReplaceForSerialization", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0)); }
MethodHandle ReflectionFactory::readResolveForSerialization(Class arg0) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "readResolveForSerialization", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0)); }
bool ReflectionFactory::hasStaticInitializerForSerialization(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasStaticInitializerForSerialization", "(Ljava/lang/Class;)Z", arg0)); }
Constructor ReflectionFactory::newOptionalDataExceptionForSerialization() { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "newOptionalDataExceptionForSerialization", "()Ljava/lang/reflect/Constructor;")); }
void ReflectionFactory::checkInitted() { (classes[className]->invokeStaticMethod<void>("checkInitted", "()V")); }
Method ReflectionFactory::findMethodForReflection(Method arg0) { return Method(*classes[className]->invokeStaticMethod<jobject>("findMethodForReflection", "(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;", arg0)); }
bool ReflectionFactory::packageEquals(Class arg0, Class arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("packageEquals", "(Ljava/lang/Class;Ljava/lang/Class;)Z", arg0, arg1)); }
bool ReflectionFactory::superHasAccessibleConstructor(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "superHasAccessibleConstructor", "(Ljava/lang/Class;)Z", arg0)); }
MethodHandle ReflectionFactory::findReadWriteObjectForSerialization(Class arg0, String arg1, Class arg2) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "findReadWriteObjectForSerialization", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;", arg0, arg1, arg2)); }
MethodHandle ReflectionFactory::getReplaceResolveForSerialization(Class arg0, String arg1) { return MethodHandle(*classes[className]->invokeMethod<jobject>(this->object, "getReplaceResolveForSerialization", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/invoke/MethodHandle;", arg0, arg1)); }
ReflectionFactory ReflectionFactory::getReflectionFactory() { return ReflectionFactory(*classes[className]->invokeStaticMethod<jobject>("getReflectionFactory", "()Ljdk/internal/reflect/ReflectionFactory;")); }
Constructor ReflectionFactory::copyConstructor(Constructor arg0) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "copyConstructor", "(Ljava/lang/reflect/Constructor;)Ljava/lang/reflect/Constructor;", arg0)); }
Object ReflectionFactory::newInstance(Constructor arg0, Object_interface arg1, Class arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "newInstance", "(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;", arg0, arg1, arg2)); }
Method ReflectionFactory::copyMethod(Method arg0) { return Method(*classes[className]->invokeMethod<jobject>(this->object, "copyMethod", "(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;", arg0)); }
Field ReflectionFactory::copyField(Field arg0) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "copyField", "(Ljava/lang/reflect/Field;)Ljava/lang/reflect/Field;", arg0)); }
FieldAccessor ReflectionFactory::newFieldAccessor(Field arg0, bool arg1) { return FieldAccessor(*classes[className]->invokeMethod<jobject>(this->object, "newFieldAccessor", "(Ljava/lang/reflect/Field;Z)Ljdk/internal/reflect/FieldAccessor;", arg0, arg1)); }
MethodAccessor ReflectionFactory::newMethodAccessor(Method arg0) { return MethodAccessor(*classes[className]->invokeMethod<jobject>(this->object, "newMethodAccessor", "(Ljava/lang/reflect/Method;)Ljdk/internal/reflect/MethodAccessor;", arg0)); }
ConstructorAccessor ReflectionFactory::getConstructorAccessor(Constructor arg0) { return ConstructorAccessor(*classes[className]->invokeMethod<jobject>(this->object, "getConstructorAccessor", "(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessor;", arg0)); }
ConstructorAccessor ReflectionFactory::newConstructorAccessor(Constructor arg0) { return ConstructorAccessor(*classes[className]->invokeMethod<jobject>(this->object, "newConstructorAccessor", "(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessor;", arg0)); }
void ReflectionFactory::setConstructorAccessor(Constructor arg0, ConstructorAccessor arg1) { (classes[className]->invokeMethod<void>(this->object, "setConstructorAccessor", "(Ljava/lang/reflect/Constructor;Ljdk/internal/reflect/ConstructorAccessor;)V", arg0, arg1)); }
int ReflectionFactory::inflationThreshold() { return int(*classes[className]->invokeStaticMethod<int>("inflationThreshold", "()I")); }
Constructor ReflectionFactory::generateConstructor(Class arg0, Constructor arg1) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "generateConstructor", "(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)Ljava/lang/reflect/Constructor;", arg0, arg1)); }
Constructor ReflectionFactory::newConstructor(Class arg0, Class_interface arg1, Class_interface arg2, int arg3, int arg4, String arg5, arr_B arg6, arr_B arg7) { return Constructor(*classes[className]->invokeMethod<jobject>(this->object, "newConstructor", "(Ljava/lang/Class;[Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B)Ljava/lang/reflect/Constructor;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
Method ReflectionFactory::leafCopyMethod(Method arg0) { return Method(*classes[className]->invokeMethod<jobject>(this->object, "leafCopyMethod", "(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;", arg0)); }

ClassSignature ClassRepository::parse(String arg0) { return ClassSignature(*classes[className]->invokeMethod<jobject>(this->object, "parse", "(Ljava/lang/String;)Lsun/reflect/generics/tree/ClassSignature;", arg0)); }
Type ClassRepository::computeSuperclass() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "computeSuperclass", "()Ljava/lang/reflect/Type;")); }
Type ClassRepository::getSuperclass() { return Type(*classes[className]->invokeMethod<jobject>(this->object, "getSuperclass", "()Ljava/lang/reflect/Type;")); }
ClassRepository ClassRepository::make(String arg0, GenericsFactory arg1) { return ClassRepository(*classes[className]->invokeStaticMethod<jobject>("make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/ClassRepository;", arg0, arg1)); }

ClassTypeSignature ClassSignature::getSuperclass() { return ClassTypeSignature(*classes[className]->invokeMethod<jobject>(this->object, "getSuperclass", "()Lsun/reflect/generics/tree/ClassTypeSignature;")); }
ClassSignature ClassSignature::make(FormalTypeParameter_interface arg0, ClassTypeSignature arg1, ClassTypeSignature_interface arg2) { return ClassSignature(*classes[className]->invokeStaticMethod<jobject>("make", "([Lsun/reflect/generics/tree/FormalTypeParameter;Lsun/reflect/generics/tree/ClassTypeSignature;[Lsun/reflect/generics/tree/ClassTypeSignature;)Lsun/reflect/generics/tree/ClassSignature;", arg0, arg1, arg2)); }
void ClassSignature::accept(Visitor arg0) { (classes[className]->invokeMethod<void>(this->object, "accept", "(Lsun/reflect/generics/visitor/Visitor;)V", arg0)); }

ClassTypeSignature ClassTypeSignature::make(List arg0) { return ClassTypeSignature(*classes[className]->invokeStaticMethod<jobject>("make", "(Ljava/util/List;)Lsun/reflect/generics/tree/ClassTypeSignature;", arg0)); }
List ClassTypeSignature::getPath() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getPath", "()Ljava/util/List;")); }



bool Class_EnclosingMethodInfo::isPartial() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPartial", "()Z")); }
String Class_EnclosingMethodInfo::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool Class_EnclosingMethodInfo::isMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMethod", "()Z")); }
String Class_EnclosingMethodInfo::getDescriptor() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDescriptor", "()Ljava/lang/String;")); }
Class Class_EnclosingMethodInfo::getEnclosingClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getEnclosingClass", "()Ljava/lang/Class;")); }
bool Class_EnclosingMethodInfo::isConstructor() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConstructor", "()Z")); }
void Class_EnclosingMethodInfo::validate(Object_interface arg0) { (classes[className]->invokeStaticMethod<void>("validate", "([Ljava/lang/Object;)V", arg0)); }



int PublicMethods_MethodList::length() { return int(*classes[className]->invokeMethod<int>(this->object, "length", "()I")); }
PublicMethods_MethodList PublicMethods_MethodList::merge(PublicMethods_MethodList arg0, Method arg1) { return PublicMethods_MethodList(*classes[className]->invokeStaticMethod<jobject>("merge", "(Ljava/lang/PublicMethods$MethodList;Ljava/lang/reflect/Method;)Ljava/lang/PublicMethods$MethodList;", arg0, arg1)); }
PublicMethods_MethodList PublicMethods_MethodList::merge(PublicMethods_MethodList arg0, PublicMethods_MethodList arg1) { return PublicMethods_MethodList(*classes[className]->invokeStaticMethod<jobject>("merge", "(Ljava/lang/PublicMethods$MethodList;Ljava/lang/PublicMethods$MethodList;)Ljava/lang/PublicMethods$MethodList;", arg0, arg1)); }
Method PublicMethods_MethodList::getMostSpecific() { return Method(*classes[className]->invokeMethod<jobject>(this->object, "getMostSpecific", "()Ljava/lang/reflect/Method;")); }
PublicMethods_MethodList PublicMethods_MethodList::filter(Method_interface arg0, String arg1, Class_interface arg2, bool arg3) { return PublicMethods_MethodList(*classes[className]->invokeStaticMethod<jobject>("filter", "([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;Z)Ljava/lang/PublicMethods$MethodList;", arg0, arg1, arg2, arg3)); }


int ConstantPool::getSize0(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getSize0", "(Ljava/lang/Object;)I", arg0)); }
Class ConstantPool::getClassAt0(Object arg0, int arg1) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getClassAt0", "(Ljava/lang/Object;I)Ljava/lang/Class;", arg0, arg1)); }
Class ConstantPool::getClassAtIfLoaded0(Object arg0, int arg1) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getClassAtIfLoaded0", "(Ljava/lang/Object;I)Ljava/lang/Class;", arg0, arg1)); }
int ConstantPool::getClassRefIndexAt0(Object arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getClassRefIndexAt0", "(Ljava/lang/Object;I)I", arg0, arg1)); }
Member ConstantPool::getMethodAt0(Object arg0, int arg1) { return Member(*classes[className]->invokeMethod<jobject>(this->object, "getMethodAt0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Member;", arg0, arg1)); }
Member ConstantPool::getMethodAtIfLoaded0(Object arg0, int arg1) { return Member(*classes[className]->invokeMethod<jobject>(this->object, "getMethodAtIfLoaded0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Member;", arg0, arg1)); }
Field ConstantPool::getFieldAt0(Object arg0, int arg1) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getFieldAt0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Field;", arg0, arg1)); }
Field ConstantPool::getFieldAtIfLoaded0(Object arg0, int arg1) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getFieldAtIfLoaded0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Field;", arg0, arg1)); }
int ConstantPool::getNameAndTypeRefIndexAt0(Object arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getNameAndTypeRefIndexAt0", "(Ljava/lang/Object;I)I", arg0, arg1)); }
int ConstantPool::getIntAt0(Object arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getIntAt0", "(Ljava/lang/Object;I)I", arg0, arg1)); }
long ConstantPool::getLongAt0(Object arg0, int arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "getLongAt0", "(Ljava/lang/Object;I)J", arg0, arg1)); }
float ConstantPool::getFloatAt0(Object arg0, int arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloatAt0", "(Ljava/lang/Object;I)F", arg0, arg1)); }
double ConstantPool::getDoubleAt0(Object arg0, int arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "getDoubleAt0", "(Ljava/lang/Object;I)D", arg0, arg1)); }
String ConstantPool::getStringAt0(Object arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getStringAt0", "(Ljava/lang/Object;I)Ljava/lang/String;", arg0, arg1)); }
String ConstantPool::getUTF8At0(Object arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUTF8At0", "(Ljava/lang/Object;I)Ljava/lang/String;", arg0, arg1)); }
byte ConstantPool::getTagAt0(Object arg0, int arg1) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getTagAt0", "(Ljava/lang/Object;I)B", arg0, arg1)); }
int ConstantPool::getSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSize", "()I")); }
Class ConstantPool::getClassAt(int arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getClassAt", "(I)Ljava/lang/Class;", arg0)); }
Class ConstantPool::getClassAtIfLoaded(int arg0) { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getClassAtIfLoaded", "(I)Ljava/lang/Class;", arg0)); }
int ConstantPool::getClassRefIndexAt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getClassRefIndexAt", "(I)I", arg0)); }
Member ConstantPool::getMethodAt(int arg0) { return Member(*classes[className]->invokeMethod<jobject>(this->object, "getMethodAt", "(I)Ljava/lang/reflect/Member;", arg0)); }
Member ConstantPool::getMethodAtIfLoaded(int arg0) { return Member(*classes[className]->invokeMethod<jobject>(this->object, "getMethodAtIfLoaded", "(I)Ljava/lang/reflect/Member;", arg0)); }
Field ConstantPool::getFieldAt(int arg0) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getFieldAt", "(I)Ljava/lang/reflect/Field;", arg0)); }
Field ConstantPool::getFieldAtIfLoaded(int arg0) { return Field(*classes[className]->invokeMethod<jobject>(this->object, "getFieldAtIfLoaded", "(I)Ljava/lang/reflect/Field;", arg0)); }
int ConstantPool::getNameAndTypeRefIndexAt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getNameAndTypeRefIndexAt", "(I)I", arg0)); }
int ConstantPool::getIntAt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getIntAt", "(I)I", arg0)); }
long ConstantPool::getLongAt(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getLongAt", "(I)J", arg0)); }
float ConstantPool::getFloatAt(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloatAt", "(I)F", arg0)); }
double ConstantPool::getDoubleAt(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDoubleAt", "(I)D", arg0)); }
String ConstantPool::getStringAt(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getStringAt", "(I)Ljava/lang/String;", arg0)); }
String ConstantPool::getUTF8At(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUTF8At", "(I)Ljava/lang/String;", arg0)); }
ConstantPool_Tag ConstantPool::getTagAt(int arg0) { return ConstantPool_Tag(*classes[className]->invokeMethod<jobject>(this->object, "getTagAt", "(I)Ljdk/internal/reflect/ConstantPool$Tag;", arg0)); }


ConstantPool_Tag ConstantPool_Tag::valueOf(String arg0) { return ConstantPool_Tag(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljdk/internal/reflect/ConstantPool$Tag;", arg0)); }
ConstantPool_Tag ConstantPool_Tag::valueOf(byte arg0) { return ConstantPool_Tag(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(B)Ljdk/internal/reflect/ConstantPool$Tag;", arg0)); }

RetentionPolicy AnnotationType::retention() { return RetentionPolicy(*classes[className]->invokeMethod<jobject>(this->object, "retention", "()Ljava/lang/annotation/RetentionPolicy;")); }
Map AnnotationType::memberTypes() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "memberTypes", "()Ljava/util/Map;")); }
Map AnnotationType::memberDefaults() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "memberDefaults", "()Ljava/util/Map;")); }
String AnnotationType::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
AnnotationType AnnotationType::getInstance(Class arg0) { return AnnotationType(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/lang/Class;)Lsun/reflect/annotation/AnnotationType;", arg0)); }
bool AnnotationType::isInherited() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInherited", "()Z")); }
Map AnnotationType::members() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "members", "()Ljava/util/Map;")); }
Class AnnotationType::invocationHandlerReturnType(Class arg0) { return Class(*classes[className]->invokeStaticMethod<jobject>("invocationHandlerReturnType", "(Ljava/lang/Class;)Ljava/lang/Class;", arg0)); }

RetentionPolicy RetentionPolicy::valueOf(String arg0) { return RetentionPolicy(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/annotation/RetentionPolicy;", arg0)); }




bool CrashReport::saveToFile(File arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "saveToFile", "(Ljava/io/File;)Z", arg0)); }
CrashReport CrashReport::makeCrashReport(Throwable arg0, String arg1) { return CrashReport(*classes[className]->invokeStaticMethod<jobject>("makeCrashReport", "(Ljava/lang/Throwable;Ljava/lang/String;)Lnet/minecraft/crash/CrashReport;", arg0, arg1)); }
CrashReportCategory CrashReport::makeCategory(String arg0) { return CrashReportCategory(*classes[className]->invokeMethod<jobject>(this->object, "makeCategory", "(Ljava/lang/String;)Lnet/minecraft/crash/CrashReportCategory;", arg0)); }
String CrashReport::getCompleteReport() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCompleteReport", "()Ljava/lang/String;")); }
CrashReportCategory CrashReport::getCategory() { return CrashReportCategory(*classes[className]->invokeMethod<jobject>(this->object, "getCategory", "()Lnet/minecraft/crash/CrashReportCategory;")); }
Throwable CrashReport::getCrashCause() { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "getCrashCause", "()Ljava/lang/Throwable;")); }
void CrashReport::populateEnvironment() { (classes[className]->invokeMethod<void>(this->object, "populateEnvironment", "()V")); }
void CrashReport::getSectionsInStringBuilder(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "getSectionsInStringBuilder", "(Ljava/lang/StringBuilder;)V", arg0)); }
String CrashReport::getCauseStackTraceOrString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCauseStackTraceOrString", "()Ljava/lang/String;")); }
String CrashReport::getWittyComment() { return String(*classes[className]->invokeStaticMethod<jobject>("getWittyComment", "()Ljava/lang/String;")); }
CrashReportCategory CrashReport::makeCategoryDepth(String arg0, int arg1) { return CrashReportCategory(*classes[className]->invokeMethod<jobject>(this->object, "makeCategoryDepth", "(Ljava/lang/String;I)Lnet/minecraft/crash/CrashReportCategory;", arg0, arg1)); }
String CrashReport::getDescription() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDescription", "()Ljava/lang/String;")); }
File CrashReport::getFile() { return File(*classes[className]->invokeMethod<jobject>(this->object, "getFile", "()Ljava/io/File;")); }

void CrashReportCategory::addCrashSectionCallable(String arg0, Callable arg1) { (classes[className]->invokeMethod<void>(this->object, "addCrashSectionCallable", "(Ljava/lang/String;Ljava/util/concurrent/Callable;)V", arg0, arg1)); }
void CrashReportCategory::addCrashSection(String arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "addCrashSection", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
void CrashReportCategory::addBlockInfo(CrashReportCategory arg0, BlockPos arg1, IBlockState arg2) { (classes[className]->invokeStaticMethod<void>("addBlockInfo", "(Lnet/minecraft/crash/CrashReportCategory;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", arg0, arg1, arg2)); }
void CrashReportCategory::addBlockInfo(CrashReportCategory arg0, BlockPos arg1, Block arg2, int arg3) { (classes[className]->invokeStaticMethod<void>("addBlockInfo", "(Lnet/minecraft/crash/CrashReportCategory;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;I)V", arg0, arg1, arg2, arg3)); }
void CrashReportCategory::appendToStringBuilder(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "appendToStringBuilder", "(Ljava/lang/StringBuilder;)V", arg0)); }
int CrashReportCategory::getPrunedStackTrace(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getPrunedStackTrace", "(I)I", arg0)); }
String CrashReportCategory::getCoordinateInfo(BlockPos arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getCoordinateInfo", "(Lnet/minecraft/util/BlockPos;)Ljava/lang/String;", arg0)); }
String CrashReportCategory::getCoordinateInfo(double arg0, double arg1, double arg2) { return String(*classes[className]->invokeStaticMethod<jobject>("getCoordinateInfo", "(DDD)Ljava/lang/String;", arg0, arg1, arg2)); }
void CrashReportCategory::addCrashSectionThrowable(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "addCrashSectionThrowable", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
bool CrashReportCategory::firstTwoElementsOfStackTraceMatch(StackTraceElement arg0, StackTraceElement arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "firstTwoElementsOfStackTraceMatch", "(Ljava/lang/StackTraceElement;Ljava/lang/StackTraceElement;)Z", arg0, arg1)); }
void CrashReportCategory::trimStackTraceEntriesFromBottom(int arg0) { (classes[className]->invokeMethod<void>(this->object, "trimStackTraceEntriesFromBottom", "(I)V", arg0)); }


BlockPos BlockPos::west() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "west", "()Lnet/minecraft/util/BlockPos;")); }
BlockPos BlockPos::west(int arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "west", "(I)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::east() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "east", "()Lnet/minecraft/util/BlockPos;")); }
BlockPos BlockPos::east(int arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "east", "(I)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::north() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "north", "()Lnet/minecraft/util/BlockPos;")); }
BlockPos BlockPos::north(int arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "north", "(I)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::south() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "south", "()Lnet/minecraft/util/BlockPos;")); }
BlockPos BlockPos::south(int arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "south", "(I)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::fromLong(long arg0) { return BlockPos(*classes[className]->invokeStaticMethod<jobject>("fromLong", "(J)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::crossProduct(Vec3i arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "crossProduct", "(Lnet/minecraft/util/Vec3i;)Lnet/minecraft/util/BlockPos;", arg0)); }
Iterable BlockPos::getAllInBox(BlockPos arg0, BlockPos arg1) { return Iterable(*classes[className]->invokeStaticMethod<jobject>("getAllInBox", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;)Ljava/lang/Iterable;", arg0, arg1)); }
Iterable BlockPos::getAllInBoxMutable(BlockPos arg0, BlockPos arg1) { return Iterable(*classes[className]->invokeStaticMethod<jobject>("getAllInBoxMutable", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;)Ljava/lang/Iterable;", arg0, arg1)); }
BlockPos BlockPos::down(int arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "down", "(I)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::down() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "down", "()Lnet/minecraft/util/BlockPos;")); }
BlockPos BlockPos::subtract(Vec3i arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "subtract", "(Lnet/minecraft/util/Vec3i;)Lnet/minecraft/util/BlockPos;", arg0)); }
long BlockPos::toLong() { return long(*classes[className]->invokeMethod<long>(this->object, "toLong", "()J")); }
BlockPos BlockPos::up() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "up", "()Lnet/minecraft/util/BlockPos;")); }
BlockPos BlockPos::up(int arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "up", "(I)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::add(Vec3i arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Lnet/minecraft/util/Vec3i;)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos BlockPos::add(int arg0, int arg1, int arg2) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "add", "(III)Lnet/minecraft/util/BlockPos;", arg0, arg1, arg2)); }
BlockPos BlockPos::add(double arg0, double arg1, double arg2) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "add", "(DDD)Lnet/minecraft/util/BlockPos;", arg0, arg1, arg2)); }
BlockPos BlockPos::offset(EnumFacing arg0, int arg1) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "offset", "(Lnet/minecraft/util/EnumFacing;I)Lnet/minecraft/util/BlockPos;", arg0, arg1)); }
BlockPos BlockPos::offset(EnumFacing arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "offset", "(Lnet/minecraft/util/EnumFacing;)Lnet/minecraft/util/BlockPos;", arg0)); }

double Vec3i::distanceSq(double arg0, double arg1, double arg2) { return double(*classes[className]->invokeMethod<double>(this->object, "distanceSq", "(DDD)D", arg0, arg1, arg2)); }
double Vec3i::distanceSq(Vec3i arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "distanceSq", "(Lnet/minecraft/util/Vec3i;)D", arg0)); }
int Vec3i::getX() { return int(*classes[className]->invokeMethod<int>(this->object, "getX", "()I")); }
int Vec3i::getZ() { return int(*classes[className]->invokeMethod<int>(this->object, "getZ", "()I")); }
int Vec3i::getY() { return int(*classes[className]->invokeMethod<int>(this->object, "getY", "()I")); }
Vec3i Vec3i::crossProduct(Vec3i arg0) { return Vec3i(*classes[className]->invokeMethod<jobject>(this->object, "crossProduct", "(Lnet/minecraft/util/Vec3i;)Lnet/minecraft/util/Vec3i;", arg0)); }
double Vec3i::distanceSqToCenter(double arg0, double arg1, double arg2) { return double(*classes[className]->invokeMethod<double>(this->object, "distanceSqToCenter", "(DDD)D", arg0, arg1, arg2)); }
bool Vec3i::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Vec3i::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Vec3i::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

EnumFacing_Axis EnumFacing::getAxis() { return EnumFacing_Axis(*classes[className]->invokeMethod<jobject>(this->object, "getAxis", "()Lnet/minecraft/util/EnumFacing$Axis;")); }
EnumFacing EnumFacing::rotateY() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "rotateY", "()Lnet/minecraft/util/EnumFacing;")); }
String EnumFacing::getName2() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName2", "()Ljava/lang/String;")); }
EnumFacing EnumFacing::getFront(int arg0) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("getFront", "(I)Lnet/minecraft/util/EnumFacing;", arg0)); }
EnumFacing EnumFacing::rotateX() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "rotateX", "()Lnet/minecraft/util/EnumFacing;")); }
EnumFacing EnumFacing::rotateZ() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "rotateZ", "()Lnet/minecraft/util/EnumFacing;")); }
EnumFacing EnumFacing::rotateYCCW() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "rotateYCCW", "()Lnet/minecraft/util/EnumFacing;")); }
EnumFacing EnumFacing::byName(String arg0) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("byName", "(Ljava/lang/String;)Lnet/minecraft/util/EnumFacing;", arg0)); }
EnumFacing EnumFacing::fromAngle(double arg0) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("fromAngle", "(D)Lnet/minecraft/util/EnumFacing;", arg0)); }
EnumFacing EnumFacing::rotateAround(EnumFacing_Axis arg0) { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "rotateAround", "(Lnet/minecraft/util/EnumFacing$Axis;)Lnet/minecraft/util/EnumFacing;", arg0)); }
EnumFacing EnumFacing::getFacingFromVector(float arg0, float arg1, float arg2) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("getFacingFromVector", "(FFF)Lnet/minecraft/util/EnumFacing;", arg0, arg1, arg2)); }
EnumFacing EnumFacing::func_181076_a(EnumFacing_AxisDirection arg0, EnumFacing_Axis arg1) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("func_181076_a", "(Lnet/minecraft/util/EnumFacing$AxisDirection;Lnet/minecraft/util/EnumFacing$Axis;)Lnet/minecraft/util/EnumFacing;", arg0, arg1)); }
Vec3i EnumFacing::getDirectionVec() { return Vec3i(*classes[className]->invokeMethod<jobject>(this->object, "getDirectionVec", "()Lnet/minecraft/util/Vec3i;")); }
int EnumFacing::getHorizontalIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getHorizontalIndex", "()I")); }
int EnumFacing::getFrontOffsetX() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrontOffsetX", "()I")); }
int EnumFacing::getFrontOffsetY() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrontOffsetY", "()I")); }
int EnumFacing::getFrontOffsetZ() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrontOffsetZ", "()I")); }
EnumFacing EnumFacing::getOpposite() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "getOpposite", "()Lnet/minecraft/util/EnumFacing;")); }
EnumFacing_AxisDirection EnumFacing::getAxisDirection() { return EnumFacing_AxisDirection(*classes[className]->invokeMethod<jobject>(this->object, "getAxisDirection", "()Lnet/minecraft/util/EnumFacing$AxisDirection;")); }
EnumFacing EnumFacing::getHorizontal(int arg0) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("getHorizontal", "(I)Lnet/minecraft/util/EnumFacing;", arg0)); }
EnumFacing EnumFacing::random(Random arg0) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("random", "(Ljava/util/Random;)Lnet/minecraft/util/EnumFacing;", arg0)); }
String EnumFacing::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
EnumFacing EnumFacing::valueOf(String arg0) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/EnumFacing;", arg0)); }
int EnumFacing::getIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getIndex", "()I")); }

String EnumFacing_Axis::getName2() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName2", "()Ljava/lang/String;")); }
EnumFacing_Axis EnumFacing_Axis::byName(String arg0) { return EnumFacing_Axis(*classes[className]->invokeStaticMethod<jobject>("byName", "(Ljava/lang/String;)Lnet/minecraft/util/EnumFacing$Axis;", arg0)); }
bool EnumFacing_Axis::isVertical() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVertical", "()Z")); }
EnumFacing_Plane EnumFacing_Axis::getPlane() { return EnumFacing_Plane(*classes[className]->invokeMethod<jobject>(this->object, "getPlane", "()Lnet/minecraft/util/EnumFacing$Plane;")); }
bool EnumFacing_Axis::isHorizontal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHorizontal", "()Z")); }
String EnumFacing_Axis::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
EnumFacing_Axis EnumFacing_Axis::valueOf(String arg0) { return EnumFacing_Axis(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/EnumFacing$Axis;", arg0)); }

EnumFacing EnumFacing_Plane::random(Random arg0) { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "random", "(Ljava/util/Random;)Lnet/minecraft/util/EnumFacing;", arg0)); }
EnumFacing_Plane EnumFacing_Plane::valueOf(String arg0) { return EnumFacing_Plane(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/EnumFacing$Plane;", arg0)); }

String EnumFacing_AxisDirection::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
EnumFacing_AxisDirection EnumFacing_AxisDirection::valueOf(String arg0) { return EnumFacing_AxisDirection(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/EnumFacing$AxisDirection;", arg0)); }
int EnumFacing_AxisDirection::getOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getOffset", "()I")); }


void Block::onLanded(World arg0, Entity arg1) { (classes[className]->invokeMethod<void>(this->object, "onLanded", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/Entity;)V", arg0, arg1)); }
int Block::getStateId(IBlockState arg0) { return int(*classes[className]->invokeStaticMethod<int>("getStateId", "(Lnet/minecraft/block/state/IBlockState;)I", arg0)); }
bool Block::isFullCube() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFullCube", "()Z")); }
bool Block::canReplace(World arg0, BlockPos arg1, EnumFacing arg2, ItemStack arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canReplace", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;Lnet/minecraft/item/ItemStack;)Z", arg0, arg1, arg2, arg3)); }
void Block::updateTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (classes[className]->invokeMethod<void>(this->object, "updateTick", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Ljava/util/Random;)V", arg0, arg1, arg2, arg3)); }
bool Block::isPassable(IBlockAccess arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPassable", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
void Block::randomTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (classes[className]->invokeMethod<void>(this->object, "randomTick", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Ljava/util/Random;)V", arg0, arg1, arg2, arg3)); }
int Block::tickRate(World arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "tickRate", "(Lnet/minecraft/world/World;)I", arg0)); }
void Block::breakBlock(World arg0, BlockPos arg1, IBlockState arg2) { (classes[className]->invokeMethod<void>(this->object, "breakBlock", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", arg0, arg1, arg2)); }
bool Block::isEqualTo(Block arg0, Block arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isEqualTo", "(Lnet/minecraft/block/Block;Lnet/minecraft/block/Block;)Z", arg0, arg1)); }
BlockState Block::getBlockState() { return BlockState(*classes[className]->invokeMethod<jobject>(this->object, "getBlockState", "()Lnet/minecraft/block/state/BlockState;")); }
Material Block::getMaterial() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "getMaterial", "()Lnet/minecraft/block/material/Material;")); }
bool Block::isFlowerPot() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFlowerPot", "()Z")); }
Block Block::getBlockFromItem(Item arg0) { return Block(*classes[className]->invokeStaticMethod<jobject>("getBlockFromItem", "(Lnet/minecraft/item/Item;)Lnet/minecraft/block/Block;", arg0)); }
int Block::getDamageValue(World arg0, BlockPos arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getDamageValue", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)I", arg0, arg1)); }
int Block::getLightOpacity() { return int(*classes[className]->invokeMethod<int>(this->object, "getLightOpacity", "()I")); }
int Block::getLightValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getLightValue", "()I")); }
bool Block::hasComparatorInputOverride() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasComparatorInputOverride", "()Z")); }
IBlockState Block::getDefaultState() { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultState", "()Lnet/minecraft/block/state/IBlockState;")); }
void Block::dropBlockAsItem(World arg0, BlockPos arg1, IBlockState arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "dropBlockAsItem", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;I)V", arg0, arg1, arg2, arg3)); }
void Block::onNeighborBlockChange(World arg0, BlockPos arg1, IBlockState arg2, Block arg3) { (classes[className]->invokeMethod<void>(this->object, "onNeighborBlockChange", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/block/Block;)V", arg0, arg1, arg2, arg3)); }
bool Block::getUseNeighborBrightness() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getUseNeighborBrightness", "()Z")); }
AxisAlignedBB Block::getCollisionBoundingBox(World arg0, BlockPos arg1, IBlockState arg2) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "getCollisionBoundingBox", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1, arg2)); }
bool Block::canCollideCheck(IBlockState arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canCollideCheck", "(Lnet/minecraft/block/state/IBlockState;Z)Z", arg0, arg1)); }
MovingObjectPosition Block::collisionRayTrace(World arg0, BlockPos arg1, Vec3 arg2, Vec3 arg3) { return MovingObjectPosition(*classes[className]->invokeMethod<jobject>(this->object, "collisionRayTrace", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/Vec3;Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/MovingObjectPosition;", arg0, arg1, arg2, arg3)); }
IBlockState Block::getActualState(IBlockState arg0, IBlockAccess arg1, BlockPos arg2) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getActualState", "(Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/block/state/IBlockState;", arg0, arg1, arg2)); }
void Block::registerBlock(int arg0, ResourceLocation arg1, Block arg2) { (classes[className]->invokeStaticMethod<void>("registerBlock", "(ILnet/minecraft/util/ResourceLocation;Lnet/minecraft/block/Block;)V", arg0, arg1, arg2)); }
void Block::registerBlock(int arg0, String arg1, Block arg2) { (classes[className]->invokeStaticMethod<void>("registerBlock", "(ILjava/lang/String;Lnet/minecraft/block/Block;)V", arg0, arg1, arg2)); }
EnumWorldBlockLayer Block::getBlockLayer() { return EnumWorldBlockLayer(*classes[className]->invokeMethod<jobject>(this->object, "getBlockLayer", "()Lnet/minecraft/util/EnumWorldBlockLayer;")); }
IBlockState Block::onBlockPlaced(World arg0, BlockPos arg1, EnumFacing arg2, float arg3, float arg4, float arg5, int arg6, EntityLivingBase arg7) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "onBlockPlaced", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;FFFILnet/minecraft/entity/EntityLivingBase;)Lnet/minecraft/block/state/IBlockState;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
Block Block::getBlockById(int arg0) { return Block(*classes[className]->invokeStaticMethod<jobject>("getBlockById", "(I)Lnet/minecraft/block/Block;", arg0)); }
IBlockState Block::getStateFromMeta(int arg0) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getStateFromMeta", "(I)Lnet/minecraft/block/state/IBlockState;", arg0)); }
bool Block::isFullBlock() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFullBlock", "()Z")); }
bool Block::isTranslucent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTranslucent", "()Z")); }
MapColor Block::getMapColor(IBlockState arg0) { return MapColor(*classes[className]->invokeMethod<jobject>(this->object, "getMapColor", "(Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/block/material/MapColor;", arg0)); }
void Block::setBlockBounds(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "setBlockBounds", "(FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool Block::isOpaqueCube() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpaqueCube", "()Z")); }
BlockState Block::createBlockState() { return BlockState(*classes[className]->invokeMethod<jobject>(this->object, "createBlockState", "()Lnet/minecraft/block/state/BlockState;")); }
void Block::setDefaultState(IBlockState arg0) { (classes[className]->invokeMethod<void>(this->object, "setDefaultState", "(Lnet/minecraft/block/state/IBlockState;)V", arg0)); }
Block Block::setStepSound(Block_SoundType arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setStepSound", "(Lnet/minecraft/block/Block$SoundType;)Lnet/minecraft/block/Block;", arg0)); }
Block Block::setLightOpacity(int arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setLightOpacity", "(I)Lnet/minecraft/block/Block;", arg0)); }
Block Block::setLightLevel(float arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setLightLevel", "(F)Lnet/minecraft/block/Block;", arg0)); }
Block Block::setResistance(float arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setResistance", "(F)Lnet/minecraft/block/Block;", arg0)); }
bool Block::canProvidePower() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canProvidePower", "()Z")); }
Block Block::setHardness(float arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setHardness", "(F)Lnet/minecraft/block/Block;", arg0)); }
Block Block::setBlockUnbreakable() { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setBlockUnbreakable", "()Lnet/minecraft/block/Block;")); }
float Block::getBlockHardness(World arg0, BlockPos arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "getBlockHardness", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)F", arg0, arg1)); }
Block Block::setTickRandomly(bool arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setTickRandomly", "(Z)Lnet/minecraft/block/Block;", arg0)); }
bool Block::getTickRandomly() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getTickRandomly", "()Z")); }
bool Block::hasTileEntity() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasTileEntity", "()Z")); }
int Block::getMixedBrightnessForBlock(IBlockAccess arg0, BlockPos arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getMixedBrightnessForBlock", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)I", arg0, arg1)); }
bool Block::shouldSideBeRendered(IBlockAccess arg0, BlockPos arg1, EnumFacing arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldSideBeRendered", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)Z", arg0, arg1, arg2)); }
bool Block::isBlockSolid(IBlockAccess arg0, BlockPos arg1, EnumFacing arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockSolid", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)Z", arg0, arg1, arg2)); }
AxisAlignedBB Block::getSelectedBoundingBox(World arg0, BlockPos arg1) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "getSelectedBoundingBox", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1)); }
bool Block::isCollidable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCollidable", "()Z")); }
void Block::onBlockDestroyedByPlayer(World arg0, BlockPos arg1, IBlockState arg2) { (classes[className]->invokeMethod<void>(this->object, "onBlockDestroyedByPlayer", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", arg0, arg1, arg2)); }
void Block::onBlockAdded(World arg0, BlockPos arg1, IBlockState arg2) { (classes[className]->invokeMethod<void>(this->object, "onBlockAdded", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", arg0, arg1, arg2)); }
int Block::quantityDropped(Random arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "quantityDropped", "(Ljava/util/Random;)I", arg0)); }
Item Block::getItemDropped(IBlockState arg0, Random arg1, int arg2) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "getItemDropped", "(Lnet/minecraft/block/state/IBlockState;Ljava/util/Random;I)Lnet/minecraft/item/Item;", arg0, arg1, arg2)); }
void Block::dropBlockAsItemWithChance(World arg0, BlockPos arg1, IBlockState arg2, float arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "dropBlockAsItemWithChance", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;FI)V", arg0, arg1, arg2, arg3, arg4)); }
int Block::quantityDroppedWithBonus(int arg0, Random arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "quantityDroppedWithBonus", "(ILjava/util/Random;)I", arg0, arg1)); }
int Block::damageDropped(IBlockState arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "damageDropped", "(Lnet/minecraft/block/state/IBlockState;)I", arg0)); }
void Block::spawnAsEntity(World arg0, BlockPos arg1, ItemStack arg2) { (classes[className]->invokeStaticMethod<void>("spawnAsEntity", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/item/ItemStack;)V", arg0, arg1, arg2)); }
void Block::dropXpOnBlockBreak(World arg0, BlockPos arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "dropXpOnBlockBreak", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;I)V", arg0, arg1, arg2)); }
void Block::setBlockBoundsBasedOnState(IBlockAccess arg0, BlockPos arg1) { (classes[className]->invokeMethod<void>(this->object, "setBlockBoundsBasedOnState", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)V", arg0, arg1)); }
bool Block::isVecInsideYZBounds(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInsideYZBounds", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
bool Block::isVecInsideXZBounds(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInsideXZBounds", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
bool Block::isVecInsideXYBounds(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInsideXYBounds", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
bool Block::canPlaceBlockOnSide(World arg0, BlockPos arg1, EnumFacing arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPlaceBlockOnSide", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)Z", arg0, arg1, arg2)); }
bool Block::onBlockActivated(World arg0, BlockPos arg1, IBlockState arg2, EntityPlayer arg3, EnumFacing arg4, float arg5, float arg6, float arg7) { return bool(*classes[className]->invokeMethod<bool>(this->object, "onBlockActivated", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/EnumFacing;FFF)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
void Block::onBlockClicked(World arg0, BlockPos arg1, EntityPlayer arg2) { (classes[className]->invokeMethod<void>(this->object, "onBlockClicked", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/entity/player/EntityPlayer;)V", arg0, arg1, arg2)); }
double Block::getBlockBoundsMinX() { return double(*classes[className]->invokeMethod<double>(this->object, "getBlockBoundsMinX", "()D")); }
double Block::getBlockBoundsMaxX() { return double(*classes[className]->invokeMethod<double>(this->object, "getBlockBoundsMaxX", "()D")); }
double Block::getBlockBoundsMinY() { return double(*classes[className]->invokeMethod<double>(this->object, "getBlockBoundsMinY", "()D")); }
double Block::getBlockBoundsMaxY() { return double(*classes[className]->invokeMethod<double>(this->object, "getBlockBoundsMaxY", "()D")); }
double Block::getBlockBoundsMinZ() { return double(*classes[className]->invokeMethod<double>(this->object, "getBlockBoundsMinZ", "()D")); }
double Block::getBlockBoundsMaxZ() { return double(*classes[className]->invokeMethod<double>(this->object, "getBlockBoundsMaxZ", "()D")); }
int Block::getBlockColor() { return int(*classes[className]->invokeMethod<int>(this->object, "getBlockColor", "()I")); }
int Block::getRenderColor(IBlockState arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getRenderColor", "(Lnet/minecraft/block/state/IBlockState;)I", arg0)); }
int Block::colorMultiplier(IBlockAccess arg0, BlockPos arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "colorMultiplier", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)I", arg0, arg1)); }
int Block::colorMultiplier(IBlockAccess arg0, BlockPos arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "colorMultiplier", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;I)I", arg0, arg1, arg2)); }
void Block::harvestBlock(World arg0, EntityPlayer arg1, BlockPos arg2, IBlockState arg3, TileEntity arg4) { (classes[className]->invokeMethod<void>(this->object, "harvestBlock", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/tileentity/TileEntity;)V", arg0, arg1, arg2, arg3, arg4)); }
bool Block::canSilkHarvest() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSilkHarvest", "()Z")); }
ItemStack Block::createStackedBlock(IBlockState arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "createStackedBlock", "(Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/item/ItemStack;", arg0)); }
void Block::onBlockPlacedBy(World arg0, BlockPos arg1, IBlockState arg2, EntityLivingBase arg3, ItemStack arg4) { (classes[className]->invokeMethod<void>(this->object, "onBlockPlacedBy", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/item/ItemStack;)V", arg0, arg1, arg2, arg3, arg4)); }
bool Block::getEnableStats() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getEnableStats", "()Z")); }
Block Block::disableStats() { return Block(*classes[className]->invokeMethod<jobject>(this->object, "disableStats", "()Lnet/minecraft/block/Block;")); }
int Block::getMobilityFlag() { return int(*classes[className]->invokeMethod<int>(this->object, "getMobilityFlag", "()I")); }
void Block::getSubBlocks(Item arg0, CreativeTabs arg1, List arg2) { (classes[className]->invokeMethod<void>(this->object, "getSubBlocks", "(Lnet/minecraft/item/Item;Lnet/minecraft/creativetab/CreativeTabs;Ljava/util/List;)V", arg0, arg1, arg2)); }
CreativeTabs Block::getCreativeTabToDisplayOn() { return CreativeTabs(*classes[className]->invokeMethod<jobject>(this->object, "getCreativeTabToDisplayOn", "()Lnet/minecraft/creativetab/CreativeTabs;")); }
void Block::onBlockHarvested(World arg0, BlockPos arg1, IBlockState arg2, EntityPlayer arg3) { (classes[className]->invokeMethod<void>(this->object, "onBlockHarvested", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/player/EntityPlayer;)V", arg0, arg1, arg2, arg3)); }
void Block::fillWithRain(World arg0, BlockPos arg1) { (classes[className]->invokeMethod<void>(this->object, "fillWithRain", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)V", arg0, arg1)); }
bool Block::requiresUpdates() { return bool(*classes[className]->invokeMethod<bool>(this->object, "requiresUpdates", "()Z")); }
bool Block::canDropFromExplosion(Explosion arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDropFromExplosion", "(Lnet/minecraft/world/Explosion;)Z", arg0)); }
bool Block::isAssociatedBlock(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAssociatedBlock", "(Lnet/minecraft/block/Block;)Z", arg0)); }
int Block::getComparatorInputOverride(World arg0, BlockPos arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getComparatorInputOverride", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)I", arg0, arg1)); }
IBlockState Block::getStateForEntityRender(IBlockState arg0) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getStateForEntityRender", "(Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/block/state/IBlockState;", arg0)); }
Block_EnumOffsetType Block::getOffsetType() { return Block_EnumOffsetType(*classes[className]->invokeMethod<jobject>(this->object, "getOffsetType", "()Lnet/minecraft/block/Block$EnumOffsetType;")); }
void Block::registerBlocks() { (classes[className]->invokeStaticMethod<void>("registerBlocks", "()V")); }
int Block::getIdFromBlock(Block arg0) { return int(*classes[className]->invokeStaticMethod<int>("getIdFromBlock", "(Lnet/minecraft/block/Block;)I", arg0)); }
IBlockState Block::getStateById(int arg0) { return IBlockState(*classes[className]->invokeStaticMethod<jobject>("getStateById", "(I)Lnet/minecraft/block/state/IBlockState;", arg0)); }
Block Block::getBlockFromName(String arg0) { return Block(*classes[className]->invokeStaticMethod<jobject>("getBlockFromName", "(Ljava/lang/String;)Lnet/minecraft/block/Block;", arg0)); }
String Block::getLocalizedName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLocalizedName", "()Ljava/lang/String;")); }
Block Block::setUnlocalizedName(String arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setUnlocalizedName", "(Ljava/lang/String;)Lnet/minecraft/block/Block;", arg0)); }
String Block::getUnlocalizedName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava/lang/String;")); }
Block Block::setCreativeTab(CreativeTabs arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "setCreativeTab", "(Lnet/minecraft/creativetab/CreativeTabs;)Lnet/minecraft/block/Block;", arg0)); }
void Block::addCollisionBoxesToList(World arg0, BlockPos arg1, IBlockState arg2, AxisAlignedBB arg3, List arg4, Entity arg5) { (classes[className]->invokeMethod<void>(this->object, "addCollisionBoxesToList", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/AxisAlignedBB;Ljava/util/List;Lnet/minecraft/entity/Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
Vec3 Block::modifyAcceleration(World arg0, BlockPos arg1, Entity arg2, Vec3 arg3) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "modifyAcceleration", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/entity/Entity;Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/Vec3;", arg0, arg1, arg2, arg3)); }
bool Block::isBlockNormalCube() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockNormalCube", "()Z")); }
bool Block::canPlaceBlockAt(World arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPlaceBlockAt", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
bool Block::isReplaceable(World arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReplaceable", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
int Block::getStrongPower(IBlockAccess arg0, BlockPos arg1, IBlockState arg2, EnumFacing arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "getStrongPower", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/EnumFacing;)I", arg0, arg1, arg2, arg3)); }
bool Block::isNormalCube() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNormalCube", "()Z")); }
int Block::getWeakPower(IBlockAccess arg0, BlockPos arg1, IBlockState arg2, EnumFacing arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "getWeakPower", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/EnumFacing;)I", arg0, arg1, arg2, arg3)); }
bool Block::onBlockEventReceived(World arg0, BlockPos arg1, IBlockState arg2, int arg3, int arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "onBlockEventReceived", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;II)Z", arg0, arg1, arg2, arg3, arg4)); }
void Block::randomDisplayTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (classes[className]->invokeMethod<void>(this->object, "randomDisplayTick", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Ljava/util/Random;)V", arg0, arg1, arg2, arg3)); }
bool Block::func_181623_g() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181623_g", "()Z")); }
void Block::onEntityCollidedWithBlock(World arg0, BlockPos arg1, Entity arg2) { (classes[className]->invokeMethod<void>(this->object, "onEntityCollidedWithBlock", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/entity/Entity;)V", arg0, arg1, arg2)); }
void Block::onEntityCollidedWithBlock(World arg0, BlockPos arg1, IBlockState arg2, Entity arg3) { (classes[className]->invokeMethod<void>(this->object, "onEntityCollidedWithBlock", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/Entity;)V", arg0, arg1, arg2, arg3)); }
void Block::onFallenUpon(World arg0, BlockPos arg1, Entity arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "onFallenUpon", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/entity/Entity;F)V", arg0, arg1, arg2, arg3)); }
int Block::getRenderType() { return int(*classes[className]->invokeMethod<int>(this->object, "getRenderType", "()I")); }
int Block::getMetaFromState(IBlockState arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMetaFromState", "(Lnet/minecraft/block/state/IBlockState;)I", arg0)); }
bool Block::isVisuallyOpaque() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVisuallyOpaque", "()Z")); }
float Block::getExplosionResistance(Entity arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getExplosionResistance", "(Lnet/minecraft/entity/Entity;)F", arg0)); }
float Block::getPlayerRelativeBlockHardness(EntityPlayer arg0, World arg1, BlockPos arg2) { return float(*classes[className]->invokeMethod<float>(this->object, "getPlayerRelativeBlockHardness", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)F", arg0, arg1, arg2)); }
void Block::onBlockDestroyedByExplosion(World arg0, BlockPos arg1, Explosion arg2) { (classes[className]->invokeMethod<void>(this->object, "onBlockDestroyedByExplosion", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/world/Explosion;)V", arg0, arg1, arg2)); }
void Block::setBlockBoundsForItemRender() { (classes[className]->invokeMethod<void>(this->object, "setBlockBoundsForItemRender", "()V")); }
float Block::getAmbientOcclusionLightValue() { return float(*classes[className]->invokeMethod<float>(this->object, "getAmbientOcclusionLightValue", "()F")); }
Item Block::getItem(World arg0, BlockPos arg1) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "getItem", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/item/Item;", arg0, arg1)); }
String Block::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

bool World::checkLight(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkLight", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
void World::playAuxSFX(int arg0, BlockPos arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "playAuxSFX", "(ILnet/minecraft/util/BlockPos;I)V", arg0, arg1, arg2)); }
bool World::canSeeSky(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSeeSky", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
int World::getLight(BlockPos arg0, bool arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getLight", "(Lnet/minecraft/util/BlockPos;Z)I", arg0, arg1)); }
int World::getLight(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getLight", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
bool World::isDaytime() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDaytime", "()Z")); }
void World::playSound(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5, bool arg6) { (classes[className]->invokeMethod<void>(this->object, "playSound", "(DDDLjava/lang/String;FFZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void World::playRecord(BlockPos arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "playRecord", "(Lnet/minecraft/util/BlockPos;Ljava/lang/String;)V", arg0, arg1)); }
bool World::isRaining() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRaining", "()Z")); }
bool World::isWater(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWater", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool World::canSnowAt(BlockPos arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSnowAt", "(Lnet/minecraft/util/BlockPos;Z)Z", arg0, arg1)); }
List World::getPlayers(Class arg0, Predicate arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getPlayers", "(Ljava/lang/Class;Lcom/google/common/base/Predicate;)Ljava/util/List;", arg0, arg1)); }
double World::getHorizon() { return double(*classes[className]->invokeMethod<double>(this->object, "getHorizon", "()D")); }
BlockPos World::getHeight(BlockPos arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getHeight", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/util/BlockPos;", arg0)); }
int World::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
void World::tick() { (classes[className]->invokeMethod<void>(this->object, "tick", "()V")); }
bool World::isValid(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isValid", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
void World::playSoundToNearExcept(EntityPlayer arg0, String arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "playSoundToNearExcept", "(Lnet/minecraft/entity/player/EntityPlayer;Ljava/lang/String;FF)V", arg0, arg1, arg2, arg3)); }
void World::joinEntityInSurroundings(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "joinEntityInSurroundings", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
int World::getLastLightningBolt() { return int(*classes[className]->invokeMethod<int>(this->object, "getLastLightningBolt", "()I")); }
void World::setLastLightningBolt(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setLastLightningBolt", "(I)V", arg0)); }
void World::updateEntities() { (classes[className]->invokeMethod<void>(this->object, "updateEntities", "()V")); }
EnumDifficulty World::getDifficulty() { return EnumDifficulty(*classes[className]->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet/minecraft/world/EnumDifficulty;")); }
void World::setAllowedSpawnTypes(bool arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setAllowedSpawnTypes", "(ZZ)V", arg0, arg1)); }
CrashReportCategory World::addWorldInfoToCrashReport(CrashReport arg0) { return CrashReportCategory(*classes[className]->invokeMethod<jobject>(this->object, "addWorldInfoToCrashReport", "(Lnet/minecraft/crash/CrashReport;)Lnet/minecraft/crash/CrashReportCategory;", arg0)); }
bool World::spawnEntityInWorld(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "spawnEntityInWorld", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void World::setInitialSpawnLocation() { (classes[className]->invokeMethod<void>(this->object, "setInitialSpawnLocation", "()V")); }
void World::removeEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "removeEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
WorldBorder World::getWorldBorder() { return WorldBorder(*classes[className]->invokeMethod<jobject>(this->object, "getWorldBorder", "()Lnet/minecraft/world/border/WorldBorder;")); }
bool World::isBlockLoaded(BlockPos arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockLoaded", "(Lnet/minecraft/util/BlockPos;Z)Z", arg0, arg1)); }
bool World::isBlockLoaded(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockLoaded", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
Chunk World::getChunkFromBlockCoords(BlockPos arg0) { return Chunk(*classes[className]->invokeMethod<jobject>(this->object, "getChunkFromBlockCoords", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/world/chunk/Chunk;", arg0)); }
WorldChunkManager World::getWorldChunkManager() { return WorldChunkManager(*classes[className]->invokeMethod<jobject>(this->object, "getWorldChunkManager", "()Lnet/minecraft/world/biome/WorldChunkManager;")); }
IChunkProvider World::createChunkProvider() { return IChunkProvider(*classes[className]->invokeMethod<jobject>(this->object, "createChunkProvider", "()Lnet/minecraft/world/chunk/IChunkProvider;")); }
void World::setSpawnPoint(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "setSpawnPoint", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
Block World::getGroundAboveSeaLevel(BlockPos arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "getGroundAboveSeaLevel", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/block/Block;", arg0)); }
int World::func_181545_F() { return int(*classes[className]->invokeMethod<int>(this->object, "func_181545_F", "()I")); }
bool World::isChunkLoaded(int arg0, int arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isChunkLoaded", "(IIZ)Z", arg0, arg1, arg2)); }
bool World::isAreaLoaded(BlockPos arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
bool World::isAreaLoaded(StructureBoundingBox arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAreaLoaded", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;)Z", arg0)); }
bool World::isAreaLoaded(StructureBoundingBox arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAreaLoaded", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;Z)Z", arg0, arg1)); }
bool World::isAreaLoaded(BlockPos arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;I)Z", arg0, arg1)); }
bool World::isAreaLoaded(BlockPos arg0, int arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;IZ)Z", arg0, arg1, arg2)); }
bool World::isAreaLoaded(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, bool arg6) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAreaLoaded", "(IIIIIIZ)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
bool World::isAreaLoaded(BlockPos arg0, BlockPos arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;Z)Z", arg0, arg1, arg2)); }
Chunk World::getChunkFromChunkCoords(int arg0, int arg1) { return Chunk(*classes[className]->invokeMethod<jobject>(this->object, "getChunkFromChunkCoords", "(II)Lnet/minecraft/world/chunk/Chunk;", arg0, arg1)); }
bool World::setBlockState(BlockPos arg0, IBlockState arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setBlockState", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;I)Z", arg0, arg1, arg2)); }
bool World::setBlockState(BlockPos arg0, IBlockState arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setBlockState", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)Z", arg0, arg1)); }
void World::markBlockForUpdate(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "markBlockForUpdate", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
bool World::setBlockToAir(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setBlockToAir", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool World::destroyBlock(BlockPos arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "destroyBlock", "(Lnet/minecraft/util/BlockPos;Z)Z", arg0, arg1)); }
void World::markBlocksDirtyVertical(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "markBlocksDirtyVertical", "(IIII)V", arg0, arg1, arg2, arg3)); }
bool World::checkLightFor(EnumSkyBlock arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
void World::notifyBlockOfStateChange(BlockPos arg0, Block arg1) { (classes[className]->invokeMethod<void>(this->object, "notifyBlockOfStateChange", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", arg0, arg1)); }
bool World::isBlockTickPending(BlockPos arg0, Block arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockTickPending", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)Z", arg0, arg1)); }
bool World::canBlockSeeSky(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBlockSeeSky", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
int World::getLightFromNeighbors(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getLightFromNeighbors", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
int World::getChunksLowestHorizon(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getChunksLowestHorizon", "(II)I", arg0, arg1)); }
int World::getLightFromNeighborsFor(EnumSkyBlock arg0, BlockPos arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getLightFromNeighborsFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;)I", arg0, arg1)); }
int World::getLightFor(EnumSkyBlock arg0, BlockPos arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;)I", arg0, arg1)); }
void World::setLightFor(EnumSkyBlock arg0, BlockPos arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;I)V", arg0, arg1, arg2)); }
void World::notifyLightSet(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "notifyLightSet", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
float World::getLightBrightness(BlockPos arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getLightBrightness", "(Lnet/minecraft/util/BlockPos;)F", arg0)); }
MovingObjectPosition World::rayTraceBlocks(Vec3 arg0, Vec3 arg1) { return MovingObjectPosition(*classes[className]->invokeMethod<jobject>(this->object, "rayTraceBlocks", "(Lnet/minecraft/util/Vec3;Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/MovingObjectPosition;", arg0, arg1)); }
MovingObjectPosition World::rayTraceBlocks(Vec3 arg0, Vec3 arg1, bool arg2) { return MovingObjectPosition(*classes[className]->invokeMethod<jobject>(this->object, "rayTraceBlocks", "(Lnet/minecraft/util/Vec3;Lnet/minecraft/util/Vec3;Z)Lnet/minecraft/util/MovingObjectPosition;", arg0, arg1, arg2)); }
MovingObjectPosition World::rayTraceBlocks(Vec3 arg0, Vec3 arg1, bool arg2, bool arg3, bool arg4) { return MovingObjectPosition(*classes[className]->invokeMethod<jobject>(this->object, "rayTraceBlocks", "(Lnet/minecraft/util/Vec3;Lnet/minecraft/util/Vec3;ZZZ)Lnet/minecraft/util/MovingObjectPosition;", arg0, arg1, arg2, arg3, arg4)); }
void World::playSoundAtEntity(Entity arg0, String arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "playSoundAtEntity", "(Lnet/minecraft/entity/Entity;Ljava/lang/String;FF)V", arg0, arg1, arg2, arg3)); }
void World::playSoundEffect(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "playSoundEffect", "(DDDLjava/lang/String;FF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void World::spawnParticle(EnumParticleTypes arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, arr_I arg7) { (classes[className]->invokeMethod<void>(this->object, "spawnParticle", "(Lnet/minecraft/util/EnumParticleTypes;DDDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
void World::spawnParticle(int arg0, bool arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, arr_I arg8) { (classes[className]->invokeMethod<void>(this->object, "spawnParticle", "(IZDDDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
void World::spawnParticle(EnumParticleTypes arg0, bool arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, arr_I arg8) { (classes[className]->invokeMethod<void>(this->object, "spawnParticle", "(Lnet/minecraft/util/EnumParticleTypes;ZDDDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
bool World::addWeatherEffect(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "addWeatherEffect", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void World::onEntityAdded(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEntityAdded", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void World::onEntityRemoved(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEntityRemoved", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void World::addWorldAccess(IWorldAccess arg0) { (classes[className]->invokeMethod<void>(this->object, "addWorldAccess", "(Lnet/minecraft/world/IWorldAccess;)V", arg0)); }
void World::removeWorldAccess(IWorldAccess arg0) { (classes[className]->invokeMethod<void>(this->object, "removeWorldAccess", "(Lnet/minecraft/world/IWorldAccess;)V", arg0)); }
List World::getCollidingBoundingBoxes(Entity arg0, AxisAlignedBB arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getCollidingBoundingBoxes", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/AxisAlignedBB;)Ljava/util/List;", arg0, arg1)); }
bool World::isInsideBorder(WorldBorder arg0, Entity arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInsideBorder", "(Lnet/minecraft/world/border/WorldBorder;Lnet/minecraft/entity/Entity;)Z", arg0, arg1)); }
List World::func_147461_a(AxisAlignedBB arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "func_147461_a", "(Lnet/minecraft/util/AxisAlignedBB;)Ljava/util/List;", arg0)); }
float World::getCelestialAngle(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getCelestialAngle", "(F)F", arg0)); }
float World::getRainStrength(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getRainStrength", "(F)F", arg0)); }
float World::getThunderStrength(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getThunderStrength", "(F)F", arg0)); }
float World::getSunBrightness(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getSunBrightness", "(F)F", arg0)); }
Vec3 World::getSkyColor(Entity arg0, float arg1) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getSkyColor", "(Lnet/minecraft/entity/Entity;F)Lnet/minecraft/util/Vec3;", arg0, arg1)); }
long World::getWorldTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getWorldTime", "()J")); }
int World::getMoonPhase() { return int(*classes[className]->invokeMethod<int>(this->object, "getMoonPhase", "()I")); }
float World::getCurrentMoonPhaseFactor() { return float(*classes[className]->invokeMethod<float>(this->object, "getCurrentMoonPhaseFactor", "()F")); }
float World::getCelestialAngleRadians(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getCelestialAngleRadians", "(F)F", arg0)); }
Vec3 World::getCloudColour(float arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getCloudColour", "(F)Lnet/minecraft/util/Vec3;", arg0)); }
Vec3 World::getFogColor(float arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getFogColor", "(F)Lnet/minecraft/util/Vec3;", arg0)); }
BlockPos World::getPrecipitationHeight(BlockPos arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getPrecipitationHeight", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/util/BlockPos;", arg0)); }
BlockPos World::getTopSolidOrLiquidBlock(BlockPos arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getTopSolidOrLiquidBlock", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/util/BlockPos;", arg0)); }
float World::getStarBrightness(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getStarBrightness", "(F)F", arg0)); }
void World::scheduleUpdate(BlockPos arg0, Block arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "scheduleUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;I)V", arg0, arg1, arg2)); }
void World::updateBlockTick(BlockPos arg0, Block arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "updateBlockTick", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", arg0, arg1, arg2, arg3)); }
void World::scheduleBlockUpdate(BlockPos arg0, Block arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "scheduleBlockUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", arg0, arg1, arg2, arg3)); }
void World::updateEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "updateEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void World::removeTileEntity(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "removeTileEntity", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
bool World::addTileEntity(TileEntity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "addTileEntity", "(Lnet/minecraft/tileentity/TileEntity;)Z", arg0)); }
void World::addTileEntities(Collection arg0) { (classes[className]->invokeMethod<void>(this->object, "addTileEntities", "(Ljava/util/Collection;)V", arg0)); }
bool World::checkNoEntityCollision(AxisAlignedBB arg0, Entity arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkNoEntityCollision", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/entity/Entity;)Z", arg0, arg1)); }
bool World::checkNoEntityCollision(AxisAlignedBB arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkNoEntityCollision", "(Lnet/minecraft/util/AxisAlignedBB;)Z", arg0)); }
bool World::checkBlockCollision(AxisAlignedBB arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkBlockCollision", "(Lnet/minecraft/util/AxisAlignedBB;)Z", arg0)); }
bool World::isAnyLiquid(AxisAlignedBB arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnyLiquid", "(Lnet/minecraft/util/AxisAlignedBB;)Z", arg0)); }
bool World::isFlammableWithin(AxisAlignedBB arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFlammableWithin", "(Lnet/minecraft/util/AxisAlignedBB;)Z", arg0)); }
bool World::handleMaterialAcceleration(AxisAlignedBB arg0, Material arg1, Entity arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleMaterialAcceleration", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/block/material/Material;Lnet/minecraft/entity/Entity;)Z", arg0, arg1, arg2)); }
bool World::isMaterialInBB(AxisAlignedBB arg0, Material arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMaterialInBB", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/block/material/Material;)Z", arg0, arg1)); }
bool World::isAABBInMaterial(AxisAlignedBB arg0, Material arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAABBInMaterial", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/block/material/Material;)Z", arg0, arg1)); }
Explosion World::createExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5) { return Explosion(*classes[className]->invokeMethod<jobject>(this->object, "createExplosion", "(Lnet/minecraft/entity/Entity;DDDFZ)Lnet/minecraft/world/Explosion;", arg0, arg1, arg2, arg3, arg4, arg5)); }
Explosion World::newExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5, bool arg6) { return Explosion(*classes[className]->invokeMethod<jobject>(this->object, "newExplosion", "(Lnet/minecraft/entity/Entity;DDDFZZ)Lnet/minecraft/world/Explosion;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
float World::getBlockDensity(Vec3 arg0, AxisAlignedBB arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "getBlockDensity", "(Lnet/minecraft/util/Vec3;Lnet/minecraft/util/AxisAlignedBB;)F", arg0, arg1)); }
bool World::extinguishFire(EntityPlayer arg0, BlockPos arg1, EnumFacing arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "extinguishFire", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)Z", arg0, arg1, arg2)); }
void World::playAuxSFXAtEntity(EntityPlayer arg0, int arg1, BlockPos arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "playAuxSFXAtEntity", "(Lnet/minecraft/entity/player/EntityPlayer;ILnet/minecraft/util/BlockPos;I)V", arg0, arg1, arg2, arg3)); }
String World::getDebugLoadedEntities() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDebugLoadedEntities", "()Ljava/lang/String;")); }
String World::getProviderName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getProviderName", "()Ljava/lang/String;")); }
void World::setTileEntity(BlockPos arg0, TileEntity arg1) { (classes[className]->invokeMethod<void>(this->object, "setTileEntity", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", arg0, arg1)); }
void World::markTileEntityForRemoval(TileEntity arg0) { (classes[className]->invokeMethod<void>(this->object, "markTileEntityForRemoval", "(Lnet/minecraft/tileentity/TileEntity;)V", arg0)); }
bool World::isBlockFullCube(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockFullCube", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool World::isBlockNormalCube(BlockPos arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockNormalCube", "(Lnet/minecraft/util/BlockPos;Z)Z", arg0, arg1)); }
void World::calculateInitialSkylight() { (classes[className]->invokeMethod<void>(this->object, "calculateInitialSkylight", "()V")); }
void World::updateWeather() { (classes[className]->invokeMethod<void>(this->object, "updateWeather", "()V")); }
void World::calculateInitialWeather() { (classes[className]->invokeMethod<void>(this->object, "calculateInitialWeather", "()V")); }
bool World::isThundering() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isThundering", "()Z")); }
int World::getRenderDistanceChunks() { return int(*classes[className]->invokeMethod<int>(this->object, "getRenderDistanceChunks", "()I")); }
void World::playMoodSoundAndCheckLight(int arg0, int arg1, Chunk arg2) { (classes[className]->invokeMethod<void>(this->object, "playMoodSoundAndCheckLight", "(IILnet/minecraft/world/chunk/Chunk;)V", arg0, arg1, arg2)); }
EntityPlayer World::getClosestPlayer(double arg0, double arg1, double arg2, double arg3) { return EntityPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getClosestPlayer", "(DDDD)Lnet/minecraft/entity/player/EntityPlayer;", arg0, arg1, arg2, arg3)); }
void World::updateBlocks() { (classes[className]->invokeMethod<void>(this->object, "updateBlocks", "()V")); }
void World::forceBlockUpdateTick(Block arg0, BlockPos arg1, Random arg2) { (classes[className]->invokeMethod<void>(this->object, "forceBlockUpdateTick", "(Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Ljava/util/Random;)V", arg0, arg1, arg2)); }
bool World::canBlockFreezeWater(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBlockFreezeWater", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool World::canBlockFreeze(BlockPos arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBlockFreeze", "(Lnet/minecraft/util/BlockPos;Z)Z", arg0, arg1)); }
bool World::canBlockFreezeNoWater(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBlockFreezeNoWater", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
int World::getRawLight(BlockPos arg0, EnumSkyBlock arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getRawLight", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/world/EnumSkyBlock;)I", arg0, arg1)); }
bool World::tickUpdates(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "tickUpdates", "(Z)Z", arg0)); }
List World::getPendingBlockUpdates(Chunk arg0, bool arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getPendingBlockUpdates", "(Lnet/minecraft/world/chunk/Chunk;Z)Ljava/util/List;", arg0, arg1)); }
List World::func_175712_a(StructureBoundingBox arg0, bool arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "func_175712_a", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;Z)Ljava/util/List;", arg0, arg1)); }
List World::getEntitiesInAABBexcluding(Entity arg0, AxisAlignedBB arg1, Predicate arg2) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getEntitiesInAABBexcluding", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/AxisAlignedBB;Lcom/google/common/base/Predicate;)Ljava/util/List;", arg0, arg1, arg2)); }
List World::getEntities(Class arg0, Predicate arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getEntities", "(Ljava/lang/Class;Lcom/google/common/base/Predicate;)Ljava/util/List;", arg0, arg1)); }
List World::getEntitiesWithinAABB(Class arg0, AxisAlignedBB arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getEntitiesWithinAABB", "(Ljava/lang/Class;Lnet/minecraft/util/AxisAlignedBB;)Ljava/util/List;", arg0, arg1)); }
List World::getEntitiesWithinAABB(Class arg0, AxisAlignedBB arg1, Predicate arg2) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getEntitiesWithinAABB", "(Ljava/lang/Class;Lnet/minecraft/util/AxisAlignedBB;Lcom/google/common/base/Predicate;)Ljava/util/List;", arg0, arg1, arg2)); }
Entity World::getEntityByID(int arg0) { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getEntityByID", "(I)Lnet/minecraft/entity/Entity;", arg0)); }
List World::getLoadedEntityList() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getLoadedEntityList", "()Ljava/util/List;")); }
void World::markChunkDirty(BlockPos arg0, TileEntity arg1) { (classes[className]->invokeMethod<void>(this->object, "markChunkDirty", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", arg0, arg1)); }
int World::countEntities(Class arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "countEntities", "(Ljava/lang/Class;)I", arg0)); }
void World::loadEntities(Collection arg0) { (classes[className]->invokeMethod<void>(this->object, "loadEntities", "(Ljava/util/Collection;)V", arg0)); }
void World::unloadEntities(Collection arg0) { (classes[className]->invokeMethod<void>(this->object, "unloadEntities", "(Ljava/util/Collection;)V", arg0)); }
bool World::canBlockBePlaced(Block arg0, BlockPos arg1, bool arg2, EnumFacing arg3, Entity arg4, ItemStack arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBlockBePlaced", "(Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;ZLnet/minecraft/util/EnumFacing;Lnet/minecraft/entity/Entity;Lnet/minecraft/item/ItemStack;)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
void World::func_181544_b(int arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181544_b", "(I)V", arg0)); }
bool World::isSidePowered(BlockPos arg0, EnumFacing arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSidePowered", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)Z", arg0, arg1)); }
int World::getRedstonePower(BlockPos arg0, EnumFacing arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getRedstonePower", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)I", arg0, arg1)); }
bool World::isBlockPowered(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockPowered", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
EntityPlayer World::getClosestPlayerToEntity(Entity arg0, double arg1) { return EntityPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getClosestPlayerToEntity", "(Lnet/minecraft/entity/Entity;D)Lnet/minecraft/entity/player/EntityPlayer;", arg0, arg1)); }
bool World::isAnyPlayerWithinRangeAt(double arg0, double arg1, double arg2, double arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnyPlayerWithinRangeAt", "(DDDD)Z", arg0, arg1, arg2, arg3)); }
EntityPlayer World::getPlayerEntityByName(String arg0) { return EntityPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerEntityByName", "(Ljava/lang/String;)Lnet/minecraft/entity/player/EntityPlayer;", arg0)); }
EntityPlayer World::getPlayerEntityByUUID(UUID arg0) { return EntityPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerEntityByUUID", "(Ljava/util/UUID;)Lnet/minecraft/entity/player/EntityPlayer;", arg0)); }
void World::checkSessionLock() { (classes[className]->invokeMethod<void>(this->object, "checkSessionLock", "()V")); }
void World::setTotalWorldTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setTotalWorldTime", "(J)V", arg0)); }
long World::getTotalWorldTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getTotalWorldTime", "()J")); }
void World::setWorldTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldTime", "(J)V", arg0)); }
BlockPos World::getSpawnPoint() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getSpawnPoint", "()Lnet/minecraft/util/BlockPos;")); }
bool World::isBlockModifiable(EntityPlayer arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockModifiable", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
void World::setEntityState(Entity arg0, byte arg1) { (classes[className]->invokeMethod<void>(this->object, "setEntityState", "(Lnet/minecraft/entity/Entity;B)V", arg0, arg1)); }
IChunkProvider World::getChunkProvider() { return IChunkProvider(*classes[className]->invokeMethod<jobject>(this->object, "getChunkProvider", "()Lnet/minecraft/world/chunk/IChunkProvider;")); }
void World::addBlockEvent(BlockPos arg0, Block arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "addBlockEvent", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", arg0, arg1, arg2, arg3)); }
ISaveHandler World::getSaveHandler() { return ISaveHandler(*classes[className]->invokeMethod<jobject>(this->object, "getSaveHandler", "()Lnet/minecraft/world/storage/ISaveHandler;")); }
WorldInfo World::getWorldInfo() { return WorldInfo(*classes[className]->invokeMethod<jobject>(this->object, "getWorldInfo", "()Lnet/minecraft/world/storage/WorldInfo;")); }
GameRules World::getGameRules() { return GameRules(*classes[className]->invokeMethod<jobject>(this->object, "getGameRules", "()Lnet/minecraft/world/GameRules;")); }
void World::setThunderStrength(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setThunderStrength", "(F)V", arg0)); }
void World::setRainStrength(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setRainStrength", "(F)V", arg0)); }
bool World::canLightningStrike(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canLightningStrike", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool World::isBlockinHighHumidity(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockinHighHumidity", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
MapStorage World::getMapStorage() { return MapStorage(*classes[className]->invokeMethod<jobject>(this->object, "getMapStorage", "()Lnet/minecraft/world/storage/MapStorage;")); }
void World::setItemData(String arg0, WorldSavedData arg1) { (classes[className]->invokeMethod<void>(this->object, "setItemData", "(Ljava/lang/String;Lnet/minecraft/world/WorldSavedData;)V", arg0, arg1)); }
WorldSavedData World::loadItemData(Class arg0, String arg1) { return WorldSavedData(*classes[className]->invokeMethod<jobject>(this->object, "loadItemData", "(Ljava/lang/Class;Ljava/lang/String;)Lnet/minecraft/world/WorldSavedData;", arg0, arg1)); }
int World::getUniqueDataId(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getUniqueDataId", "(Ljava/lang/String;)I", arg0)); }
void World::playBroadcastSound(int arg0, BlockPos arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "playBroadcastSound", "(ILnet/minecraft/util/BlockPos;I)V", arg0, arg1, arg2)); }
int World::getActualHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getActualHeight", "()I")); }
Random World::setRandomSeed(int arg0, int arg1, int arg2) { return Random(*classes[className]->invokeMethod<jobject>(this->object, "setRandomSeed", "(III)Ljava/util/Random;", arg0, arg1, arg2)); }
BlockPos World::getStrongholdPos(String arg0, BlockPos arg1) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getStrongholdPos", "(Ljava/lang/String;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/util/BlockPos;", arg0, arg1)); }
void World::sendBlockBreakProgress(int arg0, BlockPos arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "sendBlockBreakProgress", "(ILnet/minecraft/util/BlockPos;I)V", arg0, arg1, arg2)); }
Calendar World::getCurrentDate() { return Calendar(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentDate", "()Ljava/util/Calendar;")); }
void World::makeFireworks(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, NBTTagCompound arg6) { (classes[className]->invokeMethod<void>(this->object, "makeFireworks", "(DDDDDDLnet/minecraft/nbt/NBTTagCompound;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
Scoreboard World::getScoreboard() { return Scoreboard(*classes[className]->invokeMethod<jobject>(this->object, "getScoreboard", "()Lnet/minecraft/scoreboard/Scoreboard;")); }
DifficultyInstance World::getDifficultyForLocation(BlockPos arg0) { return DifficultyInstance(*classes[className]->invokeMethod<jobject>(this->object, "getDifficultyForLocation", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/world/DifficultyInstance;", arg0)); }
int World::getSkylightSubtracted() { return int(*classes[className]->invokeMethod<int>(this->object, "getSkylightSubtracted", "()I")); }
void World::setSkylightSubtracted(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSkylightSubtracted", "(I)V", arg0)); }
bool World::isFindingSpawnPoint() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFindingSpawnPoint", "()Z")); }
VillageCollection World::getVillageCollection() { return VillageCollection(*classes[className]->invokeMethod<jobject>(this->object, "getVillageCollection", "()Lnet/minecraft/village/VillageCollection;")); }
bool World::isSpawnChunk(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSpawnChunk", "(II)Z", arg0, arg1)); }
void World::notifyNeighborsRespectDebug(BlockPos arg0, Block arg1) { (classes[className]->invokeMethod<void>(this->object, "notifyNeighborsRespectDebug", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", arg0, arg1)); }
void World::updateComparatorOutputLevel(BlockPos arg0, Block arg1) { (classes[className]->invokeMethod<void>(this->object, "updateComparatorOutputLevel", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", arg0, arg1)); }
void World::notifyNeighborsOfStateChange(BlockPos arg0, Block arg1) { (classes[className]->invokeMethod<void>(this->object, "notifyNeighborsOfStateChange", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", arg0, arg1)); }
void World::markBlockRangeForRenderUpdate(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "markBlockRangeForRenderUpdate", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void World::markBlockRangeForRenderUpdate(BlockPos arg0, BlockPos arg1) { (classes[className]->invokeMethod<void>(this->object, "markBlockRangeForRenderUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;)V", arg0, arg1)); }
void World::notifyNeighborsOfStateExcept(BlockPos arg0, Block arg1, EnumFacing arg2) { (classes[className]->invokeMethod<void>(this->object, "notifyNeighborsOfStateExcept", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;Lnet/minecraft/util/EnumFacing;)V", arg0, arg1, arg2)); }
void World::updateAllPlayersSleepingFlag() { (classes[className]->invokeMethod<void>(this->object, "updateAllPlayersSleepingFlag", "()V")); }
void World::removePlayerEntityDangerously(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "removePlayerEntityDangerously", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
List World::getEntitiesWithinAABBExcludingEntity(Entity arg0, AxisAlignedBB arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getEntitiesWithinAABBExcludingEntity", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/AxisAlignedBB;)Ljava/util/List;", arg0, arg1)); }
int World::calculateSkylightSubtracted(float arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "calculateSkylightSubtracted", "(F)I", arg0)); }
void World::updateEntityWithOptionalForce(Entity arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "updateEntityWithOptionalForce", "(Lnet/minecraft/entity/Entity;Z)V", arg0, arg1)); }
bool World::doesBlockHaveSolidTopSurface(IBlockAccess arg0, BlockPos arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("doesBlockHaveSolidTopSurface", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
void World::setActivePlayerChunksAndCheckLight() { (classes[className]->invokeMethod<void>(this->object, "setActivePlayerChunksAndCheckLight", "()V")); }
Entity World::findNearestEntityWithinAABB(Class arg0, AxisAlignedBB arg1, Entity arg2) { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "findNearestEntityWithinAABB", "(Ljava/lang/Class;Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/entity/Entity;)Lnet/minecraft/entity/Entity;", arg0, arg1, arg2)); }
int World::isBlockIndirectlyGettingPowered(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "isBlockIndirectlyGettingPowered", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
void World::sendQuittingDisconnectingPacket() { (classes[className]->invokeMethod<void>(this->object, "sendQuittingDisconnectingPacket", "()V")); }
long World::getSeed() { return long(*classes[className]->invokeMethod<long>(this->object, "getSeed", "()J")); }
void World::initialize(WorldSettings arg0) { (classes[className]->invokeMethod<void>(this->object, "initialize", "(Lnet/minecraft/world/WorldSettings;)V", arg0)); }
World World::init() { return World(*classes[className]->invokeMethod<jobject>(this->object, "init", "()Lnet/minecraft/world/World;")); }


Team EntityPlayer::getTeam() { return Team(*classes[className]->invokeMethod<jobject>(this->object, "getTeam", "()Lnet/minecraft/scoreboard/Team;")); }
void EntityPlayer::addStat(StatBase arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addStat", "(Lnet/minecraft/stats/StatBase;I)V", arg0, arg1)); }
void EntityPlayer::displayGui(IInteractionObject arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGui", "(Lnet/minecraft/world/IInteractionObject;)V", arg0)); }
double EntityPlayer::getYOffset() { return double(*classes[className]->invokeMethod<double>(this->object, "getYOffset", "()D")); }
bool EntityPlayer::isUser() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUser", "()Z")); }
EntityPlayer_EnumStatus EntityPlayer::trySleep(BlockPos arg0) { return EntityPlayer_EnumStatus(*classes[className]->invokeMethod<jobject>(this->object, "trySleep", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/entity/player/EntityPlayer$EnumStatus;", arg0)); }
void EntityPlayer::fall(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }
void EntityPlayer::setInWeb() { (classes[className]->invokeMethod<void>(this->object, "setInWeb", "()V")); }
int EntityPlayer::xpBarCap() { return int(*classes[className]->invokeMethod<int>(this->object, "xpBarCap", "()I")); }
int EntityPlayer::getXPSeed() { return int(*classes[className]->invokeMethod<int>(this->object, "getXPSeed", "()I")); }
bool EntityPlayer::canEat(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEat", "(Z)Z", arg0)); }
bool EntityPlayer::shouldHeal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldHeal", "()Z")); }
bool EntityPlayer::isPlayer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlayer", "()Z")); }
bool EntityPlayer::canOpen(LockCode arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canOpen", "(Lnet/minecraft/world/LockCode;)Z", arg0)); }
bool EntityPlayer::isWearing(EnumPlayerModelParts arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWearing", "(Lnet/minecraft/entity/player/EnumPlayerModelParts;)Z", arg0)); }
void EntityPlayer::playSound(String arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "playSound", "(Ljava/lang/String;FF)V", arg0, arg1, arg2)); }
void EntityPlayer::setDead() { (classes[className]->invokeMethod<void>(this->object, "setDead", "()V")); }
void EntityPlayer::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
UUID EntityPlayer::getUUID(GameProfile arg0) { return UUID(*classes[className]->invokeStaticMethod<jobject>("getUUID", "(Lcom/mojang/authlib/GameProfile;)Ljava/util/UUID;", arg0)); }
void EntityPlayer::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
bool EntityPlayer::isBlocking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlocking", "()Z")); }
bool EntityPlayer::isInBed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInBed", "()Z")); }
int EntityPlayer::getScore() { return int(*classes[className]->invokeMethod<int>(this->object, "getScore", "()I")); }
void EntityPlayer::setScore(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setScore", "(I)V", arg0)); }
void EntityPlayer::addScore(int arg0) { (classes[className]->invokeMethod<void>(this->object, "addScore", "(I)V", arg0)); }
void EntityPlayer::onDeath(DamageSource arg0) { (classes[className]->invokeMethod<void>(this->object, "onDeath", "(Lnet/minecraft/util/DamageSource;)V", arg0)); }
EntityItem EntityPlayer::dropItem(ItemStack arg0, bool arg1, bool arg2) { return EntityItem(*classes[className]->invokeMethod<jobject>(this->object, "dropItem", "(Lnet/minecraft/item/ItemStack;ZZ)Lnet/minecraft/entity/item/EntityItem;", arg0, arg1, arg2)); }
bool EntityPlayer::isEntityInsideOpaqueBlock() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEntityInsideOpaqueBlock", "()Z")); }
bool EntityPlayer::isUsingItem() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUsingItem", "()Z")); }
bool EntityPlayer::isPlayerSleeping() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlayerSleeping", "()Z")); }
bool EntityPlayer::isSpectator() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSpectator", "()Z")); }
EntityItem EntityPlayer::dropOneItem(bool arg0) { return EntityItem(*classes[className]->invokeMethod<jobject>(this->object, "dropOneItem", "(Z)Lnet/minecraft/entity/item/EntityItem;", arg0)); }
void EntityPlayer::preparePlayerToSpawn() { (classes[className]->invokeMethod<void>(this->object, "preparePlayerToSpawn", "()V")); }
bool EntityPlayer::hasReducedDebug() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasReducedDebug", "()Z")); }
void EntityPlayer::setReducedDebug(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setReducedDebug", "(Z)V", arg0)); }
void EntityPlayer::onEnchantmentCritical(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEnchantmentCritical", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayer::setSpawnPoint(BlockPos arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setSpawnPoint", "(Lnet/minecraft/util/BlockPos;Z)V", arg0, arg1)); }
void EntityPlayer::updateRidden() { (classes[className]->invokeMethod<void>(this->object, "updateRidden", "()V")); }
bool EntityPlayer::isPushedByWater() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPushedByWater", "()Z")); }
ItemStack EntityPlayer::getHeldItem() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getHeldItem", "()Lnet/minecraft/item/ItemStack;")); }
void EntityPlayer::applyEntityAttributes() { (classes[className]->invokeMethod<void>(this->object, "applyEntityAttributes", "()V")); }
ItemStack EntityPlayer::getItemInUse() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getItemInUse", "()Lnet/minecraft/item/ItemStack;")); }
int EntityPlayer::getItemInUseCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getItemInUseCount", "()I")); }
int EntityPlayer::getItemInUseDuration() { return int(*classes[className]->invokeMethod<int>(this->object, "getItemInUseDuration", "()I")); }
void EntityPlayer::stopUsingItem() { (classes[className]->invokeMethod<void>(this->object, "stopUsingItem", "()V")); }
void EntityPlayer::clearItemInUse() { (classes[className]->invokeMethod<void>(this->object, "clearItemInUse", "()V")); }
void EntityPlayer::updateItemUse(ItemStack arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "updateItemUse", "(Lnet/minecraft/item/ItemStack;I)V", arg0, arg1)); }
void EntityPlayer::onItemUseFinish() { (classes[className]->invokeMethod<void>(this->object, "onItemUseFinish", "()V")); }
void EntityPlayer::wakeUpPlayer(bool arg0, bool arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "wakeUpPlayer", "(ZZZ)V", arg0, arg1, arg2)); }
void EntityPlayer::closeScreen() { (classes[className]->invokeMethod<void>(this->object, "closeScreen", "()V")); }
void EntityPlayer::triggerAchievement(StatBase arg0) { (classes[className]->invokeMethod<void>(this->object, "triggerAchievement", "(Lnet/minecraft/stats/StatBase;)V", arg0)); }
int EntityPlayer::getMaxInPortalTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxInPortalTime", "()I")); }
String EntityPlayer::getSwimSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSwimSound", "()Ljava/lang/String;")); }
String EntityPlayer::getSplashSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSplashSound", "()Ljava/lang/String;")); }
int EntityPlayer::getPortalCooldown() { return int(*classes[className]->invokeMethod<int>(this->object, "getPortalCooldown", "()I")); }
float EntityPlayer::getEyeHeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getEyeHeight", "()F")); }
void EntityPlayer::handleStatusUpdate(byte arg0) { (classes[className]->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }
bool EntityPlayer::isMovementBlocked() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMovementBlocked", "()Z")); }
void EntityPlayer::addMountedMovementStat(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "addMountedMovementStat", "(DDD)V", arg0, arg1, arg2)); }
void EntityPlayer::updateEntityActionState() { (classes[className]->invokeMethod<void>(this->object, "updateEntityActionState", "()V")); }
void EntityPlayer::onLivingUpdate() { (classes[className]->invokeMethod<void>(this->object, "onLivingUpdate", "()V")); }
void EntityPlayer::collideWithPlayer(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "collideWithPlayer", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayer::func_175145_a(StatBase arg0) { (classes[className]->invokeMethod<void>(this->object, "func_175145_a", "(Lnet/minecraft/stats/StatBase;)V", arg0)); }
String EntityPlayer::getHurtSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHurtSound", "()Ljava/lang/String;")); }
String EntityPlayer::getDeathSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDeathSound", "()Ljava/lang/String;")); }
void EntityPlayer::addToPlayerScore(Entity arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addToPlayerScore", "(Lnet/minecraft/entity/Entity;I)V", arg0, arg1)); }
Scoreboard EntityPlayer::getWorldScoreboard() { return Scoreboard(*classes[className]->invokeMethod<jobject>(this->object, "getWorldScoreboard", "()Lnet/minecraft/scoreboard/Scoreboard;")); }
Collection EntityPlayer::func_175137_e(Entity arg0) { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "func_175137_e", "(Lnet/minecraft/entity/Entity;)Ljava/util/Collection;", arg0)); }
void EntityPlayer::joinEntityItemWithWorld(EntityItem arg0) { (classes[className]->invokeMethod<void>(this->object, "joinEntityItemWithWorld", "(Lnet/minecraft/entity/item/EntityItem;)V", arg0)); }
float EntityPlayer::getToolDigEfficiency(Block arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getToolDigEfficiency", "(Lnet/minecraft/block/Block;)F", arg0)); }
bool EntityPlayer::canHarvestBlock(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canHarvestBlock", "(Lnet/minecraft/block/Block;)Z", arg0)); }
void EntityPlayer::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityPlayer::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityPlayer::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
bool EntityPlayer::canAttackPlayer(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAttackPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void EntityPlayer::damageArmor(float arg0) { (classes[className]->invokeMethod<void>(this->object, "damageArmor", "(F)V", arg0)); }
int EntityPlayer::getTotalArmorValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getTotalArmorValue", "()I")); }
float EntityPlayer::getArmorVisibility() { return float(*classes[className]->invokeMethod<float>(this->object, "getArmorVisibility", "()F")); }
void EntityPlayer::damageEntity(DamageSource arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "damageEntity", "(Lnet/minecraft/util/DamageSource;F)V", arg0, arg1)); }
float EntityPlayer::getAbsorptionAmount() { return float(*classes[className]->invokeMethod<float>(this->object, "getAbsorptionAmount", "()F")); }
void EntityPlayer::setAbsorptionAmount(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setAbsorptionAmount", "(F)V", arg0)); }
void EntityPlayer::addExhaustion(float arg0) { (classes[className]->invokeMethod<void>(this->object, "addExhaustion", "(F)V", arg0)); }
void EntityPlayer::openEditSign(TileEntitySign arg0) { (classes[className]->invokeMethod<void>(this->object, "openEditSign", "(Lnet/minecraft/tileentity/TileEntitySign;)V", arg0)); }
void EntityPlayer::openEditCommandBlock(CommandBlockLogic arg0) { (classes[className]->invokeMethod<void>(this->object, "openEditCommandBlock", "(Lnet/minecraft/command/server/CommandBlockLogic;)V", arg0)); }
void EntityPlayer::displayVillagerTradeGui(IMerchant arg0) { (classes[className]->invokeMethod<void>(this->object, "displayVillagerTradeGui", "(Lnet/minecraft/entity/IMerchant;)V", arg0)); }
void EntityPlayer::displayGUIChest(IInventory arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGUIChest", "(Lnet/minecraft/inventory/IInventory;)V", arg0)); }
void EntityPlayer::displayGUIHorse(EntityHorse arg0, IInventory arg1) { (classes[className]->invokeMethod<void>(this->object, "displayGUIHorse", "(Lnet/minecraft/entity/passive/EntityHorse;Lnet/minecraft/inventory/IInventory;)V", arg0, arg1)); }
void EntityPlayer::displayGUIBook(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGUIBook", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
bool EntityPlayer::interactWith(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interactWith", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
ItemStack EntityPlayer::getCurrentEquippedItem() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentEquippedItem", "()Lnet/minecraft/item/ItemStack;")); }
void EntityPlayer::destroyCurrentEquippedItem() { (classes[className]->invokeMethod<void>(this->object, "destroyCurrentEquippedItem", "()V")); }
void EntityPlayer::onCriticalHit(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onCriticalHit", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayer::respawnPlayer() { (classes[className]->invokeMethod<void>(this->object, "respawnPlayer", "()V")); }
GameProfile EntityPlayer::getGameProfile() { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom/mojang/authlib/GameProfile;")); }
void EntityPlayer::func_175139_a(EnumFacing arg0) { (classes[className]->invokeMethod<void>(this->object, "func_175139_a", "(Lnet/minecraft/util/EnumFacing;)V", arg0)); }
BlockPos EntityPlayer::getBedSpawnLocation(World arg0, BlockPos arg1, bool arg2) { return BlockPos(*classes[className]->invokeStaticMethod<jobject>("getBedSpawnLocation", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Z)Lnet/minecraft/util/BlockPos;", arg0, arg1, arg2)); }
float EntityPlayer::getBedOrientationInDegrees() { return float(*classes[className]->invokeMethod<float>(this->object, "getBedOrientationInDegrees", "()F")); }
bool EntityPlayer::isPlayerFullyAsleep() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlayerFullyAsleep", "()Z")); }
int EntityPlayer::getSleepTimer() { return int(*classes[className]->invokeMethod<int>(this->object, "getSleepTimer", "()I")); }
void EntityPlayer::addChatComponentMessage(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "addChatComponentMessage", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
BlockPos EntityPlayer::getBedLocation() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getBedLocation", "()Lnet/minecraft/util/BlockPos;")); }
bool EntityPlayer::isSpawnForced() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSpawnForced", "()Z")); }
void EntityPlayer::moveEntityWithHeading(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "moveEntityWithHeading", "(FF)V", arg0, arg1)); }
void EntityPlayer::addMovementStat(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "addMovementStat", "(DDD)V", arg0, arg1, arg2)); }
float EntityPlayer::getAIMoveSpeed() { return float(*classes[className]->invokeMethod<float>(this->object, "getAIMoveSpeed", "()F")); }
void EntityPlayer::resetHeight() { (classes[className]->invokeMethod<void>(this->object, "resetHeight", "()V")); }
String EntityPlayer::getFallSoundString(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFallSoundString", "(I)Ljava/lang/String;", arg0)); }
void EntityPlayer::onKillEntity(EntityLivingBase arg0) { (classes[className]->invokeMethod<void>(this->object, "onKillEntity", "(Lnet/minecraft/entity/EntityLivingBase;)V", arg0)); }
ItemStack EntityPlayer::getCurrentArmor(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentArmor", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
void EntityPlayer::addExperience(int arg0) { (classes[className]->invokeMethod<void>(this->object, "addExperience", "(I)V", arg0)); }
void EntityPlayer::addExperienceLevel(int arg0) { (classes[className]->invokeMethod<void>(this->object, "addExperienceLevel", "(I)V", arg0)); }
void EntityPlayer::removeExperienceLevel(int arg0) { (classes[className]->invokeMethod<void>(this->object, "removeExperienceLevel", "(I)V", arg0)); }
FoodStats EntityPlayer::getFoodStats() { return FoodStats(*classes[className]->invokeMethod<jobject>(this->object, "getFoodStats", "()Lnet/minecraft/util/FoodStats;")); }
void EntityPlayer::setItemInUse(ItemStack arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setItemInUse", "(Lnet/minecraft/item/ItemStack;I)V", arg0, arg1)); }
bool EntityPlayer::isAllowEdit() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAllowEdit", "()Z")); }
bool EntityPlayer::canPlayerEdit(BlockPos arg0, EnumFacing arg1, ItemStack arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPlayerEdit", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;Lnet/minecraft/item/ItemStack;)Z", arg0, arg1, arg2)); }
int EntityPlayer::getExperiencePoints(EntityPlayer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet/minecraft/entity/player/EntityPlayer;)I", arg0)); }
void EntityPlayer::clonePlayer(EntityPlayer arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "clonePlayer", "(Lnet/minecraft/entity/player/EntityPlayer;Z)V", arg0, arg1)); }
bool EntityPlayer::canTriggerWalking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canTriggerWalking", "()Z")); }
void EntityPlayer::sendPlayerAbilities() { (classes[className]->invokeMethod<void>(this->object, "sendPlayerAbilities", "()V")); }
void EntityPlayer::setGameType(WorldSettings_GameType arg0) { (classes[className]->invokeMethod<void>(this->object, "setGameType", "(Lnet/minecraft/world/WorldSettings$GameType;)V", arg0)); }
InventoryEnderChest EntityPlayer::getInventoryEnderChest() { return InventoryEnderChest(*classes[className]->invokeMethod<jobject>(this->object, "getInventoryEnderChest", "()Lnet/minecraft/inventory/InventoryEnderChest;")); }
ItemStack EntityPlayer::getEquipmentInSlot(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getEquipmentInSlot", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
void EntityPlayer::setCurrentItemOrArmor(int arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
bool EntityPlayer::isInvisibleToPlayer(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvisibleToPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
UUID EntityPlayer::getOfflineUUID(String arg0) { return UUID(*classes[className]->invokeStaticMethod<jobject>("getOfflineUUID", "(Ljava/lang/String;)Ljava/util/UUID;", arg0)); }
bool EntityPlayer::replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "replaceItemInInventory", "(ILnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
EntityItem EntityPlayer::dropPlayerItemWithRandomChoice(ItemStack arg0, bool arg1) { return EntityItem(*classes[className]->invokeMethod<jobject>(this->object, "dropPlayerItemWithRandomChoice", "(Lnet/minecraft/item/ItemStack;Z)Lnet/minecraft/entity/item/EntityItem;", arg0, arg1)); }
void EntityPlayer::attackTargetEntityWithCurrentItem(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "attackTargetEntityWithCurrentItem", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
bool EntityPlayer::getAlwaysRenderNameTagForRender() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAlwaysRenderNameTagForRender", "()Z")); }
void EntityPlayer::jump() { (classes[className]->invokeMethod<void>(this->object, "jump", "()V")); }

bool Team::isSameTeam(Team arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSameTeam", "(Lnet/minecraft/scoreboard/Team;)Z", arg0)); }
String Team::getRegisteredName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRegisteredName", "()Ljava/lang/String;")); }
Collection Team::getMembershipCollection() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getMembershipCollection", "()Ljava/util/Collection;")); }
Team_EnumVisible Team::getNameTagVisibility() { return Team_EnumVisible(*classes[className]->invokeMethod<jobject>(this->object, "getNameTagVisibility", "()Lnet/minecraft/scoreboard/Team$EnumVisible;")); }
Team_EnumVisible Team::getDeathMessageVisibility() { return Team_EnumVisible(*classes[className]->invokeMethod<jobject>(this->object, "getDeathMessageVisibility", "()Lnet/minecraft/scoreboard/Team$EnumVisible;")); }
String Team::formatString(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "formatString", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool Team::getAllowFriendlyFire() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAllowFriendlyFire", "()Z")); }
bool Team::getSeeFriendlyInvisiblesEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getSeeFriendlyInvisiblesEnabled", "()Z")); }

Team_EnumVisible Team_EnumVisible::func_178824_a(String arg0) { return Team_EnumVisible(*classes[className]->invokeStaticMethod<jobject>("func_178824_a", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/Team$EnumVisible;", arg0)); }
Team_EnumVisible Team_EnumVisible::valueOf(String arg0) { return Team_EnumVisible(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/Team$EnumVisible;", arg0)); }

StatBase StatBase::initIndependentStat() { return StatBase(*classes[className]->invokeMethod<jobject>(this->object, "initIndependentStat", "()Lnet/minecraft/stats/StatBase;")); }
StatBase StatBase::registerStat() { return StatBase(*classes[className]->invokeMethod<jobject>(this->object, "registerStat", "()Lnet/minecraft/stats/StatBase;")); }
IChatComponent StatBase::func_150955_j() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "func_150955_j", "()Lnet/minecraft/util/IChatComponent;")); }
IScoreObjectiveCriteria StatBase::func_150952_k() { return IScoreObjectiveCriteria(*classes[className]->invokeMethod<jobject>(this->object, "func_150952_k", "()Lnet/minecraft/scoreboard/IScoreObjectiveCriteria;")); }
Class StatBase::func_150954_l() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "func_150954_l", "()Ljava/lang/Class;")); }
StatBase StatBase::func_150953_b(Class arg0) { return StatBase(*classes[className]->invokeMethod<jobject>(this->object, "func_150953_b", "(Ljava/lang/Class;)Lnet/minecraft/stats/StatBase;", arg0)); }
IChatComponent StatBase::getStatName() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getStatName", "()Lnet/minecraft/util/IChatComponent;")); }
bool StatBase::isAchievement() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAchievement", "()Z")); }
bool StatBase::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String StatBase::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int StatBase::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
String StatBase::format(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "format", "(I)Ljava/lang/String;", arg0)); }




EntityPlayer_EnumStatus EntityPlayer_EnumStatus::valueOf(String arg0) { return EntityPlayer_EnumStatus(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/entity/player/EntityPlayer$EnumStatus;", arg0)); }

String LockCode::getLock() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLock", "()Ljava/lang/String;")); }
void LockCode::toNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "toNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
LockCode LockCode::fromNBT(NBTTagCompound arg0) { return LockCode(*classes[className]->invokeStaticMethod<jobject>("fromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/world/LockCode;", arg0)); }
bool LockCode::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }

void NBTTagCompound::writeEntry(String arg0, NBTBase arg1, DataOutput arg2) { (classes[className]->invokeStaticMethod<void>("writeEntry", "(Ljava/lang/String;Lnet/minecraft/nbt/NBTBase;Ljava/io/DataOutput;)V", arg0, arg1, arg2)); }
String NBTTagCompound::readKey(DataInput arg0, NBTSizeTracker arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("readKey", "(Ljava/io/DataInput;Lnet/minecraft/nbt/NBTSizeTracker;)Ljava/lang/String;", arg0, arg1)); }
byte NBTTagCompound::readType(DataInput arg0, NBTSizeTracker arg1) { return byte(*classes[className]->invokeStaticMethod<byte>("readType", "(Ljava/io/DataInput;Lnet/minecraft/nbt/NBTSizeTracker;)B", arg0, arg1)); }
Set NBTTagCompound::getKeySet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getKeySet", "()Ljava/util/Set;")); }
byte NBTTagCompound::getTagId(String arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getTagId", "(Ljava/lang/String;)B", arg0)); }
void NBTTagCompound::removeTag(String arg0) { (classes[className]->invokeMethod<void>(this->object, "removeTag", "(Ljava/lang/String;)V", arg0)); }
void NBTTagCompound::setString(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "setString", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
bool NBTTagCompound::hasNoTags() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasNoTags", "()Z")); }
NBTBase NBTTagCompound::readNBT(byte arg0, String arg1, DataInput arg2, int arg3, NBTSizeTracker arg4) { return NBTBase(*classes[className]->invokeStaticMethod<jobject>("readNBT", "(BLjava/lang/String;Ljava/io/DataInput;ILnet/minecraft/nbt/NBTSizeTracker;)Lnet/minecraft/nbt/NBTBase;", arg0, arg1, arg2, arg3, arg4)); }
void NBTTagCompound::setInteger(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setInteger", "(Ljava/lang/String;I)V", arg0, arg1)); }
NBTTagList NBTTagCompound::getTagList(String arg0, int arg1) { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "getTagList", "(Ljava/lang/String;I)Lnet/minecraft/nbt/NBTTagList;", arg0, arg1)); }
bool NBTTagCompound::hasKey(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasKey", "(Ljava/lang/String;)Z", arg0)); }
bool NBTTagCompound::hasKey(String arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasKey", "(Ljava/lang/String;I)Z", arg0, arg1)); }
void NBTTagCompound::setTag(String arg0, NBTBase arg1) { (classes[className]->invokeMethod<void>(this->object, "setTag", "(Ljava/lang/String;Lnet/minecraft/nbt/NBTBase;)V", arg0, arg1)); }
NBTTagCompound NBTTagCompound::getCompoundTag(String arg0) { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getCompoundTag", "(Ljava/lang/String;)Lnet/minecraft/nbt/NBTTagCompound;", arg0)); }
void NBTTagCompound::setByteArray(String arg0, arr_B arg1) { (classes[className]->invokeMethod<void>(this->object, "setByteArray", "(Ljava/lang/String;[B)V", arg0, arg1)); }
void NBTTagCompound::setIntArray(String arg0, arr_I arg1) { (classes[className]->invokeMethod<void>(this->object, "setIntArray", "(Ljava/lang/String;[I)V", arg0, arg1)); }
CrashReport NBTTagCompound::createCrashReport(String arg0, int arg1, ClassCastException arg2) { return CrashReport(*classes[className]->invokeMethod<jobject>(this->object, "createCrashReport", "(Ljava/lang/String;ILjava/lang/ClassCastException;)Lnet/minecraft/crash/CrashReport;", arg0, arg1, arg2)); }
String NBTTagCompound::getString(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getString", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
NBTBase NBTTagCompound::getTag(String arg0) { return NBTBase(*classes[className]->invokeMethod<jobject>(this->object, "getTag", "(Ljava/lang/String;)Lnet/minecraft/nbt/NBTBase;", arg0)); }
bool NBTTagCompound::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String NBTTagCompound::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int NBTTagCompound::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool NBTTagCompound::getBoolean(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getBoolean", "(Ljava/lang/String;)Z", arg0)); }
byte NBTTagCompound::getByte(String arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getByte", "(Ljava/lang/String;)B", arg0)); }
short NBTTagCompound::getShort(String arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getShort", "(Ljava/lang/String;)S", arg0)); }
long NBTTagCompound::getLong(String arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getLong", "(Ljava/lang/String;)J", arg0)); }
float NBTTagCompound::getFloat(String arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloat", "(Ljava/lang/String;)F", arg0)); }
double NBTTagCompound::getDouble(String arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDouble", "(Ljava/lang/String;)D", arg0)); }
void NBTTagCompound::merge(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "merge", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void NBTTagCompound::write(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/io/DataOutput;)V", arg0)); }
void NBTTagCompound::read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (classes[className]->invokeMethod<void>(this->object, "read", "(Ljava/io/DataInput;ILnet/minecraft/nbt/NBTSizeTracker;)V", arg0, arg1, arg2)); }
byte NBTTagCompound::getId() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getId", "()B")); }
void NBTTagCompound::setBoolean(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setBoolean", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void NBTTagCompound::setByte(String arg0, byte arg1) { (classes[className]->invokeMethod<void>(this->object, "setByte", "(Ljava/lang/String;B)V", arg0, arg1)); }
void NBTTagCompound::setShort(String arg0, short arg1) { (classes[className]->invokeMethod<void>(this->object, "setShort", "(Ljava/lang/String;S)V", arg0, arg1)); }
void NBTTagCompound::setLong(String arg0, long arg1) { (classes[className]->invokeMethod<void>(this->object, "setLong", "(Ljava/lang/String;J)V", arg0, arg1)); }
void NBTTagCompound::setFloat(String arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setFloat", "(Ljava/lang/String;F)V", arg0, arg1)); }
void NBTTagCompound::setDouble(String arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setDouble", "(Ljava/lang/String;D)V", arg0, arg1)); }
NBTBase NBTTagCompound::copy() { return NBTBase(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Lnet/minecraft/nbt/NBTBase;")); }
int NBTTagCompound::getInteger(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInteger", "(Ljava/lang/String;)I", arg0)); }

bool NBTBase::hasNoTags() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasNoTags", "()Z")); }
NBTBase NBTBase::createNewByType(byte arg0) { return NBTBase(*classes[className]->invokeStaticMethod<jobject>("createNewByType", "(B)Lnet/minecraft/nbt/NBTBase;", arg0)); }
String NBTBase::getString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getString", "()Ljava/lang/String;")); }
bool NBTBase::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String NBTBase::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int NBTBase::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void NBTBase::write(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/io/DataOutput;)V", arg0)); }
void NBTBase::read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (classes[className]->invokeMethod<void>(this->object, "read", "(Ljava/io/DataInput;ILnet/minecraft/nbt/NBTSizeTracker;)V", arg0, arg1, arg2)); }
byte NBTBase::getId() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getId", "()B")); }
NBTBase NBTBase::copy() { return NBTBase(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Lnet/minecraft/nbt/NBTBase;")); }

void NBTSizeTracker::read(long arg0) { (classes[className]->invokeMethod<void>(this->object, "read", "(J)V", arg0)); }

int NBTTagList::getTagType() { return int(*classes[className]->invokeMethod<int>(this->object, "getTagType", "()I")); }
NBTBase NBTTagList::removeTag(int arg0) { return NBTBase(*classes[className]->invokeMethod<jobject>(this->object, "removeTag", "(I)Lnet/minecraft/nbt/NBTBase;", arg0)); }
void NBTTagList::appendTag(NBTBase arg0) { (classes[className]->invokeMethod<void>(this->object, "appendTag", "(Lnet/minecraft/nbt/NBTBase;)V", arg0)); }
bool NBTTagList::hasNoTags() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasNoTags", "()Z")); }
int NBTTagList::tagCount() { return int(*classes[className]->invokeMethod<int>(this->object, "tagCount", "()I")); }
String NBTTagList::getStringTagAt(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getStringTagAt", "(I)Ljava/lang/String;", arg0)); }
NBTTagCompound NBTTagList::getCompoundTagAt(int arg0) { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getCompoundTagAt", "(I)Lnet/minecraft/nbt/NBTTagCompound;", arg0)); }
NBTBase NBTTagList::get(int arg0) { return NBTBase(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I)Lnet/minecraft/nbt/NBTBase;", arg0)); }
bool NBTTagList::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String NBTTagList::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int NBTTagList::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void NBTTagList::set(int arg0, NBTBase arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(ILnet/minecraft/nbt/NBTBase;)V", arg0, arg1)); }
void NBTTagList::write(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/io/DataOutput;)V", arg0)); }
void NBTTagList::read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (classes[className]->invokeMethod<void>(this->object, "read", "(Ljava/io/DataInput;ILnet/minecraft/nbt/NBTSizeTracker;)V", arg0, arg1, arg2)); }
byte NBTTagList::getId() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getId", "()B")); }
NBTBase NBTTagList::copy() { return NBTBase(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Lnet/minecraft/nbt/NBTBase;")); }
float NBTTagList::getFloatAt(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloatAt", "(I)F", arg0)); }
double NBTTagList::getDoubleAt(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDoubleAt", "(I)D", arg0)); }

int EnumPlayerModelParts::getPartId() { return int(*classes[className]->invokeMethod<int>(this->object, "getPartId", "()I")); }
String EnumPlayerModelParts::getPartName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPartName", "()Ljava/lang/String;")); }
IChatComponent EnumPlayerModelParts::func_179326_d() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "func_179326_d", "()Lnet/minecraft/util/IChatComponent;")); }
int EnumPlayerModelParts::getPartMask() { return int(*classes[className]->invokeMethod<int>(this->object, "getPartMask", "()I")); }
EnumPlayerModelParts EnumPlayerModelParts::valueOf(String arg0) { return EnumPlayerModelParts(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/entity/player/EnumPlayerModelParts;", arg0)); }

bool GameProfile::isComplete() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isComplete", "()Z")); }
bool GameProfile::isLegacy() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLegacy", "()Z")); }
String GameProfile::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool GameProfile::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String GameProfile::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int GameProfile::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
PropertyMap GameProfile::getProperties() { return PropertyMap(*classes[className]->invokeMethod<jobject>(this->object, "getProperties", "()Lcom/mojang/authlib/properties/PropertyMap;")); }
UUID GameProfile::getId() { return UUID(*classes[className]->invokeMethod<jobject>(this->object, "getId", "()Ljava/util/UUID;")); }

Multimap PropertyMap::delegate() { return Multimap(*classes[className]->invokeMethod<jobject>(this->object, "delegate", "()Lcom/google/common/collect/Multimap;")); }


Multimap ForwardingMultimap::delegate() { return Multimap(*classes[className]->invokeMethod<jobject>(this->object, "delegate", "()Lcom/google/common/collect/Multimap;")); }

Object ForwardingObject::delegate() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "delegate", "()Ljava/lang/Object;")); }
String ForwardingObject::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

UUID UUID::fromString(String arg0) { return UUID(*classes[className]->invokeStaticMethod<jobject>("fromString", "(Ljava/lang/String;)Ljava/util/UUID;", arg0)); }
UUID UUID::randomUUID() { return UUID(*classes[className]->invokeStaticMethod<jobject>("randomUUID", "()Ljava/util/UUID;")); }
UUID UUID::nameUUIDFromBytes(arr_B arg0) { return UUID(*classes[className]->invokeStaticMethod<jobject>("nameUUIDFromBytes", "([B)Ljava/util/UUID;", arg0)); }
long UUID::getMostSignificantBits() { return long(*classes[className]->invokeMethod<long>(this->object, "getMostSignificantBits", "()J")); }
long UUID::getLeastSignificantBits() { return long(*classes[className]->invokeMethod<long>(this->object, "getLeastSignificantBits", "()J")); }
int UUID::variant() { return int(*classes[className]->invokeMethod<int>(this->object, "variant", "()I")); }
long UUID::parse4Nibbles(String arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("parse4Nibbles", "(Ljava/lang/String;I)J", arg0, arg1)); }
UUID UUID::fromString1(String arg0) { return UUID(*classes[className]->invokeStaticMethod<jobject>("fromString1", "(Ljava/lang/String;)Ljava/util/UUID;", arg0)); }
int UUID::clockSequence() { return int(*classes[className]->invokeMethod<int>(this->object, "clockSequence", "()I")); }
bool UUID::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String UUID::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int UUID::version() { return int(*classes[className]->invokeMethod<int>(this->object, "version", "()I")); }
int UUID::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
long UUID::timestamp() { return long(*classes[className]->invokeMethod<long>(this->object, "timestamp", "()J")); }
long UUID::node() { return long(*classes[className]->invokeMethod<long>(this->object, "node", "()J")); }

Entity DamageSource::getEntity() { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getEntity", "()Lnet/minecraft/entity/Entity;")); }
DamageSource DamageSource::setExplosionSource(Explosion arg0) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("setExplosionSource", "(Lnet/minecraft/world/Explosion;)Lnet/minecraft/util/DamageSource;", arg0)); }
DamageSource DamageSource::setFireDamage() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setFireDamage", "()Lnet/minecraft/util/DamageSource;")); }
DamageSource DamageSource::setDamageBypassesArmor() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setDamageBypassesArmor", "()Lnet/minecraft/util/DamageSource;")); }
DamageSource DamageSource::setDamageIsAbsolute() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setDamageIsAbsolute", "()Lnet/minecraft/util/DamageSource;")); }
DamageSource DamageSource::setMagicDamage() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setMagicDamage", "()Lnet/minecraft/util/DamageSource;")); }
DamageSource DamageSource::causeMobDamage(EntityLivingBase arg0) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("causeMobDamage", "(Lnet/minecraft/entity/EntityLivingBase;)Lnet/minecraft/util/DamageSource;", arg0)); }
DamageSource DamageSource::causeArrowDamage(EntityArrow arg0, Entity arg1) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("causeArrowDamage", "(Lnet/minecraft/entity/projectile/EntityArrow;Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/DamageSource;", arg0, arg1)); }
DamageSource DamageSource::setProjectile() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setProjectile", "()Lnet/minecraft/util/DamageSource;")); }
DamageSource DamageSource::causeFireballDamage(EntityFireball arg0, Entity arg1) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("causeFireballDamage", "(Lnet/minecraft/entity/projectile/EntityFireball;Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/DamageSource;", arg0, arg1)); }
DamageSource DamageSource::causeThrownDamage(Entity arg0, Entity arg1) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("causeThrownDamage", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/DamageSource;", arg0, arg1)); }
DamageSource DamageSource::causeIndirectMagicDamage(Entity arg0, Entity arg1) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("causeIndirectMagicDamage", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/DamageSource;", arg0, arg1)); }
DamageSource DamageSource::causeThornsDamage(Entity arg0) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("causeThornsDamage", "(Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/DamageSource;", arg0)); }
DamageSource DamageSource::setDifficultyScaled() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setDifficultyScaled", "()Lnet/minecraft/util/DamageSource;")); }
DamageSource DamageSource::setExplosion() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setExplosion", "()Lnet/minecraft/util/DamageSource;")); }
bool DamageSource::isProjectile() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isProjectile", "()Z")); }
Entity DamageSource::getSourceOfDamage() { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getSourceOfDamage", "()Lnet/minecraft/entity/Entity;")); }
IChatComponent DamageSource::getDeathMessage(EntityLivingBase arg0) { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getDeathMessage", "(Lnet/minecraft/entity/EntityLivingBase;)Lnet/minecraft/util/IChatComponent;", arg0)); }
String DamageSource::getDamageType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDamageType", "()Ljava/lang/String;")); }
bool DamageSource::isMagicDamage() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMagicDamage", "()Z")); }
bool DamageSource::isExplosion() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isExplosion", "()Z")); }
bool DamageSource::canHarmInCreative() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canHarmInCreative", "()Z")); }
bool DamageSource::isDifficultyScaled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDifficultyScaled", "()Z")); }
bool DamageSource::isUnblockable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUnblockable", "()Z")); }
float DamageSource::getHungerDamage() { return float(*classes[className]->invokeMethod<float>(this->object, "getHungerDamage", "()F")); }
DamageSource DamageSource::causePlayerDamage(EntityPlayer arg0) { return DamageSource(*classes[className]->invokeStaticMethod<jobject>("causePlayerDamage", "(Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/util/DamageSource;", arg0)); }
bool DamageSource::isFireDamage() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFireDamage", "()Z")); }
bool DamageSource::isDamageAbsolute() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDamageAbsolute", "()Z")); }
bool DamageSource::isCreativePlayer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCreativePlayer", "()Z")); }
DamageSource DamageSource::setDamageAllowedInCreativeMode() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "setDamageAllowedInCreativeMode", "()Lnet/minecraft/util/DamageSource;")); }

double Entity::getYOffset() { return double(*classes[className]->invokeMethod<double>(this->object, "getYOffset", "()D")); }
bool Entity::isInWater() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInWater", "()Z")); }
void Entity::setFire(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setFire", "(I)V", arg0)); }
bool Entity::isRiding() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRiding", "()Z")); }
void Entity::fall(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }
void Entity::setInWeb() { (classes[className]->invokeMethod<void>(this->object, "setInWeb", "()V")); }
int Entity::getAir() { return int(*classes[className]->invokeMethod<int>(this->object, "getAir", "()I")); }
void Entity::setAir(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setAir", "(I)V", arg0)); }
bool Entity::isWet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWet", "()Z")); }
void Entity::kill() { (classes[className]->invokeMethod<void>(this->object, "kill", "()V")); }
bool Entity::isInLava() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInLava", "()Z")); }
void Entity::moveFlying(float arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "moveFlying", "(FFF)V", arg0, arg1, arg2)); }
void Entity::moveEntity(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "moveEntity", "(DDD)V", arg0, arg1, arg2)); }
Vec3 Entity::getLookVec() { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getLookVec", "()Lnet/minecraft/util/Vec3;")); }
Vec3 Entity::getLook(float arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getLook", "(F)Lnet/minecraft/util/Vec3;", arg0)); }
void Entity::setAngles(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setAngles", "(FF)V", arg0, arg1)); }
void Entity::setFlag(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setFlag", "(IZ)V", arg0, arg1)); }
bool Entity::isSilent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSilent", "()Z")); }
void Entity::setSilent(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSilent", "(Z)V", arg0)); }
void Entity::setWorld(World arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorld", "(Lnet/minecraft/world/World;)V", arg0)); }
bool Entity::getFlag(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getFlag", "(I)Z", arg0)); }
bool Entity::isEating() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEating", "()Z")); }
bool Entity::interactAt(EntityPlayer arg0, Vec3 arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interactAt", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/Vec3;)Z", arg0, arg1)); }
void Entity::playSound(String arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "playSound", "(Ljava/lang/String;FF)V", arg0, arg1, arg2)); }
void Entity::setDead() { (classes[className]->invokeMethod<void>(this->object, "setDead", "()V")); }
void Entity::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void Entity::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void Entity::setEating(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setEating", "(Z)V", arg0)); }
bool Entity::isBurning() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBurning", "()Z")); }
void Entity::extinguish() { (classes[className]->invokeMethod<void>(this->object, "extinguish", "()V")); }
bool Entity::isSneaking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSneaking", "()Z")); }
void Entity::setSize(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(FF)V", arg0, arg1)); }
EntityItem Entity::dropItem(Item arg0, int arg1) { return EntityItem(*classes[className]->invokeMethod<jobject>(this->object, "dropItem", "(Lnet/minecraft/item/Item;I)Lnet/minecraft/entity/item/EntityItem;", arg0, arg1)); }
void Entity::writeToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
MovingObjectPosition Entity::rayTrace(double arg0, float arg1) { return MovingObjectPosition(*classes[className]->invokeMethod<jobject>(this->object, "rayTrace", "(DF)Lnet/minecraft/util/MovingObjectPosition;", arg0, arg1)); }
bool Entity::isEntityInsideOpaqueBlock() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEntityInsideOpaqueBlock", "()Z")); }
void Entity::preparePlayerToSpawn() { (classes[className]->invokeMethod<void>(this->object, "preparePlayerToSpawn", "()V")); }
int Entity::getEntityId() { return int(*classes[className]->invokeMethod<int>(this->object, "getEntityId", "()I")); }
DataWatcher Entity::getDataWatcher() { return DataWatcher(*classes[className]->invokeMethod<jobject>(this->object, "getDataWatcher", "()Lnet/minecraft/entity/DataWatcher;")); }
void Entity::setEntityId(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setEntityId", "(I)V", arg0)); }
UUID Entity::getUniqueID() { return UUID(*classes[className]->invokeMethod<jobject>(this->object, "getUniqueID", "()Ljava/util/UUID;")); }
AxisAlignedBB Entity::getCollisionBoundingBox() { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "getCollisionBoundingBox", "()Lnet/minecraft/util/AxisAlignedBB;")); }
void Entity::mountEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "mountEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
bool Entity::isOutsideBorder() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOutsideBorder", "()Z")); }
void Entity::setOutsideBorder(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setOutsideBorder", "(Z)V", arg0)); }
AxisAlignedBB Entity::getCollisionBox(Entity arg0) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "getCollisionBox", "(Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/AxisAlignedBB;", arg0)); }
void Entity::addEntityCrashInfo(CrashReportCategory arg0) { (classes[className]->invokeMethod<void>(this->object, "addEntityCrashInfo", "(Lnet/minecraft/crash/CrashReportCategory;)V", arg0)); }
void Entity::updateRidden() { (classes[className]->invokeMethod<void>(this->object, "updateRidden", "()V")); }
bool Entity::isPushedByWater() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPushedByWater", "()Z")); }
double Entity::getDistanceSq(double arg0, double arg1, double arg2) { return double(*classes[className]->invokeMethod<double>(this->object, "getDistanceSq", "(DDD)D", arg0, arg1, arg2)); }
double Entity::getDistanceSq(BlockPos arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDistanceSq", "(Lnet/minecraft/util/BlockPos;)D", arg0)); }
float Entity::getBrightness(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getBrightness", "(F)F", arg0)); }
double Entity::getDistanceSqToEntity(Entity arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDistanceSqToEntity", "(Lnet/minecraft/entity/Entity;)D", arg0)); }
bool Entity::isEntityAlive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEntityAlive", "()Z")); }
void Entity::setLocationAndAngles(double arg0, double arg1, double arg2, float arg3, float arg4) { (classes[className]->invokeMethod<void>(this->object, "setLocationAndAngles", "(DDDFF)V", arg0, arg1, arg2, arg3, arg4)); }
void Entity::setPosition(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setPosition", "(DDD)V", arg0, arg1, arg2)); }
int Entity::getMaxInPortalTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxInPortalTime", "()I")); }
String Entity::getSwimSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSwimSound", "()Ljava/lang/String;")); }
String Entity::getSplashSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSplashSound", "()Ljava/lang/String;")); }
int Entity::getPortalCooldown() { return int(*classes[className]->invokeMethod<int>(this->object, "getPortalCooldown", "()I")); }
float Entity::getEyeHeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getEyeHeight", "()F")); }
void Entity::handleStatusUpdate(byte arg0) { (classes[className]->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }
void Entity::setSneaking(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSneaking", "(Z)V", arg0)); }
bool Entity::isSprinting() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSprinting", "()Z")); }
AxisAlignedBB Entity::getEntityBoundingBox() { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "getEntityBoundingBox", "()Lnet/minecraft/util/AxisAlignedBB;")); }
void Entity::onCollideWithPlayer(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "onCollideWithPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
void Entity::addToPlayerScore(Entity arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addToPlayerScore", "(Lnet/minecraft/entity/Entity;I)V", arg0, arg1)); }
bool Entity::isInsideOfMaterial(Material arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInsideOfMaterial", "(Lnet/minecraft/block/material/Material;)Z", arg0)); }
void Entity::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void Entity::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void Entity::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool Entity::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
bool Entity::isEntityInvulnerable(DamageSource arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEntityInvulnerable", "(Lnet/minecraft/util/DamageSource;)Z", arg0)); }
bool Entity::interactFirst(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interactFirst", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
bool Entity::canAttackWithItem() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAttackWithItem", "()Z")); }
bool Entity::hitByEntity(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hitByEntity", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void Entity::addVelocity(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "addVelocity", "(DDD)V", arg0, arg1, arg2)); }
void Entity::setSprinting(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSprinting", "(Z)V", arg0)); }
void Entity::resetHeight() { (classes[className]->invokeMethod<void>(this->object, "resetHeight", "()V")); }
void Entity::onKillEntity(EntityLivingBase arg0) { (classes[className]->invokeMethod<void>(this->object, "onKillEntity", "(Lnet/minecraft/entity/EntityLivingBase;)V", arg0)); }
bool Entity::canTriggerWalking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canTriggerWalking", "()Z")); }
void Entity::setCurrentItemOrArmor(int arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
bool Entity::isInvisibleToPlayer(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvisibleToPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
bool Entity::isInvisible() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvisible", "()Z")); }
HoverEvent Entity::getHoverEvent() { return HoverEvent(*classes[className]->invokeMethod<jobject>(this->object, "getHoverEvent", "()Lnet/minecraft/event/HoverEvent;")); }
bool Entity::replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "replaceItemInInventory", "(ILnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
void Entity::onKillCommand() { (classes[className]->invokeMethod<void>(this->object, "onKillCommand", "()V")); }
void Entity::updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3) { (classes[className]->invokeMethod<void>(this->object, "updateFallState", "(DZLnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;)V", arg0, arg1, arg2, arg3)); }
bool Entity::handleWaterMovement() { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleWaterMovement", "()Z")); }
void Entity::onEntityUpdate() { (classes[className]->invokeMethod<void>(this->object, "onEntityUpdate", "()V")); }
bool Entity::isImmuneToFire() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isImmuneToFire", "()Z")); }
void Entity::setInvisible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setInvisible", "(Z)V", arg0)); }
void Entity::setBeenAttacked() { (classes[className]->invokeMethod<void>(this->object, "setBeenAttacked", "()V")); }
void Entity::performHurtAnimation() { (classes[className]->invokeMethod<void>(this->object, "performHurtAnimation", "()V")); }
void Entity::setPositionAndUpdate(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setPositionAndUpdate", "(DDD)V", arg0, arg1, arg2)); }
bool Entity::isOffsetPositionInLiquid(double arg0, double arg1, double arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOffsetPositionInLiquid", "(DDD)Z", arg0, arg1, arg2)); }
void Entity::setRotation(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setRotation", "(FF)V", arg0, arg1)); }
void Entity::applyEntityCollision(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "applyEntityCollision", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void Entity::setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6) { (classes[className]->invokeMethod<void>(this->object, "setPositionAndRotation2", "(DDDFFIZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
Vec3 Entity::getVectorForRotation(float arg0, float arg1) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getVectorForRotation", "(FF)Lnet/minecraft/util/Vec3;", arg0, arg1)); }
bool Entity::canBeCollidedWith() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeCollidedWith", "()Z")); }
bool Entity::canBePushed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBePushed", "()Z")); }
float Entity::getRotationYawHead() { return float(*classes[className]->invokeMethod<float>(this->object, "getRotationYawHead", "()F")); }
void Entity::setRotationYawHead(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setRotationYawHead", "(F)V", arg0)); }
void Entity::func_181013_g(float arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181013_g", "(F)V", arg0)); }
void Entity::setEntityBoundingBox(AxisAlignedBB arg0) { (classes[className]->invokeMethod<void>(this->object, "setEntityBoundingBox", "(Lnet/minecraft/util/AxisAlignedBB;)V", arg0)); }
void Entity::travelToDimension(int arg0) { (classes[className]->invokeMethod<void>(this->object, "travelToDimension", "(I)V", arg0)); }
void Entity::spawnRunningParticles() { (classes[className]->invokeMethod<void>(this->object, "spawnRunningParticles", "()V")); }
void Entity::setOnFireFromLava() { (classes[className]->invokeMethod<void>(this->object, "setOnFireFromLava", "()V")); }
bool Entity::isLiquidPresentInAABB(AxisAlignedBB arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLiquidPresentInAABB", "(Lnet/minecraft/util/AxisAlignedBB;)Z", arg0)); }
void Entity::resetPositionToBB() { (classes[className]->invokeMethod<void>(this->object, "resetPositionToBB", "()V")); }
void Entity::playStepSound(BlockPos arg0, Block arg1) { (classes[className]->invokeMethod<void>(this->object, "playStepSound", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", arg0, arg1)); }
void Entity::doBlockCollisions() { (classes[className]->invokeMethod<void>(this->object, "doBlockCollisions", "()V")); }
void Entity::dealFireDamage(int arg0) { (classes[className]->invokeMethod<void>(this->object, "dealFireDamage", "(I)V", arg0)); }
void Entity::createRunningParticles() { (classes[className]->invokeMethod<void>(this->object, "createRunningParticles", "()V")); }
int Entity::getBrightnessForRender(float arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getBrightnessForRender", "(F)I", arg0)); }
void Entity::setPositionAndRotation(double arg0, double arg1, double arg2, float arg3, float arg4) { (classes[className]->invokeMethod<void>(this->object, "setPositionAndRotation", "(DDDFF)V", arg0, arg1, arg2, arg3, arg4)); }
void Entity::moveToBlockPosAndAngles(BlockPos arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "moveToBlockPosAndAngles", "(Lnet/minecraft/util/BlockPos;FF)V", arg0, arg1, arg2)); }
float Entity::getDistanceToEntity(Entity arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getDistanceToEntity", "(Lnet/minecraft/entity/Entity;)F", arg0)); }
double Entity::getDistanceSqToCenter(BlockPos arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDistanceSqToCenter", "(Lnet/minecraft/util/BlockPos;)D", arg0)); }
double Entity::getDistance(double arg0, double arg1, double arg2) { return double(*classes[className]->invokeMethod<double>(this->object, "getDistance", "(DDD)D", arg0, arg1, arg2)); }
Vec3 Entity::getPositionEyes(float arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getPositionEyes", "(F)Lnet/minecraft/util/Vec3;", arg0)); }
bool Entity::isInRangeToRender3d(double arg0, double arg1, double arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInRangeToRender3d", "(DDD)Z", arg0, arg1, arg2)); }
bool Entity::isInRangeToRenderDist(double arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInRangeToRenderDist", "(D)Z", arg0)); }
bool Entity::writeMountToNBT(NBTTagCompound arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "writeMountToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)Z", arg0)); }
String Entity::getEntityString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getEntityString", "()Ljava/lang/String;")); }
bool Entity::writeToNBTOptional(NBTTagCompound arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "writeToNBTOptional", "(Lnet/minecraft/nbt/NBTTagCompound;)Z", arg0)); }
NBTTagList Entity::newDoubleNBTList(arr_D arg0) { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "newDoubleNBTList", "([D)Lnet/minecraft/nbt/NBTTagList;", arg0)); }
NBTTagList Entity::newFloatNBTList(arr_F arg0) { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "newFloatNBTList", "([F)Lnet/minecraft/nbt/NBTTagList;", arg0)); }
String Entity::getCustomNameTag() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCustomNameTag", "()Ljava/lang/String;")); }
bool Entity::getAlwaysRenderNameTag() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAlwaysRenderNameTag", "()Z")); }
void Entity::setCustomNameTag(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setCustomNameTag", "(Ljava/lang/String;)V", arg0)); }
void Entity::setAlwaysRenderNameTag(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAlwaysRenderNameTag", "(Z)V", arg0)); }
bool Entity::shouldSetPosAfterLoading() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldSetPosAfterLoading", "()Z")); }
void Entity::onChunkLoad() { (classes[className]->invokeMethod<void>(this->object, "onChunkLoad", "()V")); }
EntityItem Entity::dropItemWithOffset(Item arg0, int arg1, float arg2) { return EntityItem(*classes[className]->invokeMethod<jobject>(this->object, "dropItemWithOffset", "(Lnet/minecraft/item/Item;IF)Lnet/minecraft/entity/item/EntityItem;", arg0, arg1, arg2)); }
EntityItem Entity::entityDropItem(ItemStack arg0, float arg1) { return EntityItem(*classes[className]->invokeMethod<jobject>(this->object, "entityDropItem", "(Lnet/minecraft/item/ItemStack;F)Lnet/minecraft/entity/item/EntityItem;", arg0, arg1)); }
void Entity::updateRiderPosition() { (classes[className]->invokeMethod<void>(this->object, "updateRiderPosition", "()V")); }
double Entity::getMountedYOffset() { return double(*classes[className]->invokeMethod<double>(this->object, "getMountedYOffset", "()D")); }
float Entity::getCollisionBorderSize() { return float(*classes[className]->invokeMethod<float>(this->object, "getCollisionBorderSize", "()F")); }
void Entity::func_181015_d(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181015_d", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
void Entity::setVelocity(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setVelocity", "(DDD)V", arg0, arg1, arg2)); }
void Entity::onStruckByLightning(EntityLightningBolt arg0) { (classes[className]->invokeMethod<void>(this->object, "onStruckByLightning", "(Lnet/minecraft/entity/effect/EntityLightningBolt;)V", arg0)); }
bool Entity::pushOutOfBlocks(double arg0, double arg1, double arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "pushOutOfBlocks", "(DDD)Z", arg0, arg1, arg2)); }
bool Entity::hasCustomName() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasCustomName", "()Z")); }
bool Entity::isEntityEqual(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEntityEqual", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void Entity::copyLocationAndAnglesFrom(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "copyLocationAndAnglesFrom", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void Entity::copyDataFromOld(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "copyDataFromOld", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
float Entity::getExplosionResistance(Explosion arg0, World arg1, BlockPos arg2, IBlockState arg3) { return float(*classes[className]->invokeMethod<float>(this->object, "getExplosionResistance", "(Lnet/minecraft/world/Explosion;Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)F", arg0, arg1, arg2, arg3)); }
bool Entity::verifyExplosion(Explosion arg0, World arg1, BlockPos arg2, IBlockState arg3, float arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "verifyExplosion", "(Lnet/minecraft/world/Explosion;Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;F)Z", arg0, arg1, arg2, arg3, arg4)); }
int Entity::getMaxFallHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxFallHeight", "()I")); }
Vec3 Entity::func_181014_aG() { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "func_181014_aG", "()Lnet/minecraft/util/Vec3;")); }
EnumFacing Entity::func_181012_aH() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "func_181012_aH", "()Lnet/minecraft/util/EnumFacing;")); }
bool Entity::canRenderOnFire() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canRenderOnFire", "()Z")); }
void Entity::onDataWatcherUpdate(int arg0) { (classes[className]->invokeMethod<void>(this->object, "onDataWatcherUpdate", "(I)V", arg0)); }
EnumFacing Entity::getHorizontalFacing() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "getHorizontalFacing", "()Lnet/minecraft/util/EnumFacing;")); }
bool Entity::isSpectatedByPlayer(EntityPlayerMP arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSpectatedByPlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)Z", arg0)); }
CommandResultStats Entity::getCommandStats() { return CommandResultStats(*classes[className]->invokeMethod<jobject>(this->object, "getCommandStats", "()Lnet/minecraft/command/CommandResultStats;")); }
void Entity::func_174817_o(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "func_174817_o", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
NBTTagCompound Entity::getNBTTagCompound() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getNBTTagCompound", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
void Entity::clientUpdateEntityNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "clientUpdateEntityNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool Entity::isImmuneToExplosions() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isImmuneToExplosions", "()Z")); }
void Entity::applyEnchantments(EntityLivingBase arg0, Entity arg1) { (classes[className]->invokeMethod<void>(this->object, "applyEnchantments", "(Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/entity/Entity;)V", arg0, arg1)); }
bool Entity::doesEntityNotTriggerPressurePlate() { return bool(*classes[className]->invokeMethod<bool>(this->object, "doesEntityNotTriggerPressurePlate", "()Z")); }
bool Entity::getAlwaysRenderNameTagForRender() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAlwaysRenderNameTagForRender", "()Z")); }
bool Entity::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Entity::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Entity::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

Vec3 Vec3::rotateYaw(float arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "rotateYaw", "(F)Lnet/minecraft/util/Vec3;", arg0)); }
Vec3 Vec3::addVector(double arg0, double arg1, double arg2) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "addVector", "(DDD)Lnet/minecraft/util/Vec3;", arg0, arg1, arg2)); }
double Vec3::dotProduct(Vec3 arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "dotProduct", "(Lnet/minecraft/util/Vec3;)D", arg0)); }
double Vec3::distanceTo(Vec3 arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "distanceTo", "(Lnet/minecraft/util/Vec3;)D", arg0)); }
Vec3 Vec3::crossProduct(Vec3 arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "crossProduct", "(Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/Vec3;", arg0)); }
Vec3 Vec3::subtractReverse(Vec3 arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "subtractReverse", "(Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/Vec3;", arg0)); }
Vec3 Vec3::getIntermediateWithXValue(Vec3 arg0, double arg1) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getIntermediateWithXValue", "(Lnet/minecraft/util/Vec3;D)Lnet/minecraft/util/Vec3;", arg0, arg1)); }
Vec3 Vec3::getIntermediateWithYValue(Vec3 arg0, double arg1) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getIntermediateWithYValue", "(Lnet/minecraft/util/Vec3;D)Lnet/minecraft/util/Vec3;", arg0, arg1)); }
Vec3 Vec3::getIntermediateWithZValue(Vec3 arg0, double arg1) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getIntermediateWithZValue", "(Lnet/minecraft/util/Vec3;D)Lnet/minecraft/util/Vec3;", arg0, arg1)); }
double Vec3::squareDistanceTo(Vec3 arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "squareDistanceTo", "(Lnet/minecraft/util/Vec3;)D", arg0)); }
double Vec3::lengthVector() { return double(*classes[className]->invokeMethod<double>(this->object, "lengthVector", "()D")); }
Vec3 Vec3::rotatePitch(float arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "rotatePitch", "(F)Lnet/minecraft/util/Vec3;", arg0)); }
Vec3 Vec3::subtract(Vec3 arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "subtract", "(Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/Vec3;", arg0)); }
Vec3 Vec3::subtract(double arg0, double arg1, double arg2) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "subtract", "(DDD)Lnet/minecraft/util/Vec3;", arg0, arg1, arg2)); }
Vec3 Vec3::add(Vec3 arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/Vec3;", arg0)); }
String Vec3::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Vec3 Vec3::normalize() { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "normalize", "()Lnet/minecraft/util/Vec3;")); }

bool Item::onItemUse(ItemStack arg0, EntityPlayer arg1, World arg2, BlockPos arg3, EnumFacing arg4, float arg5, float arg6, float arg7) { return bool(*classes[className]->invokeMethod<bool>(this->object, "onItemUse", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;FFF)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
Item Item::setFull3D() { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setFull3D", "()Lnet/minecraft/item/Item;")); }
bool Item::isFull3D() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFull3D", "()Z")); }
void Item::onCreated(ItemStack arg0, World arg1, EntityPlayer arg2) { (classes[className]->invokeMethod<void>(this->object, "onCreated", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)V", arg0, arg1, arg2)); }
bool Item::isMap() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMap", "()Z")); }
bool Item::hasEffect(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasEffect", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
bool Item::isItemTool(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemTool", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
bool Item::hitEntity(ItemStack arg0, EntityLivingBase arg1, EntityLivingBase arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hitEntity", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/entity/EntityLivingBase;)Z", arg0, arg1, arg2)); }
EnumRarity Item::getRarity(ItemStack arg0) { return EnumRarity(*classes[className]->invokeMethod<jobject>(this->object, "getRarity", "(Lnet/minecraft/item/ItemStack;)Lnet/minecraft/item/EnumRarity;", arg0)); }
void Item::onUpdate(ItemStack arg0, World arg1, Entity arg2, int arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/Entity;IZ)V", arg0, arg1, arg2, arg3, arg4)); }
bool Item::getHasSubtypes() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getHasSubtypes", "()Z")); }
int Item::getMetadata(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMetadata", "(I)I", arg0)); }
Item Item::getItemById(int arg0) { return Item(*classes[className]->invokeStaticMethod<jobject>("getItemById", "(I)Lnet/minecraft/item/Item;", arg0)); }
Item Item::getItemFromBlock(Block arg0) { return Item(*classes[className]->invokeStaticMethod<jobject>("getItemFromBlock", "(Lnet/minecraft/block/Block;)Lnet/minecraft/item/Item;", arg0)); }
Item Item::getByNameOrId(String arg0) { return Item(*classes[className]->invokeStaticMethod<jobject>("getByNameOrId", "(Ljava/lang/String;)Lnet/minecraft/item/Item;", arg0)); }
bool Item::updateItemStackNBT(NBTTagCompound arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "updateItemStackNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)Z", arg0)); }
Item Item::setMaxStackSize(int arg0) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setMaxStackSize", "(I)Lnet/minecraft/item/Item;", arg0)); }
ItemStack Item::onItemRightClick(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "onItemRightClick", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/item/ItemStack;", arg0, arg1, arg2)); }
Item Item::setHasSubtypes(bool arg0) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setHasSubtypes", "(Z)Lnet/minecraft/item/Item;", arg0)); }
int Item::getMaxDamage() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxDamage", "()I")); }
Item Item::setMaxDamage(int arg0) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setMaxDamage", "(I)Lnet/minecraft/item/Item;", arg0)); }
bool Item::isDamageable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDamageable", "()Z")); }
bool Item::onBlockDestroyed(ItemStack arg0, World arg1, Block arg2, BlockPos arg3, EntityLivingBase arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "onBlockDestroyed", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Lnet/minecraft/entity/EntityLivingBase;)Z", arg0, arg1, arg2, arg3, arg4)); }
bool Item::itemInteractionForEntity(ItemStack arg0, EntityPlayer arg1, EntityLivingBase arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "itemInteractionForEntity", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/entity/EntityLivingBase;)Z", arg0, arg1, arg2)); }
Item Item::setUnlocalizedName(String arg0) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setUnlocalizedName", "(Ljava/lang/String;)Lnet/minecraft/item/Item;", arg0)); }
String Item::getUnlocalizedName(ItemStack arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnlocalizedName", "(Lnet/minecraft/item/ItemStack;)Ljava/lang/String;", arg0)); }
String Item::getUnlocalizedName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava/lang/String;")); }
Item Item::setContainerItem(Item arg0) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setContainerItem", "(Lnet/minecraft/item/Item;)Lnet/minecraft/item/Item;", arg0)); }
bool Item::getShareTag() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getShareTag", "()Z")); }
Item Item::getContainerItem() { return Item(*classes[className]->invokeMethod<jobject>(this->object, "getContainerItem", "()Lnet/minecraft/item/Item;")); }
bool Item::hasContainerItem() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasContainerItem", "()Z")); }
int Item::getColorFromItemStack(ItemStack arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getColorFromItemStack", "(Lnet/minecraft/item/ItemStack;I)I", arg0, arg1)); }
Item Item::setPotionEffect(String arg0) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setPotionEffect", "(Ljava/lang/String;)Lnet/minecraft/item/Item;", arg0)); }
String Item::getPotionEffect(ItemStack arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPotionEffect", "(Lnet/minecraft/item/ItemStack;)Ljava/lang/String;", arg0)); }
bool Item::isPotionIngredient(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPotionIngredient", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
void Item::addInformation(ItemStack arg0, EntityPlayer arg1, List arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "addInformation", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/entity/player/EntityPlayer;Ljava/util/List;Z)V", arg0, arg1, arg2, arg3)); }
String Item::getItemStackDisplayName(ItemStack arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getItemStackDisplayName", "(Lnet/minecraft/item/ItemStack;)Ljava/lang/String;", arg0)); }
int Item::getItemEnchantability() { return int(*classes[className]->invokeMethod<int>(this->object, "getItemEnchantability", "()I")); }
void Item::getSubItems(Item arg0, CreativeTabs arg1, List arg2) { (classes[className]->invokeMethod<void>(this->object, "getSubItems", "(Lnet/minecraft/item/Item;Lnet/minecraft/creativetab/CreativeTabs;Ljava/util/List;)V", arg0, arg1, arg2)); }
CreativeTabs Item::getCreativeTab() { return CreativeTabs(*classes[className]->invokeMethod<jobject>(this->object, "getCreativeTab", "()Lnet/minecraft/creativetab/CreativeTabs;")); }
Item Item::setCreativeTab(CreativeTabs arg0) { return Item(*classes[className]->invokeMethod<jobject>(this->object, "setCreativeTab", "(Lnet/minecraft/creativetab/CreativeTabs;)Lnet/minecraft/item/Item;", arg0)); }
bool Item::canItemEditBlocks() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canItemEditBlocks", "()Z")); }
bool Item::getIsRepairable(ItemStack arg0, ItemStack arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsRepairable", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
Multimap Item::getItemAttributeModifiers() { return Multimap(*classes[className]->invokeMethod<jobject>(this->object, "getItemAttributeModifiers", "()Lcom/google/common/collect/Multimap;")); }
void Item::registerItems() { (classes[className]->invokeStaticMethod<void>("registerItems", "()V")); }
void Item::registerItemBlock(Block arg0) { (classes[className]->invokeStaticMethod<void>("registerItemBlock", "(Lnet/minecraft/block/Block;)V", arg0)); }
void Item::registerItemBlock(Block arg0, Item arg1) { (classes[className]->invokeStaticMethod<void>("registerItemBlock", "(Lnet/minecraft/block/Block;Lnet/minecraft/item/Item;)V", arg0, arg1)); }
void Item::registerItem(int arg0, String arg1, Item arg2) { (classes[className]->invokeStaticMethod<void>("registerItem", "(ILjava/lang/String;Lnet/minecraft/item/Item;)V", arg0, arg1, arg2)); }
void Item::registerItem(int arg0, ResourceLocation arg1, Item arg2) { (classes[className]->invokeStaticMethod<void>("registerItem", "(ILnet/minecraft/util/ResourceLocation;Lnet/minecraft/item/Item;)V", arg0, arg1, arg2)); }
int Item::getItemStackLimit() { return int(*classes[className]->invokeMethod<int>(this->object, "getItemStackLimit", "()I")); }
int Item::getMaxItemUseDuration(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxItemUseDuration", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
void Item::onPlayerStoppedUsing(ItemStack arg0, World arg1, EntityPlayer arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "onPlayerStoppedUsing", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;I)V", arg0, arg1, arg2, arg3)); }
EnumAction Item::getItemUseAction(ItemStack arg0) { return EnumAction(*classes[className]->invokeMethod<jobject>(this->object, "getItemUseAction", "(Lnet/minecraft/item/ItemStack;)Lnet/minecraft/item/EnumAction;", arg0)); }
ItemStack Item::onItemUseFinish(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "onItemUseFinish", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/item/ItemStack;", arg0, arg1, arg2)); }
int Item::getIdFromItem(Item arg0) { return int(*classes[className]->invokeStaticMethod<int>("getIdFromItem", "(Lnet/minecraft/item/Item;)I", arg0)); }
float Item::getStrVsBlock(ItemStack arg0, Block arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "getStrVsBlock", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/block/Block;)F", arg0, arg1)); }
bool Item::canHarvestBlock(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canHarvestBlock", "(Lnet/minecraft/block/Block;)Z", arg0)); }
bool Item::shouldRotateAroundWhenRendering() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldRotateAroundWhenRendering", "()Z")); }
String Item::getUnlocalizedNameInefficiently(ItemStack arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnlocalizedNameInefficiently", "(Lnet/minecraft/item/ItemStack;)Ljava/lang/String;", arg0)); }
MovingObjectPosition Item::getMovingObjectPositionFromPlayer(World arg0, EntityPlayer arg1, bool arg2) { return MovingObjectPosition(*classes[className]->invokeMethod<jobject>(this->object, "getMovingObjectPositionFromPlayer", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;Z)Lnet/minecraft/util/MovingObjectPosition;", arg0, arg1, arg2)); }

void ItemStack::setTagInfo(String arg0, NBTBase arg1) { (classes[className]->invokeMethod<void>(this->object, "setTagInfo", "(Ljava/lang/String;Lnet/minecraft/nbt/NBTBase;)V", arg0, arg1)); }
ItemStack ItemStack::splitStack(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "splitStack", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
void ItemStack::onCrafting(World arg0, EntityPlayer arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "onCrafting", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;I)V", arg0, arg1, arg2)); }
void ItemStack::setItem(Item arg0) { (classes[className]->invokeMethod<void>(this->object, "setItem", "(Lnet/minecraft/item/Item;)V", arg0)); }
bool ItemStack::canDestroy(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDestroy", "(Lnet/minecraft/block/Block;)Z", arg0)); }
bool ItemStack::onItemUse(EntityPlayer arg0, World arg1, BlockPos arg2, EnumFacing arg3, float arg4, float arg5, float arg6) { return bool(*classes[className]->invokeMethod<bool>(this->object, "onItemUse", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;FFF)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
bool ItemStack::hasEffect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasEffect", "()Z")); }
void ItemStack::hitEntity(EntityLivingBase arg0, EntityPlayer arg1) { (classes[className]->invokeMethod<void>(this->object, "hitEntity", "(Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/entity/player/EntityPlayer;)V", arg0, arg1)); }
bool ItemStack::canPlaceOn(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPlaceOn", "(Lnet/minecraft/block/Block;)Z", arg0)); }
void ItemStack::damageItem(int arg0, EntityLivingBase arg1) { (classes[className]->invokeMethod<void>(this->object, "damageItem", "(ILnet/minecraft/entity/EntityLivingBase;)V", arg0, arg1)); }
List ItemStack::getTooltip(EntityPlayer arg0, bool arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getTooltip", "(Lnet/minecraft/entity/player/EntityPlayer;Z)Ljava/util/List;", arg0, arg1)); }
EnumRarity ItemStack::getRarity() { return EnumRarity(*classes[className]->invokeMethod<jobject>(this->object, "getRarity", "()Lnet/minecraft/item/EnumRarity;")); }
NBTTagCompound ItemStack::writeToNBT(NBTTagCompound arg0) { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/nbt/NBTTagCompound;", arg0)); }
bool ItemStack::getHasSubtypes() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getHasSubtypes", "()Z")); }
int ItemStack::getMetadata() { return int(*classes[className]->invokeMethod<int>(this->object, "getMetadata", "()I")); }
void ItemStack::setTagCompound(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "setTagCompound", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
IChatComponent ItemStack::getChatComponent() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getChatComponent", "()Lnet/minecraft/util/IChatComponent;")); }
NBTTagCompound ItemStack::getTagCompound() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getTagCompound", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
ItemStack ItemStack::useItemRightClick(World arg0, EntityPlayer arg1) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "useItemRightClick", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/item/ItemStack;", arg0, arg1)); }
bool ItemStack::isStackable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStackable", "()Z")); }
bool ItemStack::isItemStackDamageable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemStackDamageable", "()Z")); }
bool ItemStack::isItemDamaged() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemDamaged", "()Z")); }
bool ItemStack::hasTagCompound() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasTagCompound", "()Z")); }
int ItemStack::getItemDamage() { return int(*classes[className]->invokeMethod<int>(this->object, "getItemDamage", "()I")); }
void ItemStack::setItemDamage(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setItemDamage", "(I)V", arg0)); }
bool ItemStack::attemptDamageItem(int arg0, Random arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attemptDamageItem", "(ILjava/util/Random;)Z", arg0, arg1)); }
bool ItemStack::areItemStackTagsEqual(ItemStack arg0, ItemStack arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("areItemStackTagsEqual", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
bool ItemStack::isItemStackEqual(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemStackEqual", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
bool ItemStack::areItemsEqual(ItemStack arg0, ItemStack arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("areItemsEqual", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
bool ItemStack::isItemEqual(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemEqual", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
ItemStack ItemStack::copyItemStack(ItemStack arg0) { return ItemStack(*classes[className]->invokeStaticMethod<jobject>("copyItemStack", "(Lnet/minecraft/item/ItemStack;)Lnet/minecraft/item/ItemStack;", arg0)); }
void ItemStack::updateAnimation(World arg0, Entity arg1, int arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "updateAnimation", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/Entity;IZ)V", arg0, arg1, arg2, arg3)); }
bool ItemStack::getIsItemStackEqual(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsItemStackEqual", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
NBTTagCompound ItemStack::getSubCompound(String arg0, bool arg1) { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getSubCompound", "(Ljava/lang/String;Z)Lnet/minecraft/nbt/NBTTagCompound;", arg0, arg1)); }
NBTTagList ItemStack::getEnchantmentTagList() { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "getEnchantmentTagList", "()Lnet/minecraft/nbt/NBTTagList;")); }
ItemStack ItemStack::setStackDisplayName(String arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "setStackDisplayName", "(Ljava/lang/String;)Lnet/minecraft/item/ItemStack;", arg0)); }
void ItemStack::clearCustomName() { (classes[className]->invokeMethod<void>(this->object, "clearCustomName", "()V")); }
bool ItemStack::isItemEnchantable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemEnchantable", "()Z")); }
void ItemStack::addEnchantment(Enchantment arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addEnchantment", "(Lnet/minecraft/enchantment/Enchantment;I)V", arg0, arg1)); }
bool ItemStack::isOnItemFrame() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOnItemFrame", "()Z")); }
void ItemStack::setItemFrame(EntityItemFrame arg0) { (classes[className]->invokeMethod<void>(this->object, "setItemFrame", "(Lnet/minecraft/entity/item/EntityItemFrame;)V", arg0)); }
EntityItemFrame ItemStack::getItemFrame() { return EntityItemFrame(*classes[className]->invokeMethod<jobject>(this->object, "getItemFrame", "()Lnet/minecraft/entity/item/EntityItemFrame;")); }
int ItemStack::getRepairCost() { return int(*classes[className]->invokeMethod<int>(this->object, "getRepairCost", "()I")); }
void ItemStack::setRepairCost(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setRepairCost", "(I)V", arg0)); }
ItemStack ItemStack::loadItemStackFromNBT(NBTTagCompound arg0) { return ItemStack(*classes[className]->invokeStaticMethod<jobject>("loadItemStackFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/item/ItemStack;", arg0)); }
int ItemStack::getMaxDamage() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxDamage", "()I")); }
void ItemStack::onBlockDestroyed(World arg0, Block arg1, BlockPos arg2, EntityPlayer arg3) { (classes[className]->invokeMethod<void>(this->object, "onBlockDestroyed", "(Lnet/minecraft/world/World;Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Lnet/minecraft/entity/player/EntityPlayer;)V", arg0, arg1, arg2, arg3)); }
String ItemStack::getUnlocalizedName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava/lang/String;")); }
bool ItemStack::isItemEnchanted() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemEnchanted", "()Z")); }
int ItemStack::getMaxStackSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxStackSize", "()I")); }
int ItemStack::getMaxItemUseDuration() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxItemUseDuration", "()I")); }
void ItemStack::onPlayerStoppedUsing(World arg0, EntityPlayer arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "onPlayerStoppedUsing", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;I)V", arg0, arg1, arg2)); }
EnumAction ItemStack::getItemUseAction() { return EnumAction(*classes[className]->invokeMethod<jobject>(this->object, "getItemUseAction", "()Lnet/minecraft/item/EnumAction;")); }
ItemStack ItemStack::onItemUseFinish(World arg0, EntityPlayer arg1) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "onItemUseFinish", "(Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/item/ItemStack;", arg0, arg1)); }
float ItemStack::getStrVsBlock(Block arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getStrVsBlock", "(Lnet/minecraft/block/Block;)F", arg0)); }
bool ItemStack::canHarvestBlock(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canHarvestBlock", "(Lnet/minecraft/block/Block;)Z", arg0)); }
void ItemStack::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool ItemStack::interactWithEntity(EntityPlayer arg0, EntityLivingBase arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interactWithEntity", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/entity/EntityLivingBase;)Z", arg0, arg1)); }
bool ItemStack::canEditBlocks() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEditBlocks", "()Z")); }
bool ItemStack::hasDisplayName() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasDisplayName", "()Z")); }
Multimap ItemStack::getAttributeModifiers() { return Multimap(*classes[className]->invokeMethod<jobject>(this->object, "getAttributeModifiers", "()Lcom/google/common/collect/Multimap;")); }
bool ItemStack::areItemStacksEqual(ItemStack arg0, ItemStack arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("areItemStacksEqual", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
String ItemStack::getDisplayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava/lang/String;")); }
Item ItemStack::getItem() { return Item(*classes[className]->invokeMethod<jobject>(this->object, "getItem", "()Lnet/minecraft/item/Item;")); }
String ItemStack::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
ItemStack ItemStack::copy() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Lnet/minecraft/item/ItemStack;")); }

Team EntityLivingBase::getTeam() { return Team(*classes[className]->invokeMethod<jobject>(this->object, "getTeam", "()Lnet/minecraft/scoreboard/Team;")); }
bool EntityLivingBase::isOnLadder() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOnLadder", "()Z")); }
void EntityLivingBase::fall(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }
bool EntityLivingBase::isPlayer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlayer", "()Z")); }
bool EntityLivingBase::isChild() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isChild", "()Z")); }
Random EntityLivingBase::getRNG() { return Random(*classes[className]->invokeMethod<jobject>(this->object, "getRNG", "()Ljava/util/Random;")); }
int EntityLivingBase::getAge() { return int(*classes[className]->invokeMethod<int>(this->object, "getAge", "()I")); }
void EntityLivingBase::knockBack(Entity arg0, float arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "knockBack", "(Lnet/minecraft/entity/Entity;FDD)V", arg0, arg1, arg2, arg3)); }
void EntityLivingBase::kill() { (classes[className]->invokeMethod<void>(this->object, "kill", "()V")); }
void EntityLivingBase::setJumping(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setJumping", "(Z)V", arg0)); }
Vec3 EntityLivingBase::getLookVec() { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getLookVec", "()Lnet/minecraft/util/Vec3;")); }
Vec3 EntityLivingBase::getLook(float arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getLook", "(F)Lnet/minecraft/util/Vec3;", arg0)); }
bool EntityLivingBase::isOnTeam(Team arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOnTeam", "(Lnet/minecraft/scoreboard/Team;)Z", arg0)); }
void EntityLivingBase::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityLivingBase::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityLivingBase::setHealth(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setHealth", "(F)V", arg0)); }
void EntityLivingBase::heal(float arg0) { (classes[className]->invokeMethod<void>(this->object, "heal", "(F)V", arg0)); }
void EntityLivingBase::onDeath(DamageSource arg0) { (classes[className]->invokeMethod<void>(this->object, "onDeath", "(Lnet/minecraft/util/DamageSource;)V", arg0)); }
float EntityLivingBase::getHealth() { return float(*classes[className]->invokeMethod<float>(this->object, "getHealth", "()F")); }
void EntityLivingBase::swingItem() { (classes[className]->invokeMethod<void>(this->object, "swingItem", "()V")); }
bool EntityLivingBase::isPlayerSleeping() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlayerSleeping", "()Z")); }
void EntityLivingBase::setLastAttacker(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "setLastAttacker", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityLivingBase::mountEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "mountEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityLivingBase::updateRidden() { (classes[className]->invokeMethod<void>(this->object, "updateRidden", "()V")); }
bool EntityLivingBase::isEntityAlive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEntityAlive", "()Z")); }
ItemStack EntityLivingBase::getHeldItem() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getHeldItem", "()Lnet/minecraft/item/ItemStack;")); }
void EntityLivingBase::applyEntityAttributes() { (classes[className]->invokeMethod<void>(this->object, "applyEntityAttributes", "()V")); }
BaseAttributeMap EntityLivingBase::getAttributeMap() { return BaseAttributeMap(*classes[className]->invokeMethod<jobject>(this->object, "getAttributeMap", "()Lnet/minecraft/entity/ai/attributes/BaseAttributeMap;")); }
IAttributeInstance EntityLivingBase::getEntityAttribute(IAttribute arg0) { return IAttributeInstance(*classes[className]->invokeMethod<jobject>(this->object, "getEntityAttribute", "(Lnet/minecraft/entity/ai/attributes/IAttribute;)Lnet/minecraft/entity/ai/attributes/IAttributeInstance;", arg0)); }
void EntityLivingBase::handleStatusUpdate(byte arg0) { (classes[className]->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }
bool EntityLivingBase::isMovementBlocked() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMovementBlocked", "()Z")); }
float EntityLivingBase::getMaxHealth() { return float(*classes[className]->invokeMethod<float>(this->object, "getMaxHealth", "()F")); }
void EntityLivingBase::updateEntityActionState() { (classes[className]->invokeMethod<void>(this->object, "updateEntityActionState", "()V")); }
void EntityLivingBase::updateArmSwingProgress() { (classes[className]->invokeMethod<void>(this->object, "updateArmSwingProgress", "()V")); }
void EntityLivingBase::onLivingUpdate() { (classes[className]->invokeMethod<void>(this->object, "onLivingUpdate", "()V")); }
void EntityLivingBase::setAIMoveSpeed(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setAIMoveSpeed", "(F)V", arg0)); }
String EntityLivingBase::getHurtSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHurtSound", "()Ljava/lang/String;")); }
String EntityLivingBase::getDeathSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDeathSound", "()Ljava/lang/String;")); }
bool EntityLivingBase::isPotionActive(Potion arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPotionActive", "(Lnet/minecraft/potion/Potion;)Z", arg0)); }
bool EntityLivingBase::isPotionActive(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPotionActive", "(I)Z", arg0)); }
PotionEffect EntityLivingBase::getActivePotionEffect(Potion arg0) { return PotionEffect(*classes[className]->invokeMethod<jobject>(this->object, "getActivePotionEffect", "(Lnet/minecraft/potion/Potion;)Lnet/minecraft/potion/PotionEffect;", arg0)); }
void EntityLivingBase::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityLivingBase::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityLivingBase::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
void EntityLivingBase::damageArmor(float arg0) { (classes[className]->invokeMethod<void>(this->object, "damageArmor", "(F)V", arg0)); }
int EntityLivingBase::getTotalArmorValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getTotalArmorValue", "()I")); }
void EntityLivingBase::damageEntity(DamageSource arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "damageEntity", "(Lnet/minecraft/util/DamageSource;F)V", arg0, arg1)); }
float EntityLivingBase::applyArmorCalculations(DamageSource arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "applyArmorCalculations", "(Lnet/minecraft/util/DamageSource;F)F", arg0, arg1)); }
float EntityLivingBase::getAbsorptionAmount() { return float(*classes[className]->invokeMethod<float>(this->object, "getAbsorptionAmount", "()F")); }
void EntityLivingBase::setAbsorptionAmount(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setAbsorptionAmount", "(F)V", arg0)); }
CombatTracker EntityLivingBase::getCombatTracker() { return CombatTracker(*classes[className]->invokeMethod<jobject>(this->object, "getCombatTracker", "()Lnet/minecraft/util/CombatTracker;")); }
EnumCreatureAttribute EntityLivingBase::getCreatureAttribute() { return EnumCreatureAttribute(*classes[className]->invokeMethod<jobject>(this->object, "getCreatureAttribute", "()Lnet/minecraft/entity/EnumCreatureAttribute;")); }
void EntityLivingBase::setSprinting(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSprinting", "(Z)V", arg0)); }
void EntityLivingBase::moveEntityWithHeading(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "moveEntityWithHeading", "(FF)V", arg0, arg1)); }
float EntityLivingBase::getAIMoveSpeed() { return float(*classes[className]->invokeMethod<float>(this->object, "getAIMoveSpeed", "()F")); }
String EntityLivingBase::getFallSoundString(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFallSoundString", "(I)Ljava/lang/String;", arg0)); }
ItemStack EntityLivingBase::getCurrentArmor(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentArmor", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
int EntityLivingBase::getExperiencePoints(EntityPlayer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet/minecraft/entity/player/EntityPlayer;)I", arg0)); }
ItemStack EntityLivingBase::getEquipmentInSlot(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getEquipmentInSlot", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
void EntityLivingBase::setCurrentItemOrArmor(int arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
void EntityLivingBase::onKillCommand() { (classes[className]->invokeMethod<void>(this->object, "onKillCommand", "()V")); }
void EntityLivingBase::updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3) { (classes[className]->invokeMethod<void>(this->object, "updateFallState", "(DZLnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;)V", arg0, arg1, arg2, arg3)); }
bool EntityLivingBase::canBreatheUnderwater() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBreatheUnderwater", "()Z")); }
void EntityLivingBase::onEntityUpdate() { (classes[className]->invokeMethod<void>(this->object, "onEntityUpdate", "()V")); }
int EntityLivingBase::decreaseAirSupply(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "decreaseAirSupply", "(I)I", arg0)); }
void EntityLivingBase::onDeathUpdate() { (classes[className]->invokeMethod<void>(this->object, "onDeathUpdate", "()V")); }
void EntityLivingBase::setRevengeTarget(EntityLivingBase arg0) { (classes[className]->invokeMethod<void>(this->object, "setRevengeTarget", "(Lnet/minecraft/entity/EntityLivingBase;)V", arg0)); }
void EntityLivingBase::updatePotionEffects() { (classes[className]->invokeMethod<void>(this->object, "updatePotionEffects", "()V")); }
bool EntityLivingBase::canDropLoot() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDropLoot", "()Z")); }
EntityLivingBase EntityLivingBase::getAITarget() { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "getAITarget", "()Lnet/minecraft/entity/EntityLivingBase;")); }
int EntityLivingBase::getRevengeTimer() { return int(*classes[className]->invokeMethod<int>(this->object, "getRevengeTimer", "()I")); }
EntityLivingBase EntityLivingBase::getLastAttacker() { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "getLastAttacker", "()Lnet/minecraft/entity/EntityLivingBase;")); }
int EntityLivingBase::getLastAttackerTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getLastAttackerTime", "()I")); }
void EntityLivingBase::onFinishedPotionEffect(PotionEffect arg0) { (classes[className]->invokeMethod<void>(this->object, "onFinishedPotionEffect", "(Lnet/minecraft/potion/PotionEffect;)V", arg0)); }
void EntityLivingBase::onChangedPotionEffect(PotionEffect arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "onChangedPotionEffect", "(Lnet/minecraft/potion/PotionEffect;Z)V", arg0, arg1)); }
void EntityLivingBase::updatePotionMetadata() { (classes[className]->invokeMethod<void>(this->object, "updatePotionMetadata", "()V")); }
void EntityLivingBase::resetPotionEffectMetadata() { (classes[className]->invokeMethod<void>(this->object, "resetPotionEffectMetadata", "()V")); }
void EntityLivingBase::clearActivePotions() { (classes[className]->invokeMethod<void>(this->object, "clearActivePotions", "()V")); }
Collection EntityLivingBase::getActivePotionEffects() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getActivePotionEffects", "()Ljava/util/Collection;")); }
void EntityLivingBase::addPotionEffect(PotionEffect arg0) { (classes[className]->invokeMethod<void>(this->object, "addPotionEffect", "(Lnet/minecraft/potion/PotionEffect;)V", arg0)); }
bool EntityLivingBase::isPotionApplicable(PotionEffect arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPotionApplicable", "(Lnet/minecraft/potion/PotionEffect;)Z", arg0)); }
void EntityLivingBase::onNewPotionEffect(PotionEffect arg0) { (classes[className]->invokeMethod<void>(this->object, "onNewPotionEffect", "(Lnet/minecraft/potion/PotionEffect;)V", arg0)); }
bool EntityLivingBase::isEntityUndead() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEntityUndead", "()Z")); }
void EntityLivingBase::removePotionEffectClient(int arg0) { (classes[className]->invokeMethod<void>(this->object, "removePotionEffectClient", "(I)V", arg0)); }
void EntityLivingBase::removePotionEffect(int arg0) { (classes[className]->invokeMethod<void>(this->object, "removePotionEffect", "(I)V", arg0)); }
void EntityLivingBase::setBeenAttacked() { (classes[className]->invokeMethod<void>(this->object, "setBeenAttacked", "()V")); }
float EntityLivingBase::getSoundVolume() { return float(*classes[className]->invokeMethod<float>(this->object, "getSoundVolume", "()F")); }
float EntityLivingBase::getSoundPitch() { return float(*classes[className]->invokeMethod<float>(this->object, "getSoundPitch", "()F")); }
void EntityLivingBase::renderBrokenItemStack(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "renderBrokenItemStack", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
EntityLivingBase EntityLivingBase::func_94060_bK() { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "func_94060_bK", "()Lnet/minecraft/entity/EntityLivingBase;")); }
void EntityLivingBase::dropFewItems(bool arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "dropFewItems", "(ZI)V", arg0, arg1)); }
void EntityLivingBase::dropEquipment(bool arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "dropEquipment", "(ZI)V", arg0, arg1)); }
void EntityLivingBase::addRandomDrop() { (classes[className]->invokeMethod<void>(this->object, "addRandomDrop", "()V")); }
void EntityLivingBase::performHurtAnimation() { (classes[className]->invokeMethod<void>(this->object, "performHurtAnimation", "()V")); }
int EntityLivingBase::getArrowCountInEntity() { return int(*classes[className]->invokeMethod<int>(this->object, "getArrowCountInEntity", "()I")); }
void EntityLivingBase::setArrowCountInEntity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setArrowCountInEntity", "(I)V", arg0)); }
int EntityLivingBase::getArmSwingAnimationEnd() { return int(*classes[className]->invokeMethod<int>(this->object, "getArmSwingAnimationEnd", "()I")); }
void EntityLivingBase::dismountEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "dismountEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
float EntityLivingBase::getJumpUpwardsMotion() { return float(*classes[className]->invokeMethod<float>(this->object, "getJumpUpwardsMotion", "()F")); }
void EntityLivingBase::updateAITick() { (classes[className]->invokeMethod<void>(this->object, "updateAITick", "()V")); }
void EntityLivingBase::handleJumpLava() { (classes[className]->invokeMethod<void>(this->object, "handleJumpLava", "()V")); }
bool EntityLivingBase::isServerWorld() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isServerWorld", "()Z")); }
bool EntityLivingBase::attackEntityAsMob(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityAsMob", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
float EntityLivingBase::func_110146_f(float arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "func_110146_f", "(FF)F", arg0, arg1)); }
void EntityLivingBase::collideWithNearbyEntities() { (classes[className]->invokeMethod<void>(this->object, "collideWithNearbyEntities", "()V")); }
void EntityLivingBase::collideWithEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "collideWithEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityLivingBase::setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6) { (classes[className]->invokeMethod<void>(this->object, "setPositionAndRotation2", "(DDDFFIZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void EntityLivingBase::onItemPickup(Entity arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "onItemPickup", "(Lnet/minecraft/entity/Entity;I)V", arg0, arg1)); }
bool EntityLivingBase::canEntityBeSeen(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEntityBeSeen", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
float EntityLivingBase::getSwingProgress(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getSwingProgress", "(F)F", arg0)); }
bool EntityLivingBase::canBeCollidedWith() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeCollidedWith", "()Z")); }
bool EntityLivingBase::canBePushed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBePushed", "()Z")); }
float EntityLivingBase::getRotationYawHead() { return float(*classes[className]->invokeMethod<float>(this->object, "getRotationYawHead", "()F")); }
void EntityLivingBase::setRotationYawHead(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setRotationYawHead", "(F)V", arg0)); }
void EntityLivingBase::func_181013_g(float arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181013_g", "(F)V", arg0)); }
bool EntityLivingBase::isOnSameTeam(EntityLivingBase arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOnSameTeam", "(Lnet/minecraft/entity/EntityLivingBase;)Z", arg0)); }
void EntityLivingBase::sendEnterCombat() { (classes[className]->invokeMethod<void>(this->object, "sendEnterCombat", "()V")); }
void EntityLivingBase::sendEndCombat() { (classes[className]->invokeMethod<void>(this->object, "sendEndCombat", "()V")); }
void EntityLivingBase::markPotionsDirty() { (classes[className]->invokeMethod<void>(this->object, "markPotionsDirty", "()V")); }
float EntityLivingBase::applyPotionDamageCalculations(DamageSource arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "applyPotionDamageCalculations", "(Lnet/minecraft/util/DamageSource;F)F", arg0, arg1)); }
bool EntityLivingBase::getAlwaysRenderNameTagForRender() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAlwaysRenderNameTagForRender", "()Z")); }
void EntityLivingBase::jump() { (classes[className]->invokeMethod<void>(this->object, "jump", "()V")); }

IAttributeInstance BaseAttributeMap::func_180376_c(IAttribute arg0) { return IAttributeInstance(*classes[className]->invokeMethod<jobject>(this->object, "func_180376_c", "(Lnet/minecraft/entity/ai/attributes/IAttribute;)Lnet/minecraft/entity/ai/attributes/IAttributeInstance;", arg0)); }
Collection BaseAttributeMap::getAllAttributes() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getAllAttributes", "()Ljava/util/Collection;")); }
void BaseAttributeMap::func_180794_a(IAttributeInstance arg0) { (classes[className]->invokeMethod<void>(this->object, "func_180794_a", "(Lnet/minecraft/entity/ai/attributes/IAttributeInstance;)V", arg0)); }
IAttributeInstance BaseAttributeMap::getAttributeInstanceByName(String arg0) { return IAttributeInstance(*classes[className]->invokeMethod<jobject>(this->object, "getAttributeInstanceByName", "(Ljava/lang/String;)Lnet/minecraft/entity/ai/attributes/IAttributeInstance;", arg0)); }
IAttributeInstance BaseAttributeMap::registerAttribute(IAttribute arg0) { return IAttributeInstance(*classes[className]->invokeMethod<jobject>(this->object, "registerAttribute", "(Lnet/minecraft/entity/ai/attributes/IAttribute;)Lnet/minecraft/entity/ai/attributes/IAttributeInstance;", arg0)); }
void BaseAttributeMap::removeAttributeModifiers(Multimap arg0) { (classes[className]->invokeMethod<void>(this->object, "removeAttributeModifiers", "(Lcom/google/common/collect/Multimap;)V", arg0)); }
void BaseAttributeMap::applyAttributeModifiers(Multimap arg0) { (classes[className]->invokeMethod<void>(this->object, "applyAttributeModifiers", "(Lcom/google/common/collect/Multimap;)V", arg0)); }
IAttributeInstance BaseAttributeMap::getAttributeInstance(IAttribute arg0) { return IAttributeInstance(*classes[className]->invokeMethod<jobject>(this->object, "getAttributeInstance", "(Lnet/minecraft/entity/ai/attributes/IAttribute;)Lnet/minecraft/entity/ai/attributes/IAttributeInstance;", arg0)); }



bool Potion::isInstant() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInstant", "()Z")); }
bool Potion::isReady(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReady", "(II)Z", arg0, arg1)); }
bool Potion::isUsable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUsable", "()Z")); }
bool Potion::isBadEffect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBadEffect", "()Z")); }
Potion Potion::setPotionName(String arg0) { return Potion(*classes[className]->invokeMethod<jobject>(this->object, "setPotionName", "(Ljava/lang/String;)Lnet/minecraft/potion/Potion;", arg0)); }
Potion Potion::setIconIndex(int arg0, int arg1) { return Potion(*classes[className]->invokeMethod<jobject>(this->object, "setIconIndex", "(II)Lnet/minecraft/potion/Potion;", arg0, arg1)); }
Potion Potion::setEffectiveness(double arg0) { return Potion(*classes[className]->invokeMethod<jobject>(this->object, "setEffectiveness", "(D)Lnet/minecraft/potion/Potion;", arg0)); }
Set Potion::func_181168_c() { return Set(*classes[className]->invokeStaticMethod<jobject>("func_181168_c", "()Ljava/util/Set;")); }
void Potion::performEffect(EntityLivingBase arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "performEffect", "(Lnet/minecraft/entity/EntityLivingBase;I)V", arg0, arg1)); }
void Potion::affectEntity(Entity arg0, Entity arg1, EntityLivingBase arg2, int arg3, double arg4) { (classes[className]->invokeMethod<void>(this->object, "affectEntity", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/entity/Entity;Lnet/minecraft/entity/EntityLivingBase;ID)V", arg0, arg1, arg2, arg3, arg4)); }
double Potion::getEffectiveness() { return double(*classes[className]->invokeMethod<double>(this->object, "getEffectiveness", "()D")); }
int Potion::getLiquidColor() { return int(*classes[className]->invokeMethod<int>(this->object, "getLiquidColor", "()I")); }
Map Potion::getAttributeModifierMap() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getAttributeModifierMap", "()Ljava/util/Map;")); }
double Potion::getAttributeModifierAmount(int arg0, AttributeModifier arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "getAttributeModifierAmount", "(ILnet/minecraft/entity/ai/attributes/AttributeModifier;)D", arg0, arg1)); }
bool Potion::hasStatusIcon() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasStatusIcon", "()Z")); }
int Potion::getStatusIconIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getStatusIconIndex", "()I")); }
String Potion::getDurationString(PotionEffect arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getDurationString", "(Lnet/minecraft/potion/PotionEffect;)Ljava/lang/String;", arg0)); }
Potion Potion::registerPotionAttributeModifier(IAttribute arg0, String arg1, double arg2, int arg3) { return Potion(*classes[className]->invokeMethod<jobject>(this->object, "registerPotionAttributeModifier", "(Lnet/minecraft/entity/ai/attributes/IAttribute;Ljava/lang/String;DI)Lnet/minecraft/potion/Potion;", arg0, arg1, arg2, arg3)); }
Potion Potion::getPotionFromResourceLocation(String arg0) { return Potion(*classes[className]->invokeStaticMethod<jobject>("getPotionFromResourceLocation", "(Ljava/lang/String;)Lnet/minecraft/potion/Potion;", arg0)); }
void Potion::applyAttributesModifiersToEntity(EntityLivingBase arg0, BaseAttributeMap arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "applyAttributesModifiersToEntity", "(Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/entity/ai/attributes/BaseAttributeMap;I)V", arg0, arg1, arg2)); }
void Potion::removeAttributesModifiersFromEntity(EntityLivingBase arg0, BaseAttributeMap arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "removeAttributesModifiersFromEntity", "(Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/entity/ai/attributes/BaseAttributeMap;I)V", arg0, arg1, arg2)); }
String Potion::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
int Potion::getId() { return int(*classes[className]->invokeMethod<int>(this->object, "getId", "()I")); }

double AttributeModifier::getAmount() { return double(*classes[className]->invokeMethod<double>(this->object, "getAmount", "()D")); }
AttributeModifier AttributeModifier::setSaved(bool arg0) { return AttributeModifier(*classes[className]->invokeMethod<jobject>(this->object, "setSaved", "(Z)Lnet/minecraft/entity/ai/attributes/AttributeModifier;", arg0)); }
bool AttributeModifier::isSaved() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSaved", "()Z")); }
int AttributeModifier::getOperation() { return int(*classes[className]->invokeMethod<int>(this->object, "getOperation", "()I")); }
UUID AttributeModifier::getID() { return UUID(*classes[className]->invokeMethod<jobject>(this->object, "getID", "()Ljava/util/UUID;")); }
String AttributeModifier::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool AttributeModifier::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String AttributeModifier::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int AttributeModifier::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

bool PotionEffect::onUpdate(EntityLivingBase arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "onUpdate", "(Lnet/minecraft/entity/EntityLivingBase;)Z", arg0)); }
void PotionEffect::performEffect(EntityLivingBase arg0) { (classes[className]->invokeMethod<void>(this->object, "performEffect", "(Lnet/minecraft/entity/EntityLivingBase;)V", arg0)); }
bool PotionEffect::getIsPotionDurationMax() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsPotionDurationMax", "()Z")); }
void PotionEffect::setSplashPotion(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSplashPotion", "(Z)V", arg0)); }
bool PotionEffect::getIsAmbient() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsAmbient", "()Z")); }
bool PotionEffect::getIsShowParticles() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsShowParticles", "()Z")); }
int PotionEffect::deincrementDuration() { return int(*classes[className]->invokeMethod<int>(this->object, "deincrementDuration", "()I")); }
String PotionEffect::getEffectName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getEffectName", "()Ljava/lang/String;")); }
void PotionEffect::setPotionDurationMax(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setPotionDurationMax", "(Z)V", arg0)); }
int PotionEffect::getAmplifier() { return int(*classes[className]->invokeMethod<int>(this->object, "getAmplifier", "()I")); }
int PotionEffect::getPotionID() { return int(*classes[className]->invokeMethod<int>(this->object, "getPotionID", "()I")); }
int PotionEffect::getDuration() { return int(*classes[className]->invokeMethod<int>(this->object, "getDuration", "()I")); }
NBTTagCompound PotionEffect::writeCustomPotionEffectToNBT(NBTTagCompound arg0) { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "writeCustomPotionEffectToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/nbt/NBTTagCompound;", arg0)); }
PotionEffect PotionEffect::readCustomPotionEffectFromNBT(NBTTagCompound arg0) { return PotionEffect(*classes[className]->invokeStaticMethod<jobject>("readCustomPotionEffectFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/potion/PotionEffect;", arg0)); }
bool PotionEffect::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String PotionEffect::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int PotionEffect::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void PotionEffect::combine(PotionEffect arg0) { (classes[className]->invokeMethod<void>(this->object, "combine", "(Lnet/minecraft/potion/PotionEffect;)V", arg0)); }

EntityLivingBase CombatTracker::getFighter() { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "getFighter", "()Lnet/minecraft/entity/EntityLivingBase;")); }
void CombatTracker::func_94545_a() { (classes[className]->invokeMethod<void>(this->object, "func_94545_a", "()V")); }
void CombatTracker::func_94542_g() { (classes[className]->invokeMethod<void>(this->object, "func_94542_g", "()V")); }
CombatEntry CombatTracker::func_94544_f() { return CombatEntry(*classes[className]->invokeMethod<jobject>(this->object, "func_94544_f", "()Lnet/minecraft/util/CombatEntry;")); }
String CombatTracker::func_94548_b(CombatEntry arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "func_94548_b", "(Lnet/minecraft/util/CombatEntry;)Ljava/lang/String;", arg0)); }
int CombatTracker::func_180134_f() { return int(*classes[className]->invokeMethod<int>(this->object, "func_180134_f", "()I")); }
IChatComponent CombatTracker::getDeathMessage() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getDeathMessage", "()Lnet/minecraft/util/IChatComponent;")); }
void CombatTracker::trackDamage(DamageSource arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "trackDamage", "(Lnet/minecraft/util/DamageSource;FF)V", arg0, arg1, arg2)); }
EntityLivingBase CombatTracker::func_94550_c() { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "func_94550_c", "()Lnet/minecraft/entity/EntityLivingBase;")); }
void CombatTracker::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }

bool CombatEntry::isLivingDamageSrc() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLivingDamageSrc", "()Z")); }
IChatComponent CombatEntry::getDamageSrcDisplayName() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getDamageSrcDisplayName", "()Lnet/minecraft/util/IChatComponent;")); }
DamageSource CombatEntry::getDamageSrc() { return DamageSource(*classes[className]->invokeMethod<jobject>(this->object, "getDamageSrc", "()Lnet/minecraft/util/DamageSource;")); }
float CombatEntry::func_94563_c() { return float(*classes[className]->invokeMethod<float>(this->object, "func_94563_c", "()F")); }
String CombatEntry::func_94562_g() { return String(*classes[className]->invokeMethod<jobject>(this->object, "func_94562_g", "()Ljava/lang/String;")); }
float CombatEntry::getDamageAmount() { return float(*classes[className]->invokeMethod<float>(this->object, "getDamageAmount", "()F")); }

EnumCreatureAttribute EnumCreatureAttribute::valueOf(String arg0) { return EnumCreatureAttribute(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/entity/EnumCreatureAttribute;", arg0)); }

EnumRarity EnumRarity::valueOf(String arg0) { return EnumRarity(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/item/EnumRarity;", arg0)); }

int Enchantment::getWeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getWeight", "()I")); }
bool Enchantment::canApply(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canApply", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
void Enchantment::onUserHurt(EntityLivingBase arg0, Entity arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "onUserHurt", "(Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/entity/Entity;I)V", arg0, arg1, arg2)); }
int Enchantment::getMaxLevel() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxLevel", "()I")); }
Enchantment Enchantment::getEnchantmentByLocation(String arg0) { return Enchantment(*classes[className]->invokeStaticMethod<jobject>("getEnchantmentByLocation", "(Ljava/lang/String;)Lnet/minecraft/enchantment/Enchantment;", arg0)); }
Set Enchantment::func_181077_c() { return Set(*classes[className]->invokeStaticMethod<jobject>("func_181077_c", "()Ljava/util/Set;")); }
int Enchantment::getMinLevel() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinLevel", "()I")); }
int Enchantment::getMinEnchantability(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMinEnchantability", "(I)I", arg0)); }
int Enchantment::getMaxEnchantability(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxEnchantability", "(I)I", arg0)); }
int Enchantment::calcModifierDamage(int arg0, DamageSource arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "calcModifierDamage", "(ILnet/minecraft/util/DamageSource;)I", arg0, arg1)); }
float Enchantment::calcDamageByCreature(int arg0, EnumCreatureAttribute arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "calcDamageByCreature", "(ILnet/minecraft/entity/EnumCreatureAttribute;)F", arg0, arg1)); }
bool Enchantment::canApplyTogether(Enchantment arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canApplyTogether", "(Lnet/minecraft/enchantment/Enchantment;)Z", arg0)); }
void Enchantment::onEntityDamaged(EntityLivingBase arg0, Entity arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "onEntityDamaged", "(Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/entity/Entity;I)V", arg0, arg1, arg2)); }
Enchantment Enchantment::getEnchantmentById(int arg0) { return Enchantment(*classes[className]->invokeStaticMethod<jobject>("getEnchantmentById", "(I)Lnet/minecraft/enchantment/Enchantment;", arg0)); }
String Enchantment::getTranslatedName(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTranslatedName", "(I)Ljava/lang/String;", arg0)); }
String Enchantment::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
Enchantment Enchantment::setName(String arg0) { return Enchantment(*classes[className]->invokeMethod<jobject>(this->object, "setName", "(Ljava/lang/String;)Lnet/minecraft/enchantment/Enchantment;", arg0)); }

void EntityItemFrame::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityItemFrame::onBroken(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onBroken", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
ItemStack EntityItemFrame::getDisplayedItem() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayedItem", "()Lnet/minecraft/item/ItemStack;")); }
void EntityItemFrame::dropItemOrSelf(Entity arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "dropItemOrSelf", "(Lnet/minecraft/entity/Entity;Z)V", arg0, arg1)); }
void EntityItemFrame::setDisplayedItem(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "setDisplayedItem", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
int EntityItemFrame::getWidthPixels() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidthPixels", "()I")); }
int EntityItemFrame::getHeightPixels() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeightPixels", "()I")); }
void EntityItemFrame::removeFrameFromMap(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "removeFrameFromMap", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
void EntityItemFrame::setDisplayedItemWithUpdate(ItemStack arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setDisplayedItemWithUpdate", "(Lnet/minecraft/item/ItemStack;Z)V", arg0, arg1)); }
int EntityItemFrame::getRotation() { return int(*classes[className]->invokeMethod<int>(this->object, "getRotation", "()I")); }
void EntityItemFrame::setItemRotation(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setItemRotation", "(I)V", arg0)); }
void EntityItemFrame::func_174865_a(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "func_174865_a", "(IZ)V", arg0, arg1)); }
int EntityItemFrame::func_174866_q() { return int(*classes[className]->invokeMethod<int>(this->object, "func_174866_q", "()I")); }
void EntityItemFrame::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityItemFrame::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityItemFrame::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
bool EntityItemFrame::interactFirst(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interactFirst", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
bool EntityItemFrame::isInRangeToRenderDist(double arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInRangeToRenderDist", "(D)Z", arg0)); }
float EntityItemFrame::getCollisionBorderSize() { return float(*classes[className]->invokeMethod<float>(this->object, "getCollisionBorderSize", "()F")); }

void EntityHanging::moveEntity(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "moveEntity", "(DDD)V", arg0, arg1, arg2)); }
void EntityHanging::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityHanging::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityHanging::onBroken(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onBroken", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
int EntityHanging::getWidthPixels() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidthPixels", "()I")); }
int EntityHanging::getHeightPixels() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeightPixels", "()I")); }
void EntityHanging::updateBoundingBox() { (classes[className]->invokeMethod<void>(this->object, "updateBoundingBox", "()V")); }
double EntityHanging::func_174858_a(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "func_174858_a", "(I)D", arg0)); }
bool EntityHanging::onValidSurface() { return bool(*classes[className]->invokeMethod<bool>(this->object, "onValidSurface", "()Z")); }
BlockPos EntityHanging::getHangingPosition() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getHangingPosition", "()Lnet/minecraft/util/BlockPos;")); }
void EntityHanging::setPosition(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setPosition", "(DDD)V", arg0, arg1, arg2)); }
void EntityHanging::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityHanging::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityHanging::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
bool EntityHanging::hitByEntity(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hitByEntity", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void EntityHanging::addVelocity(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "addVelocity", "(DDD)V", arg0, arg1, arg2)); }
bool EntityHanging::canBeCollidedWith() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeCollidedWith", "()Z")); }
bool EntityHanging::shouldSetPosAfterLoading() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldSetPosAfterLoading", "()Z")); }
EnumFacing EntityHanging::getHorizontalFacing() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "getHorizontalFacing", "()Lnet/minecraft/util/EnumFacing;")); }
void EntityHanging::updateFacingWithBoundingBox(EnumFacing arg0) { (classes[className]->invokeMethod<void>(this->object, "updateFacingWithBoundingBox", "(Lnet/minecraft/util/EnumFacing;)V", arg0)); }

EnumAction EnumAction::valueOf(String arg0) { return EnumAction(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/item/EnumAction;", arg0)); }

CreativeTabs CreativeTabs::setNoTitle() { return CreativeTabs(*classes[className]->invokeMethod<jobject>(this->object, "setNoTitle", "()Lnet/minecraft/creativetab/CreativeTabs;")); }
CreativeTabs CreativeTabs::setBackgroundImageName(String arg0) { return CreativeTabs(*classes[className]->invokeMethod<jobject>(this->object, "setBackgroundImageName", "(Ljava/lang/String;)Lnet/minecraft/creativetab/CreativeTabs;", arg0)); }
CreativeTabs CreativeTabs::setNoScrollbar() { return CreativeTabs(*classes[className]->invokeMethod<jobject>(this->object, "setNoScrollbar", "()Lnet/minecraft/creativetab/CreativeTabs;")); }
String CreativeTabs::getTabLabel() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTabLabel", "()Ljava/lang/String;")); }
String CreativeTabs::getTranslatedTabLabel() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTranslatedTabLabel", "()Ljava/lang/String;")); }
ItemStack CreativeTabs::getIconItemStack() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getIconItemStack", "()Lnet/minecraft/item/ItemStack;")); }
Item CreativeTabs::getTabIconItem() { return Item(*classes[className]->invokeMethod<jobject>(this->object, "getTabIconItem", "()Lnet/minecraft/item/Item;")); }
int CreativeTabs::getIconItemDamage() { return int(*classes[className]->invokeMethod<int>(this->object, "getIconItemDamage", "()I")); }
String CreativeTabs::getBackgroundImageName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getBackgroundImageName", "()Ljava/lang/String;")); }
bool CreativeTabs::drawInForegroundOfTab() { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawInForegroundOfTab", "()Z")); }
bool CreativeTabs::shouldHidePlayerInventory() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldHidePlayerInventory", "()Z")); }
int CreativeTabs::getTabColumn() { return int(*classes[className]->invokeMethod<int>(this->object, "getTabColumn", "()I")); }
bool CreativeTabs::isTabInFirstRow() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTabInFirstRow", "()Z")); }
bool CreativeTabs::hasRelevantEnchantmentType(EnumEnchantmentType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasRelevantEnchantmentType", "(Lnet/minecraft/enchantment/EnumEnchantmentType;)Z", arg0)); }
void CreativeTabs::displayAllReleventItems(List arg0) { (classes[className]->invokeMethod<void>(this->object, "displayAllReleventItems", "(Ljava/util/List;)V", arg0)); }
void CreativeTabs::addEnchantmentBooksToList(List arg0, EnumEnchantmentType_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "addEnchantmentBooksToList", "(Ljava/util/List;[Lnet/minecraft/enchantment/EnumEnchantmentType;)V", arg0, arg1)); }
int CreativeTabs::getTabIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getTabIndex", "()I")); }
CreativeTabs CreativeTabs::setRelevantEnchantmentTypes(EnumEnchantmentType_interface arg0) { return CreativeTabs(*classes[className]->invokeMethod<jobject>(this->object, "setRelevantEnchantmentTypes", "([Lnet/minecraft/enchantment/EnumEnchantmentType;)Lnet/minecraft/creativetab/CreativeTabs;", arg0)); }

bool EnumEnchantmentType::canEnchantItem(Item arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canEnchantItem", "(Lnet/minecraft/item/Item;)Z", arg0)); }
EnumEnchantmentType EnumEnchantmentType::valueOf(String arg0) { return EnumEnchantmentType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/enchantment/EnumEnchantmentType;", arg0)); }


String ResourceLocation::getResourceDomain() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getResourceDomain", "()Ljava/lang/String;")); }
String ResourceLocation::getResourcePath() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getResourcePath", "()Ljava/lang/String;")); }
bool ResourceLocation::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ResourceLocation::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ResourceLocation::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

BlockPos MovingObjectPosition::getBlockPos() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getBlockPos", "()Lnet/minecraft/util/BlockPos;")); }
String MovingObjectPosition::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

int EntityItem::getAge() { return int(*classes[className]->invokeMethod<int>(this->object, "getAge", "()I")); }
void EntityItem::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityItem::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityItem::setThrower(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setThrower", "(Ljava/lang/String;)V", arg0)); }
String EntityItem::getThrower() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getThrower", "()Ljava/lang/String;")); }
void EntityItem::setEntityItemStack(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "setEntityItemStack", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
ItemStack EntityItem::getEntityItem() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getEntityItem", "()Lnet/minecraft/item/ItemStack;")); }
void EntityItem::searchForOtherItemsNearby() { (classes[className]->invokeMethod<void>(this->object, "searchForOtherItemsNearby", "()V")); }
bool EntityItem::combineItems(EntityItem arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "combineItems", "(Lnet/minecraft/entity/item/EntityItem;)Z", arg0)); }
void EntityItem::setNoPickupDelay() { (classes[className]->invokeMethod<void>(this->object, "setNoPickupDelay", "()V")); }
void EntityItem::setInfinitePickupDelay() { (classes[className]->invokeMethod<void>(this->object, "setInfinitePickupDelay", "()V")); }
bool EntityItem::cannotPickup() { return bool(*classes[className]->invokeMethod<bool>(this->object, "cannotPickup", "()Z")); }
void EntityItem::setNoDespawn() { (classes[className]->invokeMethod<void>(this->object, "setNoDespawn", "()V")); }
void EntityItem::func_174870_v() { (classes[className]->invokeMethod<void>(this->object, "func_174870_v", "()V")); }
void EntityItem::onCollideWithPlayer(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "onCollideWithPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
void EntityItem::setPickupDelay(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setPickupDelay", "(I)V", arg0)); }
void EntityItem::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityItem::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityItem::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
bool EntityItem::canAttackWithItem() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAttackWithItem", "()Z")); }
bool EntityItem::canTriggerWalking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canTriggerWalking", "()Z")); }
bool EntityItem::handleWaterMovement() { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleWaterMovement", "()Z")); }
void EntityItem::travelToDimension(int arg0) { (classes[className]->invokeMethod<void>(this->object, "travelToDimension", "(I)V", arg0)); }
void EntityItem::dealFireDamage(int arg0) { (classes[className]->invokeMethod<void>(this->object, "dealFireDamage", "(I)V", arg0)); }
void EntityItem::setDefaultPickupDelay() { (classes[className]->invokeMethod<void>(this->object, "setDefaultPickupDelay", "()V")); }
void EntityItem::setAgeToCreativeDespawnTime() { (classes[className]->invokeMethod<void>(this->object, "setAgeToCreativeDespawnTime", "()V")); }
void EntityItem::setOwner(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setOwner", "(Ljava/lang/String;)V", arg0)); }
String EntityItem::getOwner() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getOwner", "()Ljava/lang/String;")); }

void DataWatcher::addObject(int arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "addObject", "(ILjava/lang/Object;)V", arg0, arg1)); }
List DataWatcher::getChanged() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getChanged", "()Ljava/util/List;")); }
bool DataWatcher::getIsBlank() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsBlank", "()Z")); }
List DataWatcher::getAllWatched() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getAllWatched", "()Ljava/util/List;")); }
DataWatcher_WatchableObject DataWatcher::getWatchedObject(int arg0) { return DataWatcher_WatchableObject(*classes[className]->invokeMethod<jobject>(this->object, "getWatchedObject", "(I)Lnet/minecraft/entity/DataWatcher$WatchableObject;", arg0)); }
bool DataWatcher::hasObjectChanged() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasObjectChanged", "()Z")); }
void DataWatcher::func_111144_e() { (classes[className]->invokeMethod<void>(this->object, "func_111144_e", "()V")); }
void DataWatcher::addObjectByDataType(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addObjectByDataType", "(II)V", arg0, arg1)); }
void DataWatcher::setObjectWatched(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setObjectWatched", "(I)V", arg0)); }
int DataWatcher::getWatchableObjectInt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getWatchableObjectInt", "(I)I", arg0)); }
void DataWatcher::updateObject(int arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "updateObject", "(ILjava/lang/Object;)V", arg0, arg1)); }
byte DataWatcher::getWatchableObjectByte(int arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getWatchableObjectByte", "(I)B", arg0)); }
float DataWatcher::getWatchableObjectFloat(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getWatchableObjectFloat", "(I)F", arg0)); }
short DataWatcher::getWatchableObjectShort(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getWatchableObjectShort", "(I)S", arg0)); }
String DataWatcher::getWatchableObjectString(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getWatchableObjectString", "(I)Ljava/lang/String;", arg0)); }
ItemStack DataWatcher::getWatchableObjectItemStack(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getWatchableObjectItemStack", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
void DataWatcher::updateWatchedObjectsFromList(List arg0) { (classes[className]->invokeMethod<void>(this->object, "updateWatchedObjectsFromList", "(Ljava/util/List;)V", arg0)); }
Rotations DataWatcher::getWatchableObjectRotations(int arg0) { return Rotations(*classes[className]->invokeMethod<jobject>(this->object, "getWatchableObjectRotations", "(I)Lnet/minecraft/util/Rotations;", arg0)); }
void DataWatcher::writeWatchedListToPacketBuffer(List arg0, PacketBuffer arg1) { (classes[className]->invokeStaticMethod<void>("writeWatchedListToPacketBuffer", "(Ljava/util/List;Lnet/minecraft/network/PacketBuffer;)V", arg0, arg1)); }
List DataWatcher::readWatchedListFromPacketBuffer(PacketBuffer arg0) { return List(*classes[className]->invokeStaticMethod<jobject>("readWatchedListFromPacketBuffer", "(Lnet/minecraft/network/PacketBuffer;)Ljava/util/List;", arg0)); }
void DataWatcher::writeWatchableObjectToPacketBuffer(PacketBuffer arg0, DataWatcher_WatchableObject arg1) { (classes[className]->invokeStaticMethod<void>("writeWatchableObjectToPacketBuffer", "(Lnet/minecraft/network/PacketBuffer;Lnet/minecraft/entity/DataWatcher$WatchableObject;)V", arg0, arg1)); }
void DataWatcher::writeTo(PacketBuffer arg0) { (classes[className]->invokeMethod<void>(this->object, "writeTo", "(Lnet/minecraft/network/PacketBuffer;)V", arg0)); }

void DataWatcher_WatchableObject::setWatched(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setWatched", "(Z)V", arg0)); }
bool DataWatcher_WatchableObject::isWatched() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWatched", "()Z")); }
int DataWatcher_WatchableObject::getDataValueId() { return int(*classes[className]->invokeMethod<int>(this->object, "getDataValueId", "()I")); }
int DataWatcher_WatchableObject::getObjectType() { return int(*classes[className]->invokeMethod<int>(this->object, "getObjectType", "()I")); }
void DataWatcher_WatchableObject::setObject(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "setObject", "(Ljava/lang/Object;)V", arg0)); }
Object DataWatcher_WatchableObject::getObject() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getObject", "()Ljava/lang/Object;")); }

float Rotations::getX() { return float(*classes[className]->invokeMethod<float>(this->object, "getX", "()F")); }
float Rotations::getZ() { return float(*classes[className]->invokeMethod<float>(this->object, "getZ", "()F")); }
float Rotations::getY() { return float(*classes[className]->invokeMethod<float>(this->object, "getY", "()F")); }
NBTTagList Rotations::writeToNBT() { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "writeToNBT", "()Lnet/minecraft/nbt/NBTTagList;")); }
bool Rotations::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }

ByteBuffer PacketBuffer::nioBuffer(int arg0, int arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "nioBuffer", "(II)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuffer PacketBuffer::nioBuffer() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "nioBuffer", "()Ljava/nio/ByteBuffer;")); }
ByteBuf PacketBuffer::retain() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "retain", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::retain(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "retain", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::writeZero(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
void PacketBuffer::writeUuid(UUID arg0) { (classes[className]->invokeMethod<void>(this->object, "writeUuid", "(Ljava/util/UUID;)V", arg0)); }
UUID PacketBuffer::readUuid() { return UUID(*classes[className]->invokeMethod<jobject>(this->object, "readUuid", "()Ljava/util/UUID;")); }
ByteBufAllocator PacketBuffer::alloc() { return ByteBufAllocator(*classes[className]->invokeMethod<jobject>(this->object, "alloc", "()Lio/netty/buffer/ByteBufAllocator;")); }
int PacketBuffer::getMedium(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMedium", "(I)I", arg0)); }
ByteBuf PacketBuffer::setMedium(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
int PacketBuffer::setBytes(int arg0, InputStream arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "setBytes", "(ILjava/io/InputStream;I)I", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::setBytes(int arg0, ByteBuf arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
int PacketBuffer::setBytes(int arg0, ScatteringByteChannel arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "setBytes", "(ILjava/nio/channels/ScatteringByteChannel;I)I", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::setBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILjava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(I[BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf PacketBuffer::setBytes(int arg0, arr_B arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf PacketBuffer::setZero(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setZero", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
int PacketBuffer::readMedium() { return int(*classes[className]->invokeMethod<int>(this->object, "readMedium", "()I")); }
ByteBuf PacketBuffer::readSlice(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readSlice", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int PacketBuffer::getVarIntSize(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getVarIntSize", "(I)I", arg0)); }
void PacketBuffer::writeByteArray(arr_B arg0) { (classes[className]->invokeMethod<void>(this->object, "writeByteArray", "([B)V", arg0)); }
void PacketBuffer::writeVarIntToBuffer(int arg0) { (classes[className]->invokeMethod<void>(this->object, "writeVarIntToBuffer", "(I)V", arg0)); }
int PacketBuffer::readVarIntFromBuffer() { return int(*classes[className]->invokeMethod<int>(this->object, "readVarIntFromBuffer", "()I")); }
BlockPos PacketBuffer::readBlockPos() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "readBlockPos", "()Lnet/minecraft/util/BlockPos;")); }
void PacketBuffer::writeBlockPos(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "writeBlockPos", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
IChatComponent PacketBuffer::readChatComponent() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "readChatComponent", "()Lnet/minecraft/util/IChatComponent;")); }
void PacketBuffer::writeChatComponent(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "writeChatComponent", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
Enum PacketBuffer::readEnumValue(Class arg0) { return Enum(*classes[className]->invokeMethod<jobject>(this->object, "readEnumValue", "(Ljava/lang/Class;)Ljava/lang/Enum;", arg0)); }
void PacketBuffer::writeEnumValue(Enum arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEnumValue", "(Ljava/lang/Enum;)V", arg0)); }
long PacketBuffer::readVarLong() { return long(*classes[className]->invokeMethod<long>(this->object, "readVarLong", "()J")); }
void PacketBuffer::writeVarLong(long arg0) { (classes[className]->invokeMethod<void>(this->object, "writeVarLong", "(J)V", arg0)); }
int PacketBuffer::readerIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "readerIndex", "()I")); }
ByteBuf PacketBuffer::readerIndex(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int PacketBuffer::maxCapacity() { return int(*classes[className]->invokeMethod<int>(this->object, "maxCapacity", "()I")); }
int PacketBuffer::writerIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "writerIndex", "()I")); }
ByteBuf PacketBuffer::writerIndex(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int PacketBuffer::readableBytes() { return int(*classes[className]->invokeMethod<int>(this->object, "readableBytes", "()I")); }
int PacketBuffer::writableBytes() { return int(*classes[className]->invokeMethod<int>(this->object, "writableBytes", "()I")); }
int PacketBuffer::maxWritableBytes() { return int(*classes[className]->invokeMethod<int>(this->object, "maxWritableBytes", "()I")); }
ByteBuf PacketBuffer::markReaderIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::resetReaderIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::markWriterIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::resetWriterIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::discardReadBytes() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::discardSomeReadBytes() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio/netty/buffer/ByteBuf;")); }
int PacketBuffer::ensureWritable(int arg0, bool arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "ensureWritable", "(IZ)I", arg0, arg1)); }
ByteBuf PacketBuffer::ensureWritable(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
short PacketBuffer::getUnsignedByte(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getUnsignedByte", "(I)S", arg0)); }
int PacketBuffer::getUnsignedShort(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getUnsignedShort", "(I)I", arg0)); }
int PacketBuffer::getUnsignedMedium(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getUnsignedMedium", "(I)I", arg0)); }
long PacketBuffer::getUnsignedInt(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getUnsignedInt", "(I)J", arg0)); }
int PacketBuffer::readUnsignedMedium() { return int(*classes[className]->invokeMethod<int>(this->object, "readUnsignedMedium", "()I")); }
long PacketBuffer::readUnsignedInt() { return long(*classes[className]->invokeMethod<long>(this->object, "readUnsignedInt", "()J")); }
ByteBuf PacketBuffer::writeMedium(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int PacketBuffer::bytesBefore(int arg0, int arg1, byte arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "bytesBefore", "(IIB)I", arg0, arg1, arg2)); }
int PacketBuffer::bytesBefore(byte arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "bytesBefore", "(B)I", arg0)); }
int PacketBuffer::bytesBefore(int arg0, byte arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "bytesBefore", "(IB)I", arg0, arg1)); }
int PacketBuffer::forEachByte(ByteBufProcessor arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByte", "(Lio/netty/buffer/ByteBufProcessor;)I", arg0)); }
int PacketBuffer::forEachByte(int arg0, int arg1, ByteBufProcessor arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByte", "(IILio/netty/buffer/ByteBufProcessor;)I", arg0, arg1, arg2)); }
int PacketBuffer::forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByteDesc", "(IILio/netty/buffer/ByteBufProcessor;)I", arg0, arg1, arg2)); }
int PacketBuffer::forEachByteDesc(ByteBufProcessor arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByteDesc", "(Lio/netty/buffer/ByteBufProcessor;)I", arg0)); }
int PacketBuffer::nioBufferCount() { return int(*classes[className]->invokeMethod<int>(this->object, "nioBufferCount", "()I")); }
ByteBuffer PacketBuffer::internalNioBuffer(int arg0, int arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "internalNioBuffer", "(II)Ljava/nio/ByteBuffer;", arg0, arg1)); }
bool PacketBuffer::hasMemoryAddress() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasMemoryAddress", "()Z")); }
long PacketBuffer::memoryAddress() { return long(*classes[className]->invokeMethod<long>(this->object, "memoryAddress", "()J")); }
void PacketBuffer::writeItemStackToBuffer(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "writeItemStackToBuffer", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
ItemStack PacketBuffer::readItemStackFromBuffer() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "readItemStackFromBuffer", "()Lnet/minecraft/item/ItemStack;")); }
String PacketBuffer::readStringFromBuffer(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "readStringFromBuffer", "(I)Ljava/lang/String;", arg0)); }
void PacketBuffer::writeNBTTagCompoundToBuffer(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeNBTTagCompoundToBuffer", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
NBTTagCompound PacketBuffer::readNBTTagCompoundFromBuffer() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "readNBTTagCompoundFromBuffer", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
ByteBuf PacketBuffer::writeChar(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
char PacketBuffer::readChar() { return char(*classes[className]->invokeMethod<char>(this->object, "readChar", "()C")); }
short PacketBuffer::readShort() { return short(*classes[className]->invokeMethod<short>(this->object, "readShort", "()S")); }
int PacketBuffer::readUnsignedShort() { return int(*classes[className]->invokeMethod<int>(this->object, "readUnsignedShort", "()I")); }
long PacketBuffer::readLong() { return long(*classes[className]->invokeMethod<long>(this->object, "readLong", "()J")); }
byte PacketBuffer::readByte() { return byte(*classes[className]->invokeMethod<byte>(this->object, "readByte", "()B")); }
PacketBuffer PacketBuffer::writeString(String arg0) { return PacketBuffer(*classes[className]->invokeMethod<jobject>(this->object, "writeString", "(Ljava/lang/String;)Lnet/minecraft/network/PacketBuffer;", arg0)); }
bool PacketBuffer::isReadable(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReadable", "(I)Z", arg0)); }
bool PacketBuffer::isReadable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReadable", "()Z")); }
bool PacketBuffer::isWritable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWritable", "()Z")); }
bool PacketBuffer::isWritable(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWritable", "(I)Z", arg0)); }
ByteBuf PacketBuffer::writeLong(long arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::skipBytes(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
bool PacketBuffer::readBoolean() { return bool(*classes[className]->invokeMethod<bool>(this->object, "readBoolean", "()Z")); }
short PacketBuffer::readUnsignedByte() { return short(*classes[className]->invokeMethod<short>(this->object, "readUnsignedByte", "()S")); }
double PacketBuffer::readDouble() { return double(*classes[className]->invokeMethod<double>(this->object, "readDouble", "()D")); }
ByteBuf PacketBuffer::writeBoolean(bool arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::writeByte(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::writeShort(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::writeDouble(double arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::setIndex(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::readBytes(ByteBuffer arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::readBytes(ByteBuf arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::readBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::readBytes(ByteBuf arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Lio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::readBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::readBytes(arr_B arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio/netty/buffer/ByteBuf;", arg0)); }
int PacketBuffer::readBytes(GatheringByteChannel arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "readBytes", "(Ljava/nio/channels/GatheringByteChannel;I)I", arg0, arg1)); }
ByteBuf PacketBuffer::readBytes(OutputStream arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Ljava/io/OutputStream;I)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::readBytes(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int PacketBuffer::writeBytes(InputStream arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "writeBytes", "(Ljava/io/InputStream;I)I", arg0, arg1)); }
int PacketBuffer::writeBytes(ScatteringByteChannel arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "writeBytes", "(Ljava/nio/channels/ScatteringByteChannel;I)I", arg0, arg1)); }
ByteBuf PacketBuffer::writeBytes(arr_B arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::writeBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::writeBytes(ByteBuf arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Lio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::writeBytes(ByteBuf arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::writeBytes(ByteBuffer arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::writeBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::writeFloat(float arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio/netty/buffer/ByteBuf;", arg0)); }
float PacketBuffer::readFloat() { return float(*classes[className]->invokeMethod<float>(this->object, "readFloat", "()F")); }
bool PacketBuffer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String PacketBuffer::toString(Charset arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "(Ljava/nio/charset/Charset;)Ljava/lang/String;", arg0)); }
String PacketBuffer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String PacketBuffer::toString(int arg0, int arg1, Charset arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "(IILjava/nio/charset/Charset;)Ljava/lang/String;", arg0, arg1, arg2)); }
int PacketBuffer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int PacketBuffer::indexOf(int arg0, int arg1, byte arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(IIB)I", arg0, arg1, arg2)); }
bool PacketBuffer::getBoolean(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getBoolean", "(I)Z", arg0)); }
byte PacketBuffer::getByte(int arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getByte", "(I)B", arg0)); }
short PacketBuffer::getShort(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }
char PacketBuffer::getChar(int arg0) { return char(*classes[className]->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }
int PacketBuffer::getInt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }
long PacketBuffer::getLong(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }
float PacketBuffer::getFloat(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }
double PacketBuffer::getDouble(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }
ByteBuf PacketBuffer::clear() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::getBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(I[BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf PacketBuffer::getBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILjava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
int PacketBuffer::getBytes(int arg0, GatheringByteChannel arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "getBytes", "(ILjava/nio/channels/GatheringByteChannel;I)I", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::getBytes(int arg0, OutputStream arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILjava/io/OutputStream;I)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::getBytes(int arg0, arr_B arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::getBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf PacketBuffer::getBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf PacketBuffer::getBytes(int arg0, ByteBuf arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
bool PacketBuffer::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool PacketBuffer::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int PacketBuffer::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
ByteBuf PacketBuffer::writeInt(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int PacketBuffer::readInt() { return int(*classes[className]->invokeMethod<int>(this->object, "readInt", "()I")); }
ByteBuf PacketBuffer::setBoolean(int arg0, bool arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setByte(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setByte", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setChar(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setChar", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setShort(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setShort", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setInt(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setInt", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setLong(int arg0, long arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setFloat(int arg0, float arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::setDouble(int arg0, double arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::copy(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "copy", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::copy() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::unwrap() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "unwrap", "()Lio/netty/buffer/ByteBuf;")); }
int PacketBuffer::capacity() { return int(*classes[className]->invokeMethod<int>(this->object, "capacity", "()I")); }
ByteBuf PacketBuffer::capacity(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "capacity", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf PacketBuffer::slice(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf PacketBuffer::slice() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::duplicate() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf PacketBuffer::order(ByteOrder arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "order", "(Ljava/nio/ByteOrder;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteOrder PacketBuffer::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }

ByteBuffer ByteBuf::nioBuffer() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "nioBuffer", "()Ljava/nio/ByteBuffer;")); }
ByteBuffer ByteBuf::nioBuffer(int arg0, int arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "nioBuffer", "(II)Ljava/nio/ByteBuffer;", arg0, arg1)); }
ByteBuf ByteBuf::retain(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "retain", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::retain() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "retain", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::writeZero(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBufAllocator ByteBuf::alloc() { return ByteBufAllocator(*classes[className]->invokeMethod<jobject>(this->object, "alloc", "()Lio/netty/buffer/ByteBufAllocator;")); }
int ByteBuf::getMedium(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMedium", "(I)I", arg0)); }
ByteBuf ByteBuf::setMedium(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf ByteBuf::setBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILjava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
int ByteBuf::setBytes(int arg0, ScatteringByteChannel arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "setBytes", "(ILjava/nio/channels/ScatteringByteChannel;I)I", arg0, arg1, arg2)); }
int ByteBuf::setBytes(int arg0, InputStream arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "setBytes", "(ILjava/io/InputStream;I)I", arg0, arg1, arg2)); }
ByteBuf ByteBuf::setBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(I[BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf ByteBuf::setBytes(int arg0, arr_B arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setBytes(int arg0, ByteBuf arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBytes", "(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf ByteBuf::setZero(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setZero", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
int ByteBuf::readMedium() { return int(*classes[className]->invokeMethod<int>(this->object, "readMedium", "()I")); }
ByteBuf ByteBuf::readSlice(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readSlice", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int ByteBuf::readerIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "readerIndex", "()I")); }
ByteBuf ByteBuf::readerIndex(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int ByteBuf::maxCapacity() { return int(*classes[className]->invokeMethod<int>(this->object, "maxCapacity", "()I")); }
ByteBuf ByteBuf::writerIndex(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int ByteBuf::writerIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "writerIndex", "()I")); }
int ByteBuf::readableBytes() { return int(*classes[className]->invokeMethod<int>(this->object, "readableBytes", "()I")); }
int ByteBuf::writableBytes() { return int(*classes[className]->invokeMethod<int>(this->object, "writableBytes", "()I")); }
int ByteBuf::maxWritableBytes() { return int(*classes[className]->invokeMethod<int>(this->object, "maxWritableBytes", "()I")); }
ByteBuf ByteBuf::markReaderIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::resetReaderIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::markWriterIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::resetWriterIndex() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::discardReadBytes() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::discardSomeReadBytes() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio/netty/buffer/ByteBuf;")); }
int ByteBuf::ensureWritable(int arg0, bool arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "ensureWritable", "(IZ)I", arg0, arg1)); }
ByteBuf ByteBuf::ensureWritable(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
short ByteBuf::getUnsignedByte(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getUnsignedByte", "(I)S", arg0)); }
int ByteBuf::getUnsignedShort(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getUnsignedShort", "(I)I", arg0)); }
int ByteBuf::getUnsignedMedium(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getUnsignedMedium", "(I)I", arg0)); }
long ByteBuf::getUnsignedInt(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getUnsignedInt", "(I)J", arg0)); }
int ByteBuf::readUnsignedMedium() { return int(*classes[className]->invokeMethod<int>(this->object, "readUnsignedMedium", "()I")); }
long ByteBuf::readUnsignedInt() { return long(*classes[className]->invokeMethod<long>(this->object, "readUnsignedInt", "()J")); }
ByteBuf ByteBuf::writeMedium(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int ByteBuf::bytesBefore(byte arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "bytesBefore", "(B)I", arg0)); }
int ByteBuf::bytesBefore(int arg0, byte arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "bytesBefore", "(IB)I", arg0, arg1)); }
int ByteBuf::bytesBefore(int arg0, int arg1, byte arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "bytesBefore", "(IIB)I", arg0, arg1, arg2)); }
int ByteBuf::forEachByte(ByteBufProcessor arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByte", "(Lio/netty/buffer/ByteBufProcessor;)I", arg0)); }
int ByteBuf::forEachByte(int arg0, int arg1, ByteBufProcessor arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByte", "(IILio/netty/buffer/ByteBufProcessor;)I", arg0, arg1, arg2)); }
int ByteBuf::forEachByteDesc(ByteBufProcessor arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByteDesc", "(Lio/netty/buffer/ByteBufProcessor;)I", arg0)); }
int ByteBuf::forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "forEachByteDesc", "(IILio/netty/buffer/ByteBufProcessor;)I", arg0, arg1, arg2)); }
int ByteBuf::nioBufferCount() { return int(*classes[className]->invokeMethod<int>(this->object, "nioBufferCount", "()I")); }
ByteBuffer ByteBuf::internalNioBuffer(int arg0, int arg1) { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "internalNioBuffer", "(II)Ljava/nio/ByteBuffer;", arg0, arg1)); }
bool ByteBuf::hasMemoryAddress() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasMemoryAddress", "()Z")); }
long ByteBuf::memoryAddress() { return long(*classes[className]->invokeMethod<long>(this->object, "memoryAddress", "()J")); }
ByteBuf ByteBuf::writeChar(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
char ByteBuf::readChar() { return char(*classes[className]->invokeMethod<char>(this->object, "readChar", "()C")); }
short ByteBuf::readShort() { return short(*classes[className]->invokeMethod<short>(this->object, "readShort", "()S")); }
int ByteBuf::readUnsignedShort() { return int(*classes[className]->invokeMethod<int>(this->object, "readUnsignedShort", "()I")); }
long ByteBuf::readLong() { return long(*classes[className]->invokeMethod<long>(this->object, "readLong", "()J")); }
byte ByteBuf::readByte() { return byte(*classes[className]->invokeMethod<byte>(this->object, "readByte", "()B")); }
bool ByteBuf::isReadable(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReadable", "(I)Z", arg0)); }
bool ByteBuf::isReadable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReadable", "()Z")); }
bool ByteBuf::isWritable(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWritable", "(I)Z", arg0)); }
bool ByteBuf::isWritable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWritable", "()Z")); }
ByteBuf ByteBuf::writeLong(long arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::skipBytes(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
bool ByteBuf::readBoolean() { return bool(*classes[className]->invokeMethod<bool>(this->object, "readBoolean", "()Z")); }
short ByteBuf::readUnsignedByte() { return short(*classes[className]->invokeMethod<short>(this->object, "readUnsignedByte", "()S")); }
double ByteBuf::readDouble() { return double(*classes[className]->invokeMethod<double>(this->object, "readDouble", "()D")); }
ByteBuf ByteBuf::writeBoolean(bool arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::writeByte(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::writeShort(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::writeDouble(double arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::setIndex(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::readBytes(ByteBuf arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::readBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf ByteBuf::readBytes(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::readBytes(arr_B arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::readBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf ByteBuf::readBytes(ByteBuf arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Lio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
int ByteBuf::readBytes(GatheringByteChannel arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "readBytes", "(Ljava/nio/channels/GatheringByteChannel;I)I", arg0, arg1)); }
ByteBuf ByteBuf::readBytes(OutputStream arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Ljava/io/OutputStream;I)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::readBytes(ByteBuffer arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "readBytes", "(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0)); }
int ByteBuf::writeBytes(InputStream arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "writeBytes", "(Ljava/io/InputStream;I)I", arg0, arg1)); }
ByteBuf ByteBuf::writeBytes(arr_B arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::writeBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf ByteBuf::writeBytes(ByteBuf arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Lio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::writeBytes(ByteBuf arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::writeBytes(ByteBuffer arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::writeBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
int ByteBuf::writeBytes(ScatteringByteChannel arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "writeBytes", "(Ljava/nio/channels/ScatteringByteChannel;I)I", arg0, arg1)); }
ByteBuf ByteBuf::writeFloat(float arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio/netty/buffer/ByteBuf;", arg0)); }
float ByteBuf::readFloat() { return float(*classes[className]->invokeMethod<float>(this->object, "readFloat", "()F")); }
bool ByteBuf::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ByteBuf::toString(int arg0, int arg1, Charset arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "(IILjava/nio/charset/Charset;)Ljava/lang/String;", arg0, arg1, arg2)); }
String ByteBuf::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String ByteBuf::toString(Charset arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "(Ljava/nio/charset/Charset;)Ljava/lang/String;", arg0)); }
int ByteBuf::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int ByteBuf::indexOf(int arg0, int arg1, byte arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "indexOf", "(IIB)I", arg0, arg1, arg2)); }
bool ByteBuf::getBoolean(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getBoolean", "(I)Z", arg0)); }
byte ByteBuf::getByte(int arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getByte", "(I)B", arg0)); }
short ByteBuf::getShort(int arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }
char ByteBuf::getChar(int arg0) { return char(*classes[className]->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }
int ByteBuf::getInt(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }
long ByteBuf::getLong(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }
float ByteBuf::getFloat(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }
double ByteBuf::getDouble(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }
ByteBuf ByteBuf::clear() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "clear", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::getBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(I[BII)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf ByteBuf::getBytes(int arg0, OutputStream arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILjava/io/OutputStream;I)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf ByteBuf::getBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILjava/nio/ByteBuffer;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::getBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2, arg3)); }
ByteBuf ByteBuf::getBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;", arg0, arg1, arg2)); }
ByteBuf ByteBuf::getBytes(int arg0, ByteBuf arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(ILio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::getBytes(int arg0, arr_B arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
int ByteBuf::getBytes(int arg0, GatheringByteChannel arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "getBytes", "(ILjava/nio/channels/GatheringByteChannel;I)I", arg0, arg1, arg2)); }
bool ByteBuf::isDirect() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirect", "()Z")); }
bool ByteBuf::hasArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArray", "()Z")); }
int ByteBuf::arrayOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "arrayOffset", "()I")); }
ByteBuf ByteBuf::writeInt(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
int ByteBuf::readInt() { return int(*classes[className]->invokeMethod<int>(this->object, "readInt", "()I")); }
ByteBuf ByteBuf::setBoolean(int arg0, bool arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setByte(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setByte", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setChar(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setChar", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setShort(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setShort", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setInt(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setInt", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setLong(int arg0, long arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setFloat(int arg0, float arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::setDouble(int arg0, double arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::copy(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "copy", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::copy() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::unwrap() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "unwrap", "()Lio/netty/buffer/ByteBuf;")); }
int ByteBuf::capacity() { return int(*classes[className]->invokeMethod<int>(this->object, "capacity", "()I")); }
ByteBuf ByteBuf::capacity(int arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "capacity", "(I)Lio/netty/buffer/ByteBuf;", arg0)); }
ByteBuf ByteBuf::slice() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "slice", "()Lio/netty/buffer/ByteBuf;")); }
ByteBuf ByteBuf::slice(int arg0, int arg1) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "slice", "(II)Lio/netty/buffer/ByteBuf;", arg0, arg1)); }
ByteBuf ByteBuf::duplicate() { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "duplicate", "()Lio/netty/buffer/ByteBuf;")); }
ByteOrder ByteBuf::order() { return ByteOrder(*classes[className]->invokeMethod<jobject>(this->object, "order", "()Ljava/nio/ByteOrder;")); }
ByteBuf ByteBuf::order(ByteOrder arg0) { return ByteBuf(*classes[className]->invokeMethod<jobject>(this->object, "order", "(Ljava/nio/ByteOrder;)Lio/netty/buffer/ByteBuf;", arg0)); }





AxisAlignedBB AxisAlignedBB::fromBounds(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return AxisAlignedBB(*classes[className]->invokeStaticMethod<jobject>("fromBounds", "(DDDDDD)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1, arg2, arg3, arg4, arg5)); }
AxisAlignedBB AxisAlignedBB::addCoord(double arg0, double arg1, double arg2) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "addCoord", "(DDD)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1, arg2)); }
AxisAlignedBB AxisAlignedBB::contract(double arg0, double arg1, double arg2) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "contract", "(DDD)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1, arg2)); }
AxisAlignedBB AxisAlignedBB::union_(AxisAlignedBB arg0) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "union", "(Lnet/minecraft/util/AxisAlignedBB;)Lnet/minecraft/util/AxisAlignedBB;", arg0)); }
bool AxisAlignedBB::isVecInYZ(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInYZ", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
bool AxisAlignedBB::isVecInXZ(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInXZ", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
bool AxisAlignedBB::isVecInXY(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInXY", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
bool AxisAlignedBB::isVecInside(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInside", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
MovingObjectPosition AxisAlignedBB::calculateIntercept(Vec3 arg0, Vec3 arg1) { return MovingObjectPosition(*classes[className]->invokeMethod<jobject>(this->object, "calculateIntercept", "(Lnet/minecraft/util/Vec3;Lnet/minecraft/util/Vec3;)Lnet/minecraft/util/MovingObjectPosition;", arg0, arg1)); }
bool AxisAlignedBB::func_181656_b() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181656_b", "()Z")); }
bool AxisAlignedBB::intersectsWith(AxisAlignedBB arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsWith", "(Lnet/minecraft/util/AxisAlignedBB;)Z", arg0)); }
double AxisAlignedBB::getAverageEdgeLength() { return double(*classes[className]->invokeMethod<double>(this->object, "getAverageEdgeLength", "()D")); }
double AxisAlignedBB::calculateYOffset(AxisAlignedBB arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "calculateYOffset", "(Lnet/minecraft/util/AxisAlignedBB;D)D", arg0, arg1)); }
double AxisAlignedBB::calculateXOffset(AxisAlignedBB arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "calculateXOffset", "(Lnet/minecraft/util/AxisAlignedBB;D)D", arg0, arg1)); }
double AxisAlignedBB::calculateZOffset(AxisAlignedBB arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "calculateZOffset", "(Lnet/minecraft/util/AxisAlignedBB;D)D", arg0, arg1)); }
String AxisAlignedBB::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
AxisAlignedBB AxisAlignedBB::offset(double arg0, double arg1, double arg2) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "offset", "(DDD)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1, arg2)); }
AxisAlignedBB AxisAlignedBB::expand(double arg0, double arg1, double arg2) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "expand", "(DDD)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1, arg2)); }

bool Material::isLiquid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLiquid", "()Z")); }
Material Material::setBurning() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "setBurning", "()Lnet/minecraft/block/material/Material;")); }
bool Material::getCanBurn() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanBurn", "()Z")); }
bool Material::isSolid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSolid", "()Z")); }
Material Material::setRequiresTool() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "setRequiresTool", "()Lnet/minecraft/block/material/Material;")); }
Material Material::setImmovableMobility() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "setImmovableMobility", "()Lnet/minecraft/block/material/Material;")); }
Material Material::setNoPushMobility() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "setNoPushMobility", "()Lnet/minecraft/block/material/Material;")); }
Material Material::setTranslucent() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "setTranslucent", "()Lnet/minecraft/block/material/Material;")); }
Material Material::setReplaceable() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "setReplaceable", "()Lnet/minecraft/block/material/Material;")); }
Material Material::setAdventureModeExempt() { return Material(*classes[className]->invokeMethod<jobject>(this->object, "setAdventureModeExempt", "()Lnet/minecraft/block/material/Material;")); }
bool Material::isToolNotRequired() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isToolNotRequired", "()Z")); }
bool Material::blocksLight() { return bool(*classes[className]->invokeMethod<bool>(this->object, "blocksLight", "()Z")); }
MapColor Material::getMaterialMapColor() { return MapColor(*classes[className]->invokeMethod<jobject>(this->object, "getMaterialMapColor", "()Lnet/minecraft/block/material/MapColor;")); }
int Material::getMaterialMobility() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaterialMobility", "()I")); }
bool Material::blocksMovement() { return bool(*classes[className]->invokeMethod<bool>(this->object, "blocksMovement", "()Z")); }
bool Material::isReplaceable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isReplaceable", "()Z")); }
bool Material::isOpaque() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpaque", "()Z")); }

int MapColor::func_151643_b(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "func_151643_b", "(I)I", arg0)); }

HoverEvent_Action HoverEvent::getAction() { return HoverEvent_Action(*classes[className]->invokeMethod<jobject>(this->object, "getAction", "()Lnet/minecraft/event/HoverEvent$Action;")); }
bool HoverEvent::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String HoverEvent::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int HoverEvent::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
IChatComponent HoverEvent::getValue() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getValue", "()Lnet/minecraft/util/IChatComponent;")); }

bool HoverEvent_Action::shouldAllowInChat() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldAllowInChat", "()Z")); }
HoverEvent_Action HoverEvent_Action::getValueByCanonicalName(String arg0) { return HoverEvent_Action(*classes[className]->invokeStaticMethod<jobject>("getValueByCanonicalName", "(Ljava/lang/String;)Lnet/minecraft/event/HoverEvent$Action;", arg0)); }
HoverEvent_Action HoverEvent_Action::valueOf(String arg0) { return HoverEvent_Action(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/event/HoverEvent$Action;", arg0)); }
String HoverEvent_Action::getCanonicalName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCanonicalName", "()Ljava/lang/String;")); }

void EntityLightningBolt::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityLightningBolt::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityLightningBolt::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityLightningBolt::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }


Map Explosion::getPlayerKnockbackMap() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerKnockbackMap", "()Ljava/util/Map;")); }
EntityLivingBase Explosion::getExplosivePlacedBy() { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "getExplosivePlacedBy", "()Lnet/minecraft/entity/EntityLivingBase;")); }
void Explosion::func_180342_d() { (classes[className]->invokeMethod<void>(this->object, "func_180342_d", "()V")); }
List Explosion::getAffectedBlockPositions() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getAffectedBlockPositions", "()Ljava/util/List;")); }
void Explosion::doExplosionA() { (classes[className]->invokeMethod<void>(this->object, "doExplosionA", "()V")); }
void Explosion::doExplosionB(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "doExplosionB", "(Z)V", arg0)); }

void EntityPlayerMP::addStat(StatBase arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addStat", "(Lnet/minecraft/stats/StatBase;I)V", arg0, arg1)); }
void EntityPlayerMP::displayGui(IInteractionObject arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGui", "(Lnet/minecraft/world/IInteractionObject;)V", arg0)); }
EntityPlayer_EnumStatus EntityPlayerMP::trySleep(BlockPos arg0) { return EntityPlayer_EnumStatus(*classes[className]->invokeMethod<jobject>(this->object, "trySleep", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/entity/player/EntityPlayer$EnumStatus;", arg0)); }
void EntityPlayerMP::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityPlayerMP::onDeath(DamageSource arg0) { (classes[className]->invokeMethod<void>(this->object, "onDeath", "(Lnet/minecraft/util/DamageSource;)V", arg0)); }
bool EntityPlayerMP::isSpectator() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSpectator", "()Z")); }
void EntityPlayerMP::removeEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "removeEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayerMP::onEnchantmentCritical(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEnchantmentCritical", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayerMP::sendTileEntityUpdate(TileEntity arg0) { (classes[className]->invokeMethod<void>(this->object, "sendTileEntityUpdate", "(Lnet/minecraft/tileentity/TileEntity;)V", arg0)); }
WorldServer EntityPlayerMP::getServerForPlayer() { return WorldServer(*classes[className]->invokeMethod<jobject>(this->object, "getServerForPlayer", "()Lnet/minecraft/world/WorldServer;")); }
Entity EntityPlayerMP::getSpectatingEntity() { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getSpectatingEntity", "()Lnet/minecraft/entity/Entity;")); }
void EntityPlayerMP::setSpectatingEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "setSpectatingEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayerMP::onUpdateEntity() { (classes[className]->invokeMethod<void>(this->object, "onUpdateEntity", "()V")); }
StatisticsFile EntityPlayerMP::getStatFile() { return StatisticsFile(*classes[className]->invokeMethod<jobject>(this->object, "getStatFile", "()Lnet/minecraft/stats/StatisticsFile;")); }
void EntityPlayerMP::updateBiomesExplored() { (classes[className]->invokeMethod<void>(this->object, "updateBiomesExplored", "()V")); }
bool EntityPlayerMP::canPlayersAttack() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPlayersAttack", "()Z")); }
void EntityPlayerMP::handleFalling(double arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "handleFalling", "(DZ)V", arg0, arg1)); }
void EntityPlayerMP::getNextWindowId() { (classes[className]->invokeMethod<void>(this->object, "getNextWindowId", "()V")); }
void EntityPlayerMP::sendContainerToPlayer(Container arg0) { (classes[className]->invokeMethod<void>(this->object, "sendContainerToPlayer", "(Lnet/minecraft/inventory/Container;)V", arg0)); }
void EntityPlayerMP::closeContainer() { (classes[className]->invokeMethod<void>(this->object, "closeContainer", "()V")); }
void EntityPlayerMP::updateHeldItem() { (classes[className]->invokeMethod<void>(this->object, "updateHeldItem", "()V")); }
void EntityPlayerMP::setEntityActionState(float arg0, float arg1, bool arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "setEntityActionState", "(FFZZ)V", arg0, arg1, arg2, arg3)); }
void EntityPlayerMP::mountEntityAndWakeUp() { (classes[className]->invokeMethod<void>(this->object, "mountEntityAndWakeUp", "()V")); }
void EntityPlayerMP::setPlayerHealthUpdated() { (classes[className]->invokeMethod<void>(this->object, "setPlayerHealthUpdated", "()V")); }
String EntityPlayerMP::getPlayerIP() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerIP", "()Ljava/lang/String;")); }
void EntityPlayerMP::handleClientSettings(C15PacketClientSettings arg0) { (classes[className]->invokeMethod<void>(this->object, "handleClientSettings", "(Lnet/minecraft/network/play/client/C15PacketClientSettings;)V", arg0)); }
EntityPlayer_EnumChatVisibility EntityPlayerMP::getChatVisibility() { return EntityPlayer_EnumChatVisibility(*classes[className]->invokeMethod<jobject>(this->object, "getChatVisibility", "()Lnet/minecraft/entity/player/EntityPlayer$EnumChatVisibility;")); }
void EntityPlayerMP::loadResourcePack(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "loadResourcePack", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
void EntityPlayerMP::markPlayerActive() { (classes[className]->invokeMethod<void>(this->object, "markPlayerActive", "()V")); }
long EntityPlayerMP::getLastActiveTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getLastActiveTime", "()J")); }
IChatComponent EntityPlayerMP::getTabListDisplayName() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getTabListDisplayName", "()Lnet/minecraft/util/IChatComponent;")); }
void EntityPlayerMP::mountEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "mountEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayerMP::onItemUseFinish() { (classes[className]->invokeMethod<void>(this->object, "onItemUseFinish", "()V")); }
void EntityPlayerMP::wakeUpPlayer(bool arg0, bool arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "wakeUpPlayer", "(ZZZ)V", arg0, arg1, arg2)); }
void EntityPlayerMP::closeScreen() { (classes[className]->invokeMethod<void>(this->object, "closeScreen", "()V")); }
void EntityPlayerMP::func_175145_a(StatBase arg0) { (classes[className]->invokeMethod<void>(this->object, "func_175145_a", "(Lnet/minecraft/stats/StatBase;)V", arg0)); }
void EntityPlayerMP::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityPlayerMP::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityPlayerMP::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
bool EntityPlayerMP::canAttackPlayer(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAttackPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void EntityPlayerMP::openEditSign(TileEntitySign arg0) { (classes[className]->invokeMethod<void>(this->object, "openEditSign", "(Lnet/minecraft/tileentity/TileEntitySign;)V", arg0)); }
void EntityPlayerMP::displayVillagerTradeGui(IMerchant arg0) { (classes[className]->invokeMethod<void>(this->object, "displayVillagerTradeGui", "(Lnet/minecraft/entity/IMerchant;)V", arg0)); }
void EntityPlayerMP::displayGUIChest(IInventory arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGUIChest", "(Lnet/minecraft/inventory/IInventory;)V", arg0)); }
void EntityPlayerMP::displayGUIHorse(EntityHorse arg0, IInventory arg1) { (classes[className]->invokeMethod<void>(this->object, "displayGUIHorse", "(Lnet/minecraft/entity/passive/EntityHorse;Lnet/minecraft/inventory/IInventory;)V", arg0, arg1)); }
void EntityPlayerMP::displayGUIBook(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGUIBook", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
void EntityPlayerMP::onCriticalHit(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onCriticalHit", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayerMP::addChatComponentMessage(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "addChatComponentMessage", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
void EntityPlayerMP::addExperienceLevel(int arg0) { (classes[className]->invokeMethod<void>(this->object, "addExperienceLevel", "(I)V", arg0)); }
void EntityPlayerMP::removeExperienceLevel(int arg0) { (classes[className]->invokeMethod<void>(this->object, "removeExperienceLevel", "(I)V", arg0)); }
void EntityPlayerMP::setItemInUse(ItemStack arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setItemInUse", "(Lnet/minecraft/item/ItemStack;I)V", arg0, arg1)); }
void EntityPlayerMP::clonePlayer(EntityPlayer arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "clonePlayer", "(Lnet/minecraft/entity/player/EntityPlayer;Z)V", arg0, arg1)); }
void EntityPlayerMP::sendPlayerAbilities() { (classes[className]->invokeMethod<void>(this->object, "sendPlayerAbilities", "()V")); }
void EntityPlayerMP::setGameType(WorldSettings_GameType arg0) { (classes[className]->invokeMethod<void>(this->object, "setGameType", "(Lnet/minecraft/world/WorldSettings$GameType;)V", arg0)); }
void EntityPlayerMP::updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3) { (classes[className]->invokeMethod<void>(this->object, "updateFallState", "(DZLnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;)V", arg0, arg1, arg2, arg3)); }
void EntityPlayerMP::onFinishedPotionEffect(PotionEffect arg0) { (classes[className]->invokeMethod<void>(this->object, "onFinishedPotionEffect", "(Lnet/minecraft/potion/PotionEffect;)V", arg0)); }
void EntityPlayerMP::onChangedPotionEffect(PotionEffect arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "onChangedPotionEffect", "(Lnet/minecraft/potion/PotionEffect;Z)V", arg0, arg1)); }
void EntityPlayerMP::updatePotionMetadata() { (classes[className]->invokeMethod<void>(this->object, "updatePotionMetadata", "()V")); }
void EntityPlayerMP::onNewPotionEffect(PotionEffect arg0) { (classes[className]->invokeMethod<void>(this->object, "onNewPotionEffect", "(Lnet/minecraft/potion/PotionEffect;)V", arg0)); }
void EntityPlayerMP::setPositionAndUpdate(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setPositionAndUpdate", "(DDD)V", arg0, arg1, arg2)); }
void EntityPlayerMP::onItemPickup(Entity arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "onItemPickup", "(Lnet/minecraft/entity/Entity;I)V", arg0, arg1)); }
void EntityPlayerMP::sendEnterCombat() { (classes[className]->invokeMethod<void>(this->object, "sendEnterCombat", "()V")); }
void EntityPlayerMP::sendEndCombat() { (classes[className]->invokeMethod<void>(this->object, "sendEndCombat", "()V")); }
void EntityPlayerMP::travelToDimension(int arg0) { (classes[className]->invokeMethod<void>(this->object, "travelToDimension", "(I)V", arg0)); }
bool EntityPlayerMP::isSpectatedByPlayer(EntityPlayerMP arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSpectatedByPlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)Z", arg0)); }
void EntityPlayerMP::addSelfToInternalCraftingInventory() { (classes[className]->invokeMethod<void>(this->object, "addSelfToInternalCraftingInventory", "()V")); }
void EntityPlayerMP::attackTargetEntityWithCurrentItem(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "attackTargetEntityWithCurrentItem", "(Lnet/minecraft/entity/Entity;)V", arg0)); }

World TileEntity::getWorld() { return World(*classes[className]->invokeMethod<jobject>(this->object, "getWorld", "()Lnet/minecraft/world/World;")); }
void TileEntity::markDirty() { (classes[className]->invokeMethod<void>(this->object, "markDirty", "()V")); }
BlockPos TileEntity::getPos() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getPos", "()Lnet/minecraft/util/BlockPos;")); }
void TileEntity::setPos(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "setPos", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
void TileEntity::invalidate() { (classes[className]->invokeMethod<void>(this->object, "invalidate", "()V")); }
void TileEntity::writeToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void TileEntity::setWorldObj(World arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldObj", "(Lnet/minecraft/world/World;)V", arg0)); }
Block TileEntity::getBlockType() { return Block(*classes[className]->invokeMethod<jobject>(this->object, "getBlockType", "()Lnet/minecraft/block/Block;")); }
TileEntity TileEntity::createAndLoadEntity(NBTTagCompound arg0) { return TileEntity(*classes[className]->invokeStaticMethod<jobject>("createAndLoadEntity", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/tileentity/TileEntity;", arg0)); }
int TileEntity::getBlockMetadata() { return int(*classes[className]->invokeMethod<int>(this->object, "getBlockMetadata", "()I")); }
Packet TileEntity::getDescriptionPacket() { return Packet(*classes[className]->invokeMethod<jobject>(this->object, "getDescriptionPacket", "()Lnet/minecraft/network/Packet;")); }
bool TileEntity::receiveClientEvent(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "receiveClientEvent", "(II)Z", arg0, arg1)); }
void TileEntity::updateContainingBlockInfo() { (classes[className]->invokeMethod<void>(this->object, "updateContainingBlockInfo", "()V")); }
bool TileEntity::func_183000_F() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_183000_F", "()Z")); }
bool TileEntity::hasWorldObj() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasWorldObj", "()Z")); }
void TileEntity::addInfoToCrashReport(CrashReportCategory arg0) { (classes[className]->invokeMethod<void>(this->object, "addInfoToCrashReport", "(Lnet/minecraft/crash/CrashReportCategory;)V", arg0)); }
double TileEntity::getDistanceSq(double arg0, double arg1, double arg2) { return double(*classes[className]->invokeMethod<double>(this->object, "getDistanceSq", "(DDD)D", arg0, arg1, arg2)); }
void TileEntity::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
double TileEntity::getMaxRenderDistanceSquared() { return double(*classes[className]->invokeMethod<double>(this->object, "getMaxRenderDistanceSquared", "()D")); }
void TileEntity::addMapping(Class arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("addMapping", "(Ljava/lang/Class;Ljava/lang/String;)V", arg0, arg1)); }
bool TileEntity::isInvalid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInvalid", "()Z")); }
void TileEntity::validate() { (classes[className]->invokeMethod<void>(this->object, "validate", "()V")); }


void WorldServer::tick() { (classes[className]->invokeMethod<void>(this->object, "tick", "()V")); }
void WorldServer::saveLevel() { (classes[className]->invokeMethod<void>(this->object, "saveLevel", "()V")); }
void WorldServer::updateEntities() { (classes[className]->invokeMethod<void>(this->object, "updateEntities", "()V")); }
void WorldServer::setInitialSpawnLocation() { (classes[className]->invokeMethod<void>(this->object, "setInitialSpawnLocation", "()V")); }
IChunkProvider WorldServer::createChunkProvider() { return IChunkProvider(*classes[className]->invokeMethod<jobject>(this->object, "createChunkProvider", "()Lnet/minecraft/world/chunk/IChunkProvider;")); }
bool WorldServer::isBlockTickPending(BlockPos arg0, Block arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockTickPending", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)Z", arg0, arg1)); }
void WorldServer::wakeAllPlayers() { (classes[className]->invokeMethod<void>(this->object, "wakeAllPlayers", "()V")); }
void WorldServer::sendQueuedBlockEvents() { (classes[className]->invokeMethod<void>(this->object, "sendQueuedBlockEvents", "()V")); }
BiomeGenBase_SpawnListEntry WorldServer::getSpawnListEntryForTypeAt(EnumCreatureType arg0, BlockPos arg1) { return BiomeGenBase_SpawnListEntry(*classes[className]->invokeMethod<jobject>(this->object, "getSpawnListEntryForTypeAt", "(Lnet/minecraft/entity/EnumCreatureType;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/world/biome/BiomeGenBase$SpawnListEntry;", arg0, arg1)); }
bool WorldServer::canCreatureTypeSpawnHere(EnumCreatureType arg0, BiomeGenBase_SpawnListEntry arg1, BlockPos arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canCreatureTypeSpawnHere", "(Lnet/minecraft/entity/EnumCreatureType;Lnet/minecraft/world/biome/BiomeGenBase$SpawnListEntry;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1, arg2)); }
void WorldServer::resetRainAndThunder() { (classes[className]->invokeMethod<void>(this->object, "resetRainAndThunder", "()V")); }
BlockPos WorldServer::adjustPosToNearbyEntity(BlockPos arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "adjustPosToNearbyEntity", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/util/BlockPos;", arg0)); }
List WorldServer::getTileEntitiesIn(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getTileEntitiesIn", "(IIIIII)Ljava/util/List;", arg0, arg1, arg2, arg3, arg4, arg5)); }
void WorldServer::createSpawnPosition(WorldSettings arg0) { (classes[className]->invokeMethod<void>(this->object, "createSpawnPosition", "(Lnet/minecraft/world/WorldSettings;)V", arg0)); }
void WorldServer::setDebugWorldSettings() { (classes[className]->invokeMethod<void>(this->object, "setDebugWorldSettings", "()V")); }
void WorldServer::createBonusChest() { (classes[className]->invokeMethod<void>(this->object, "createBonusChest", "()V")); }
BlockPos WorldServer::getSpawnCoordinate() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getSpawnCoordinate", "()Lnet/minecraft/util/BlockPos;")); }
void WorldServer::saveChunkData() { (classes[className]->invokeMethod<void>(this->object, "saveChunkData", "()V")); }
bool WorldServer::fireBlockEvent(BlockEventData arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "fireBlockEvent", "(Lnet/minecraft/block/BlockEventData;)Z", arg0)); }
PlayerManager WorldServer::getPlayerManager() { return PlayerManager(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerManager", "()Lnet/minecraft/server/management/PlayerManager;")); }
Teleporter WorldServer::getDefaultTeleporter() { return Teleporter(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultTeleporter", "()Lnet/minecraft/world/Teleporter;")); }
bool WorldServer::canSpawnAnimals() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSpawnAnimals", "()Z")); }
bool WorldServer::canSpawnNPCs() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSpawnNPCs", "()Z")); }
void WorldServer::saveAllChunks(bool arg0, IProgressUpdate arg1) { (classes[className]->invokeMethod<void>(this->object, "saveAllChunks", "(ZLnet/minecraft/util/IProgressUpdate;)V", arg0, arg1)); }
bool WorldServer::areAllPlayersAsleep() { return bool(*classes[className]->invokeMethod<bool>(this->object, "areAllPlayersAsleep", "()Z")); }
Entity WorldServer::getEntityFromUuid(UUID arg0) { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getEntityFromUuid", "(Ljava/util/UUID;)Lnet/minecraft/entity/Entity;", arg0)); }
void WorldServer::spawnParticle(EnumParticleTypes arg0, bool arg1, double arg2, double arg3, double arg4, int arg5, double arg6, double arg7, double arg8, double arg9, arr_I arg10) { (classes[className]->invokeMethod<void>(this->object, "spawnParticle", "(Lnet/minecraft/util/EnumParticleTypes;ZDDDIDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
void WorldServer::spawnParticle(EnumParticleTypes arg0, double arg1, double arg2, double arg3, int arg4, double arg5, double arg6, double arg7, double arg8, arr_I arg9) { (classes[className]->invokeMethod<void>(this->object, "spawnParticle", "(Lnet/minecraft/util/EnumParticleTypes;DDDIDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
bool WorldServer::addWeatherEffect(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "addWeatherEffect", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void WorldServer::onEntityAdded(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEntityAdded", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void WorldServer::onEntityRemoved(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEntityRemoved", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void WorldServer::scheduleUpdate(BlockPos arg0, Block arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "scheduleUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;I)V", arg0, arg1, arg2)); }
void WorldServer::updateBlockTick(BlockPos arg0, Block arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "updateBlockTick", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", arg0, arg1, arg2, arg3)); }
void WorldServer::scheduleBlockUpdate(BlockPos arg0, Block arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "scheduleBlockUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", arg0, arg1, arg2, arg3)); }
Explosion WorldServer::newExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5, bool arg6) { return Explosion(*classes[className]->invokeMethod<jobject>(this->object, "newExplosion", "(Lnet/minecraft/entity/Entity;DDDFZZ)Lnet/minecraft/world/Explosion;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void WorldServer::updateWeather() { (classes[className]->invokeMethod<void>(this->object, "updateWeather", "()V")); }
int WorldServer::getRenderDistanceChunks() { return int(*classes[className]->invokeMethod<int>(this->object, "getRenderDistanceChunks", "()I")); }
void WorldServer::updateBlocks() { (classes[className]->invokeMethod<void>(this->object, "updateBlocks", "()V")); }
bool WorldServer::tickUpdates(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "tickUpdates", "(Z)Z", arg0)); }
List WorldServer::getPendingBlockUpdates(Chunk arg0, bool arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getPendingBlockUpdates", "(Lnet/minecraft/world/chunk/Chunk;Z)Ljava/util/List;", arg0, arg1)); }
List WorldServer::func_175712_a(StructureBoundingBox arg0, bool arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "func_175712_a", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;Z)Ljava/util/List;", arg0, arg1)); }
bool WorldServer::isBlockModifiable(EntityPlayer arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockModifiable", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
void WorldServer::setEntityState(Entity arg0, byte arg1) { (classes[className]->invokeMethod<void>(this->object, "setEntityState", "(Lnet/minecraft/entity/Entity;B)V", arg0, arg1)); }
void WorldServer::addBlockEvent(BlockPos arg0, Block arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "addBlockEvent", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", arg0, arg1, arg2, arg3)); }
EntityTracker WorldServer::getEntityTracker() { return EntityTracker(*classes[className]->invokeMethod<jobject>(this->object, "getEntityTracker", "()Lnet/minecraft/entity/EntityTracker;")); }
MinecraftServer WorldServer::getMinecraftServer() { return MinecraftServer(*classes[className]->invokeMethod<jobject>(this->object, "getMinecraftServer", "()Lnet/minecraft/server/MinecraftServer;")); }
void WorldServer::resetUpdateEntityTick() { (classes[className]->invokeMethod<void>(this->object, "resetUpdateEntityTick", "()V")); }
void WorldServer::updateAllPlayersSleepingFlag() { (classes[className]->invokeMethod<void>(this->object, "updateAllPlayersSleepingFlag", "()V")); }
void WorldServer::updateEntityWithOptionalForce(Entity arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "updateEntityWithOptionalForce", "(Lnet/minecraft/entity/Entity;Z)V", arg0, arg1)); }
void WorldServer::flush() { (classes[className]->invokeMethod<void>(this->object, "flush", "()V")); }
void WorldServer::initialize(WorldSettings arg0) { (classes[className]->invokeMethod<void>(this->object, "initialize", "(Lnet/minecraft/world/WorldSettings;)V", arg0)); }
World WorldServer::init() { return World(*classes[className]->invokeMethod<jobject>(this->object, "init", "()Lnet/minecraft/world/World;")); }


bool EnumCreatureType::getAnimal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAnimal", "()Z")); }
Class EnumCreatureType::getCreatureClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getCreatureClass", "()Ljava/lang/Class;")); }
int EnumCreatureType::getMaxNumberOfCreature() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxNumberOfCreature", "()I")); }
bool EnumCreatureType::getPeacefulCreature() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getPeacefulCreature", "()Z")); }
EnumCreatureType EnumCreatureType::valueOf(String arg0) { return EnumCreatureType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/entity/EnumCreatureType;", arg0)); }

String BiomeGenBase_SpawnListEntry::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }


WorldType WorldSettings::getTerrainType() { return WorldType(*classes[className]->invokeMethod<jobject>(this->object, "getTerrainType", "()Lnet/minecraft/world/WorldType;")); }
bool WorldSettings::isMapFeaturesEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMapFeaturesEnabled", "()Z")); }
WorldSettings WorldSettings::enableBonusChest() { return WorldSettings(*classes[className]->invokeMethod<jobject>(this->object, "enableBonusChest", "()Lnet/minecraft/world/WorldSettings;")); }
WorldSettings WorldSettings::enableCommands() { return WorldSettings(*classes[className]->invokeMethod<jobject>(this->object, "enableCommands", "()Lnet/minecraft/world/WorldSettings;")); }
WorldSettings WorldSettings::setWorldName(String arg0) { return WorldSettings(*classes[className]->invokeMethod<jobject>(this->object, "setWorldName", "(Ljava/lang/String;)Lnet/minecraft/world/WorldSettings;", arg0)); }
bool WorldSettings::isBonusChestEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBonusChestEnabled", "()Z")); }
bool WorldSettings::getHardcoreEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getHardcoreEnabled", "()Z")); }
bool WorldSettings::areCommandsAllowed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "areCommandsAllowed", "()Z")); }
WorldSettings_GameType WorldSettings::getGameTypeById(int arg0) { return WorldSettings_GameType(*classes[className]->invokeStaticMethod<jobject>("getGameTypeById", "(I)Lnet/minecraft/world/WorldSettings$GameType;", arg0)); }
WorldSettings_GameType WorldSettings::getGameType() { return WorldSettings_GameType(*classes[className]->invokeMethod<jobject>(this->object, "getGameType", "()Lnet/minecraft/world/WorldSettings$GameType;")); }
String WorldSettings::getWorldName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getWorldName", "()Ljava/lang/String;")); }
long WorldSettings::getSeed() { return long(*classes[className]->invokeMethod<long>(this->object, "getSeed", "()J")); }

WorldType WorldType::setVersioned() { return WorldType(*classes[className]->invokeMethod<jobject>(this->object, "setVersioned", "()Lnet/minecraft/world/WorldType;")); }
WorldType WorldType::setNotificationData() { return WorldType(*classes[className]->invokeMethod<jobject>(this->object, "setNotificationData", "()Lnet/minecraft/world/WorldType;")); }
WorldType WorldType::setCanBeCreated(bool arg0) { return WorldType(*classes[className]->invokeMethod<jobject>(this->object, "setCanBeCreated", "(Z)Lnet/minecraft/world/WorldType;", arg0)); }
String WorldType::getTranslateName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTranslateName", "()Ljava/lang/String;")); }
String WorldType::func_151359_c() { return String(*classes[className]->invokeMethod<jobject>(this->object, "func_151359_c", "()Ljava/lang/String;")); }
bool WorldType::getCanBeCreated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanBeCreated", "()Z")); }
bool WorldType::isVersioned() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVersioned", "()Z")); }
WorldType WorldType::parseWorldType(String arg0) { return WorldType(*classes[className]->invokeStaticMethod<jobject>("parseWorldType", "(Ljava/lang/String;)Lnet/minecraft/world/WorldType;", arg0)); }
int WorldType::getWorldTypeID() { return int(*classes[className]->invokeMethod<int>(this->object, "getWorldTypeID", "()I")); }
bool WorldType::showWorldInfoNotice() { return bool(*classes[className]->invokeMethod<bool>(this->object, "showWorldInfoNotice", "()Z")); }
String WorldType::getWorldTypeName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getWorldTypeName", "()Ljava/lang/String;")); }
int WorldType::getGeneratorVersion() { return int(*classes[className]->invokeMethod<int>(this->object, "getGeneratorVersion", "()I")); }
WorldType WorldType::getWorldTypeForGeneratorVersion(int arg0) { return WorldType(*classes[className]->invokeMethod<jobject>(this->object, "getWorldTypeForGeneratorVersion", "(I)Lnet/minecraft/world/WorldType;", arg0)); }

WorldSettings_GameType WorldSettings_GameType::getByID(int arg0) { return WorldSettings_GameType(*classes[className]->invokeStaticMethod<jobject>("getByID", "(I)Lnet/minecraft/world/WorldSettings$GameType;", arg0)); }
bool WorldSettings_GameType::isCreative() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCreative", "()Z")); }
bool WorldSettings_GameType::isAdventure() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAdventure", "()Z")); }
bool WorldSettings_GameType::isSurvivalOrAdventure() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSurvivalOrAdventure", "()Z")); }
void WorldSettings_GameType::configurePlayerCapabilities(PlayerCapabilities arg0) { (classes[className]->invokeMethod<void>(this->object, "configurePlayerCapabilities", "(Lnet/minecraft/entity/player/PlayerCapabilities;)V", arg0)); }
int WorldSettings_GameType::getID() { return int(*classes[className]->invokeMethod<int>(this->object, "getID", "()I")); }
String WorldSettings_GameType::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
WorldSettings_GameType WorldSettings_GameType::valueOf(String arg0) { return WorldSettings_GameType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/world/WorldSettings$GameType;", arg0)); }
WorldSettings_GameType WorldSettings_GameType::getByName(String arg0) { return WorldSettings_GameType(*classes[className]->invokeStaticMethod<jobject>("getByName", "(Ljava/lang/String;)Lnet/minecraft/world/WorldSettings$GameType;", arg0)); }

float PlayerCapabilities::getFlySpeed() { return float(*classes[className]->invokeMethod<float>(this->object, "getFlySpeed", "()F")); }
void PlayerCapabilities::setFlySpeed(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setFlySpeed", "(F)V", arg0)); }
void PlayerCapabilities::setPlayerWalkSpeed(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayerWalkSpeed", "(F)V", arg0)); }
float PlayerCapabilities::getWalkSpeed() { return float(*classes[className]->invokeMethod<float>(this->object, "getWalkSpeed", "()F")); }
void PlayerCapabilities::readCapabilitiesFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readCapabilitiesFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void PlayerCapabilities::writeCapabilitiesToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeCapabilitiesToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }

Block BlockEventData::getBlock() { return Block(*classes[className]->invokeMethod<jobject>(this->object, "getBlock", "()Lnet/minecraft/block/Block;")); }
int BlockEventData::getEventID() { return int(*classes[className]->invokeMethod<int>(this->object, "getEventID", "()I")); }
int BlockEventData::getEventParameter() { return int(*classes[className]->invokeMethod<int>(this->object, "getEventParameter", "()I")); }
BlockPos BlockEventData::getPosition() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getPosition", "()Lnet/minecraft/util/BlockPos;")); }
bool BlockEventData::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String BlockEventData::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

void PlayerManager::addPlayer(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "addPlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
bool PlayerManager::overlaps(int arg0, int arg1, int arg2, int arg3, int arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "overlaps", "(IIIII)Z", arg0, arg1, arg2, arg3, arg4)); }
void PlayerManager::markBlockForUpdate(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "markBlockForUpdate", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
void PlayerManager::setPlayerViewRadius(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayerViewRadius", "(I)V", arg0)); }
WorldServer PlayerManager::getWorldServer() { return WorldServer(*classes[className]->invokeMethod<jobject>(this->object, "getWorldServer", "()Lnet/minecraft/world/WorldServer;")); }
PlayerManager_PlayerInstance PlayerManager::getPlayerInstance(int arg0, int arg1, bool arg2) { return PlayerManager_PlayerInstance(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerInstance", "(IIZ)Lnet/minecraft/server/management/PlayerManager$PlayerInstance;", arg0, arg1, arg2)); }
void PlayerManager::filterChunkLoadQueue(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "filterChunkLoadQueue", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void PlayerManager::removePlayer(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "removePlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void PlayerManager::updateMountedMovingPlayer(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "updateMountedMovingPlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
bool PlayerManager::isPlayerWatchingChunk(EntityPlayerMP arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlayerWatchingChunk", "(Lnet/minecraft/entity/player/EntityPlayerMP;II)Z", arg0, arg1, arg2)); }
int PlayerManager::getFurthestViewableBlock(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getFurthestViewableBlock", "(I)I", arg0)); }
void PlayerManager::updatePlayerInstances() { (classes[className]->invokeMethod<void>(this->object, "updatePlayerInstances", "()V")); }
bool PlayerManager::hasPlayerInstance(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasPlayerInstance", "(II)Z", arg0, arg1)); }

void PlayerManager_PlayerInstance::addPlayer(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "addPlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void PlayerManager_PlayerInstance::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void PlayerManager_PlayerInstance::processChunk() { (classes[className]->invokeMethod<void>(this->object, "processChunk", "()V")); }
void PlayerManager_PlayerInstance::flagChunkForUpdate(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "flagChunkForUpdate", "(III)V", arg0, arg1, arg2)); }
void PlayerManager_PlayerInstance::removePlayer(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "removePlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void PlayerManager_PlayerInstance::increaseInhabitedTime(Chunk arg0) { (classes[className]->invokeMethod<void>(this->object, "increaseInhabitedTime", "(Lnet/minecraft/world/chunk/Chunk;)V", arg0)); }
void PlayerManager_PlayerInstance::sendToAllPlayersWatchingChunk(Packet arg0) { (classes[className]->invokeMethod<void>(this->object, "sendToAllPlayersWatchingChunk", "(Lnet/minecraft/network/Packet;)V", arg0)); }
void PlayerManager_PlayerInstance::sendTileToAllPlayersWatchingChunk(TileEntity arg0) { (classes[className]->invokeMethod<void>(this->object, "sendTileToAllPlayersWatchingChunk", "(Lnet/minecraft/tileentity/TileEntity;)V", arg0)); }

World Chunk::getWorld() { return World(*classes[className]->invokeMethod<jobject>(this->object, "getWorld", "()Lnet/minecraft/world/World;")); }
void Chunk::fillChunk(arr_B arg0, int arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "fillChunk", "([BIZ)V", arg0, arg1, arg2)); }
BiomeGenBase Chunk::getBiome(BlockPos arg0, WorldChunkManager arg1) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "getBiome", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/world/biome/WorldChunkManager;)Lnet/minecraft/world/biome/BiomeGenBase;", arg0, arg1)); }
bool Chunk::canSeeSky(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSeeSky", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
void Chunk::addEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "addEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
int Chunk::getHeight(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
Block Chunk::getBlock(BlockPos arg0) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "getBlock", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/block/Block;", arg0)); }
Block Chunk::getBlock(int arg0, int arg1, int arg2) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "getBlock", "(III)Lnet/minecraft/block/Block;", arg0, arg1, arg2)); }
Block Chunk::getBlock0(int arg0, int arg1, int arg2) { return Block(*classes[className]->invokeMethod<jobject>(this->object, "getBlock0", "(III)Lnet/minecraft/block/Block;", arg0, arg1, arg2)); }
IBlockState Chunk::getBlockState(BlockPos arg0) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getBlockState", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/block/state/IBlockState;", arg0)); }
void Chunk::removeEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "removeEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
TileEntity Chunk::getTileEntity(BlockPos arg0, Chunk_EnumCreateEntityType arg1) { return TileEntity(*classes[className]->invokeMethod<jobject>(this->object, "getTileEntity", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;)Lnet/minecraft/tileentity/TileEntity;", arg0, arg1)); }
IBlockState Chunk::setBlockState(BlockPos arg0, IBlockState arg1) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "setBlockState", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/block/state/IBlockState;", arg0, arg1)); }
bool Chunk::isPopulated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPopulated", "()Z")); }
int Chunk::getLightSubtracted(BlockPos arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getLightSubtracted", "(Lnet/minecraft/util/BlockPos;I)I", arg0, arg1)); }
int Chunk::getHeightValue(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getHeightValue", "(II)I", arg0, arg1)); }
int Chunk::getLowestHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getLowestHeight", "()I")); }
int Chunk::getLightFor(EnumSkyBlock arg0, BlockPos arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;)I", arg0, arg1)); }
void Chunk::setLightFor(EnumSkyBlock arg0, BlockPos arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;I)V", arg0, arg1, arg2)); }
TileEntity Chunk::createNewTileEntity(BlockPos arg0) { return TileEntity(*classes[className]->invokeMethod<jobject>(this->object, "createNewTileEntity", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/tileentity/TileEntity;", arg0)); }
bool Chunk::isTerrainPopulated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTerrainPopulated", "()Z")); }
bool Chunk::isLightPopulated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLightPopulated", "()Z")); }
bool Chunk::isAtLocation(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAtLocation", "(II)Z", arg0, arg1)); }
void Chunk::generateHeightMap() { (classes[className]->invokeMethod<void>(this->object, "generateHeightMap", "()V")); }
void Chunk::generateSkylightMap() { (classes[className]->invokeMethod<void>(this->object, "generateSkylightMap", "()V")); }
int Chunk::getBlockLightOpacity(int arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "getBlockLightOpacity", "(III)I", arg0, arg1, arg2)); }
int Chunk::getBlockLightOpacity(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getBlockLightOpacity", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
void Chunk::propagateSkylightOcclusion(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "propagateSkylightOcclusion", "(II)V", arg0, arg1)); }
void Chunk::recheckGaps(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "recheckGaps", "(Z)V", arg0)); }
void Chunk::relightBlock(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "relightBlock", "(III)V", arg0, arg1, arg2)); }
void Chunk::onChunkUnload() { (classes[className]->invokeMethod<void>(this->object, "onChunkUnload", "()V")); }
bool Chunk::needsSaving(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "needsSaving", "(Z)Z", arg0)); }
Random Chunk::getRandomWithSeed(long arg0) { return Random(*classes[className]->invokeMethod<jobject>(this->object, "getRandomWithSeed", "(J)Ljava/util/Random;", arg0)); }
void Chunk::populateChunk(IChunkProvider arg0, IChunkProvider arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "populateChunk", "(Lnet/minecraft/world/chunk/IChunkProvider;Lnet/minecraft/world/chunk/IChunkProvider;II)V", arg0, arg1, arg2, arg3)); }
void Chunk::func_150804_b(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "func_150804_b", "(Z)V", arg0)); }
void Chunk::func_150809_p() { (classes[className]->invokeMethod<void>(this->object, "func_150809_p", "()V")); }
ChunkCoordIntPair Chunk::getChunkCoordIntPair() { return ChunkCoordIntPair(*classes[className]->invokeMethod<jobject>(this->object, "getChunkCoordIntPair", "()Lnet/minecraft/world/ChunkCoordIntPair;")); }
bool Chunk::getAreLevelsEmpty(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAreLevelsEmpty", "(II)Z", arg0, arg1)); }
void Chunk::setStorageArrays(ExtendedBlockStorage_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setStorageArrays", "([Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;)V", arg0)); }
void Chunk::setBiomeArray(arr_B arg0) { (classes[className]->invokeMethod<void>(this->object, "setBiomeArray", "([B)V", arg0)); }
bool Chunk::func_150811_f(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_150811_f", "(II)Z", arg0, arg1)); }
void Chunk::func_180700_a(EnumFacing arg0) { (classes[className]->invokeMethod<void>(this->object, "func_180700_a", "(Lnet/minecraft/util/EnumFacing;)V", arg0)); }
void Chunk::func_177441_y() { (classes[className]->invokeMethod<void>(this->object, "func_177441_y", "()V")); }
void Chunk::setChunkLoaded(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setChunkLoaded", "(Z)V", arg0)); }
void Chunk::setHeightMap(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "setHeightMap", "([I)V", arg0)); }
Map Chunk::getTileEntityMap() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getTileEntityMap", "()Ljava/util/Map;")); }
void Chunk::setTerrainPopulated(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setTerrainPopulated", "(Z)V", arg0)); }
void Chunk::setLightPopulated(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setLightPopulated", "(Z)V", arg0)); }
void Chunk::setModified(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setModified", "(Z)V", arg0)); }
void Chunk::setHasEntities(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setHasEntities", "(Z)V", arg0)); }
void Chunk::setLastSaveTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setLastSaveTime", "(J)V", arg0)); }
void Chunk::setInhabitedTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setInhabitedTime", "(J)V", arg0)); }
void Chunk::resetRelightChecks() { (classes[className]->invokeMethod<void>(this->object, "resetRelightChecks", "()V")); }
int Chunk::getBlockMetadata(int arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "getBlockMetadata", "(III)I", arg0, arg1, arg2)); }
int Chunk::getBlockMetadata(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getBlockMetadata", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
BlockPos Chunk::getPrecipitationHeight(BlockPos arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getPrecipitationHeight", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/util/BlockPos;", arg0)); }
int Chunk::getTopFilledSegment() { return int(*classes[className]->invokeMethod<int>(this->object, "getTopFilledSegment", "()I")); }
void Chunk::removeTileEntity(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "removeTileEntity", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
void Chunk::addTileEntity(TileEntity arg0) { (classes[className]->invokeMethod<void>(this->object, "addTileEntity", "(Lnet/minecraft/tileentity/TileEntity;)V", arg0)); }
void Chunk::addTileEntity(BlockPos arg0, TileEntity arg1) { (classes[className]->invokeMethod<void>(this->object, "addTileEntity", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", arg0, arg1)); }
void Chunk::removeEntityAtIndex(Entity arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "removeEntityAtIndex", "(Lnet/minecraft/entity/Entity;I)V", arg0, arg1)); }
void Chunk::enqueueRelightChecks() { (classes[className]->invokeMethod<void>(this->object, "enqueueRelightChecks", "()V")); }
void Chunk::setChunkModified() { (classes[className]->invokeMethod<void>(this->object, "setChunkModified", "()V")); }
long Chunk::getInhabitedTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getInhabitedTime", "()J")); }
void Chunk::onChunkLoad() { (classes[className]->invokeMethod<void>(this->object, "onChunkLoad", "()V")); }
void Chunk::checkSkylightNeighborHeight(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "checkSkylightNeighborHeight", "(III)V", arg0, arg1, arg2)); }
void Chunk::updateSkylightNeighborHeight(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "updateSkylightNeighborHeight", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Chunk::getEntitiesWithinAABBForEntity(Entity arg0, AxisAlignedBB arg1, List arg2, Predicate arg3) { (classes[className]->invokeMethod<void>(this->object, "getEntitiesWithinAABBForEntity", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/AxisAlignedBB;Ljava/util/List;Lcom/google/common/base/Predicate;)V", arg0, arg1, arg2, arg3)); }
void Chunk::getEntitiesOfTypeWithinAAAB(Class arg0, AxisAlignedBB arg1, List arg2, Predicate arg3) { (classes[className]->invokeMethod<void>(this->object, "getEntitiesOfTypeWithinAAAB", "(Ljava/lang/Class;Lnet/minecraft/util/AxisAlignedBB;Ljava/util/List;Lcom/google/common/base/Predicate;)V", arg0, arg1, arg2, arg3)); }
bool Chunk::isLoaded() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLoaded", "()Z")); }
bool Chunk::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }

BiomeGenBase WorldChunkManager::getBiomeGenerator(BlockPos arg0) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "getBiomeGenerator", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
BiomeGenBase WorldChunkManager::getBiomeGenerator(BlockPos arg0, BiomeGenBase arg1) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "getBiomeGenerator", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/world/biome/BiomeGenBase;)Lnet/minecraft/world/biome/BiomeGenBase;", arg0, arg1)); }
List WorldChunkManager::getBiomesToSpawnIn() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getBiomesToSpawnIn", "()Ljava/util/List;")); }
float WorldChunkManager::getTemperatureAtHeight(float arg0, int arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "getTemperatureAtHeight", "(FI)F", arg0, arg1)); }
bool WorldChunkManager::areBiomesViable(int arg0, int arg1, int arg2, List arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "areBiomesViable", "(IIILjava/util/List;)Z", arg0, arg1, arg2, arg3)); }
BlockPos WorldChunkManager::findBiomePosition(int arg0, int arg1, int arg2, List arg3, Random arg4) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "findBiomePosition", "(IIILjava/util/List;Ljava/util/Random;)Lnet/minecraft/util/BlockPos;", arg0, arg1, arg2, arg3, arg4)); }
void WorldChunkManager::cleanupCache() { (classes[className]->invokeMethod<void>(this->object, "cleanupCache", "()V")); }

BiomeGenBase BiomeGenBase::setColor(int arg0) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "setColor", "(I)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
BiomeGenBase BiomeGenBase::getBiome(int arg0) { return BiomeGenBase(*classes[className]->invokeStaticMethod<jobject>("getBiome", "(I)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
BiomeGenBase BiomeGenBase::setHeight(BiomeGenBase_Height arg0) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "setHeight", "(Lnet/minecraft/world/biome/BiomeGenBase$Height;)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
void BiomeGenBase::decorate(World arg0, Random arg1, BlockPos arg2) { (classes[className]->invokeMethod<void>(this->object, "decorate", "(Lnet/minecraft/world/World;Ljava/util/Random;Lnet/minecraft/util/BlockPos;)V", arg0, arg1, arg2)); }
bool BiomeGenBase::isEqualTo(BiomeGenBase arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEqualTo", "(Lnet/minecraft/world/biome/BiomeGenBase;)Z", arg0)); }
int BiomeGenBase::getGrassColorAtPos(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getGrassColorAtPos", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
BiomeGenBase BiomeGenBase::setBiomeName(String arg0) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "setBiomeName", "(Ljava/lang/String;)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
BiomeGenBase BiomeGenBase::setDisableRain() { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "setDisableRain", "()Lnet/minecraft/world/biome/BiomeGenBase;")); }
BiomeGenBase BiomeGenBase::setTemperatureRainfall(float arg0, float arg1) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "setTemperatureRainfall", "(FF)Lnet/minecraft/world/biome/BiomeGenBase;", arg0, arg1)); }
BiomeGenBase BiomeGenBase::setFillerBlockMetadata(int arg0) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "setFillerBlockMetadata", "(I)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
BiomeGenBase BiomeGenBase::setEnableSnow() { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "setEnableSnow", "()Lnet/minecraft/world/biome/BiomeGenBase;")); }
BiomeGenBase BiomeGenBase::func_150563_c(int arg0) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "func_150563_c", "(I)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
BiomeGenBase BiomeGenBase::createMutation() { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "createMutation", "()Lnet/minecraft/world/biome/BiomeGenBase;")); }
BiomeGenBase BiomeGenBase::createMutatedBiome(int arg0) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "createMutatedBiome", "(I)Lnet/minecraft/world/biome/BiomeGenBase;", arg0)); }
BiomeDecorator BiomeGenBase::createBiomeDecorator() { return BiomeDecorator(*classes[className]->invokeMethod<jobject>(this->object, "createBiomeDecorator", "()Lnet/minecraft/world/biome/BiomeDecorator;")); }
WorldGenAbstractTree BiomeGenBase::genBigTreeChance(Random arg0) { return WorldGenAbstractTree(*classes[className]->invokeMethod<jobject>(this->object, "genBigTreeChance", "(Ljava/util/Random;)Lnet/minecraft/world/gen/feature/WorldGenAbstractTree;", arg0)); }
WorldGenerator BiomeGenBase::getRandomWorldGenForGrass(Random arg0) { return WorldGenerator(*classes[className]->invokeMethod<jobject>(this->object, "getRandomWorldGenForGrass", "(Ljava/util/Random;)Lnet/minecraft/world/gen/feature/WorldGenerator;", arg0)); }
BlockFlower_EnumFlowerType BiomeGenBase::pickRandomFlower(Random arg0, BlockPos arg1) { return BlockFlower_EnumFlowerType(*classes[className]->invokeMethod<jobject>(this->object, "pickRandomFlower", "(Ljava/util/Random;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/block/BlockFlower$EnumFlowerType;", arg0, arg1)); }
BiomeGenBase BiomeGenBase::func_150557_a(int arg0, bool arg1) { return BiomeGenBase(*classes[className]->invokeMethod<jobject>(this->object, "func_150557_a", "(IZ)Lnet/minecraft/world/biome/BiomeGenBase;", arg0, arg1)); }
List BiomeGenBase::getSpawnableList(EnumCreatureType arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getSpawnableList", "(Lnet/minecraft/entity/EnumCreatureType;)Ljava/util/List;", arg0)); }
bool BiomeGenBase::isSnowyBiome() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSnowyBiome", "()Z")); }
float BiomeGenBase::getSpawningChance() { return float(*classes[className]->invokeMethod<float>(this->object, "getSpawningChance", "()F")); }
int BiomeGenBase::getIntRainfall() { return int(*classes[className]->invokeMethod<int>(this->object, "getIntRainfall", "()I")); }
float BiomeGenBase::getFloatRainfall() { return float(*classes[className]->invokeMethod<float>(this->object, "getFloatRainfall", "()F")); }
int BiomeGenBase::getFoliageColorAtPos(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getFoliageColorAtPos", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
void BiomeGenBase::genTerrainBlocks(World arg0, Random arg1, ChunkPrimer arg2, int arg3, int arg4, double arg5) { (classes[className]->invokeMethod<void>(this->object, "genTerrainBlocks", "(Lnet/minecraft/world/World;Ljava/util/Random;Lnet/minecraft/world/chunk/ChunkPrimer;IID)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void BiomeGenBase::generateBiomeTerrain(World arg0, Random arg1, ChunkPrimer arg2, int arg3, int arg4, double arg5) { (classes[className]->invokeMethod<void>(this->object, "generateBiomeTerrain", "(Lnet/minecraft/world/World;Ljava/util/Random;Lnet/minecraft/world/chunk/ChunkPrimer;IID)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
Class BiomeGenBase::getBiomeClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getBiomeClass", "()Ljava/lang/Class;")); }
BiomeGenBase_TempCategory BiomeGenBase::getTempCategory() { return BiomeGenBase_TempCategory(*classes[className]->invokeMethod<jobject>(this->object, "getTempCategory", "()Lnet/minecraft/world/biome/BiomeGenBase$TempCategory;")); }
BiomeGenBase BiomeGenBase::getBiomeFromBiomeList(int arg0, BiomeGenBase arg1) { return BiomeGenBase(*classes[className]->invokeStaticMethod<jobject>("getBiomeFromBiomeList", "(ILnet/minecraft/world/biome/BiomeGenBase;)Lnet/minecraft/world/biome/BiomeGenBase;", arg0, arg1)); }
float BiomeGenBase::getFloatTemperature(BlockPos arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getFloatTemperature", "(Lnet/minecraft/util/BlockPos;)F", arg0)); }
int BiomeGenBase::getSkyColorByTemp(float arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getSkyColorByTemp", "(F)I", arg0)); }
bool BiomeGenBase::getEnableSnow() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getEnableSnow", "()Z")); }
bool BiomeGenBase::canSpawnLightningBolt() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSpawnLightningBolt", "()Z")); }
bool BiomeGenBase::isHighHumidity() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHighHumidity", "()Z")); }

BiomeGenBase_Height BiomeGenBase_Height::attenuate() { return BiomeGenBase_Height(*classes[className]->invokeMethod<jobject>(this->object, "attenuate", "()Lnet/minecraft/world/biome/BiomeGenBase$Height;")); }

void BiomeDecorator::decorate(World arg0, Random arg1, BiomeGenBase arg2, BlockPos arg3) { (classes[className]->invokeMethod<void>(this->object, "decorate", "(Lnet/minecraft/world/World;Ljava/util/Random;Lnet/minecraft/world/biome/BiomeGenBase;Lnet/minecraft/util/BlockPos;)V", arg0, arg1, arg2, arg3)); }
void BiomeDecorator::genDecorations(BiomeGenBase arg0) { (classes[className]->invokeMethod<void>(this->object, "genDecorations", "(Lnet/minecraft/world/biome/BiomeGenBase;)V", arg0)); }
void BiomeDecorator::generateOres() { (classes[className]->invokeMethod<void>(this->object, "generateOres", "()V")); }
void BiomeDecorator::genStandardOre1(int arg0, WorldGenerator arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "genStandardOre1", "(ILnet/minecraft/world/gen/feature/WorldGenerator;II)V", arg0, arg1, arg2, arg3)); }
void BiomeDecorator::genStandardOre2(int arg0, WorldGenerator arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "genStandardOre2", "(ILnet/minecraft/world/gen/feature/WorldGenerator;II)V", arg0, arg1, arg2, arg3)); }

void WorldGenerator::func_175904_e() { (classes[className]->invokeMethod<void>(this->object, "func_175904_e", "()V")); }
void WorldGenerator::setBlockAndNotifyAdequately(World arg0, BlockPos arg1, IBlockState arg2) { (classes[className]->invokeMethod<void>(this->object, "setBlockAndNotifyAdequately", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", arg0, arg1, arg2)); }
bool WorldGenerator::generate(World arg0, Random arg1, BlockPos arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "generate", "(Lnet/minecraft/world/World;Ljava/util/Random;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1, arg2)); }

bool WorldGenAbstractTree::func_150523_a(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_150523_a", "(Lnet/minecraft/block/Block;)Z", arg0)); }
void WorldGenAbstractTree::func_180711_a(World arg0, Random arg1, BlockPos arg2) { (classes[className]->invokeMethod<void>(this->object, "func_180711_a", "(Lnet/minecraft/world/World;Ljava/util/Random;Lnet/minecraft/util/BlockPos;)V", arg0, arg1, arg2)); }
void WorldGenAbstractTree::func_175921_a(World arg0, BlockPos arg1) { (classes[className]->invokeMethod<void>(this->object, "func_175921_a", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)V", arg0, arg1)); }

int BlockFlower_EnumFlowerType::getMeta() { return int(*classes[className]->invokeMethod<int>(this->object, "getMeta", "()I")); }
BlockFlower_EnumFlowerColor BlockFlower_EnumFlowerType::getBlockType() { return BlockFlower_EnumFlowerColor(*classes[className]->invokeMethod<jobject>(this->object, "getBlockType", "()Lnet/minecraft/block/BlockFlower$EnumFlowerColor;")); }
String BlockFlower_EnumFlowerType::getUnlocalizedName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava/lang/String;")); }
String BlockFlower_EnumFlowerType::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
BlockFlower_EnumFlowerType BlockFlower_EnumFlowerType::valueOf(String arg0) { return BlockFlower_EnumFlowerType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/block/BlockFlower$EnumFlowerType;", arg0)); }
BlockFlower_EnumFlowerType BlockFlower_EnumFlowerType::getType(BlockFlower_EnumFlowerColor arg0, int arg1) { return BlockFlower_EnumFlowerType(*classes[className]->invokeStaticMethod<jobject>("getType", "(Lnet/minecraft/block/BlockFlower$EnumFlowerColor;I)Lnet/minecraft/block/BlockFlower$EnumFlowerType;", arg0, arg1)); }

BlockFlower BlockFlower_EnumFlowerColor::getBlock() { return BlockFlower(*classes[className]->invokeMethod<jobject>(this->object, "getBlock", "()Lnet/minecraft/block/BlockFlower;")); }
BlockFlower_EnumFlowerColor BlockFlower_EnumFlowerColor::valueOf(String arg0) { return BlockFlower_EnumFlowerColor(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/block/BlockFlower$EnumFlowerColor;", arg0)); }

IProperty BlockFlower::getTypeProperty() { return IProperty(*classes[className]->invokeMethod<jobject>(this->object, "getTypeProperty", "()Lnet/minecraft/block/properties/IProperty;")); }
IBlockState BlockFlower::getStateFromMeta(int arg0) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getStateFromMeta", "(I)Lnet/minecraft/block/state/IBlockState;", arg0)); }
BlockState BlockFlower::createBlockState() { return BlockState(*classes[className]->invokeMethod<jobject>(this->object, "createBlockState", "()Lnet/minecraft/block/state/BlockState;")); }
int BlockFlower::damageDropped(IBlockState arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "damageDropped", "(Lnet/minecraft/block/state/IBlockState;)I", arg0)); }
void BlockFlower::getSubBlocks(Item arg0, CreativeTabs arg1, List arg2) { (classes[className]->invokeMethod<void>(this->object, "getSubBlocks", "(Lnet/minecraft/item/Item;Lnet/minecraft/creativetab/CreativeTabs;Ljava/util/List;)V", arg0, arg1, arg2)); }
Block_EnumOffsetType BlockFlower::getOffsetType() { return Block_EnumOffsetType(*classes[className]->invokeMethod<jobject>(this->object, "getOffsetType", "()Lnet/minecraft/block/Block$EnumOffsetType;")); }
BlockFlower_EnumFlowerColor BlockFlower::getBlockType() { return BlockFlower_EnumFlowerColor(*classes[className]->invokeMethod<jobject>(this->object, "getBlockType", "()Lnet/minecraft/block/BlockFlower$EnumFlowerColor;")); }
int BlockFlower::getMetaFromState(IBlockState arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMetaFromState", "(Lnet/minecraft/block/state/IBlockState;)I", arg0)); }


Block BlockState::getBlock() { return Block(*classes[className]->invokeMethod<jobject>(this->object, "getBlock", "()Lnet/minecraft/block/Block;")); }
List BlockState::getAllowedValues() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getAllowedValues", "()Ljava/util/List;")); }
IBlockState BlockState::getBaseState() { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getBaseState", "()Lnet/minecraft/block/state/IBlockState;")); }
ImmutableList BlockState::getValidStates() { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "getValidStates", "()Lcom/google/common/collect/ImmutableList;")); }
String BlockState::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Collection BlockState::getProperties() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getProperties", "()Ljava/util/Collection;")); }

ImmutableList ImmutableList::construct(Object_interface arg0) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("construct", "([Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0)); }
ImmutableList ImmutableList::asImmutableList(Object_interface arg0) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("asImmutableList", "([Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0)); }
ImmutableList ImmutableList::asImmutableList(Object_interface arg0, int arg1) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("asImmutableList", "([Ljava/lang/Object;I)Lcom/google/common/collect/ImmutableList;", arg0, arg1)); }
ImmutableList ImmutableList::subListUnchecked(int arg0, int arg1) { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "subListUnchecked", "(II)Lcom/google/common/collect/ImmutableList;", arg0, arg1)); }
int ImmutableList::copyIntoArray(Object_interface arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "copyIntoArray", "([Ljava/lang/Object;I)I", arg0, arg1)); }
ImmutableList ImmutableList::copyOf(Collection arg0) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("copyOf", "(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableList;", arg0)); }
ImmutableList ImmutableList::copyOf(Iterable arg0) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("copyOf", "(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableList;", arg0)); }
ImmutableList ImmutableList::copyOf(Iterator arg0) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("copyOf", "(Ljava/util/Iterator;)Lcom/google/common/collect/ImmutableList;", arg0)); }
ImmutableList ImmutableList::copyOf(Object_interface arg0) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("copyOf", "([Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0)); }
ImmutableList ImmutableList::subList(int arg0, int arg1) { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "subList", "(II)Lcom/google/common/collect/ImmutableList;", arg0, arg1)); }
UnmodifiableIterator ImmutableList::iterator() { return UnmodifiableIterator(*classes[className]->invokeMethod<jobject>(this->object, "iterator", "()Lcom/google/common/collect/UnmodifiableIterator;")); }
ImmutableList ImmutableList::of() { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "()Lcom/google/common/collect/ImmutableList;")); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5)); }
ImmutableList ImmutableList::of(Object arg0) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object_interface arg12) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
ImmutableList ImmutableList::of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return ImmutableList(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
ImmutableList_Builder ImmutableList::builder() { return ImmutableList_Builder(*classes[className]->invokeStaticMethod<jobject>("builder", "()Lcom/google/common/collect/ImmutableList$Builder;")); }
void ImmutableList::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
ImmutableList ImmutableList::asList() { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "asList", "()Lcom/google/common/collect/ImmutableList;")); }
ImmutableList ImmutableList::reverse() { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "reverse", "()Lcom/google/common/collect/ImmutableList;")); }
UnmodifiableListIterator ImmutableList::listIterator(int arg0) { return UnmodifiableListIterator(*classes[className]->invokeMethod<jobject>(this->object, "listIterator", "(I)Lcom/google/common/collect/UnmodifiableListIterator;", arg0)); }
UnmodifiableListIterator ImmutableList::listIterator() { return UnmodifiableListIterator(*classes[className]->invokeMethod<jobject>(this->object, "listIterator", "()Lcom/google/common/collect/UnmodifiableListIterator;")); }
Object ImmutableList::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }


ImmutableList ImmutableList_Builder::build() { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "build", "()Lcom/google/common/collect/ImmutableList;")); }
ImmutableList_Builder ImmutableList_Builder::add(Object arg0) { return ImmutableList_Builder(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList$Builder;", arg0)); }
ImmutableList_Builder ImmutableList_Builder::add(Object_interface arg0) { return ImmutableList_Builder(*classes[className]->invokeMethod<jobject>(this->object, "add", "([Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList$Builder;", arg0)); }
ImmutableList_Builder ImmutableList_Builder::addAll(Iterable arg0) { return ImmutableList_Builder(*classes[className]->invokeMethod<jobject>(this->object, "addAll", "(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableList$Builder;", arg0)); }
ImmutableList_Builder ImmutableList_Builder::addAll(Iterator arg0) { return ImmutableList_Builder(*classes[className]->invokeMethod<jobject>(this->object, "addAll", "(Ljava/util/Iterator;)Lcom/google/common/collect/ImmutableList$Builder;", arg0)); }

ImmutableCollection_Builder ImmutableCollection_ArrayBasedBuilder::add(Object_interface arg0) { return ImmutableCollection_Builder(*classes[className]->invokeMethod<jobject>(this->object, "add", "([Ljava/lang/Object;)Lcom/google/common/collect/ImmutableCollection$Builder;", arg0)); }
ImmutableCollection_ArrayBasedBuilder ImmutableCollection_ArrayBasedBuilder::add(Object arg0) { return ImmutableCollection_ArrayBasedBuilder(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableCollection$ArrayBasedBuilder;", arg0)); }
ImmutableCollection_Builder ImmutableCollection_ArrayBasedBuilder::addAll(Iterable arg0) { return ImmutableCollection_Builder(*classes[className]->invokeMethod<jobject>(this->object, "addAll", "(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableCollection$Builder;", arg0)); }
void ImmutableCollection_ArrayBasedBuilder::ensureCapacity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

int ImmutableCollection_Builder::expandedCapacity(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("expandedCapacity", "(II)I", arg0, arg1)); }
ImmutableCollection ImmutableCollection_Builder::build() { return ImmutableCollection(*classes[className]->invokeMethod<jobject>(this->object, "build", "()Lcom/google/common/collect/ImmutableCollection;")); }
ImmutableCollection_Builder ImmutableCollection_Builder::add(Object_interface arg0) { return ImmutableCollection_Builder(*classes[className]->invokeMethod<jobject>(this->object, "add", "([Ljava/lang/Object;)Lcom/google/common/collect/ImmutableCollection$Builder;", arg0)); }
ImmutableCollection_Builder ImmutableCollection_Builder::add(Object arg0) { return ImmutableCollection_Builder(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableCollection$Builder;", arg0)); }
ImmutableCollection_Builder ImmutableCollection_Builder::addAll(Iterator arg0) { return ImmutableCollection_Builder(*classes[className]->invokeMethod<jobject>(this->object, "addAll", "(Ljava/util/Iterator;)Lcom/google/common/collect/ImmutableCollection$Builder;", arg0)); }
ImmutableCollection_Builder ImmutableCollection_Builder::addAll(Iterable arg0) { return ImmutableCollection_Builder(*classes[className]->invokeMethod<jobject>(this->object, "addAll", "(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableCollection$Builder;", arg0)); }

int ImmutableCollection::copyIntoArray(Object_interface arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "copyIntoArray", "([Ljava/lang/Object;I)I", arg0, arg1)); }
bool ImmutableCollection::isPartialView() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPartialView", "()Z")); }
ImmutableList ImmutableCollection::createAsList() { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "createAsList", "()Lcom/google/common/collect/ImmutableList;")); }
UnmodifiableIterator ImmutableCollection::iterator() { return UnmodifiableIterator(*classes[className]->invokeMethod<jobject>(this->object, "iterator", "()Lcom/google/common/collect/UnmodifiableIterator;")); }
ImmutableList ImmutableCollection::asList() { return ImmutableList(*classes[className]->invokeMethod<jobject>(this->object, "asList", "()Lcom/google/common/collect/ImmutableList;")); }
Object ImmutableCollection::writeReplace() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava/lang/Object;")); }

String AbstractCollection::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }


Block_EnumOffsetType Block_EnumOffsetType::valueOf(String arg0) { return Block_EnumOffsetType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/block/Block$EnumOffsetType;", arg0)); }

bool BlockBush::isFullCube() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFullCube", "()Z")); }
void BlockBush::updateTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (classes[className]->invokeMethod<void>(this->object, "updateTick", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Ljava/util/Random;)V", arg0, arg1, arg2, arg3)); }
void BlockBush::onNeighborBlockChange(World arg0, BlockPos arg1, IBlockState arg2, Block arg3) { (classes[className]->invokeMethod<void>(this->object, "onNeighborBlockChange", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/block/Block;)V", arg0, arg1, arg2, arg3)); }
AxisAlignedBB BlockBush::getCollisionBoundingBox(World arg0, BlockPos arg1, IBlockState arg2) { return AxisAlignedBB(*classes[className]->invokeMethod<jobject>(this->object, "getCollisionBoundingBox", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/util/AxisAlignedBB;", arg0, arg1, arg2)); }
void BlockBush::checkAndDropBlock(World arg0, BlockPos arg1, IBlockState arg2) { (classes[className]->invokeMethod<void>(this->object, "checkAndDropBlock", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", arg0, arg1, arg2)); }
bool BlockBush::canBlockStay(World arg0, BlockPos arg1, IBlockState arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBlockStay", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)Z", arg0, arg1, arg2)); }
bool BlockBush::canPlaceBlockOn(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPlaceBlockOn", "(Lnet/minecraft/block/Block;)Z", arg0)); }
EnumWorldBlockLayer BlockBush::getBlockLayer() { return EnumWorldBlockLayer(*classes[className]->invokeMethod<jobject>(this->object, "getBlockLayer", "()Lnet/minecraft/util/EnumWorldBlockLayer;")); }
bool BlockBush::isOpaqueCube() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpaqueCube", "()Z")); }
bool BlockBush::canPlaceBlockAt(World arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPlaceBlockAt", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }

String EnumWorldBlockLayer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
EnumWorldBlockLayer EnumWorldBlockLayer::valueOf(String arg0) { return EnumWorldBlockLayer(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/EnumWorldBlockLayer;", arg0)); }

IBlockState ChunkPrimer::getBlockState(int arg0) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getBlockState", "(I)Lnet/minecraft/block/state/IBlockState;", arg0)); }
IBlockState ChunkPrimer::getBlockState(int arg0, int arg1, int arg2) { return IBlockState(*classes[className]->invokeMethod<jobject>(this->object, "getBlockState", "(III)Lnet/minecraft/block/state/IBlockState;", arg0, arg1, arg2)); }
void ChunkPrimer::setBlockState(int arg0, int arg1, int arg2, IBlockState arg3) { (classes[className]->invokeMethod<void>(this->object, "setBlockState", "(IIILnet/minecraft/block/state/IBlockState;)V", arg0, arg1, arg2, arg3)); }
void ChunkPrimer::setBlockState(int arg0, IBlockState arg1) { (classes[className]->invokeMethod<void>(this->object, "setBlockState", "(ILnet/minecraft/block/state/IBlockState;)V", arg0, arg1)); }

BiomeGenBase_TempCategory BiomeGenBase_TempCategory::valueOf(String arg0) { return BiomeGenBase_TempCategory(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/world/biome/BiomeGenBase$TempCategory;", arg0)); }

Chunk_EnumCreateEntityType Chunk_EnumCreateEntityType::valueOf(String arg0) { return Chunk_EnumCreateEntityType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;", arg0)); }

EnumSkyBlock EnumSkyBlock::valueOf(String arg0) { return EnumSkyBlock(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/world/EnumSkyBlock;", arg0)); }

BlockPos ChunkCoordIntPair::getBlock(int arg0, int arg1, int arg2) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getBlock", "(III)Lnet/minecraft/util/BlockPos;", arg0, arg1, arg2)); }
int ChunkCoordIntPair::getXEnd() { return int(*classes[className]->invokeMethod<int>(this->object, "getXEnd", "()I")); }
int ChunkCoordIntPair::getXStart() { return int(*classes[className]->invokeMethod<int>(this->object, "getXStart", "()I")); }
int ChunkCoordIntPair::getZEnd() { return int(*classes[className]->invokeMethod<int>(this->object, "getZEnd", "()I")); }
int ChunkCoordIntPair::getZStart() { return int(*classes[className]->invokeMethod<int>(this->object, "getZStart", "()I")); }
long ChunkCoordIntPair::chunkXZ2Int(int arg0, int arg1) { return long(*classes[className]->invokeStaticMethod<long>("chunkXZ2Int", "(II)J", arg0, arg1)); }
int ChunkCoordIntPair::getCenterXPos() { return int(*classes[className]->invokeMethod<int>(this->object, "getCenterXPos", "()I")); }
int ChunkCoordIntPair::getCenterZPosition() { return int(*classes[className]->invokeMethod<int>(this->object, "getCenterZPosition", "()I")); }
BlockPos ChunkCoordIntPair::getCenterBlock(int arg0) { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getCenterBlock", "(I)Lnet/minecraft/util/BlockPos;", arg0)); }
bool ChunkCoordIntPair::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ChunkCoordIntPair::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ChunkCoordIntPair::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }


bool Teleporter::makePortal(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "makePortal", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void Teleporter::placeInPortal(Entity arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "placeInPortal", "(Lnet/minecraft/entity/Entity;F)V", arg0, arg1)); }
bool Teleporter::placeInExistingPortal(Entity arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "placeInExistingPortal", "(Lnet/minecraft/entity/Entity;F)Z", arg0, arg1)); }
void Teleporter::removeStalePortalLocations(long arg0) { (classes[className]->invokeMethod<void>(this->object, "removeStalePortalLocations", "(J)V", arg0)); }


String EnumParticleTypes::getParticleName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getParticleName", "()Ljava/lang/String;")); }
int EnumParticleTypes::getArgumentCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getArgumentCount", "()I")); }
bool EnumParticleTypes::hasArguments() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasArguments", "()Z")); }
EnumParticleTypes EnumParticleTypes::getParticleFromId(int arg0) { return EnumParticleTypes(*classes[className]->invokeStaticMethod<jobject>("getParticleFromId", "(I)Lnet/minecraft/util/EnumParticleTypes;", arg0)); }
int EnumParticleTypes::getParticleID() { return int(*classes[className]->invokeMethod<int>(this->object, "getParticleID", "()I")); }
bool EnumParticleTypes::getShouldIgnoreRange() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getShouldIgnoreRange", "()Z")); }
EnumParticleTypes EnumParticleTypes::valueOf(String arg0) { return EnumParticleTypes(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/EnumParticleTypes;", arg0)); }

void StructureBoundingBox::expandTo(StructureBoundingBox arg0) { (classes[className]->invokeMethod<void>(this->object, "expandTo", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;)V", arg0)); }
int StructureBoundingBox::getXSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getXSize", "()I")); }
int StructureBoundingBox::getYSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getYSize", "()I")); }
int StructureBoundingBox::getZSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getZSize", "()I")); }
Vec3i StructureBoundingBox::getCenter() { return Vec3i(*classes[className]->invokeMethod<jobject>(this->object, "getCenter", "()Lnet/minecraft/util/Vec3i;")); }
StructureBoundingBox StructureBoundingBox::func_175899_a(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return StructureBoundingBox(*classes[className]->invokeStaticMethod<jobject>("func_175899_a", "(IIIIII)Lnet/minecraft/world/gen/structure/StructureBoundingBox;", arg0, arg1, arg2, arg3, arg4, arg5)); }
Vec3i StructureBoundingBox::func_175896_b() { return Vec3i(*classes[className]->invokeMethod<jobject>(this->object, "func_175896_b", "()Lnet/minecraft/util/Vec3i;")); }
NBTTagIntArray StructureBoundingBox::toNBTTagIntArray() { return NBTTagIntArray(*classes[className]->invokeMethod<jobject>(this->object, "toNBTTagIntArray", "()Lnet/minecraft/nbt/NBTTagIntArray;")); }
bool StructureBoundingBox::isVecInside(Vec3i arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVecInside", "(Lnet/minecraft/util/Vec3i;)Z", arg0)); }
StructureBoundingBox StructureBoundingBox::getNewBoundingBox() { return StructureBoundingBox(*classes[className]->invokeStaticMethod<jobject>("getNewBoundingBox", "()Lnet/minecraft/world/gen/structure/StructureBoundingBox;")); }
bool StructureBoundingBox::intersectsWith(int arg0, int arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsWith", "(IIII)Z", arg0, arg1, arg2, arg3)); }
bool StructureBoundingBox::intersectsWith(StructureBoundingBox arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsWith", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;)Z", arg0)); }
StructureBoundingBox StructureBoundingBox::getComponentToAddBoundingBox(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, EnumFacing arg9) { return StructureBoundingBox(*classes[className]->invokeStaticMethod<jobject>("getComponentToAddBoundingBox", "(IIIIIIIIILnet/minecraft/util/EnumFacing;)Lnet/minecraft/world/gen/structure/StructureBoundingBox;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
String StructureBoundingBox::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void StructureBoundingBox::offset(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "offset", "(III)V", arg0, arg1, arg2)); }

bool NBTTagIntArray::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String NBTTagIntArray::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int NBTTagIntArray::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void NBTTagIntArray::write(DataOutput arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/io/DataOutput;)V", arg0)); }
void NBTTagIntArray::read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (classes[className]->invokeMethod<void>(this->object, "read", "(Ljava/io/DataInput;ILnet/minecraft/nbt/NBTSizeTracker;)V", arg0, arg1, arg2)); }
byte NBTTagIntArray::getId() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getId", "()B")); }
NBTBase NBTTagIntArray::copy() { return NBTBase(*classes[className]->invokeMethod<jobject>(this->object, "copy", "()Lnet/minecraft/nbt/NBTBase;")); }

void EntityTracker::trackEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "trackEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityTracker::trackEntity(Entity arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "trackEntity", "(Lnet/minecraft/entity/Entity;II)V", arg0, arg1, arg2)); }
void EntityTracker::addEntityToTracker(Entity arg0, int arg1, int arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "addEntityToTracker", "(Lnet/minecraft/entity/Entity;IIZ)V", arg0, arg1, arg2, arg3)); }
void EntityTracker::untrackEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "untrackEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityTracker::removePlayerFromTrackers(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "removePlayerFromTrackers", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void EntityTracker::func_85172_a(EntityPlayerMP arg0, Chunk arg1) { (classes[className]->invokeMethod<void>(this->object, "func_85172_a", "(Lnet/minecraft/entity/player/EntityPlayerMP;Lnet/minecraft/world/chunk/Chunk;)V", arg0, arg1)); }
void EntityTracker::func_180245_a(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "func_180245_a", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void EntityTracker::func_151248_b(Entity arg0, Packet arg1) { (classes[className]->invokeMethod<void>(this->object, "func_151248_b", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/network/Packet;)V", arg0, arg1)); }
void EntityTracker::updateTrackedEntities() { (classes[className]->invokeMethod<void>(this->object, "updateTrackedEntities", "()V")); }
void EntityTracker::sendToAllTrackingEntity(Entity arg0, Packet arg1) { (classes[className]->invokeMethod<void>(this->object, "sendToAllTrackingEntity", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/network/Packet;)V", arg0, arg1)); }

void MinecraftServer::setDemo(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDemo", "(Z)V", arg0)); }
void MinecraftServer::setKeyPair(KeyPair arg0) { (classes[className]->invokeMethod<void>(this->object, "setKeyPair", "(Ljava/security/KeyPair;)V", arg0)); }
void MinecraftServer::setMOTD(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setMOTD", "(Ljava/lang/String;)V", arg0)); }
bool MinecraftServer::isHardcore() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHardcore", "()Z")); }
void MinecraftServer::finalTick(CrashReport arg0) { (classes[className]->invokeMethod<void>(this->object, "finalTick", "(Lnet/minecraft/crash/CrashReport;)V", arg0)); }
String MinecraftServer::shareToLAN(WorldSettings_GameType arg0, bool arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "shareToLAN", "(Lnet/minecraft/world/WorldSettings$GameType;Z)Ljava/lang/String;", arg0, arg1)); }
String MinecraftServer::getMOTD() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getMOTD", "()Ljava/lang/String;")); }
void MinecraftServer::logWarning(String arg0) { (classes[className]->invokeMethod<void>(this->object, "logWarning", "(Ljava/lang/String;)V", arg0)); }
KeyPair MinecraftServer::getKeyPair() { return KeyPair(*classes[className]->invokeMethod<jobject>(this->object, "getKeyPair", "()Ljava/security/KeyPair;")); }
MinecraftServer MinecraftServer::getServer() { return MinecraftServer(*classes[className]->invokeStaticMethod<jobject>("getServer", "()Lnet/minecraft/server/MinecraftServer;")); }
void MinecraftServer::stopServer() { (classes[className]->invokeMethod<void>(this->object, "stopServer", "()V")); }
void MinecraftServer::tick() { (classes[className]->invokeMethod<void>(this->object, "tick", "()V")); }
bool MinecraftServer::isDemo() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDemo", "()Z")); }
long MinecraftServer::getCurrentTimeMillis() { return long(*classes[className]->invokeStaticMethod<long>("getCurrentTimeMillis", "()J")); }
EnumDifficulty MinecraftServer::getDifficulty() { return EnumDifficulty(*classes[className]->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet/minecraft/world/EnumDifficulty;")); }
void MinecraftServer::startServerThread() { (classes[className]->invokeMethod<void>(this->object, "startServerThread", "()V")); }
String MinecraftServer::getUserMessage() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUserMessage", "()Ljava/lang/String;")); }
bool MinecraftServer::serverIsInRunLoop() { return bool(*classes[className]->invokeMethod<bool>(this->object, "serverIsInRunLoop", "()Z")); }
NetworkSystem MinecraftServer::getNetworkSystem() { return NetworkSystem(*classes[className]->invokeMethod<jobject>(this->object, "getNetworkSystem", "()Lnet/minecraft/network/NetworkSystem;")); }
bool MinecraftServer::isAnvilFileSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnvilFileSet", "()Z")); }
void MinecraftServer::initiateShutdown() { (classes[className]->invokeMethod<void>(this->object, "initiateShutdown", "()V")); }
PlayerUsageSnooper MinecraftServer::getPlayerUsageSnooper() { return PlayerUsageSnooper(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerUsageSnooper", "()Lnet/minecraft/profiler/PlayerUsageSnooper;")); }
int MinecraftServer::getMaxPlayers() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxPlayers", "()I")); }
void MinecraftServer::setWorldName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldName", "(Ljava/lang/String;)V", arg0)); }
void MinecraftServer::setServerOwner(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setServerOwner", "(Ljava/lang/String;)V", arg0)); }
void MinecraftServer::setFolderName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setFolderName", "(Ljava/lang/String;)V", arg0)); }
void MinecraftServer::canCreateBonusChest(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "canCreateBonusChest", "(Z)V", arg0)); }
void MinecraftServer::setBuildLimit(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setBuildLimit", "(I)V", arg0)); }
void MinecraftServer::setConfigManager(ServerConfigurationManager arg0) { (classes[className]->invokeMethod<void>(this->object, "setConfigManager", "(Lnet/minecraft/server/management/ServerConfigurationManager;)V", arg0)); }
ServerCommandManager MinecraftServer::createNewCommandManager() { return ServerCommandManager(*classes[className]->invokeMethod<jobject>(this->object, "createNewCommandManager", "()Lnet/minecraft/command/ServerCommandManager;")); }
void MinecraftServer::loadAllWorlds(String arg0, String arg1, long arg2, WorldType arg3, String arg4) { (classes[className]->invokeMethod<void>(this->object, "loadAllWorlds", "(Ljava/lang/String;Ljava/lang/String;JLnet/minecraft/world/WorldType;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4)); }
void MinecraftServer::convertMapIfNeeded(String arg0) { (classes[className]->invokeMethod<void>(this->object, "convertMapIfNeeded", "(Ljava/lang/String;)V", arg0)); }
ISaveFormat MinecraftServer::getActiveAnvilConverter() { return ISaveFormat(*classes[className]->invokeMethod<jobject>(this->object, "getActiveAnvilConverter", "()Lnet/minecraft/world/storage/ISaveFormat;")); }
String MinecraftServer::getFolderName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFolderName", "()Ljava/lang/String;")); }
void MinecraftServer::setResourcePackFromWorld(String arg0, ISaveHandler arg1) { (classes[className]->invokeMethod<void>(this->object, "setResourcePackFromWorld", "(Ljava/lang/String;Lnet/minecraft/world/storage/ISaveHandler;)V", arg0, arg1)); }
void MinecraftServer::setDifficultyForAllWorlds(EnumDifficulty arg0) { (classes[className]->invokeMethod<void>(this->object, "setDifficultyForAllWorlds", "(Lnet/minecraft/world/EnumDifficulty;)V", arg0)); }
void MinecraftServer::initialWorldChunkLoad() { (classes[className]->invokeMethod<void>(this->object, "initialWorldChunkLoad", "()V")); }
bool MinecraftServer::startServer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "startServer", "()Z")); }
void MinecraftServer::setOnlineMode(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setOnlineMode", "(Z)V", arg0)); }
void MinecraftServer::setCanSpawnAnimals(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setCanSpawnAnimals", "(Z)V", arg0)); }
void MinecraftServer::setCanSpawnNPCs(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setCanSpawnNPCs", "(Z)V", arg0)); }
void MinecraftServer::setAllowPvp(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAllowPvp", "(Z)V", arg0)); }
void MinecraftServer::setAllowFlight(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAllowFlight", "(Z)V", arg0)); }
String MinecraftServer::getServerOwner() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getServerOwner", "()Ljava/lang/String;")); }
void MinecraftServer::saveAllWorlds(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "saveAllWorlds", "(Z)V", arg0)); }
bool MinecraftServer::canStructuresSpawn() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canStructuresSpawn", "()Z")); }
bool MinecraftServer::func_181034_q() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181034_q", "()Z")); }
bool MinecraftServer::func_183002_r() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_183002_r", "()Z")); }
File MinecraftServer::getDataDirectory() { return File(*classes[className]->invokeMethod<jobject>(this->object, "getDataDirectory", "()Ljava/io/File;")); }
bool MinecraftServer::isDedicatedServer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDedicatedServer", "()Z")); }
bool MinecraftServer::func_181035_ah() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181035_ah", "()Z")); }
CrashReport MinecraftServer::addServerInfoToCrashReport(CrashReport arg0) { return CrashReport(*classes[className]->invokeMethod<jobject>(this->object, "addServerInfoToCrashReport", "(Lnet/minecraft/crash/CrashReport;)Lnet/minecraft/crash/CrashReport;", arg0)); }
void MinecraftServer::setInstance() { (classes[className]->invokeMethod<void>(this->object, "setInstance", "()V")); }
bool MinecraftServer::isCommandBlockEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCommandBlockEnabled", "()Z")); }
int MinecraftServer::getOpPermissionLevel() { return int(*classes[className]->invokeMethod<int>(this->object, "getOpPermissionLevel", "()I")); }
WorldSettings_GameType MinecraftServer::getGameType() { return WorldSettings_GameType(*classes[className]->invokeMethod<jobject>(this->object, "getGameType", "()Lnet/minecraft/world/WorldSettings$GameType;")); }
void MinecraftServer::setUserMessage(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setUserMessage", "(Ljava/lang/String;)V", arg0)); }
bool MinecraftServer::isSinglePlayer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSinglePlayer", "()Z")); }
void MinecraftServer::outputPercentRemaining(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "outputPercentRemaining", "(Ljava/lang/String;I)V", arg0, arg1)); }
bool MinecraftServer::isServerRunning() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isServerRunning", "()Z")); }
void MinecraftServer::clearCurrentTask() { (classes[className]->invokeMethod<void>(this->object, "clearCurrentTask", "()V")); }
void MinecraftServer::setResourcePack(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "setResourcePack", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
void MinecraftServer::addFaviconToStatusResponse(ServerStatusResponse arg0) { (classes[className]->invokeMethod<void>(this->object, "addFaviconToStatusResponse", "(Lnet/minecraft/network/ServerStatusResponse;)V", arg0)); }
void MinecraftServer::systemExitNow() { (classes[className]->invokeMethod<void>(this->object, "systemExitNow", "()V")); }
void MinecraftServer::updateTimeLightAndEntities() { (classes[className]->invokeMethod<void>(this->object, "updateTimeLightAndEntities", "()V")); }
int MinecraftServer::getCurrentPlayerCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getCurrentPlayerCount", "()I")); }
String MinecraftServer::getMinecraftVersion() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getMinecraftVersion", "()Ljava/lang/String;")); }
String MinecraftServer::getServerModName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getServerModName", "()Ljava/lang/String;")); }
List MinecraftServer::getTabCompletions(ICommandSender arg0, String arg1, BlockPos arg2) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getTabCompletions", "(Lnet/minecraft/command/ICommandSender;Ljava/lang/String;Lnet/minecraft/util/BlockPos;)Ljava/util/List;", arg0, arg1, arg2)); }
ICommandManager MinecraftServer::getCommandManager() { return ICommandManager(*classes[className]->invokeMethod<jobject>(this->object, "getCommandManager", "()Lnet/minecraft/command/ICommandManager;")); }
bool MinecraftServer::allowSpawnMonsters() { return bool(*classes[className]->invokeMethod<bool>(this->object, "allowSpawnMonsters", "()Z")); }
void MinecraftServer::deleteWorldAndStopServer() { (classes[className]->invokeMethod<void>(this->object, "deleteWorldAndStopServer", "()V")); }
String MinecraftServer::getResourcePackUrl() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getResourcePackUrl", "()Ljava/lang/String;")); }
String MinecraftServer::getResourcePackHash() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getResourcePackHash", "()Ljava/lang/String;")); }
bool MinecraftServer::getGuiEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getGuiEnabled", "()Z")); }
bool MinecraftServer::isServerInOnlineMode() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isServerInOnlineMode", "()Z")); }
bool MinecraftServer::getCanSpawnAnimals() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanSpawnAnimals", "()Z")); }
bool MinecraftServer::getCanSpawnNPCs() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanSpawnNPCs", "()Z")); }
bool MinecraftServer::isPVPEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPVPEnabled", "()Z")); }
bool MinecraftServer::isFlightAllowed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFlightAllowed", "()Z")); }
int MinecraftServer::getBuildLimit() { return int(*classes[className]->invokeMethod<int>(this->object, "getBuildLimit", "()I")); }
bool MinecraftServer::isServerStopped() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isServerStopped", "()Z")); }
int MinecraftServer::getTickCounter() { return int(*classes[className]->invokeMethod<int>(this->object, "getTickCounter", "()I")); }
void MinecraftServer::enableProfiling() { (classes[className]->invokeMethod<void>(this->object, "enableProfiling", "()V")); }
int MinecraftServer::getSpawnProtectionSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSpawnProtectionSize", "()I")); }
bool MinecraftServer::isBlockProtected(World arg0, BlockPos arg1, EntityPlayer arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockProtected", "(Lnet/minecraft/world/World;Lnet/minecraft/util/BlockPos;Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0, arg1, arg2)); }
bool MinecraftServer::getForceGamemode() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getForceGamemode", "()Z")); }
Proxy MinecraftServer::getServerProxy() { return Proxy(*classes[className]->invokeMethod<jobject>(this->object, "getServerProxy", "()Ljava/net/Proxy;")); }
int MinecraftServer::getMaxPlayerIdleMinutes() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxPlayerIdleMinutes", "()I")); }
void MinecraftServer::setPlayerIdleTimeout(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayerIdleTimeout", "(I)V", arg0)); }
MinecraftSessionService MinecraftServer::getMinecraftSessionService() { return MinecraftSessionService(*classes[className]->invokeMethod<jobject>(this->object, "getMinecraftSessionService", "()Lcom/mojang/authlib/minecraft/MinecraftSessionService;")); }
GameProfileRepository MinecraftServer::getGameProfileRepository() { return GameProfileRepository(*classes[className]->invokeMethod<jobject>(this->object, "getGameProfileRepository", "()Lcom/mojang/authlib/GameProfileRepository;")); }
PlayerProfileCache MinecraftServer::getPlayerProfileCache() { return PlayerProfileCache(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerProfileCache", "()Lnet/minecraft/server/management/PlayerProfileCache;")); }
ServerStatusResponse MinecraftServer::getServerStatusResponse() { return ServerStatusResponse(*classes[className]->invokeMethod<jobject>(this->object, "getServerStatusResponse", "()Lnet/minecraft/network/ServerStatusResponse;")); }
void MinecraftServer::refreshStatusNextTick() { (classes[className]->invokeMethod<void>(this->object, "refreshStatusNextTick", "()V")); }
Entity MinecraftServer::getEntityFromUuid(UUID arg0) { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getEntityFromUuid", "(Ljava/util/UUID;)Lnet/minecraft/entity/Entity;", arg0)); }
int MinecraftServer::getMaxWorldSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxWorldSize", "()I")); }
ListenableFuture MinecraftServer::callFromMainThread(Callable arg0) { return ListenableFuture(*classes[className]->invokeMethod<jobject>(this->object, "callFromMainThread", "(Ljava/util/concurrent/Callable;)Lcom/google/common/util/concurrent/ListenableFuture;", arg0)); }
String MinecraftServer::getWorldName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getWorldName", "()Ljava/lang/String;")); }
void MinecraftServer::setGameType(WorldSettings_GameType arg0) { (classes[className]->invokeMethod<void>(this->object, "setGameType", "(Lnet/minecraft/world/WorldSettings$GameType;)V", arg0)); }
bool MinecraftServer::getAllowNether() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAllowNether", "()Z")); }
WorldServer MinecraftServer::worldServerForDimension(int arg0) { return WorldServer(*classes[className]->invokeMethod<jobject>(this->object, "worldServerForDimension", "(I)Lnet/minecraft/world/WorldServer;", arg0)); }
ServerConfigurationManager MinecraftServer::getConfigurationManager() { return ServerConfigurationManager(*classes[className]->invokeMethod<jobject>(this->object, "getConfigurationManager", "()Lnet/minecraft/server/management/ServerConfigurationManager;")); }
bool MinecraftServer::isAnnouncingPlayerAchievements() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnnouncingPlayerAchievements", "()Z")); }
int MinecraftServer::getNetworkCompressionTreshold() { return int(*classes[className]->invokeMethod<int>(this->object, "getNetworkCompressionTreshold", "()I")); }
File MinecraftServer::getFile(String arg0) { return File(*classes[className]->invokeMethod<jobject>(this->object, "getFile", "(Ljava/lang/String;)Ljava/io/File;", arg0)); }

PublicKey KeyPair::getPublic() { return PublicKey(*classes[className]->invokeMethod<jobject>(this->object, "getPublic", "()Ljava/security/PublicKey;")); }
PrivateKey KeyPair::getPrivate() { return PrivateKey(*classes[className]->invokeMethod<jobject>(this->object, "getPrivate", "()Ljava/security/PrivateKey;")); }



int EnumDifficulty::getDifficultyId() { return int(*classes[className]->invokeMethod<int>(this->object, "getDifficultyId", "()I")); }
EnumDifficulty EnumDifficulty::getDifficultyEnum(int arg0) { return EnumDifficulty(*classes[className]->invokeStaticMethod<jobject>("getDifficultyEnum", "(I)Lnet/minecraft/world/EnumDifficulty;", arg0)); }
String EnumDifficulty::getDifficultyResourceKey() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDifficultyResourceKey", "()Ljava/lang/String;")); }
EnumDifficulty EnumDifficulty::valueOf(String arg0) { return EnumDifficulty(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/world/EnumDifficulty;", arg0)); }

MinecraftServer NetworkSystem::getServer() { return MinecraftServer(*classes[className]->invokeMethod<jobject>(this->object, "getServer", "()Lnet/minecraft/server/MinecraftServer;")); }
SocketAddress NetworkSystem::addLocalEndpoint() { return SocketAddress(*classes[className]->invokeMethod<jobject>(this->object, "addLocalEndpoint", "()Ljava/net/SocketAddress;")); }
void NetworkSystem::addLanEndpoint(InetAddress arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addLanEndpoint", "(Ljava/net/InetAddress;I)V", arg0, arg1)); }
void NetworkSystem::terminateEndpoints() { (classes[className]->invokeMethod<void>(this->object, "terminateEndpoints", "()V")); }
void NetworkSystem::networkTick() { (classes[className]->invokeMethod<void>(this->object, "networkTick", "()V")); }

void PlayerUsageSnooper::addMemoryStatsToSnooper() { (classes[className]->invokeMethod<void>(this->object, "addMemoryStatsToSnooper", "()V")); }
bool PlayerUsageSnooper::isSnooperRunning() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSnooperRunning", "()Z")); }
void PlayerUsageSnooper::startSnooper() { (classes[className]->invokeMethod<void>(this->object, "startSnooper", "()V")); }
void PlayerUsageSnooper::addClientStat(String arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "addClientStat", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
String PlayerUsageSnooper::getUniqueID() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUniqueID", "()Ljava/lang/String;")); }
void PlayerUsageSnooper::addStatToSnooper(String arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "addStatToSnooper", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
void PlayerUsageSnooper::func_152766_h() { (classes[className]->invokeMethod<void>(this->object, "func_152766_h", "()V")); }
void PlayerUsageSnooper::addJvmArgsToSnooper() { (classes[className]->invokeMethod<void>(this->object, "addJvmArgsToSnooper", "()V")); }
Map PlayerUsageSnooper::getCurrentStats() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentStats", "()Ljava/util/Map;")); }
void PlayerUsageSnooper::stopSnooper() { (classes[className]->invokeMethod<void>(this->object, "stopSnooper", "()V")); }
long PlayerUsageSnooper::getMinecraftStartTimeMillis() { return long(*classes[className]->invokeMethod<long>(this->object, "getMinecraftStartTimeMillis", "()J")); }

void ServerConfigurationManager::onTick() { (classes[className]->invokeMethod<void>(this->object, "onTick", "()V")); }
bool ServerConfigurationManager::canJoin(GameProfile arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canJoin", "(Lcom/mojang/authlib/GameProfile;)Z", arg0)); }
void ServerConfigurationManager::addOp(GameProfile arg0) { (classes[className]->invokeMethod<void>(this->object, "addOp", "(Lcom/mojang/authlib/GameProfile;)V", arg0)); }
void ServerConfigurationManager::removeOp(GameProfile arg0) { (classes[className]->invokeMethod<void>(this->object, "removeOp", "(Lcom/mojang/authlib/GameProfile;)V", arg0)); }
int ServerConfigurationManager::getEntityViewDistance() { return int(*classes[className]->invokeMethod<int>(this->object, "getEntityViewDistance", "()I")); }
StatisticsFile ServerConfigurationManager::getPlayerStatsFile(EntityPlayer arg0) { return StatisticsFile(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerStatsFile", "(Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/stats/StatisticsFile;", arg0)); }
void ServerConfigurationManager::sendChatMsg(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "sendChatMsg", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
void ServerConfigurationManager::transferPlayerToDimension(EntityPlayerMP arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "transferPlayerToDimension", "(Lnet/minecraft/entity/player/EntityPlayerMP;I)V", arg0, arg1)); }
bool ServerConfigurationManager::canSendCommands(GameProfile arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSendCommands", "(Lcom/mojang/authlib/GameProfile;)Z", arg0)); }
UserListOps ServerConfigurationManager::getOppedPlayers() { return UserListOps(*classes[className]->invokeMethod<jobject>(this->object, "getOppedPlayers", "()Lnet/minecraft/server/management/UserListOps;")); }
NBTTagCompound ServerConfigurationManager::getHostPlayerData() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getHostPlayerData", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
void ServerConfigurationManager::sendToAllNear(double arg0, double arg1, double arg2, double arg3, int arg4, Packet arg5) { (classes[className]->invokeMethod<void>(this->object, "sendToAllNear", "(DDDDILnet/minecraft/network/Packet;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void ServerConfigurationManager::sendPacketToAllPlayers(Packet arg0) { (classes[className]->invokeMethod<void>(this->object, "sendPacketToAllPlayers", "(Lnet/minecraft/network/Packet;)V", arg0)); }
NBTTagCompound ServerConfigurationManager::readPlayerDataFromFile(EntityPlayerMP arg0) { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "readPlayerDataFromFile", "(Lnet/minecraft/entity/player/EntityPlayerMP;)Lnet/minecraft/nbt/NBTTagCompound;", arg0)); }
MinecraftServer ServerConfigurationManager::getServerInstance() { return MinecraftServer(*classes[className]->invokeMethod<jobject>(this->object, "getServerInstance", "()Lnet/minecraft/server/MinecraftServer;")); }
void ServerConfigurationManager::sendScoreboard(ServerScoreboard arg0, EntityPlayerMP arg1) { (classes[className]->invokeMethod<void>(this->object, "sendScoreboard", "(Lnet/minecraft/scoreboard/ServerScoreboard;Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0, arg1)); }
void ServerConfigurationManager::playerLoggedIn(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "playerLoggedIn", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void ServerConfigurationManager::preparePlayer(EntityPlayerMP arg0, WorldServer arg1) { (classes[className]->invokeMethod<void>(this->object, "preparePlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;Lnet/minecraft/world/WorldServer;)V", arg0, arg1)); }
void ServerConfigurationManager::writePlayerData(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "writePlayerData", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void ServerConfigurationManager::playerLoggedOut(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "playerLoggedOut", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
String ServerConfigurationManager::allowUserToConnect(SocketAddress arg0, GameProfile arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "allowUserToConnect", "(Ljava/net/SocketAddress;Lcom/mojang/authlib/GameProfile;)Ljava/lang/String;", arg0, arg1)); }
bool ServerConfigurationManager::func_183023_f(GameProfile arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_183023_f", "(Lcom/mojang/authlib/GameProfile;)Z", arg0)); }
EntityPlayerMP ServerConfigurationManager::createPlayerForUser(GameProfile arg0) { return EntityPlayerMP(*classes[className]->invokeMethod<jobject>(this->object, "createPlayerForUser", "(Lcom/mojang/authlib/GameProfile;)Lnet/minecraft/entity/player/EntityPlayerMP;", arg0)); }
EntityPlayerMP ServerConfigurationManager::recreatePlayerEntity(EntityPlayerMP arg0, int arg1, bool arg2) { return EntityPlayerMP(*classes[className]->invokeMethod<jobject>(this->object, "recreatePlayerEntity", "(Lnet/minecraft/entity/player/EntityPlayerMP;IZ)Lnet/minecraft/entity/player/EntityPlayerMP;", arg0, arg1, arg2)); }
void ServerConfigurationManager::syncPlayerInventory(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "syncPlayerInventory", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
EntityPlayerMP ServerConfigurationManager::getPlayerByUsername(String arg0) { return EntityPlayerMP(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerByUsername", "(Ljava/lang/String;)Lnet/minecraft/entity/player/EntityPlayerMP;", arg0)); }
String ServerConfigurationManager::func_181058_b(bool arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "func_181058_b", "(Z)Ljava/lang/String;", arg0)); }
UserListBans ServerConfigurationManager::getBannedPlayers() { return UserListBans(*classes[className]->invokeMethod<jobject>(this->object, "getBannedPlayers", "()Lnet/minecraft/server/management/UserListBans;")); }
BanList ServerConfigurationManager::getBannedIPs() { return BanList(*classes[className]->invokeMethod<jobject>(this->object, "getBannedIPs", "()Lnet/minecraft/server/management/BanList;")); }
void ServerConfigurationManager::sendToAllNearExcept(EntityPlayer arg0, double arg1, double arg2, double arg3, double arg4, int arg5, Packet arg6) { (classes[className]->invokeMethod<void>(this->object, "sendToAllNearExcept", "(Lnet/minecraft/entity/player/EntityPlayer;DDDDILnet/minecraft/network/Packet;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ServerConfigurationManager::addWhitelistedPlayer(GameProfile arg0) { (classes[className]->invokeMethod<void>(this->object, "addWhitelistedPlayer", "(Lcom/mojang/authlib/GameProfile;)V", arg0)); }
void ServerConfigurationManager::removePlayerFromWhitelist(GameProfile arg0) { (classes[className]->invokeMethod<void>(this->object, "removePlayerFromWhitelist", "(Lcom/mojang/authlib/GameProfile;)V", arg0)); }
UserListWhitelist ServerConfigurationManager::getWhitelistedPlayers() { return UserListWhitelist(*classes[className]->invokeMethod<jobject>(this->object, "getWhitelistedPlayers", "()Lnet/minecraft/server/management/UserListWhitelist;")); }
void ServerConfigurationManager::loadWhiteList() { (classes[className]->invokeMethod<void>(this->object, "loadWhiteList", "()V")); }
void ServerConfigurationManager::setWhiteListEnabled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setWhiteListEnabled", "(Z)V", arg0)); }
List ServerConfigurationManager::getPlayersMatchingAddress(String arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getPlayersMatchingAddress", "(Ljava/lang/String;)Ljava/util/List;", arg0)); }
void ServerConfigurationManager::sendChatMsgImpl(IChatComponent arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "sendChatMsgImpl", "(Lnet/minecraft/util/IChatComponent;Z)V", arg0, arg1)); }
EntityPlayerMP ServerConfigurationManager::getPlayerByUUID(UUID arg0) { return EntityPlayerMP(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerByUUID", "(Ljava/util/UUID;)Lnet/minecraft/entity/player/EntityPlayerMP;", arg0)); }
int ServerConfigurationManager::getMaxPlayers() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxPlayers", "()I")); }
void ServerConfigurationManager::setPlayerManager(WorldServer_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayerManager", "([Lnet/minecraft/world/WorldServer;)V", arg0)); }
void ServerConfigurationManager::saveAllPlayerData() { (classes[className]->invokeMethod<void>(this->object, "saveAllPlayerData", "()V")); }
int ServerConfigurationManager::getViewDistance() { return int(*classes[className]->invokeMethod<int>(this->object, "getViewDistance", "()I")); }
void ServerConfigurationManager::setViewDistance(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setViewDistance", "(I)V", arg0)); }
void ServerConfigurationManager::setCommandsAllowedForAll(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setCommandsAllowedForAll", "(Z)V", arg0)); }
void ServerConfigurationManager::removeAllPlayers() { (classes[className]->invokeMethod<void>(this->object, "removeAllPlayers", "()V")); }
int ServerConfigurationManager::getCurrentPlayerCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getCurrentPlayerCount", "()I")); }
List ServerConfigurationManager::func_181057_v() { return List(*classes[className]->invokeMethod<jobject>(this->object, "func_181057_v", "()Ljava/util/List;")); }
void ServerConfigurationManager::setGameType(WorldSettings_GameType arg0) { (classes[className]->invokeMethod<void>(this->object, "setGameType", "(Lnet/minecraft/world/WorldSettings$GameType;)V", arg0)); }
void ServerConfigurationManager::transferEntityToWorld(Entity arg0, int arg1, WorldServer arg2, WorldServer arg3) { (classes[className]->invokeMethod<void>(this->object, "transferEntityToWorld", "(Lnet/minecraft/entity/Entity;ILnet/minecraft/world/WorldServer;Lnet/minecraft/world/WorldServer;)V", arg0, arg1, arg2, arg3)); }
void ServerConfigurationManager::serverUpdateMountedMovingPlayer(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "serverUpdateMountedMovingPlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void ServerConfigurationManager::sendMessageToAllTeamMembers(EntityPlayer arg0, IChatComponent arg1) { (classes[className]->invokeMethod<void>(this->object, "sendMessageToAllTeamMembers", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/IChatComponent;)V", arg0, arg1)); }
void ServerConfigurationManager::sendMessageToTeamOrEvryPlayer(EntityPlayer arg0, IChatComponent arg1) { (classes[className]->invokeMethod<void>(this->object, "sendMessageToTeamOrEvryPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/IChatComponent;)V", arg0, arg1)); }
void ServerConfigurationManager::initializeConnectionToPlayer(NetworkManager arg0, EntityPlayerMP arg1) { (classes[className]->invokeMethod<void>(this->object, "initializeConnectionToPlayer", "(Lnet/minecraft/network/NetworkManager;Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0, arg1)); }
void ServerConfigurationManager::setPlayerGameTypeBasedOnOther(EntityPlayerMP arg0, EntityPlayerMP arg1, World arg2) { (classes[className]->invokeMethod<void>(this->object, "setPlayerGameTypeBasedOnOther", "(Lnet/minecraft/entity/player/EntityPlayerMP;Lnet/minecraft/entity/player/EntityPlayerMP;Lnet/minecraft/world/World;)V", arg0, arg1, arg2)); }
void ServerConfigurationManager::updateTimeAndWeatherForPlayer(EntityPlayerMP arg0, WorldServer arg1) { (classes[className]->invokeMethod<void>(this->object, "updateTimeAndWeatherForPlayer", "(Lnet/minecraft/entity/player/EntityPlayerMP;Lnet/minecraft/world/WorldServer;)V", arg0, arg1)); }
void ServerConfigurationManager::sendPacketToAllPlayersInDimension(Packet arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "sendPacketToAllPlayersInDimension", "(Lnet/minecraft/network/Packet;I)V", arg0, arg1)); }

Map StatisticsFile::parseJson(String arg0) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "parseJson", "(Ljava/lang/String;)Ljava/util/Map;", arg0)); }
String StatisticsFile::dumpJson(Map arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("dumpJson", "(Ljava/util/Map;)Ljava/lang/String;", arg0)); }
void StatisticsFile::readStatFile() { (classes[className]->invokeMethod<void>(this->object, "readStatFile", "()V")); }
void StatisticsFile::saveStatFile() { (classes[className]->invokeMethod<void>(this->object, "saveStatFile", "()V")); }
Set StatisticsFile::func_150878_c() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "func_150878_c", "()Ljava/util/Set;")); }
void StatisticsFile::func_150877_d() { (classes[className]->invokeMethod<void>(this->object, "func_150877_d", "()V")); }
void StatisticsFile::sendAchievements(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "sendAchievements", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
bool StatisticsFile::func_150879_e() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_150879_e", "()Z")); }
void StatisticsFile::func_150876_a(EntityPlayerMP arg0) { (classes[className]->invokeMethod<void>(this->object, "func_150876_a", "(Lnet/minecraft/entity/player/EntityPlayerMP;)V", arg0)); }
void StatisticsFile::unlockAchievement(EntityPlayer arg0, StatBase arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "unlockAchievement", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/stats/StatBase;I)V", arg0, arg1, arg2)); }

int StatFileWriter::readStat(StatBase arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "readStat", "(Lnet/minecraft/stats/StatBase;)I", arg0)); }
int StatFileWriter::func_150874_c(Achievement arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "func_150874_c", "(Lnet/minecraft/stats/Achievement;)I", arg0)); }
bool StatFileWriter::hasAchievementUnlocked(Achievement arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasAchievementUnlocked", "(Lnet/minecraft/stats/Achievement;)Z", arg0)); }
IJsonSerializable StatFileWriter::func_150870_b(StatBase arg0) { return IJsonSerializable(*classes[className]->invokeMethod<jobject>(this->object, "func_150870_b", "(Lnet/minecraft/stats/StatBase;)Lnet/minecraft/util/IJsonSerializable;", arg0)); }
IJsonSerializable StatFileWriter::func_150872_a(StatBase arg0, IJsonSerializable arg1) { return IJsonSerializable(*classes[className]->invokeMethod<jobject>(this->object, "func_150872_a", "(Lnet/minecraft/stats/StatBase;Lnet/minecraft/util/IJsonSerializable;)Lnet/minecraft/util/IJsonSerializable;", arg0, arg1)); }
bool StatFileWriter::canUnlockAchievement(Achievement arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canUnlockAchievement", "(Lnet/minecraft/stats/Achievement;)Z", arg0)); }
void StatFileWriter::increaseStat(EntityPlayer arg0, StatBase arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "increaseStat", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/stats/StatBase;I)V", arg0, arg1, arg2)); }
void StatFileWriter::unlockAchievement(EntityPlayer arg0, StatBase arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "unlockAchievement", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/stats/StatBase;I)V", arg0, arg1, arg2)); }

Achievement Achievement::setSpecial() { return Achievement(*classes[className]->invokeMethod<jobject>(this->object, "setSpecial", "()Lnet/minecraft/stats/Achievement;")); }
bool Achievement::getSpecial() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getSpecial", "()Z")); }
Achievement Achievement::setStatStringFormatter(IStatStringFormat arg0) { return Achievement(*classes[className]->invokeMethod<jobject>(this->object, "setStatStringFormatter", "(Lnet/minecraft/stats/IStatStringFormat;)Lnet/minecraft/stats/Achievement;", arg0)); }
Achievement Achievement::initIndependentStat() { return Achievement(*classes[className]->invokeMethod<jobject>(this->object, "initIndependentStat", "()Lnet/minecraft/stats/Achievement;")); }
Achievement Achievement::registerStat() { return Achievement(*classes[className]->invokeMethod<jobject>(this->object, "registerStat", "()Lnet/minecraft/stats/Achievement;")); }
Achievement Achievement::func_150953_b(Class arg0) { return Achievement(*classes[className]->invokeMethod<jobject>(this->object, "func_150953_b", "(Ljava/lang/Class;)Lnet/minecraft/stats/Achievement;", arg0)); }
IChatComponent Achievement::getStatName() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getStatName", "()Lnet/minecraft/util/IChatComponent;")); }
bool Achievement::isAchievement() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAchievement", "()Z")); }
String Achievement::getDescription() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDescription", "()Ljava/lang/String;")); }



bool UserListOps::func_183026_b(GameProfile arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_183026_b", "(Lcom/mojang/authlib/GameProfile;)Z", arg0)); }
UserListEntry UserListOps::createEntry(JsonObject arg0) { return UserListEntry(*classes[className]->invokeMethod<jobject>(this->object, "createEntry", "(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/management/UserListEntry;", arg0)); }
String UserListOps::getObjectKey(GameProfile arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getObjectKey", "(Lcom/mojang/authlib/GameProfile;)Ljava/lang/String;", arg0)); }
GameProfile UserListOps::getGameProfileFromName(String arg0) { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getGameProfileFromName", "(Ljava/lang/String;)Lcom/mojang/authlib/GameProfile;", arg0)); }

bool JsonObject::has(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "has", "(Ljava/lang/String;)Z", arg0)); }
JsonObject JsonObject::deepCopy() { return JsonObject(*classes[className]->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom/google/gson/JsonObject;")); }
JsonObject JsonObject::getAsJsonObject(String arg0) { return JsonObject(*classes[className]->invokeMethod<jobject>(this->object, "getAsJsonObject", "(Ljava/lang/String;)Lcom/google/gson/JsonObject;", arg0)); }
JsonPrimitive JsonObject::getAsJsonPrimitive(String arg0) { return JsonPrimitive(*classes[className]->invokeMethod<jobject>(this->object, "getAsJsonPrimitive", "(Ljava/lang/String;)Lcom/google/gson/JsonPrimitive;", arg0)); }
void JsonObject::addProperty(String arg0, Number arg1) { (classes[className]->invokeMethod<void>(this->object, "addProperty", "(Ljava/lang/String;Ljava/lang/Number;)V", arg0, arg1)); }
void JsonObject::addProperty(String arg0, Character arg1) { (classes[className]->invokeMethod<void>(this->object, "addProperty", "(Ljava/lang/String;Ljava/lang/Character;)V", arg0, arg1)); }
void JsonObject::addProperty(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "addProperty", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
void JsonObject::addProperty(String arg0, Boolean arg1) { (classes[className]->invokeMethod<void>(this->object, "addProperty", "(Ljava/lang/String;Ljava/lang/Boolean;)V", arg0, arg1)); }
JsonArray JsonObject::getAsJsonArray(String arg0) { return JsonArray(*classes[className]->invokeMethod<jobject>(this->object, "getAsJsonArray", "(Ljava/lang/String;)Lcom/google/gson/JsonArray;", arg0)); }
JsonElement JsonObject::createJsonElement(Object arg0) { return JsonElement(*classes[className]->invokeMethod<jobject>(this->object, "createJsonElement", "(Ljava/lang/Object;)Lcom/google/gson/JsonElement;", arg0)); }
void JsonObject::add(String arg0, JsonElement arg1) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/lang/String;Lcom/google/gson/JsonElement;)V", arg0, arg1)); }
JsonElement JsonObject::remove(String arg0) { return JsonElement(*classes[className]->invokeMethod<jobject>(this->object, "remove", "(Ljava/lang/String;)Lcom/google/gson/JsonElement;", arg0)); }
JsonElement JsonObject::get(String arg0) { return JsonElement(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Ljava/lang/String;)Lcom/google/gson/JsonElement;", arg0)); }
bool JsonObject::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int JsonObject::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Set JsonObject::entrySet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "entrySet", "()Ljava/util/Set;")); }

bool JsonPrimitive::isBoolean() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBoolean", "()Z")); }
bool JsonPrimitive::isString() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isString", "()Z")); }
bool JsonPrimitive::isNumber() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNumber", "()Z")); }
JsonPrimitive JsonPrimitive::deepCopy() { return JsonPrimitive(*classes[className]->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom/google/gson/JsonPrimitive;")); }
float JsonPrimitive::getAsFloat() { return float(*classes[className]->invokeMethod<float>(this->object, "getAsFloat", "()F")); }
byte JsonPrimitive::getAsByte() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getAsByte", "()B")); }
short JsonPrimitive::getAsShort() { return short(*classes[className]->invokeMethod<short>(this->object, "getAsShort", "()S")); }
Boolean JsonPrimitive::getAsBooleanWrapper() { return Boolean(*classes[className]->invokeMethod<jobject>(this->object, "getAsBooleanWrapper", "()Ljava/lang/Boolean;")); }
Number JsonPrimitive::getAsNumber() { return Number(*classes[className]->invokeMethod<jobject>(this->object, "getAsNumber", "()Ljava/lang/Number;")); }
char JsonPrimitive::getAsCharacter() { return char(*classes[className]->invokeMethod<char>(this->object, "getAsCharacter", "()C")); }
BigDecimal JsonPrimitive::getAsBigDecimal() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "getAsBigDecimal", "()Ljava/math/BigDecimal;")); }
BigInteger JsonPrimitive::getAsBigInteger() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getAsBigInteger", "()Ljava/math/BigInteger;")); }
bool JsonPrimitive::getAsBoolean() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAsBoolean", "()Z")); }
String JsonPrimitive::getAsString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAsString", "()Ljava/lang/String;")); }
bool JsonPrimitive::isPrimitiveOrString(Object arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isPrimitiveOrString", "(Ljava/lang/Object;)Z", arg0)); }
double JsonPrimitive::getAsDouble() { return double(*classes[className]->invokeMethod<double>(this->object, "getAsDouble", "()D")); }
int JsonPrimitive::getAsInt() { return int(*classes[className]->invokeMethod<int>(this->object, "getAsInt", "()I")); }
long JsonPrimitive::getAsLong() { return long(*classes[className]->invokeMethod<long>(this->object, "getAsLong", "()J")); }
bool JsonPrimitive::isIntegral(JsonPrimitive arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isIntegral", "(Lcom/google/gson/JsonPrimitive;)Z", arg0)); }
bool JsonPrimitive::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int JsonPrimitive::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void JsonPrimitive::setValue(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "setValue", "(Ljava/lang/Object;)V", arg0)); }

JsonElement JsonElement::deepCopy() { return JsonElement(*classes[className]->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom/google/gson/JsonElement;")); }
bool JsonElement::isJsonNull() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isJsonNull", "()Z")); }
float JsonElement::getAsFloat() { return float(*classes[className]->invokeMethod<float>(this->object, "getAsFloat", "()F")); }
byte JsonElement::getAsByte() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getAsByte", "()B")); }
short JsonElement::getAsShort() { return short(*classes[className]->invokeMethod<short>(this->object, "getAsShort", "()S")); }
bool JsonElement::isJsonObject() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isJsonObject", "()Z")); }
JsonObject JsonElement::getAsJsonObject() { return JsonObject(*classes[className]->invokeMethod<jobject>(this->object, "getAsJsonObject", "()Lcom/google/gson/JsonObject;")); }
bool JsonElement::isJsonPrimitive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isJsonPrimitive", "()Z")); }
JsonPrimitive JsonElement::getAsJsonPrimitive() { return JsonPrimitive(*classes[className]->invokeMethod<jobject>(this->object, "getAsJsonPrimitive", "()Lcom/google/gson/JsonPrimitive;")); }
bool JsonElement::isJsonArray() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isJsonArray", "()Z")); }
JsonArray JsonElement::getAsJsonArray() { return JsonArray(*classes[className]->invokeMethod<jobject>(this->object, "getAsJsonArray", "()Lcom/google/gson/JsonArray;")); }
JsonNull JsonElement::getAsJsonNull() { return JsonNull(*classes[className]->invokeMethod<jobject>(this->object, "getAsJsonNull", "()Lcom/google/gson/JsonNull;")); }
Boolean JsonElement::getAsBooleanWrapper() { return Boolean(*classes[className]->invokeMethod<jobject>(this->object, "getAsBooleanWrapper", "()Ljava/lang/Boolean;")); }
Number JsonElement::getAsNumber() { return Number(*classes[className]->invokeMethod<jobject>(this->object, "getAsNumber", "()Ljava/lang/Number;")); }
char JsonElement::getAsCharacter() { return char(*classes[className]->invokeMethod<char>(this->object, "getAsCharacter", "()C")); }
BigDecimal JsonElement::getAsBigDecimal() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "getAsBigDecimal", "()Ljava/math/BigDecimal;")); }
BigInteger JsonElement::getAsBigInteger() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getAsBigInteger", "()Ljava/math/BigInteger;")); }
bool JsonElement::getAsBoolean() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAsBoolean", "()Z")); }
String JsonElement::getAsString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAsString", "()Ljava/lang/String;")); }
double JsonElement::getAsDouble() { return double(*classes[className]->invokeMethod<double>(this->object, "getAsDouble", "()D")); }
int JsonElement::getAsInt() { return int(*classes[className]->invokeMethod<int>(this->object, "getAsInt", "()I")); }
long JsonElement::getAsLong() { return long(*classes[className]->invokeMethod<long>(this->object, "getAsLong", "()J")); }
String JsonElement::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

JsonArray JsonArray::deepCopy() { return JsonArray(*classes[className]->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom/google/gson/JsonArray;")); }
float JsonArray::getAsFloat() { return float(*classes[className]->invokeMethod<float>(this->object, "getAsFloat", "()F")); }
byte JsonArray::getAsByte() { return byte(*classes[className]->invokeMethod<byte>(this->object, "getAsByte", "()B")); }
short JsonArray::getAsShort() { return short(*classes[className]->invokeMethod<short>(this->object, "getAsShort", "()S")); }
Number JsonArray::getAsNumber() { return Number(*classes[className]->invokeMethod<jobject>(this->object, "getAsNumber", "()Ljava/lang/Number;")); }
char JsonArray::getAsCharacter() { return char(*classes[className]->invokeMethod<char>(this->object, "getAsCharacter", "()C")); }
BigDecimal JsonArray::getAsBigDecimal() { return BigDecimal(*classes[className]->invokeMethod<jobject>(this->object, "getAsBigDecimal", "()Ljava/math/BigDecimal;")); }
BigInteger JsonArray::getAsBigInteger() { return BigInteger(*classes[className]->invokeMethod<jobject>(this->object, "getAsBigInteger", "()Ljava/math/BigInteger;")); }
bool JsonArray::getAsBoolean() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAsBoolean", "()Z")); }
String JsonArray::getAsString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAsString", "()Ljava/lang/String;")); }
double JsonArray::getAsDouble() { return double(*classes[className]->invokeMethod<double>(this->object, "getAsDouble", "()D")); }
int JsonArray::getAsInt() { return int(*classes[className]->invokeMethod<int>(this->object, "getAsInt", "()I")); }
long JsonArray::getAsLong() { return long(*classes[className]->invokeMethod<long>(this->object, "getAsLong", "()J")); }
void JsonArray::add(JsonElement arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Lcom/google/gson/JsonElement;)V", arg0)); }
JsonElement JsonArray::get(int arg0) { return JsonElement(*classes[className]->invokeMethod<jobject>(this->object, "get", "(I)Lcom/google/gson/JsonElement;", arg0)); }
bool JsonArray::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int JsonArray::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int JsonArray::size() { return int(*classes[className]->invokeMethod<int>(this->object, "size", "()I")); }
void JsonArray::addAll(JsonArray arg0) { (classes[className]->invokeMethod<void>(this->object, "addAll", "(Lcom/google/gson/JsonArray;)V", arg0)); }

JsonNull JsonNull::deepCopy() { return JsonNull(*classes[className]->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom/google/gson/JsonNull;")); }
bool JsonNull::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int JsonNull::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

bool UserListEntry::hasBanExpired() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasBanExpired", "()Z")); }
void UserListEntry::onSerialization(JsonObject arg0) { (classes[className]->invokeMethod<void>(this->object, "onSerialization", "(Lcom/google/gson/JsonObject;)V", arg0)); }
Object UserListEntry::getValue() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getValue", "()Ljava/lang/Object;")); }

Map UserList::getValues() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getValues", "()Ljava/util/Map;")); }
bool UserList::hasEntry(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasEntry", "(Ljava/lang/Object;)Z", arg0)); }
void UserList::setLanServer(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setLanServer", "(Z)V", arg0)); }
UserListEntry UserList::createEntry(JsonObject arg0) { return UserListEntry(*classes[className]->invokeMethod<jobject>(this->object, "createEntry", "(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/management/UserListEntry;", arg0)); }
String UserList::getObjectKey(Object arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getObjectKey", "(Ljava/lang/Object;)Ljava/lang/String;", arg0)); }
bool UserList::isLanServer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLanServer", "()Z")); }
void UserList::writeChanges() { (classes[className]->invokeMethod<void>(this->object, "writeChanges", "()V")); }
void UserList::removeExpired() { (classes[className]->invokeMethod<void>(this->object, "removeExpired", "()V")); }
UserListEntry UserList::getEntry(Object arg0) { return UserListEntry(*classes[className]->invokeMethod<jobject>(this->object, "getEntry", "(Ljava/lang/Object;)Lnet/minecraft/server/management/UserListEntry;", arg0)); }
void UserList::removeEntry(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "removeEntry", "(Ljava/lang/Object;)V", arg0)); }
void UserList::addEntry(UserListEntry arg0) { (classes[className]->invokeMethod<void>(this->object, "addEntry", "(Lnet/minecraft/server/management/UserListEntry;)V", arg0)); }

void ServerScoreboard::func_96551_b() { (classes[className]->invokeMethod<void>(this->object, "func_96551_b", "()V")); }
int ServerScoreboard::func_96552_h(ScoreObjective arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "func_96552_h", "(Lnet/minecraft/scoreboard/ScoreObjective;)I", arg0)); }
void ServerScoreboard::getPlayerIterator(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "getPlayerIterator", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
void ServerScoreboard::func_96549_e(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96549_e", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
List ServerScoreboard::func_96550_d(ScoreObjective arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "func_96550_d", "(Lnet/minecraft/scoreboard/ScoreObjective;)Ljava/util/List;", arg0)); }
List ServerScoreboard::func_96548_f(ScoreObjective arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "func_96548_f", "(Lnet/minecraft/scoreboard/ScoreObjective;)Ljava/util/List;", arg0)); }
void ServerScoreboard::onScoreObjectiveAdded(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "onScoreObjectiveAdded", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
void ServerScoreboard::func_96516_a(String arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96516_a", "(Ljava/lang/String;)V", arg0)); }
void ServerScoreboard::func_178820_a(String arg0, ScoreObjective arg1) { (classes[className]->invokeMethod<void>(this->object, "func_178820_a", "(Ljava/lang/String;Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0, arg1)); }
void ServerScoreboard::func_96533_c(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96533_c", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
void ServerScoreboard::broadcastTeamCreated(ScorePlayerTeam arg0) { (classes[className]->invokeMethod<void>(this->object, "broadcastTeamCreated", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0)); }
void ServerScoreboard::func_96513_c(ScorePlayerTeam arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96513_c", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0)); }
void ServerScoreboard::func_96532_b(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96532_b", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
void ServerScoreboard::func_96536_a(Score arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96536_a", "(Lnet/minecraft/scoreboard/Score;)V", arg0)); }
void ServerScoreboard::sendTeamUpdate(ScorePlayerTeam arg0) { (classes[className]->invokeMethod<void>(this->object, "sendTeamUpdate", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0)); }
void ServerScoreboard::func_96547_a(ScoreboardSaveData arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96547_a", "(Lnet/minecraft/scoreboard/ScoreboardSaveData;)V", arg0)); }
void ServerScoreboard::setObjectiveInDisplaySlot(int arg0, ScoreObjective arg1) { (classes[className]->invokeMethod<void>(this->object, "setObjectiveInDisplaySlot", "(ILnet/minecraft/scoreboard/ScoreObjective;)V", arg0, arg1)); }
bool ServerScoreboard::addPlayerToTeam(String arg0, String arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "addPlayerToTeam", "(Ljava/lang/String;Ljava/lang/String;)Z", arg0, arg1)); }
void ServerScoreboard::removePlayerFromTeam(String arg0, ScorePlayerTeam arg1) { (classes[className]->invokeMethod<void>(this->object, "removePlayerFromTeam", "(Ljava/lang/String;Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0, arg1)); }

IScoreObjectiveCriteria ScoreObjective::getCriteria() { return IScoreObjectiveCriteria(*classes[className]->invokeMethod<jobject>(this->object, "getCriteria", "()Lnet/minecraft/scoreboard/IScoreObjectiveCriteria;")); }
void ScoreObjective::setDisplayName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setDisplayName", "(Ljava/lang/String;)V", arg0)); }
void ScoreObjective::setRenderType(IScoreObjectiveCriteria_EnumRenderType arg0) { (classes[className]->invokeMethod<void>(this->object, "setRenderType", "(Lnet/minecraft/scoreboard/IScoreObjectiveCriteria$EnumRenderType;)V", arg0)); }
Scoreboard ScoreObjective::getScoreboard() { return Scoreboard(*classes[className]->invokeMethod<jobject>(this->object, "getScoreboard", "()Lnet/minecraft/scoreboard/Scoreboard;")); }
IScoreObjectiveCriteria_EnumRenderType ScoreObjective::getRenderType() { return IScoreObjectiveCriteria_EnumRenderType(*classes[className]->invokeMethod<jobject>(this->object, "getRenderType", "()Lnet/minecraft/scoreboard/IScoreObjectiveCriteria$EnumRenderType;")); }
String ScoreObjective::getDisplayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava/lang/String;")); }
String ScoreObjective::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }

IScoreObjectiveCriteria_EnumRenderType IScoreObjectiveCriteria_EnumRenderType::func_178795_a(String arg0) { return IScoreObjectiveCriteria_EnumRenderType(*classes[className]->invokeStaticMethod<jobject>("func_178795_a", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/IScoreObjectiveCriteria$EnumRenderType;", arg0)); }
String IScoreObjectiveCriteria_EnumRenderType::func_178796_a() { return String(*classes[className]->invokeMethod<jobject>(this->object, "func_178796_a", "()Ljava/lang/String;")); }
IScoreObjectiveCriteria_EnumRenderType IScoreObjectiveCriteria_EnumRenderType::valueOf(String arg0) { return IScoreObjectiveCriteria_EnumRenderType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/IScoreObjectiveCriteria$EnumRenderType;", arg0)); }

ScorePlayerTeam Scoreboard::createTeam(String arg0) { return ScorePlayerTeam(*classes[className]->invokeMethod<jobject>(this->object, "createTeam", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/ScorePlayerTeam;", arg0)); }
void Scoreboard::removeTeam(ScorePlayerTeam arg0) { (classes[className]->invokeMethod<void>(this->object, "removeTeam", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0)); }
ScorePlayerTeam Scoreboard::getTeam(String arg0) { return ScorePlayerTeam(*classes[className]->invokeMethod<jobject>(this->object, "getTeam", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/ScorePlayerTeam;", arg0)); }
Collection Scoreboard::getScores() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getScores", "()Ljava/util/Collection;")); }
Collection Scoreboard::getTeams() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getTeams", "()Ljava/util/Collection;")); }
void Scoreboard::onScoreObjectiveAdded(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "onScoreObjectiveAdded", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
bool Scoreboard::entityHasObjective(String arg0, ScoreObjective arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "entityHasObjective", "(Ljava/lang/String;Lnet/minecraft/scoreboard/ScoreObjective;)Z", arg0, arg1)); }
Collection Scoreboard::getSortedScores(ScoreObjective arg0) { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getSortedScores", "(Lnet/minecraft/scoreboard/ScoreObjective;)Ljava/util/Collection;", arg0)); }
Collection Scoreboard::getScoreObjectives() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getScoreObjectives", "()Ljava/util/Collection;")); }
Collection Scoreboard::getObjectiveNames() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getObjectiveNames", "()Ljava/util/Collection;")); }
void Scoreboard::func_96516_a(String arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96516_a", "(Ljava/lang/String;)V", arg0)); }
void Scoreboard::func_178820_a(String arg0, ScoreObjective arg1) { (classes[className]->invokeMethod<void>(this->object, "func_178820_a", "(Ljava/lang/String;Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0, arg1)); }
Map Scoreboard::getObjectivesForEntity(String arg0) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getObjectivesForEntity", "(Ljava/lang/String;)Ljava/util/Map;", arg0)); }
ScoreObjective Scoreboard::getObjectiveInDisplaySlot(int arg0) { return ScoreObjective(*classes[className]->invokeMethod<jobject>(this->object, "getObjectiveInDisplaySlot", "(I)Lnet/minecraft/scoreboard/ScoreObjective;", arg0)); }
void Scoreboard::func_96533_c(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96533_c", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
void Scoreboard::broadcastTeamCreated(ScorePlayerTeam arg0) { (classes[className]->invokeMethod<void>(this->object, "broadcastTeamCreated", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0)); }
void Scoreboard::func_96513_c(ScorePlayerTeam arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96513_c", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0)); }
bool Scoreboard::removePlayerFromTeams(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "removePlayerFromTeams", "(Ljava/lang/String;)Z", arg0)); }
Collection Scoreboard::getTeamNames() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getTeamNames", "()Ljava/util/Collection;")); }
void Scoreboard::func_96532_b(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96532_b", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
void Scoreboard::func_96536_a(Score arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96536_a", "(Lnet/minecraft/scoreboard/Score;)V", arg0)); }
void Scoreboard::sendTeamUpdate(ScorePlayerTeam arg0) { (classes[className]->invokeMethod<void>(this->object, "sendTeamUpdate", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0)); }
String Scoreboard::getObjectiveDisplaySlot(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getObjectiveDisplaySlot", "(I)Ljava/lang/String;", arg0)); }
void Scoreboard::func_181140_a(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181140_a", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
ScoreObjective Scoreboard::addScoreObjective(String arg0, IScoreObjectiveCriteria arg1) { return ScoreObjective(*classes[className]->invokeMethod<jobject>(this->object, "addScoreObjective", "(Ljava/lang/String;Lnet/minecraft/scoreboard/IScoreObjectiveCriteria;)Lnet/minecraft/scoreboard/ScoreObjective;", arg0, arg1)); }
ScoreObjective Scoreboard::getObjective(String arg0) { return ScoreObjective(*classes[className]->invokeMethod<jobject>(this->object, "getObjective", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/ScoreObjective;", arg0)); }
void Scoreboard::removeObjective(ScoreObjective arg0) { (classes[className]->invokeMethod<void>(this->object, "removeObjective", "(Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0)); }
void Scoreboard::removeObjectiveFromEntity(String arg0, ScoreObjective arg1) { (classes[className]->invokeMethod<void>(this->object, "removeObjectiveFromEntity", "(Ljava/lang/String;Lnet/minecraft/scoreboard/ScoreObjective;)V", arg0, arg1)); }
void Scoreboard::setObjectiveInDisplaySlot(int arg0, ScoreObjective arg1) { (classes[className]->invokeMethod<void>(this->object, "setObjectiveInDisplaySlot", "(ILnet/minecraft/scoreboard/ScoreObjective;)V", arg0, arg1)); }
bool Scoreboard::addPlayerToTeam(String arg0, String arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "addPlayerToTeam", "(Ljava/lang/String;Ljava/lang/String;)Z", arg0, arg1)); }
void Scoreboard::removePlayerFromTeam(String arg0, ScorePlayerTeam arg1) { (classes[className]->invokeMethod<void>(this->object, "removePlayerFromTeam", "(Ljava/lang/String;Lnet/minecraft/scoreboard/ScorePlayerTeam;)V", arg0, arg1)); }
Collection Scoreboard::getObjectivesFromCriteria(IScoreObjectiveCriteria arg0) { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getObjectivesFromCriteria", "(Lnet/minecraft/scoreboard/IScoreObjectiveCriteria;)Ljava/util/Collection;", arg0)); }
Score Scoreboard::getValueFromObjective(String arg0, ScoreObjective arg1) { return Score(*classes[className]->invokeMethod<jobject>(this->object, "getValueFromObjective", "(Ljava/lang/String;Lnet/minecraft/scoreboard/ScoreObjective;)Lnet/minecraft/scoreboard/Score;", arg0, arg1)); }
ScorePlayerTeam Scoreboard::getPlayersTeam(String arg0) { return ScorePlayerTeam(*classes[className]->invokeMethod<jobject>(this->object, "getPlayersTeam", "(Ljava/lang/String;)Lnet/minecraft/scoreboard/ScorePlayerTeam;", arg0)); }
int Scoreboard::getObjectiveDisplaySlotNumber(String arg0) { return int(*classes[className]->invokeStaticMethod<int>("getObjectiveDisplaySlotNumber", "(Ljava/lang/String;)I", arg0)); }

String ScorePlayerTeam::getRegisteredName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getRegisteredName", "()Ljava/lang/String;")); }
Collection ScorePlayerTeam::getMembershipCollection() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getMembershipCollection", "()Ljava/util/Collection;")); }
Team_EnumVisible ScorePlayerTeam::getNameTagVisibility() { return Team_EnumVisible(*classes[className]->invokeMethod<jobject>(this->object, "getNameTagVisibility", "()Lnet/minecraft/scoreboard/Team$EnumVisible;")); }
Team_EnumVisible ScorePlayerTeam::getDeathMessageVisibility() { return Team_EnumVisible(*classes[className]->invokeMethod<jobject>(this->object, "getDeathMessageVisibility", "()Lnet/minecraft/scoreboard/Team$EnumVisible;")); }
String ScorePlayerTeam::getTeamName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTeamName", "()Ljava/lang/String;")); }
String ScorePlayerTeam::getColorPrefix() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getColorPrefix", "()Ljava/lang/String;")); }
String ScorePlayerTeam::getColorSuffix() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getColorSuffix", "()Ljava/lang/String;")); }
void ScorePlayerTeam::setAllowFriendlyFire(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAllowFriendlyFire", "(Z)V", arg0)); }
void ScorePlayerTeam::setDeathMessageVisibility(Team_EnumVisible arg0) { (classes[className]->invokeMethod<void>(this->object, "setDeathMessageVisibility", "(Lnet/minecraft/scoreboard/Team$EnumVisible;)V", arg0)); }
int ScorePlayerTeam::func_98299_i() { return int(*classes[className]->invokeMethod<int>(this->object, "func_98299_i", "()I")); }
void ScorePlayerTeam::setTeamName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setTeamName", "(Ljava/lang/String;)V", arg0)); }
void ScorePlayerTeam::setNamePrefix(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setNamePrefix", "(Ljava/lang/String;)V", arg0)); }
void ScorePlayerTeam::setNameSuffix(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setNameSuffix", "(Ljava/lang/String;)V", arg0)); }
void ScorePlayerTeam::setChatFormat(EnumChatFormatting arg0) { (classes[className]->invokeMethod<void>(this->object, "setChatFormat", "(Lnet/minecraft/util/EnumChatFormatting;)V", arg0)); }
void ScorePlayerTeam::func_98298_a(int arg0) { (classes[className]->invokeMethod<void>(this->object, "func_98298_a", "(I)V", arg0)); }
void ScorePlayerTeam::setNameTagVisibility(Team_EnumVisible arg0) { (classes[className]->invokeMethod<void>(this->object, "setNameTagVisibility", "(Lnet/minecraft/scoreboard/Team$EnumVisible;)V", arg0)); }
String ScorePlayerTeam::formatString(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "formatString", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
EnumChatFormatting ScorePlayerTeam::getChatFormat() { return EnumChatFormatting(*classes[className]->invokeMethod<jobject>(this->object, "getChatFormat", "()Lnet/minecraft/util/EnumChatFormatting;")); }
bool ScorePlayerTeam::getAllowFriendlyFire() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getAllowFriendlyFire", "()Z")); }
String ScorePlayerTeam::formatPlayerName(Team arg0, String arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("formatPlayerName", "(Lnet/minecraft/scoreboard/Team;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
void ScorePlayerTeam::setSeeFriendlyInvisiblesEnabled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSeeFriendlyInvisiblesEnabled", "(Z)V", arg0)); }
bool ScorePlayerTeam::getSeeFriendlyInvisiblesEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getSeeFriendlyInvisiblesEnabled", "()Z")); }

bool EnumChatFormatting::isColor() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isColor", "()Z")); }
String EnumChatFormatting::getFriendlyName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFriendlyName", "()Ljava/lang/String;")); }
EnumChatFormatting EnumChatFormatting::getValueByName(String arg0) { return EnumChatFormatting(*classes[className]->invokeStaticMethod<jobject>("getValueByName", "(Ljava/lang/String;)Lnet/minecraft/util/EnumChatFormatting;", arg0)); }
EnumChatFormatting EnumChatFormatting::func_175744_a(int arg0) { return EnumChatFormatting(*classes[className]->invokeStaticMethod<jobject>("func_175744_a", "(I)Lnet/minecraft/util/EnumChatFormatting;", arg0)); }
int EnumChatFormatting::getColorIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getColorIndex", "()I")); }
String EnumChatFormatting::func_175745_c(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("func_175745_c", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool EnumChatFormatting::isFancyStyling() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFancyStyling", "()Z")); }
Collection EnumChatFormatting::getValidValues(bool arg0, bool arg1) { return Collection(*classes[className]->invokeStaticMethod<jobject>("getValidValues", "(ZZ)Ljava/util/Collection;", arg0, arg1)); }
String EnumChatFormatting::getTextWithoutFormattingCodes(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getTextWithoutFormattingCodes", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String EnumChatFormatting::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
EnumChatFormatting EnumChatFormatting::valueOf(String arg0) { return EnumChatFormatting(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/EnumChatFormatting;", arg0)); }

void Score::setLocked(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocked", "(Z)V", arg0)); }
int Score::getScorePoints() { return int(*classes[className]->invokeMethod<int>(this->object, "getScorePoints", "()I")); }
void Score::func_96651_a(List arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96651_a", "(Ljava/util/List;)V", arg0)); }
void Score::increseScore(int arg0) { (classes[className]->invokeMethod<void>(this->object, "increseScore", "(I)V", arg0)); }
ScoreObjective Score::getObjective() { return ScoreObjective(*classes[className]->invokeMethod<jobject>(this->object, "getObjective", "()Lnet/minecraft/scoreboard/ScoreObjective;")); }
String Score::getPlayerName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerName", "()Ljava/lang/String;")); }
void Score::setScorePoints(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setScorePoints", "(I)V", arg0)); }
void Score::func_96648_a() { (classes[className]->invokeMethod<void>(this->object, "func_96648_a", "()V")); }
void Score::decreaseScore(int arg0) { (classes[className]->invokeMethod<void>(this->object, "decreaseScore", "(I)V", arg0)); }
Scoreboard Score::getScoreScoreboard() { return Scoreboard(*classes[className]->invokeMethod<jobject>(this->object, "getScoreScoreboard", "()Lnet/minecraft/scoreboard/Scoreboard;")); }
bool Score::isLocked() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLocked", "()Z")); }

void ScoreboardSaveData::readScores(NBTTagList arg0) { (classes[className]->invokeMethod<void>(this->object, "readScores", "(Lnet/minecraft/nbt/NBTTagList;)V", arg0)); }
void ScoreboardSaveData::readTeams(NBTTagList arg0) { (classes[className]->invokeMethod<void>(this->object, "readTeams", "(Lnet/minecraft/nbt/NBTTagList;)V", arg0)); }
void ScoreboardSaveData::writeToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void ScoreboardSaveData::readObjectives(NBTTagList arg0) { (classes[className]->invokeMethod<void>(this->object, "readObjectives", "(Lnet/minecraft/nbt/NBTTagList;)V", arg0)); }
void ScoreboardSaveData::readDisplayConfig(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readDisplayConfig", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void ScoreboardSaveData::func_96502_a(ScorePlayerTeam arg0, NBTTagList arg1) { (classes[className]->invokeMethod<void>(this->object, "func_96502_a", "(Lnet/minecraft/scoreboard/ScorePlayerTeam;Lnet/minecraft/nbt/NBTTagList;)V", arg0, arg1)); }
NBTTagList ScoreboardSaveData::objectivesToNbt() { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "objectivesToNbt", "()Lnet/minecraft/nbt/NBTTagList;")); }
NBTTagList ScoreboardSaveData::scoresToNbt() { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "scoresToNbt", "()Lnet/minecraft/nbt/NBTTagList;")); }
NBTTagList ScoreboardSaveData::func_96496_a() { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "func_96496_a", "()Lnet/minecraft/nbt/NBTTagList;")); }
void ScoreboardSaveData::func_96497_d(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "func_96497_d", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void ScoreboardSaveData::setScoreboard(Scoreboard arg0) { (classes[className]->invokeMethod<void>(this->object, "setScoreboard", "(Lnet/minecraft/scoreboard/Scoreboard;)V", arg0)); }
void ScoreboardSaveData::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }

void WorldSavedData::markDirty() { (classes[className]->invokeMethod<void>(this->object, "markDirty", "()V")); }
void WorldSavedData::writeToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void WorldSavedData::setDirty(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDirty", "(Z)V", arg0)); }
void WorldSavedData::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool WorldSavedData::isDirty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirty", "()Z")); }

bool UserListBans::isBanned(GameProfile arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBanned", "(Lcom/mojang/authlib/GameProfile;)Z", arg0)); }
UserListEntry UserListBans::createEntry(JsonObject arg0) { return UserListEntry(*classes[className]->invokeMethod<jobject>(this->object, "createEntry", "(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/management/UserListEntry;", arg0)); }
String UserListBans::getObjectKey(GameProfile arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getObjectKey", "(Lcom/mojang/authlib/GameProfile;)Ljava/lang/String;", arg0)); }
GameProfile UserListBans::isUsernameBanned(String arg0) { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "isUsernameBanned", "(Ljava/lang/String;)Lcom/mojang/authlib/GameProfile;", arg0)); }

bool BanList::isBanned(SocketAddress arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBanned", "(Ljava/net/SocketAddress;)Z", arg0)); }
IPBanEntry BanList::getBanEntry(SocketAddress arg0) { return IPBanEntry(*classes[className]->invokeMethod<jobject>(this->object, "getBanEntry", "(Ljava/net/SocketAddress;)Lnet/minecraft/server/management/IPBanEntry;", arg0)); }
UserListEntry BanList::createEntry(JsonObject arg0) { return UserListEntry(*classes[className]->invokeMethod<jobject>(this->object, "createEntry", "(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/management/UserListEntry;", arg0)); }
String BanList::addressToString(SocketAddress arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "addressToString", "(Ljava/net/SocketAddress;)Ljava/lang/String;", arg0)); }

void IPBanEntry::onSerialization(JsonObject arg0) { (classes[className]->invokeMethod<void>(this->object, "onSerialization", "(Lcom/google/gson/JsonObject;)V", arg0)); }
String IPBanEntry::getIPFromJson(JsonObject arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getIPFromJson", "(Lcom/google/gson/JsonObject;)Ljava/lang/String;", arg0)); }

String BanEntry::getBanReason() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getBanReason", "()Ljava/lang/String;")); }
Date BanEntry::getBanEndDate() { return Date(*classes[className]->invokeMethod<jobject>(this->object, "getBanEndDate", "()Ljava/util/Date;")); }
bool BanEntry::hasBanExpired() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasBanExpired", "()Z")); }
void BanEntry::onSerialization(JsonObject arg0) { (classes[className]->invokeMethod<void>(this->object, "onSerialization", "(Lcom/google/gson/JsonObject;)V", arg0)); }

UserListEntry UserListWhitelist::createEntry(JsonObject arg0) { return UserListEntry(*classes[className]->invokeMethod<jobject>(this->object, "createEntry", "(Lcom/google/gson/JsonObject;)Lnet/minecraft/server/management/UserListEntry;", arg0)); }
String UserListWhitelist::getObjectKey(GameProfile arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getObjectKey", "(Lcom/mojang/authlib/GameProfile;)Ljava/lang/String;", arg0)); }
GameProfile UserListWhitelist::func_152706_a(String arg0) { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "func_152706_a", "(Ljava/lang/String;)Lcom/mojang/authlib/GameProfile;", arg0)); }


void NetworkManager::sendPacket(Packet arg0) { (classes[className]->invokeMethod<void>(this->object, "sendPacket", "(Lnet/minecraft/network/Packet;)V", arg0)); }
void NetworkManager::sendPacket(Packet arg0, GenericFutureListener arg1, GenericFutureListener_interface arg2) { (classes[className]->invokeMethod<void>(this->object, "sendPacket", "(Lnet/minecraft/network/Packet;Lio/netty/util/concurrent/GenericFutureListener;[Lio/netty/util/concurrent/GenericFutureListener;)V", arg0, arg1, arg2)); }
INetHandler NetworkManager::getNetHandler() { return INetHandler(*classes[className]->invokeMethod<jobject>(this->object, "getNetHandler", "()Lnet/minecraft/network/INetHandler;")); }
void NetworkManager::processReceivedPackets() { (classes[className]->invokeMethod<void>(this->object, "processReceivedPackets", "()V")); }
NetworkManager NetworkManager::provideLocalClient(SocketAddress arg0) { return NetworkManager(*classes[className]->invokeStaticMethod<jobject>("provideLocalClient", "(Ljava/net/SocketAddress;)Lnet/minecraft/network/NetworkManager;", arg0)); }
void NetworkManager::setNetHandler(INetHandler arg0) { (classes[className]->invokeMethod<void>(this->object, "setNetHandler", "(Lnet/minecraft/network/INetHandler;)V", arg0)); }
SocketAddress NetworkManager::getRemoteAddress() { return SocketAddress(*classes[className]->invokeMethod<jobject>(this->object, "getRemoteAddress", "()Ljava/net/SocketAddress;")); }
bool NetworkManager::isLocalChannel() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLocalChannel", "()Z")); }
void NetworkManager::setCompressionTreshold(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setCompressionTreshold", "(I)V", arg0)); }
bool NetworkManager::isChannelOpen() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isChannelOpen", "()Z")); }
void NetworkManager::checkDisconnected() { (classes[className]->invokeMethod<void>(this->object, "checkDisconnected", "()V")); }
void NetworkManager::closeChannel(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "closeChannel", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
bool NetworkManager::hasNoChannel() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasNoChannel", "()Z")); }
void NetworkManager::disableAutoRead() { (classes[className]->invokeMethod<void>(this->object, "disableAutoRead", "()V")); }
void NetworkManager::setConnectionState(EnumConnectionState arg0) { (classes[className]->invokeMethod<void>(this->object, "setConnectionState", "(Lnet/minecraft/network/EnumConnectionState;)V", arg0)); }
void NetworkManager::channelRead0(ChannelHandlerContext arg0, Packet arg1) { (classes[className]->invokeMethod<void>(this->object, "channelRead0", "(Lio/netty/channel/ChannelHandlerContext;Lnet/minecraft/network/Packet;)V", arg0, arg1)); }
void NetworkManager::flushOutboundQueue() { (classes[className]->invokeMethod<void>(this->object, "flushOutboundQueue", "()V")); }
void NetworkManager::dispatchPacket(Packet arg0, GenericFutureListener_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "dispatchPacket", "(Lnet/minecraft/network/Packet;[Lio/netty/util/concurrent/GenericFutureListener;)V", arg0, arg1)); }
NetworkManager NetworkManager::func_181124_a(InetAddress arg0, int arg1, bool arg2) { return NetworkManager(*classes[className]->invokeStaticMethod<jobject>("func_181124_a", "(Ljava/net/InetAddress;IZ)Lnet/minecraft/network/NetworkManager;", arg0, arg1, arg2)); }
void NetworkManager::enableEncryption(SecretKey arg0) { (classes[className]->invokeMethod<void>(this->object, "enableEncryption", "(Ljavax/crypto/SecretKey;)V", arg0)); }
bool NetworkManager::getIsencrypted() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsencrypted", "()Z")); }
IChatComponent NetworkManager::getExitMessage() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getExitMessage", "()Lnet/minecraft/util/IChatComponent;")); }




Packet EnumConnectionState::getPacket(EnumPacketDirection arg0, int arg1) { return Packet(*classes[className]->invokeMethod<jobject>(this->object, "getPacket", "(Lnet/minecraft/network/EnumPacketDirection;I)Lnet/minecraft/network/Packet;", arg0, arg1)); }
EnumConnectionState EnumConnectionState::getById(int arg0) { return EnumConnectionState(*classes[className]->invokeStaticMethod<jobject>("getById", "(I)Lnet/minecraft/network/EnumConnectionState;", arg0)); }
EnumConnectionState EnumConnectionState::getFromPacket(Packet arg0) { return EnumConnectionState(*classes[className]->invokeStaticMethod<jobject>("getFromPacket", "(Lnet/minecraft/network/Packet;)Lnet/minecraft/network/EnumConnectionState;", arg0)); }
EnumConnectionState EnumConnectionState::registerPacket(EnumPacketDirection arg0, Class arg1) { return EnumConnectionState(*classes[className]->invokeMethod<jobject>(this->object, "registerPacket", "(Lnet/minecraft/network/EnumPacketDirection;Ljava/lang/Class;)Lnet/minecraft/network/EnumConnectionState;", arg0, arg1)); }
Integer EnumConnectionState::getPacketId(EnumPacketDirection arg0, Packet arg1) { return Integer(*classes[className]->invokeMethod<jobject>(this->object, "getPacketId", "(Lnet/minecraft/network/EnumPacketDirection;Lnet/minecraft/network/Packet;)Ljava/lang/Integer;", arg0, arg1)); }
EnumConnectionState EnumConnectionState::valueOf(String arg0) { return EnumConnectionState(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/network/EnumConnectionState;", arg0)); }
int EnumConnectionState::getId() { return int(*classes[className]->invokeMethod<int>(this->object, "getId", "()I")); }

EnumPacketDirection EnumPacketDirection::valueOf(String arg0) { return EnumPacketDirection(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/network/EnumPacketDirection;", arg0)); }

int Integer::numberOfLeadingZeros(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("numberOfLeadingZeros", "(I)I", arg0)); }
int Integer::numberOfTrailingZeros(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("numberOfTrailingZeros", "(I)I", arg0)); }
int Integer::bitCount(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("bitCount", "(I)I", arg0)); }
bool Integer::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Integer::toString(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(I)Ljava/lang/String;", arg0)); }
String Integer::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String Integer::toString(int arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "(II)Ljava/lang/String;", arg0, arg1)); }
int Integer::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int Integer::hashCode(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("hashCode", "(I)I", arg0)); }
int Integer::min(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("min", "(II)I", arg0, arg1)); }
int Integer::max(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("max", "(II)I", arg0, arg1)); }
int Integer::signum(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("signum", "(I)I", arg0)); }
int Integer::reverseBytes(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("reverseBytes", "(I)I", arg0)); }
int Integer::getChars(int arg0, int arg1, arr_B arg2) { return int(*classes[className]->invokeStaticMethod<int>("getChars", "(II[B)I", arg0, arg1, arg2)); }
int Integer::compare(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("compare", "(II)I", arg0, arg1)); }
byte Integer::byteValue() { return byte(*classes[className]->invokeMethod<byte>(this->object, "byteValue", "()B")); }
short Integer::shortValue() { return short(*classes[className]->invokeMethod<short>(this->object, "shortValue", "()S")); }
int Integer::intValue() { return int(*classes[className]->invokeMethod<int>(this->object, "intValue", "()I")); }
long Integer::longValue() { return long(*classes[className]->invokeMethod<long>(this->object, "longValue", "()J")); }
float Integer::floatValue() { return float(*classes[className]->invokeMethod<float>(this->object, "floatValue", "()F")); }
double Integer::doubleValue() { return double(*classes[className]->invokeMethod<double>(this->object, "doubleValue", "()D")); }
Integer Integer::valueOf(String arg0, int arg1) { return Integer(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;I)Ljava/lang/Integer;", arg0, arg1)); }
Integer Integer::valueOf(String arg0) { return Integer(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;", arg0)); }
Integer Integer::valueOf(int arg0) { return Integer(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(I)Ljava/lang/Integer;", arg0)); }
String Integer::toHexString(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toHexString", "(I)Ljava/lang/String;", arg0)); }
Integer Integer::decode(String arg0) { return Integer(*classes[className]->invokeStaticMethod<jobject>("decode", "(Ljava/lang/String;)Ljava/lang/Integer;", arg0)); }
Integer Integer::resolveConstantDesc(MethodHandles_Lookup arg0) { return Integer(*classes[className]->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/Integer;", arg0)); }
int Integer::reverse(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("reverse", "(I)I", arg0)); }
int Integer::stringSize(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("stringSize", "(I)I", arg0)); }
long Integer::toUnsignedLong(int arg0) { return long(*classes[className]->invokeStaticMethod<long>("toUnsignedLong", "(I)J", arg0)); }
int Integer::sum(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("sum", "(II)I", arg0, arg1)); }
int Integer::parseInt(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("parseInt", "(Ljava/lang/CharSequence;III)I", arg0, arg1, arg2, arg3)); }
int Integer::parseInt(String arg0) { return int(*classes[className]->invokeStaticMethod<int>("parseInt", "(Ljava/lang/String;)I", arg0)); }
int Integer::parseInt(String arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("parseInt", "(Ljava/lang/String;I)I", arg0, arg1)); }
int Integer::compareUnsigned(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("compareUnsigned", "(II)I", arg0, arg1)); }
String Integer::toStringUTF16(int arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toStringUTF16", "(II)Ljava/lang/String;", arg0, arg1)); }
String Integer::toUnsignedString(int arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toUnsignedString", "(II)Ljava/lang/String;", arg0, arg1)); }
String Integer::toUnsignedString(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toUnsignedString", "(I)Ljava/lang/String;", arg0)); }
String Integer::toUnsignedString0(int arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("toUnsignedString0", "(II)Ljava/lang/String;", arg0, arg1)); }
void Integer::formatUnsignedInt(int arg0, int arg1, arr_B arg2, int arg3) { (classes[className]->invokeStaticMethod<void>("formatUnsignedInt", "(II[BI)V", arg0, arg1, arg2, arg3)); }
void Integer::formatUnsignedIntUTF16(int arg0, int arg1, arr_B arg2, int arg3) { (classes[className]->invokeStaticMethod<void>("formatUnsignedIntUTF16", "(II[BI)V", arg0, arg1, arg2, arg3)); }
int Integer::parseUnsignedInt(String arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("parseUnsignedInt", "(Ljava/lang/String;I)I", arg0, arg1)); }
int Integer::parseUnsignedInt(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("parseUnsignedInt", "(Ljava/lang/CharSequence;III)I", arg0, arg1, arg2, arg3)); }
int Integer::parseUnsignedInt(String arg0) { return int(*classes[className]->invokeStaticMethod<int>("parseUnsignedInt", "(Ljava/lang/String;)I", arg0)); }
Integer Integer::getInteger(String arg0, Integer arg1) { return Integer(*classes[className]->invokeStaticMethod<jobject>("getInteger", "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;", arg0, arg1)); }
Integer Integer::getInteger(String arg0) { return Integer(*classes[className]->invokeStaticMethod<jobject>("getInteger", "(Ljava/lang/String;)Ljava/lang/Integer;", arg0)); }
Integer Integer::getInteger(String arg0, int arg1) { return Integer(*classes[className]->invokeStaticMethod<jobject>("getInteger", "(Ljava/lang/String;I)Ljava/lang/Integer;", arg0, arg1)); }
String Integer::toOctalString(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toOctalString", "(I)Ljava/lang/String;", arg0)); }
String Integer::toBinaryString(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toBinaryString", "(I)Ljava/lang/String;", arg0)); }
int Integer::divideUnsigned(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("divideUnsigned", "(II)I", arg0, arg1)); }
int Integer::remainderUnsigned(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("remainderUnsigned", "(II)I", arg0, arg1)); }
int Integer::highestOneBit(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("highestOneBit", "(I)I", arg0)); }
int Integer::lowestOneBit(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("lowestOneBit", "(I)I", arg0)); }
int Integer::rotateLeft(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("rotateLeft", "(II)I", arg0, arg1)); }
int Integer::rotateRight(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("rotateRight", "(II)I", arg0, arg1)); }



bool SimpleChannelInboundHandler::acceptInboundMessage(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "acceptInboundMessage", "(Ljava/lang/Object;)Z", arg0)); }
void SimpleChannelInboundHandler::channelRead0(ChannelHandlerContext arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "channelRead0", "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V", arg0, arg1)); }


bool ChannelHandlerAdapter::isSharable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSharable", "()Z")); }


bool CommandHandler::tryExecute(ICommandSender arg0, String_interface arg1, ICommand arg2, String arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "tryExecute", "(Lnet/minecraft/command/ICommandSender;[Ljava/lang/String;Lnet/minecraft/command/ICommand;Ljava/lang/String;)Z", arg0, arg1, arg2, arg3)); }
ICommand CommandHandler::registerCommand(ICommand arg0) { return ICommand(*classes[className]->invokeMethod<jobject>(this->object, "registerCommand", "(Lnet/minecraft/command/ICommand;)Lnet/minecraft/command/ICommand;", arg0)); }
int CommandHandler::getUsernameIndex(ICommand arg0, String_interface arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getUsernameIndex", "(Lnet/minecraft/command/ICommand;[Ljava/lang/String;)I", arg0, arg1)); }





String ServerStatusResponse::getFavicon() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFavicon", "()Ljava/lang/String;")); }
void ServerStatusResponse::setFavicon(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setFavicon", "(Ljava/lang/String;)V", arg0)); }
void ServerStatusResponse::setServerDescription(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "setServerDescription", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
void ServerStatusResponse::setProtocolVersionInfo(ServerStatusResponse_MinecraftProtocolVersionIdentifier arg0) { (classes[className]->invokeMethod<void>(this->object, "setProtocolVersionInfo", "(Lnet/minecraft/network/ServerStatusResponse$MinecraftProtocolVersionIdentifier;)V", arg0)); }
void ServerStatusResponse::setPlayerCountData(ServerStatusResponse_PlayerCountData arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayerCountData", "(Lnet/minecraft/network/ServerStatusResponse$PlayerCountData;)V", arg0)); }
ServerStatusResponse_PlayerCountData ServerStatusResponse::getPlayerCountData() { return ServerStatusResponse_PlayerCountData(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerCountData", "()Lnet/minecraft/network/ServerStatusResponse$PlayerCountData;")); }
IChatComponent ServerStatusResponse::getServerDescription() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getServerDescription", "()Lnet/minecraft/util/IChatComponent;")); }
ServerStatusResponse_MinecraftProtocolVersionIdentifier ServerStatusResponse::getProtocolVersionInfo() { return ServerStatusResponse_MinecraftProtocolVersionIdentifier(*classes[className]->invokeMethod<jobject>(this->object, "getProtocolVersionInfo", "()Lnet/minecraft/network/ServerStatusResponse$MinecraftProtocolVersionIdentifier;")); }

String ServerStatusResponse_MinecraftProtocolVersionIdentifier::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
int ServerStatusResponse_MinecraftProtocolVersionIdentifier::getProtocol() { return int(*classes[className]->invokeMethod<int>(this->object, "getProtocol", "()I")); }

void ServerStatusResponse_PlayerCountData::setPlayers(GameProfile_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayers", "([Lcom/mojang/authlib/GameProfile;)V", arg0)); }
int ServerStatusResponse_PlayerCountData::getMaxPlayers() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxPlayers", "()I")); }
int ServerStatusResponse_PlayerCountData::getOnlinePlayerCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getOnlinePlayerCount", "()I")); }





PlayerProfileCache_ProfileEntry PlayerProfileCache::getByUUID(UUID arg0) { return PlayerProfileCache_ProfileEntry(*classes[className]->invokeMethod<jobject>(this->object, "getByUUID", "(Ljava/util/UUID;)Lnet/minecraft/server/management/PlayerProfileCache$ProfileEntry;", arg0)); }
GameProfile PlayerProfileCache::getProfileByUUID(UUID arg0) { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getProfileByUUID", "(Ljava/util/UUID;)Lcom/mojang/authlib/GameProfile;", arg0)); }
GameProfile PlayerProfileCache::getGameProfile(MinecraftServer arg0, String arg1) { return GameProfile(*classes[className]->invokeStaticMethod<jobject>("getGameProfile", "(Lnet/minecraft/server/MinecraftServer;Ljava/lang/String;)Lcom/mojang/authlib/GameProfile;", arg0, arg1)); }
GameProfile PlayerProfileCache::getGameProfileForUsername(String arg0) { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getGameProfileForUsername", "(Ljava/lang/String;)Lcom/mojang/authlib/GameProfile;", arg0)); }
List PlayerProfileCache::getEntriesWithLimit(int arg0) { return List(*classes[className]->invokeMethod<jobject>(this->object, "getEntriesWithLimit", "(I)Ljava/util/List;", arg0)); }
void PlayerProfileCache::load() { (classes[className]->invokeMethod<void>(this->object, "load", "()V")); }
void PlayerProfileCache::save() { (classes[className]->invokeMethod<void>(this->object, "save", "()V")); }
void PlayerProfileCache::addEntry(GameProfile arg0) { (classes[className]->invokeMethod<void>(this->object, "addEntry", "(Lcom/mojang/authlib/GameProfile;)V", arg0)); }
void PlayerProfileCache::addEntry(GameProfile arg0, Date arg1) { (classes[className]->invokeMethod<void>(this->object, "addEntry", "(Lcom/mojang/authlib/GameProfile;Ljava/util/Date;)V", arg0, arg1)); }

GameProfile PlayerProfileCache_ProfileEntry::getGameProfile() { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom/mojang/authlib/GameProfile;")); }
Date PlayerProfileCache_ProfileEntry::getExpirationDate() { return Date(*classes[className]->invokeMethod<jobject>(this->object, "getExpirationDate", "()Ljava/util/Date;")); }


ItemStack Container::slotClick(int arg0, int arg1, int arg2, EntityPlayer arg3) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "slotClick", "(IIILnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/item/ItemStack;", arg0, arg1, arg2, arg3)); }
void Container::resetDrag() { (classes[className]->invokeMethod<void>(this->object, "resetDrag", "()V")); }
Slot Container::addSlotToContainer(Slot arg0) { return Slot(*classes[className]->invokeMethod<jobject>(this->object, "addSlotToContainer", "(Lnet/minecraft/inventory/Slot;)Lnet/minecraft/inventory/Slot;", arg0)); }
void Container::onCraftGuiOpened(ICrafting arg0) { (classes[className]->invokeMethod<void>(this->object, "onCraftGuiOpened", "(Lnet/minecraft/inventory/ICrafting;)V", arg0)); }
void Container::detectAndSendChanges() { (classes[className]->invokeMethod<void>(this->object, "detectAndSendChanges", "()V")); }
void Container::removeCraftingFromCrafters(ICrafting arg0) { (classes[className]->invokeMethod<void>(this->object, "removeCraftingFromCrafters", "(Lnet/minecraft/inventory/ICrafting;)V", arg0)); }
bool Container::enchantItem(EntityPlayer arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "enchantItem", "(Lnet/minecraft/entity/player/EntityPlayer;I)Z", arg0, arg1)); }
Slot Container::getSlotFromInventory(IInventory arg0, int arg1) { return Slot(*classes[className]->invokeMethod<jobject>(this->object, "getSlotFromInventory", "(Lnet/minecraft/inventory/IInventory;I)Lnet/minecraft/inventory/Slot;", arg0, arg1)); }
ItemStack Container::transferStackInSlot(EntityPlayer arg0, int arg1) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "transferStackInSlot", "(Lnet/minecraft/entity/player/EntityPlayer;I)Lnet/minecraft/item/ItemStack;", arg0, arg1)); }
int Container::getDragEvent(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getDragEvent", "(I)I", arg0)); }
int Container::extractDragMode(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("extractDragMode", "(I)I", arg0)); }
bool Container::isValidDragMode(int arg0, EntityPlayer arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isValidDragMode", "(ILnet/minecraft/entity/player/EntityPlayer;)Z", arg0, arg1)); }
void Container::retrySlotClick(int arg0, int arg1, bool arg2, EntityPlayer arg3) { (classes[className]->invokeMethod<void>(this->object, "retrySlotClick", "(IIZLnet/minecraft/entity/player/EntityPlayer;)V", arg0, arg1, arg2, arg3)); }
void Container::onCraftMatrixChanged(IInventory arg0) { (classes[className]->invokeMethod<void>(this->object, "onCraftMatrixChanged", "(Lnet/minecraft/inventory/IInventory;)V", arg0)); }
short Container::getNextTransactionID(InventoryPlayer arg0) { return short(*classes[className]->invokeMethod<short>(this->object, "getNextTransactionID", "(Lnet/minecraft/entity/player/InventoryPlayer;)S", arg0)); }
bool Container::getCanCraft(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanCraft", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void Container::setCanCraft(EntityPlayer arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setCanCraft", "(Lnet/minecraft/entity/player/EntityPlayer;Z)V", arg0, arg1)); }
bool Container::mergeItemStack(ItemStack arg0, int arg1, int arg2, bool arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mergeItemStack", "(Lnet/minecraft/item/ItemStack;IIZ)Z", arg0, arg1, arg2, arg3)); }
int Container::calcRedstone(TileEntity arg0) { return int(*classes[className]->invokeStaticMethod<int>("calcRedstone", "(Lnet/minecraft/tileentity/TileEntity;)I", arg0)); }
int Container::calcRedstoneFromInventory(IInventory arg0) { return int(*classes[className]->invokeStaticMethod<int>("calcRedstoneFromInventory", "(Lnet/minecraft/inventory/IInventory;)I", arg0)); }
void Container::putStackInSlot(int arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "putStackInSlot", "(ILnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
void Container::putStacksInSlots(ItemStack_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "putStacksInSlots", "([Lnet/minecraft/item/ItemStack;)V", arg0)); }
void Container::updateProgressBar(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "updateProgressBar", "(II)V", arg0, arg1)); }
bool Container::canAddItemToSlot(Slot arg0, ItemStack arg1, bool arg2) { return bool(*classes[className]->invokeStaticMethod<bool>("canAddItemToSlot", "(Lnet/minecraft/inventory/Slot;Lnet/minecraft/item/ItemStack;Z)Z", arg0, arg1, arg2)); }
bool Container::canDragIntoSlot(Slot arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDragIntoSlot", "(Lnet/minecraft/inventory/Slot;)Z", arg0)); }
void Container::computeStackSize(Set arg0, int arg1, ItemStack arg2, int arg3) { (classes[className]->invokeStaticMethod<void>("computeStackSize", "(Ljava/util/Set;ILnet/minecraft/item/ItemStack;I)V", arg0, arg1, arg2, arg3)); }
bool Container::canMergeSlot(ItemStack arg0, Slot arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canMergeSlot", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/inventory/Slot;)Z", arg0, arg1)); }
int Container::func_94534_d(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("func_94534_d", "(II)I", arg0, arg1)); }
bool Container::canInteractWith(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canInteractWith", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void Container::onContainerClosed(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "onContainerClosed", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
List Container::getInventory() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getInventory", "()Ljava/util/List;")); }
Slot Container::getSlot(int arg0) { return Slot(*classes[className]->invokeMethod<jobject>(this->object, "getSlot", "(I)Lnet/minecraft/inventory/Slot;", arg0)); }

void Slot::onCrafting(ItemStack arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "onCrafting", "(Lnet/minecraft/item/ItemStack;I)V", arg0, arg1)); }
void Slot::onCrafting(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "onCrafting", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
bool Slot::isHere(IInventory arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHere", "(Lnet/minecraft/inventory/IInventory;I)Z", arg0, arg1)); }
void Slot::putStack(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "putStack", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
void Slot::onPickupFromSlot(EntityPlayer arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "onPickupFromSlot", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
void Slot::onSlotChanged() { (classes[className]->invokeMethod<void>(this->object, "onSlotChanged", "()V")); }
void Slot::onSlotChange(ItemStack arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "onSlotChange", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
bool Slot::canBeHovered() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeHovered", "()Z")); }
bool Slot::getHasStack() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getHasStack", "()Z")); }
int Slot::getItemStackLimit(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getItemStackLimit", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
String Slot::getSlotTexture() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSlotTexture", "()Ljava/lang/String;")); }
bool Slot::isItemValid(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemValid", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
bool Slot::canTakeStack(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canTakeStack", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
ItemStack Slot::decrStackSize(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "decrStackSize", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
int Slot::getSlotStackLimit() { return int(*classes[className]->invokeMethod<int>(this->object, "getSlotStackLimit", "()I")); }
ItemStack Slot::getStack() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getStack", "()Lnet/minecraft/item/ItemStack;")); }



bool InventoryPlayer::hasItem(Item arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasItem", "(Lnet/minecraft/item/Item;)Z", arg0)); }
NBTTagList InventoryPlayer::writeToNBT(NBTTagList arg0) { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagList;)Lnet/minecraft/nbt/NBTTagList;", arg0)); }
ItemStack InventoryPlayer::getCurrentItem() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentItem", "()Lnet/minecraft/item/ItemStack;")); }
void InventoryPlayer::changeCurrentItem(int arg0) { (classes[className]->invokeMethod<void>(this->object, "changeCurrentItem", "(I)V", arg0)); }
void InventoryPlayer::setCurrentItem(Item arg0, int arg1, bool arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "setCurrentItem", "(Lnet/minecraft/item/Item;IZZ)V", arg0, arg1, arg2, arg3)); }
int InventoryPlayer::getFirstEmptyStack() { return int(*classes[className]->invokeMethod<int>(this->object, "getFirstEmptyStack", "()I")); }
bool InventoryPlayer::addItemStackToInventory(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "addItemStackToInventory", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
int InventoryPlayer::getHotbarSize() { return int(*classes[className]->invokeStaticMethod<int>("getHotbarSize", "()I")); }
ItemStack InventoryPlayer::getItemStack() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getItemStack", "()Lnet/minecraft/item/ItemStack;")); }
void InventoryPlayer::decrementAnimations() { (classes[className]->invokeMethod<void>(this->object, "decrementAnimations", "()V")); }
void InventoryPlayer::dropAllItems() { (classes[className]->invokeMethod<void>(this->object, "dropAllItems", "()V")); }
float InventoryPlayer::getStrVsBlock(Block arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getStrVsBlock", "(Lnet/minecraft/block/Block;)F", arg0)); }
bool InventoryPlayer::canHeldItemHarvest(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canHeldItemHarvest", "(Lnet/minecraft/block/Block;)Z", arg0)); }
void InventoryPlayer::readFromNBT(NBTTagList arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagList;)V", arg0)); }
void InventoryPlayer::damageArmor(float arg0) { (classes[className]->invokeMethod<void>(this->object, "damageArmor", "(F)V", arg0)); }
int InventoryPlayer::getTotalArmorValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getTotalArmorValue", "()I")); }
ItemStack InventoryPlayer::armorItemInSlot(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "armorItemInSlot", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
void InventoryPlayer::copyInventory(InventoryPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "copyInventory", "(Lnet/minecraft/entity/player/InventoryPlayer;)V", arg0)); }
void InventoryPlayer::setItemStack(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "setItemStack", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
int InventoryPlayer::storeItemStack(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "storeItemStack", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
int InventoryPlayer::clearMatchingItems(Item arg0, int arg1, int arg2, NBTTagCompound arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "clearMatchingItems", "(Lnet/minecraft/item/Item;IILnet/minecraft/nbt/NBTTagCompound;)I", arg0, arg1, arg2, arg3)); }
int InventoryPlayer::storePartialItemStack(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "storePartialItemStack", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
bool InventoryPlayer::consumeInventoryItem(Item arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "consumeInventoryItem", "(Lnet/minecraft/item/Item;)Z", arg0)); }
bool InventoryPlayer::hasItemStack(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasItemStack", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
int InventoryPlayer::getInventorySlotContainItem(Item arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInventorySlotContainItem", "(Lnet/minecraft/item/Item;)I", arg0)); }
int InventoryPlayer::getInventorySlotContainItemAndDamage(Item arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getInventorySlotContainItemAndDamage", "(Lnet/minecraft/item/Item;I)I", arg0, arg1)); }


String C15PacketClientSettings::getLang() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLang", "()Ljava/lang/String;")); }
EntityPlayer_EnumChatVisibility C15PacketClientSettings::getChatVisibility() { return EntityPlayer_EnumChatVisibility(*classes[className]->invokeMethod<jobject>(this->object, "getChatVisibility", "()Lnet/minecraft/entity/player/EntityPlayer$EnumChatVisibility;")); }
bool C15PacketClientSettings::isColorsEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isColorsEnabled", "()Z")); }
int C15PacketClientSettings::getModelPartFlags() { return int(*classes[className]->invokeMethod<int>(this->object, "getModelPartFlags", "()I")); }

EntityPlayer_EnumChatVisibility EntityPlayer_EnumChatVisibility::getEnumChatVisibility(int arg0) { return EntityPlayer_EnumChatVisibility(*classes[className]->invokeStaticMethod<jobject>("getEnumChatVisibility", "(I)Lnet/minecraft/entity/player/EntityPlayer$EnumChatVisibility;", arg0)); }
String EntityPlayer_EnumChatVisibility::getResourceKey() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getResourceKey", "()Ljava/lang/String;")); }
int EntityPlayer_EnumChatVisibility::getChatVisibility() { return int(*classes[className]->invokeMethod<int>(this->object, "getChatVisibility", "()I")); }
EntityPlayer_EnumChatVisibility EntityPlayer_EnumChatVisibility::valueOf(String arg0) { return EntityPlayer_EnumChatVisibility(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/entity/player/EntityPlayer$EnumChatVisibility;", arg0)); }

EntityPlayer TileEntitySign::getPlayer() { return EntityPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getPlayer", "()Lnet/minecraft/entity/player/EntityPlayer;")); }
void TileEntitySign::setPlayer(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
void TileEntitySign::writeToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
CommandResultStats TileEntitySign::getStats() { return CommandResultStats(*classes[className]->invokeMethod<jobject>(this->object, "getStats", "()Lnet/minecraft/command/CommandResultStats;")); }
void TileEntitySign::setEditable(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setEditable", "(Z)V", arg0)); }
bool TileEntitySign::executeCommand(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "executeCommand", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
bool TileEntitySign::getIsEditable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsEditable", "()Z")); }
Packet TileEntitySign::getDescriptionPacket() { return Packet(*classes[className]->invokeMethod<jobject>(this->object, "getDescriptionPacket", "()Lnet/minecraft/network/Packet;")); }
bool TileEntitySign::func_183000_F() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_183000_F", "()Z")); }
void TileEntitySign::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }

void CommandResultStats::func_179667_a(CommandResultStats arg0, CommandResultStats_Type arg1, String arg2, String arg3) { (classes[className]->invokeStaticMethod<void>("func_179667_a", "(Lnet/minecraft/command/CommandResultStats;Lnet/minecraft/command/CommandResultStats$Type;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2, arg3)); }
void CommandResultStats::func_179669_a(CommandResultStats arg0, CommandResultStats_Type arg1) { (classes[className]->invokeStaticMethod<void>("func_179669_a", "(Lnet/minecraft/command/CommandResultStats;Lnet/minecraft/command/CommandResultStats$Type;)V", arg0, arg1)); }
void CommandResultStats::writeStatsToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeStatsToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void CommandResultStats::readStatsFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readStatsFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void CommandResultStats::func_179672_a(ICommandSender arg0, CommandResultStats_Type arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "func_179672_a", "(Lnet/minecraft/command/ICommandSender;Lnet/minecraft/command/CommandResultStats$Type;I)V", arg0, arg1, arg2)); }
void CommandResultStats::func_179671_a(CommandResultStats arg0) { (classes[className]->invokeMethod<void>(this->object, "func_179671_a", "(Lnet/minecraft/command/CommandResultStats;)V", arg0)); }

int CommandResultStats_Type::getTypeID() { return int(*classes[className]->invokeMethod<int>(this->object, "getTypeID", "()I")); }
CommandResultStats_Type CommandResultStats_Type::getTypeByName(String arg0) { return CommandResultStats_Type(*classes[className]->invokeStaticMethod<jobject>("getTypeByName", "(Ljava/lang/String;)Lnet/minecraft/command/CommandResultStats$Type;", arg0)); }
CommandResultStats_Type CommandResultStats_Type::valueOf(String arg0) { return CommandResultStats_Type(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/command/CommandResultStats$Type;", arg0)); }
String CommandResultStats_Type::getTypeName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTypeName", "()Ljava/lang/String;")); }


bool EntityHorse::isOnLadder() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOnLadder", "()Z")); }
void EntityHorse::fall(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }
void EntityHorse::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityHorse::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityHorse::setEating(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setEating", "(Z)V", arg0)); }
void EntityHorse::onDeath(DamageSource arg0) { (classes[className]->invokeMethod<void>(this->object, "onDeath", "(Lnet/minecraft/util/DamageSource;)V", arg0)); }
void EntityHorse::setChested(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setChested", "(Z)V", arg0)); }
bool EntityHorse::isTame() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTame", "()Z")); }
String EntityHorse::getOwnerId() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getOwnerId", "()Ljava/lang/String;")); }
void EntityHorse::setOwnerId(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setOwnerId", "(Ljava/lang/String;)V", arg0)); }
bool EntityHorse::isUndead() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUndead", "()Z")); }
bool EntityHorse::isChested() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isChested", "()Z")); }
bool EntityHorse::isRearing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRearing", "()Z")); }
bool EntityHorse::isBreeding() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBreeding", "()Z")); }
int EntityHorse::getTemper() { return int(*classes[className]->invokeMethod<int>(this->object, "getTemper", "()I")); }
void EntityHorse::setTemper(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setTemper", "(I)V", arg0)); }
void EntityHorse::dropChests() { (classes[className]->invokeMethod<void>(this->object, "dropChests", "()V")); }
void EntityHorse::openGUI(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "openGUI", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
bool EntityHorse::interact(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interact", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void EntityHorse::mountTo(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "mountTo", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
void EntityHorse::setRearing(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setRearing", "(Z)V", arg0)); }
bool EntityHorse::isSterile() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSterile", "()Z")); }
bool EntityHorse::canMate() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canMate", "()Z")); }
bool EntityHorse::setTamedBy(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setTamedBy", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
bool EntityHorse::isHorseSaddled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHorseSaddled", "()Z")); }
void EntityHorse::initHorseChest() { (classes[className]->invokeMethod<void>(this->object, "initHorseChest", "()V")); }
void EntityHorse::setHorseType(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setHorseType", "(I)V", arg0)); }
void EntityHorse::resetTexturePrefix() { (classes[className]->invokeMethod<void>(this->object, "resetTexturePrefix", "()V")); }
int EntityHorse::getHorseType() { return int(*classes[className]->invokeMethod<int>(this->object, "getHorseType", "()I")); }
void EntityHorse::setHorseVariant(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setHorseVariant", "(I)V", arg0)); }
int EntityHorse::getHorseVariant() { return int(*classes[className]->invokeMethod<int>(this->object, "getHorseVariant", "()I")); }
bool EntityHorse::getHorseWatchableBoolean(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getHorseWatchableBoolean", "(I)Z", arg0)); }
void EntityHorse::setHorseWatchableBoolean(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setHorseWatchableBoolean", "(IZ)V", arg0, arg1)); }
bool EntityHorse::isAdultHorse() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAdultHorse", "()Z")); }
bool EntityHorse::func_110253_bW() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_110253_bW", "()Z")); }
float EntityHorse::getHorseSize() { return float(*classes[className]->invokeMethod<float>(this->object, "getHorseSize", "()F")); }
void EntityHorse::setScaleForAge(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setScaleForAge", "(Z)V", arg0)); }
bool EntityHorse::isHorseJumping() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHorseJumping", "()Z")); }
void EntityHorse::setHorseTamed(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setHorseTamed", "(Z)V", arg0)); }
void EntityHorse::setHorseJumping(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setHorseJumping", "(Z)V", arg0)); }
bool EntityHorse::allowLeashing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "allowLeashing", "()Z")); }
void EntityHorse::func_142017_o(float arg0) { (classes[className]->invokeMethod<void>(this->object, "func_142017_o", "(F)V", arg0)); }
bool EntityHorse::isEatingHaystack() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEatingHaystack", "()Z")); }
void EntityHorse::setEatingHaystack(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setEatingHaystack", "(Z)V", arg0)); }
int EntityHorse::getHorseArmorIndexSynced() { return int(*classes[className]->invokeMethod<int>(this->object, "getHorseArmorIndexSynced", "()I")); }
int EntityHorse::getHorseArmorIndex(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getHorseArmorIndex", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
bool EntityHorse::getHasReproduced() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getHasReproduced", "()Z")); }
void EntityHorse::setHorseArmorStack(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "setHorseArmorStack", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
void EntityHorse::setBreeding(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setBreeding", "(Z)V", arg0)); }
void EntityHorse::setHasReproduced(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setHasReproduced", "(Z)V", arg0)); }
void EntityHorse::setHorseSaddled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setHorseSaddled", "(Z)V", arg0)); }
int EntityHorse::increaseTemper(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "increaseTemper", "(I)I", arg0)); }
int EntityHorse::getMaxTemper() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxTemper", "()I")); }
bool EntityHorse::prepareChunkForSpawn() { return bool(*classes[className]->invokeMethod<bool>(this->object, "prepareChunkForSpawn", "()Z")); }
void EntityHorse::func_110266_cB() { (classes[className]->invokeMethod<void>(this->object, "func_110266_cB", "()V")); }
void EntityHorse::openHorseMouth() { (classes[className]->invokeMethod<void>(this->object, "openHorseMouth", "()V")); }
int EntityHorse::getChestSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getChestSize", "()I")); }
void EntityHorse::updateHorseSlots() { (classes[className]->invokeMethod<void>(this->object, "updateHorseSlots", "()V")); }
bool EntityHorse::canWearArmor() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canWearArmor", "()Z")); }
bool EntityHorse::getCanSpawnHere() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanSpawnHere", "()Z")); }
EntityHorse EntityHorse::getClosestHorse(Entity arg0, double arg1) { return EntityHorse(*classes[className]->invokeMethod<jobject>(this->object, "getClosestHorse", "(Lnet/minecraft/entity/Entity;D)Lnet/minecraft/entity/passive/EntityHorse;", arg0, arg1)); }
double EntityHorse::getHorseJumpStrength() { return double(*classes[className]->invokeMethod<double>(this->object, "getHorseJumpStrength", "()D")); }
Item EntityHorse::getDropItem() { return Item(*classes[className]->invokeMethod<jobject>(this->object, "getDropItem", "()Lnet/minecraft/item/Item;")); }
void EntityHorse::makeHorseRear() { (classes[className]->invokeMethod<void>(this->object, "makeHorseRear", "()V")); }
String EntityHorse::getLivingSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLivingSound", "()Ljava/lang/String;")); }
String EntityHorse::getAngrySoundName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAngrySoundName", "()Ljava/lang/String;")); }
int EntityHorse::getMaxSpawnedInChunk() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxSpawnedInChunk", "()I")); }
int EntityHorse::getTalkInterval() { return int(*classes[className]->invokeMethod<int>(this->object, "getTalkInterval", "()I")); }
bool EntityHorse::func_110239_cn() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_110239_cn", "()Z")); }
bool EntityHorse::func_175507_cI() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_175507_cI", "()Z")); }
void EntityHorse::setHorseTexturePaths() { (classes[className]->invokeMethod<void>(this->object, "setHorseTexturePaths", "()V")); }
String EntityHorse::getHorseTexture() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHorseTexture", "()Ljava/lang/String;")); }
void EntityHorse::makeHorseRearWithSound() { (classes[className]->invokeMethod<void>(this->object, "makeHorseRearWithSound", "()V")); }
bool EntityHorse::canCarryChest() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canCarryChest", "()Z")); }
bool EntityHorse::isBreedingItem(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBreedingItem", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
void EntityHorse::func_110210_cH() { (classes[className]->invokeMethod<void>(this->object, "func_110210_cH", "()V")); }
void EntityHorse::dropChestItems() { (classes[className]->invokeMethod<void>(this->object, "dropChestItems", "()V")); }
void EntityHorse::dropItemsInChest(Entity arg0, AnimalChest arg1) { (classes[className]->invokeMethod<void>(this->object, "dropItemsInChest", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/inventory/AnimalChest;)V", arg0, arg1)); }
bool EntityHorse::isArmorItem(Item arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isArmorItem", "(Lnet/minecraft/item/Item;)Z", arg0)); }
bool EntityHorse::canMateWith(EntityAnimal arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canMateWith", "(Lnet/minecraft/entity/passive/EntityAnimal;)Z", arg0)); }
EntityAgeable EntityHorse::createChild(EntityAgeable arg0) { return EntityAgeable(*classes[className]->invokeMethod<jobject>(this->object, "createChild", "(Lnet/minecraft/entity/EntityAgeable;)Lnet/minecraft/entity/EntityAgeable;", arg0)); }
float EntityHorse::getModifiedMaxHealth() { return float(*classes[className]->invokeMethod<float>(this->object, "getModifiedMaxHealth", "()F")); }
double EntityHorse::getModifiedJumpStrength() { return double(*classes[className]->invokeMethod<double>(this->object, "getModifiedJumpStrength", "()D")); }
double EntityHorse::getModifiedMovementSpeed() { return double(*classes[className]->invokeMethod<double>(this->object, "getModifiedMovementSpeed", "()D")); }
IEntityLivingData EntityHorse::onInitialSpawn(DifficultyInstance arg0, IEntityLivingData arg1) { return IEntityLivingData(*classes[className]->invokeMethod<jobject>(this->object, "onInitialSpawn", "(Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/entity/IEntityLivingData;)Lnet/minecraft/entity/IEntityLivingData;", arg0, arg1)); }
float EntityHorse::getGrassEatingAmount(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getGrassEatingAmount", "(F)F", arg0)); }
float EntityHorse::getRearingAmount(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getRearingAmount", "(F)F", arg0)); }
float EntityHorse::getMouthOpennessAngle(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getMouthOpennessAngle", "(F)F", arg0)); }
void EntityHorse::setJumpPower(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setJumpPower", "(I)V", arg0)); }
void EntityHorse::spawnHorseParticles(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "spawnHorseParticles", "(Z)V", arg0)); }
void EntityHorse::applyEntityAttributes() { (classes[className]->invokeMethod<void>(this->object, "applyEntityAttributes", "()V")); }
float EntityHorse::getEyeHeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getEyeHeight", "()F")); }
void EntityHorse::handleStatusUpdate(byte arg0) { (classes[className]->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }
bool EntityHorse::isMovementBlocked() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMovementBlocked", "()Z")); }
void EntityHorse::onLivingUpdate() { (classes[className]->invokeMethod<void>(this->object, "onLivingUpdate", "()V")); }
String EntityHorse::getHurtSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHurtSound", "()Ljava/lang/String;")); }
String EntityHorse::getDeathSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDeathSound", "()Ljava/lang/String;")); }
void EntityHorse::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityHorse::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityHorse::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
int EntityHorse::getTotalArmorValue() { return int(*classes[className]->invokeMethod<int>(this->object, "getTotalArmorValue", "()I")); }
void EntityHorse::moveEntityWithHeading(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "moveEntityWithHeading", "(FF)V", arg0, arg1)); }
bool EntityHorse::replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "replaceItemInInventory", "(ILnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
float EntityHorse::getSoundVolume() { return float(*classes[className]->invokeMethod<float>(this->object, "getSoundVolume", "()F")); }
bool EntityHorse::canBePushed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBePushed", "()Z")); }
void EntityHorse::playStepSound(BlockPos arg0, Block arg1) { (classes[className]->invokeMethod<void>(this->object, "playStepSound", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", arg0, arg1)); }
void EntityHorse::updateRiderPosition() { (classes[className]->invokeMethod<void>(this->object, "updateRiderPosition", "()V")); }


void InventoryBasic::setCustomName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setCustomName", "(Ljava/lang/String;)V", arg0)); }
void InventoryBasic::func_110132_b(IInvBasic arg0) { (classes[className]->invokeMethod<void>(this->object, "func_110132_b", "(Lnet/minecraft/inventory/IInvBasic;)V", arg0)); }
void InventoryBasic::func_110134_a(IInvBasic arg0) { (classes[className]->invokeMethod<void>(this->object, "func_110134_a", "(Lnet/minecraft/inventory/IInvBasic;)V", arg0)); }
ItemStack InventoryBasic::func_174894_a(ItemStack arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "func_174894_a", "(Lnet/minecraft/item/ItemStack;)Lnet/minecraft/item/ItemStack;", arg0)); }


bool EntityAnimal::canDespawn() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDespawn", "()Z")); }
bool EntityAnimal::interact(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interact", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void EntityAnimal::setInLove(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "setInLove", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
bool EntityAnimal::isInLove() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInLove", "()Z")); }
void EntityAnimal::updateAITasks() { (classes[className]->invokeMethod<void>(this->object, "updateAITasks", "()V")); }
float EntityAnimal::getBlockPathWeight(BlockPos arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getBlockPathWeight", "(Lnet/minecraft/util/BlockPos;)F", arg0)); }
void EntityAnimal::consumeItemFromStack(EntityPlayer arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "consumeItemFromStack", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
EntityPlayer EntityAnimal::getPlayerInLove() { return EntityPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerInLove", "()Lnet/minecraft/entity/player/EntityPlayer;")); }
void EntityAnimal::resetInLove() { (classes[className]->invokeMethod<void>(this->object, "resetInLove", "()V")); }
bool EntityAnimal::getCanSpawnHere() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanSpawnHere", "()Z")); }
int EntityAnimal::getTalkInterval() { return int(*classes[className]->invokeMethod<int>(this->object, "getTalkInterval", "()I")); }
bool EntityAnimal::isBreedingItem(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBreedingItem", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
bool EntityAnimal::canMateWith(EntityAnimal arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canMateWith", "(Lnet/minecraft/entity/passive/EntityAnimal;)Z", arg0)); }
void EntityAnimal::handleStatusUpdate(byte arg0) { (classes[className]->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }
void EntityAnimal::onLivingUpdate() { (classes[className]->invokeMethod<void>(this->object, "onLivingUpdate", "()V")); }
void EntityAnimal::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityAnimal::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityAnimal::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
int EntityAnimal::getExperiencePoints(EntityPlayer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet/minecraft/entity/player/EntityPlayer;)I", arg0)); }

bool EntityAgeable::isChild() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isChild", "()Z")); }
void EntityAgeable::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityAgeable::setSize(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(FF)V", arg0, arg1)); }
bool EntityAgeable::interact(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interact", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void EntityAgeable::addGrowth(int arg0) { (classes[className]->invokeMethod<void>(this->object, "addGrowth", "(I)V", arg0)); }
void EntityAgeable::setScaleForAge(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setScaleForAge", "(Z)V", arg0)); }
void EntityAgeable::func_175501_a(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "func_175501_a", "(IZ)V", arg0, arg1)); }
int EntityAgeable::getGrowingAge() { return int(*classes[className]->invokeMethod<int>(this->object, "getGrowingAge", "()I")); }
EntityAgeable EntityAgeable::createChild(EntityAgeable arg0) { return EntityAgeable(*classes[className]->invokeMethod<jobject>(this->object, "createChild", "(Lnet/minecraft/entity/EntityAgeable;)Lnet/minecraft/entity/EntityAgeable;", arg0)); }
void EntityAgeable::setGrowingAge(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setGrowingAge", "(I)V", arg0)); }
void EntityAgeable::onGrowingAdult() { (classes[className]->invokeMethod<void>(this->object, "onGrowingAdult", "()V")); }
void EntityAgeable::onLivingUpdate() { (classes[className]->invokeMethod<void>(this->object, "onLivingUpdate", "()V")); }
void EntityAgeable::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityAgeable::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityAgeable::setScale(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setScale", "(F)V", arg0)); }

bool EntityCreature::hasPath() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasPath", "()Z")); }
void EntityCreature::detachHome() { (classes[className]->invokeMethod<void>(this->object, "detachHome", "()V")); }
bool EntityCreature::hasHome() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasHome", "()Z")); }
void EntityCreature::func_142017_o(float arg0) { (classes[className]->invokeMethod<void>(this->object, "func_142017_o", "(F)V", arg0)); }
float EntityCreature::getBlockPathWeight(BlockPos arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getBlockPathWeight", "(Lnet/minecraft/util/BlockPos;)F", arg0)); }
void EntityCreature::setHomePosAndDistance(BlockPos arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setHomePosAndDistance", "(Lnet/minecraft/util/BlockPos;I)V", arg0, arg1)); }
BlockPos EntityCreature::getHomePosition() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getHomePosition", "()Lnet/minecraft/util/BlockPos;")); }
float EntityCreature::getMaximumHomeDistance() { return float(*classes[className]->invokeMethod<float>(this->object, "getMaximumHomeDistance", "()F")); }
void EntityCreature::updateLeashedState() { (classes[className]->invokeMethod<void>(this->object, "updateLeashedState", "()V")); }
bool EntityCreature::getCanSpawnHere() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanSpawnHere", "()Z")); }
bool EntityCreature::isWithinHomeDistanceCurrentPosition() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWithinHomeDistanceCurrentPosition", "()Z")); }
bool EntityCreature::isWithinHomeDistanceFromPosition(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWithinHomeDistanceFromPosition", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }

void EntityLiving::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityLiving::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
bool EntityLiving::canDespawn() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDespawn", "()Z")); }
bool EntityLiving::getLeashed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getLeashed", "()Z")); }
void EntityLiving::setNoAI(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setNoAI", "(Z)V", arg0)); }
void EntityLiving::faceEntity(Entity arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "faceEntity", "(Lnet/minecraft/entity/Entity;FF)V", arg0, arg1, arg2)); }
bool EntityLiving::interact(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interact", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
PathNavigate EntityLiving::getNavigator() { return PathNavigate(*classes[className]->invokeMethod<jobject>(this->object, "getNavigator", "()Lnet/minecraft/pathfinding/PathNavigate;")); }
bool EntityLiving::allowLeashing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "allowLeashing", "()Z")); }
void EntityLiving::updateAITasks() { (classes[className]->invokeMethod<void>(this->object, "updateAITasks", "()V")); }
void EntityLiving::updateLeashedState() { (classes[className]->invokeMethod<void>(this->object, "updateLeashedState", "()V")); }
Entity EntityLiving::getLeashedToEntity() { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getLeashedToEntity", "()Lnet/minecraft/entity/Entity;")); }
bool EntityLiving::canPickUpLoot() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canPickUpLoot", "()Z")); }
PathNavigate EntityLiving::getNewNavigator(World arg0) { return PathNavigate(*classes[className]->invokeMethod<jobject>(this->object, "getNewNavigator", "(Lnet/minecraft/world/World;)Lnet/minecraft/pathfinding/PathNavigate;", arg0)); }
EntityLookHelper EntityLiving::getLookHelper() { return EntityLookHelper(*classes[className]->invokeMethod<jobject>(this->object, "getLookHelper", "()Lnet/minecraft/entity/ai/EntityLookHelper;")); }
EntityMoveHelper EntityLiving::getMoveHelper() { return EntityMoveHelper(*classes[className]->invokeMethod<jobject>(this->object, "getMoveHelper", "()Lnet/minecraft/entity/ai/EntityMoveHelper;")); }
EntityJumpHelper EntityLiving::getJumpHelper() { return EntityJumpHelper(*classes[className]->invokeMethod<jobject>(this->object, "getJumpHelper", "()Lnet/minecraft/entity/ai/EntityJumpHelper;")); }
EntitySenses EntityLiving::getEntitySenses() { return EntitySenses(*classes[className]->invokeMethod<jobject>(this->object, "getEntitySenses", "()Lnet/minecraft/entity/ai/EntitySenses;")); }
EntityLivingBase EntityLiving::getAttackTarget() { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "getAttackTarget", "()Lnet/minecraft/entity/EntityLivingBase;")); }
void EntityLiving::setAttackTarget(EntityLivingBase arg0) { (classes[className]->invokeMethod<void>(this->object, "setAttackTarget", "(Lnet/minecraft/entity/EntityLivingBase;)V", arg0)); }
bool EntityLiving::canAttackClass(Class arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAttackClass", "(Ljava/lang/Class;)Z", arg0)); }
void EntityLiving::eatGrassBonus() { (classes[className]->invokeMethod<void>(this->object, "eatGrassBonus", "()V")); }
void EntityLiving::playLivingSound() { (classes[className]->invokeMethod<void>(this->object, "playLivingSound", "()V")); }
void EntityLiving::spawnExplosionParticle() { (classes[className]->invokeMethod<void>(this->object, "spawnExplosionParticle", "()V")); }
bool EntityLiving::isAIDisabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAIDisabled", "()Z")); }
void EntityLiving::setCanPickUpLoot(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setCanPickUpLoot", "(Z)V", arg0)); }
void EntityLiving::setMoveForward(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setMoveForward", "(F)V", arg0)); }
void EntityLiving::updateEquipmentIfNeeded(EntityItem arg0) { (classes[className]->invokeMethod<void>(this->object, "updateEquipmentIfNeeded", "(Lnet/minecraft/entity/item/EntityItem;)V", arg0)); }
bool EntityLiving::func_175448_a(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_175448_a", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
void EntityLiving::despawnEntity() { (classes[className]->invokeMethod<void>(this->object, "despawnEntity", "()V")); }
int EntityLiving::getVerticalFaceSpeed() { return int(*classes[className]->invokeMethod<int>(this->object, "getVerticalFaceSpeed", "()I")); }
float EntityLiving::updateRotation(float arg0, float arg1, float arg2) { return float(*classes[className]->invokeMethod<float>(this->object, "updateRotation", "(FFF)F", arg0, arg1, arg2)); }
bool EntityLiving::isNotColliding() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNotColliding", "()Z")); }
float EntityLiving::getRenderSizeModifier() { return float(*classes[className]->invokeMethod<float>(this->object, "getRenderSizeModifier", "()F")); }
Item EntityLiving::getArmorItemForSlot(int arg0, int arg1) { return Item(*classes[className]->invokeStaticMethod<jobject>("getArmorItemForSlot", "(II)Lnet/minecraft/item/Item;", arg0, arg1)); }
bool EntityLiving::canBeSteered() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeSteered", "()Z")); }
void EntityLiving::enablePersistence() { (classes[className]->invokeMethod<void>(this->object, "enablePersistence", "()V")); }
void EntityLiving::setEquipmentDropChance(int arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setEquipmentDropChance", "(IF)V", arg0, arg1)); }
void EntityLiving::recreateLeash() { (classes[className]->invokeMethod<void>(this->object, "recreateLeash", "()V")); }
bool EntityLiving::getCanSpawnHere() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getCanSpawnHere", "()Z")); }
Item EntityLiving::getDropItem() { return Item(*classes[className]->invokeMethod<jobject>(this->object, "getDropItem", "()Lnet/minecraft/item/Item;")); }
String EntityLiving::getLivingSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLivingSound", "()Ljava/lang/String;")); }
int EntityLiving::getMaxSpawnedInChunk() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxSpawnedInChunk", "()I")); }
int EntityLiving::getTalkInterval() { return int(*classes[className]->invokeMethod<int>(this->object, "getTalkInterval", "()I")); }
IEntityLivingData EntityLiving::onInitialSpawn(DifficultyInstance arg0, IEntityLivingData arg1) { return IEntityLivingData(*classes[className]->invokeMethod<jobject>(this->object, "onInitialSpawn", "(Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/entity/IEntityLivingData;)Lnet/minecraft/entity/IEntityLivingData;", arg0, arg1)); }
void EntityLiving::setLeashedToEntity(Entity arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setLeashedToEntity", "(Lnet/minecraft/entity/Entity;Z)V", arg0, arg1)); }
void EntityLiving::clearLeashed(bool arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "clearLeashed", "(ZZ)V", arg0, arg1)); }
bool EntityLiving::isNoDespawnRequired() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNoDespawnRequired", "()Z")); }
ItemStack EntityLiving::getHeldItem() { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getHeldItem", "()Lnet/minecraft/item/ItemStack;")); }
void EntityLiving::applyEntityAttributes() { (classes[className]->invokeMethod<void>(this->object, "applyEntityAttributes", "()V")); }
void EntityLiving::handleStatusUpdate(byte arg0) { (classes[className]->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }
void EntityLiving::updateEntityActionState() { (classes[className]->invokeMethod<void>(this->object, "updateEntityActionState", "()V")); }
void EntityLiving::onLivingUpdate() { (classes[className]->invokeMethod<void>(this->object, "onLivingUpdate", "()V")); }
void EntityLiving::setAIMoveSpeed(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setAIMoveSpeed", "(F)V", arg0)); }
void EntityLiving::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityLiving::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityLiving::interactFirst(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "interactFirst", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
ItemStack EntityLiving::getCurrentArmor(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentArmor", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
int EntityLiving::getExperiencePoints(EntityPlayer arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet/minecraft/entity/player/EntityPlayer;)I", arg0)); }
ItemStack EntityLiving::getEquipmentInSlot(int arg0) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "getEquipmentInSlot", "(I)Lnet/minecraft/item/ItemStack;", arg0)); }
void EntityLiving::setCurrentItemOrArmor(int arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
bool EntityLiving::replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "replaceItemInInventory", "(ILnet/minecraft/item/ItemStack;)Z", arg0, arg1)); }
int EntityLiving::getArmorPosition(ItemStack arg0) { return int(*classes[className]->invokeStaticMethod<int>("getArmorPosition", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
void EntityLiving::onEntityUpdate() { (classes[className]->invokeMethod<void>(this->object, "onEntityUpdate", "()V")); }
void EntityLiving::dropFewItems(bool arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "dropFewItems", "(ZI)V", arg0, arg1)); }
void EntityLiving::dropEquipment(bool arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "dropEquipment", "(ZI)V", arg0, arg1)); }
bool EntityLiving::isServerWorld() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isServerWorld", "()Z")); }
float EntityLiving::func_110146_f(float arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "func_110146_f", "(FF)F", arg0, arg1)); }
int EntityLiving::getMaxFallHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxFallHeight", "()I")); }
void EntityLiving::setEnchantmentBasedOnDifficulty(DifficultyInstance arg0) { (classes[className]->invokeMethod<void>(this->object, "setEnchantmentBasedOnDifficulty", "(Lnet/minecraft/world/DifficultyInstance;)V", arg0)); }
void EntityLiving::setEquipmentBasedOnDifficulty(DifficultyInstance arg0) { (classes[className]->invokeMethod<void>(this->object, "setEquipmentBasedOnDifficulty", "(Lnet/minecraft/world/DifficultyInstance;)V", arg0)); }

void PathNavigate::setSpeed(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setSpeed", "(D)V", arg0)); }
bool PathNavigate::setPath(PathEntity arg0, double arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setPath", "(Lnet/minecraft/pathfinding/PathEntity;D)Z", arg0, arg1)); }
void PathNavigate::pathFollow() { (classes[className]->invokeMethod<void>(this->object, "pathFollow", "()V")); }
bool PathNavigate::isInLiquid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInLiquid", "()Z")); }
bool PathNavigate::noPath() { return bool(*classes[className]->invokeMethod<bool>(this->object, "noPath", "()Z")); }
bool PathNavigate::tryMoveToXYZ(double arg0, double arg1, double arg2, double arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "tryMoveToXYZ", "(DDDD)Z", arg0, arg1, arg2, arg3)); }
bool PathNavigate::tryMoveToEntityLiving(Entity arg0, double arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "tryMoveToEntityLiving", "(Lnet/minecraft/entity/Entity;D)Z", arg0, arg1)); }
void PathNavigate::onUpdateNavigation() { (classes[className]->invokeMethod<void>(this->object, "onUpdateNavigation", "()V")); }
PathEntity PathNavigate::getPathToEntityLiving(Entity arg0) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "getPathToEntityLiving", "(Lnet/minecraft/entity/Entity;)Lnet/minecraft/pathfinding/PathEntity;", arg0)); }
PathFinder PathNavigate::getPathFinder() { return PathFinder(*classes[className]->invokeMethod<jobject>(this->object, "getPathFinder", "()Lnet/minecraft/pathfinding/PathFinder;")); }
float PathNavigate::getPathSearchRange() { return float(*classes[className]->invokeMethod<float>(this->object, "getPathSearchRange", "()F")); }
PathEntity PathNavigate::getPathToXYZ(double arg0, double arg1, double arg2) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "getPathToXYZ", "(DDD)Lnet/minecraft/pathfinding/PathEntity;", arg0, arg1, arg2)); }
PathEntity PathNavigate::getPathToPos(BlockPos arg0) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "getPathToPos", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/pathfinding/PathEntity;", arg0)); }
bool PathNavigate::canNavigate() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canNavigate", "()Z")); }
void PathNavigate::setHeightRequirement(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setHeightRequirement", "(F)V", arg0)); }
void PathNavigate::removeSunnyPath() { (classes[className]->invokeMethod<void>(this->object, "removeSunnyPath", "()V")); }
Vec3 PathNavigate::getEntityPosition() { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getEntityPosition", "()Lnet/minecraft/util/Vec3;")); }
bool PathNavigate::isDirectPathBetweenPoints(Vec3 arg0, Vec3 arg1, int arg2, int arg3, int arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDirectPathBetweenPoints", "(Lnet/minecraft/util/Vec3;Lnet/minecraft/util/Vec3;III)Z", arg0, arg1, arg2, arg3, arg4)); }
void PathNavigate::checkForStuck(Vec3 arg0) { (classes[className]->invokeMethod<void>(this->object, "checkForStuck", "(Lnet/minecraft/util/Vec3;)V", arg0)); }
void PathNavigate::clearPathEntity() { (classes[className]->invokeMethod<void>(this->object, "clearPathEntity", "()V")); }
PathEntity PathNavigate::getPath() { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "getPath", "()Lnet/minecraft/pathfinding/PathEntity;")); }

bool PathEntity::isSamePath(PathEntity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSamePath", "(Lnet/minecraft/pathfinding/PathEntity;)Z", arg0)); }
bool PathEntity::isFinished() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFinished", "()Z")); }
void PathEntity::incrementPathIndex() { (classes[className]->invokeMethod<void>(this->object, "incrementPathIndex", "()V")); }
PathPoint PathEntity::getFinalPathPoint() { return PathPoint(*classes[className]->invokeMethod<jobject>(this->object, "getFinalPathPoint", "()Lnet/minecraft/pathfinding/PathPoint;")); }
bool PathEntity::isDestinationSame(Vec3 arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDestinationSame", "(Lnet/minecraft/util/Vec3;)Z", arg0)); }
int PathEntity::getCurrentPathLength() { return int(*classes[className]->invokeMethod<int>(this->object, "getCurrentPathLength", "()I")); }
int PathEntity::getCurrentPathIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getCurrentPathIndex", "()I")); }
Vec3 PathEntity::getVectorFromIndex(Entity arg0, int arg1) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getVectorFromIndex", "(Lnet/minecraft/entity/Entity;I)Lnet/minecraft/util/Vec3;", arg0, arg1)); }
void PathEntity::setCurrentPathIndex(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setCurrentPathIndex", "(I)V", arg0)); }
PathPoint PathEntity::getPathPointFromIndex(int arg0) { return PathPoint(*classes[className]->invokeMethod<jobject>(this->object, "getPathPointFromIndex", "(I)Lnet/minecraft/pathfinding/PathPoint;", arg0)); }
void PathEntity::setCurrentPathLength(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setCurrentPathLength", "(I)V", arg0)); }
Vec3 PathEntity::getPosition(Entity arg0) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getPosition", "(Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/Vec3;", arg0)); }

bool PathPoint::isAssigned() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAssigned", "()Z")); }
int PathPoint::makeHash(int arg0, int arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("makeHash", "(III)I", arg0, arg1, arg2)); }
float PathPoint::distanceTo(PathPoint arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "distanceTo", "(Lnet/minecraft/pathfinding/PathPoint;)F", arg0)); }
float PathPoint::distanceToSquared(PathPoint arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "distanceToSquared", "(Lnet/minecraft/pathfinding/PathPoint;)F", arg0)); }
bool PathPoint::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String PathPoint::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int PathPoint::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

PathEntity PathFinder::addToPath(Entity arg0, PathPoint arg1, PathPoint arg2, float arg3) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "addToPath", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/pathfinding/PathPoint;Lnet/minecraft/pathfinding/PathPoint;F)Lnet/minecraft/pathfinding/PathEntity;", arg0, arg1, arg2, arg3)); }
PathEntity PathFinder::createEntityPathTo(IBlockAccess arg0, Entity arg1, double arg2, double arg3, double arg4, float arg5) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "createEntityPathTo", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/entity/Entity;DDDF)Lnet/minecraft/pathfinding/PathEntity;", arg0, arg1, arg2, arg3, arg4, arg5)); }
PathEntity PathFinder::createEntityPathTo(IBlockAccess arg0, Entity arg1, BlockPos arg2, float arg3) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "createEntityPathTo", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/entity/Entity;Lnet/minecraft/util/BlockPos;F)Lnet/minecraft/pathfinding/PathEntity;", arg0, arg1, arg2, arg3)); }
PathEntity PathFinder::createEntityPathTo(IBlockAccess arg0, Entity arg1, Entity arg2, float arg3) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "createEntityPathTo", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/entity/Entity;Lnet/minecraft/entity/Entity;F)Lnet/minecraft/pathfinding/PathEntity;", arg0, arg1, arg2, arg3)); }
PathEntity PathFinder::createEntityPath(PathPoint arg0, PathPoint arg1) { return PathEntity(*classes[className]->invokeMethod<jobject>(this->object, "createEntityPath", "(Lnet/minecraft/pathfinding/PathPoint;Lnet/minecraft/pathfinding/PathPoint;)Lnet/minecraft/pathfinding/PathEntity;", arg0, arg1)); }


void EntityLookHelper::onUpdateLook() { (classes[className]->invokeMethod<void>(this->object, "onUpdateLook", "()V")); }
float EntityLookHelper::updateRotation(float arg0, float arg1, float arg2) { return float(*classes[className]->invokeMethod<float>(this->object, "updateRotation", "(FFF)F", arg0, arg1, arg2)); }
bool EntityLookHelper::getIsLooking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsLooking", "()Z")); }
double EntityLookHelper::getLookPosX() { return double(*classes[className]->invokeMethod<double>(this->object, "getLookPosX", "()D")); }
double EntityLookHelper::getLookPosY() { return double(*classes[className]->invokeMethod<double>(this->object, "getLookPosY", "()D")); }
double EntityLookHelper::getLookPosZ() { return double(*classes[className]->invokeMethod<double>(this->object, "getLookPosZ", "()D")); }
void EntityLookHelper::setLookPositionWithEntity(Entity arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "setLookPositionWithEntity", "(Lnet/minecraft/entity/Entity;FF)V", arg0, arg1, arg2)); }
void EntityLookHelper::setLookPosition(double arg0, double arg1, double arg2, float arg3, float arg4) { (classes[className]->invokeMethod<void>(this->object, "setLookPosition", "(DDDFF)V", arg0, arg1, arg2, arg3, arg4)); }

void EntityMoveHelper::setMoveTo(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setMoveTo", "(DDDD)V", arg0, arg1, arg2, arg3)); }
bool EntityMoveHelper::isUpdating() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUpdating", "()Z")); }
double EntityMoveHelper::getSpeed() { return double(*classes[className]->invokeMethod<double>(this->object, "getSpeed", "()D")); }
float EntityMoveHelper::limitAngle(float arg0, float arg1, float arg2) { return float(*classes[className]->invokeMethod<float>(this->object, "limitAngle", "(FFF)F", arg0, arg1, arg2)); }
double EntityMoveHelper::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double EntityMoveHelper::getZ() { return double(*classes[className]->invokeMethod<double>(this->object, "getZ", "()D")); }
double EntityMoveHelper::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
void EntityMoveHelper::onUpdateMoveHelper() { (classes[className]->invokeMethod<void>(this->object, "onUpdateMoveHelper", "()V")); }

void EntityJumpHelper::setJumping() { (classes[className]->invokeMethod<void>(this->object, "setJumping", "()V")); }
void EntityJumpHelper::doJump() { (classes[className]->invokeMethod<void>(this->object, "doJump", "()V")); }

bool EntitySenses::canSee(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canSee", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void EntitySenses::clearSensingCache() { (classes[className]->invokeMethod<void>(this->object, "clearSensingCache", "()V")); }

float DifficultyInstance::getAdditionalDifficulty() { return float(*classes[className]->invokeMethod<float>(this->object, "getAdditionalDifficulty", "()F")); }
float DifficultyInstance::calculateAdditionalDifficulty(EnumDifficulty arg0, long arg1, long arg2, float arg3) { return float(*classes[className]->invokeMethod<float>(this->object, "calculateAdditionalDifficulty", "(Lnet/minecraft/world/EnumDifficulty;JJF)F", arg0, arg1, arg2, arg3)); }
float DifficultyInstance::getClampedAdditionalDifficulty() { return float(*classes[className]->invokeMethod<float>(this->object, "getClampedAdditionalDifficulty", "()F")); }


void EntityArrow::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityArrow::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityArrow::setDamage(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setDamage", "(D)V", arg0)); }
double EntityArrow::getDamage() { return double(*classes[className]->invokeMethod<double>(this->object, "getDamage", "()D")); }
bool EntityArrow::getIsCritical() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsCritical", "()Z")); }
void EntityArrow::setIsCritical(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setIsCritical", "(Z)V", arg0)); }
void EntityArrow::setKnockbackStrength(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setKnockbackStrength", "(I)V", arg0)); }
float EntityArrow::getEyeHeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getEyeHeight", "()F")); }
void EntityArrow::onCollideWithPlayer(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "onCollideWithPlayer", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
void EntityArrow::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityArrow::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityArrow::canAttackWithItem() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAttackWithItem", "()Z")); }
bool EntityArrow::canTriggerWalking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canTriggerWalking", "()Z")); }
void EntityArrow::setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6) { (classes[className]->invokeMethod<void>(this->object, "setPositionAndRotation2", "(DDDFFIZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void EntityArrow::setVelocity(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setVelocity", "(DDD)V", arg0, arg1, arg2)); }

void EntityFireball::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
void EntityFireball::entityInit() { (classes[className]->invokeMethod<void>(this->object, "entityInit", "()V")); }
void EntityFireball::onImpact(MovingObjectPosition arg0) { (classes[className]->invokeMethod<void>(this->object, "onImpact", "(Lnet/minecraft/util/MovingObjectPosition;)V", arg0)); }
float EntityFireball::getMotionFactor() { return float(*classes[className]->invokeMethod<float>(this->object, "getMotionFactor", "()F")); }
float EntityFireball::getBrightness(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getBrightness", "(F)F", arg0)); }
void EntityFireball::readEntityFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void EntityFireball::writeEntityToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool EntityFireball::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
bool EntityFireball::canBeCollidedWith() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeCollidedWith", "()Z")); }
int EntityFireball::getBrightnessForRender(float arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getBrightnessForRender", "(F)I", arg0)); }
bool EntityFireball::isInRangeToRenderDist(double arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInRangeToRenderDist", "(D)Z", arg0)); }
float EntityFireball::getCollisionBorderSize() { return float(*classes[className]->invokeMethod<float>(this->object, "getCollisionBorderSize", "()F")); }

void CommandBlockLogic::setCommand(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setCommand", "(Ljava/lang/String;)V", arg0)); }
String CommandBlockLogic::getCommand() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCommand", "()Ljava/lang/String;")); }
int CommandBlockLogic::getSuccessCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getSuccessCount", "()I")); }
IChatComponent CommandBlockLogic::getLastOutput() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getLastOutput", "()Lnet/minecraft/util/IChatComponent;")); }
void CommandBlockLogic::writeDataToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeDataToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void CommandBlockLogic::readDataFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readDataFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void CommandBlockLogic::updateCommand() { (classes[className]->invokeMethod<void>(this->object, "updateCommand", "()V")); }
int CommandBlockLogic::func_145751_f() { return int(*classes[className]->invokeMethod<int>(this->object, "func_145751_f", "()I")); }
void CommandBlockLogic::func_145757_a(ByteBuf arg0) { (classes[className]->invokeMethod<void>(this->object, "func_145757_a", "(Lio/netty/buffer/ByteBuf;)V", arg0)); }
void CommandBlockLogic::setLastOutput(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "setLastOutput", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
void CommandBlockLogic::setTrackOutput(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setTrackOutput", "(Z)V", arg0)); }
bool CommandBlockLogic::shouldTrackOutput() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldTrackOutput", "()Z")); }
bool CommandBlockLogic::tryOpenEditCommandBlock(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "tryOpenEditCommandBlock", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
CommandResultStats CommandBlockLogic::getCommandResultStats() { return CommandResultStats(*classes[className]->invokeMethod<jobject>(this->object, "getCommandResultStats", "()Lnet/minecraft/command/CommandResultStats;")); }
void CommandBlockLogic::trigger(World arg0) { (classes[className]->invokeMethod<void>(this->object, "trigger", "(Lnet/minecraft/world/World;)V", arg0)); }
void CommandBlockLogic::setName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setName", "(Ljava/lang/String;)V", arg0)); }

void FoodStats::readNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void FoodStats::writeNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void FoodStats::onUpdate(EntityPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "(Lnet/minecraft/entity/player/EntityPlayer;)V", arg0)); }
bool FoodStats::needFood() { return bool(*classes[className]->invokeMethod<bool>(this->object, "needFood", "()Z")); }
void FoodStats::addStats(ItemFood arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "addStats", "(Lnet/minecraft/item/ItemFood;Lnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
void FoodStats::addStats(int arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "addStats", "(IF)V", arg0, arg1)); }
int FoodStats::getPrevFoodLevel() { return int(*classes[className]->invokeMethod<int>(this->object, "getPrevFoodLevel", "()I")); }
float FoodStats::getSaturationLevel() { return float(*classes[className]->invokeMethod<float>(this->object, "getSaturationLevel", "()F")); }
void FoodStats::setFoodSaturationLevel(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setFoodSaturationLevel", "(F)V", arg0)); }
int FoodStats::getFoodLevel() { return int(*classes[className]->invokeMethod<int>(this->object, "getFoodLevel", "()I")); }
void FoodStats::setFoodLevel(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setFoodLevel", "(I)V", arg0)); }
void FoodStats::addExhaustion(float arg0) { (classes[className]->invokeMethod<void>(this->object, "addExhaustion", "(F)V", arg0)); }

int ItemFood::getHealAmount(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getHealAmount", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
float ItemFood::getSaturationModifier(ItemStack arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getSaturationModifier", "(Lnet/minecraft/item/ItemStack;)F", arg0)); }
bool ItemFood::isWolfsFavoriteMeat() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWolfsFavoriteMeat", "()Z")); }
void ItemFood::onFoodEaten(ItemStack arg0, World arg1, EntityPlayer arg2) { (classes[className]->invokeMethod<void>(this->object, "onFoodEaten", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)V", arg0, arg1, arg2)); }
ItemFood ItemFood::setAlwaysEdible() { return ItemFood(*classes[className]->invokeMethod<jobject>(this->object, "setAlwaysEdible", "()Lnet/minecraft/item/ItemFood;")); }
ItemStack ItemFood::onItemRightClick(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "onItemRightClick", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/item/ItemStack;", arg0, arg1, arg2)); }
ItemFood ItemFood::setPotionEffect(int arg0, int arg1, int arg2, float arg3) { return ItemFood(*classes[className]->invokeMethod<jobject>(this->object, "setPotionEffect", "(IIIF)Lnet/minecraft/item/ItemFood;", arg0, arg1, arg2, arg3)); }
int ItemFood::getMaxItemUseDuration(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxItemUseDuration", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
EnumAction ItemFood::getItemUseAction(ItemStack arg0) { return EnumAction(*classes[className]->invokeMethod<jobject>(this->object, "getItemUseAction", "(Lnet/minecraft/item/ItemStack;)Lnet/minecraft/item/EnumAction;", arg0)); }
ItemStack ItemFood::onItemUseFinish(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*classes[className]->invokeMethod<jobject>(this->object, "onItemUseFinish", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/world/World;Lnet/minecraft/entity/player/EntityPlayer;)Lnet/minecraft/item/ItemStack;", arg0, arg1, arg2)); }

void InventoryEnderChest::setChestTileEntity(TileEntityEnderChest arg0) { (classes[className]->invokeMethod<void>(this->object, "setChestTileEntity", "(Lnet/minecraft/tileentity/TileEntityEnderChest;)V", arg0)); }
void InventoryEnderChest::loadInventoryFromNBT(NBTTagList arg0) { (classes[className]->invokeMethod<void>(this->object, "loadInventoryFromNBT", "(Lnet/minecraft/nbt/NBTTagList;)V", arg0)); }
NBTTagList InventoryEnderChest::saveInventoryToNBT() { return NBTTagList(*classes[className]->invokeMethod<jobject>(this->object, "saveInventoryToNBT", "()Lnet/minecraft/nbt/NBTTagList;")); }

void TileEntityEnderChest::invalidate() { (classes[className]->invokeMethod<void>(this->object, "invalidate", "()V")); }
bool TileEntityEnderChest::canBeUsed(EntityPlayer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeUsed", "(Lnet/minecraft/entity/player/EntityPlayer;)Z", arg0)); }
void TileEntityEnderChest::openChest() { (classes[className]->invokeMethod<void>(this->object, "openChest", "()V")); }
void TileEntityEnderChest::closeChest() { (classes[className]->invokeMethod<void>(this->object, "closeChest", "()V")); }
bool TileEntityEnderChest::receiveClientEvent(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "receiveClientEvent", "(II)Z", arg0, arg1)); }

double WorldBorder::minX() { return double(*classes[className]->invokeMethod<double>(this->object, "minX", "()D")); }
double WorldBorder::minZ() { return double(*classes[className]->invokeMethod<double>(this->object, "minZ", "()D")); }
double WorldBorder::maxX() { return double(*classes[className]->invokeMethod<double>(this->object, "maxX", "()D")); }
double WorldBorder::maxZ() { return double(*classes[className]->invokeMethod<double>(this->object, "maxZ", "()D")); }
double WorldBorder::getCenterX() { return double(*classes[className]->invokeMethod<double>(this->object, "getCenterX", "()D")); }
double WorldBorder::getCenterZ() { return double(*classes[className]->invokeMethod<double>(this->object, "getCenterZ", "()D")); }
void WorldBorder::setSize(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(I)V", arg0)); }
EnumBorderStatus WorldBorder::getStatus() { return EnumBorderStatus(*classes[className]->invokeMethod<jobject>(this->object, "getStatus", "()Lnet/minecraft/world/border/EnumBorderStatus;")); }
void WorldBorder::setCenter(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setCenter", "(DD)V", arg0, arg1)); }
void WorldBorder::addListener(IBorderListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addListener", "(Lnet/minecraft/world/border/IBorderListener;)V", arg0)); }
double WorldBorder::getDiameter() { return double(*classes[className]->invokeMethod<double>(this->object, "getDiameter", "()D")); }
List WorldBorder::getListeners() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getListeners", "()Ljava/util/List;")); }
void WorldBorder::setTransition(double arg0, double arg1, long arg2) { (classes[className]->invokeMethod<void>(this->object, "setTransition", "(DDJ)V", arg0, arg1, arg2)); }
void WorldBorder::setTransition(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setTransition", "(D)V", arg0)); }
long WorldBorder::getTimeUntilTarget() { return long(*classes[className]->invokeMethod<long>(this->object, "getTimeUntilTarget", "()J")); }
double WorldBorder::getTargetSize() { return double(*classes[className]->invokeMethod<double>(this->object, "getTargetSize", "()D")); }
void WorldBorder::setDamageBuffer(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setDamageBuffer", "(D)V", arg0)); }
void WorldBorder::setDamageAmount(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setDamageAmount", "(D)V", arg0)); }
double WorldBorder::getResizeSpeed() { return double(*classes[className]->invokeMethod<double>(this->object, "getResizeSpeed", "()D")); }
int WorldBorder::getWarningTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getWarningTime", "()I")); }
void WorldBorder::setWarningTime(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setWarningTime", "(I)V", arg0)); }
int WorldBorder::getWarningDistance() { return int(*classes[className]->invokeMethod<int>(this->object, "getWarningDistance", "()I")); }
void WorldBorder::setWarningDistance(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setWarningDistance", "(I)V", arg0)); }
double WorldBorder::getClosestDistance(double arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "getClosestDistance", "(DD)D", arg0, arg1)); }
double WorldBorder::getClosestDistance(Entity arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getClosestDistance", "(Lnet/minecraft/entity/Entity;)D", arg0)); }
double WorldBorder::getDamageBuffer() { return double(*classes[className]->invokeMethod<double>(this->object, "getDamageBuffer", "()D")); }
double WorldBorder::getDamageAmount() { return double(*classes[className]->invokeMethod<double>(this->object, "getDamageAmount", "()D")); }
bool WorldBorder::contains(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool WorldBorder::contains(ChunkCoordIntPair arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Lnet/minecraft/world/ChunkCoordIntPair;)Z", arg0)); }
bool WorldBorder::contains(AxisAlignedBB arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Lnet/minecraft/util/AxisAlignedBB;)Z", arg0)); }
int WorldBorder::getSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSize", "()I")); }

int EnumBorderStatus::getID() { return int(*classes[className]->invokeMethod<int>(this->object, "getID", "()I")); }
EnumBorderStatus EnumBorderStatus::valueOf(String arg0) { return EnumBorderStatus(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/world/border/EnumBorderStatus;", arg0)); }



bool WorldInfo::isRaining() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRaining", "()Z")); }
void WorldInfo::setRaining(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setRaining", "(Z)V", arg0)); }
int WorldInfo::getSpawnX() { return int(*classes[className]->invokeMethod<int>(this->object, "getSpawnX", "()I")); }
int WorldInfo::getSpawnY() { return int(*classes[className]->invokeMethod<int>(this->object, "getSpawnY", "()I")); }
int WorldInfo::getSpawnZ() { return int(*classes[className]->invokeMethod<int>(this->object, "getSpawnZ", "()I")); }
void WorldInfo::setSpawn(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "setSpawn", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
void WorldInfo::setSpawnX(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSpawnX", "(I)V", arg0)); }
void WorldInfo::setSpawnY(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSpawnY", "(I)V", arg0)); }
void WorldInfo::setSpawnZ(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSpawnZ", "(I)V", arg0)); }
EnumDifficulty WorldInfo::getDifficulty() { return EnumDifficulty(*classes[className]->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet/minecraft/world/EnumDifficulty;")); }
void WorldInfo::setServerInitialized(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setServerInitialized", "(Z)V", arg0)); }
WorldType WorldInfo::getTerrainType() { return WorldType(*classes[className]->invokeMethod<jobject>(this->object, "getTerrainType", "()Lnet/minecraft/world/WorldType;")); }
void WorldInfo::populateFromWorldSettings(WorldSettings arg0) { (classes[className]->invokeMethod<void>(this->object, "populateFromWorldSettings", "(Lnet/minecraft/world/WorldSettings;)V", arg0)); }
void WorldInfo::updateTagCompound(NBTTagCompound arg0, NBTTagCompound arg1) { (classes[className]->invokeMethod<void>(this->object, "updateTagCompound", "(Lnet/minecraft/nbt/NBTTagCompound;Lnet/minecraft/nbt/NBTTagCompound;)V", arg0, arg1)); }
NBTTagCompound WorldInfo::cloneNBTCompound(NBTTagCompound arg0) { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "cloneNBTCompound", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/nbt/NBTTagCompound;", arg0)); }
long WorldInfo::getSizeOnDisk() { return long(*classes[className]->invokeMethod<long>(this->object, "getSizeOnDisk", "()J")); }
NBTTagCompound WorldInfo::getPlayerNBTTagCompound() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerNBTTagCompound", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
int WorldInfo::getSaveVersion() { return int(*classes[className]->invokeMethod<int>(this->object, "getSaveVersion", "()I")); }
void WorldInfo::setSaveVersion(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSaveVersion", "(I)V", arg0)); }
long WorldInfo::getLastTimePlayed() { return long(*classes[className]->invokeMethod<long>(this->object, "getLastTimePlayed", "()J")); }
void WorldInfo::setMapFeaturesEnabled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setMapFeaturesEnabled", "(Z)V", arg0)); }
void WorldInfo::setHardcore(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setHardcore", "(Z)V", arg0)); }
void WorldInfo::setTerrainType(WorldType arg0) { (classes[className]->invokeMethod<void>(this->object, "setTerrainType", "(Lnet/minecraft/world/WorldType;)V", arg0)); }
void WorldInfo::setAllowCommands(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAllowCommands", "(Z)V", arg0)); }
bool WorldInfo::isInitialized() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInitialized", "()Z")); }
void WorldInfo::getBorderCenterX(double arg0) { (classes[className]->invokeMethod<void>(this->object, "getBorderCenterX", "(D)V", arg0)); }
double WorldInfo::getBorderCenterX() { return double(*classes[className]->invokeMethod<double>(this->object, "getBorderCenterX", "()D")); }
void WorldInfo::getBorderCenterZ(double arg0) { (classes[className]->invokeMethod<void>(this->object, "getBorderCenterZ", "(D)V", arg0)); }
double WorldInfo::getBorderCenterZ() { return double(*classes[className]->invokeMethod<double>(this->object, "getBorderCenterZ", "()D")); }
double WorldInfo::getBorderSize() { return double(*classes[className]->invokeMethod<double>(this->object, "getBorderSize", "()D")); }
void WorldInfo::setBorderSize(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setBorderSize", "(D)V", arg0)); }
long WorldInfo::getBorderLerpTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getBorderLerpTime", "()J")); }
void WorldInfo::setBorderLerpTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setBorderLerpTime", "(J)V", arg0)); }
double WorldInfo::getBorderLerpTarget() { return double(*classes[className]->invokeMethod<double>(this->object, "getBorderLerpTarget", "()D")); }
void WorldInfo::setBorderLerpTarget(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setBorderLerpTarget", "(D)V", arg0)); }
double WorldInfo::getBorderSafeZone() { return double(*classes[className]->invokeMethod<double>(this->object, "getBorderSafeZone", "()D")); }
void WorldInfo::setBorderSafeZone(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setBorderSafeZone", "(D)V", arg0)); }
double WorldInfo::getBorderDamagePerBlock() { return double(*classes[className]->invokeMethod<double>(this->object, "getBorderDamagePerBlock", "()D")); }
void WorldInfo::setBorderDamagePerBlock(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setBorderDamagePerBlock", "(D)V", arg0)); }
int WorldInfo::getBorderWarningDistance() { return int(*classes[className]->invokeMethod<int>(this->object, "getBorderWarningDistance", "()I")); }
int WorldInfo::getBorderWarningTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getBorderWarningTime", "()I")); }
void WorldInfo::setBorderWarningDistance(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setBorderWarningDistance", "(I)V", arg0)); }
void WorldInfo::setBorderWarningTime(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setBorderWarningTime", "(I)V", arg0)); }
String WorldInfo::getGeneratorOptions() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getGeneratorOptions", "()Ljava/lang/String;")); }
bool WorldInfo::isDifficultyLocked() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDifficultyLocked", "()Z")); }
void WorldInfo::setDifficultyLocked(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDifficultyLocked", "(Z)V", arg0)); }
bool WorldInfo::isMapFeaturesEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMapFeaturesEnabled", "()Z")); }
void WorldInfo::setWorldName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldName", "(Ljava/lang/String;)V", arg0)); }
bool WorldInfo::areCommandsAllowed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "areCommandsAllowed", "()Z")); }
WorldSettings_GameType WorldInfo::getGameType() { return WorldSettings_GameType(*classes[className]->invokeMethod<jobject>(this->object, "getGameType", "()Lnet/minecraft/world/WorldSettings$GameType;")); }
bool WorldInfo::isHardcoreModeEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHardcoreModeEnabled", "()Z")); }
long WorldInfo::getWorldTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getWorldTime", "()J")); }
bool WorldInfo::isThundering() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isThundering", "()Z")); }
int WorldInfo::getCleanWeatherTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getCleanWeatherTime", "()I")); }
void WorldInfo::setCleanWeatherTime(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setCleanWeatherTime", "(I)V", arg0)); }
void WorldInfo::setThunderTime(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setThunderTime", "(I)V", arg0)); }
void WorldInfo::setRainTime(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setRainTime", "(I)V", arg0)); }
int WorldInfo::getThunderTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getThunderTime", "()I")); }
void WorldInfo::setThundering(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setThundering", "(Z)V", arg0)); }
int WorldInfo::getRainTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getRainTime", "()I")); }
void WorldInfo::setWorldTotalTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldTotalTime", "(J)V", arg0)); }
long WorldInfo::getWorldTotalTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getWorldTotalTime", "()J")); }
void WorldInfo::setWorldTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldTime", "(J)V", arg0)); }
GameRules WorldInfo::getGameRulesInstance() { return GameRules(*classes[className]->invokeMethod<jobject>(this->object, "getGameRulesInstance", "()Lnet/minecraft/world/GameRules;")); }
String WorldInfo::getWorldName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getWorldName", "()Ljava/lang/String;")); }
void WorldInfo::addToCrashReport(CrashReportCategory arg0) { (classes[className]->invokeMethod<void>(this->object, "addToCrashReport", "(Lnet/minecraft/crash/CrashReportCategory;)V", arg0)); }
void WorldInfo::setDifficulty(EnumDifficulty arg0) { (classes[className]->invokeMethod<void>(this->object, "setDifficulty", "(Lnet/minecraft/world/EnumDifficulty;)V", arg0)); }
void WorldInfo::setGameType(WorldSettings_GameType arg0) { (classes[className]->invokeMethod<void>(this->object, "setGameType", "(Lnet/minecraft/world/WorldSettings$GameType;)V", arg0)); }
NBTTagCompound WorldInfo::getNBTTagCompound() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getNBTTagCompound", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
long WorldInfo::getSeed() { return long(*classes[className]->invokeMethod<long>(this->object, "getSeed", "()J")); }

NBTTagCompound GameRules::writeToNBT() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "writeToNBT", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
bool GameRules::hasRule(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasRule", "(Ljava/lang/String;)Z", arg0)); }
void GameRules::addGameRule(String arg0, String arg1, GameRules_ValueType arg2) { (classes[className]->invokeMethod<void>(this->object, "addGameRule", "(Ljava/lang/String;Ljava/lang/String;Lnet/minecraft/world/GameRules$ValueType;)V", arg0, arg1, arg2)); }
bool GameRules::areSameType(String arg0, GameRules_ValueType arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "areSameType", "(Ljava/lang/String;Lnet/minecraft/world/GameRules$ValueType;)Z", arg0, arg1)); }
void GameRules::setOrCreateGameRule(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "setOrCreateGameRule", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
void GameRules::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
String GameRules::getString(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getString", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool GameRules::getBoolean(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getBoolean", "(Ljava/lang/String;)Z", arg0)); }
int GameRules::getInt(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getInt", "(Ljava/lang/String;)I", arg0)); }

GameRules_ValueType GameRules_ValueType::valueOf(String arg0) { return GameRules_ValueType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/world/GameRules$ValueType;", arg0)); }

void MapStorage::setData(String arg0, WorldSavedData arg1) { (classes[className]->invokeMethod<void>(this->object, "setData", "(Ljava/lang/String;Lnet/minecraft/world/WorldSavedData;)V", arg0, arg1)); }
WorldSavedData MapStorage::loadData(Class arg0, String arg1) { return WorldSavedData(*classes[className]->invokeMethod<jobject>(this->object, "loadData", "(Ljava/lang/Class;Ljava/lang/String;)Lnet/minecraft/world/WorldSavedData;", arg0, arg1)); }
void MapStorage::saveData(WorldSavedData arg0) { (classes[className]->invokeMethod<void>(this->object, "saveData", "(Lnet/minecraft/world/WorldSavedData;)V", arg0)); }
void MapStorage::loadIdCounts() { (classes[className]->invokeMethod<void>(this->object, "loadIdCounts", "()V")); }
void MapStorage::saveAllData() { (classes[className]->invokeMethod<void>(this->object, "saveAllData", "()V")); }
int MapStorage::getUniqueDataId(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getUniqueDataId", "(Ljava/lang/String;)I", arg0)); }

void VillageCollection::tick() { (classes[className]->invokeMethod<void>(this->object, "tick", "()V")); }
void VillageCollection::writeToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
bool VillageCollection::isWoodDoor(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWoodDoor", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
String VillageCollection::fileNameForProvider(WorldProvider arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("fileNameForProvider", "(Lnet/minecraft/world/WorldProvider;)Ljava/lang/String;", arg0)); }
void VillageCollection::setWorldsForAll(World arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldsForAll", "(Lnet/minecraft/world/World;)V", arg0)); }
void VillageCollection::addToVillagerPositionList(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "addToVillagerPositionList", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
bool VillageCollection::positionInList(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "positionInList", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
void VillageCollection::removeAnnihilatedVillages() { (classes[className]->invokeMethod<void>(this->object, "removeAnnihilatedVillages", "()V")); }
void VillageCollection::dropOldestVillagerPosition() { (classes[className]->invokeMethod<void>(this->object, "dropOldestVillagerPosition", "()V")); }
List VillageCollection::getVillageList() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getVillageList", "()Ljava/util/List;")); }
Village VillageCollection::getNearestVillage(BlockPos arg0, int arg1) { return Village(*classes[className]->invokeMethod<jobject>(this->object, "getNearestVillage", "(Lnet/minecraft/util/BlockPos;I)Lnet/minecraft/village/Village;", arg0, arg1)); }
void VillageCollection::addDoorsAround(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "addDoorsAround", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
VillageDoorInfo VillageCollection::checkDoorExistence(BlockPos arg0) { return VillageDoorInfo(*classes[className]->invokeMethod<jobject>(this->object, "checkDoorExistence", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/village/VillageDoorInfo;", arg0)); }
void VillageCollection::addToNewDoorsList(BlockPos arg0) { (classes[className]->invokeMethod<void>(this->object, "addToNewDoorsList", "(Lnet/minecraft/util/BlockPos;)V", arg0)); }
int VillageCollection::countBlocksCanSeeSky(BlockPos arg0, EnumFacing arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "countBlocksCanSeeSky", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;I)I", arg0, arg1, arg2)); }
void VillageCollection::readFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void VillageCollection::addNewDoorsToVillageOrCreateVillage() { (classes[className]->invokeMethod<void>(this->object, "addNewDoorsToVillageOrCreateVillage", "()V")); }

WorldBorder WorldProvider::getWorldBorder() { return WorldBorder(*classes[className]->invokeMethod<jobject>(this->object, "getWorldBorder", "()Lnet/minecraft/world/border/WorldBorder;")); }
WorldChunkManager WorldProvider::getWorldChunkManager() { return WorldChunkManager(*classes[className]->invokeMethod<jobject>(this->object, "getWorldChunkManager", "()Lnet/minecraft/world/biome/WorldChunkManager;")); }
bool WorldProvider::getHasNoSky() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getHasNoSky", "()Z")); }
bool WorldProvider::doesWaterVaporize() { return bool(*classes[className]->invokeMethod<bool>(this->object, "doesWaterVaporize", "()Z")); }
String WorldProvider::getInternalNameSuffix() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getInternalNameSuffix", "()Ljava/lang/String;")); }
IChunkProvider WorldProvider::createChunkGenerator() { return IChunkProvider(*classes[className]->invokeMethod<jobject>(this->object, "createChunkGenerator", "()Lnet/minecraft/world/chunk/IChunkProvider;")); }
bool WorldProvider::canRespawnHere() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canRespawnHere", "()Z")); }
int WorldProvider::getAverageGroundLevel() { return int(*classes[className]->invokeMethod<int>(this->object, "getAverageGroundLevel", "()I")); }
bool WorldProvider::canCoordinateBeSpawn(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canCoordinateBeSpawn", "(II)Z", arg0, arg1)); }
BlockPos WorldProvider::getSpawnCoordinate() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getSpawnCoordinate", "()Lnet/minecraft/util/BlockPos;")); }
void WorldProvider::registerWorldChunkManager() { (classes[className]->invokeMethod<void>(this->object, "registerWorldChunkManager", "()V")); }
float WorldProvider::getCloudHeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getCloudHeight", "()F")); }
bool WorldProvider::isSkyColored() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSkyColored", "()Z")); }
double WorldProvider::getVoidFogYFactor() { return double(*classes[className]->invokeMethod<double>(this->object, "getVoidFogYFactor", "()D")); }
bool WorldProvider::doesXZShowFog(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "doesXZShowFog", "(II)Z", arg0, arg1)); }
String WorldProvider::getDimensionName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDimensionName", "()Ljava/lang/String;")); }
float WorldProvider::calculateCelestialAngle(long arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "calculateCelestialAngle", "(JF)F", arg0, arg1)); }
int WorldProvider::getMoonPhase(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMoonPhase", "(J)I", arg0)); }
Vec3 WorldProvider::getFogColor(float arg0, float arg1) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "getFogColor", "(FF)Lnet/minecraft/util/Vec3;", arg0, arg1)); }
WorldProvider WorldProvider::getProviderForDimension(int arg0) { return WorldProvider(*classes[className]->invokeStaticMethod<jobject>("getProviderForDimension", "(I)Lnet/minecraft/world/WorldProvider;", arg0)); }
void WorldProvider::registerWorld(World arg0) { (classes[className]->invokeMethod<void>(this->object, "registerWorld", "(Lnet/minecraft/world/World;)V", arg0)); }
bool WorldProvider::isSurfaceWorld() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSurfaceWorld", "()Z")); }
int WorldProvider::getDimensionId() { return int(*classes[className]->invokeMethod<int>(this->object, "getDimensionId", "()I")); }
void WorldProvider::generateLightBrightnessTable() { (classes[className]->invokeMethod<void>(this->object, "generateLightBrightnessTable", "()V")); }

void Village::setWorld(World arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorld", "(Lnet/minecraft/world/World;)V", arg0)); }
void Village::tick(int arg0) { (classes[className]->invokeMethod<void>(this->object, "tick", "(I)V", arg0)); }
BlockPos Village::getCenter() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getCenter", "()Lnet/minecraft/util/BlockPos;")); }
bool Village::isWoodDoor(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWoodDoor", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool Village::isAnnihilated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAnnihilated", "()Z")); }
int Village::getVillageRadius() { return int(*classes[className]->invokeMethod<int>(this->object, "getVillageRadius", "()I")); }
void Village::addVillageDoorInfo(VillageDoorInfo arg0) { (classes[className]->invokeMethod<void>(this->object, "addVillageDoorInfo", "(Lnet/minecraft/village/VillageDoorInfo;)V", arg0)); }
VillageDoorInfo Village::getExistedDoor(BlockPos arg0) { return VillageDoorInfo(*classes[className]->invokeMethod<jobject>(this->object, "getExistedDoor", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/village/VillageDoorInfo;", arg0)); }
void Village::readVillageDataFromNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "readVillageDataFromNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void Village::writeVillageDataToNBT(NBTTagCompound arg0) { (classes[className]->invokeMethod<void>(this->object, "writeVillageDataToNBT", "(Lnet/minecraft/nbt/NBTTagCompound;)V", arg0)); }
void Village::removeDeadAndOldAgressors() { (classes[className]->invokeMethod<void>(this->object, "removeDeadAndOldAgressors", "()V")); }
void Village::updateNumVillagers() { (classes[className]->invokeMethod<void>(this->object, "updateNumVillagers", "()V")); }
void Village::updateNumIronGolems() { (classes[className]->invokeMethod<void>(this->object, "updateNumIronGolems", "()V")); }
Vec3 Village::func_179862_a(BlockPos arg0, int arg1, int arg2, int arg3) { return Vec3(*classes[className]->invokeMethod<jobject>(this->object, "func_179862_a", "(Lnet/minecraft/util/BlockPos;III)Lnet/minecraft/util/Vec3;", arg0, arg1, arg2, arg3)); }
bool Village::func_179866_a(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_179866_a", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
bool Village::func_179861_a(BlockPos arg0, BlockPos arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_179861_a", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;)Z", arg0, arg1)); }
int Village::getNumVillageDoors() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumVillageDoors", "()I")); }
int Village::getNumVillagers() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumVillagers", "()I")); }
List Village::getVillageDoorInfoList() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getVillageDoorInfoList", "()Ljava/util/List;")); }
VillageDoorInfo Village::getNearestDoor(BlockPos arg0) { return VillageDoorInfo(*classes[className]->invokeMethod<jobject>(this->object, "getNearestDoor", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/village/VillageDoorInfo;", arg0)); }
VillageDoorInfo Village::getDoorInfo(BlockPos arg0) { return VillageDoorInfo(*classes[className]->invokeMethod<jobject>(this->object, "getDoorInfo", "(Lnet/minecraft/util/BlockPos;)Lnet/minecraft/village/VillageDoorInfo;", arg0)); }
void Village::addOrRenewAgressor(EntityLivingBase arg0) { (classes[className]->invokeMethod<void>(this->object, "addOrRenewAgressor", "(Lnet/minecraft/entity/EntityLivingBase;)V", arg0)); }
EntityPlayer Village::getNearestTargetPlayer(EntityLivingBase arg0) { return EntityPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getNearestTargetPlayer", "(Lnet/minecraft/entity/EntityLivingBase;)Lnet/minecraft/entity/player/EntityPlayer;", arg0)); }
bool Village::isPlayerReputationTooLow(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlayerReputationTooLow", "(Ljava/lang/String;)Z", arg0)); }
int Village::getReputationForPlayer(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getReputationForPlayer", "(Ljava/lang/String;)I", arg0)); }
int Village::setReputationForPlayer(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "setReputationForPlayer", "(Ljava/lang/String;I)I", arg0, arg1)); }
void Village::endMatingSeason() { (classes[className]->invokeMethod<void>(this->object, "endMatingSeason", "()V")); }
bool Village::isMatingSeason() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMatingSeason", "()Z")); }
void Village::setDefaultPlayerReputation(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setDefaultPlayerReputation", "(I)V", arg0)); }
void Village::removeDeadAndOutOfRangeDoors() { (classes[className]->invokeMethod<void>(this->object, "removeDeadAndOutOfRangeDoors", "()V")); }
int Village::getTicksSinceLastDoorAdding() { return int(*classes[className]->invokeMethod<int>(this->object, "getTicksSinceLastDoorAdding", "()I")); }
void Village::updateVillageRadiusAndCenter() { (classes[className]->invokeMethod<void>(this->object, "updateVillageRadiusAndCenter", "()V")); }
EntityLivingBase Village::findNearestVillageAggressor(EntityLivingBase arg0) { return EntityLivingBase(*classes[className]->invokeMethod<jobject>(this->object, "findNearestVillageAggressor", "(Lnet/minecraft/entity/EntityLivingBase;)Lnet/minecraft/entity/EntityLivingBase;", arg0)); }

BlockPos VillageDoorInfo::getDoorBlockPos() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getDoorBlockPos", "()Lnet/minecraft/util/BlockPos;")); }
void VillageDoorInfo::func_179849_a(int arg0) { (classes[className]->invokeMethod<void>(this->object, "func_179849_a", "(I)V", arg0)); }
int VillageDoorInfo::getDistanceToDoorBlockSq(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getDistanceToDoorBlockSq", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
int VillageDoorInfo::getInsidePosY() { return int(*classes[className]->invokeMethod<int>(this->object, "getInsidePosY", "()I")); }
int VillageDoorInfo::getInsideOffsetX() { return int(*classes[className]->invokeMethod<int>(this->object, "getInsideOffsetX", "()I")); }
int VillageDoorInfo::getInsideOffsetZ() { return int(*classes[className]->invokeMethod<int>(this->object, "getInsideOffsetZ", "()I")); }
EnumFacing VillageDoorInfo::getFaceDirection(int arg0, int arg1) { return EnumFacing(*classes[className]->invokeStaticMethod<jobject>("getFaceDirection", "(II)Lnet/minecraft/util/EnumFacing;", arg0, arg1)); }
int VillageDoorInfo::getDistanceSquared(int arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "getDistanceSquared", "(III)I", arg0, arg1, arg2)); }
int VillageDoorInfo::getDistanceToInsideBlockSq(BlockPos arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getDistanceToInsideBlockSq", "(Lnet/minecraft/util/BlockPos;)I", arg0)); }
bool VillageDoorInfo::func_179850_c(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_179850_c", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
BlockPos VillageDoorInfo::getInsideBlockPos() { return BlockPos(*classes[className]->invokeMethod<jobject>(this->object, "getInsideBlockPos", "()Lnet/minecraft/util/BlockPos;")); }
int VillageDoorInfo::getDoorOpeningRestrictionCounter() { return int(*classes[className]->invokeMethod<int>(this->object, "getDoorOpeningRestrictionCounter", "()I")); }
void VillageDoorInfo::resetDoorOpeningRestrictionCounter() { (classes[className]->invokeMethod<void>(this->object, "resetDoorOpeningRestrictionCounter", "()V")); }
void VillageDoorInfo::setIsDetachedFromVillageFlag(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setIsDetachedFromVillageFlag", "(Z)V", arg0)); }
void VillageDoorInfo::incrementDoorOpeningRestrictionCounter() { (classes[className]->invokeMethod<void>(this->object, "incrementDoorOpeningRestrictionCounter", "()V")); }
bool VillageDoorInfo::getIsDetachedFromVillageFlag() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIsDetachedFromVillageFlag", "()Z")); }

float Block_SoundType::getVolume() { return float(*classes[className]->invokeMethod<float>(this->object, "getVolume", "()F")); }
float Block_SoundType::getFrequency() { return float(*classes[className]->invokeMethod<float>(this->object, "getFrequency", "()F")); }
String Block_SoundType::getBreakSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getBreakSound", "()Ljava/lang/String;")); }
String Block_SoundType::getPlaceSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPlaceSound", "()Ljava/lang/String;")); }
String Block_SoundType::getStepSound() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getStepSound", "()Ljava/lang/String;")); }

bool StackTraceElement::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String StackTraceElement::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int StackTraceElement::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
StackTraceElement StackTraceElement::of(StackFrameInfo arg0) { return StackTraceElement(*classes[className]->invokeStaticMethod<jobject>("of", "(Ljava/lang/StackFrameInfo;)Ljava/lang/StackTraceElement;", arg0)); }
bool StackTraceElement::dropClassLoaderName() { return bool(*classes[className]->invokeMethod<bool>(this->object, "dropClassLoaderName", "()Z")); }
bool StackTraceElement::dropModuleVersion() { return bool(*classes[className]->invokeMethod<bool>(this->object, "dropModuleVersion", "()Z")); }
bool StackTraceElement::isNativeMethod() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNativeMethod", "()Z")); }
bool StackTraceElement::isHashedInJavaBase(Module arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isHashedInJavaBase", "(Ljava/lang/Module;)Z", arg0)); }
void StackTraceElement::initStackTraceElements(StackTraceElement_interface arg0, Throwable arg1) { (classes[className]->invokeStaticMethod<void>("initStackTraceElements", "([Ljava/lang/StackTraceElement;Ljava/lang/Throwable;)V", arg0, arg1)); }
void StackTraceElement::computeFormat() { (classes[className]->invokeMethod<void>(this->object, "computeFormat", "()V")); }
void StackTraceElement::initStackTraceElement(StackTraceElement arg0, StackFrameInfo arg1) { (classes[className]->invokeStaticMethod<void>("initStackTraceElement", "(Ljava/lang/StackTraceElement;Ljava/lang/StackFrameInfo;)V", arg0, arg1)); }
String StackTraceElement::getFileName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFileName", "()Ljava/lang/String;")); }
int StackTraceElement::getLineNumber() { return int(*classes[className]->invokeMethod<int>(this->object, "getLineNumber", "()I")); }
String StackTraceElement::getModuleName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getModuleName", "()Ljava/lang/String;")); }
String StackTraceElement::getModuleVersion() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getModuleVersion", "()Ljava/lang/String;")); }
String StackTraceElement::getClassLoaderName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getClassLoaderName", "()Ljava/lang/String;")); }
String StackTraceElement::getClassName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getClassName", "()Ljava/lang/String;")); }
String StackTraceElement::getMethodName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getMethodName", "()Ljava/lang/String;")); }

String StackFrameInfo::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Class StackFrameInfo::declaringClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "declaringClass", "()Ljava/lang/Class;")); }
void StackFrameInfo::ensureRetainClassRefEnabled() { (classes[className]->invokeMethod<void>(this->object, "ensureRetainClassRefEnabled", "()V")); }

void WorldClient::playSound(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5, bool arg6) { (classes[className]->invokeMethod<void>(this->object, "playSound", "(DDDLjava/lang/String;FFZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void WorldClient::doPreChunk(int arg0, int arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "doPreChunk", "(IIZ)V", arg0, arg1, arg2)); }
void WorldClient::tick() { (classes[className]->invokeMethod<void>(this->object, "tick", "()V")); }
CrashReportCategory WorldClient::addWorldInfoToCrashReport(CrashReport arg0) { return CrashReportCategory(*classes[className]->invokeMethod<jobject>(this->object, "addWorldInfoToCrashReport", "(Lnet/minecraft/crash/CrashReport;)Lnet/minecraft/crash/CrashReportCategory;", arg0)); }
void WorldClient::doVoidFogParticles(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "doVoidFogParticles", "(III)V", arg0, arg1, arg2)); }
bool WorldClient::spawnEntityInWorld(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "spawnEntityInWorld", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void WorldClient::removeAllEntities() { (classes[className]->invokeMethod<void>(this->object, "removeAllEntities", "()V")); }
void WorldClient::removeEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "removeEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
IChunkProvider WorldClient::createChunkProvider() { return IChunkProvider(*classes[className]->invokeMethod<jobject>(this->object, "createChunkProvider", "()Lnet/minecraft/world/chunk/IChunkProvider;")); }
void WorldClient::onEntityAdded(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEntityAdded", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void WorldClient::onEntityRemoved(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEntityRemoved", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void WorldClient::updateWeather() { (classes[className]->invokeMethod<void>(this->object, "updateWeather", "()V")); }
int WorldClient::getRenderDistanceChunks() { return int(*classes[className]->invokeMethod<int>(this->object, "getRenderDistanceChunks", "()I")); }
void WorldClient::updateBlocks() { (classes[className]->invokeMethod<void>(this->object, "updateBlocks", "()V")); }
Entity WorldClient::getEntityByID(int arg0) { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "getEntityByID", "(I)Lnet/minecraft/entity/Entity;", arg0)); }
void WorldClient::setWorldTime(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldTime", "(J)V", arg0)); }
void WorldClient::makeFireworks(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, NBTTagCompound arg6) { (classes[className]->invokeMethod<void>(this->object, "makeFireworks", "(DDDDDDLnet/minecraft/nbt/NBTTagCompound;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void WorldClient::addEntityToWorld(int arg0, Entity arg1) { (classes[className]->invokeMethod<void>(this->object, "addEntityToWorld", "(ILnet/minecraft/entity/Entity;)V", arg0, arg1)); }
Entity WorldClient::removeEntityFromWorld(int arg0) { return Entity(*classes[className]->invokeMethod<jobject>(this->object, "removeEntityFromWorld", "(I)Lnet/minecraft/entity/Entity;", arg0)); }
void WorldClient::playSoundAtPos(BlockPos arg0, String arg1, float arg2, float arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "playSoundAtPos", "(Lnet/minecraft/util/BlockPos;Ljava/lang/String;FFZ)V", arg0, arg1, arg2, arg3, arg4)); }
void WorldClient::setWorldScoreboard(Scoreboard arg0) { (classes[className]->invokeMethod<void>(this->object, "setWorldScoreboard", "(Lnet/minecraft/scoreboard/Scoreboard;)V", arg0)); }
void WorldClient::sendQuittingDisconnectingPacket() { (classes[className]->invokeMethod<void>(this->object, "sendQuittingDisconnectingPacket", "()V")); }
void WorldClient::invalidateBlockReceiveRegion(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "invalidateBlockReceiveRegion", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool WorldClient::invalidateRegionAndSetBlock(BlockPos arg0, IBlockState arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "invalidateRegionAndSetBlock", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)Z", arg0, arg1)); }

String Session::getToken() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getToken", "()Ljava/lang/String;")); }
GameProfile Session::getProfile() { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getProfile", "()Lcom/mojang/authlib/GameProfile;")); }
String Session::getUsername() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUsername", "()Ljava/lang/String;")); }
String Session::getSessionID() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSessionID", "()Ljava/lang/String;")); }
String Session::getPlayerID() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerID", "()Ljava/lang/String;")); }
Session_Type Session::getSessionType() { return Session_Type(*classes[className]->invokeMethod<jobject>(this->object, "getSessionType", "()Lnet/minecraft/util/Session$Type;")); }

Session_Type Session_Type::setSessionType(String arg0) { return Session_Type(*classes[className]->invokeStaticMethod<jobject>("setSessionType", "(Ljava/lang/String;)Lnet/minecraft/util/Session$Type;", arg0)); }
Session_Type Session_Type::valueOf(String arg0) { return Session_Type(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/util/Session$Type;", arg0)); }

void GuiScreen::drawScreen(int arg0, int arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "drawScreen", "(IIF)V", arg0, arg1, arg2)); }
void GuiScreen::keyTyped(char arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "keyTyped", "(CI)V", arg0, arg1)); }
void GuiScreen::setText(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setText", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void GuiScreen::initGui() { (classes[className]->invokeMethod<void>(this->object, "initGui", "()V")); }
void GuiScreen::onResize(Minecraft arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "onResize", "(Lnet/minecraft/client/Minecraft;II)V", arg0, arg1, arg2)); }
void GuiScreen::onGuiClosed() { (classes[className]->invokeMethod<void>(this->object, "onGuiClosed", "()V")); }
void GuiScreen::setWorldAndResolution(Minecraft arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setWorldAndResolution", "(Lnet/minecraft/client/Minecraft;II)V", arg0, arg1, arg2)); }
bool GuiScreen::doesGuiPauseGame() { return bool(*classes[className]->invokeMethod<bool>(this->object, "doesGuiPauseGame", "()Z")); }
void GuiScreen::handleInput() { (classes[className]->invokeMethod<void>(this->object, "handleInput", "()V")); }
void GuiScreen::updateScreen() { (classes[className]->invokeMethod<void>(this->object, "updateScreen", "()V")); }
void GuiScreen::handleMouseInput() { (classes[className]->invokeMethod<void>(this->object, "handleMouseInput", "()V")); }
void GuiScreen::handleKeyboardInput() { (classes[className]->invokeMethod<void>(this->object, "handleKeyboardInput", "()V")); }
bool GuiScreen::isShiftKeyDown() { return bool(*classes[className]->invokeStaticMethod<bool>("isShiftKeyDown", "()Z")); }
bool GuiScreen::isAltKeyDown() { return bool(*classes[className]->invokeStaticMethod<bool>("isAltKeyDown", "()Z")); }
bool GuiScreen::isCtrlKeyDown() { return bool(*classes[className]->invokeStaticMethod<bool>("isCtrlKeyDown", "()Z")); }
String GuiScreen::getClipboardString() { return String(*classes[className]->invokeStaticMethod<jobject>("getClipboardString", "()Ljava/lang/String;")); }
void GuiScreen::setClipboardString(String arg0) { (classes[className]->invokeStaticMethod<void>("setClipboardString", "(Ljava/lang/String;)V", arg0)); }
void GuiScreen::renderToolTip(ItemStack arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "renderToolTip", "(Lnet/minecraft/item/ItemStack;II)V", arg0, arg1, arg2)); }
void GuiScreen::drawHoveringText(List arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawHoveringText", "(Ljava/util/List;II)V", arg0, arg1, arg2)); }
void GuiScreen::handleComponentHover(IChatComponent arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "handleComponentHover", "(Lnet/minecraft/util/IChatComponent;II)V", arg0, arg1, arg2)); }
bool GuiScreen::handleComponentClick(IChatComponent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleComponentClick", "(Lnet/minecraft/util/IChatComponent;)Z", arg0)); }
void GuiScreen::openWebLink(URI arg0) { (classes[className]->invokeMethod<void>(this->object, "openWebLink", "(Ljava/net/URI;)V", arg0)); }
void GuiScreen::mouseClicked(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "mouseClicked", "(III)V", arg0, arg1, arg2)); }
void GuiScreen::actionPerformed(GuiButton arg0) { (classes[className]->invokeMethod<void>(this->object, "actionPerformed", "(Lnet/minecraft/client/gui/GuiButton;)V", arg0)); }
void GuiScreen::mouseReleased(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "mouseReleased", "(III)V", arg0, arg1, arg2)); }
void GuiScreen::mouseClickMove(int arg0, int arg1, int arg2, long arg3) { (classes[className]->invokeMethod<void>(this->object, "mouseClickMove", "(IIIJ)V", arg0, arg1, arg2, arg3)); }
void GuiScreen::drawDefaultBackground() { (classes[className]->invokeMethod<void>(this->object, "drawDefaultBackground", "()V")); }
void GuiScreen::drawWorldBackground(int arg0) { (classes[className]->invokeMethod<void>(this->object, "drawWorldBackground", "(I)V", arg0)); }
void GuiScreen::drawBackground(int arg0) { (classes[className]->invokeMethod<void>(this->object, "drawBackground", "(I)V", arg0)); }
bool GuiScreen::isKeyComboCtrlX(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isKeyComboCtrlX", "(I)Z", arg0)); }
bool GuiScreen::isKeyComboCtrlV(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isKeyComboCtrlV", "(I)Z", arg0)); }
bool GuiScreen::isKeyComboCtrlC(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isKeyComboCtrlC", "(I)Z", arg0)); }
bool GuiScreen::isKeyComboCtrlA(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isKeyComboCtrlA", "(I)Z", arg0)); }
void GuiScreen::sendChatMessage(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "sendChatMessage", "(Ljava/lang/String;Z)V", arg0, arg1)); }
void GuiScreen::sendChatMessage(String arg0) { (classes[className]->invokeMethod<void>(this->object, "sendChatMessage", "(Ljava/lang/String;)V", arg0)); }
void GuiScreen::drawCreativeTabHoveringText(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawCreativeTabHoveringText", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }

void GuiButton::setWidth(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setWidth", "(I)V", arg0)); }
void GuiButton::drawButton(Minecraft arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawButton", "(Lnet/minecraft/client/Minecraft;II)V", arg0, arg1, arg2)); }
bool GuiButton::mousePressed(Minecraft arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mousePressed", "(Lnet/minecraft/client/Minecraft;II)Z", arg0, arg1, arg2)); }
void GuiButton::playPressSound(SoundHandler arg0) { (classes[className]->invokeMethod<void>(this->object, "playPressSound", "(Lnet/minecraft/client/audio/SoundHandler;)V", arg0)); }
void GuiButton::mouseReleased(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "mouseReleased", "(II)V", arg0, arg1)); }
int GuiButton::getHoverState(bool arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getHoverState", "(Z)I", arg0)); }
void GuiButton::mouseDragged(Minecraft arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "mouseDragged", "(Lnet/minecraft/client/Minecraft;II)V", arg0, arg1, arg2)); }
bool GuiButton::isMouseOver() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMouseOver", "()Z")); }
void GuiButton::drawButtonForegroundLayer(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "drawButtonForegroundLayer", "(II)V", arg0, arg1)); }
int GuiButton::getButtonWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getButtonWidth", "()I")); }

void SoundHandler::stopSound(ISound arg0) { (classes[className]->invokeMethod<void>(this->object, "stopSound", "(Lnet/minecraft/client/audio/ISound;)V", arg0)); }
SoundEventAccessorComposite SoundHandler::getSound(ResourceLocation arg0) { return SoundEventAccessorComposite(*classes[className]->invokeMethod<jobject>(this->object, "getSound", "(Lnet/minecraft/util/ResourceLocation;)Lnet/minecraft/client/audio/SoundEventAccessorComposite;", arg0)); }
void SoundHandler::playSound(ISound arg0) { (classes[className]->invokeMethod<void>(this->object, "playSound", "(Lnet/minecraft/client/audio/ISound;)V", arg0)); }
void SoundHandler::stopSounds() { (classes[className]->invokeMethod<void>(this->object, "stopSounds", "()V")); }
void SoundHandler::resumeSounds() { (classes[className]->invokeMethod<void>(this->object, "resumeSounds", "()V")); }
void SoundHandler::unloadSounds() { (classes[className]->invokeMethod<void>(this->object, "unloadSounds", "()V")); }
void SoundHandler::setListener(EntityPlayer arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setListener", "(Lnet/minecraft/entity/player/EntityPlayer;F)V", arg0, arg1)); }
void SoundHandler::pauseSounds() { (classes[className]->invokeMethod<void>(this->object, "pauseSounds", "()V")); }
bool SoundHandler::isSoundPlaying(ISound arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSoundPlaying", "(Lnet/minecraft/client/audio/ISound;)Z", arg0)); }
Map SoundHandler::getSoundMap(InputStream arg0) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getSoundMap", "(Ljava/io/InputStream;)Ljava/util/Map;", arg0)); }
void SoundHandler::loadSoundResource(ResourceLocation arg0, SoundList arg1) { (classes[className]->invokeMethod<void>(this->object, "loadSoundResource", "(Lnet/minecraft/util/ResourceLocation;Lnet/minecraft/client/audio/SoundList;)V", arg0, arg1)); }
void SoundHandler::setSoundLevel(SoundCategory arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setSoundLevel", "(Lnet/minecraft/client/audio/SoundCategory;F)V", arg0, arg1)); }
void SoundHandler::playDelayedSound(ISound arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "playDelayedSound", "(Lnet/minecraft/client/audio/ISound;I)V", arg0, arg1)); }
SoundEventAccessorComposite SoundHandler::getRandomSoundFromCategories(SoundCategory_interface arg0) { return SoundEventAccessorComposite(*classes[className]->invokeMethod<jobject>(this->object, "getRandomSoundFromCategories", "([Lnet/minecraft/client/audio/SoundCategory;)Lnet/minecraft/client/audio/SoundEventAccessorComposite;", arg0)); }


SoundPoolEntry SoundEventAccessorComposite::cloneEntry() { return SoundPoolEntry(*classes[className]->invokeMethod<jobject>(this->object, "cloneEntry", "()Lnet/minecraft/client/audio/SoundPoolEntry;")); }
SoundCategory SoundEventAccessorComposite::getSoundCategory() { return SoundCategory(*classes[className]->invokeMethod<jobject>(this->object, "getSoundCategory", "()Lnet/minecraft/client/audio/SoundCategory;")); }
void SoundEventAccessorComposite::addSoundToEventPool(ISoundEventAccessor arg0) { (classes[className]->invokeMethod<void>(this->object, "addSoundToEventPool", "(Lnet/minecraft/client/audio/ISoundEventAccessor;)V", arg0)); }
ResourceLocation SoundEventAccessorComposite::getSoundEventLocation() { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getSoundEventLocation", "()Lnet/minecraft/util/ResourceLocation;")); }

void SoundPoolEntry::setPitch(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setPitch", "(D)V", arg0)); }
void SoundPoolEntry::setVolume(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setVolume", "(D)V", arg0)); }
double SoundPoolEntry::getPitch() { return double(*classes[className]->invokeMethod<double>(this->object, "getPitch", "()D")); }
double SoundPoolEntry::getVolume() { return double(*classes[className]->invokeMethod<double>(this->object, "getVolume", "()D")); }
ResourceLocation SoundPoolEntry::getSoundPoolEntryLocation() { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getSoundPoolEntryLocation", "()Lnet/minecraft/util/ResourceLocation;")); }
bool SoundPoolEntry::isStreamingSound() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStreamingSound", "()Z")); }

SoundCategory SoundCategory::getCategory(String arg0) { return SoundCategory(*classes[className]->invokeStaticMethod<jobject>("getCategory", "(Ljava/lang/String;)Lnet/minecraft/client/audio/SoundCategory;", arg0)); }
String SoundCategory::getCategoryName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getCategoryName", "()Ljava/lang/String;")); }
int SoundCategory::getCategoryId() { return int(*classes[className]->invokeMethod<int>(this->object, "getCategoryId", "()I")); }
SoundCategory SoundCategory::valueOf(String arg0) { return SoundCategory(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/client/audio/SoundCategory;", arg0)); }


bool SoundList::canReplaceExisting() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canReplaceExisting", "()Z")); }
SoundCategory SoundList::getSoundCategory() { return SoundCategory(*classes[className]->invokeMethod<jobject>(this->object, "getSoundCategory", "()Lnet/minecraft/client/audio/SoundCategory;")); }
List SoundList::getSoundList() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getSoundList", "()Ljava/util/List;")); }
void SoundList::setReplaceExisting(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setReplaceExisting", "(Z)V", arg0)); }
void SoundList::setSoundCategory(SoundCategory arg0) { (classes[className]->invokeMethod<void>(this->object, "setSoundCategory", "(Lnet/minecraft/client/audio/SoundCategory;)V", arg0)); }


void Gui::drawRect(int arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeStaticMethod<void>("drawRect", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }
void Gui::drawString(FontRenderer arg0, String arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "drawString", "(Lnet/minecraft/client/gui/FontRenderer;Ljava/lang/String;III)V", arg0, arg1, arg2, arg3, arg4)); }
void Gui::drawHorizontalLine(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "drawHorizontalLine", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Gui::drawVerticalLine(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "drawVerticalLine", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Gui::drawCenteredString(FontRenderer arg0, String arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "drawCenteredString", "(Lnet/minecraft/client/gui/FontRenderer;Ljava/lang/String;III)V", arg0, arg1, arg2, arg3, arg4)); }
void Gui::drawTexturedModalRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "drawTexturedModalRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Gui::drawTexturedModalRect(float arg0, float arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "drawTexturedModalRect", "(FFIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Gui::drawTexturedModalRect(int arg0, int arg1, TextureAtlasSprite arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "drawTexturedModalRect", "(IILnet/minecraft/client/renderer/texture/TextureAtlasSprite;II)V", arg0, arg1, arg2, arg3, arg4)); }
void Gui::drawGradientRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "drawGradientRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Gui::drawScaledCustomSizeModalRect(int arg0, int arg1, float arg2, float arg3, int arg4, int arg5, int arg6, int arg7, float arg8, float arg9) { (classes[className]->invokeStaticMethod<void>("drawScaledCustomSizeModalRect", "(IIFFIIIIFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
void Gui::drawModalRectWithCustomSizedTexture(int arg0, int arg1, float arg2, float arg3, int arg4, int arg5, float arg6, float arg7) { (classes[className]->invokeStaticMethod<void>("drawModalRectWithCustomSizedTexture", "(IIFFIIFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

int FontRenderer::drawString(String arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "drawString", "(Ljava/lang/String;III)I", arg0, arg1, arg2, arg3)); }
int FontRenderer::drawString(String arg0, float arg1, float arg2, int arg3, bool arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "drawString", "(Ljava/lang/String;FFIZ)I", arg0, arg1, arg2, arg3, arg4)); }
void FontRenderer::setUnicodeFlag(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setUnicodeFlag", "(Z)V", arg0)); }
void FontRenderer::setBidiFlag(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setBidiFlag", "(Z)V", arg0)); }
int FontRenderer::drawStringWithShadow(String arg0, float arg1, float arg2, int arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "drawStringWithShadow", "(Ljava/lang/String;FFI)I", arg0, arg1, arg2, arg3)); }
int FontRenderer::getStringWidth(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getStringWidth", "(Ljava/lang/String;)I", arg0)); }
List FontRenderer::listFormattedStringToWidth(String arg0, int arg1) { return List(*classes[className]->invokeMethod<jobject>(this->object, "listFormattedStringToWidth", "(Ljava/lang/String;I)Ljava/util/List;", arg0, arg1)); }
void FontRenderer::readGlyphSizes() { (classes[className]->invokeMethod<void>(this->object, "readGlyphSizes", "()V")); }
void FontRenderer::readFontTexture() { (classes[className]->invokeMethod<void>(this->object, "readFontTexture", "()V")); }
float FontRenderer::func_181559_a(char arg0, bool arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "func_181559_a", "(CZ)F", arg0, arg1)); }
float FontRenderer::renderDefaultChar(int arg0, bool arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "renderDefaultChar", "(IZ)F", arg0, arg1)); }
float FontRenderer::renderUnicodeChar(char arg0, bool arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "renderUnicodeChar", "(CZ)F", arg0, arg1)); }
ResourceLocation FontRenderer::getUnicodePageLocation(int arg0) { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getUnicodePageLocation", "(I)Lnet/minecraft/util/ResourceLocation;", arg0)); }
void FontRenderer::loadGlyphTexture(int arg0) { (classes[className]->invokeMethod<void>(this->object, "loadGlyphTexture", "(I)V", arg0)); }
void FontRenderer::resetStyles() { (classes[className]->invokeMethod<void>(this->object, "resetStyles", "()V")); }
int FontRenderer::renderString(String arg0, float arg1, float arg2, int arg3, bool arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "renderString", "(Ljava/lang/String;FFIZ)I", arg0, arg1, arg2, arg3, arg4)); }
String FontRenderer::bidiReorder(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "bidiReorder", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void FontRenderer::renderStringAtPos(String arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "renderStringAtPos", "(Ljava/lang/String;Z)V", arg0, arg1)); }
int FontRenderer::getCharWidth(char arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getCharWidth", "(C)I", arg0)); }
int FontRenderer::renderStringAligned(String arg0, int arg1, int arg2, int arg3, int arg4, bool arg5) { return int(*classes[className]->invokeMethod<int>(this->object, "renderStringAligned", "(Ljava/lang/String;IIIIZ)I", arg0, arg1, arg2, arg3, arg4, arg5)); }
String FontRenderer::trimStringToWidth(String arg0, int arg1, bool arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "trimStringToWidth", "(Ljava/lang/String;IZ)Ljava/lang/String;", arg0, arg1, arg2)); }
String FontRenderer::trimStringToWidth(String arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "trimStringToWidth", "(Ljava/lang/String;I)Ljava/lang/String;", arg0, arg1)); }
String FontRenderer::trimStringNewline(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "trimStringNewline", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void FontRenderer::drawSplitString(String arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "drawSplitString", "(Ljava/lang/String;IIII)V", arg0, arg1, arg2, arg3, arg4)); }
void FontRenderer::renderSplitString(String arg0, int arg1, int arg2, int arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "renderSplitString", "(Ljava/lang/String;IIIZ)V", arg0, arg1, arg2, arg3, arg4)); }
int FontRenderer::splitStringWidth(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "splitStringWidth", "(Ljava/lang/String;I)I", arg0, arg1)); }
bool FontRenderer::getUnicodeFlag() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getUnicodeFlag", "()Z")); }
String FontRenderer::wrapFormattedStringToWidth(String arg0, int arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "wrapFormattedStringToWidth", "(Ljava/lang/String;I)Ljava/lang/String;", arg0, arg1)); }
int FontRenderer::sizeStringToWidth(String arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "sizeStringToWidth", "(Ljava/lang/String;I)I", arg0, arg1)); }
String FontRenderer::getFormatFromString(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getFormatFromString", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool FontRenderer::isFormatColor(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isFormatColor", "(C)Z", arg0)); }
bool FontRenderer::isFormatSpecial(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isFormatSpecial", "(C)Z", arg0)); }
bool FontRenderer::getBidiFlag() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getBidiFlag", "()Z")); }
int FontRenderer::getColorCode(char arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getColorCode", "(C)I", arg0)); }

void TextureAtlasSprite::initSprite(int arg0, int arg1, int arg2, int arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "initSprite", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }
void TextureAtlasSprite::loadSprite(BufferedImage_interface arg0, AnimationMetadataSection arg1) { (classes[className]->invokeMethod<void>(this->object, "loadSprite", "([Ljava/awt/image/BufferedImage;Lnet/minecraft/client/resources/data/AnimationMetadataSection;)V", arg0, arg1)); }
int TextureAtlasSprite::getOriginX() { return int(*classes[className]->invokeMethod<int>(this->object, "getOriginX", "()I")); }
int TextureAtlasSprite::getOriginY() { return int(*classes[className]->invokeMethod<int>(this->object, "getOriginY", "()I")); }
float TextureAtlasSprite::getMinU() { return float(*classes[className]->invokeMethod<float>(this->object, "getMinU", "()F")); }
float TextureAtlasSprite::getMaxV() { return float(*classes[className]->invokeMethod<float>(this->object, "getMaxV", "()F")); }
float TextureAtlasSprite::getMaxU() { return float(*classes[className]->invokeMethod<float>(this->object, "getMaxU", "()F")); }
float TextureAtlasSprite::getMinV() { return float(*classes[className]->invokeMethod<float>(this->object, "getMinV", "()F")); }
void TextureAtlasSprite::setIconWidth(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setIconWidth", "(I)V", arg0)); }
void TextureAtlasSprite::setIconHeight(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setIconHeight", "(I)V", arg0)); }
void TextureAtlasSprite::setFramesTextureData(List arg0) { (classes[className]->invokeMethod<void>(this->object, "setFramesTextureData", "(Ljava/util/List;)V", arg0)); }
String TextureAtlasSprite::getIconName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getIconName", "()Ljava/lang/String;")); }
int TextureAtlasSprite::getIconWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getIconWidth", "()I")); }
int TextureAtlasSprite::getIconHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getIconHeight", "()I")); }
void TextureAtlasSprite::generateMipmaps(int arg0) { (classes[className]->invokeMethod<void>(this->object, "generateMipmaps", "(I)V", arg0)); }
bool TextureAtlasSprite::hasAnimationMetadata() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasAnimationMetadata", "()Z")); }
TextureAtlasSprite TextureAtlasSprite::makeAtlasSprite(ResourceLocation arg0) { return TextureAtlasSprite(*classes[className]->invokeStaticMethod<jobject>("makeAtlasSprite", "(Lnet/minecraft/util/ResourceLocation;)Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;", arg0)); }
void TextureAtlasSprite::updateAnimation() { (classes[className]->invokeMethod<void>(this->object, "updateAnimation", "()V")); }
void TextureAtlasSprite::setLocationNameClock(String arg0) { (classes[className]->invokeStaticMethod<void>("setLocationNameClock", "(Ljava/lang/String;)V", arg0)); }
void TextureAtlasSprite::setLocationNameCompass(String arg0) { (classes[className]->invokeStaticMethod<void>("setLocationNameCompass", "(Ljava/lang/String;)V", arg0)); }
float TextureAtlasSprite::getInterpolatedU(double arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getInterpolatedU", "(D)F", arg0)); }
float TextureAtlasSprite::getInterpolatedV(double arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getInterpolatedV", "(D)F", arg0)); }
int TextureAtlasSprite::getFrameCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameCount", "()I")); }
void TextureAtlasSprite::resetSprite() { (classes[className]->invokeMethod<void>(this->object, "resetSprite", "()V")); }
void TextureAtlasSprite::allocateFrameTextureData(int arg0) { (classes[className]->invokeMethod<void>(this->object, "allocateFrameTextureData", "(I)V", arg0)); }
void TextureAtlasSprite::clearFramesTextureData() { (classes[className]->invokeMethod<void>(this->object, "clearFramesTextureData", "()V")); }
void TextureAtlasSprite::updateAnimationInterpolated() { (classes[className]->invokeMethod<void>(this->object, "updateAnimationInterpolated", "()V")); }
void TextureAtlasSprite::copyFrom(TextureAtlasSprite arg0) { (classes[className]->invokeMethod<void>(this->object, "copyFrom", "(Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;)V", arg0)); }
String TextureAtlasSprite::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }


int AnimationMetadataSection::getFrameTimeSingle(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameTimeSingle", "(I)I", arg0)); }
int AnimationMetadataSection::getFrameIndex(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameIndex", "(I)I", arg0)); }
int AnimationMetadataSection::getFrameCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameCount", "()I")); }
bool AnimationMetadataSection::isInterpolate() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInterpolate", "()Z")); }
Set AnimationMetadataSection::getFrameIndexSet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getFrameIndexSet", "()Ljava/util/Set;")); }
int AnimationMetadataSection::getFrameTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameTime", "()I")); }
int AnimationMetadataSection::getFrameHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameHeight", "()I")); }
int AnimationMetadataSection::getFrameWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameWidth", "()I")); }
AnimationFrame AnimationMetadataSection::getAnimationFrame(int arg0) { return AnimationFrame(*classes[className]->invokeMethod<jobject>(this->object, "getAnimationFrame", "(I)Lnet/minecraft/client/resources/data/AnimationFrame;", arg0)); }
bool AnimationMetadataSection::frameHasTime(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "frameHasTime", "(I)Z", arg0)); }

bool AnimationFrame::hasNoTime() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasNoTime", "()Z")); }
int AnimationFrame::getFrameIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameIndex", "()I")); }
int AnimationFrame::getFrameTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getFrameTime", "()I")); }

ITextureObject TextureManager::getTexture(ResourceLocation arg0) { return ITextureObject(*classes[className]->invokeMethod<jobject>(this->object, "getTexture", "(Lnet/minecraft/util/ResourceLocation;)Lnet/minecraft/client/renderer/texture/ITextureObject;", arg0)); }
bool TextureManager::loadTickableTexture(ResourceLocation arg0, ITickableTextureObject arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "loadTickableTexture", "(Lnet/minecraft/util/ResourceLocation;Lnet/minecraft/client/renderer/texture/ITickableTextureObject;)Z", arg0, arg1)); }
void TextureManager::bindTexture(ResourceLocation arg0) { (classes[className]->invokeMethod<void>(this->object, "bindTexture", "(Lnet/minecraft/util/ResourceLocation;)V", arg0)); }
void TextureManager::deleteTexture(ResourceLocation arg0) { (classes[className]->invokeMethod<void>(this->object, "deleteTexture", "(Lnet/minecraft/util/ResourceLocation;)V", arg0)); }
ResourceLocation TextureManager::getDynamicTextureLocation(String arg0, DynamicTexture arg1) { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getDynamicTextureLocation", "(Ljava/lang/String;Lnet/minecraft/client/renderer/texture/DynamicTexture;)Lnet/minecraft/util/ResourceLocation;", arg0, arg1)); }
bool TextureManager::loadTexture(ResourceLocation arg0, ITextureObject arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "loadTexture", "(Lnet/minecraft/util/ResourceLocation;Lnet/minecraft/client/renderer/texture/ITextureObject;)Z", arg0, arg1)); }



void DynamicTexture::updateDynamicTexture() { (classes[className]->invokeMethod<void>(this->object, "updateDynamicTexture", "()V")); }

void AbstractTexture::setBlurMipmapDirect(bool arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setBlurMipmapDirect", "(ZZ)V", arg0, arg1)); }
void AbstractTexture::deleteGlTexture() { (classes[className]->invokeMethod<void>(this->object, "deleteGlTexture", "()V")); }

void Framebuffer::setFramebufferColor(float arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "setFramebufferColor", "(FFFF)V", arg0, arg1, arg2, arg3)); }
void Framebuffer::bindFramebuffer(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "bindFramebuffer", "(Z)V", arg0)); }
void Framebuffer::unbindFramebuffer() { (classes[className]->invokeMethod<void>(this->object, "unbindFramebuffer", "()V")); }
void Framebuffer::framebufferRender(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "framebufferRender", "(II)V", arg0, arg1)); }
void Framebuffer::createBindFramebuffer(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "createBindFramebuffer", "(II)V", arg0, arg1)); }
void Framebuffer::deleteFramebuffer() { (classes[className]->invokeMethod<void>(this->object, "deleteFramebuffer", "()V")); }
void Framebuffer::createFramebuffer(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "createFramebuffer", "(II)V", arg0, arg1)); }
void Framebuffer::checkFramebufferComplete() { (classes[className]->invokeMethod<void>(this->object, "checkFramebufferComplete", "()V")); }
void Framebuffer::unbindFramebufferTexture() { (classes[className]->invokeMethod<void>(this->object, "unbindFramebufferTexture", "()V")); }
void Framebuffer::framebufferClear() { (classes[className]->invokeMethod<void>(this->object, "framebufferClear", "()V")); }
void Framebuffer::setFramebufferFilter(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setFramebufferFilter", "(I)V", arg0)); }
void Framebuffer::bindFramebufferTexture() { (classes[className]->invokeMethod<void>(this->object, "bindFramebufferTexture", "()V")); }
void Framebuffer::framebufferRenderExt(int arg0, int arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "framebufferRenderExt", "(IIZ)V", arg0, arg1, arg2)); }

void MusicTicker::func_181558_a(MusicTicker_MusicType arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181558_a", "(Lnet/minecraft/client/audio/MusicTicker$MusicType;)V", arg0)); }
void MusicTicker::func_181557_a() { (classes[className]->invokeMethod<void>(this->object, "func_181557_a", "()V")); }

ResourceLocation MusicTicker_MusicType::getMusicLocation() { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getMusicLocation", "()Lnet/minecraft/util/ResourceLocation;")); }
int MusicTicker_MusicType::getMinDelay() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinDelay", "()I")); }
int MusicTicker_MusicType::getMaxDelay() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxDelay", "()I")); }
MusicTicker_MusicType MusicTicker_MusicType::valueOf(String arg0) { return MusicTicker_MusicType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/client/audio/MusicTicker$MusicType;", arg0)); }

void NetHandlerPlayClient::addToSendQueue(Packet arg0) { (classes[className]->invokeMethod<void>(this->object, "addToSendQueue", "(Lnet/minecraft/network/Packet;)V", arg0)); }
Collection NetHandlerPlayClient::getPlayerInfoMap() { return Collection(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerInfoMap", "()Ljava/util/Collection;")); }
NetworkPlayerInfo NetHandlerPlayClient::getPlayerInfo(UUID arg0) { return NetworkPlayerInfo(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerInfo", "(Ljava/util/UUID;)Lnet/minecraft/client/network/NetworkPlayerInfo;", arg0)); }
NetworkPlayerInfo NetHandlerPlayClient::getPlayerInfo(String arg0) { return NetworkPlayerInfo(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerInfo", "(Ljava/lang/String;)Lnet/minecraft/client/network/NetworkPlayerInfo;", arg0)); }
NetworkManager NetHandlerPlayClient::getNetworkManager() { return NetworkManager(*classes[className]->invokeMethod<jobject>(this->object, "getNetworkManager", "()Lnet/minecraft/network/NetworkManager;")); }
GameProfile NetHandlerPlayClient::getGameProfile() { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom/mojang/authlib/GameProfile;")); }
void NetHandlerPlayClient::cleanup() { (classes[className]->invokeMethod<void>(this->object, "cleanup", "()V")); }

void NetworkPlayerInfo::setResponseTime(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setResponseTime", "(I)V", arg0)); }
void NetworkPlayerInfo::setDisplayName(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "setDisplayName", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
WorldSettings_GameType NetworkPlayerInfo::getGameType() { return WorldSettings_GameType(*classes[className]->invokeMethod<jobject>(this->object, "getGameType", "()Lnet/minecraft/world/WorldSettings$GameType;")); }
bool NetworkPlayerInfo::hasLocationSkin() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasLocationSkin", "()Z")); }
ResourceLocation NetworkPlayerInfo::getLocationSkin() { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getLocationSkin", "()Lnet/minecraft/util/ResourceLocation;")); }
ResourceLocation NetworkPlayerInfo::getLocationCape() { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getLocationCape", "()Lnet/minecraft/util/ResourceLocation;")); }
String NetworkPlayerInfo::getSkinType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSkinType", "()Ljava/lang/String;")); }
GameProfile NetworkPlayerInfo::getGameProfile() { return GameProfile(*classes[className]->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom/mojang/authlib/GameProfile;")); }
void NetworkPlayerInfo::setGameType(WorldSettings_GameType arg0) { (classes[className]->invokeMethod<void>(this->object, "setGameType", "(Lnet/minecraft/world/WorldSettings$GameType;)V", arg0)); }
int NetworkPlayerInfo::getResponseTime() { return int(*classes[className]->invokeMethod<int>(this->object, "getResponseTime", "()I")); }
void NetworkPlayerInfo::loadPlayerTextures() { (classes[className]->invokeMethod<void>(this->object, "loadPlayerTextures", "()V")); }
ScorePlayerTeam NetworkPlayerInfo::getPlayerTeam() { return ScorePlayerTeam(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerTeam", "()Lnet/minecraft/scoreboard/ScorePlayerTeam;")); }
int NetworkPlayerInfo::func_178835_l() { return int(*classes[className]->invokeMethod<int>(this->object, "func_178835_l", "()I")); }
void NetworkPlayerInfo::func_178836_b(int arg0) { (classes[className]->invokeMethod<void>(this->object, "func_178836_b", "(I)V", arg0)); }
int NetworkPlayerInfo::func_178860_m() { return int(*classes[className]->invokeMethod<int>(this->object, "func_178860_m", "()I")); }
void NetworkPlayerInfo::func_178857_c(int arg0) { (classes[className]->invokeMethod<void>(this->object, "func_178857_c", "(I)V", arg0)); }
long NetworkPlayerInfo::func_178847_n() { return long(*classes[className]->invokeMethod<long>(this->object, "func_178847_n", "()J")); }
void NetworkPlayerInfo::func_178846_a(long arg0) { (classes[className]->invokeMethod<void>(this->object, "func_178846_a", "(J)V", arg0)); }
long NetworkPlayerInfo::func_178858_o() { return long(*classes[className]->invokeMethod<long>(this->object, "func_178858_o", "()J")); }
void NetworkPlayerInfo::func_178844_b(long arg0) { (classes[className]->invokeMethod<void>(this->object, "func_178844_b", "(J)V", arg0)); }
long NetworkPlayerInfo::func_178855_p() { return long(*classes[className]->invokeMethod<long>(this->object, "func_178855_p", "()J")); }
void NetworkPlayerInfo::func_178843_c(long arg0) { (classes[className]->invokeMethod<void>(this->object, "func_178843_c", "(J)V", arg0)); }
IChatComponent NetworkPlayerInfo::getDisplayName() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet/minecraft/util/IChatComponent;")); }

bool ServerData::func_181041_d() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181041_d", "()Z")); }
ServerData_ServerResourceMode ServerData::getResourceMode() { return ServerData_ServerResourceMode(*classes[className]->invokeMethod<jobject>(this->object, "getResourceMode", "()Lnet/minecraft/client/multiplayer/ServerData$ServerResourceMode;")); }
NBTTagCompound ServerData::getNBTCompound() { return NBTTagCompound(*classes[className]->invokeMethod<jobject>(this->object, "getNBTCompound", "()Lnet/minecraft/nbt/NBTTagCompound;")); }
void ServerData::setResourceMode(ServerData_ServerResourceMode arg0) { (classes[className]->invokeMethod<void>(this->object, "setResourceMode", "(Lnet/minecraft/client/multiplayer/ServerData$ServerResourceMode;)V", arg0)); }
void ServerData::setBase64EncodedIconData(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setBase64EncodedIconData", "(Ljava/lang/String;)V", arg0)); }
String ServerData::getBase64EncodedIconData() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getBase64EncodedIconData", "()Ljava/lang/String;")); }
ServerData ServerData::getServerDataFromNBTCompound(NBTTagCompound arg0) { return ServerData(*classes[className]->invokeStaticMethod<jobject>("getServerDataFromNBTCompound", "(Lnet/minecraft/nbt/NBTTagCompound;)Lnet/minecraft/client/multiplayer/ServerData;", arg0)); }
void ServerData::copyFrom(ServerData arg0) { (classes[className]->invokeMethod<void>(this->object, "copyFrom", "(Lnet/minecraft/client/multiplayer/ServerData;)V", arg0)); }

IChatComponent ServerData_ServerResourceMode::getMotd() { return IChatComponent(*classes[className]->invokeMethod<jobject>(this->object, "getMotd", "()Lnet/minecraft/util/IChatComponent;")); }
ServerData_ServerResourceMode ServerData_ServerResourceMode::valueOf(String arg0) { return ServerData_ServerResourceMode(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/client/multiplayer/ServerData$ServerResourceMode;", arg0)); }

bool IntegratedServer::isHardcore() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHardcore", "()Z")); }
void IntegratedServer::finalTick(CrashReport arg0) { (classes[className]->invokeMethod<void>(this->object, "finalTick", "(Lnet/minecraft/crash/CrashReport;)V", arg0)); }
String IntegratedServer::shareToLAN(WorldSettings_GameType arg0, bool arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "shareToLAN", "(Lnet/minecraft/world/WorldSettings$GameType;Z)Ljava/lang/String;", arg0, arg1)); }
void IntegratedServer::stopServer() { (classes[className]->invokeMethod<void>(this->object, "stopServer", "()V")); }
void IntegratedServer::tick() { (classes[className]->invokeMethod<void>(this->object, "tick", "()V")); }
bool IntegratedServer::getPublic() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getPublic", "()Z")); }
EnumDifficulty IntegratedServer::getDifficulty() { return EnumDifficulty(*classes[className]->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet/minecraft/world/EnumDifficulty;")); }
void IntegratedServer::initiateShutdown() { (classes[className]->invokeMethod<void>(this->object, "initiateShutdown", "()V")); }
void IntegratedServer::setStaticInstance() { (classes[className]->invokeMethod<void>(this->object, "setStaticInstance", "()V")); }
ServerCommandManager IntegratedServer::createNewCommandManager() { return ServerCommandManager(*classes[className]->invokeMethod<jobject>(this->object, "createNewCommandManager", "()Lnet/minecraft/command/ServerCommandManager;")); }
void IntegratedServer::loadAllWorlds(String arg0, String arg1, long arg2, WorldType arg3, String arg4) { (classes[className]->invokeMethod<void>(this->object, "loadAllWorlds", "(Ljava/lang/String;Ljava/lang/String;JLnet/minecraft/world/WorldType;Ljava/lang/String;)V", arg0, arg1, arg2, arg3, arg4)); }
void IntegratedServer::setDifficultyForAllWorlds(EnumDifficulty arg0) { (classes[className]->invokeMethod<void>(this->object, "setDifficultyForAllWorlds", "(Lnet/minecraft/world/EnumDifficulty;)V", arg0)); }
bool IntegratedServer::startServer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "startServer", "()Z")); }
bool IntegratedServer::canStructuresSpawn() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canStructuresSpawn", "()Z")); }
bool IntegratedServer::func_181034_q() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181034_q", "()Z")); }
bool IntegratedServer::func_183002_r() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_183002_r", "()Z")); }
File IntegratedServer::getDataDirectory() { return File(*classes[className]->invokeMethod<jobject>(this->object, "getDataDirectory", "()Ljava/io/File;")); }
bool IntegratedServer::isDedicatedServer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDedicatedServer", "()Z")); }
bool IntegratedServer::func_181035_ah() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181035_ah", "()Z")); }
CrashReport IntegratedServer::addServerInfoToCrashReport(CrashReport arg0) { return CrashReport(*classes[className]->invokeMethod<jobject>(this->object, "addServerInfoToCrashReport", "(Lnet/minecraft/crash/CrashReport;)Lnet/minecraft/crash/CrashReport;", arg0)); }
bool IntegratedServer::isCommandBlockEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCommandBlockEnabled", "()Z")); }
int IntegratedServer::getOpPermissionLevel() { return int(*classes[className]->invokeMethod<int>(this->object, "getOpPermissionLevel", "()I")); }
WorldSettings_GameType IntegratedServer::getGameType() { return WorldSettings_GameType(*classes[className]->invokeMethod<jobject>(this->object, "getGameType", "()Lnet/minecraft/world/WorldSettings$GameType;")); }
void IntegratedServer::setGameType(WorldSettings_GameType arg0) { (classes[className]->invokeMethod<void>(this->object, "setGameType", "(Lnet/minecraft/world/WorldSettings$GameType;)V", arg0)); }


List ResourcePackRepository::getRepositoryEntries() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getRepositoryEntries", "()Ljava/util/List;")); }
IResourcePack ResourcePackRepository::getResourcePackInstance() { return IResourcePack(*classes[className]->invokeMethod<jobject>(this->object, "getResourcePackInstance", "()Lnet/minecraft/client/resources/IResourcePack;")); }
void ResourcePackRepository::setRepositories(List arg0) { (classes[className]->invokeMethod<void>(this->object, "setRepositories", "(Ljava/util/List;)V", arg0)); }
void ResourcePackRepository::func_148529_f() { (classes[className]->invokeMethod<void>(this->object, "func_148529_f", "()V")); }
void ResourcePackRepository::fixDirResourcepacks() { (classes[className]->invokeMethod<void>(this->object, "fixDirResourcepacks", "()V")); }
void ResourcePackRepository::updateRepositoryEntriesAll() { (classes[className]->invokeMethod<void>(this->object, "updateRepositoryEntriesAll", "()V")); }
List ResourcePackRepository::getResourcePackFiles() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getResourcePackFiles", "()Ljava/util/List;")); }
List ResourcePackRepository::getRepositoryEntriesAll() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getRepositoryEntriesAll", "()Ljava/util/List;")); }
File ResourcePackRepository::getDirResourcepacks() { return File(*classes[className]->invokeMethod<jobject>(this->object, "getDirResourcepacks", "()Ljava/io/File;")); }
void ResourcePackRepository::func_183028_i() { (classes[className]->invokeMethod<void>(this->object, "func_183028_i", "()V")); }
ListenableFuture ResourcePackRepository::setResourcePackInstance(File arg0) { return ListenableFuture(*classes[className]->invokeMethod<jobject>(this->object, "setResourcePackInstance", "(Ljava/io/File;)Lcom/google/common/util/concurrent/ListenableFuture;", arg0)); }
ListenableFuture ResourcePackRepository::downloadResourcePack(String arg0, String arg1) { return ListenableFuture(*classes[className]->invokeMethod<jobject>(this->object, "downloadResourcePack", "(Ljava/lang/String;Ljava/lang/String;)Lcom/google/common/util/concurrent/ListenableFuture;", arg0, arg1)); }


bool LanguageManager::isCurrentLocaleUnicode() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCurrentLocaleUnicode", "()Z")); }
void LanguageManager::parseLanguageMetadata(List arg0) { (classes[className]->invokeMethod<void>(this->object, "parseLanguageMetadata", "(Ljava/util/List;)V", arg0)); }
SortedSet LanguageManager::getLanguages() { return SortedSet(*classes[className]->invokeMethod<jobject>(this->object, "getLanguages", "()Ljava/util/SortedSet;")); }
Language LanguageManager::getCurrentLanguage() { return Language(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentLanguage", "()Lnet/minecraft/client/resources/Language;")); }
void LanguageManager::setCurrentLanguage(Language arg0) { (classes[className]->invokeMethod<void>(this->object, "setCurrentLanguage", "(Lnet/minecraft/client/resources/Language;)V", arg0)); }
bool LanguageManager::isCurrentLanguageBidirectional() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCurrentLanguageBidirectional", "()Z")); }


String Language::getLanguageCode() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLanguageCode", "()Ljava/lang/String;")); }
bool Language::isBidirectional() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBidirectional", "()Z")); }
bool Language::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Language::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Language::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

void TextureMap::setMipmapLevels(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setMipmapLevels", "(I)V", arg0)); }
void TextureMap::initMissingImage() { (classes[className]->invokeMethod<void>(this->object, "initMissingImage", "()V")); }
void TextureMap::loadSprites(IResourceManager arg0, IIconCreator arg1) { (classes[className]->invokeMethod<void>(this->object, "loadSprites", "(Lnet/minecraft/client/resources/IResourceManager;Lnet/minecraft/client/renderer/texture/IIconCreator;)V", arg0, arg1)); }
void TextureMap::loadTextureAtlas(IResourceManager arg0) { (classes[className]->invokeMethod<void>(this->object, "loadTextureAtlas", "(Lnet/minecraft/client/resources/IResourceManager;)V", arg0)); }
ResourceLocation TextureMap::completeResourceLocation(ResourceLocation arg0, int arg1) { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "completeResourceLocation", "(Lnet/minecraft/util/ResourceLocation;I)Lnet/minecraft/util/ResourceLocation;", arg0, arg1)); }
void TextureMap::updateAnimations() { (classes[className]->invokeMethod<void>(this->object, "updateAnimations", "()V")); }
TextureAtlasSprite TextureMap::registerSprite(ResourceLocation arg0) { return TextureAtlasSprite(*classes[className]->invokeMethod<jobject>(this->object, "registerSprite", "(Lnet/minecraft/util/ResourceLocation;)Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;", arg0)); }
TextureAtlasSprite TextureMap::getMissingSprite() { return TextureAtlasSprite(*classes[className]->invokeMethod<jobject>(this->object, "getMissingSprite", "()Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;")); }
TextureAtlasSprite TextureMap::getAtlasSprite(String arg0) { return TextureAtlasSprite(*classes[className]->invokeMethod<jobject>(this->object, "getAtlasSprite", "(Ljava/lang/String;)Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;", arg0)); }



ResourceLocation SkinManager::loadSkin(MinecraftProfileTexture arg0, MinecraftProfileTexture_Type arg1) { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "loadSkin", "(Lcom/mojang/authlib/minecraft/MinecraftProfileTexture;Lcom/mojang/authlib/minecraft/MinecraftProfileTexture$Type;)Lnet/minecraft/util/ResourceLocation;", arg0, arg1)); }
ResourceLocation SkinManager::loadSkin(MinecraftProfileTexture arg0, MinecraftProfileTexture_Type arg1, SkinManager_SkinAvailableCallback arg2) { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "loadSkin", "(Lcom/mojang/authlib/minecraft/MinecraftProfileTexture;Lcom/mojang/authlib/minecraft/MinecraftProfileTexture$Type;Lnet/minecraft/client/resources/SkinManager$SkinAvailableCallback;)Lnet/minecraft/util/ResourceLocation;", arg0, arg1, arg2)); }
void SkinManager::loadProfileTextures(GameProfile arg0, SkinManager_SkinAvailableCallback arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "loadProfileTextures", "(Lcom/mojang/authlib/GameProfile;Lnet/minecraft/client/resources/SkinManager$SkinAvailableCallback;Z)V", arg0, arg1, arg2)); }
Map SkinManager::loadSkinFromCache(GameProfile arg0) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "loadSkinFromCache", "(Lcom/mojang/authlib/GameProfile;)Ljava/util/Map;", arg0)); }

String MinecraftProfileTexture::getUrl() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getUrl", "()Ljava/lang/String;")); }
String MinecraftProfileTexture::getHash() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHash", "()Ljava/lang/String;")); }
String MinecraftProfileTexture::getMetadata(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getMetadata", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String MinecraftProfileTexture::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

MinecraftProfileTexture_Type MinecraftProfileTexture_Type::valueOf(String arg0) { return MinecraftProfileTexture_Type(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lcom/mojang/authlib/minecraft/MinecraftProfileTexture$Type;", arg0)); }


BlockModelShapes BlockRendererDispatcher::getBlockModelShapes() { return BlockModelShapes(*classes[className]->invokeMethod<jobject>(this->object, "getBlockModelShapes", "()Lnet/minecraft/client/renderer/BlockModelShapes;")); }
BlockModelRenderer BlockRendererDispatcher::getBlockModelRenderer() { return BlockModelRenderer(*classes[className]->invokeMethod<jobject>(this->object, "getBlockModelRenderer", "()Lnet/minecraft/client/renderer/BlockModelRenderer;")); }
void BlockRendererDispatcher::renderBlockDamage(IBlockState arg0, BlockPos arg1, TextureAtlasSprite arg2, IBlockAccess arg3) { (classes[className]->invokeMethod<void>(this->object, "renderBlockDamage", "(Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/BlockPos;Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;Lnet/minecraft/world/IBlockAccess;)V", arg0, arg1, arg2, arg3)); }
bool BlockRendererDispatcher::renderBlock(IBlockState arg0, BlockPos arg1, IBlockAccess arg2, WorldRenderer arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderBlock", "(Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/BlockPos;Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/client/renderer/WorldRenderer;)Z", arg0, arg1, arg2, arg3)); }
IBakedModel BlockRendererDispatcher::getModelFromBlockState(IBlockState arg0, IBlockAccess arg1, BlockPos arg2) { return IBakedModel(*classes[className]->invokeMethod<jobject>(this->object, "getModelFromBlockState", "(Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/client/resources/model/IBakedModel;", arg0, arg1, arg2)); }
IBakedModel BlockRendererDispatcher::getBakedModel(IBlockState arg0, BlockPos arg1) { return IBakedModel(*classes[className]->invokeMethod<jobject>(this->object, "getBakedModel", "(Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/BlockPos;)Lnet/minecraft/client/resources/model/IBakedModel;", arg0, arg1)); }
void BlockRendererDispatcher::renderBlockBrightness(IBlockState arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "renderBlockBrightness", "(Lnet/minecraft/block/state/IBlockState;F)V", arg0, arg1)); }
bool BlockRendererDispatcher::isRenderTypeChest(Block arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRenderTypeChest", "(Lnet/minecraft/block/Block;I)Z", arg0, arg1)); }

TextureAtlasSprite BlockModelShapes::getTexture(IBlockState arg0) { return TextureAtlasSprite(*classes[className]->invokeMethod<jobject>(this->object, "getTexture", "(Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;", arg0)); }
IBakedModel BlockModelShapes::getModelForState(IBlockState arg0) { return IBakedModel(*classes[className]->invokeMethod<jobject>(this->object, "getModelForState", "(Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/client/resources/model/IBakedModel;", arg0)); }
ModelManager BlockModelShapes::getModelManager() { return ModelManager(*classes[className]->invokeMethod<jobject>(this->object, "getModelManager", "()Lnet/minecraft/client/resources/model/ModelManager;")); }
void BlockModelShapes::registerAllBlocks() { (classes[className]->invokeMethod<void>(this->object, "registerAllBlocks", "()V")); }
BlockStateMapper BlockModelShapes::getBlockStateMapper() { return BlockStateMapper(*classes[className]->invokeMethod<jobject>(this->object, "getBlockStateMapper", "()Lnet/minecraft/client/renderer/block/statemap/BlockStateMapper;")); }
void BlockModelShapes::reloadModels() { (classes[className]->invokeMethod<void>(this->object, "reloadModels", "()V")); }
void BlockModelShapes::registerBuiltInBlocks(Block_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "registerBuiltInBlocks", "([Lnet/minecraft/block/Block;)V", arg0)); }
void BlockModelShapes::registerBlockWithStateMapper(Block arg0, IStateMapper arg1) { (classes[className]->invokeMethod<void>(this->object, "registerBlockWithStateMapper", "(Lnet/minecraft/block/Block;Lnet/minecraft/client/renderer/block/statemap/IStateMapper;)V", arg0, arg1)); }


IBakedModel ModelManager::getModel(ModelResourceLocation arg0) { return IBakedModel(*classes[className]->invokeMethod<jobject>(this->object, "getModel", "(Lnet/minecraft/client/resources/model/ModelResourceLocation;)Lnet/minecraft/client/resources/model/IBakedModel;", arg0)); }
BlockModelShapes ModelManager::getBlockModelShapes() { return BlockModelShapes(*classes[className]->invokeMethod<jobject>(this->object, "getBlockModelShapes", "()Lnet/minecraft/client/renderer/BlockModelShapes;")); }
IBakedModel ModelManager::getMissingModel() { return IBakedModel(*classes[className]->invokeMethod<jobject>(this->object, "getMissingModel", "()Lnet/minecraft/client/resources/model/IBakedModel;")); }
TextureMap ModelManager::getTextureMap() { return TextureMap(*classes[className]->invokeMethod<jobject>(this->object, "getTextureMap", "()Lnet/minecraft/client/renderer/texture/TextureMap;")); }

String ModelResourceLocation::getVariant() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getVariant", "()Ljava/lang/String;")); }
bool ModelResourceLocation::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ModelResourceLocation::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ModelResourceLocation::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

Map BlockStateMapper::putAllStateModelLocations() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "putAllStateModelLocations", "()Ljava/util/Map;")); }
void BlockStateMapper::registerBlockStateMapper(Block arg0, IStateMapper arg1) { (classes[className]->invokeMethod<void>(this->object, "registerBlockStateMapper", "(Lnet/minecraft/block/Block;Lnet/minecraft/client/renderer/block/statemap/IStateMapper;)V", arg0, arg1)); }
void BlockStateMapper::registerBuiltInBlocks(Block_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "registerBuiltInBlocks", "([Lnet/minecraft/block/Block;)V", arg0)); }



bool BlockModelRenderer::renderModel(IBlockAccess arg0, IBakedModel arg1, IBlockState arg2, BlockPos arg3, WorldRenderer arg4, bool arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderModel", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/client/resources/model/IBakedModel;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/BlockPos;Lnet/minecraft/client/renderer/WorldRenderer;Z)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool BlockModelRenderer::renderModel(IBlockAccess arg0, IBakedModel arg1, IBlockState arg2, BlockPos arg3, WorldRenderer arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderModel", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/client/resources/model/IBakedModel;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/util/BlockPos;Lnet/minecraft/client/renderer/WorldRenderer;)Z", arg0, arg1, arg2, arg3, arg4)); }
void BlockModelRenderer::renderModelBrightness(IBakedModel arg0, IBlockState arg1, float arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "renderModelBrightness", "(Lnet/minecraft/client/resources/model/IBakedModel;Lnet/minecraft/block/state/IBlockState;FZ)V", arg0, arg1, arg2, arg3)); }
bool BlockModelRenderer::renderModelStandard(IBlockAccess arg0, IBakedModel arg1, Block arg2, BlockPos arg3, WorldRenderer arg4, bool arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderModelStandard", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/client/resources/model/IBakedModel;Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Lnet/minecraft/client/renderer/WorldRenderer;Z)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
void BlockModelRenderer::renderModelStandardQuads(IBlockAccess arg0, Block arg1, BlockPos arg2, EnumFacing arg3, int arg4, bool arg5, WorldRenderer arg6, List arg7, BitSet arg8) { (classes[className]->invokeMethod<void>(this->object, "renderModelStandardQuads", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;IZLnet/minecraft/client/renderer/WorldRenderer;Ljava/util/List;Ljava/util/BitSet;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
void BlockModelRenderer::fillQuadBounds(Block arg0, arr_I arg1, EnumFacing arg2, arr_F arg3, BitSet arg4) { (classes[className]->invokeMethod<void>(this->object, "fillQuadBounds", "(Lnet/minecraft/block/Block;[ILnet/minecraft/util/EnumFacing;[FLjava/util/BitSet;)V", arg0, arg1, arg2, arg3, arg4)); }
void BlockModelRenderer::renderModelBrightnessColor(IBakedModel arg0, float arg1, float arg2, float arg3, float arg4) { (classes[className]->invokeMethod<void>(this->object, "renderModelBrightnessColor", "(Lnet/minecraft/client/resources/model/IBakedModel;FFFF)V", arg0, arg1, arg2, arg3, arg4)); }
bool BlockModelRenderer::renderModelAmbientOcclusion(IBlockAccess arg0, IBakedModel arg1, Block arg2, BlockPos arg3, WorldRenderer arg4, bool arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderModelAmbientOcclusion", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/client/resources/model/IBakedModel;Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Lnet/minecraft/client/renderer/WorldRenderer;Z)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
void BlockModelRenderer::renderModelAmbientOcclusionQuads(IBlockAccess arg0, Block arg1, BlockPos arg2, WorldRenderer arg3, List arg4, arr_F arg5, BitSet arg6, BlockModelRenderer_AmbientOcclusionFace arg7) { (classes[className]->invokeMethod<void>(this->object, "renderModelAmbientOcclusionQuads", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Lnet/minecraft/client/renderer/WorldRenderer;Ljava/util/List;[FLjava/util/BitSet;Lnet/minecraft/client/renderer/BlockModelRenderer$AmbientOcclusionFace;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
void BlockModelRenderer::renderModelBrightnessColorQuads(float arg0, float arg1, float arg2, float arg3, List arg4) { (classes[className]->invokeMethod<void>(this->object, "renderModelBrightnessColorQuads", "(FFFFLjava/util/List;)V", arg0, arg1, arg2, arg3, arg4)); }

void WorldRenderer::putColor(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "putColor", "(II)V", arg0, arg1)); }
WorldRenderer WorldRenderer::lightmap(int arg0, int arg1) { return WorldRenderer(*classes[className]->invokeMethod<jobject>(this->object, "lightmap", "(II)Lnet/minecraft/client/renderer/WorldRenderer;", arg0, arg1)); }
void WorldRenderer::putNormal(float arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "putNormal", "(FFF)V", arg0, arg1, arg2)); }
void WorldRenderer::putColor4(int arg0) { (classes[className]->invokeMethod<void>(this->object, "putColor4", "(I)V", arg0)); }
void WorldRenderer::markDirty() { (classes[className]->invokeMethod<void>(this->object, "markDirty", "()V")); }
WorldRenderer WorldRenderer::tex(double arg0, double arg1) { return WorldRenderer(*classes[className]->invokeMethod<jobject>(this->object, "tex", "(DD)Lnet/minecraft/client/renderer/WorldRenderer;", arg0, arg1)); }
void WorldRenderer::endVertex() { (classes[className]->invokeMethod<void>(this->object, "endVertex", "()V")); }
void WorldRenderer::addVertexData(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "addVertexData", "([I)V", arg0)); }
void WorldRenderer::setTranslation(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setTranslation", "(DDD)V", arg0, arg1, arg2)); }
int WorldRenderer::getColorIndex(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getColorIndex", "(I)I", arg0)); }
void WorldRenderer::putBrightness4(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putBrightness4", "(IIII)V", arg0, arg1, arg2, arg3)); }
void WorldRenderer::putColorMultiplier(float arg0, float arg1, float arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putColorMultiplier", "(FFFI)V", arg0, arg1, arg2, arg3)); }
void WorldRenderer::putPosition(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "putPosition", "(DDD)V", arg0, arg1, arg2)); }
void WorldRenderer::putColorRGB_F4(float arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "putColorRGB_F4", "(FFF)V", arg0, arg1, arg2)); }
void WorldRenderer::func_181670_b(int arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181670_b", "(I)V", arg0)); }
void WorldRenderer::func_181674_a(float arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "func_181674_a", "(FFF)V", arg0, arg1, arg2)); }
float WorldRenderer::func_181665_a(FloatBuffer arg0, float arg1, float arg2, float arg3, int arg4, int arg5) { return float(*classes[className]->invokeStaticMethod<float>("func_181665_a", "(Ljava/nio/FloatBuffer;FFFII)F", arg0, arg1, arg2, arg3, arg4, arg5)); }
WorldRenderer_State WorldRenderer::func_181672_a() { return WorldRenderer_State(*classes[className]->invokeMethod<jobject>(this->object, "func_181672_a", "()Lnet/minecraft/client/renderer/WorldRenderer$State;")); }
int WorldRenderer::func_181664_j() { return int(*classes[className]->invokeMethod<int>(this->object, "func_181664_j", "()I")); }
void WorldRenderer::setVertexState(WorldRenderer_State arg0) { (classes[className]->invokeMethod<void>(this->object, "setVertexState", "(Lnet/minecraft/client/renderer/WorldRenderer$State;)V", arg0)); }
int WorldRenderer::getVertexCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getVertexCount", "()I")); }
VertexFormat WorldRenderer::getVertexFormat() { return VertexFormat(*classes[className]->invokeMethod<jobject>(this->object, "getVertexFormat", "()Lnet/minecraft/client/renderer/vertex/VertexFormat;")); }
void WorldRenderer::func_181667_k() { (classes[className]->invokeMethod<void>(this->object, "func_181667_k", "()V")); }
void WorldRenderer::putColorRGBA(int arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "putColorRGBA", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }
void WorldRenderer::putColorRGB_F(float arg0, float arg1, float arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "putColorRGB_F", "(FFFI)V", arg0, arg1, arg2, arg3)); }
void WorldRenderer::finishDrawing() { (classes[className]->invokeMethod<void>(this->object, "finishDrawing", "()V")); }
int WorldRenderer::getDrawMode() { return int(*classes[className]->invokeMethod<int>(this->object, "getDrawMode", "()I")); }
WorldRenderer WorldRenderer::normal(float arg0, float arg1, float arg2) { return WorldRenderer(*classes[className]->invokeMethod<jobject>(this->object, "normal", "(FFF)Lnet/minecraft/client/renderer/WorldRenderer;", arg0, arg1, arg2)); }
void WorldRenderer::begin(int arg0, VertexFormat arg1) { (classes[className]->invokeMethod<void>(this->object, "begin", "(ILnet/minecraft/client/renderer/vertex/VertexFormat;)V", arg0, arg1)); }
WorldRenderer WorldRenderer::pos(double arg0, double arg1, double arg2) { return WorldRenderer(*classes[className]->invokeMethod<jobject>(this->object, "pos", "(DDD)Lnet/minecraft/client/renderer/WorldRenderer;", arg0, arg1, arg2)); }
void WorldRenderer::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }
ByteBuffer WorldRenderer::getByteBuffer() { return ByteBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getByteBuffer", "()Ljava/nio/ByteBuffer;")); }
WorldRenderer WorldRenderer::color(float arg0, float arg1, float arg2, float arg3) { return WorldRenderer(*classes[className]->invokeMethod<jobject>(this->object, "color", "(FFFF)Lnet/minecraft/client/renderer/WorldRenderer;", arg0, arg1, arg2, arg3)); }
WorldRenderer WorldRenderer::color(int arg0, int arg1, int arg2, int arg3) { return WorldRenderer(*classes[className]->invokeMethod<jobject>(this->object, "color", "(IIII)Lnet/minecraft/client/renderer/WorldRenderer;", arg0, arg1, arg2, arg3)); }

int WorldRenderer_State::getVertexCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getVertexCount", "()I")); }
VertexFormat WorldRenderer_State::getVertexFormat() { return VertexFormat(*classes[className]->invokeMethod<jobject>(this->object, "getVertexFormat", "()Lnet/minecraft/client/renderer/vertex/VertexFormat;")); }

bool VertexFormat::hasNormal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasNormal", "()Z")); }
VertexFormatElement VertexFormat::getElement(int arg0) { return VertexFormatElement(*classes[className]->invokeMethod<jobject>(this->object, "getElement", "(I)Lnet/minecraft/client/renderer/vertex/VertexFormatElement;", arg0)); }
bool VertexFormat::hasColor() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasColor", "()Z")); }
int VertexFormat::func_181719_f() { return int(*classes[className]->invokeMethod<int>(this->object, "func_181719_f", "()I")); }
int VertexFormat::getNextOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getNextOffset", "()I")); }
int VertexFormat::func_181720_d(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "func_181720_d", "(I)I", arg0)); }
int VertexFormat::getUvOffsetById(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getUvOffsetById", "(I)I", arg0)); }
int VertexFormat::getColorOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getColorOffset", "()I")); }
int VertexFormat::getNormalOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getNormalOffset", "()I")); }
int VertexFormat::getElementCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getElementCount", "()I")); }
VertexFormat VertexFormat::func_181721_a(VertexFormatElement arg0) { return VertexFormat(*classes[className]->invokeMethod<jobject>(this->object, "func_181721_a", "(Lnet/minecraft/client/renderer/vertex/VertexFormatElement;)Lnet/minecraft/client/renderer/vertex/VertexFormat;", arg0)); }
bool VertexFormat::hasPosition() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasPosition", "()Z")); }
bool VertexFormat::hasUvOffset(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasUvOffset", "(I)Z", arg0)); }
List VertexFormat::getElements() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getElements", "()Ljava/util/List;")); }
bool VertexFormat::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String VertexFormat::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int VertexFormat::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void VertexFormat::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }

VertexFormatElement_EnumUsage VertexFormatElement::getUsage() { return VertexFormatElement_EnumUsage(*classes[className]->invokeMethod<jobject>(this->object, "getUsage", "()Lnet/minecraft/client/renderer/vertex/VertexFormatElement$EnumUsage;")); }
int VertexFormatElement::getElementCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getElementCount", "()I")); }
bool VertexFormatElement::isPositionElement() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPositionElement", "()Z")); }
bool VertexFormatElement::func_177372_a(int arg0, VertexFormatElement_EnumUsage arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_177372_a", "(ILnet/minecraft/client/renderer/vertex/VertexFormatElement$EnumUsage;)Z", arg0, arg1)); }
bool VertexFormatElement::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String VertexFormatElement::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int VertexFormatElement::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
VertexFormatElement_EnumType VertexFormatElement::getType() { return VertexFormatElement_EnumType(*classes[className]->invokeMethod<jobject>(this->object, "getType", "()Lnet/minecraft/client/renderer/vertex/VertexFormatElement$EnumType;")); }
int VertexFormatElement::getSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSize", "()I")); }
int VertexFormatElement::getIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getIndex", "()I")); }

String VertexFormatElement_EnumUsage::getDisplayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava/lang/String;")); }
VertexFormatElement_EnumUsage VertexFormatElement_EnumUsage::valueOf(String arg0) { return VertexFormatElement_EnumUsage(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/client/renderer/vertex/VertexFormatElement$EnumUsage;", arg0)); }

int VertexFormatElement_EnumType::getGlConstant() { return int(*classes[className]->invokeMethod<int>(this->object, "getGlConstant", "()I")); }
String VertexFormatElement_EnumType::getDisplayName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava/lang/String;")); }
VertexFormatElement_EnumType VertexFormatElement_EnumType::valueOf(String arg0) { return VertexFormatElement_EnumType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/client/renderer/vertex/VertexFormatElement$EnumType;", arg0)); }
int VertexFormatElement_EnumType::getSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSize", "()I")); }

void BitSet::xor_(BitSet arg0) { (classes[className]->invokeMethod<void>(this->object, "xor", "(Ljava/util/BitSet;)V", arg0)); }
void BitSet::expandTo(int arg0) { (classes[className]->invokeMethod<void>(this->object, "expandTo", "(I)V", arg0)); }
void BitSet::and_(BitSet arg0) { (classes[className]->invokeMethod<void>(this->object, "and", "(Ljava/util/BitSet;)V", arg0)); }
void BitSet::andNot(BitSet arg0) { (classes[className]->invokeMethod<void>(this->object, "andNot", "(Ljava/util/BitSet;)V", arg0)); }
void BitSet::or_(BitSet arg0) { (classes[className]->invokeMethod<void>(this->object, "or", "(Ljava/util/BitSet;)V", arg0)); }
void BitSet::initWords(int arg0) { (classes[className]->invokeMethod<void>(this->object, "initWords", "(I)V", arg0)); }
int BitSet::wordIndex(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("wordIndex", "(I)I", arg0)); }
void BitSet::recalculateWordsInUse() { (classes[className]->invokeMethod<void>(this->object, "recalculateWordsInUse", "()V")); }
int BitSet::cardinality() { return int(*classes[className]->invokeMethod<int>(this->object, "cardinality", "()I")); }
int BitSet::nextSetBit(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "nextSetBit", "(II)I", arg0, arg1)); }
int BitSet::nextSetBit(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "nextSetBit", "(I)I", arg0)); }
int BitSet::previousSetBit(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "previousSetBit", "(I)I", arg0)); }
int BitSet::previousClearBit(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "previousClearBit", "(I)I", arg0)); }
bool BitSet::intersects(BitSet arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersects", "(Ljava/util/BitSet;)Z", arg0)); }
bool BitSet::get(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "get", "(I)Z", arg0)); }
BitSet BitSet::get(int arg0, int arg1) { return BitSet(*classes[className]->invokeMethod<jobject>(this->object, "get", "(II)Ljava/util/BitSet;", arg0, arg1)); }
bool BitSet::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int BitSet::length() { return int(*classes[className]->invokeMethod<int>(this->object, "length", "()I")); }
String BitSet::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int BitSet::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object BitSet::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
BitSet BitSet::valueOf(ByteBuffer arg0) { return BitSet(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/nio/ByteBuffer;)Ljava/util/BitSet;", arg0)); }
BitSet BitSet::valueOf(arr_J arg0) { return BitSet(*classes[className]->invokeStaticMethod<jobject>("valueOf", "([J)Ljava/util/BitSet;", arg0)); }
BitSet BitSet::valueOf(arr_B arg0) { return BitSet(*classes[className]->invokeStaticMethod<jobject>("valueOf", "([B)Ljava/util/BitSet;", arg0)); }
BitSet BitSet::valueOf(LongBuffer arg0) { return BitSet(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/nio/LongBuffer;)Ljava/util/BitSet;", arg0)); }
void BitSet::clear(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "clear", "(II)V", arg0, arg1)); }
void BitSet::clear(int arg0) { (classes[className]->invokeMethod<void>(this->object, "clear", "(I)V", arg0)); }
void BitSet::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
bool BitSet::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
int BitSet::size() { return int(*classes[className]->invokeMethod<int>(this->object, "size", "()I")); }
IntStream BitSet::stream() { return IntStream(*classes[className]->invokeMethod<jobject>(this->object, "stream", "()Ljava/util/stream/IntStream;")); }
void BitSet::set(int arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "(I)V", arg0)); }
void BitSet::set(int arg0, int arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "set", "(IIZ)V", arg0, arg1, arg2)); }
void BitSet::set(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(II)V", arg0, arg1)); }
void BitSet::set(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(IZ)V", arg0, arg1)); }
void BitSet::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void BitSet::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
void BitSet::ensureCapacity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }
void BitSet::trimToSize() { (classes[className]->invokeMethod<void>(this->object, "trimToSize", "()V")); }
void BitSet::checkRange(int arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("checkRange", "(II)V", arg0, arg1)); }
void BitSet::checkInvariants() { (classes[className]->invokeMethod<void>(this->object, "checkInvariants", "()V")); }
void BitSet::flip(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "flip", "(II)V", arg0, arg1)); }
void BitSet::flip(int arg0) { (classes[className]->invokeMethod<void>(this->object, "flip", "(I)V", arg0)); }
int BitSet::nextClearBit(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "nextClearBit", "(I)I", arg0)); }


void BlockModelRenderer_AmbientOcclusionFace::updateVertexBrightness(IBlockAccess arg0, Block arg1, BlockPos arg2, EnumFacing arg3, arr_F arg4, BitSet arg5) { (classes[className]->invokeMethod<void>(this->object, "updateVertexBrightness", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;[FLjava/util/BitSet;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
int BlockModelRenderer_AmbientOcclusionFace::getAoBrightness(int arg0, int arg1, int arg2, int arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "getAoBrightness", "(IIII)I", arg0, arg1, arg2, arg3)); }
int BlockModelRenderer_AmbientOcclusionFace::getVertexBrightness(int arg0, int arg1, int arg2, int arg3, float arg4, float arg5, float arg6, float arg7) { return int(*classes[className]->invokeMethod<int>(this->object, "getVertexBrightness", "(IIIIFFFF)I", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

bool RenderManager::isDebugBoundingBox() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDebugBoundingBox", "()Z")); }
void RenderManager::setDebugBoundingBox(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDebugBoundingBox", "(Z)V", arg0)); }
void RenderManager::setPlayerViewY(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayerViewY", "(F)V", arg0)); }
void RenderManager::setRenderShadow(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setRenderShadow", "(Z)V", arg0)); }
bool RenderManager::renderEntityWithPosYaw(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderEntityWithPosYaw", "(Lnet/minecraft/entity/Entity;DDDFF)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
void RenderManager::setRenderPosition(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setRenderPosition", "(DDD)V", arg0, arg1, arg2)); }
Render RenderManager::getEntityClassRenderObject(Class arg0) { return Render(*classes[className]->invokeMethod<jobject>(this->object, "getEntityClassRenderObject", "(Ljava/lang/Class;)Lnet/minecraft/client/renderer/entity/Render;", arg0)); }
Render RenderManager::getEntityRenderObject(Entity arg0) { return Render(*classes[className]->invokeMethod<jobject>(this->object, "getEntityRenderObject", "(Lnet/minecraft/entity/Entity;)Lnet/minecraft/client/renderer/entity/Render;", arg0)); }
void RenderManager::cacheActiveRenderInfo(World arg0, FontRenderer arg1, Entity arg2, Entity arg3, GameSettings arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "cacheActiveRenderInfo", "(Lnet/minecraft/world/World;Lnet/minecraft/client/gui/FontRenderer;Lnet/minecraft/entity/Entity;Lnet/minecraft/entity/Entity;Lnet/minecraft/client/settings/GameSettings;F)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool RenderManager::isRenderShadow() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRenderShadow", "()Z")); }
bool RenderManager::renderEntitySimple(Entity arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderEntitySimple", "(Lnet/minecraft/entity/Entity;F)Z", arg0, arg1)); }
bool RenderManager::renderEntityStatic(Entity arg0, float arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "renderEntityStatic", "(Lnet/minecraft/entity/Entity;FZ)Z", arg0, arg1, arg2)); }
bool RenderManager::shouldRender(Entity arg0, ICamera arg1, double arg2, double arg3, double arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldRender", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/client/renderer/culling/ICamera;DDD)Z", arg0, arg1, arg2, arg3, arg4)); }
bool RenderManager::doRenderEntity(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5, bool arg6) { return bool(*classes[className]->invokeMethod<bool>(this->object, "doRenderEntity", "(Lnet/minecraft/entity/Entity;DDDFFZ)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void RenderManager::renderWitherSkull(Entity arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "renderWitherSkull", "(Lnet/minecraft/entity/Entity;F)V", arg0, arg1)); }
void RenderManager::setRenderOutlines(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setRenderOutlines", "(Z)V", arg0)); }
void RenderManager::renderDebugBoundingBox(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "renderDebugBoundingBox", "(Lnet/minecraft/entity/Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
double RenderManager::getDistanceToCamera(double arg0, double arg1, double arg2) { return double(*classes[className]->invokeMethod<double>(this->object, "getDistanceToCamera", "(DDD)D", arg0, arg1, arg2)); }
FontRenderer RenderManager::getFontRenderer() { return FontRenderer(*classes[className]->invokeMethod<jobject>(this->object, "getFontRenderer", "()Lnet/minecraft/client/gui/FontRenderer;")); }
void RenderManager::set(World arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "(Lnet/minecraft/world/World;)V", arg0)); }

void Render::renderName(Entity arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "renderName", "(Lnet/minecraft/entity/Entity;DDD)V", arg0, arg1, arg2, arg3)); }
void Render::doRender(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "doRender", "(Lnet/minecraft/entity/Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Render::bindTexture(ResourceLocation arg0) { (classes[className]->invokeMethod<void>(this->object, "bindTexture", "(Lnet/minecraft/util/ResourceLocation;)V", arg0)); }
RenderManager Render::getRenderManager() { return RenderManager(*classes[className]->invokeMethod<jobject>(this->object, "getRenderManager", "()Lnet/minecraft/client/renderer/entity/RenderManager;")); }
void Render::renderShadow(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "renderShadow", "(Lnet/minecraft/entity/Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool Render::shouldRender(Entity arg0, ICamera arg1, double arg2, double arg3, double arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldRender", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/client/renderer/culling/ICamera;DDD)Z", arg0, arg1, arg2, arg3, arg4)); }
void Render::doRenderShadowAndFire(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "doRenderShadowAndFire", "(Lnet/minecraft/entity/Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool Render::canRenderName(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canRenderName", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void Render::renderLivingLabel(Entity arg0, String arg1, double arg2, double arg3, double arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "renderLivingLabel", "(Lnet/minecraft/entity/Entity;Ljava/lang/String;DDDI)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Render::renderOffsetLivingLabel(Entity arg0, double arg1, double arg2, double arg3, String arg4, float arg5, double arg6) { (classes[className]->invokeMethod<void>(this->object, "renderOffsetLivingLabel", "(Lnet/minecraft/entity/Entity;DDDLjava/lang/String;FD)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
ResourceLocation Render::getEntityTexture(Entity arg0) { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getEntityTexture", "(Lnet/minecraft/entity/Entity;)Lnet/minecraft/util/ResourceLocation;", arg0)); }
bool Render::bindEntityTexture(Entity arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "bindEntityTexture", "(Lnet/minecraft/entity/Entity;)Z", arg0)); }
void Render::renderEntityOnFire(Entity arg0, double arg1, double arg2, double arg3, float arg4) { (classes[className]->invokeMethod<void>(this->object, "renderEntityOnFire", "(Lnet/minecraft/entity/Entity;DDDF)V", arg0, arg1, arg2, arg3, arg4)); }
World Render::getWorldFromRenderManager() { return World(*classes[className]->invokeMethod<jobject>(this->object, "getWorldFromRenderManager", "()Lnet/minecraft/world/World;")); }
void Render::func_180549_a(Block arg0, double arg1, double arg2, double arg3, BlockPos arg4, float arg5, float arg6, double arg7, double arg8, double arg9) { (classes[className]->invokeMethod<void>(this->object, "func_180549_a", "(Lnet/minecraft/block/Block;DDDLnet/minecraft/util/BlockPos;FFDDD)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
void Render::renderOffsetAABB(AxisAlignedBB arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeStaticMethod<void>("renderOffsetAABB", "(Lnet/minecraft/util/AxisAlignedBB;DDD)V", arg0, arg1, arg2, arg3)); }
FontRenderer Render::getFontRendererFromRenderManager() { return FontRenderer(*classes[className]->invokeMethod<jobject>(this->object, "getFontRendererFromRenderManager", "()Lnet/minecraft/client/gui/FontRenderer;")); }


bool GameSettings::isKeyDown(KeyBinding arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isKeyDown", "(Lnet/minecraft/client/settings/KeyBinding;)Z", arg0)); }
void GameSettings::saveOptions() { (classes[className]->invokeMethod<void>(this->object, "saveOptions", "()V")); }
void GameSettings::setOptionValue(GameSettings_Options arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setOptionValue", "(Lnet/minecraft/client/settings/GameSettings$Options;I)V", arg0, arg1)); }
void GameSettings::setSoundLevel(SoundCategory arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setSoundLevel", "(Lnet/minecraft/client/audio/SoundCategory;F)V", arg0, arg1)); }
void GameSettings::sendSettingsToServer() { (classes[className]->invokeMethod<void>(this->object, "sendSettingsToServer", "()V")); }
String GameSettings::getKeyDisplayString(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getKeyDisplayString", "(I)Ljava/lang/String;", arg0)); }
void GameSettings::loadOptions() { (classes[className]->invokeMethod<void>(this->object, "loadOptions", "()V")); }
void GameSettings::setOptionKeyBinding(KeyBinding arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setOptionKeyBinding", "(Lnet/minecraft/client/settings/KeyBinding;I)V", arg0, arg1)); }
void GameSettings::setOptionFloatValue(GameSettings_Options arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setOptionFloatValue", "(Lnet/minecraft/client/settings/GameSettings$Options;F)V", arg0, arg1)); }
float GameSettings::getOptionFloatValue(GameSettings_Options arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getOptionFloatValue", "(Lnet/minecraft/client/settings/GameSettings$Options;)F", arg0)); }
bool GameSettings::getOptionOrdinalValue(GameSettings_Options arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getOptionOrdinalValue", "(Lnet/minecraft/client/settings/GameSettings$Options;)Z", arg0)); }
String GameSettings::getTranslation(String_interface arg0, int arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("getTranslation", "([Ljava/lang/String;I)Ljava/lang/String;", arg0, arg1)); }
String GameSettings::getKeyBinding(GameSettings_Options arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getKeyBinding", "(Lnet/minecraft/client/settings/GameSettings$Options;)Ljava/lang/String;", arg0)); }
void GameSettings::setModelPartEnabled(EnumPlayerModelParts arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setModelPartEnabled", "(Lnet/minecraft/entity/player/EnumPlayerModelParts;Z)V", arg0, arg1)); }
float GameSettings::getSoundLevel(SoundCategory arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getSoundLevel", "(Lnet/minecraft/client/audio/SoundCategory;)F", arg0)); }
Set GameSettings::getModelParts() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getModelParts", "()Ljava/util/Set;")); }
void GameSettings::switchModelPartEnabled(EnumPlayerModelParts arg0) { (classes[className]->invokeMethod<void>(this->object, "switchModelPartEnabled", "(Lnet/minecraft/entity/player/EnumPlayerModelParts;)V", arg0)); }
int GameSettings::func_181147_e() { return int(*classes[className]->invokeMethod<int>(this->object, "func_181147_e", "()I")); }
bool GameSettings::func_181148_f() { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_181148_f", "()Z")); }
float GameSettings::parseFloat(String arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "parseFloat", "(Ljava/lang/String;)F", arg0)); }

void KeyBinding::setKeyCode(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setKeyCode", "(I)V", arg0)); }
void KeyBinding::unpressKey() { (classes[className]->invokeMethod<void>(this->object, "unpressKey", "()V")); }
int KeyBinding::getKeyCode() { return int(*classes[className]->invokeMethod<int>(this->object, "getKeyCode", "()I")); }
void KeyBinding::onTick(int arg0) { (classes[className]->invokeStaticMethod<void>("onTick", "(I)V", arg0)); }
bool KeyBinding::isKeyDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isKeyDown", "()Z")); }
bool KeyBinding::isPressed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPressed", "()Z")); }
void KeyBinding::unPressAllKeys() { (classes[className]->invokeStaticMethod<void>("unPressAllKeys", "()V")); }
void KeyBinding::setKeyBindState(int arg0, bool arg1) { (classes[className]->invokeStaticMethod<void>("setKeyBindState", "(IZ)V", arg0, arg1)); }
String KeyBinding::getKeyDescription() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getKeyDescription", "()Ljava/lang/String;")); }
Set KeyBinding::getKeybinds() { return Set(*classes[className]->invokeStaticMethod<jobject>("getKeybinds", "()Ljava/util/Set;")); }
String KeyBinding::getKeyCategory() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getKeyCategory", "()Ljava/lang/String;")); }
int KeyBinding::getKeyCodeDefault() { return int(*classes[className]->invokeMethod<int>(this->object, "getKeyCodeDefault", "()I")); }
void KeyBinding::resetKeyBindingArrayAndHash() { (classes[className]->invokeStaticMethod<void>("resetKeyBindingArrayAndHash", "()V")); }

float GameSettings_Options::snapToStep(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "snapToStep", "(F)F", arg0)); }
float GameSettings_Options::getValueMax() { return float(*classes[className]->invokeMethod<float>(this->object, "getValueMax", "()F")); }
void GameSettings_Options::setValueMax(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setValueMax", "(F)V", arg0)); }
String GameSettings_Options::getEnumString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getEnumString", "()Ljava/lang/String;")); }
bool GameSettings_Options::getEnumFloat() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getEnumFloat", "()Z")); }
float GameSettings_Options::normalizeValue(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "normalizeValue", "(F)F", arg0)); }
bool GameSettings_Options::getEnumBoolean() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getEnumBoolean", "()Z")); }
GameSettings_Options GameSettings_Options::getEnumOptions(int arg0) { return GameSettings_Options(*classes[className]->invokeStaticMethod<jobject>("getEnumOptions", "(I)Lnet/minecraft/client/settings/GameSettings$Options;", arg0)); }
int GameSettings_Options::returnEnumOrdinal() { return int(*classes[className]->invokeMethod<int>(this->object, "returnEnumOrdinal", "()I")); }
float GameSettings_Options::snapToStepClamp(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "snapToStepClamp", "(F)F", arg0)); }
float GameSettings_Options::denormalizeValue(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "denormalizeValue", "(F)F", arg0)); }
GameSettings_Options GameSettings_Options::valueOf(String arg0) { return GameSettings_Options(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/client/settings/GameSettings$Options;", arg0)); }

void RenderItem::renderQuad(WorldRenderer arg0, BakedQuad arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "renderQuad", "(Lnet/minecraft/client/renderer/WorldRenderer;Lnet/minecraft/client/renderer/block/model/BakedQuad;I)V", arg0, arg1, arg2)); }
void RenderItem::renderItem(ItemStack arg0, IBakedModel arg1) { (classes[className]->invokeMethod<void>(this->object, "renderItem", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/client/resources/model/IBakedModel;)V", arg0, arg1)); }
void RenderItem::renderModel(IBakedModel arg0, int arg1, ItemStack arg2) { (classes[className]->invokeMethod<void>(this->object, "renderModel", "(Lnet/minecraft/client/resources/model/IBakedModel;ILnet/minecraft/item/ItemStack;)V", arg0, arg1, arg2)); }
void RenderItem::renderModel(IBakedModel arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "renderModel", "(Lnet/minecraft/client/resources/model/IBakedModel;I)V", arg0, arg1)); }
void RenderItem::renderModel(IBakedModel arg0, ItemStack arg1) { (classes[className]->invokeMethod<void>(this->object, "renderModel", "(Lnet/minecraft/client/resources/model/IBakedModel;Lnet/minecraft/item/ItemStack;)V", arg0, arg1)); }
void RenderItem::func_175039_a(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "func_175039_a", "(Z)V", arg0)); }
ItemModelMesher RenderItem::getItemModelMesher() { return ItemModelMesher(*classes[className]->invokeMethod<jobject>(this->object, "getItemModelMesher", "()Lnet/minecraft/client/renderer/ItemModelMesher;")); }
void RenderItem::registerBlock(Block arg0, int arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "registerBlock", "(Lnet/minecraft/block/Block;ILjava/lang/String;)V", arg0, arg1, arg2)); }
void RenderItem::registerBlock(Block arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "registerBlock", "(Lnet/minecraft/block/Block;Ljava/lang/String;)V", arg0, arg1)); }
void RenderItem::renderQuads(WorldRenderer arg0, List arg1, int arg2, ItemStack arg3) { (classes[className]->invokeMethod<void>(this->object, "renderQuads", "(Lnet/minecraft/client/renderer/WorldRenderer;Ljava/util/List;ILnet/minecraft/item/ItemStack;)V", arg0, arg1, arg2, arg3)); }
void RenderItem::renderEffect(IBakedModel arg0) { (classes[className]->invokeMethod<void>(this->object, "renderEffect", "(Lnet/minecraft/client/resources/model/IBakedModel;)V", arg0)); }
void RenderItem::putQuadNormal(WorldRenderer arg0, BakedQuad arg1) { (classes[className]->invokeMethod<void>(this->object, "putQuadNormal", "(Lnet/minecraft/client/renderer/WorldRenderer;Lnet/minecraft/client/renderer/block/model/BakedQuad;)V", arg0, arg1)); }
bool RenderItem::shouldRenderItemIn3D(ItemStack arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldRenderItemIn3D", "(Lnet/minecraft/item/ItemStack;)Z", arg0)); }
void RenderItem::preTransform(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "preTransform", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
void RenderItem::func_181564_a(ItemStack arg0, ItemCameraTransforms_TransformType arg1) { (classes[className]->invokeMethod<void>(this->object, "func_181564_a", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/client/renderer/block/model/ItemCameraTransforms$TransformType;)V", arg0, arg1)); }
void RenderItem::renderItemModelTransform(ItemStack arg0, IBakedModel arg1, ItemCameraTransforms_TransformType arg2) { (classes[className]->invokeMethod<void>(this->object, "renderItemModelTransform", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/client/resources/model/IBakedModel;Lnet/minecraft/client/renderer/block/model/ItemCameraTransforms$TransformType;)V", arg0, arg1, arg2)); }
void RenderItem::renderItemModelForEntity(ItemStack arg0, EntityLivingBase arg1, ItemCameraTransforms_TransformType arg2) { (classes[className]->invokeMethod<void>(this->object, "renderItemModelForEntity", "(Lnet/minecraft/item/ItemStack;Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/client/renderer/block/model/ItemCameraTransforms$TransformType;)V", arg0, arg1, arg2)); }
bool RenderItem::func_183005_a(ItemTransformVec3f arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "func_183005_a", "(Lnet/minecraft/client/renderer/block/model/ItemTransformVec3f;)Z", arg0)); }
void RenderItem::renderItemIntoGUI(ItemStack arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "renderItemIntoGUI", "(Lnet/minecraft/item/ItemStack;II)V", arg0, arg1, arg2)); }
void RenderItem::setupGuiTransform(int arg0, int arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "setupGuiTransform", "(IIZ)V", arg0, arg1, arg2)); }
void RenderItem::renderItemOverlays(FontRenderer arg0, ItemStack arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "renderItemOverlays", "(Lnet/minecraft/client/gui/FontRenderer;Lnet/minecraft/item/ItemStack;II)V", arg0, arg1, arg2, arg3)); }
void RenderItem::func_181565_a(WorldRenderer arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8) { (classes[className]->invokeMethod<void>(this->object, "func_181565_a", "(Lnet/minecraft/client/renderer/WorldRenderer;IIIIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
void RenderItem::registerItems() { (classes[className]->invokeMethod<void>(this->object, "registerItems", "()V")); }
void RenderItem::registerItem(Item arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "registerItem", "(Lnet/minecraft/item/Item;Ljava/lang/String;)V", arg0, arg1)); }
void RenderItem::registerItem(Item arg0, int arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "registerItem", "(Lnet/minecraft/item/Item;ILjava/lang/String;)V", arg0, arg1, arg2)); }
void RenderItem::renderItemAndEffectIntoGUI(ItemStack arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "renderItemAndEffectIntoGUI", "(Lnet/minecraft/item/ItemStack;II)V", arg0, arg1, arg2)); }
void RenderItem::renderItemOverlayIntoGUI(FontRenderer arg0, ItemStack arg1, int arg2, int arg3, String arg4) { (classes[className]->invokeMethod<void>(this->object, "renderItemOverlayIntoGUI", "(Lnet/minecraft/client/gui/FontRenderer;Lnet/minecraft/item/ItemStack;IILjava/lang/String;)V", arg0, arg1, arg2, arg3, arg4)); }

EnumFacing BakedQuad::getFace() { return EnumFacing(*classes[className]->invokeMethod<jobject>(this->object, "getFace", "()Lnet/minecraft/util/EnumFacing;")); }
bool BakedQuad::hasTintIndex() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasTintIndex", "()Z")); }
int BakedQuad::getTintIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getTintIndex", "()I")); }

int ItemModelMesher::getMetadata(ItemStack arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getMetadata", "(Lnet/minecraft/item/ItemStack;)I", arg0)); }
IBakedModel ItemModelMesher::getItemModel(ItemStack arg0) { return IBakedModel(*classes[className]->invokeMethod<jobject>(this->object, "getItemModel", "(Lnet/minecraft/item/ItemStack;)Lnet/minecraft/client/resources/model/IBakedModel;", arg0)); }
IBakedModel ItemModelMesher::getItemModel(Item arg0, int arg1) { return IBakedModel(*classes[className]->invokeMethod<jobject>(this->object, "getItemModel", "(Lnet/minecraft/item/Item;I)Lnet/minecraft/client/resources/model/IBakedModel;", arg0, arg1)); }
ModelManager ItemModelMesher::getModelManager() { return ModelManager(*classes[className]->invokeMethod<jobject>(this->object, "getModelManager", "()Lnet/minecraft/client/resources/model/ModelManager;")); }
void ItemModelMesher::rebuildCache() { (classes[className]->invokeMethod<void>(this->object, "rebuildCache", "()V")); }
TextureAtlasSprite ItemModelMesher::getParticleIcon(Item arg0, int arg1) { return TextureAtlasSprite(*classes[className]->invokeMethod<jobject>(this->object, "getParticleIcon", "(Lnet/minecraft/item/Item;I)Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;", arg0, arg1)); }
TextureAtlasSprite ItemModelMesher::getParticleIcon(Item arg0) { return TextureAtlasSprite(*classes[className]->invokeMethod<jobject>(this->object, "getParticleIcon", "(Lnet/minecraft/item/Item;)Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;", arg0)); }
void ItemModelMesher::register_(Item arg0, int arg1, ModelResourceLocation arg2) { (classes[className]->invokeMethod<void>(this->object, "register", "(Lnet/minecraft/item/Item;ILnet/minecraft/client/resources/model/ModelResourceLocation;)V", arg0, arg1, arg2)); }
void ItemModelMesher::register_(Item arg0, ItemMeshDefinition arg1) { (classes[className]->invokeMethod<void>(this->object, "register", "(Lnet/minecraft/item/Item;Lnet/minecraft/client/renderer/ItemMeshDefinition;)V", arg0, arg1)); }
int ItemModelMesher::getIndex(Item arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getIndex", "(Lnet/minecraft/item/Item;I)I", arg0, arg1)); }


ItemCameraTransforms_TransformType ItemCameraTransforms_TransformType::valueOf(String arg0) { return ItemCameraTransforms_TransformType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lnet/minecraft/client/renderer/block/model/ItemCameraTransforms$TransformType;", arg0)); }

bool ItemTransformVec3f::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int ItemTransformVec3f::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

void ItemRenderer::renderItem(EntityLivingBase arg0, ItemStack arg1, ItemCameraTransforms_TransformType arg2) { (classes[className]->invokeMethod<void>(this->object, "renderItem", "(Lnet/minecraft/entity/EntityLivingBase;Lnet/minecraft/item/ItemStack;Lnet/minecraft/client/renderer/block/model/ItemCameraTransforms$TransformType;)V", arg0, arg1, arg2)); }
void ItemRenderer::resetEquippedProgress() { (classes[className]->invokeMethod<void>(this->object, "resetEquippedProgress", "()V")); }
void ItemRenderer::resetEquippedProgress2() { (classes[className]->invokeMethod<void>(this->object, "resetEquippedProgress2", "()V")); }
bool ItemRenderer::isBlockTranslucent(Block arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBlockTranslucent", "(Lnet/minecraft/block/Block;)Z", arg0)); }
void ItemRenderer::func_178101_a(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "func_178101_a", "(FF)V", arg0, arg1)); }
void ItemRenderer::func_178109_a(AbstractClientPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "func_178109_a", "(Lnet/minecraft/client/entity/AbstractClientPlayer;)V", arg0)); }
void ItemRenderer::func_178110_a(EntityPlayerSP arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "func_178110_a", "(Lnet/minecraft/client/entity/EntityPlayerSP;F)V", arg0, arg1)); }
float ItemRenderer::func_178100_c(float arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "func_178100_c", "(F)F", arg0)); }
void ItemRenderer::renderRightArm(RenderPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "renderRightArm", "(Lnet/minecraft/client/renderer/entity/RenderPlayer;)V", arg0)); }
void ItemRenderer::renderLeftArm(RenderPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "renderLeftArm", "(Lnet/minecraft/client/renderer/entity/RenderPlayer;)V", arg0)); }
void ItemRenderer::renderPlayerArms(AbstractClientPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "renderPlayerArms", "(Lnet/minecraft/client/entity/AbstractClientPlayer;)V", arg0)); }
void ItemRenderer::renderItemMap(AbstractClientPlayer arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "renderItemMap", "(Lnet/minecraft/client/entity/AbstractClientPlayer;FFF)V", arg0, arg1, arg2, arg3)); }
void ItemRenderer::func_178095_a(AbstractClientPlayer arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "func_178095_a", "(Lnet/minecraft/client/entity/AbstractClientPlayer;FF)V", arg0, arg1, arg2)); }
void ItemRenderer::func_178105_d(float arg0) { (classes[className]->invokeMethod<void>(this->object, "func_178105_d", "(F)V", arg0)); }
void ItemRenderer::func_178104_a(AbstractClientPlayer arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "func_178104_a", "(Lnet/minecraft/client/entity/AbstractClientPlayer;F)V", arg0, arg1)); }
void ItemRenderer::transformFirstPersonItem(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "transformFirstPersonItem", "(FF)V", arg0, arg1)); }
void ItemRenderer::func_178098_a(float arg0, AbstractClientPlayer arg1) { (classes[className]->invokeMethod<void>(this->object, "func_178098_a", "(FLnet/minecraft/client/entity/AbstractClientPlayer;)V", arg0, arg1)); }
void ItemRenderer::func_178103_d() { (classes[className]->invokeMethod<void>(this->object, "func_178103_d", "()V")); }
void ItemRenderer::renderItemInFirstPerson(float arg0) { (classes[className]->invokeMethod<void>(this->object, "renderItemInFirstPerson", "(F)V", arg0)); }
void ItemRenderer::renderOverlays(float arg0) { (classes[className]->invokeMethod<void>(this->object, "renderOverlays", "(F)V", arg0)); }
void ItemRenderer::func_178108_a(float arg0, TextureAtlasSprite arg1) { (classes[className]->invokeMethod<void>(this->object, "func_178108_a", "(FLnet/minecraft/client/renderer/texture/TextureAtlasSprite;)V", arg0, arg1)); }
void ItemRenderer::renderWaterOverlayTexture(float arg0) { (classes[className]->invokeMethod<void>(this->object, "renderWaterOverlayTexture", "(F)V", arg0)); }
void ItemRenderer::renderFireInFirstPerson(float arg0) { (classes[className]->invokeMethod<void>(this->object, "renderFireInFirstPerson", "(F)V", arg0)); }
void ItemRenderer::updateEquippedItem() { (classes[className]->invokeMethod<void>(this->object, "updateEquippedItem", "()V")); }

bool AbstractClientPlayer::hasSkin() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasSkin", "()Z")); }
bool AbstractClientPlayer::isSpectator() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSpectator", "()Z")); }
NetworkPlayerInfo AbstractClientPlayer::getPlayerInfo() { return NetworkPlayerInfo(*classes[className]->invokeMethod<jobject>(this->object, "getPlayerInfo", "()Lnet/minecraft/client/network/NetworkPlayerInfo;")); }
bool AbstractClientPlayer::hasPlayerInfo() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasPlayerInfo", "()Z")); }
ResourceLocation AbstractClientPlayer::getLocationSkin(String arg0) { return ResourceLocation(*classes[className]->invokeStaticMethod<jobject>("getLocationSkin", "(Ljava/lang/String;)Lnet/minecraft/util/ResourceLocation;", arg0)); }
ResourceLocation AbstractClientPlayer::getLocationSkin() { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getLocationSkin", "()Lnet/minecraft/util/ResourceLocation;")); }
ResourceLocation AbstractClientPlayer::getLocationCape() { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getLocationCape", "()Lnet/minecraft/util/ResourceLocation;")); }
ThreadDownloadImageData AbstractClientPlayer::getDownloadImageSkin(ResourceLocation arg0, String arg1) { return ThreadDownloadImageData(*classes[className]->invokeStaticMethod<jobject>("getDownloadImageSkin", "(Lnet/minecraft/util/ResourceLocation;Ljava/lang/String;)Lnet/minecraft/client/renderer/ThreadDownloadImageData;", arg0, arg1)); }
String AbstractClientPlayer::getSkinType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSkinType", "()Ljava/lang/String;")); }
float AbstractClientPlayer::getFovModifier() { return float(*classes[className]->invokeMethod<float>(this->object, "getFovModifier", "()F")); }

void ThreadDownloadImageData::checkTextureUploaded() { (classes[className]->invokeMethod<void>(this->object, "checkTextureUploaded", "()V")); }
void ThreadDownloadImageData::setBufferedImage(BufferedImage arg0) { (classes[className]->invokeMethod<void>(this->object, "setBufferedImage", "(Ljava/awt/image/BufferedImage;)V", arg0)); }
void ThreadDownloadImageData::loadTextureFromServer() { (classes[className]->invokeMethod<void>(this->object, "loadTextureFromServer", "()V")); }

int BufferedImage::getRGB(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getRGB", "(II)I", arg0, arg1)); }
ImageProducer BufferedImage::getSource() { return ImageProducer(*classes[className]->invokeMethod<jobject>(this->object, "getSource", "()Ljava/awt/image/ImageProducer;")); }
void BufferedImage::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
bool BufferedImage::isAlphaPremultiplied() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAlphaPremultiplied", "()Z")); }
bool BufferedImage::isStandard(ColorModel arg0, WritableRaster arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isStandard", "(Ljava/awt/image/ColorModel;Ljava/awt/image/WritableRaster;)Z", arg0, arg1)); }
void BufferedImage::coerceData(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "coerceData", "(Z)V", arg0)); }
WritableRaster BufferedImage::getAlphaRaster() { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "getAlphaRaster", "()Ljava/awt/image/WritableRaster;")); }
Graphics2D BufferedImage::createGraphics() { return Graphics2D(*classes[className]->invokeMethod<jobject>(this->object, "createGraphics", "()Ljava/awt/Graphics2D;")); }
WritableRaster BufferedImage::getRaster() { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "getRaster", "()Ljava/awt/image/WritableRaster;")); }
void BufferedImage::setRGB(int arg0, int arg1, int arg2, int arg3, arr_I arg4, int arg5, int arg6) { (classes[className]->invokeMethod<void>(this->object, "setRGB", "(IIII[III)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void BufferedImage::setRGB(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setRGB", "(III)V", arg0, arg1, arg2)); }
Graphics BufferedImage::getGraphics() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava/awt/Graphics;")); }
BufferedImage BufferedImage::getSubimage(int arg0, int arg1, int arg2, int arg3) { return BufferedImage(*classes[className]->invokeMethod<jobject>(this->object, "getSubimage", "(IIII)Ljava/awt/image/BufferedImage;", arg0, arg1, arg2, arg3)); }
String BufferedImage::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int BufferedImage::getType() { return int(*classes[className]->invokeMethod<int>(this->object, "getType", "()I")); }


int ColorModel::getAlpha(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getAlpha", "(I)I", arg0)); }
int ColorModel::getAlpha(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getAlpha", "(Ljava/lang/Object;)I", arg0)); }
int ColorModel::getRGB(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getRGB", "(I)I", arg0)); }
int ColorModel::getRGB(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getRGB", "(Ljava/lang/Object;)I", arg0)); }
void ColorModel::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
WritableRaster ColorModel::createCompatibleWritableRaster(int arg0, int arg1) { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(II)Ljava/awt/image/WritableRaster;", arg0, arg1)); }
ColorModel ColorModel::getRGBdefault() { return ColorModel(*classes[className]->invokeStaticMethod<jobject>("getRGBdefault", "()Ljava/awt/image/ColorModel;")); }
bool ColorModel::hasAlpha() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasAlpha", "()Z")); }
bool ColorModel::isAlphaPremultiplied() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAlphaPremultiplied", "()Z")); }
bool ColorModel::isCompatibleRaster(Raster arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCompatibleRaster", "(Ljava/awt/image/Raster;)Z", arg0)); }
ColorModel ColorModel::coerceData(WritableRaster arg0, bool arg1) { return ColorModel(*classes[className]->invokeMethod<jobject>(this->object, "coerceData", "(Ljava/awt/image/WritableRaster;Z)Ljava/awt/image/ColorModel;", arg0, arg1)); }
ColorSpace ColorModel::getColorSpace() { return ColorSpace(*classes[className]->invokeMethod<jobject>(this->object, "getColorSpace", "()Ljava/awt/color/ColorSpace;")); }
int ColorModel::getComponentSize(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getComponentSize", "(I)I", arg0)); }
int ColorModel::getPixelSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getPixelSize", "()I")); }
int ColorModel::getNumComponents() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumComponents", "()I")); }
WritableRaster ColorModel::getAlphaRaster(WritableRaster arg0) { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "getAlphaRaster", "(Ljava/awt/image/WritableRaster;)Ljava/awt/image/WritableRaster;", arg0)); }
Object ColorModel::getDataElements(int arg0, Object arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDataElements", "(ILjava/lang/Object;)Ljava/lang/Object;", arg0, arg1)); }
Object ColorModel::getDataElements(arr_I arg0, int arg1, Object arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDataElements", "([IILjava/lang/Object;)Ljava/lang/Object;", arg0, arg1, arg2)); }
Object ColorModel::getDataElements(arr_F arg0, int arg1, Object arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDataElements", "([FILjava/lang/Object;)Ljava/lang/Object;", arg0, arg1, arg2)); }
SampleModel ColorModel::createCompatibleSampleModel(int arg0, int arg1) { return SampleModel(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleSampleModel", "(II)Ljava/awt/image/SampleModel;", arg0, arg1)); }
void ColorModel::loadLibraries() { (classes[className]->invokeStaticMethod<void>("loadLibraries", "()V")); }
int ColorModel::getTransferType() { return int(*classes[className]->invokeMethod<int>(this->object, "getTransferType", "()I")); }
int ColorModel::getDefaultTransferType(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getDefaultTransferType", "(I)I", arg0)); }
int ColorModel::getRed(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getRed", "(Ljava/lang/Object;)I", arg0)); }
int ColorModel::getRed(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getRed", "(I)I", arg0)); }
int ColorModel::getGreen(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getGreen", "(Ljava/lang/Object;)I", arg0)); }
int ColorModel::getGreen(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getGreen", "(I)I", arg0)); }
int ColorModel::getBlue(Object arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getBlue", "(Ljava/lang/Object;)I", arg0)); }
int ColorModel::getBlue(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getBlue", "(I)I", arg0)); }
int ColorModel::getDataElement(arr_I arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getDataElement", "([II)I", arg0, arg1)); }
int ColorModel::getDataElement(arr_F arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getDataElement", "([FI)I", arg0, arg1)); }
bool ColorModel::isLinearGRAYspace(ColorSpace arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLinearGRAYspace", "(Ljava/awt/color/ColorSpace;)Z", arg0)); }
int ColorModel::getNumColorComponents() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumColorComponents", "()I")); }
bool ColorModel::isCompatibleSampleModel(SampleModel arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCompatibleSampleModel", "(Ljava/awt/image/SampleModel;)Z", arg0)); }
bool ColorModel::isLinearRGBspace(ColorSpace arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isLinearRGBspace", "(Ljava/awt/color/ColorSpace;)Z", arg0)); }
void ColorModel::finalize() { (classes[className]->invokeMethod<void>(this->object, "finalize", "()V")); }
bool ColorModel::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String ColorModel::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int ColorModel::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

void WritableRaster::setDataElements(int arg0, int arg1, Raster arg2) { (classes[className]->invokeMethod<void>(this->object, "setDataElements", "(IILjava/awt/image/Raster;)V", arg0, arg1, arg2)); }
void WritableRaster::setDataElements(int arg0, int arg1, Object arg2) { (classes[className]->invokeMethod<void>(this->object, "setDataElements", "(IILjava/lang/Object;)V", arg0, arg1, arg2)); }
void WritableRaster::setDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4) { (classes[className]->invokeMethod<void>(this->object, "setDataElements", "(IIIILjava/lang/Object;)V", arg0, arg1, arg2, arg3, arg4)); }
WritableRaster WritableRaster::createWritableChild(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, arr_I arg6) { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "createWritableChild", "(IIIIII[I)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void WritableRaster::setPixels(int arg0, int arg1, int arg2, int arg3, arr_D arg4) { (classes[className]->invokeMethod<void>(this->object, "setPixels", "(IIII[D)V", arg0, arg1, arg2, arg3, arg4)); }
void WritableRaster::setPixels(int arg0, int arg1, int arg2, int arg3, arr_I arg4) { (classes[className]->invokeMethod<void>(this->object, "setPixels", "(IIII[I)V", arg0, arg1, arg2, arg3, arg4)); }
void WritableRaster::setPixels(int arg0, int arg1, int arg2, int arg3, arr_F arg4) { (classes[className]->invokeMethod<void>(this->object, "setPixels", "(IIII[F)V", arg0, arg1, arg2, arg3, arg4)); }
void WritableRaster::setRect(Raster arg0) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(Ljava/awt/image/Raster;)V", arg0)); }
void WritableRaster::setRect(int arg0, int arg1, Raster arg2) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(IILjava/awt/image/Raster;)V", arg0, arg1, arg2)); }
void WritableRaster::setSample(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "setSample", "(IIII)V", arg0, arg1, arg2, arg3)); }
void WritableRaster::setSample(int arg0, int arg1, int arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "setSample", "(IIIF)V", arg0, arg1, arg2, arg3)); }
void WritableRaster::setSample(int arg0, int arg1, int arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setSample", "(IIID)V", arg0, arg1, arg2, arg3)); }
void WritableRaster::setPixel(int arg0, int arg1, arr_I arg2) { (classes[className]->invokeMethod<void>(this->object, "setPixel", "(II[I)V", arg0, arg1, arg2)); }
void WritableRaster::setPixel(int arg0, int arg1, arr_D arg2) { (classes[className]->invokeMethod<void>(this->object, "setPixel", "(II[D)V", arg0, arg1, arg2)); }
void WritableRaster::setPixel(int arg0, int arg1, arr_F arg2) { (classes[className]->invokeMethod<void>(this->object, "setPixel", "(II[F)V", arg0, arg1, arg2)); }
void WritableRaster::setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_F arg5) { (classes[className]->invokeMethod<void>(this->object, "setSamples", "(IIIII[F)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void WritableRaster::setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5) { (classes[className]->invokeMethod<void>(this->object, "setSamples", "(IIIII[I)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void WritableRaster::setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_D arg5) { (classes[className]->invokeMethod<void>(this->object, "setSamples", "(IIIII[D)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
WritableRaster WritableRaster::getWritableParent() { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "getWritableParent", "()Ljava/awt/image/WritableRaster;")); }
WritableRaster WritableRaster::createWritableTranslatedChild(int arg0, int arg1) { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "createWritableTranslatedChild", "(II)Ljava/awt/image/WritableRaster;", arg0, arg1)); }

int Raster::getWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "()I")); }
int Raster::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
Raster Raster::createChild(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, arr_I arg6) { return Raster(*classes[className]->invokeMethod<jobject>(this->object, "createChild", "(IIIIII[I)Ljava/awt/image/Raster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void Raster::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
SampleModel Raster::getSampleModel() { return SampleModel(*classes[className]->invokeMethod<jobject>(this->object, "getSampleModel", "()Ljava/awt/image/SampleModel;")); }
int Raster::getMinX() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinX", "()I")); }
int Raster::getMinY() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinY", "()I")); }
WritableRaster Raster::createCompatibleWritableRaster(int arg0, int arg1) { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(II)Ljava/awt/image/WritableRaster;", arg0, arg1)); }
WritableRaster Raster::createCompatibleWritableRaster(Rectangle arg0) { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(Ljava/awt/Rectangle;)Ljava/awt/image/WritableRaster;", arg0)); }
WritableRaster Raster::createCompatibleWritableRaster() { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "()Ljava/awt/image/WritableRaster;")); }
WritableRaster Raster::createCompatibleWritableRaster(int arg0, int arg1, int arg2, int arg3) { return WritableRaster(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(IIII)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3)); }
WritableRaster Raster::createInterleavedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, Point arg6) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createInterleavedRaster", "(Ljava/awt/image/DataBuffer;IIII[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
WritableRaster Raster::createInterleavedRaster(int arg0, int arg1, int arg2, int arg3, Point arg4) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createInterleavedRaster", "(IIIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }
WritableRaster Raster::createInterleavedRaster(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, Point arg6) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createInterleavedRaster", "(IIIII[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
WritableRaster Raster::createPackedRaster(int arg0, int arg1, int arg2, arr_I arg3, Point arg4) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createPackedRaster", "(III[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }
WritableRaster Raster::createPackedRaster(int arg0, int arg1, int arg2, int arg3, int arg4, Point arg5) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createPackedRaster", "(IIIIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5)); }
WritableRaster Raster::createPackedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, Point arg4) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createPackedRaster", "(Ljava/awt/image/DataBuffer;IIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }
WritableRaster Raster::createPackedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, arr_I arg4, Point arg5) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createPackedRaster", "(Ljava/awt/image/DataBuffer;III[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5)); }
int Raster::getNumBands() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumBands", "()I")); }
Object Raster::getDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDataElements", "(IIIILjava/lang/Object;)Ljava/lang/Object;", arg0, arg1, arg2, arg3, arg4)); }
Object Raster::getDataElements(int arg0, int arg1, Object arg2) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDataElements", "(IILjava/lang/Object;)Ljava/lang/Object;", arg0, arg1, arg2)); }
DataBuffer Raster::getDataBuffer() { return DataBuffer(*classes[className]->invokeMethod<jobject>(this->object, "getDataBuffer", "()Ljava/awt/image/DataBuffer;")); }
int Raster::getSampleModelTranslateX() { return int(*classes[className]->invokeMethod<int>(this->object, "getSampleModelTranslateX", "()I")); }
int Raster::getSampleModelTranslateY() { return int(*classes[className]->invokeMethod<int>(this->object, "getSampleModelTranslateY", "()I")); }
WritableRaster Raster::createWritableRaster(SampleModel arg0, DataBuffer arg1, Point arg2) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createWritableRaster", "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2)); }
WritableRaster Raster::createWritableRaster(SampleModel arg0, Point arg1) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createWritableRaster", "(Ljava/awt/image/SampleModel;Ljava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1)); }
WritableRaster Raster::createBandedRaster(int arg0, int arg1, int arg2, int arg3, Point arg4) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createBandedRaster", "(IIIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }
WritableRaster Raster::createBandedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, arr_I arg4, arr_I arg5, Point arg6) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createBandedRaster", "(Ljava/awt/image/DataBuffer;III[I[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
WritableRaster Raster::createBandedRaster(int arg0, int arg1, int arg2, int arg3, arr_I arg4, arr_I arg5, Point arg6) { return WritableRaster(*classes[className]->invokeStaticMethod<jobject>("createBandedRaster", "(IIII[I[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
int Raster::getNumDataElements() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumDataElements", "()I")); }
int Raster::getTransferType() { return int(*classes[className]->invokeMethod<int>(this->object, "getTransferType", "()I")); }
int Raster::getSample(int arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "getSample", "(III)I", arg0, arg1, arg2)); }
float Raster::getSampleFloat(int arg0, int arg1, int arg2) { return float(*classes[className]->invokeMethod<float>(this->object, "getSampleFloat", "(III)F", arg0, arg1, arg2)); }
double Raster::getSampleDouble(int arg0, int arg1, int arg2) { return double(*classes[className]->invokeMethod<double>(this->object, "getSampleDouble", "(III)D", arg0, arg1, arg2)); }
Raster Raster::createRaster(SampleModel arg0, DataBuffer arg1, Point arg2) { return Raster(*classes[className]->invokeStaticMethod<jobject>("createRaster", "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Point;)Ljava/awt/image/Raster;", arg0, arg1, arg2)); }
Raster Raster::createTranslatedChild(int arg0, int arg1) { return Raster(*classes[className]->invokeMethod<jobject>(this->object, "createTranslatedChild", "(II)Ljava/awt/image/Raster;", arg0, arg1)); }
Rectangle Raster::getBounds() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getBounds", "()Ljava/awt/Rectangle;")); }
Raster Raster::getParent() { return Raster(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/awt/image/Raster;")); }

int SampleModel::getWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "()I")); }
int SampleModel::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
void SampleModel::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
int SampleModel::getNumBands() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumBands", "()I")); }
Object SampleModel::getDataElements(int arg0, int arg1, Object arg2, DataBuffer arg3) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDataElements", "(IILjava/lang/Object;Ljava/awt/image/DataBuffer;)Ljava/lang/Object;", arg0, arg1, arg2, arg3)); }
Object SampleModel::getDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4, DataBuffer arg5) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDataElements", "(IIIILjava/lang/Object;Ljava/awt/image/DataBuffer;)Ljava/lang/Object;", arg0, arg1, arg2, arg3, arg4, arg5)); }
int SampleModel::getDataType() { return int(*classes[className]->invokeMethod<int>(this->object, "getDataType", "()I")); }
void SampleModel::setDataElements(int arg0, int arg1, Object arg2, DataBuffer arg3) { (classes[className]->invokeMethod<void>(this->object, "setDataElements", "(IILjava/lang/Object;Ljava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3)); }
void SampleModel::setDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4, DataBuffer arg5) { (classes[className]->invokeMethod<void>(this->object, "setDataElements", "(IIIILjava/lang/Object;Ljava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
SampleModel SampleModel::createCompatibleSampleModel(int arg0, int arg1) { return SampleModel(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleSampleModel", "(II)Ljava/awt/image/SampleModel;", arg0, arg1)); }
void SampleModel::setPixels(int arg0, int arg1, int arg2, int arg3, arr_D arg4, DataBuffer arg5) { (classes[className]->invokeMethod<void>(this->object, "setPixels", "(IIII[DLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void SampleModel::setPixels(int arg0, int arg1, int arg2, int arg3, arr_F arg4, DataBuffer arg5) { (classes[className]->invokeMethod<void>(this->object, "setPixels", "(IIII[FLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void SampleModel::setPixels(int arg0, int arg1, int arg2, int arg3, arr_I arg4, DataBuffer arg5) { (classes[className]->invokeMethod<void>(this->object, "setPixels", "(IIII[ILjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
int SampleModel::getSampleSize(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getSampleSize", "(I)I", arg0)); }
DataBuffer SampleModel::createDataBuffer() { return DataBuffer(*classes[className]->invokeMethod<jobject>(this->object, "createDataBuffer", "()Ljava/awt/image/DataBuffer;")); }
int SampleModel::getNumDataElements() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumDataElements", "()I")); }
SampleModel SampleModel::createSubsetSampleModel(arr_I arg0) { return SampleModel(*classes[className]->invokeMethod<jobject>(this->object, "createSubsetSampleModel", "([I)Ljava/awt/image/SampleModel;", arg0)); }
int SampleModel::getTransferType() { return int(*classes[className]->invokeMethod<int>(this->object, "getTransferType", "()I")); }
int SampleModel::getSample(int arg0, int arg1, int arg2, DataBuffer arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "getSample", "(IIILjava/awt/image/DataBuffer;)I", arg0, arg1, arg2, arg3)); }
float SampleModel::getSampleFloat(int arg0, int arg1, int arg2, DataBuffer arg3) { return float(*classes[className]->invokeMethod<float>(this->object, "getSampleFloat", "(IIILjava/awt/image/DataBuffer;)F", arg0, arg1, arg2, arg3)); }
double SampleModel::getSampleDouble(int arg0, int arg1, int arg2, DataBuffer arg3) { return double(*classes[className]->invokeMethod<double>(this->object, "getSampleDouble", "(IIILjava/awt/image/DataBuffer;)D", arg0, arg1, arg2, arg3)); }
void SampleModel::setSample(int arg0, int arg1, int arg2, double arg3, DataBuffer arg4) { (classes[className]->invokeMethod<void>(this->object, "setSample", "(IIIDLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4)); }
void SampleModel::setSample(int arg0, int arg1, int arg2, float arg3, DataBuffer arg4) { (classes[className]->invokeMethod<void>(this->object, "setSample", "(IIIFLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4)); }
void SampleModel::setSample(int arg0, int arg1, int arg2, int arg3, DataBuffer arg4) { (classes[className]->invokeMethod<void>(this->object, "setSample", "(IIIILjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4)); }
void SampleModel::setPixel(int arg0, int arg1, arr_I arg2, DataBuffer arg3) { (classes[className]->invokeMethod<void>(this->object, "setPixel", "(II[ILjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3)); }
void SampleModel::setPixel(int arg0, int arg1, arr_D arg2, DataBuffer arg3) { (classes[className]->invokeMethod<void>(this->object, "setPixel", "(II[DLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3)); }
void SampleModel::setPixel(int arg0, int arg1, arr_F arg2, DataBuffer arg3) { (classes[className]->invokeMethod<void>(this->object, "setPixel", "(II[FLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3)); }
void SampleModel::setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, DataBuffer arg6) { (classes[className]->invokeMethod<void>(this->object, "setSamples", "(IIIII[ILjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void SampleModel::setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_F arg5, DataBuffer arg6) { (classes[className]->invokeMethod<void>(this->object, "setSamples", "(IIIII[FLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void SampleModel::setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_D arg5, DataBuffer arg6) { (classes[className]->invokeMethod<void>(this->object, "setSamples", "(IIIII[DLjava/awt/image/DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

int DataBuffer::getDataType() { return int(*classes[className]->invokeMethod<int>(this->object, "getDataType", "()I")); }
int DataBuffer::getDataTypeSize(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getDataTypeSize", "(I)I", arg0)); }
int DataBuffer::getNumBanks() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumBanks", "()I")); }
int DataBuffer::getElem(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getElem", "(II)I", arg0, arg1)); }
int DataBuffer::getElem(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getElem", "(I)I", arg0)); }
void DataBuffer::setElem(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setElem", "(III)V", arg0, arg1, arg2)); }
void DataBuffer::setElem(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setElem", "(II)V", arg0, arg1)); }
float DataBuffer::getElemFloat(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getElemFloat", "(I)F", arg0)); }
float DataBuffer::getElemFloat(int arg0, int arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "getElemFloat", "(II)F", arg0, arg1)); }
void DataBuffer::setElemFloat(int arg0, int arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "setElemFloat", "(IIF)V", arg0, arg1, arg2)); }
void DataBuffer::setElemFloat(int arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setElemFloat", "(IF)V", arg0, arg1)); }
double DataBuffer::getElemDouble(int arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "getElemDouble", "(I)D", arg0)); }
double DataBuffer::getElemDouble(int arg0, int arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "getElemDouble", "(II)D", arg0, arg1)); }
void DataBuffer::setElemDouble(int arg0, int arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setElemDouble", "(IID)V", arg0, arg1, arg2)); }
void DataBuffer::setElemDouble(int arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setElemDouble", "(ID)V", arg0, arg1)); }
int DataBuffer::getSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSize", "()I")); }
int DataBuffer::getOffset() { return int(*classes[className]->invokeMethod<int>(this->object, "getOffset", "()I")); }

double Rectangle::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double Rectangle::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
void Rectangle::setSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(Ljava/awt/Dimension;)V", arg0)); }
void Rectangle::setSize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }
double Rectangle::getWidth() { return double(*classes[className]->invokeMethod<double>(this->object, "getWidth", "()D")); }
double Rectangle::getHeight() { return double(*classes[className]->invokeMethod<double>(this->object, "getHeight", "()D")); }
void Rectangle::translate(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }
Rectangle Rectangle::union_(Rectangle arg0) { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "union", "(Ljava/awt/Rectangle;)Ljava/awt/Rectangle;", arg0)); }
void Rectangle::move(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "move", "(II)V", arg0, arg1)); }
void Rectangle::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
Rectangle Rectangle::intersection(Rectangle arg0) { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "intersection", "(Ljava/awt/Rectangle;)Ljava/awt/Rectangle;", arg0)); }
void Rectangle::setBounds(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "setBounds", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Rectangle::setBounds(Rectangle arg0) { (classes[className]->invokeMethod<void>(this->object, "setBounds", "(Ljava/awt/Rectangle;)V", arg0)); }
void Rectangle::reshape(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "reshape", "(IIII)V", arg0, arg1, arg2, arg3)); }
int Rectangle::clip(double arg0, bool arg1) { return int(*classes[className]->invokeStaticMethod<int>("clip", "(DZ)I", arg0, arg1)); }
void Rectangle::setLocation(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(Ljava/awt/Point;)V", arg0)); }
void Rectangle::setLocation(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }
bool Rectangle::inside(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "inside", "(II)Z", arg0, arg1)); }
void Rectangle::setRect(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(DDDD)V", arg0, arg1, arg2, arg3)); }
int Rectangle::outcode(double arg0, double arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "outcode", "(DD)I", arg0, arg1)); }
Rectangle2D Rectangle::createIntersection(Rectangle2D arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "createIntersection", "(Ljava/awt/geom/Rectangle2D;)Ljava/awt/geom/Rectangle2D;", arg0)); }
Rectangle2D Rectangle::createUnion(Rectangle2D arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "createUnion", "(Ljava/awt/geom/Rectangle2D;)Ljava/awt/geom/Rectangle2D;", arg0)); }
void Rectangle::add(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "add", "(II)V", arg0, arg1)); }
void Rectangle::add(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/awt/Point;)V", arg0)); }
void Rectangle::add(Rectangle arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/awt/Rectangle;)V", arg0)); }
bool Rectangle::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Rectangle::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
bool Rectangle::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
Point Rectangle::getLocation() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocation", "()Ljava/awt/Point;")); }
Dimension Rectangle::getSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getSize", "()Ljava/awt/Dimension;")); }
void Rectangle::grow(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "grow", "(II)V", arg0, arg1)); }
void Rectangle::resize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "resize", "(II)V", arg0, arg1)); }

void Dimension::setSize(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(DD)V", arg0, arg1)); }
void Dimension::setSize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }
void Dimension::setSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(Ljava/awt/Dimension;)V", arg0)); }
double Dimension::getWidth() { return double(*classes[className]->invokeMethod<double>(this->object, "getWidth", "()D")); }
double Dimension::getHeight() { return double(*classes[className]->invokeMethod<double>(this->object, "getHeight", "()D")); }
void Dimension::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
bool Dimension::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Dimension::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Dimension::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Dimension Dimension::getSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getSize", "()Ljava/awt/Dimension;")); }

void Dimension2D::setSize(Dimension2D arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(Ljava/awt/geom/Dimension2D;)V", arg0)); }
void Dimension2D::setSize(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(DD)V", arg0, arg1)); }
double Dimension2D::getWidth() { return double(*classes[className]->invokeMethod<double>(this->object, "getWidth", "()D")); }
double Dimension2D::getHeight() { return double(*classes[className]->invokeMethod<double>(this->object, "getHeight", "()D")); }
Object Dimension2D::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }

double Point::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double Point::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
void Point::translate(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }
void Point::move(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "move", "(II)V", arg0, arg1)); }
void Point::setLocation(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }
void Point::setLocation(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }
void Point::setLocation(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(Ljava/awt/Point;)V", arg0)); }
bool Point::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Point::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Point Point::getLocation() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocation", "()Ljava/awt/Point;")); }

double Point2D::distanceSq(Point2D arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "distanceSq", "(Ljava/awt/geom/Point2D;)D", arg0)); }
double Point2D::distanceSq(double arg0, double arg1, double arg2, double arg3) { return double(*classes[className]->invokeStaticMethod<double>("distanceSq", "(DDDD)D", arg0, arg1, arg2, arg3)); }
double Point2D::distanceSq(double arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "distanceSq", "(DD)D", arg0, arg1)); }
double Point2D::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double Point2D::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
void Point2D::setLocation(Point2D arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(Ljava/awt/geom/Point2D;)V", arg0)); }
void Point2D::setLocation(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }
bool Point2D::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int Point2D::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object Point2D::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
double Point2D::distance(Point2D arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "distance", "(Ljava/awt/geom/Point2D;)D", arg0)); }
double Point2D::distance(double arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "distance", "(DD)D", arg0, arg1)); }
double Point2D::distance(double arg0, double arg1, double arg2, double arg3) { return double(*classes[className]->invokeStaticMethod<double>("distance", "(DDDD)D", arg0, arg1, arg2, arg3)); }

void Rectangle2D::union_(Rectangle2D arg0, Rectangle2D arg1, Rectangle2D arg2) { (classes[className]->invokeStaticMethod<void>("union", "(Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/Rectangle2D;)V", arg0, arg1, arg2)); }
void Rectangle2D::intersect(Rectangle2D arg0, Rectangle2D arg1, Rectangle2D arg2) { (classes[className]->invokeStaticMethod<void>("intersect", "(Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/Rectangle2D;)V", arg0, arg1, arg2)); }
void Rectangle2D::setRect(Rectangle2D arg0) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(Ljava/awt/geom/Rectangle2D;)V", arg0)); }
void Rectangle2D::setRect(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(DDDD)V", arg0, arg1, arg2, arg3)); }
int Rectangle2D::outcode(Point2D arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "outcode", "(Ljava/awt/geom/Point2D;)I", arg0)); }
int Rectangle2D::outcode(double arg0, double arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "outcode", "(DD)I", arg0, arg1)); }
Rectangle2D Rectangle2D::createIntersection(Rectangle2D arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "createIntersection", "(Ljava/awt/geom/Rectangle2D;)Ljava/awt/geom/Rectangle2D;", arg0)); }
Rectangle2D Rectangle2D::createUnion(Rectangle2D arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "createUnion", "(Ljava/awt/geom/Rectangle2D;)Ljava/awt/geom/Rectangle2D;", arg0)); }
bool Rectangle2D::intersectsLine(double arg0, double arg1, double arg2, double arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsLine", "(DDDD)Z", arg0, arg1, arg2, arg3)); }
bool Rectangle2D::intersectsLine(Line2D arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsLine", "(Ljava/awt/geom/Line2D;)Z", arg0)); }
void Rectangle2D::setFrame(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setFrame", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void Rectangle2D::add(Rectangle2D arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/awt/geom/Rectangle2D;)V", arg0)); }
void Rectangle2D::add(Point2D arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/awt/geom/Point2D;)V", arg0)); }
void Rectangle2D::add(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "add", "(DD)V", arg0, arg1)); }
bool Rectangle2D::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int Rectangle2D::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

double Line2D::getX1() { return double(*classes[className]->invokeMethod<double>(this->object, "getX1", "()D")); }
double Line2D::getY1() { return double(*classes[className]->invokeMethod<double>(this->object, "getY1", "()D")); }
double Line2D::getX2() { return double(*classes[className]->invokeMethod<double>(this->object, "getX2", "()D")); }
double Line2D::getY2() { return double(*classes[className]->invokeMethod<double>(this->object, "getY2", "()D")); }
bool Line2D::intersectsLine(Line2D arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsLine", "(Ljava/awt/geom/Line2D;)Z", arg0)); }
bool Line2D::intersectsLine(double arg0, double arg1, double arg2, double arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsLine", "(DDDD)Z", arg0, arg1, arg2, arg3)); }
void Line2D::setLine(Point2D arg0, Point2D arg1) { (classes[className]->invokeMethod<void>(this->object, "setLine", "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)V", arg0, arg1)); }
void Line2D::setLine(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setLine", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void Line2D::setLine(Line2D arg0) { (classes[className]->invokeMethod<void>(this->object, "setLine", "(Ljava/awt/geom/Line2D;)V", arg0)); }
int Line2D::relativeCCW(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return int(*classes[className]->invokeStaticMethod<int>("relativeCCW", "(DDDDDD)I", arg0, arg1, arg2, arg3, arg4, arg5)); }
int Line2D::relativeCCW(double arg0, double arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "relativeCCW", "(DD)I", arg0, arg1)); }
int Line2D::relativeCCW(Point2D arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "relativeCCW", "(Ljava/awt/geom/Point2D;)I", arg0)); }
bool Line2D::linesIntersect(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7) { return bool(*classes[className]->invokeStaticMethod<bool>("linesIntersect", "(DDDDDDDD)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
double Line2D::ptSegDistSq(double arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "ptSegDistSq", "(DD)D", arg0, arg1)); }
double Line2D::ptSegDistSq(Point2D arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "ptSegDistSq", "(Ljava/awt/geom/Point2D;)D", arg0)); }
double Line2D::ptSegDistSq(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*classes[className]->invokeStaticMethod<double>("ptSegDistSq", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }
double Line2D::ptSegDist(double arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "ptSegDist", "(DD)D", arg0, arg1)); }
double Line2D::ptSegDist(Point2D arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "ptSegDist", "(Ljava/awt/geom/Point2D;)D", arg0)); }
double Line2D::ptSegDist(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*classes[className]->invokeStaticMethod<double>("ptSegDist", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }
double Line2D::ptLineDistSq(Point2D arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "ptLineDistSq", "(Ljava/awt/geom/Point2D;)D", arg0)); }
double Line2D::ptLineDistSq(double arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "ptLineDistSq", "(DD)D", arg0, arg1)); }
double Line2D::ptLineDistSq(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*classes[className]->invokeStaticMethod<double>("ptLineDistSq", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }
double Line2D::ptLineDist(double arg0, double arg1) { return double(*classes[className]->invokeMethod<double>(this->object, "ptLineDist", "(DD)D", arg0, arg1)); }
double Line2D::ptLineDist(Point2D arg0) { return double(*classes[className]->invokeMethod<double>(this->object, "ptLineDist", "(Ljava/awt/geom/Point2D;)D", arg0)); }
double Line2D::ptLineDist(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*classes[className]->invokeStaticMethod<double>("ptLineDist", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }
Point2D Line2D::getP1() { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "getP1", "()Ljava/awt/geom/Point2D;")); }
Point2D Line2D::getP2() { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "getP2", "()Ljava/awt/geom/Point2D;")); }
Object Line2D::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }

double RectangularShape::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double RectangularShape::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
double RectangularShape::getCenterX() { return double(*classes[className]->invokeMethod<double>(this->object, "getCenterX", "()D")); }
double RectangularShape::getWidth() { return double(*classes[className]->invokeMethod<double>(this->object, "getWidth", "()D")); }
double RectangularShape::getHeight() { return double(*classes[className]->invokeMethod<double>(this->object, "getHeight", "()D")); }
double RectangularShape::getMinX() { return double(*classes[className]->invokeMethod<double>(this->object, "getMinX", "()D")); }
double RectangularShape::getMinY() { return double(*classes[className]->invokeMethod<double>(this->object, "getMinY", "()D")); }
double RectangularShape::getMaxX() { return double(*classes[className]->invokeMethod<double>(this->object, "getMaxX", "()D")); }
double RectangularShape::getMaxY() { return double(*classes[className]->invokeMethod<double>(this->object, "getMaxY", "()D")); }
void RectangularShape::setFrame(Rectangle2D arg0) { (classes[className]->invokeMethod<void>(this->object, "setFrame", "(Ljava/awt/geom/Rectangle2D;)V", arg0)); }
void RectangularShape::setFrame(Point2D arg0, Dimension2D arg1) { (classes[className]->invokeMethod<void>(this->object, "setFrame", "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Dimension2D;)V", arg0, arg1)); }
void RectangularShape::setFrame(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setFrame", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void RectangularShape::setFrameFromDiagonal(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setFrameFromDiagonal", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void RectangularShape::setFrameFromDiagonal(Point2D arg0, Point2D arg1) { (classes[className]->invokeMethod<void>(this->object, "setFrameFromDiagonal", "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)V", arg0, arg1)); }
void RectangularShape::setFrameFromCenter(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setFrameFromCenter", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void RectangularShape::setFrameFromCenter(Point2D arg0, Point2D arg1) { (classes[className]->invokeMethod<void>(this->object, "setFrameFromCenter", "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)V", arg0, arg1)); }
double RectangularShape::getCenterY() { return double(*classes[className]->invokeMethod<double>(this->object, "getCenterY", "()D")); }
Rectangle2D RectangularShape::getFrame() { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getFrame", "()Ljava/awt/geom/Rectangle2D;")); }
Object RectangularShape::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
bool RectangularShape::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }

int ColorSpace::getNumComponents() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumComponents", "()I")); }
bool ColorSpace::isCS_sRGB() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCS_sRGB", "()Z")); }
float ColorSpace::getMinValue(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getMinValue", "(I)F", arg0)); }
float ColorSpace::getMaxValue(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getMaxValue", "(I)F", arg0)); }
String ColorSpace::getName(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "(I)Ljava/lang/String;", arg0)); }
void ColorSpace::rangeCheck(int arg0) { (classes[className]->invokeMethod<void>(this->object, "rangeCheck", "(I)V", arg0)); }
ColorSpace ColorSpace::getInstance(int arg0) { return ColorSpace(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(I)Ljava/awt/color/ColorSpace;", arg0)); }
int ColorSpace::getType() { return int(*classes[className]->invokeMethod<int>(this->object, "getType", "()I")); }

void Graphics2D::drawString(AttributedCharacterIterator arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "drawString", "(Ljava/text/AttributedCharacterIterator;FF)V", arg0, arg1, arg2)); }
void Graphics2D::drawString(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawString", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
void Graphics2D::drawString(String arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "drawString", "(Ljava/lang/String;FF)V", arg0, arg1, arg2)); }
void Graphics2D::drawString(AttributedCharacterIterator arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawString", "(Ljava/text/AttributedCharacterIterator;II)V", arg0, arg1, arg2)); }
void Graphics2D::translate(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }
void Graphics2D::translate(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(DD)V", arg0, arg1)); }
void Graphics2D::draw(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "draw", "(Ljava/awt/Shape;)V", arg0)); }
AffineTransform Graphics2D::getTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getTransform", "()Ljava/awt/geom/AffineTransform;")); }
void Graphics2D::rotate(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "rotate", "(DDD)V", arg0, arg1, arg2)); }
void Graphics2D::rotate(double arg0) { (classes[className]->invokeMethod<void>(this->object, "rotate", "(D)V", arg0)); }
bool Graphics2D::hit(Rectangle arg0, Shape arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hit", "(Ljava/awt/Rectangle;Ljava/awt/Shape;Z)Z", arg0, arg1, arg2)); }
void Graphics2D::clip(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "clip", "(Ljava/awt/Shape;)V", arg0)); }
Paint Graphics2D::getPaint() { return Paint(*classes[className]->invokeMethod<jobject>(this->object, "getPaint", "()Ljava/awt/Paint;")); }
void Graphics2D::setPaint(Paint arg0) { (classes[className]->invokeMethod<void>(this->object, "setPaint", "(Ljava/awt/Paint;)V", arg0)); }
void Graphics2D::draw3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "draw3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }
void Graphics2D::fill3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "fill3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }
void Graphics2D::drawImage(BufferedImage arg0, BufferedImageOp arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "drawImage", "(Ljava/awt/image/BufferedImage;Ljava/awt/image/BufferedImageOp;II)V", arg0, arg1, arg2, arg3)); }
bool Graphics2D::drawImage(Image arg0, AffineTransform arg1, ImageObserver arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawImage", "(Ljava/awt/Image;Ljava/awt/geom/AffineTransform;Ljava/awt/image/ImageObserver;)Z", arg0, arg1, arg2)); }
void Graphics2D::drawRenderedImage(RenderedImage arg0, AffineTransform arg1) { (classes[className]->invokeMethod<void>(this->object, "drawRenderedImage", "(Ljava/awt/image/RenderedImage;Ljava/awt/geom/AffineTransform;)V", arg0, arg1)); }
void Graphics2D::drawRenderableImage(RenderableImage arg0, AffineTransform arg1) { (classes[className]->invokeMethod<void>(this->object, "drawRenderableImage", "(Ljava/awt/image/renderable/RenderableImage;Ljava/awt/geom/AffineTransform;)V", arg0, arg1)); }
void Graphics2D::drawGlyphVector(GlyphVector arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "drawGlyphVector", "(Ljava/awt/font/GlyphVector;FF)V", arg0, arg1, arg2)); }
GraphicsConfiguration Graphics2D::getDeviceConfiguration() { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "getDeviceConfiguration", "()Ljava/awt/GraphicsConfiguration;")); }
void Graphics2D::setComposite(Composite arg0) { (classes[className]->invokeMethod<void>(this->object, "setComposite", "(Ljava/awt/Composite;)V", arg0)); }
void Graphics2D::setStroke(Stroke arg0) { (classes[className]->invokeMethod<void>(this->object, "setStroke", "(Ljava/awt/Stroke;)V", arg0)); }
void Graphics2D::setRenderingHint(RenderingHints_Key arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "setRenderingHint", "(Ljava/awt/RenderingHints$Key;Ljava/lang/Object;)V", arg0, arg1)); }
Object Graphics2D::getRenderingHint(RenderingHints_Key arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getRenderingHint", "(Ljava/awt/RenderingHints$Key;)Ljava/lang/Object;", arg0)); }
void Graphics2D::setRenderingHints(Map arg0) { (classes[className]->invokeMethod<void>(this->object, "setRenderingHints", "(Ljava/util/Map;)V", arg0)); }
void Graphics2D::addRenderingHints(Map arg0) { (classes[className]->invokeMethod<void>(this->object, "addRenderingHints", "(Ljava/util/Map;)V", arg0)); }
RenderingHints Graphics2D::getRenderingHints() { return RenderingHints(*classes[className]->invokeMethod<jobject>(this->object, "getRenderingHints", "()Ljava/awt/RenderingHints;")); }
void Graphics2D::shear(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "shear", "(DD)V", arg0, arg1)); }
void Graphics2D::setTransform(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "setTransform", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
Composite Graphics2D::getComposite() { return Composite(*classes[className]->invokeMethod<jobject>(this->object, "getComposite", "()Ljava/awt/Composite;")); }
void Graphics2D::setBackground(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setBackground", "(Ljava/awt/Color;)V", arg0)); }
Color Graphics2D::getBackground() { return Color(*classes[className]->invokeMethod<jobject>(this->object, "getBackground", "()Ljava/awt/Color;")); }
Stroke Graphics2D::getStroke() { return Stroke(*classes[className]->invokeMethod<jobject>(this->object, "getStroke", "()Ljava/awt/Stroke;")); }
FontRenderContext Graphics2D::getFontRenderContext() { return FontRenderContext(*classes[className]->invokeMethod<jobject>(this->object, "getFontRenderContext", "()Ljava/awt/font/FontRenderContext;")); }
void Graphics2D::scale(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "scale", "(DD)V", arg0, arg1)); }
void Graphics2D::fill(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "fill", "(Ljava/awt/Shape;)V", arg0)); }
void Graphics2D::transform(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "transform", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }


void AffineTransform::translate(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(DD)V", arg0, arg1)); }
void AffineTransform::updateState() { (classes[className]->invokeMethod<void>(this->object, "updateState", "()V")); }
void AffineTransform::rotate(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "rotate", "(DD)V", arg0, arg1)); }
void AffineTransform::rotate(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "rotate", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void AffineTransform::rotate(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "rotate", "(DDD)V", arg0, arg1, arg2)); }
void AffineTransform::rotate(double arg0) { (classes[className]->invokeMethod<void>(this->object, "rotate", "(D)V", arg0)); }
void AffineTransform::shear(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "shear", "(DD)V", arg0, arg1)); }
void AffineTransform::setTransform(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "setTransform", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
void AffineTransform::setTransform(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { (classes[className]->invokeMethod<void>(this->object, "setTransform", "(DDDDDD)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void AffineTransform::setToTranslation(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setToTranslation", "(DD)V", arg0, arg1)); }
void AffineTransform::setToRotation(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setToRotation", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void AffineTransform::setToRotation(double arg0) { (classes[className]->invokeMethod<void>(this->object, "setToRotation", "(D)V", arg0)); }
void AffineTransform::setToRotation(double arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setToRotation", "(DDD)V", arg0, arg1, arg2)); }
void AffineTransform::setToRotation(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setToRotation", "(DD)V", arg0, arg1)); }
void AffineTransform::setToQuadrantRotation(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setToQuadrantRotation", "(I)V", arg0)); }
void AffineTransform::setToQuadrantRotation(int arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "setToQuadrantRotation", "(IDD)V", arg0, arg1, arg2)); }
void AffineTransform::setToScale(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setToScale", "(DD)V", arg0, arg1)); }
void AffineTransform::setToShear(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setToShear", "(DD)V", arg0, arg1)); }
void AffineTransform::calculateType() { (classes[className]->invokeMethod<void>(this->object, "calculateType", "()V")); }
void AffineTransform::stateError() { (classes[className]->invokeMethod<void>(this->object, "stateError", "()V")); }
void AffineTransform::rotate90() { (classes[className]->invokeMethod<void>(this->object, "rotate90", "()V")); }
void AffineTransform::rotate270() { (classes[className]->invokeMethod<void>(this->object, "rotate270", "()V")); }
void AffineTransform::rotate180() { (classes[className]->invokeMethod<void>(this->object, "rotate180", "()V")); }
double AffineTransform::_matround(double arg0) { return double(*classes[className]->invokeStaticMethod<double>("_matround", "(D)D", arg0)); }
AffineTransform AffineTransform::getTranslateInstance(double arg0, double arg1) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getTranslateInstance", "(DD)Ljava/awt/geom/AffineTransform;", arg0, arg1)); }
AffineTransform AffineTransform::getRotateInstance(double arg0, double arg1, double arg2, double arg3) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getRotateInstance", "(DDDD)Ljava/awt/geom/AffineTransform;", arg0, arg1, arg2, arg3)); }
AffineTransform AffineTransform::getRotateInstance(double arg0, double arg1) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getRotateInstance", "(DD)Ljava/awt/geom/AffineTransform;", arg0, arg1)); }
AffineTransform AffineTransform::getRotateInstance(double arg0, double arg1, double arg2) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getRotateInstance", "(DDD)Ljava/awt/geom/AffineTransform;", arg0, arg1, arg2)); }
AffineTransform AffineTransform::getRotateInstance(double arg0) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getRotateInstance", "(D)Ljava/awt/geom/AffineTransform;", arg0)); }
AffineTransform AffineTransform::getQuadrantRotateInstance(int arg0, double arg1, double arg2) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getQuadrantRotateInstance", "(IDD)Ljava/awt/geom/AffineTransform;", arg0, arg1, arg2)); }
AffineTransform AffineTransform::getQuadrantRotateInstance(int arg0) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getQuadrantRotateInstance", "(I)Ljava/awt/geom/AffineTransform;", arg0)); }
AffineTransform AffineTransform::getScaleInstance(double arg0, double arg1) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getScaleInstance", "(DD)Ljava/awt/geom/AffineTransform;", arg0, arg1)); }
AffineTransform AffineTransform::getShearInstance(double arg0, double arg1) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getShearInstance", "(DD)Ljava/awt/geom/AffineTransform;", arg0, arg1)); }
double AffineTransform::getDeterminant() { return double(*classes[className]->invokeMethod<double>(this->object, "getDeterminant", "()D")); }
void AffineTransform::getMatrix(arr_D arg0) { (classes[className]->invokeMethod<void>(this->object, "getMatrix", "([D)V", arg0)); }
double AffineTransform::getScaleX() { return double(*classes[className]->invokeMethod<double>(this->object, "getScaleX", "()D")); }
double AffineTransform::getScaleY() { return double(*classes[className]->invokeMethod<double>(this->object, "getScaleY", "()D")); }
double AffineTransform::getShearX() { return double(*classes[className]->invokeMethod<double>(this->object, "getShearX", "()D")); }
double AffineTransform::getShearY() { return double(*classes[className]->invokeMethod<double>(this->object, "getShearY", "()D")); }
double AffineTransform::getTranslateX() { return double(*classes[className]->invokeMethod<double>(this->object, "getTranslateX", "()D")); }
double AffineTransform::getTranslateY() { return double(*classes[className]->invokeMethod<double>(this->object, "getTranslateY", "()D")); }
void AffineTransform::quadrantRotate(int arg0) { (classes[className]->invokeMethod<void>(this->object, "quadrantRotate", "(I)V", arg0)); }
void AffineTransform::quadrantRotate(int arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "quadrantRotate", "(IDD)V", arg0, arg1, arg2)); }
void AffineTransform::setToIdentity() { (classes[className]->invokeMethod<void>(this->object, "setToIdentity", "()V")); }
void AffineTransform::concatenate(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "concatenate", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
void AffineTransform::preConcatenate(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "preConcatenate", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
AffineTransform AffineTransform::createInverse() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "createInverse", "()Ljava/awt/geom/AffineTransform;")); }
void AffineTransform::invert() { (classes[className]->invokeMethod<void>(this->object, "invert", "()V")); }
void AffineTransform::inverseTransform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "inverseTransform", "([DI[DII)V", arg0, arg1, arg2, arg3, arg4)); }
Point2D AffineTransform::inverseTransform(Point2D arg0, Point2D arg1) { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "inverseTransform", "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)Ljava/awt/geom/Point2D;", arg0, arg1)); }
Point2D AffineTransform::deltaTransform(Point2D arg0, Point2D arg1) { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "deltaTransform", "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)Ljava/awt/geom/Point2D;", arg0, arg1)); }
void AffineTransform::deltaTransform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "deltaTransform", "([DI[DII)V", arg0, arg1, arg2, arg3, arg4)); }
Shape AffineTransform::createTransformedShape(Shape arg0) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "createTransformedShape", "(Ljava/awt/Shape;)Ljava/awt/Shape;", arg0)); }
bool AffineTransform::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String AffineTransform::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int AffineTransform::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object AffineTransform::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void AffineTransform::scale(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "scale", "(DD)V", arg0, arg1)); }
void AffineTransform::transform(arr_F arg0, int arg1, arr_F arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "transform", "([FI[FII)V", arg0, arg1, arg2, arg3, arg4)); }
void AffineTransform::transform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "transform", "([DI[DII)V", arg0, arg1, arg2, arg3, arg4)); }
void AffineTransform::transform(arr_D arg0, int arg1, arr_F arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "transform", "([DI[FII)V", arg0, arg1, arg2, arg3, arg4)); }
void AffineTransform::transform(arr_F arg0, int arg1, arr_D arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "transform", "([FI[DII)V", arg0, arg1, arg2, arg3, arg4)); }
Point2D AffineTransform::transform(Point2D arg0, Point2D arg1) { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "transform", "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)Ljava/awt/geom/Point2D;", arg0, arg1)); }
void AffineTransform::transform(Point2D_interface arg0, int arg1, Point2D_interface arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "transform", "([Ljava/awt/geom/Point2D;I[Ljava/awt/geom/Point2D;II)V", arg0, arg1, arg2, arg3, arg4)); }
void AffineTransform::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void AffineTransform::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
int AffineTransform::getType() { return int(*classes[className]->invokeMethod<int>(this->object, "getType", "()I")); }
bool AffineTransform::isIdentity() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isIdentity", "()Z")); }




int Image::getWidth(ImageObserver arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "(Ljava/awt/image/ImageObserver;)I", arg0)); }
int Image::getHeight(ImageObserver arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "(Ljava/awt/image/ImageObserver;)I", arg0)); }
ImageCapabilities Image::getCapabilities(GraphicsConfiguration arg0) { return ImageCapabilities(*classes[className]->invokeMethod<jobject>(this->object, "getCapabilities", "(Ljava/awt/GraphicsConfiguration;)Ljava/awt/ImageCapabilities;", arg0)); }
ImageProducer Image::getSource() { return ImageProducer(*classes[className]->invokeMethod<jobject>(this->object, "getSource", "()Ljava/awt/image/ImageProducer;")); }
Graphics Image::getGraphics() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava/awt/Graphics;")); }
void Image::setAccelerationPriority(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccelerationPriority", "(F)V", arg0)); }
Image Image::getScaledInstance(int arg0, int arg1, int arg2) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "getScaledInstance", "(III)Ljava/awt/Image;", arg0, arg1, arg2)); }
float Image::getAccelerationPriority() { return float(*classes[className]->invokeMethod<float>(this->object, "getAccelerationPriority", "()F")); }
Object Image::getProperty(String arg0, ImageObserver arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getProperty", "(Ljava/lang/String;Ljava/awt/image/ImageObserver;)Ljava/lang/Object;", arg0, arg1)); }
void Image::flush() { (classes[className]->invokeMethod<void>(this->object, "flush", "()V")); }


BufferedImage GraphicsConfiguration::createCompatibleImage(int arg0, int arg1) { return BufferedImage(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleImage", "(II)Ljava/awt/image/BufferedImage;", arg0, arg1)); }
BufferedImage GraphicsConfiguration::createCompatibleImage(int arg0, int arg1, int arg2) { return BufferedImage(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleImage", "(III)Ljava/awt/image/BufferedImage;", arg0, arg1, arg2)); }
VolatileImage GraphicsConfiguration::createCompatibleVolatileImage(int arg0, int arg1) { return VolatileImage(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(II)Ljava/awt/image/VolatileImage;", arg0, arg1)); }
VolatileImage GraphicsConfiguration::createCompatibleVolatileImage(int arg0, int arg1, ImageCapabilities arg2) { return VolatileImage(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(IILjava/awt/ImageCapabilities;)Ljava/awt/image/VolatileImage;", arg0, arg1, arg2)); }
VolatileImage GraphicsConfiguration::createCompatibleVolatileImage(int arg0, int arg1, int arg2) { return VolatileImage(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(III)Ljava/awt/image/VolatileImage;", arg0, arg1, arg2)); }
VolatileImage GraphicsConfiguration::createCompatibleVolatileImage(int arg0, int arg1, ImageCapabilities arg2, int arg3) { return VolatileImage(*classes[className]->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(IILjava/awt/ImageCapabilities;I)Ljava/awt/image/VolatileImage;", arg0, arg1, arg2, arg3)); }
ImageCapabilities GraphicsConfiguration::getImageCapabilities() { return ImageCapabilities(*classes[className]->invokeMethod<jobject>(this->object, "getImageCapabilities", "()Ljava/awt/ImageCapabilities;")); }
GraphicsDevice GraphicsConfiguration::getDevice() { return GraphicsDevice(*classes[className]->invokeMethod<jobject>(this->object, "getDevice", "()Ljava/awt/GraphicsDevice;")); }
AffineTransform GraphicsConfiguration::getDefaultTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultTransform", "()Ljava/awt/geom/AffineTransform;")); }
AffineTransform GraphicsConfiguration::getNormalizingTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getNormalizingTransform", "()Ljava/awt/geom/AffineTransform;")); }
BufferCapabilities GraphicsConfiguration::getBufferCapabilities() { return BufferCapabilities(*classes[className]->invokeMethod<jobject>(this->object, "getBufferCapabilities", "()Ljava/awt/BufferCapabilities;")); }
bool GraphicsConfiguration::isTranslucencyCapable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTranslucencyCapable", "()Z")); }
ColorModel GraphicsConfiguration::getColorModel() { return ColorModel(*classes[className]->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava/awt/image/ColorModel;")); }
ColorModel GraphicsConfiguration::getColorModel(int arg0) { return ColorModel(*classes[className]->invokeMethod<jobject>(this->object, "getColorModel", "(I)Ljava/awt/image/ColorModel;", arg0)); }
Rectangle GraphicsConfiguration::getBounds() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getBounds", "()Ljava/awt/Rectangle;")); }

int VolatileImage::getWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "()I")); }
int VolatileImage::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
ImageCapabilities VolatileImage::getCapabilities() { return ImageCapabilities(*classes[className]->invokeMethod<jobject>(this->object, "getCapabilities", "()Ljava/awt/ImageCapabilities;")); }
BufferedImage VolatileImage::getSnapshot() { return BufferedImage(*classes[className]->invokeMethod<jobject>(this->object, "getSnapshot", "()Ljava/awt/image/BufferedImage;")); }
bool VolatileImage::contentsLost() { return bool(*classes[className]->invokeMethod<bool>(this->object, "contentsLost", "()Z")); }
ImageProducer VolatileImage::getSource() { return ImageProducer(*classes[className]->invokeMethod<jobject>(this->object, "getSource", "()Ljava/awt/image/ImageProducer;")); }
Graphics2D VolatileImage::createGraphics() { return Graphics2D(*classes[className]->invokeMethod<jobject>(this->object, "createGraphics", "()Ljava/awt/Graphics2D;")); }
Graphics VolatileImage::getGraphics() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava/awt/Graphics;")); }
int VolatileImage::validate(GraphicsConfiguration arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "validate", "(Ljava/awt/GraphicsConfiguration;)I", arg0)); }

bool ImageCapabilities::isAccelerated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAccelerated", "()Z")); }
bool ImageCapabilities::isTrueVolatile() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTrueVolatile", "()Z")); }
Object ImageCapabilities::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }

Color Graphics::getColor() { return Color(*classes[className]->invokeMethod<jobject>(this->object, "getColor", "()Ljava/awt/Color;")); }
void Graphics::setColor(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setColor", "(Ljava/awt/Color;)V", arg0)); }
void Graphics::drawRect(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "drawRect", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Graphics::drawString(AttributedCharacterIterator arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawString", "(Ljava/text/AttributedCharacterIterator;II)V", arg0, arg1, arg2)); }
void Graphics::drawString(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawString", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
void Graphics::translate(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }
void Graphics::dispose() { (classes[className]->invokeMethod<void>(this->object, "dispose", "()V")); }
void Graphics::fillRect(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "fillRect", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Graphics::draw3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "draw3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }
void Graphics::fill3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (classes[className]->invokeMethod<void>(this->object, "fill3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }
bool Graphics::drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, Color arg9, ImageObserver arg10) { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawImage", "(Ljava/awt/Image;IIIIIIIILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
bool Graphics::drawImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawImage", "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3)); }
bool Graphics::drawImage(Image arg0, int arg1, int arg2, Color arg3, ImageObserver arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawImage", "(Ljava/awt/Image;IILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4)); }
bool Graphics::drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, ImageObserver arg5) { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawImage", "(Ljava/awt/Image;IIIILjava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }
bool Graphics::drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, ImageObserver arg9) { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawImage", "(Ljava/awt/Image;IIIIIIIILjava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
bool Graphics::drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, Color arg5, ImageObserver arg6) { return bool(*classes[className]->invokeMethod<bool>(this->object, "drawImage", "(Ljava/awt/Image;IIIILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void Graphics::clipRect(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "clipRect", "(IIII)V", arg0, arg1, arg2, arg3)); }
Font Graphics::getFont() { return Font(*classes[className]->invokeMethod<jobject>(this->object, "getFont", "()Ljava/awt/Font;")); }
FontMetrics Graphics::getFontMetrics(Font arg0) { return FontMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", arg0)); }
FontMetrics Graphics::getFontMetrics() { return FontMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getFontMetrics", "()Ljava/awt/FontMetrics;")); }
void Graphics::drawLine(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "drawLine", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Graphics::drawPolygon(arr_I arg0, arr_I arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawPolygon", "([I[II)V", arg0, arg1, arg2)); }
void Graphics::drawPolygon(Polygon arg0) { (classes[className]->invokeMethod<void>(this->object, "drawPolygon", "(Ljava/awt/Polygon;)V", arg0)); }
void Graphics::fillPolygon(arr_I arg0, arr_I arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "fillPolygon", "([I[II)V", arg0, arg1, arg2)); }
void Graphics::fillPolygon(Polygon arg0) { (classes[className]->invokeMethod<void>(this->object, "fillPolygon", "(Ljava/awt/Polygon;)V", arg0)); }
Rectangle Graphics::getClipBounds(Rectangle arg0) { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getClipBounds", "(Ljava/awt/Rectangle;)Ljava/awt/Rectangle;", arg0)); }
Rectangle Graphics::getClipBounds() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getClipBounds", "()Ljava/awt/Rectangle;")); }
void Graphics::setPaintMode() { (classes[className]->invokeMethod<void>(this->object, "setPaintMode", "()V")); }
void Graphics::setXORMode(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setXORMode", "(Ljava/awt/Color;)V", arg0)); }
void Graphics::setFont(Font arg0) { (classes[className]->invokeMethod<void>(this->object, "setFont", "(Ljava/awt/Font;)V", arg0)); }
void Graphics::setClip(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "setClip", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Graphics::setClip(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "setClip", "(Ljava/awt/Shape;)V", arg0)); }
Shape Graphics::getClip() { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getClip", "()Ljava/awt/Shape;")); }
void Graphics::copyArea(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "copyArea", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Graphics::clearRect(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "clearRect", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Graphics::drawRoundRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "drawRoundRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Graphics::fillRoundRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "fillRoundRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Graphics::drawOval(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "drawOval", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Graphics::fillOval(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "fillOval", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Graphics::drawArc(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "drawArc", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Graphics::fillArc(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (classes[className]->invokeMethod<void>(this->object, "fillArc", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Graphics::drawPolyline(arr_I arg0, arr_I arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "drawPolyline", "([I[II)V", arg0, arg1, arg2)); }
void Graphics::drawChars(arr_C arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "drawChars", "([CIIII)V", arg0, arg1, arg2, arg3, arg4)); }
void Graphics::drawBytes(arr_B arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "drawBytes", "([BIIII)V", arg0, arg1, arg2, arg3, arg4)); }
Rectangle Graphics::getClipRect() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getClipRect", "()Ljava/awt/Rectangle;")); }
bool Graphics::hitClip(int arg0, int arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hitClip", "(IIII)Z", arg0, arg1, arg2, arg3)); }
void Graphics::finalize() { (classes[className]->invokeMethod<void>(this->object, "finalize", "()V")); }
String Graphics::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Graphics Graphics::create() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "create", "()Ljava/awt/Graphics;")); }
Graphics Graphics::create(int arg0, int arg1, int arg2, int arg3) { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "create", "(IIII)Ljava/awt/Graphics;", arg0, arg1, arg2, arg3)); }

int Color::getAlpha() { return int(*classes[className]->invokeMethod<int>(this->object, "getAlpha", "()I")); }
Color Color::getColor(String arg0) { return Color(*classes[className]->invokeStaticMethod<jobject>("getColor", "(Ljava/lang/String;)Ljava/awt/Color;", arg0)); }
Color Color::getColor(String arg0, Color arg1) { return Color(*classes[className]->invokeStaticMethod<jobject>("getColor", "(Ljava/lang/String;Ljava/awt/Color;)Ljava/awt/Color;", arg0, arg1)); }
Color Color::getColor(String arg0, int arg1) { return Color(*classes[className]->invokeStaticMethod<jobject>("getColor", "(Ljava/lang/String;I)Ljava/awt/Color;", arg0, arg1)); }
int Color::getRGB() { return int(*classes[className]->invokeMethod<int>(this->object, "getRGB", "()I")); }
void Color::testColorValueRange(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeStaticMethod<void>("testColorValueRange", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Color::testColorValueRange(float arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeStaticMethod<void>("testColorValueRange", "(FFFF)V", arg0, arg1, arg2, arg3)); }
int Color::HSBtoRGB(float arg0, float arg1, float arg2) { return int(*classes[className]->invokeStaticMethod<int>("HSBtoRGB", "(FFF)I", arg0, arg1, arg2)); }
Color Color::getHSBColor(float arg0, float arg1, float arg2) { return Color(*classes[className]->invokeStaticMethod<jobject>("getHSBColor", "(FFF)Ljava/awt/Color;", arg0, arg1, arg2)); }
void Color::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
ColorSpace Color::getColorSpace() { return ColorSpace(*classes[className]->invokeMethod<jobject>(this->object, "getColorSpace", "()Ljava/awt/color/ColorSpace;")); }
int Color::getRed() { return int(*classes[className]->invokeMethod<int>(this->object, "getRed", "()I")); }
int Color::getGreen() { return int(*classes[className]->invokeMethod<int>(this->object, "getGreen", "()I")); }
int Color::getBlue() { return int(*classes[className]->invokeMethod<int>(this->object, "getBlue", "()I")); }
Color Color::brighter() { return Color(*classes[className]->invokeMethod<jobject>(this->object, "brighter", "()Ljava/awt/Color;")); }
Color Color::darker() { return Color(*classes[className]->invokeMethod<jobject>(this->object, "darker", "()Ljava/awt/Color;")); }
bool Color::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Color::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Color::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Color Color::decode(String arg0) { return Color(*classes[className]->invokeStaticMethod<jobject>("decode", "(Ljava/lang/String;)Ljava/awt/Color;", arg0)); }

void Font::applyTransform(AffineTransform arg0, AttributeValues arg1) { (classes[className]->invokeStaticMethod<void>("applyTransform", "(Ljava/awt/geom/AffineTransform;Lsun/font/AttributeValues;)V", arg0, arg1)); }
AffineTransform Font::getTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getTransform", "()Ljava/awt/geom/AffineTransform;")); }
bool Font::isTransformed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTransformed", "()Z")); }
FontPeer Font::getFontPeer() { return FontPeer(*classes[className]->invokeMethod<jobject>(this->object, "getFontPeer", "()Ljava/awt/peer/FontPeer;")); }
int Font::getStyle() { return int(*classes[className]->invokeMethod<int>(this->object, "getStyle", "()I")); }
String Font::getFontName(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFontName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Font::getFontName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFontName", "()Ljava/lang/String;")); }
void Font::initFromValues(AttributeValues arg0) { (classes[className]->invokeMethod<void>(this->object, "initFromValues", "(Lsun/font/AttributeValues;)V", arg0)); }
AttributeValues Font::getAttributeValues() { return AttributeValues(*classes[className]->invokeMethod<jobject>(this->object, "getAttributeValues", "()Lsun/font/AttributeValues;")); }
bool Font::hasLayoutAttributes() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasLayoutAttributes", "()Z")); }
bool Font::hasTempPermission() { return bool(*classes[className]->invokeStaticMethod<bool>("hasTempPermission", "()Z")); }
File Font::checkFontFile(int arg0, File arg1) { return File(*classes[className]->invokeStaticMethod<jobject>("checkFontFile", "(ILjava/io/File;)Ljava/io/File;", arg0, arg1)); }
String Font::getFamily_NoClientCode() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFamily_NoClientCode", "()Ljava/lang/String;")); }
Font2D Font::getFont2D() { return Font2D(*classes[className]->invokeMethod<jobject>(this->object, "getFont2D", "()Lsun/font/Font2D;")); }
bool Font::isBold() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBold", "()Z")); }
bool Font::isItalic() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItalic", "()Z")); }
int Font::getMissingGlyphCode() { return int(*classes[className]->invokeMethod<int>(this->object, "getMissingGlyphCode", "()I")); }
byte Font::getBaselineFor(char arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getBaselineFor", "(C)B", arg0)); }
void Font::applyStyle(int arg0, AttributeValues arg1) { (classes[className]->invokeStaticMethod<void>("applyStyle", "(ILsun/font/AttributeValues;)V", arg0, arg1)); }
bool Font::canDisplay(char arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDisplay", "(C)Z", arg0)); }
bool Font::canDisplay(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDisplay", "(I)Z", arg0)); }
float Font::getItalicAngle(FontRenderContext arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getItalicAngle", "(Ljava/awt/font/FontRenderContext;)F", arg0)); }
float Font::getItalicAngle() { return float(*classes[className]->invokeMethod<float>(this->object, "getItalicAngle", "()F")); }
FontLineMetrics Font::defaultLineMetrics(FontRenderContext arg0) { return FontLineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "defaultLineMetrics", "(Ljava/awt/font/FontRenderContext;)Lsun/font/FontLineMetrics;", arg0)); }
Rectangle2D Font::getStringBounds(arr_C arg0, int arg1, int arg2, FontRenderContext arg3) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "([CIILjava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", arg0, arg1, arg2, arg3)); }
Rectangle2D Font::getStringBounds(CharacterIterator arg0, int arg1, int arg2, FontRenderContext arg3) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava/text/CharacterIterator;IILjava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", arg0, arg1, arg2, arg3)); }
Rectangle2D Font::getStringBounds(String arg0, FontRenderContext arg1) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava/lang/String;Ljava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", arg0, arg1)); }
Rectangle2D Font::getStringBounds(String arg0, int arg1, int arg2, FontRenderContext arg3) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava/lang/String;IILjava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", arg0, arg1, arg2, arg3)); }
bool Font::textRequiresLayout(arr_C arg0, int arg1, int arg2) { return bool(*classes[className]->invokeStaticMethod<bool>("textRequiresLayout", "([CII)Z", arg0, arg1, arg2)); }
Font Font::createFont(int arg0, File arg1) { return Font(*classes[className]->invokeStaticMethod<jobject>("createFont", "(ILjava/io/File;)Ljava/awt/Font;", arg0, arg1)); }
Font Font::createFont(int arg0, InputStream arg1) { return Font(*classes[className]->invokeStaticMethod<jobject>("createFont", "(ILjava/io/InputStream;)Ljava/awt/Font;", arg0, arg1)); }
String Font::getPSName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPSName", "()Ljava/lang/String;")); }
float Font::getSize2D() { return float(*classes[className]->invokeMethod<float>(this->object, "getSize2D", "()F")); }
bool Font::isPlain() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPlain", "()Z")); }
Font Font::deriveFont(AffineTransform arg0) { return Font(*classes[className]->invokeMethod<jobject>(this->object, "deriveFont", "(Ljava/awt/geom/AffineTransform;)Ljava/awt/Font;", arg0)); }
Font Font::deriveFont(Map arg0) { return Font(*classes[className]->invokeMethod<jobject>(this->object, "deriveFont", "(Ljava/util/Map;)Ljava/awt/Font;", arg0)); }
Font Font::deriveFont(int arg0) { return Font(*classes[className]->invokeMethod<jobject>(this->object, "deriveFont", "(I)Ljava/awt/Font;", arg0)); }
Font Font::deriveFont(float arg0) { return Font(*classes[className]->invokeMethod<jobject>(this->object, "deriveFont", "(F)Ljava/awt/Font;", arg0)); }
Font Font::deriveFont(int arg0, AffineTransform arg1) { return Font(*classes[className]->invokeMethod<jobject>(this->object, "deriveFont", "(ILjava/awt/geom/AffineTransform;)Ljava/awt/Font;", arg0, arg1)); }
Font Font::deriveFont(int arg0, float arg1) { return Font(*classes[className]->invokeMethod<jobject>(this->object, "deriveFont", "(IF)Ljava/awt/Font;", arg0, arg1)); }
int Font::canDisplayUpTo(CharacterIterator arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "canDisplayUpTo", "(Ljava/text/CharacterIterator;II)I", arg0, arg1, arg2)); }
int Font::canDisplayUpTo(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "canDisplayUpTo", "(Ljava/lang/String;)I", arg0)); }
int Font::canDisplayUpTo(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "canDisplayUpTo", "([CII)I", arg0, arg1, arg2)); }
bool Font::hasUniformLineMetrics() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasUniformLineMetrics", "()Z")); }
LineMetrics Font::getLineMetrics(arr_C arg0, int arg1, int arg2, FontRenderContext arg3) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "([CIILjava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", arg0, arg1, arg2, arg3)); }
LineMetrics Font::getLineMetrics(String arg0, FontRenderContext arg1) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava/lang/String;Ljava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", arg0, arg1)); }
LineMetrics Font::getLineMetrics(String arg0, int arg1, int arg2, FontRenderContext arg3) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava/lang/String;IILjava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", arg0, arg1, arg2, arg3)); }
LineMetrics Font::getLineMetrics(CharacterIterator arg0, int arg1, int arg2, FontRenderContext arg3) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava/text/CharacterIterator;IILjava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", arg0, arg1, arg2, arg3)); }
Rectangle2D Font::getMaxCharBounds(FontRenderContext arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getMaxCharBounds", "(Ljava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", arg0)); }
GlyphVector Font::createGlyphVector(FontRenderContext arg0, CharacterIterator arg1) { return GlyphVector(*classes[className]->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava/awt/font/FontRenderContext;Ljava/text/CharacterIterator;)Ljava/awt/font/GlyphVector;", arg0, arg1)); }
GlyphVector Font::createGlyphVector(FontRenderContext arg0, arr_I arg1) { return GlyphVector(*classes[className]->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava/awt/font/FontRenderContext;[I)Ljava/awt/font/GlyphVector;", arg0, arg1)); }
GlyphVector Font::createGlyphVector(FontRenderContext arg0, String arg1) { return GlyphVector(*classes[className]->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava/awt/font/FontRenderContext;Ljava/lang/String;)Ljava/awt/font/GlyphVector;", arg0, arg1)); }
GlyphVector Font::createGlyphVector(FontRenderContext arg0, arr_C arg1) { return GlyphVector(*classes[className]->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava/awt/font/FontRenderContext;[C)Ljava/awt/font/GlyphVector;", arg0, arg1)); }
GlyphVector Font::layoutGlyphVector(FontRenderContext arg0, arr_C arg1, int arg2, int arg3, int arg4) { return GlyphVector(*classes[className]->invokeMethod<jobject>(this->object, "layoutGlyphVector", "(Ljava/awt/font/FontRenderContext;[CIII)Ljava/awt/font/GlyphVector;", arg0, arg1, arg2, arg3, arg4)); }
String Font::getFamily() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFamily", "()Ljava/lang/String;")); }
String Font::getFamily(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFamily", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
void Font::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
Font Font::getFont(String arg0) { return Font(*classes[className]->invokeStaticMethod<jobject>("getFont", "(Ljava/lang/String;)Ljava/awt/Font;", arg0)); }
Font Font::getFont(Map arg0) { return Font(*classes[className]->invokeStaticMethod<jobject>("getFont", "(Ljava/util/Map;)Ljava/awt/Font;", arg0)); }
Font Font::getFont(String arg0, Font arg1) { return Font(*classes[className]->invokeStaticMethod<jobject>("getFont", "(Ljava/lang/String;Ljava/awt/Font;)Ljava/awt/Font;", arg0, arg1)); }
int Font::getNumGlyphs() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumGlyphs", "()I")); }
String Font::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
bool Font::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Font::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Font::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Font Font::decode(String arg0) { return Font(*classes[className]->invokeStaticMethod<jobject>("decode", "(Ljava/lang/String;)Ljava/awt/Font;", arg0)); }
void Font::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Font::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
int Font::getSize() { return int(*classes[className]->invokeMethod<int>(this->object, "getSize", "()I")); }
Map Font::getAttributes() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getAttributes", "()Ljava/util/Map;")); }

void AttributeValues::setWidth(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setWidth", "(F)V", arg0)); }
void AttributeValues::setSize(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(F)V", arg0)); }
float AttributeValues::getWidth() { return float(*classes[className]->invokeMethod<float>(this->object, "getWidth", "()F")); }
float AttributeValues::getWeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getWeight", "()F")); }
AffineTransform AttributeValues::getTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getTransform", "()Ljava/awt/geom/AffineTransform;")); }
void AttributeValues::setFamily(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setFamily", "(Ljava/lang/String;)V", arg0)); }
void AttributeValues::setWeight(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setWeight", "(F)V", arg0)); }
void AttributeValues::setPosture(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setPosture", "(F)V", arg0)); }
void AttributeValues::defineAll(int arg0) { (classes[className]->invokeMethod<void>(this->object, "defineAll", "(I)V", arg0)); }
float AttributeValues::getPosture() { return float(*classes[className]->invokeMethod<float>(this->object, "getPosture", "()F")); }
AttributeValues AttributeValues::fromMap(Map arg0) { return AttributeValues(*classes[className]->invokeStaticMethod<jobject>("fromMap", "(Ljava/util/Map;)Lsun/font/AttributeValues;", arg0)); }
AttributeValues AttributeValues::fromMap(Map arg0, int arg1) { return AttributeValues(*classes[className]->invokeStaticMethod<jobject>("fromMap", "(Ljava/util/Map;I)Lsun/font/AttributeValues;", arg0, arg1)); }
bool AttributeValues::anyNonDefault(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "anyNonDefault", "(I)Z", arg0)); }
bool AttributeValues::isNonDefault(EAttribute arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNonDefault", "(Lsun/font/EAttribute;)Z", arg0)); }
bool AttributeValues::anyDefined(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "anyDefined", "(I)Z", arg0)); }
int AttributeValues::getSuperscript() { return int(*classes[className]->invokeMethod<int>(this->object, "getSuperscript", "()I")); }
Hashtable AttributeValues::toSerializableHashtable() { return Hashtable(*classes[className]->invokeMethod<jobject>(this->object, "toSerializableHashtable", "()Ljava/util/Hashtable;")); }
AttributeValues AttributeValues::fromSerializableHashtable(Hashtable arg0) { return AttributeValues(*classes[className]->invokeStaticMethod<jobject>("fromSerializableHashtable", "(Ljava/util/Hashtable;)Lsun/font/AttributeValues;", arg0)); }
bool AttributeValues::is16Hashtable(Hashtable arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("is16Hashtable", "(Ljava/util/Hashtable;)Z", arg0)); }
void AttributeValues::unsetDefault() { (classes[className]->invokeMethod<void>(this->object, "unsetDefault", "()V")); }
AffineTransform AttributeValues::getCharTransform(Map arg0) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getCharTransform", "(Ljava/util/Map;)Ljava/awt/geom/AffineTransform;", arg0)); }
AffineTransform AttributeValues::getCharTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getCharTransform", "()Ljava/awt/geom/AffineTransform;")); }
int AttributeValues::getKerning() { return int(*classes[className]->invokeMethod<int>(this->object, "getKerning", "()I")); }
int AttributeValues::getLigatures() { return int(*classes[className]->invokeMethod<int>(this->object, "getLigatures", "()I")); }
AffineTransform AttributeValues::getBaselineTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getBaselineTransform", "()Ljava/awt/geom/AffineTransform;")); }
AffineTransform AttributeValues::getBaselineTransform(Map arg0) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("getBaselineTransform", "(Ljava/util/Map;)Ljava/awt/geom/AffineTransform;", arg0)); }
void AttributeValues::updateDerivedTransforms() { (classes[className]->invokeMethod<void>(this->object, "updateDerivedTransforms", "()V")); }
void AttributeValues::i_set(EAttribute arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "i_set", "(Lsun/font/EAttribute;Ljava/lang/Object;)V", arg0, arg1)); }
void AttributeValues::i_set(EAttribute arg0, AttributeValues arg1) { (classes[className]->invokeMethod<void>(this->object, "i_set", "(Lsun/font/EAttribute;Lsun/font/AttributeValues;)V", arg0, arg1)); }
Object AttributeValues::i_get(EAttribute arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "i_get", "(Lsun/font/EAttribute;)Ljava/lang/Object;", arg0)); }
bool AttributeValues::i_validate(EAttribute arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "i_validate", "(Lsun/font/EAttribute;)Z", arg0)); }
bool AttributeValues::i_equals(EAttribute arg0, AttributeValues arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "i_equals", "(Lsun/font/EAttribute;Lsun/font/AttributeValues;)Z", arg0, arg1)); }
AffineTransform AttributeValues::extractXRotation(AffineTransform arg0, bool arg1) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("extractXRotation", "(Ljava/awt/geom/AffineTransform;Z)Ljava/awt/geom/AffineTransform;", arg0, arg1)); }
AffineTransform AttributeValues::extractRotation(Point2D_Double arg0, AffineTransform arg1, bool arg2) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("extractRotation", "(Ljava/awt/geom/Point2D$Double;Ljava/awt/geom/AffineTransform;Z)Ljava/awt/geom/AffineTransform;", arg0, arg1, arg2)); }
void AttributeValues::setSuperscript(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSuperscript", "(I)V", arg0)); }
GraphicAttribute AttributeValues::getCharReplacement() { return GraphicAttribute(*classes[className]->invokeMethod<jobject>(this->object, "getCharReplacement", "()Ljava/awt/font/GraphicAttribute;")); }
void AttributeValues::setCharReplacement(GraphicAttribute arg0) { (classes[className]->invokeMethod<void>(this->object, "setCharReplacement", "(Ljava/awt/font/GraphicAttribute;)V", arg0)); }
Paint AttributeValues::getForeground() { return Paint(*classes[className]->invokeMethod<jobject>(this->object, "getForeground", "()Ljava/awt/Paint;")); }
void AttributeValues::setForeground(Paint arg0) { (classes[className]->invokeMethod<void>(this->object, "setForeground", "(Ljava/awt/Paint;)V", arg0)); }
int AttributeValues::getUnderline() { return int(*classes[className]->invokeMethod<int>(this->object, "getUnderline", "()I")); }
void AttributeValues::setUnderline(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setUnderline", "(I)V", arg0)); }
bool AttributeValues::getStrikethrough() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getStrikethrough", "()Z")); }
void AttributeValues::setStrikethrough(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setStrikethrough", "(Z)V", arg0)); }
int AttributeValues::getRunDirection() { return int(*classes[className]->invokeMethod<int>(this->object, "getRunDirection", "()I")); }
void AttributeValues::setRunDirection(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setRunDirection", "(I)V", arg0)); }
int AttributeValues::getBidiEmbedding() { return int(*classes[className]->invokeMethod<int>(this->object, "getBidiEmbedding", "()I")); }
void AttributeValues::setBidiEmbedding(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setBidiEmbedding", "(I)V", arg0)); }
float AttributeValues::getJustification() { return float(*classes[className]->invokeMethod<float>(this->object, "getJustification", "()F")); }
float AttributeValues::getJustification(Map arg0) { return float(*classes[className]->invokeStaticMethod<float>("getJustification", "(Ljava/util/Map;)F", arg0)); }
void AttributeValues::setJustification(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setJustification", "(F)V", arg0)); }
Object AttributeValues::getInputMethodHighlight() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getInputMethodHighlight", "()Ljava/lang/Object;")); }
void AttributeValues::setInputMethodHighlight(Annotation arg0) { (classes[className]->invokeMethod<void>(this->object, "setInputMethodHighlight", "(Ljava/text/Annotation;)V", arg0)); }
void AttributeValues::setInputMethodHighlight(InputMethodHighlight arg0) { (classes[className]->invokeMethod<void>(this->object, "setInputMethodHighlight", "(Ljava/awt/im/InputMethodHighlight;)V", arg0)); }
int AttributeValues::getInputMethodUnderline() { return int(*classes[className]->invokeMethod<int>(this->object, "getInputMethodUnderline", "()I")); }
void AttributeValues::setInputMethodUnderline(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setInputMethodUnderline", "(I)V", arg0)); }
bool AttributeValues::getSwapColors() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getSwapColors", "()Z")); }
void AttributeValues::setSwapColors(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSwapColors", "(Z)V", arg0)); }
NumericShaper AttributeValues::getNumericShaping(Map arg0) { return NumericShaper(*classes[className]->invokeStaticMethod<jobject>("getNumericShaping", "(Ljava/util/Map;)Ljava/awt/font/NumericShaper;", arg0)); }
NumericShaper AttributeValues::getNumericShaping() { return NumericShaper(*classes[className]->invokeMethod<jobject>(this->object, "getNumericShaping", "()Ljava/awt/font/NumericShaper;")); }
void AttributeValues::setNumericShaping(NumericShaper arg0) { (classes[className]->invokeMethod<void>(this->object, "setNumericShaping", "(Ljava/awt/font/NumericShaper;)V", arg0)); }
void AttributeValues::setKerning(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setKerning", "(I)V", arg0)); }
float AttributeValues::getTracking() { return float(*classes[className]->invokeMethod<float>(this->object, "getTracking", "()F")); }
void AttributeValues::setTracking(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setTracking", "(F)V", arg0)); }
void AttributeValues::setLigatures(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setLigatures", "(I)V", arg0)); }
bool AttributeValues::allDefined(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "allDefined", "(I)Z", arg0)); }
void AttributeValues::unset(EAttribute arg0) { (classes[className]->invokeMethod<void>(this->object, "unset", "(Lsun/font/EAttribute;)V", arg0)); }
AttributeValues AttributeValues::applyIMHighlight() { return AttributeValues(*classes[className]->invokeMethod<jobject>(this->object, "applyIMHighlight", "()Lsun/font/AttributeValues;")); }
AffineTransform AttributeValues::extractYRotation(AffineTransform arg0, bool arg1) { return AffineTransform(*classes[className]->invokeStaticMethod<jobject>("extractYRotation", "(Ljava/awt/geom/AffineTransform;Z)Ljava/awt/geom/AffineTransform;", arg0, arg1)); }
void AttributeValues::setDefault(EAttribute arg0) { (classes[className]->invokeMethod<void>(this->object, "setDefault", "(Lsun/font/EAttribute;)V", arg0)); }
String AttributeValues::getFamily() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFamily", "()Ljava/lang/String;")); }
int AttributeValues::getMask(EAttribute arg0) { return int(*classes[className]->invokeStaticMethod<int>("getMask", "(Lsun/font/EAttribute;)I", arg0)); }
int AttributeValues::getMask(EAttribute_interface arg0) { return int(*classes[className]->invokeStaticMethod<int>("getMask", "([Lsun/font/EAttribute;)I", arg0)); }
void AttributeValues::setTransform(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "setTransform", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
void AttributeValues::setTransform(TransformAttribute arg0) { (classes[className]->invokeMethod<void>(this->object, "setTransform", "(Ljava/awt/font/TransformAttribute;)V", arg0)); }
void AttributeValues::setBackground(Paint arg0) { (classes[className]->invokeMethod<void>(this->object, "setBackground", "(Ljava/awt/Paint;)V", arg0)); }
Paint AttributeValues::getBackground() { return Paint(*classes[className]->invokeMethod<jobject>(this->object, "getBackground", "()Ljava/awt/Paint;")); }
Font AttributeValues::getFont() { return Font(*classes[className]->invokeMethod<jobject>(this->object, "getFont", "()Ljava/awt/Font;")); }
void AttributeValues::setFont(Font arg0) { (classes[className]->invokeMethod<void>(this->object, "setFont", "(Ljava/awt/Font;)V", arg0)); }
Object AttributeValues::get(EAttribute arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Lsun/font/EAttribute;)Ljava/lang/Object;", arg0)); }
bool AttributeValues::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
bool AttributeValues::equals(AttributeValues arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Lsun/font/AttributeValues;)Z", arg0)); }
bool AttributeValues::equals(Object arg0, Object arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("equals", "(Ljava/lang/Object;Ljava/lang/Object;)Z", arg0, arg1)); }
String AttributeValues::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int AttributeValues::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
AttributeValues AttributeValues::clone() { return AttributeValues(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Lsun/font/AttributeValues;")); }
void AttributeValues::update(EAttribute arg0) { (classes[className]->invokeMethod<void>(this->object, "update", "(Lsun/font/EAttribute;)V", arg0)); }
AttributeValues AttributeValues::merge(Map arg0, int arg1) { return AttributeValues(*classes[className]->invokeMethod<jobject>(this->object, "merge", "(Ljava/util/Map;I)Lsun/font/AttributeValues;", arg0, arg1)); }
AttributeValues AttributeValues::merge(AttributeValues arg0, int arg1) { return AttributeValues(*classes[className]->invokeMethod<jobject>(this->object, "merge", "(Lsun/font/AttributeValues;I)Lsun/font/AttributeValues;", arg0, arg1)); }
AttributeValues AttributeValues::merge(Map arg0) { return AttributeValues(*classes[className]->invokeMethod<jobject>(this->object, "merge", "(Ljava/util/Map;)Lsun/font/AttributeValues;", arg0)); }
AttributeValues AttributeValues::merge(AttributeValues arg0) { return AttributeValues(*classes[className]->invokeMethod<jobject>(this->object, "merge", "(Lsun/font/AttributeValues;)Lsun/font/AttributeValues;", arg0)); }
Map AttributeValues::toMap(Map arg0) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "toMap", "(Ljava/util/Map;)Ljava/util/Map;", arg0)); }
void AttributeValues::set(EAttribute arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(Lsun/font/EAttribute;Ljava/lang/Object;)V", arg0, arg1)); }
void AttributeValues::set(EAttribute arg0, AttributeValues arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(Lsun/font/EAttribute;Lsun/font/AttributeValues;)V", arg0, arg1)); }
float AttributeValues::getSize() { return float(*classes[className]->invokeMethod<float>(this->object, "getSize", "()F")); }
bool AttributeValues::isDefined(EAttribute arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDefined", "(Lsun/font/EAttribute;)Z", arg0)); }

EAttribute EAttribute::forAttribute(AttributedCharacterIterator_Attribute arg0) { return EAttribute(*classes[className]->invokeStaticMethod<jobject>("forAttribute", "(Ljava/text/AttributedCharacterIterator$Attribute;)Lsun/font/EAttribute;", arg0)); }
String EAttribute::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
EAttribute EAttribute::valueOf(String arg0) { return EAttribute(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lsun/font/EAttribute;", arg0)); }

String Hashtable::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Object Hashtable::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
bool Hashtable::contains(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/lang/Object;)Z", arg0)); }
Enumeration Hashtable::elements() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "elements", "()Ljava/util/Enumeration;")); }
void Hashtable::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Hashtable::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
Enumeration Hashtable::keys() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "keys", "()Ljava/util/Enumeration;")); }
Hashtable Hashtable::cloneHashtable() { return Hashtable(*classes[className]->invokeMethod<jobject>(this->object, "cloneHashtable", "()Ljava/util/Hashtable;")); }
void Hashtable::defaultWriteHashtable(ObjectOutputStream arg0, int arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "defaultWriteHashtable", "(Ljava/io/ObjectOutputStream;IF)V", arg0, arg1, arg2)); }
void Hashtable::rehash() { (classes[className]->invokeMethod<void>(this->object, "rehash", "()V")); }
void Hashtable::writeHashtable(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeHashtable", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
void Hashtable::readHashtable(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readHashtable", "(Ljava/io/ObjectInputStream;)V", arg0)); }
Enumeration Hashtable::getEnumeration(int arg0) { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "getEnumeration", "(I)Ljava/util/Enumeration;", arg0)); }
void Hashtable::addEntry(int arg0, Object arg1, Object arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "addEntry", "(ILjava/lang/Object;Ljava/lang/Object;I)V", arg0, arg1, arg2, arg3)); }
void Hashtable::reconstitutionPut(Hashtable_Entry_interface arg0, Object arg1, Object arg2) { (classes[className]->invokeMethod<void>(this->object, "reconstitutionPut", "([Ljava/util/Hashtable$Entry;Ljava/lang/Object;Ljava/lang/Object;)V", arg0, arg1, arg2)); }
Iterator Hashtable::getIterator(int arg0) { return Iterator(*classes[className]->invokeMethod<jobject>(this->object, "getIterator", "(I)Ljava/util/Iterator;", arg0)); }


Object Dictionary::remove(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object Dictionary::get(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object Dictionary::put(Object arg0, Object arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1)); }
bool Dictionary::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
int Dictionary::size() { return int(*classes[className]->invokeMethod<int>(this->object, "size", "()I")); }
Enumeration Dictionary::elements() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "elements", "()Ljava/util/Enumeration;")); }
Enumeration Dictionary::keys() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "keys", "()Ljava/util/Enumeration;")); }

double Point2D_Double::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double Point2D_Double::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
void Point2D_Double::setLocation(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }
String Point2D_Double::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

void GraphicAttribute::draw(Graphics2D arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "draw", "(Ljava/awt/Graphics2D;FF)V", arg0, arg1, arg2)); }
float GraphicAttribute::getAscent() { return float(*classes[className]->invokeMethod<float>(this->object, "getAscent", "()F")); }
float GraphicAttribute::getAdvance() { return float(*classes[className]->invokeMethod<float>(this->object, "getAdvance", "()F")); }
float GraphicAttribute::getDescent() { return float(*classes[className]->invokeMethod<float>(this->object, "getDescent", "()F")); }
int GraphicAttribute::getAlignment() { return int(*classes[className]->invokeMethod<int>(this->object, "getAlignment", "()I")); }
GlyphJustificationInfo GraphicAttribute::getJustificationInfo() { return GlyphJustificationInfo(*classes[className]->invokeMethod<jobject>(this->object, "getJustificationInfo", "()Ljava/awt/font/GlyphJustificationInfo;")); }
Shape GraphicAttribute::getOutline(AffineTransform arg0) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getOutline", "(Ljava/awt/geom/AffineTransform;)Ljava/awt/Shape;", arg0)); }
Rectangle2D GraphicAttribute::getBounds() { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getBounds", "()Ljava/awt/geom/Rectangle2D;")); }

bool GlyphJustificationInfo::priorityIsValid(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("priorityIsValid", "(I)Z", arg0)); }

String Annotation::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Object Annotation::getValue() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getValue", "()Ljava/lang/Object;")); }

bool InputMethodHighlight::isSelected() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSelected", "()Z")); }
Map InputMethodHighlight::getStyle() { return Map(*classes[className]->invokeMethod<jobject>(this->object, "getStyle", "()Ljava/util/Map;")); }
int InputMethodHighlight::getVariation() { return int(*classes[className]->invokeMethod<int>(this->object, "getVariation", "()I")); }
int InputMethodHighlight::getState() { return int(*classes[className]->invokeMethod<int>(this->object, "getState", "()I")); }

bool NumericShaper::isStrongDirectional(char arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStrongDirectional", "(C)Z", arg0)); }
int NumericShaper::getContextKey(char arg0) { return int(*classes[className]->invokeStaticMethod<int>("getContextKey", "(C)I", arg0)); }
NumericShaper_Range NumericShaper::rangeForCodePoint(int arg0) { return NumericShaper_Range(*classes[className]->invokeMethod<jobject>(this->object, "rangeForCodePoint", "(I)Ljava/awt/font/NumericShaper$Range;", arg0)); }
int NumericShaper::getHighBit(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getHighBit", "(I)I", arg0)); }
NumericShaper NumericShaper::getShaper(NumericShaper_Range arg0) { return NumericShaper(*classes[className]->invokeStaticMethod<jobject>("getShaper", "(Ljava/awt/font/NumericShaper$Range;)Ljava/awt/font/NumericShaper;", arg0)); }
NumericShaper NumericShaper::getShaper(int arg0) { return NumericShaper(*classes[className]->invokeStaticMethod<jobject>("getShaper", "(I)Ljava/awt/font/NumericShaper;", arg0)); }
NumericShaper NumericShaper::getContextualShaper(Set arg0, NumericShaper_Range arg1) { return NumericShaper(*classes[className]->invokeStaticMethod<jobject>("getContextualShaper", "(Ljava/util/Set;Ljava/awt/font/NumericShaper$Range;)Ljava/awt/font/NumericShaper;", arg0, arg1)); }
NumericShaper NumericShaper::getContextualShaper(int arg0, int arg1) { return NumericShaper(*classes[className]->invokeStaticMethod<jobject>("getContextualShaper", "(II)Ljava/awt/font/NumericShaper;", arg0, arg1)); }
NumericShaper NumericShaper::getContextualShaper(Set arg0) { return NumericShaper(*classes[className]->invokeStaticMethod<jobject>("getContextualShaper", "(Ljava/util/Set;)Ljava/awt/font/NumericShaper;", arg0)); }
NumericShaper NumericShaper::getContextualShaper(int arg0) { return NumericShaper(*classes[className]->invokeStaticMethod<jobject>("getContextualShaper", "(I)Ljava/awt/font/NumericShaper;", arg0)); }
int NumericShaper::getRanges() { return int(*classes[className]->invokeMethod<int>(this->object, "getRanges", "()I")); }
Set NumericShaper::getRangeSet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getRangeSet", "()Ljava/util/Set;")); }
int NumericShaper::getKeyFromMask(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getKeyFromMask", "(I)I", arg0)); }
void NumericShaper::checkParams(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "checkParams", "([CII)V", arg0, arg1, arg2)); }
bool NumericShaper::isContextual() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isContextual", "()Z")); }
void NumericShaper::shapeContextually(arr_C arg0, int arg1, int arg2, NumericShaper_Range arg3) { (classes[className]->invokeMethod<void>(this->object, "shapeContextually", "([CIILjava/awt/font/NumericShaper$Range;)V", arg0, arg1, arg2, arg3)); }
void NumericShaper::shapeContextually(arr_C arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "shapeContextually", "([CIII)V", arg0, arg1, arg2, arg3)); }
void NumericShaper::shapeNonContextually(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "shapeNonContextually", "([CII)V", arg0, arg1, arg2)); }
void NumericShaper::shape(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "shape", "([CII)V", arg0, arg1, arg2)); }
void NumericShaper::shape(arr_C arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "shape", "([CIII)V", arg0, arg1, arg2, arg3)); }
void NumericShaper::shape(arr_C arg0, int arg1, int arg2, NumericShaper_Range arg3) { (classes[className]->invokeMethod<void>(this->object, "shape", "([CIILjava/awt/font/NumericShaper$Range;)V", arg0, arg1, arg2, arg3)); }
bool NumericShaper::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String NumericShaper::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int NumericShaper::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void NumericShaper::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
int NumericShaper::search(int arg0, arr_I arg1, int arg2, int arg3) { return int(*classes[className]->invokeStaticMethod<int>("search", "(I[III)I", arg0, arg1, arg2, arg3)); }

Set NumericShaper_Range::maskToRangeSet(int arg0) { return Set(*classes[className]->invokeStaticMethod<jobject>("maskToRangeSet", "(I)Ljava/util/Set;", arg0)); }
int NumericShaper_Range::getDigitBase() { return int(*classes[className]->invokeMethod<int>(this->object, "getDigitBase", "()I")); }
char NumericShaper_Range::getNumericBase() { return char(*classes[className]->invokeMethod<char>(this->object, "getNumericBase", "()C")); }
NumericShaper_Range NumericShaper_Range::indexToRange(int arg0) { return NumericShaper_Range(*classes[className]->invokeStaticMethod<jobject>("indexToRange", "(I)Ljava/awt/font/NumericShaper$Range;", arg0)); }
int NumericShaper_Range::toRangeMask(Set arg0) { return int(*classes[className]->invokeStaticMethod<int>("toRangeMask", "(Ljava/util/Set;)I", arg0)); }
int NumericShaper_Range::toRangeIndex(NumericShaper_Range arg0) { return int(*classes[className]->invokeStaticMethod<int>("toRangeIndex", "(Ljava/awt/font/NumericShaper$Range;)I", arg0)); }
bool NumericShaper_Range::inRange(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "inRange", "(I)Z", arg0)); }
NumericShaper_Range NumericShaper_Range::valueOf(String arg0) { return NumericShaper_Range(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/awt/font/NumericShaper$Range;", arg0)); }


AffineTransform TransformAttribute::getTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getTransform", "()Ljava/awt/geom/AffineTransform;")); }
bool TransformAttribute::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int TransformAttribute::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void TransformAttribute::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
bool TransformAttribute::isIdentity() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isIdentity", "()Z")); }
Object TransformAttribute::readResolve() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readResolve", "()Ljava/lang/Object;")); }


int Font2D::getWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "()I")); }
int Font2D::getWeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getWeight", "()I")); }
int Font2D::getStyle() { return int(*classes[className]->invokeMethod<int>(this->object, "getStyle", "()I")); }
String Font2D::getFontName(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFontName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Font2D::getFamilyName(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFamilyName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String Font2D::getPostscriptName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPostscriptName", "()Ljava/lang/String;")); }
int Font2D::getMissingGlyphCode() { return int(*classes[className]->invokeMethod<int>(this->object, "getMissingGlyphCode", "()I")); }
byte Font2D::getBaselineFor(char arg0) { return byte(*classes[className]->invokeMethod<byte>(this->object, "getBaselineFor", "(C)B", arg0)); }
bool Font2D::canDisplay(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDisplay", "(I)Z", arg0)); }
bool Font2D::canDisplay(char arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDisplay", "(C)Z", arg0)); }
float Font2D::getItalicAngle(Font arg0, AffineTransform arg1, Object arg2, Object arg3) { return float(*classes[className]->invokeMethod<float>(this->object, "getItalicAngle", "(Ljava/awt/Font;Ljava/awt/geom/AffineTransform;Ljava/lang/Object;Ljava/lang/Object;)F", arg0, arg1, arg2, arg3)); }
CharToGlyphMapper Font2D::getMapper() { return CharToGlyphMapper(*classes[className]->invokeMethod<jobject>(this->object, "getMapper", "()Lsun/font/CharToGlyphMapper;")); }
FontStrike Font2D::getStrike(Font arg0, FontRenderContext arg1) { return FontStrike(*classes[className]->invokeMethod<jobject>(this->object, "getStrike", "(Ljava/awt/Font;Ljava/awt/font/FontRenderContext;)Lsun/font/FontStrike;", arg0, arg1)); }
FontStrike Font2D::getStrike(FontStrikeDesc arg0, bool arg1) { return FontStrike(*classes[className]->invokeMethod<jobject>(this->object, "getStrike", "(Lsun/font/FontStrikeDesc;Z)Lsun/font/FontStrike;", arg0, arg1)); }
FontStrike Font2D::getStrike(FontStrikeDesc arg0) { return FontStrike(*classes[className]->invokeMethod<jobject>(this->object, "getStrike", "(Lsun/font/FontStrikeDesc;)Lsun/font/FontStrike;", arg0)); }
FontStrike Font2D::getStrike(Font arg0, AffineTransform arg1, AffineTransform arg2, int arg3, int arg4) { return FontStrike(*classes[className]->invokeMethod<jobject>(this->object, "getStrike", "(Ljava/awt/Font;Ljava/awt/geom/AffineTransform;Ljava/awt/geom/AffineTransform;II)Lsun/font/FontStrike;", arg0, arg1, arg2, arg3, arg4)); }
FontStrike Font2D::getStrike(Font arg0, AffineTransform arg1, int arg2, int arg3) { return FontStrike(*classes[className]->invokeMethod<jobject>(this->object, "getStrike", "(Ljava/awt/Font;Ljava/awt/geom/AffineTransform;II)Lsun/font/FontStrike;", arg0, arg1, arg2, arg3)); }
FontStrike Font2D::getStrike(Font arg0) { return FontStrike(*classes[className]->invokeMethod<jobject>(this->object, "getStrike", "(Ljava/awt/Font;)Lsun/font/FontStrike;", arg0)); }
void Font2D::updateLastStrikeRef(FontStrike arg0) { (classes[className]->invokeMethod<void>(this->object, "updateLastStrikeRef", "(Lsun/font/FontStrike;)V", arg0)); }
FontStrike Font2D::createStrike(FontStrikeDesc arg0) { return FontStrike(*classes[className]->invokeMethod<jobject>(this->object, "createStrike", "(Lsun/font/FontStrikeDesc;)Lsun/font/FontStrike;", arg0)); }
void Font2D::getStyleMetrics(float arg0, arr_F arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "getStyleMetrics", "(F[FI)V", arg0, arg1, arg2)); }
int Font2D::charToGlyph(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "charToGlyph", "(I)I", arg0)); }
int Font2D::charToVariationGlyph(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "charToVariationGlyph", "(II)I", arg0, arg1)); }
void Font2D::setUseWeakRefs(bool arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setUseWeakRefs", "(ZI)V", arg0, arg1)); }
void Font2D::setStyle() { (classes[className]->invokeMethod<void>(this->object, "setStyle", "()V")); }
int Font2D::getRank() { return int(*classes[className]->invokeMethod<int>(this->object, "getRank", "()I")); }
void Font2D::setRank(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setRank", "(I)V", arg0)); }
int Font2D::getValidatedGlyphCode(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getValidatedGlyphCode", "(I)I", arg0)); }
long Font2D::getPlatformNativeFontPtr() { return long(*classes[className]->invokeMethod<long>(this->object, "getPlatformNativeFontPtr", "()J")); }
long Font2D::getUnitsPerEm() { return long(*classes[className]->invokeMethod<long>(this->object, "getUnitsPerEm", "()J")); }
bool Font2D::supportsEncoding(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "supportsEncoding", "(Ljava/lang/String;)Z", arg0)); }
bool Font2D::canDoStyle(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDoStyle", "(I)Z", arg0)); }
bool Font2D::useAAForPtSize(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "useAAForPtSize", "(I)Z", arg0)); }
bool Font2D::hasSupplementaryChars() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasSupplementaryChars", "()Z")); }
void Font2D::getFontMetrics(Font arg0, FontRenderContext arg1, arr_F arg2) { (classes[className]->invokeMethod<void>(this->object, "getFontMetrics", "(Ljava/awt/Font;Ljava/awt/font/FontRenderContext;[F)V", arg0, arg1, arg2)); }
void Font2D::getFontMetrics(Font arg0, AffineTransform arg1, Object arg2, Object arg3, arr_F arg4) { (classes[className]->invokeMethod<void>(this->object, "getFontMetrics", "(Ljava/awt/Font;Ljava/awt/geom/AffineTransform;Ljava/lang/Object;Ljava/lang/Object;[F)V", arg0, arg1, arg2, arg3, arg4)); }
int Font2D::getNumGlyphs() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumGlyphs", "()I")); }

void CharToGlyphMapper::charsToGlyphs(int arg0, arr_I arg1, arr_I arg2) { (classes[className]->invokeMethod<void>(this->object, "charsToGlyphs", "(I[I[I)V", arg0, arg1, arg2)); }
void CharToGlyphMapper::charsToGlyphs(int arg0, arr_C arg1, arr_I arg2) { (classes[className]->invokeMethod<void>(this->object, "charsToGlyphs", "(I[C[I)V", arg0, arg1, arg2)); }
bool CharToGlyphMapper::charsToGlyphsNS(int arg0, arr_C arg1, arr_I arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "charsToGlyphsNS", "(I[C[I)Z", arg0, arg1, arg2)); }
bool CharToGlyphMapper::isVariationSelector(int arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isVariationSelector", "(I)Z", arg0)); }
int CharToGlyphMapper::getMissingGlyphCode() { return int(*classes[className]->invokeMethod<int>(this->object, "getMissingGlyphCode", "()I")); }
bool CharToGlyphMapper::canDisplay(char arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDisplay", "(C)Z", arg0)); }
bool CharToGlyphMapper::canDisplay(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canDisplay", "(I)Z", arg0)); }
int CharToGlyphMapper::charToGlyph(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "charToGlyph", "(I)I", arg0)); }
int CharToGlyphMapper::charToGlyph(char arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "charToGlyph", "(C)I", arg0)); }
int CharToGlyphMapper::charToVariationGlyph(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "charToVariationGlyph", "(II)I", arg0, arg1)); }
int CharToGlyphMapper::getNumGlyphs() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumGlyphs", "()I")); }

AffineTransform FontRenderContext::getTransform() { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getTransform", "()Ljava/awt/geom/AffineTransform;")); }
bool FontRenderContext::isAntiAliased() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAntiAliased", "()Z")); }
bool FontRenderContext::usesFractionalMetrics() { return bool(*classes[className]->invokeMethod<bool>(this->object, "usesFractionalMetrics", "()Z")); }
Object FontRenderContext::getAntiAliasingHint() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getAntiAliasingHint", "()Ljava/lang/Object;")); }
Object FontRenderContext::getFractionalMetricsHint() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getFractionalMetricsHint", "()Ljava/lang/Object;")); }
bool FontRenderContext::isTransformed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTransformed", "()Z")); }
int FontRenderContext::getTransformType() { return int(*classes[className]->invokeMethod<int>(this->object, "getTransformType", "()I")); }
bool FontRenderContext::equals(FontRenderContext arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/awt/font/FontRenderContext;)Z", arg0)); }
bool FontRenderContext::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int FontRenderContext::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

void FontStrike::getGlyphImagePtrs(arr_I arg0, arr_J arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "getGlyphImagePtrs", "([I[JI)V", arg0, arg1, arg2)); }
long FontStrike::getGlyphImagePtr(int arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getGlyphImagePtr", "(I)J", arg0)); }
void FontStrike::getGlyphImageBounds(int arg0, Point2D_Float arg1, Rectangle arg2) { (classes[className]->invokeMethod<void>(this->object, "getGlyphImageBounds", "(ILjava/awt/geom/Point2D$Float;Ljava/awt/Rectangle;)V", arg0, arg1, arg2)); }
Point2D_Float FontStrike::getCharMetrics(char arg0) { return Point2D_Float(*classes[className]->invokeMethod<jobject>(this->object, "getCharMetrics", "(C)Ljava/awt/geom/Point2D$Float;", arg0)); }
float FontStrike::getGlyphAdvance(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getGlyphAdvance", "(I)F", arg0)); }
float FontStrike::getCodePointAdvance(int arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getCodePointAdvance", "(I)F", arg0)); }
Rectangle2D_Float FontStrike::getGlyphOutlineBounds(int arg0) { return Rectangle2D_Float(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphOutlineBounds", "(I)Ljava/awt/geom/Rectangle2D$Float;", arg0)); }
GeneralPath FontStrike::getGlyphVectorOutline(arr_I arg0, float arg1, float arg2) { return GeneralPath(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphVectorOutline", "([IFF)Ljava/awt/geom/GeneralPath;", arg0, arg1, arg2)); }
Point2D_Float FontStrike::getGlyphMetrics(int arg0) { return Point2D_Float(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphMetrics", "(I)Ljava/awt/geom/Point2D$Float;", arg0)); }
StrikeMetrics FontStrike::getFontMetrics() { return StrikeMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getFontMetrics", "()Lsun/font/StrikeMetrics;")); }
GeneralPath FontStrike::getGlyphOutline(int arg0, float arg1, float arg2) { return GeneralPath(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphOutline", "(IFF)Ljava/awt/geom/GeneralPath;", arg0, arg1, arg2)); }
int FontStrike::getNumGlyphs() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumGlyphs", "()I")); }

double Point2D_Float::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double Point2D_Float::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
void Point2D_Float::setLocation(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(FF)V", arg0, arg1)); }
void Point2D_Float::setLocation(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }
String Point2D_Float::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

double Rectangle2D_Float::getX() { return double(*classes[className]->invokeMethod<double>(this->object, "getX", "()D")); }
double Rectangle2D_Float::getY() { return double(*classes[className]->invokeMethod<double>(this->object, "getY", "()D")); }
double Rectangle2D_Float::getWidth() { return double(*classes[className]->invokeMethod<double>(this->object, "getWidth", "()D")); }
double Rectangle2D_Float::getHeight() { return double(*classes[className]->invokeMethod<double>(this->object, "getHeight", "()D")); }
void Rectangle2D_Float::setRect(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void Rectangle2D_Float::setRect(Rectangle2D arg0) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(Ljava/awt/geom/Rectangle2D;)V", arg0)); }
void Rectangle2D_Float::setRect(float arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "setRect", "(FFFF)V", arg0, arg1, arg2, arg3)); }
int Rectangle2D_Float::outcode(double arg0, double arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "outcode", "(DD)I", arg0, arg1)); }
Rectangle2D Rectangle2D_Float::createIntersection(Rectangle2D arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "createIntersection", "(Ljava/awt/geom/Rectangle2D;)Ljava/awt/geom/Rectangle2D;", arg0)); }
Rectangle2D Rectangle2D_Float::createUnion(Rectangle2D arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "createUnion", "(Ljava/awt/geom/Rectangle2D;)Ljava/awt/geom/Rectangle2D;", arg0)); }
String Rectangle2D_Float::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
bool Rectangle2D_Float::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }


void Path2D_Float::needRoom(bool arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "needRoom", "(ZI)V", arg0, arg1)); }
void Path2D_Float::moveTo(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "moveTo", "(DD)V", arg0, arg1)); }
void Path2D_Float::moveTo(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "moveTo", "(FF)V", arg0, arg1)); }
void Path2D_Float::lineTo(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "lineTo", "(FF)V", arg0, arg1)); }
void Path2D_Float::lineTo(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "lineTo", "(DD)V", arg0, arg1)); }
void Path2D_Float::quadTo(float arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "quadTo", "(FFFF)V", arg0, arg1, arg2, arg3)); }
void Path2D_Float::quadTo(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "quadTo", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void Path2D_Float::curveTo(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { (classes[className]->invokeMethod<void>(this->object, "curveTo", "(DDDDDD)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Path2D_Float::curveTo(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "curveTo", "(FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
Point2D Path2D_Float::getPoint(int arg0) { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "getPoint", "(I)Ljava/awt/geom/Point2D;", arg0)); }
int Path2D_Float::pointCrossings(double arg0, double arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "pointCrossings", "(DD)I", arg0, arg1)); }
int Path2D_Float::rectCrossings(double arg0, double arg1, double arg2, double arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "rectCrossings", "(DDDD)I", arg0, arg1, arg2, arg3)); }
void Path2D_Float::append(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "append", "(DD)V", arg0, arg1)); }
void Path2D_Float::append(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "append", "(FF)V", arg0, arg1)); }
void Path2D_Float::append(PathIterator arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "append", "(Ljava/awt/geom/PathIterator;Z)V", arg0, arg1)); }
Object Path2D_Float::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void Path2D_Float::transform(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "transform", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
void Path2D_Float::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Path2D_Float::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
void Path2D_Float::trimToSize() { (classes[className]->invokeMethod<void>(this->object, "trimToSize", "()V")); }


void Path2D::setWindingRule(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setWindingRule", "(I)V", arg0)); }
void Path2D::needRoom(bool arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "needRoom", "(ZI)V", arg0, arg1)); }
void Path2D::moveTo(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "moveTo", "(DD)V", arg0, arg1)); }
void Path2D::lineTo(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "lineTo", "(DD)V", arg0, arg1)); }
void Path2D::quadTo(double arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "quadTo", "(DDDD)V", arg0, arg1, arg2, arg3)); }
void Path2D::curveTo(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { (classes[className]->invokeMethod<void>(this->object, "curveTo", "(DDDDDD)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void Path2D::closePath() { (classes[className]->invokeMethod<void>(this->object, "closePath", "()V")); }
Point2D Path2D::getPoint(int arg0) { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "getPoint", "(I)Ljava/awt/geom/Point2D;", arg0)); }
int Path2D::pointCrossings(double arg0, double arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "pointCrossings", "(DD)I", arg0, arg1)); }
int Path2D::rectCrossings(double arg0, double arg1, double arg2, double arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "rectCrossings", "(DDDD)I", arg0, arg1, arg2, arg3)); }
Point2D Path2D::getCurrentPoint() { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentPoint", "()Ljava/awt/geom/Point2D;")); }
Shape Path2D::createTransformedShape(AffineTransform arg0) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "createTransformedShape", "(Ljava/awt/geom/AffineTransform;)Ljava/awt/Shape;", arg0)); }
int Path2D::getWindingRule() { return int(*classes[className]->invokeMethod<int>(this->object, "getWindingRule", "()I")); }
void Path2D::append(double arg0, double arg1) { (classes[className]->invokeMethod<void>(this->object, "append", "(DD)V", arg0, arg1)); }
void Path2D::append(float arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "append", "(FF)V", arg0, arg1)); }
void Path2D::append(PathIterator arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "append", "(Ljava/awt/geom/PathIterator;Z)V", arg0, arg1)); }
void Path2D::append(Shape arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "append", "(Ljava/awt/Shape;Z)V", arg0, arg1)); }
Object Path2D::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void Path2D::transform(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "transform", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
void Path2D::readObject(ObjectInputStream arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;Z)V", arg0, arg1)); }
void Path2D::writeObject(ObjectOutputStream arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;Z)V", arg0, arg1)); }
void Path2D::trimToSize() { (classes[className]->invokeMethod<void>(this->object, "trimToSize", "()V")); }
void Path2D::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }

void StrikeMetrics::convertToUserSpace(AffineTransform arg0) { (classes[className]->invokeMethod<void>(this->object, "convertToUserSpace", "(Ljava/awt/geom/AffineTransform;)V", arg0)); }
float StrikeMetrics::getAscent() { return float(*classes[className]->invokeMethod<float>(this->object, "getAscent", "()F")); }
float StrikeMetrics::getDescent() { return float(*classes[className]->invokeMethod<float>(this->object, "getDescent", "()F")); }
float StrikeMetrics::getLeading() { return float(*classes[className]->invokeMethod<float>(this->object, "getLeading", "()F")); }
float StrikeMetrics::getMaxAdvance() { return float(*classes[className]->invokeMethod<float>(this->object, "getMaxAdvance", "()F")); }
String StrikeMetrics::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void StrikeMetrics::merge(StrikeMetrics arg0) { (classes[className]->invokeMethod<void>(this->object, "merge", "(Lsun/font/StrikeMetrics;)V", arg0)); }

int FontStrikeDesc::getAAHintIntVal(Object arg0, Font2D arg1, int arg2) { return int(*classes[className]->invokeStaticMethod<int>("getAAHintIntVal", "(Ljava/lang/Object;Lsun/font/Font2D;I)I", arg0, arg1, arg2)); }
int FontStrikeDesc::getAAHintIntVal(Font2D arg0, Font arg1, FontRenderContext arg2) { return int(*classes[className]->invokeStaticMethod<int>("getAAHintIntVal", "(Lsun/font/Font2D;Ljava/awt/Font;Ljava/awt/font/FontRenderContext;)I", arg0, arg1, arg2)); }
int FontStrikeDesc::getFMHintIntVal(Object arg0) { return int(*classes[className]->invokeStaticMethod<int>("getFMHintIntVal", "(Ljava/lang/Object;)I", arg0)); }
bool FontStrikeDesc::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String FontStrikeDesc::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int FontStrikeDesc::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

float FontLineMetrics::getHeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getHeight", "()F")); }
float FontLineMetrics::getAscent() { return float(*classes[className]->invokeMethod<float>(this->object, "getAscent", "()F")); }
float FontLineMetrics::getDescent() { return float(*classes[className]->invokeMethod<float>(this->object, "getDescent", "()F")); }
float FontLineMetrics::getLeading() { return float(*classes[className]->invokeMethod<float>(this->object, "getLeading", "()F")); }
int FontLineMetrics::getNumChars() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumChars", "()I")); }
int FontLineMetrics::getBaselineIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getBaselineIndex", "()I")); }
float FontLineMetrics::getStrikethroughOffset() { return float(*classes[className]->invokeMethod<float>(this->object, "getStrikethroughOffset", "()F")); }
float FontLineMetrics::getStrikethroughThickness() { return float(*classes[className]->invokeMethod<float>(this->object, "getStrikethroughThickness", "()F")); }
float FontLineMetrics::getUnderlineOffset() { return float(*classes[className]->invokeMethod<float>(this->object, "getUnderlineOffset", "()F")); }
float FontLineMetrics::getUnderlineThickness() { return float(*classes[className]->invokeMethod<float>(this->object, "getUnderlineThickness", "()F")); }
bool FontLineMetrics::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int FontLineMetrics::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object FontLineMetrics::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }

float LineMetrics::getHeight() { return float(*classes[className]->invokeMethod<float>(this->object, "getHeight", "()F")); }
float LineMetrics::getAscent() { return float(*classes[className]->invokeMethod<float>(this->object, "getAscent", "()F")); }
float LineMetrics::getDescent() { return float(*classes[className]->invokeMethod<float>(this->object, "getDescent", "()F")); }
float LineMetrics::getLeading() { return float(*classes[className]->invokeMethod<float>(this->object, "getLeading", "()F")); }
int LineMetrics::getNumChars() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumChars", "()I")); }
int LineMetrics::getBaselineIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getBaselineIndex", "()I")); }
float LineMetrics::getStrikethroughOffset() { return float(*classes[className]->invokeMethod<float>(this->object, "getStrikethroughOffset", "()F")); }
float LineMetrics::getStrikethroughThickness() { return float(*classes[className]->invokeMethod<float>(this->object, "getStrikethroughThickness", "()F")); }
float LineMetrics::getUnderlineOffset() { return float(*classes[className]->invokeMethod<float>(this->object, "getUnderlineOffset", "()F")); }
float LineMetrics::getUnderlineThickness() { return float(*classes[className]->invokeMethod<float>(this->object, "getUnderlineThickness", "()F")); }


Shape GlyphVector::getGlyphLogicalBounds(int arg0) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphLogicalBounds", "(I)Ljava/awt/Shape;", arg0)); }
Rectangle GlyphVector::getGlyphPixelBounds(int arg0, FontRenderContext arg1, float arg2, float arg3) { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphPixelBounds", "(ILjava/awt/font/FontRenderContext;FF)Ljava/awt/Rectangle;", arg0, arg1, arg2, arg3)); }
GlyphMetrics GlyphVector::getGlyphMetrics(int arg0) { return GlyphMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphMetrics", "(I)Ljava/awt/font/GlyphMetrics;", arg0)); }
GlyphJustificationInfo GlyphVector::getGlyphJustificationInfo(int arg0) { return GlyphJustificationInfo(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphJustificationInfo", "(I)Ljava/awt/font/GlyphJustificationInfo;", arg0)); }
FontRenderContext GlyphVector::getFontRenderContext() { return FontRenderContext(*classes[className]->invokeMethod<jobject>(this->object, "getFontRenderContext", "()Ljava/awt/font/FontRenderContext;")); }
Font GlyphVector::getFont() { return Font(*classes[className]->invokeMethod<jobject>(this->object, "getFont", "()Ljava/awt/Font;")); }
int GlyphVector::getGlyphCharIndex(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getGlyphCharIndex", "(I)I", arg0)); }
Rectangle2D GlyphVector::getVisualBounds() { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getVisualBounds", "()Ljava/awt/geom/Rectangle2D;")); }
Shape GlyphVector::getGlyphOutline(int arg0) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphOutline", "(I)Ljava/awt/Shape;", arg0)); }
Shape GlyphVector::getGlyphOutline(int arg0, float arg1, float arg2) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphOutline", "(IFF)Ljava/awt/Shape;", arg0, arg1, arg2)); }
Shape GlyphVector::getGlyphVisualBounds(int arg0) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphVisualBounds", "(I)Ljava/awt/Shape;", arg0)); }
void GlyphVector::performDefaultLayout() { (classes[className]->invokeMethod<void>(this->object, "performDefaultLayout", "()V")); }
int GlyphVector::getNumGlyphs() { return int(*classes[className]->invokeMethod<int>(this->object, "getNumGlyphs", "()I")); }
int GlyphVector::getGlyphCode(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getGlyphCode", "(I)I", arg0)); }
Rectangle2D GlyphVector::getLogicalBounds() { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getLogicalBounds", "()Ljava/awt/geom/Rectangle2D;")); }
Rectangle GlyphVector::getPixelBounds(FontRenderContext arg0, float arg1, float arg2) { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getPixelBounds", "(Ljava/awt/font/FontRenderContext;FF)Ljava/awt/Rectangle;", arg0, arg1, arg2)); }
Shape GlyphVector::getOutline(float arg0, float arg1) { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getOutline", "(FF)Ljava/awt/Shape;", arg0, arg1)); }
Shape GlyphVector::getOutline() { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getOutline", "()Ljava/awt/Shape;")); }
Point2D GlyphVector::getGlyphPosition(int arg0) { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphPosition", "(I)Ljava/awt/geom/Point2D;", arg0)); }
void GlyphVector::setGlyphPosition(int arg0, Point2D arg1) { (classes[className]->invokeMethod<void>(this->object, "setGlyphPosition", "(ILjava/awt/geom/Point2D;)V", arg0, arg1)); }
AffineTransform GlyphVector::getGlyphTransform(int arg0) { return AffineTransform(*classes[className]->invokeMethod<jobject>(this->object, "getGlyphTransform", "(I)Ljava/awt/geom/AffineTransform;", arg0)); }
void GlyphVector::setGlyphTransform(int arg0, AffineTransform arg1) { (classes[className]->invokeMethod<void>(this->object, "setGlyphTransform", "(ILjava/awt/geom/AffineTransform;)V", arg0, arg1)); }
int GlyphVector::getLayoutFlags() { return int(*classes[className]->invokeMethod<int>(this->object, "getLayoutFlags", "()I")); }
bool GlyphVector::equals(GlyphVector arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/awt/font/GlyphVector;)Z", arg0)); }

float GlyphMetrics::getAdvanceX() { return float(*classes[className]->invokeMethod<float>(this->object, "getAdvanceX", "()F")); }
float GlyphMetrics::getAdvanceY() { return float(*classes[className]->invokeMethod<float>(this->object, "getAdvanceY", "()F")); }
float GlyphMetrics::getLSB() { return float(*classes[className]->invokeMethod<float>(this->object, "getLSB", "()F")); }
float GlyphMetrics::getRSB() { return float(*classes[className]->invokeMethod<float>(this->object, "getRSB", "()F")); }
bool GlyphMetrics::isLigature() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLigature", "()Z")); }
bool GlyphMetrics::isCombining() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCombining", "()Z")); }
bool GlyphMetrics::isComponent() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isComponent", "()Z")); }
float GlyphMetrics::getAdvance() { return float(*classes[className]->invokeMethod<float>(this->object, "getAdvance", "()F")); }
bool GlyphMetrics::isStandard() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStandard", "()Z")); }
Rectangle2D GlyphMetrics::getBounds2D() { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava/awt/geom/Rectangle2D;")); }
bool GlyphMetrics::isWhitespace() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWhitespace", "()Z")); }
int GlyphMetrics::getType() { return int(*classes[className]->invokeMethod<int>(this->object, "getType", "()I")); }

int FontMetrics::charWidth(char arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "charWidth", "(C)I", arg0)); }
int FontMetrics::charWidth(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "charWidth", "(I)I", arg0)); }
int FontMetrics::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
Rectangle2D FontMetrics::getStringBounds(arr_C arg0, int arg1, int arg2, Graphics arg3) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "([CIILjava/awt/Graphics;)Ljava/awt/geom/Rectangle2D;", arg0, arg1, arg2, arg3)); }
Rectangle2D FontMetrics::getStringBounds(String arg0, int arg1, int arg2, Graphics arg3) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava/lang/String;IILjava/awt/Graphics;)Ljava/awt/geom/Rectangle2D;", arg0, arg1, arg2, arg3)); }
Rectangle2D FontMetrics::getStringBounds(String arg0, Graphics arg1) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava/lang/String;Ljava/awt/Graphics;)Ljava/awt/geom/Rectangle2D;", arg0, arg1)); }
Rectangle2D FontMetrics::getStringBounds(CharacterIterator arg0, int arg1, int arg2, Graphics arg3) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava/text/CharacterIterator;IILjava/awt/Graphics;)Ljava/awt/geom/Rectangle2D;", arg0, arg1, arg2, arg3)); }
int FontMetrics::getAscent() { return int(*classes[className]->invokeMethod<int>(this->object, "getAscent", "()I")); }
int FontMetrics::getDescent() { return int(*classes[className]->invokeMethod<int>(this->object, "getDescent", "()I")); }
int FontMetrics::getLeading() { return int(*classes[className]->invokeMethod<int>(this->object, "getLeading", "()I")); }
bool FontMetrics::hasUniformLineMetrics() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasUniformLineMetrics", "()Z")); }
LineMetrics FontMetrics::getLineMetrics(CharacterIterator arg0, int arg1, int arg2, Graphics arg3) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava/text/CharacterIterator;IILjava/awt/Graphics;)Ljava/awt/font/LineMetrics;", arg0, arg1, arg2, arg3)); }
LineMetrics FontMetrics::getLineMetrics(String arg0, Graphics arg1) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava/lang/String;Ljava/awt/Graphics;)Ljava/awt/font/LineMetrics;", arg0, arg1)); }
LineMetrics FontMetrics::getLineMetrics(arr_C arg0, int arg1, int arg2, Graphics arg3) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "([CIILjava/awt/Graphics;)Ljava/awt/font/LineMetrics;", arg0, arg1, arg2, arg3)); }
LineMetrics FontMetrics::getLineMetrics(String arg0, int arg1, int arg2, Graphics arg3) { return LineMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava/lang/String;IILjava/awt/Graphics;)Ljava/awt/font/LineMetrics;", arg0, arg1, arg2, arg3)); }
Rectangle2D FontMetrics::getMaxCharBounds(Graphics arg0) { return Rectangle2D(*classes[className]->invokeMethod<jobject>(this->object, "getMaxCharBounds", "(Ljava/awt/Graphics;)Ljava/awt/geom/Rectangle2D;", arg0)); }
int FontMetrics::getMaxDescent() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxDescent", "()I")); }
int FontMetrics::charsWidth(arr_C arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "charsWidth", "([CII)I", arg0, arg1, arg2)); }
int FontMetrics::stringWidth(String arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "stringWidth", "(Ljava/lang/String;)I", arg0)); }
FontRenderContext FontMetrics::myFRC(Graphics arg0) { return FontRenderContext(*classes[className]->invokeMethod<jobject>(this->object, "myFRC", "(Ljava/awt/Graphics;)Ljava/awt/font/FontRenderContext;", arg0)); }
int FontMetrics::getMaxAscent() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxAscent", "()I")); }
int FontMetrics::getMaxDecent() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxDecent", "()I")); }
int FontMetrics::getMaxAdvance() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxAdvance", "()I")); }
int FontMetrics::bytesWidth(arr_B arg0, int arg1, int arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "bytesWidth", "([BII)I", arg0, arg1, arg2)); }
void FontMetrics::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
FontRenderContext FontMetrics::getFontRenderContext() { return FontRenderContext(*classes[className]->invokeMethod<jobject>(this->object, "getFontRenderContext", "()Ljava/awt/font/FontRenderContext;")); }
Font FontMetrics::getFont() { return Font(*classes[className]->invokeMethod<jobject>(this->object, "getFont", "()Ljava/awt/Font;")); }
String FontMetrics::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

void Polygon::addPoint(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addPoint", "(II)V", arg0, arg1)); }
void Polygon::invalidate() { (classes[className]->invokeMethod<void>(this->object, "invalidate", "()V")); }
void Polygon::translate(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }
Rectangle Polygon::getBoundingBox() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getBoundingBox", "()Ljava/awt/Rectangle;")); }
void Polygon::updateBounds(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "updateBounds", "(II)V", arg0, arg1)); }
void Polygon::calculateBounds(arr_I arg0, arr_I arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "calculateBounds", "([I[II)V", arg0, arg1, arg2)); }
Crossings Polygon::getCrossings(double arg0, double arg1, double arg2, double arg3) { return Crossings(*classes[className]->invokeMethod<jobject>(this->object, "getCrossings", "(DDDD)Lsun/awt/geom/Crossings;", arg0, arg1, arg2, arg3)); }
bool Polygon::inside(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "inside", "(II)Z", arg0, arg1)); }
void Polygon::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }

bool Crossings::accumulateQuad(double arg0, double arg1, arr_D arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "accumulateQuad", "(DD[D)Z", arg0, arg1, arg2)); }
bool Crossings::accumulateCubic(double arg0, double arg1, arr_D arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "accumulateCubic", "(DD[D)Z", arg0, arg1, arg2)); }
double Crossings::getXLo() { return double(*classes[className]->invokeMethod<double>(this->object, "getXLo", "()D")); }
double Crossings::getYLo() { return double(*classes[className]->invokeMethod<double>(this->object, "getYLo", "()D")); }
double Crossings::getXHi() { return double(*classes[className]->invokeMethod<double>(this->object, "getXHi", "()D")); }
double Crossings::getYHi() { return double(*classes[className]->invokeMethod<double>(this->object, "getYHi", "()D")); }
Crossings Crossings::findCrossings(Vector arg0, double arg1, double arg2, double arg3, double arg4) { return Crossings(*classes[className]->invokeStaticMethod<jobject>("findCrossings", "(Ljava/util/Vector;DDDD)Lsun/awt/geom/Crossings;", arg0, arg1, arg2, arg3, arg4)); }
Crossings Crossings::findCrossings(PathIterator arg0, double arg1, double arg2, double arg3, double arg4) { return Crossings(*classes[className]->invokeStaticMethod<jobject>("findCrossings", "(Ljava/awt/geom/PathIterator;DDDD)Lsun/awt/geom/Crossings;", arg0, arg1, arg2, arg3, arg4)); }
bool Crossings::accumulateLine(double arg0, double arg1, double arg2, double arg3, int arg4) { return bool(*classes[className]->invokeMethod<bool>(this->object, "accumulateLine", "(DDDDI)Z", arg0, arg1, arg2, arg3, arg4)); }
bool Crossings::accumulateLine(double arg0, double arg1, double arg2, double arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "accumulateLine", "(DDDD)Z", arg0, arg1, arg2, arg3)); }
bool Crossings::covers(double arg0, double arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "covers", "(DD)Z", arg0, arg1)); }
bool Crossings::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
void Crossings::record(double arg0, double arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "record", "(DDI)V", arg0, arg1, arg2)); }
void Crossings::print() { (classes[className]->invokeMethod<void>(this->object, "print", "()V")); }

void Vector::setSize(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(I)V", arg0)); }
void Vector::copyInto(Object_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "copyInto", "([Ljava/lang/Object;)V", arg0)); }
void Vector::removeElementAt(int arg0) { (classes[className]->invokeMethod<void>(this->object, "removeElementAt", "(I)V", arg0)); }
bool Vector::removeElement(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "removeElement", "(Ljava/lang/Object;)Z", arg0)); }
void Vector::insertElementAt(Object arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "insertElementAt", "(Ljava/lang/Object;I)V", arg0, arg1)); }
void Vector::removeAllElements() { (classes[className]->invokeMethod<void>(this->object, "removeAllElements", "()V")); }
Object Vector::firstElement() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "firstElement", "()Ljava/lang/Object;")); }
Object Vector::lastElement() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "lastElement", "()Ljava/lang/Object;")); }
void Vector::setElementAt(Object arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setElementAt", "(Ljava/lang/Object;I)V", arg0, arg1)); }
void Vector::addElement(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "addElement", "(Ljava/lang/Object;)V", arg0)); }
bool Vector::bulkRemove(Predicate arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "bulkRemove", "(Ljava/util/function/Predicate;)Z", arg0)); }
String Vector::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Object Vector::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
Enumeration Vector::elements() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "elements", "()Ljava/util/Enumeration;")); }
void Vector::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Vector::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
int Vector::capacity() { return int(*classes[className]->invokeMethod<int>(this->object, "capacity", "()I")); }
void Vector::ensureCapacity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }
void Vector::trimToSize() { (classes[className]->invokeMethod<void>(this->object, "trimToSize", "()V")); }
Object Vector::elementData(int arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "elementData", "(I)Ljava/lang/Object;", arg0)); }
void Vector::shiftTailOverGap(Object_interface arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "shiftTailOverGap", "([Ljava/lang/Object;II)V", arg0, arg1, arg2)); }
Object Vector::elementAt(Object_interface arg0, int arg1) { return Object(*classes[className]->invokeStaticMethod<jobject>("elementAt", "([Ljava/lang/Object;I)Ljava/lang/Object;", arg0, arg1)); }
Object Vector::elementAt(int arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "elementAt", "(I)Ljava/lang/Object;", arg0)); }
void Vector::setBit(arr_J arg0, int arg1) { (classes[className]->invokeStaticMethod<void>("setBit", "([JI)V", arg0, arg1)); }
bool Vector::isClear(arr_J arg0, int arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isClear", "([JI)Z", arg0, arg1)); }
void Vector::removeRange(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "removeRange", "(II)V", arg0, arg1)); }
void Vector::checkInvariants() { (classes[className]->invokeMethod<void>(this->object, "checkInvariants", "()V")); }

void AbstractList::rangeCheckForAdd(int arg0) { (classes[className]->invokeMethod<void>(this->object, "rangeCheckForAdd", "(I)V", arg0)); }
String AbstractList::outOfBoundsMsg(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "outOfBoundsMsg", "(I)Ljava/lang/String;", arg0)); }
void AbstractList::subListRangeCheck(int arg0, int arg1, int arg2) { (classes[className]->invokeStaticMethod<void>("subListRangeCheck", "(III)V", arg0, arg1, arg2)); }
void AbstractList::removeRange(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "removeRange", "(II)V", arg0, arg1)); }

DisplayMode GraphicsDevice::getDisplayMode() { return DisplayMode(*classes[className]->invokeMethod<jobject>(this->object, "getDisplayMode", "()Ljava/awt/DisplayMode;")); }
void GraphicsDevice::setDisplayMode(DisplayMode arg0) { (classes[className]->invokeMethod<void>(this->object, "setDisplayMode", "(Ljava/awt/DisplayMode;)V", arg0)); }
GraphicsConfiguration GraphicsDevice::getBestConfiguration(GraphicsConfigTemplate arg0) { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "getBestConfiguration", "(Ljava/awt/GraphicsConfigTemplate;)Ljava/awt/GraphicsConfiguration;", arg0)); }
Window GraphicsDevice::getFullScreenWindow() { return Window(*classes[className]->invokeMethod<jobject>(this->object, "getFullScreenWindow", "()Ljava/awt/Window;")); }
void GraphicsDevice::setFullScreenWindow(Window arg0) { (classes[className]->invokeMethod<void>(this->object, "setFullScreenWindow", "(Ljava/awt/Window;)V", arg0)); }
GraphicsConfiguration GraphicsDevice::getDefaultConfiguration() { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultConfiguration", "()Ljava/awt/GraphicsConfiguration;")); }
bool GraphicsDevice::isWindowShapingSupported() { return bool(*classes[className]->invokeStaticMethod<bool>("isWindowShapingSupported", "()Z")); }
bool GraphicsDevice::isWindowOpacitySupported() { return bool(*classes[className]->invokeStaticMethod<bool>("isWindowOpacitySupported", "()Z")); }
bool GraphicsDevice::isWindowPerpixelTranslucencySupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWindowPerpixelTranslucencySupported", "()Z")); }
bool GraphicsDevice::isWindowTranslucencySupported(GraphicsDevice_WindowTranslucency arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isWindowTranslucencySupported", "(Ljava/awt/GraphicsDevice$WindowTranslucency;)Z", arg0)); }
GraphicsConfiguration GraphicsDevice::getTranslucencyCapableGC() { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "getTranslucencyCapableGC", "()Ljava/awt/GraphicsConfiguration;")); }
String GraphicsDevice::getIDstring() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getIDstring", "()Ljava/lang/String;")); }
bool GraphicsDevice::isFullScreenSupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFullScreenSupported", "()Z")); }
bool GraphicsDevice::isDisplayChangeSupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDisplayChangeSupported", "()Z")); }
int GraphicsDevice::getAvailableAcceleratedMemory() { return int(*classes[className]->invokeMethod<int>(this->object, "getAvailableAcceleratedMemory", "()I")); }
int GraphicsDevice::getType() { return int(*classes[className]->invokeMethod<int>(this->object, "getType", "()I")); }

int DisplayMode::getWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "()I")); }
int DisplayMode::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
int DisplayMode::getBitDepth() { return int(*classes[className]->invokeMethod<int>(this->object, "getBitDepth", "()I")); }
int DisplayMode::getRefreshRate() { return int(*classes[className]->invokeMethod<int>(this->object, "getRefreshRate", "()I")); }
bool DisplayMode::equals(DisplayMode arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/awt/DisplayMode;)Z", arg0)); }
bool DisplayMode::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String DisplayMode::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int DisplayMode::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

bool GraphicsConfigTemplate::isGraphicsConfigSupported(GraphicsConfiguration arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isGraphicsConfigSupported", "(Ljava/awt/GraphicsConfiguration;)Z", arg0)); }
GraphicsConfiguration GraphicsConfigTemplate::getBestConfiguration(GraphicsConfiguration_interface arg0) { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "getBestConfiguration", "([Ljava/awt/GraphicsConfiguration;)Ljava/awt/GraphicsConfiguration;", arg0)); }


void Window::setSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(Ljava/awt/Dimension;)V", arg0)); }
void Window::setSize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }
void Window::addToWindowList() { (classes[className]->invokeMethod<void>(this->object, "addToWindowList", "()V")); }
void Window::setWarningString() { (classes[className]->invokeMethod<void>(this->object, "setWarningString", "()V")); }
GraphicsConfiguration Window::initGC(GraphicsConfiguration arg0) { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "initGC", "(Ljava/awt/GraphicsConfiguration;)Ljava/awt/GraphicsConfiguration;", arg0)); }
Toolkit Window::getToolkit() { return Toolkit(*classes[className]->invokeMethod<jobject>(this->object, "getToolkit", "()Ljava/awt/Toolkit;")); }
void Window::setLocationByPlatform(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocationByPlatform", "(Z)V", arg0)); }
void Window::ownedInit(Window arg0) { (classes[className]->invokeMethod<void>(this->object, "ownedInit", "(Ljava/awt/Window;)V", arg0)); }
void Window::addOwnedWindow(WeakReference arg0) { (classes[className]->invokeMethod<void>(this->object, "addOwnedWindow", "(Ljava/lang/ref/WeakReference;)V", arg0)); }
bool Window::isAlwaysOnTop() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAlwaysOnTop", "()Z")); }
void Window::setAlwaysOnTop(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAlwaysOnTop", "(Z)V", arg0)); }
void Window::setIconImages(List arg0) { (classes[className]->invokeMethod<void>(this->object, "setIconImages", "(Ljava/util/List;)V", arg0)); }
void Window::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
void Window::removeNotify() { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "()V")); }
void Window::setClientSize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setClientSize", "(II)V", arg0, arg1)); }
void Window::setMinimumSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setMinimumSize", "(Ljava/awt/Dimension;)V", arg0)); }
void Window::closeSplashScreen() { (classes[className]->invokeMethod<void>(this->object, "closeSplashScreen", "()V")); }
void Window::show() { (classes[className]->invokeMethod<void>(this->object, "show", "()V")); }
bool Window::isModalBlocked() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isModalBlocked", "()Z")); }
void Window::updateChildrenBlocking() { (classes[className]->invokeMethod<void>(this->object, "updateChildrenBlocking", "()V")); }
void Window::toFront_NoClientCode() { (classes[className]->invokeMethod<void>(this->object, "toFront_NoClientCode", "()V")); }
void Window::updateChildFocusableWindowState(Window arg0) { (classes[className]->invokeStaticMethod<void>("updateChildFocusableWindowState", "(Ljava/awt/Window;)V", arg0)); }
void Window::postWindowEvent(int arg0) { (classes[className]->invokeMethod<void>(this->object, "postWindowEvent", "(I)V", arg0)); }
bool Window::isShowing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isShowing", "()Z")); }
void Window::hide() { (classes[className]->invokeMethod<void>(this->object, "hide", "()V")); }
void Window::doDispose() { (classes[className]->invokeMethod<void>(this->object, "doDispose", "()V")); }
void Window::toBack_NoClientCode() { (classes[className]->invokeMethod<void>(this->object, "toBack_NoClientCode", "()V")); }
void Window::toBack() { (classes[className]->invokeMethod<void>(this->object, "toBack", "()V")); }
void Window::setCursor(Cursor arg0) { (classes[className]->invokeMethod<void>(this->object, "setCursor", "(Ljava/awt/Cursor;)V", arg0)); }
Window Window::getOwner_NoClientCode() { return Window(*classes[className]->invokeMethod<jobject>(this->object, "getOwner_NoClientCode", "()Ljava/awt/Window;")); }
void Window::setModalBlocked(Dialog arg0, bool arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "setModalBlocked", "(Ljava/awt/Dialog;ZZ)V", arg0, arg1, arg2)); }
bool Window::isModalExcluded(Dialog_ModalExclusionType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isModalExcluded", "(Ljava/awt/Dialog$ModalExclusionType;)Z", arg0)); }
Dialog Window::getModalBlocker() { return Dialog(*classes[className]->invokeMethod<jobject>(this->object, "getModalBlocker", "()Ljava/awt/Dialog;")); }
bool Window::eventEnabled(AWTEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "eventEnabled", "(Ljava/awt/AWTEvent;)Z", arg0)); }
void Window::processWindowEvent(WindowEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processWindowEvent", "(Ljava/awt/event/WindowEvent;)V", arg0)); }
void Window::processWindowFocusEvent(WindowEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processWindowFocusEvent", "(Ljava/awt/event/WindowEvent;)V", arg0)); }
void Window::processWindowStateEvent(WindowEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processWindowStateEvent", "(Ljava/awt/event/WindowEvent;)V", arg0)); }
void Window::processEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
bool Window::isAlwaysOnTopSupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAlwaysOnTopSupported", "()Z")); }
void Window::setOwnedWindowsAlwaysOnTop(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setOwnedWindowsAlwaysOnTop", "(Z)V", arg0)); }
bool Window::isFocused() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocused", "()Z")); }
Component Window::getFocusOwner() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getFocusOwner", "()Ljava/awt/Component;")); }
Component Window::getMostRecentFocusOwner() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getMostRecentFocusOwner", "()Ljava/awt/Component;")); }
bool Window::isFocusableWindow() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocusableWindow", "()Z")); }
bool Window::getFocusableWindowState() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getFocusableWindowState", "()Z")); }
void Window::addPropertyChangeListener(PropertyChangeListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", arg0)); }
void Window::addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
void Window::dispatchEventImpl(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava/awt/AWTEvent;)V", arg0)); }
void Window::applyResourceBundle(ResourceBundle arg0) { (classes[className]->invokeMethod<void>(this->object, "applyResourceBundle", "(Ljava/util/ResourceBundle;)V", arg0)); }
void Window::applyResourceBundle(String arg0) { (classes[className]->invokeMethod<void>(this->object, "applyResourceBundle", "(Ljava/lang/String;)V", arg0)); }
void Window::removeFromWindowList() { (classes[className]->invokeMethod<void>(this->object, "removeFromWindowList", "()V")); }
void Window::removeFromWindowList(AppContext arg0, WeakReference arg1) { (classes[className]->invokeStaticMethod<void>("removeFromWindowList", "(Lsun/awt/AppContext;Ljava/lang/ref/WeakReference;)V", arg0, arg1)); }
void Window::addWindowListener(WindowListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addWindowListener", "(Ljava/awt/event/WindowListener;)V", arg0)); }
void Window::addWindowFocusListener(WindowFocusListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addWindowFocusListener", "(Ljava/awt/event/WindowFocusListener;)V", arg0)); }
void Window::addWindowStateListener(WindowStateListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addWindowStateListener", "(Ljava/awt/event/WindowStateListener;)V", arg0)); }
void Window::connectOwnedWindow(Window arg0) { (classes[className]->invokeMethod<void>(this->object, "connectOwnedWindow", "(Ljava/awt/Window;)V", arg0)); }
void Window::initDeserializedWindow() { (classes[className]->invokeMethod<void>(this->object, "initDeserializedWindow", "()V")); }
void Window::setModalExclusionType(Dialog_ModalExclusionType arg0) { (classes[className]->invokeMethod<void>(this->object, "setModalExclusionType", "(Ljava/awt/Dialog$ModalExclusionType;)V", arg0)); }
void Window::deserializeResources(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "deserializeResources", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Window::createBufferStrategy(int arg0) { (classes[className]->invokeMethod<void>(this->object, "createBufferStrategy", "(I)V", arg0)); }
void Window::createBufferStrategy(int arg0, BufferCapabilities arg1) { (classes[className]->invokeMethod<void>(this->object, "createBufferStrategy", "(ILjava/awt/BufferCapabilities;)V", arg0, arg1)); }
BufferStrategy Window::getBufferStrategy() { return BufferStrategy(*classes[className]->invokeMethod<jobject>(this->object, "getBufferStrategy", "()Ljava/awt/image/BufferStrategy;")); }
bool Window::canContainFocusOwner(Component arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canContainFocusOwner", "(Ljava/awt/Component;)Z", arg0)); }
void Window::setLayersOpaque(Component arg0, bool arg1) { (classes[className]->invokeStaticMethod<void>("setLayersOpaque", "(Ljava/awt/Component;Z)V", arg0, arg1)); }
void Window::updateWindow() { (classes[className]->invokeMethod<void>(this->object, "updateWindow", "()V")); }
void Window::paint(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "paint", "(Ljava/awt/Graphics;)V", arg0)); }
String Window::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
List Window::getIconImages() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getIconImages", "()Ljava/util/List;")); }
void Window::setIconImage(Image arg0) { (classes[className]->invokeMethod<void>(this->object, "setIconImage", "(Ljava/awt/Image;)V", arg0)); }
void Window::pack() { (classes[className]->invokeMethod<void>(this->object, "pack", "()V")); }
void Window::clearMostRecentFocusOwnerOnHide() { (classes[className]->invokeMethod<void>(this->object, "clearMostRecentFocusOwnerOnHide", "()V")); }
void Window::disposeImpl() { (classes[className]->invokeMethod<void>(this->object, "disposeImpl", "()V")); }
void Window::adjustListeningChildrenOnParent(long arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "adjustListeningChildrenOnParent", "(JI)V", arg0, arg1)); }
void Window::adjustDescendantsOnParent(int arg0) { (classes[className]->invokeMethod<void>(this->object, "adjustDescendantsOnParent", "(I)V", arg0)); }
String Window::getWarningString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getWarningString", "()Ljava/lang/String;")); }
InputContext Window::getInputContext() { return InputContext(*classes[className]->invokeMethod<jobject>(this->object, "getInputContext", "()Ljava/awt/im/InputContext;")); }
IdentityArrayList Window::getAllWindows() { return IdentityArrayList(*classes[className]->invokeStaticMethod<jobject>("getAllWindows", "()Lsun/awt/util/IdentityArrayList;")); }
IdentityArrayList Window::getAllUnblockedWindows() { return IdentityArrayList(*classes[className]->invokeStaticMethod<jobject>("getAllUnblockedWindows", "()Lsun/awt/util/IdentityArrayList;")); }
Window Window::getDocumentRoot() { return Window(*classes[className]->invokeMethod<jobject>(this->object, "getDocumentRoot", "()Ljava/awt/Window;")); }
Dialog_ModalExclusionType Window::getModalExclusionType() { return Dialog_ModalExclusionType(*classes[className]->invokeMethod<jobject>(this->object, "getModalExclusionType", "()Ljava/awt/Dialog$ModalExclusionType;")); }
void Window::removeWindowListener(WindowListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeWindowListener", "(Ljava/awt/event/WindowListener;)V", arg0)); }
void Window::removeWindowStateListener(WindowStateListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeWindowStateListener", "(Ljava/awt/event/WindowStateListener;)V", arg0)); }
void Window::removeWindowFocusListener(WindowFocusListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeWindowFocusListener", "(Ljava/awt/event/WindowFocusListener;)V", arg0)); }
void Window::preProcessKeyEvent(KeyEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "preProcessKeyEvent", "(Ljava/awt/event/KeyEvent;)V", arg0)); }
void Window::postProcessKeyEvent(KeyEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "postProcessKeyEvent", "(Ljava/awt/event/KeyEvent;)V", arg0)); }
Set Window::getFocusTraversalKeys(int arg0) { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getFocusTraversalKeys", "(I)Ljava/util/Set;", arg0)); }
void Window::setFocusCycleRoot(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setFocusCycleRoot", "(Z)V", arg0)); }
bool Window::isFocusCycleRoot() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocusCycleRoot", "()Z")); }
Container Window::getFocusCycleRootAncestor() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getFocusCycleRootAncestor", "()Ljava/awt/Container;")); }
void Window::setFocusableWindowState(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setFocusableWindowState", "(Z)V", arg0)); }
void Window::setAutoRequestFocus(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAutoRequestFocus", "(Z)V", arg0)); }
bool Window::isAutoRequestFocus() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAutoRequestFocus", "()Z")); }
bool Window::isValidateRoot() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isValidateRoot", "()Z")); }
bool Window::isDisposing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDisposing", "()Z")); }
void Window::removeOwnedWindow(WeakReference arg0) { (classes[className]->invokeMethod<void>(this->object, "removeOwnedWindow", "(Ljava/lang/ref/WeakReference;)V", arg0)); }
void Window::setType(Window_Type arg0) { (classes[className]->invokeMethod<void>(this->object, "setType", "(Ljava/awt/Window$Type;)V", arg0)); }
void Window::setLocationRelativeTo(Component arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocationRelativeTo", "(Ljava/awt/Component;)V", arg0)); }
void Window::deliverMouseWheelToAncestor(MouseWheelEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "deliverMouseWheelToAncestor", "(Ljava/awt/event/MouseWheelEvent;)V", arg0)); }
bool Window::dispatchMouseWheelToAncestor(MouseWheelEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "dispatchMouseWheelToAncestor", "(Ljava/awt/event/MouseWheelEvent;)Z", arg0)); }
Component Window::getTemporaryLostComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getTemporaryLostComponent", "()Ljava/awt/Component;")); }
Component Window::setTemporaryLostComponent(Component arg0) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "setTemporaryLostComponent", "(Ljava/awt/Component;)Ljava/awt/Component;", arg0)); }
bool Window::isLocationByPlatform() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLocationByPlatform", "()Z")); }
bool Window::isRecursivelyVisible() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRecursivelyVisible", "()Z")); }
Container Window::getContainer() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getContainer", "()Ljava/awt/Container;")); }
void Window::applyCompoundShape(Region arg0) { (classes[className]->invokeMethod<void>(this->object, "applyCompoundShape", "(Lsun/java2d/pipe/Region;)V", arg0)); }
void Window::applyCurrentShape() { (classes[className]->invokeMethod<void>(this->object, "applyCurrentShape", "()V")); }
void Window::mixOnReshaping() { (classes[className]->invokeMethod<void>(this->object, "mixOnReshaping", "()V")); }
Point Window::getLocationOnWindow() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocationOnWindow", "()Ljava/awt/Point;")); }
Point2D Window::calculateSecurityWarningPosition(double arg0, double arg1, double arg2, double arg3) { return Point2D(*classes[className]->invokeMethod<jobject>(this->object, "calculateSecurityWarningPosition", "(DDDD)Ljava/awt/geom/Point2D;", arg0, arg1, arg2, arg3)); }
void Window::updateZOrder() { (classes[className]->invokeMethod<void>(this->object, "updateZOrder", "()V")); }
void Window::setShape(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "setShape", "(Ljava/awt/Shape;)V", arg0)); }
float Window::getOpacity() { return float(*classes[className]->invokeMethod<float>(this->object, "getOpacity", "()F")); }
void Window::setOpacity(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setOpacity", "(F)V", arg0)); }
void Window::setGraphicsConfiguration(GraphicsConfiguration arg0) { (classes[className]->invokeMethod<void>(this->object, "setGraphicsConfiguration", "(Ljava/awt/GraphicsConfiguration;)V", arg0)); }
void Window::setVisible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }
void Window::toFront() { (classes[className]->invokeMethod<void>(this->object, "toFront", "()V")); }
Shape Window::getShape() { return Shape(*classes[className]->invokeMethod<jobject>(this->object, "getShape", "()Ljava/awt/Shape;")); }
Locale Window::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
void Window::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
void Window::dispose() { (classes[className]->invokeMethod<void>(this->object, "dispose", "()V")); }
Window Window::getOwner() { return Window(*classes[className]->invokeMethod<jobject>(this->object, "getOwner", "()Ljava/awt/Window;")); }
void Window::setBounds(Rectangle arg0) { (classes[className]->invokeMethod<void>(this->object, "setBounds", "(Ljava/awt/Rectangle;)V", arg0)); }
void Window::setBounds(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "setBounds", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Window::reshape(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "reshape", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Window::setLocation(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }
void Window::setLocation(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(Ljava/awt/Point;)V", arg0)); }
void Window::setBackground(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setBackground", "(Ljava/awt/Color;)V", arg0)); }
Color Window::getBackground() { return Color(*classes[className]->invokeMethod<jobject>(this->object, "getBackground", "()Ljava/awt/Color;")); }
double Window::limit(double arg0, double arg1, double arg2) { return double(*classes[className]->invokeStaticMethod<double>("limit", "(DDD)D", arg0, arg1, arg2)); }
void Window::init(GraphicsConfiguration arg0) { (classes[className]->invokeMethod<void>(this->object, "init", "(Ljava/awt/GraphicsConfiguration;)V", arg0)); }
void Window::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Window::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
Window_Type Window::getType() { return Window_Type(*classes[className]->invokeMethod<jobject>(this->object, "getType", "()Ljava/awt/Window$Type;")); }
bool Window::isOpaque() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpaque", "()Z")); }
bool Window::isActive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isActive", "()Z")); }

Toolkit Toolkit::getDefaultToolkit() { return Toolkit(*classes[className]->invokeStaticMethod<jobject>("getDefaultToolkit", "()Ljava/awt/Toolkit;")); }
Clipboard Toolkit::getSystemClipboard() { return Clipboard(*classes[className]->invokeMethod<jobject>(this->object, "getSystemClipboard", "()Ljava/awt/datatransfer/Clipboard;")); }
Insets Toolkit::getScreenInsets(GraphicsConfiguration arg0) { return Insets(*classes[className]->invokeMethod<jobject>(this->object, "getScreenInsets", "(Ljava/awt/GraphicsConfiguration;)Ljava/awt/Insets;", arg0)); }
bool Toolkit::enabledOnToolkit(long arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("enabledOnToolkit", "(J)Z", arg0)); }
EventQueue Toolkit::getEventQueue() { return EventQueue(*classes[className]->invokeStaticMethod<jobject>("getEventQueue", "()Ljava/awt/EventQueue;")); }
bool Toolkit::isModalExclusionTypeSupported(Dialog_ModalExclusionType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isModalExclusionTypeSupported", "(Ljava/awt/Dialog$ModalExclusionType;)Z", arg0)); }
bool Toolkit::isAlwaysOnTopSupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAlwaysOnTopSupported", "()Z")); }
void Toolkit::addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
Container Toolkit::getNativeContainer(Component arg0) { return Container(*classes[className]->invokeStaticMethod<jobject>("getNativeContainer", "(Ljava/awt/Component;)Ljava/awt/Container;", arg0)); }
bool Toolkit::prepareImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "prepareImage", "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3)); }
int Toolkit::checkImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "checkImage", "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)I", arg0, arg1, arg2, arg3)); }
void Toolkit::notifyAWTEventListeners(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "notifyAWTEventListeners", "(Ljava/awt/AWTEvent;)V", arg0)); }
void Toolkit::removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
PropertyChangeSupport Toolkit::createPropertyChangeSupport(Toolkit arg0) { return PropertyChangeSupport(*classes[className]->invokeStaticMethod<jobject>("createPropertyChangeSupport", "(Ljava/awt/Toolkit;)Ljava/beans/PropertyChangeSupport;", arg0)); }
void Toolkit::setDynamicLayout(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setDynamicLayout", "(Z)V", arg0)); }
bool Toolkit::isDynamicLayoutSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDynamicLayoutSet", "()Z")); }
bool Toolkit::isDynamicLayoutActive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDynamicLayoutActive", "()Z")); }
void Toolkit::newAWTError(Throwable arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("newAWTError", "(Ljava/lang/Throwable;Ljava/lang/String;)V", arg0, arg1)); }
void Toolkit::loadAssistiveTechnologies() { (classes[className]->invokeStaticMethod<void>("loadAssistiveTechnologies", "()V")); }
PrintJob Toolkit::getPrintJob(Frame arg0, String arg1, JobAttributes arg2, PageAttributes arg3) { return PrintJob(*classes[className]->invokeMethod<jobject>(this->object, "getPrintJob", "(Ljava/awt/Frame;Ljava/lang/String;Ljava/awt/JobAttributes;Ljava/awt/PageAttributes;)Ljava/awt/PrintJob;", arg0, arg1, arg2, arg3)); }
PrintJob Toolkit::getPrintJob(Frame arg0, String arg1, Properties arg2) { return PrintJob(*classes[className]->invokeMethod<jobject>(this->object, "getPrintJob", "(Ljava/awt/Frame;Ljava/lang/String;Ljava/util/Properties;)Ljava/awt/PrintJob;", arg0, arg1, arg2)); }
Clipboard Toolkit::getSystemSelection() { return Clipboard(*classes[className]->invokeMethod<jobject>(this->object, "getSystemSelection", "()Ljava/awt/datatransfer/Clipboard;")); }
Cursor Toolkit::createCustomCursor(Image arg0, Point arg1, String arg2) { return Cursor(*classes[className]->invokeMethod<jobject>(this->object, "createCustomCursor", "(Ljava/awt/Image;Ljava/awt/Point;Ljava/lang/String;)Ljava/awt/Cursor;", arg0, arg1, arg2)); }
Dimension Toolkit::getBestCursorSize(int arg0, int arg1) { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getBestCursorSize", "(II)Ljava/awt/Dimension;", arg0, arg1)); }
int Toolkit::getMaximumCursorColors() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaximumCursorColors", "()I")); }
bool Toolkit::isFrameStateSupported(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFrameStateSupported", "(I)Z", arg0)); }
void Toolkit::initAssistiveTechnologies() { (classes[className]->invokeStaticMethod<void>("initAssistiveTechnologies", "()V")); }
EventQueue Toolkit::getSystemEventQueueImpl() { return EventQueue(*classes[className]->invokeMethod<jobject>(this->object, "getSystemEventQueueImpl", "()Ljava/awt/EventQueue;")); }
Object Toolkit::getDesktopProperty(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getDesktopProperty", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }
void Toolkit::initializeDesktopProperties() { (classes[className]->invokeMethod<void>(this->object, "initializeDesktopProperties", "()V")); }
Object Toolkit::lazilyLoadDesktopProperty(String arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "lazilyLoadDesktopProperty", "(Ljava/lang/String;)Ljava/lang/Object;", arg0)); }
void Toolkit::setDesktopProperty(String arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "setDesktopProperty", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1)); }
AWTEventListener Toolkit::deProxyAWTEventListener(AWTEventListener arg0) { return AWTEventListener(*classes[className]->invokeStaticMethod<jobject>("deProxyAWTEventListener", "(Ljava/awt/event/AWTEventListener;)Ljava/awt/event/AWTEventListener;", arg0)); }
Map Toolkit::mapInputMethodHighlight(InputMethodHighlight arg0) { return Map(*classes[className]->invokeMethod<jobject>(this->object, "mapInputMethodHighlight", "(Ljava/awt/im/InputMethodHighlight;)Ljava/util/Map;", arg0)); }
void Toolkit::initStatic() { (classes[className]->invokeStaticMethod<void>("initStatic", "()V")); }
void Toolkit::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
void Toolkit::sync() { (classes[className]->invokeMethod<void>(this->object, "sync", "()V")); }
ColorModel Toolkit::getColorModel() { return ColorModel(*classes[className]->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava/awt/image/ColorModel;")); }
void Toolkit::loadLibraries() { (classes[className]->invokeStaticMethod<void>("loadLibraries", "()V")); }
Image Toolkit::createImage(arr_B arg0) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "createImage", "([B)Ljava/awt/Image;", arg0)); }
Image Toolkit::createImage(ImageProducer arg0) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "createImage", "(Ljava/awt/image/ImageProducer;)Ljava/awt/Image;", arg0)); }
Image Toolkit::createImage(URL arg0) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "createImage", "(Ljava/net/URL;)Ljava/awt/Image;", arg0)); }
Image Toolkit::createImage(arr_B arg0, int arg1, int arg2) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "createImage", "([BII)Ljava/awt/Image;", arg0, arg1, arg2)); }
Image Toolkit::createImage(String arg0) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "createImage", "(Ljava/lang/String;)Ljava/awt/Image;", arg0)); }
FontMetrics Toolkit::getFontMetrics(Font arg0) { return FontMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", arg0)); }
bool Toolkit::areExtraMouseButtonsEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "areExtraMouseButtonsEnabled", "()Z")); }
void Toolkit::loadSystemColors(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "loadSystemColors", "([I)V", arg0)); }
Dimension Toolkit::getScreenSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getScreenSize", "()Ljava/awt/Dimension;")); }
int Toolkit::getScreenResolution() { return int(*classes[className]->invokeMethod<int>(this->object, "getScreenResolution", "()I")); }
void Toolkit::fallbackToLoadClassForAT(String arg0) { (classes[className]->invokeStaticMethod<void>("fallbackToLoadClassForAT", "(Ljava/lang/String;)V", arg0)); }
Image Toolkit::getImage(String arg0) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "getImage", "(Ljava/lang/String;)Ljava/awt/Image;", arg0)); }
Image Toolkit::getImage(URL arg0) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "getImage", "(Ljava/net/URL;)Ljava/awt/Image;", arg0)); }
void Toolkit::beep() { (classes[className]->invokeMethod<void>(this->object, "beep", "()V")); }
int Toolkit::getMenuShortcutKeyMask() { return int(*classes[className]->invokeMethod<int>(this->object, "getMenuShortcutKeyMask", "()I")); }
int Toolkit::getMenuShortcutKeyMaskEx() { return int(*classes[className]->invokeMethod<int>(this->object, "getMenuShortcutKeyMaskEx", "()I")); }
bool Toolkit::getLockingKeyState(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "getLockingKeyState", "(I)Z", arg0)); }
void Toolkit::setLockingKeyState(int arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "setLockingKeyState", "(IZ)V", arg0, arg1)); }
void Toolkit::setPlatformResources(ResourceBundle arg0) { (classes[className]->invokeStaticMethod<void>("setPlatformResources", "(Ljava/util/ResourceBundle;)V", arg0)); }
EventQueue Toolkit::getSystemEventQueue() { return EventQueue(*classes[className]->invokeMethod<jobject>(this->object, "getSystemEventQueue", "()Ljava/awt/EventQueue;")); }
DragGestureRecognizer Toolkit::createDragGestureRecognizer(Class arg0, DragSource arg1, Component arg2, int arg3, DragGestureListener arg4) { return DragGestureRecognizer(*classes[className]->invokeMethod<jobject>(this->object, "createDragGestureRecognizer", "(Ljava/lang/Class;Ljava/awt/dnd/DragSource;Ljava/awt/Component;ILjava/awt/dnd/DragGestureListener;)Ljava/awt/dnd/DragGestureRecognizer;", arg0, arg1, arg2, arg3, arg4)); }
bool Toolkit::isModalityTypeSupported(Dialog_ModalityType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isModalityTypeSupported", "(Ljava/awt/Dialog$ModalityType;)Z", arg0)); }
void Toolkit::addAWTEventListener(AWTEventListener arg0, long arg1) { (classes[className]->invokeMethod<void>(this->object, "addAWTEventListener", "(Ljava/awt/event/AWTEventListener;J)V", arg0, arg1)); }
void Toolkit::removeAWTEventListener(AWTEventListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeAWTEventListener", "(Ljava/awt/event/AWTEventListener;)V", arg0)); }
int Toolkit::countAWTEventListeners(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "countAWTEventListeners", "(J)I", arg0)); }
String Toolkit::getProperty(String arg0, String arg1) { return String(*classes[className]->invokeStaticMethod<jobject>("getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }

Object Clipboard::getData(DataFlavor arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getData", "(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;", arg0)); }
Transferable Clipboard::getContents(Object arg0) { return Transferable(*classes[className]->invokeMethod<jobject>(this->object, "getContents", "(Ljava/lang/Object;)Ljava/awt/datatransfer/Transferable;", arg0)); }
void Clipboard::setContents(Transferable arg0, ClipboardOwner arg1) { (classes[className]->invokeMethod<void>(this->object, "setContents", "(Ljava/awt/datatransfer/Transferable;Ljava/awt/datatransfer/ClipboardOwner;)V", arg0, arg1)); }
void Clipboard::fireFlavorsChanged() { (classes[className]->invokeMethod<void>(this->object, "fireFlavorsChanged", "()V")); }
Set Clipboard::getAvailableDataFlavorSet() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getAvailableDataFlavorSet", "()Ljava/util/Set;")); }
bool Clipboard::isDataFlavorAvailable(DataFlavor arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDataFlavorAvailable", "(Ljava/awt/datatransfer/DataFlavor;)Z", arg0)); }
void Clipboard::addFlavorListener(FlavorListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addFlavorListener", "(Ljava/awt/datatransfer/FlavorListener;)V", arg0)); }
void Clipboard::removeFlavorListener(FlavorListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeFlavorListener", "(Ljava/awt/datatransfer/FlavorListener;)V", arg0)); }
String Clipboard::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }

String DataFlavor::normalizeMimeType(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "normalizeMimeType", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
DataFlavor DataFlavor::createConstant(String arg0, String arg1) { return DataFlavor(*classes[className]->invokeStaticMethod<jobject>("createConstant", "(Ljava/lang/String;Ljava/lang/String;)Ljava/awt/datatransfer/DataFlavor;", arg0, arg1)); }
DataFlavor DataFlavor::createConstant(Class arg0, String arg1) { return DataFlavor(*classes[className]->invokeStaticMethod<jobject>("createConstant", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/awt/datatransfer/DataFlavor;", arg0, arg1)); }
String DataFlavor::getParameter(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getParameter", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
Class DataFlavor::tryToLoadClass(String arg0, ClassLoader arg1) { return Class(*classes[className]->invokeStaticMethod<jobject>("tryToLoadClass", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Class;", arg0, arg1)); }
String DataFlavor::getPrimaryType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPrimaryType", "()Ljava/lang/String;")); }
String DataFlavor::getSubType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSubType", "()Ljava/lang/String;")); }
bool DataFlavor::isRepresentationClassInputStream() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRepresentationClassInputStream", "()Z")); }
bool DataFlavor::isRepresentationClassByteBuffer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRepresentationClassByteBuffer", "()Z")); }
bool DataFlavor::isFlavorTextType() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFlavorTextType", "()Z")); }
Class DataFlavor::getRepresentationClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getRepresentationClass", "()Ljava/lang/Class;")); }
bool DataFlavor::isStandardTextRepresentationClass() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isStandardTextRepresentationClass", "()Z")); }
bool DataFlavor::isMimeTypeEqual(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMimeTypeEqual", "(Ljava/lang/String;)Z", arg0)); }
bool DataFlavor::isMimeTypeEqual(DataFlavor arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMimeTypeEqual", "(Ljava/awt/datatransfer/DataFlavor;)Z", arg0)); }
bool DataFlavor::isMimeTypeEqual(MimeType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMimeTypeEqual", "(Ljava/awt/datatransfer/MimeType;)Z", arg0)); }
bool DataFlavor::isRepresentationClassReader() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRepresentationClassReader", "()Z")); }
bool DataFlavor::isRepresentationClassCharBuffer() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRepresentationClassCharBuffer", "()Z")); }
Class DataFlavor::getDefaultRepresentationClass() { return Class(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultRepresentationClass", "()Ljava/lang/Class;")); }
bool DataFlavor::isRepresentationClassSerializable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRepresentationClassSerializable", "()Z")); }
bool DataFlavor::isRepresentationClassRemote() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRepresentationClassRemote", "()Z")); }
DataFlavor DataFlavor::initHtml(String arg0) { return DataFlavor(*classes[className]->invokeStaticMethod<jobject>("initHtml", "(Ljava/lang/String;)Ljava/awt/datatransfer/DataFlavor;", arg0)); }
DataFlavor DataFlavor::getTextPlainUnicodeFlavor() { return DataFlavor(*classes[className]->invokeStaticMethod<jobject>("getTextPlainUnicodeFlavor", "()Ljava/awt/datatransfer/DataFlavor;")); }
DataFlavor DataFlavor::selectBestTextFlavor(DataFlavor_interface arg0) { return DataFlavor(*classes[className]->invokeStaticMethod<jobject>("selectBestTextFlavor", "([Ljava/awt/datatransfer/DataFlavor;)Ljava/awt/datatransfer/DataFlavor;", arg0)); }
Reader DataFlavor::getReaderForText(Transferable arg0) { return Reader(*classes[className]->invokeMethod<jobject>(this->object, "getReaderForText", "(Ljava/awt/datatransfer/Transferable;)Ljava/io/Reader;", arg0)); }
String DataFlavor::getMimeType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getMimeType", "()Ljava/lang/String;")); }
String DataFlavor::getHumanPresentableName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getHumanPresentableName", "()Ljava/lang/String;")); }
void DataFlavor::setHumanPresentableName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setHumanPresentableName", "(Ljava/lang/String;)V", arg0)); }
bool DataFlavor::isMimeTypeSerializedObject() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMimeTypeSerializedObject", "()Z")); }
String DataFlavor::getDefaultRepresentationClassAsString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultRepresentationClassAsString", "()Ljava/lang/String;")); }
bool DataFlavor::isFlavorSerializedObjectType() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFlavorSerializedObjectType", "()Z")); }
bool DataFlavor::isFlavorRemoteObjectType() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFlavorRemoteObjectType", "()Z")); }
bool DataFlavor::isFlavorJavaFileListType() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFlavorJavaFileListType", "()Z")); }
String DataFlavor::normalizeMimeTypeParameter(String arg0, String arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "normalizeMimeTypeParameter", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
bool DataFlavor::equals(DataFlavor arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/awt/datatransfer/DataFlavor;)Z", arg0)); }
bool DataFlavor::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
bool DataFlavor::equals(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/String;)Z", arg0)); }
String DataFlavor::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int DataFlavor::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object DataFlavor::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void DataFlavor::initialize(String arg0, String arg1, ClassLoader arg2) { (classes[className]->invokeMethod<void>(this->object, "initialize", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V", arg0, arg1, arg2)); }
bool DataFlavor::match(DataFlavor arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "match", "(Ljava/awt/datatransfer/DataFlavor;)Z", arg0)); }
String DataFlavor::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

bool MimeType::isValidToken(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isValidToken", "(Ljava/lang/String;)Z", arg0)); }
bool MimeType::isTokenChar(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isTokenChar", "(C)Z", arg0)); }
void MimeType::parse(String arg0) { (classes[className]->invokeMethod<void>(this->object, "parse", "(Ljava/lang/String;)V", arg0)); }
void MimeType::removeParameter(String arg0) { (classes[className]->invokeMethod<void>(this->object, "removeParameter", "(Ljava/lang/String;)V", arg0)); }
String MimeType::getParameter(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getParameter", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String MimeType::getBaseType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getBaseType", "()Ljava/lang/String;")); }
void MimeType::setParameter(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "setParameter", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
String MimeType::getPrimaryType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPrimaryType", "()Ljava/lang/String;")); }
String MimeType::getSubType() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getSubType", "()Ljava/lang/String;")); }
bool MimeType::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String MimeType::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int MimeType::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object MimeType::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
bool MimeType::match(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "match", "(Ljava/lang/String;)Z", arg0)); }
bool MimeType::match(MimeType arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "match", "(Ljava/awt/datatransfer/MimeType;)Z", arg0)); }
MimeTypeParameterList MimeType::getParameters() { return MimeTypeParameterList(*classes[className]->invokeMethod<jobject>(this->object, "getParameters", "()Ljava/awt/datatransfer/MimeTypeParameterList;")); }

bool MimeTypeParameterList::isTokenChar(char arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isTokenChar", "(C)Z", arg0)); }
Enumeration MimeTypeParameterList::getNames() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "getNames", "()Ljava/util/Enumeration;")); }
String MimeTypeParameterList::unquote(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("unquote", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String MimeTypeParameterList::quote(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("quote", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void MimeTypeParameterList::parse(String arg0) { (classes[className]->invokeMethod<void>(this->object, "parse", "(Ljava/lang/String;)V", arg0)); }
int MimeTypeParameterList::skipWhiteSpace(String arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("skipWhiteSpace", "(Ljava/lang/String;I)I", arg0, arg1)); }
void MimeTypeParameterList::remove(String arg0) { (classes[className]->invokeMethod<void>(this->object, "remove", "(Ljava/lang/String;)V", arg0)); }
String MimeTypeParameterList::get(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
bool MimeTypeParameterList::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String MimeTypeParameterList::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int MimeTypeParameterList::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object MimeTypeParameterList::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
bool MimeTypeParameterList::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
int MimeTypeParameterList::size() { return int(*classes[className]->invokeMethod<int>(this->object, "size", "()I")); }
void MimeTypeParameterList::set(String arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "set", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }



bool Reader::ready() { return bool(*classes[className]->invokeMethod<bool>(this->object, "ready", "()Z")); }
Reader Reader::nullReader() { return Reader(*classes[className]->invokeStaticMethod<jobject>("nullReader", "()Ljava/io/Reader;")); }
void Reader::mark(int arg0) { (classes[className]->invokeMethod<void>(this->object, "mark", "(I)V", arg0)); }
long Reader::transferTo(Writer arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "transferTo", "(Ljava/io/Writer;)J", arg0)); }
long Reader::skip(long arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "skip", "(J)J", arg0)); }
bool Reader::markSupported() { return bool(*classes[className]->invokeMethod<bool>(this->object, "markSupported", "()Z")); }
void Reader::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }



void Insets::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
bool Insets::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Insets::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Insets::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object Insets::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void Insets::set(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "set", "(IIII)V", arg0, arg1, arg2, arg3)); }

void EventQueue::postEvent(AWTEvent arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "postEvent", "(Ljava/awt/AWTEvent;I)V", arg0, arg1)); }
void EventQueue::postEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "postEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
bool EventQueue::isDispatchThread() { return bool(*classes[className]->invokeStaticMethod<bool>("isDispatchThread", "()Z")); }
void EventQueue::invokeAndWait(Object arg0, Runnable arg1) { (classes[className]->invokeStaticMethod<void>("invokeAndWait", "(Ljava/lang/Object;Ljava/lang/Runnable;)V", arg0, arg1)); }
void EventQueue::invokeAndWait(Runnable arg0) { (classes[className]->invokeStaticMethod<void>("invokeAndWait", "(Ljava/lang/Runnable;)V", arg0)); }
void EventQueue::dispatchEventImpl(AWTEvent arg0, Object arg1) { (classes[className]->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava/awt/AWTEvent;Ljava/lang/Object;)V", arg0, arg1)); }
void EventQueue::dispatchEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
long EventQueue::getMostRecentKeyEventTime() { return long(*classes[className]->invokeMethod<long>(this->object, "getMostRecentKeyEventTime", "()J")); }
void EventQueue::invokeLater(Runnable arg0) { (classes[className]->invokeStaticMethod<void>("invokeLater", "(Ljava/lang/Runnable;)V", arg0)); }
void EventQueue::setCurrentEventAndMostRecentTime(AWTEvent arg0) { (classes[className]->invokeStaticMethod<void>("setCurrentEventAndMostRecentTime", "(Ljava/awt/AWTEvent;)V", arg0)); }
void EventQueue::removeSourceEvents(Object arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "removeSourceEvents", "(Ljava/lang/Object;Z)V", arg0, arg1)); }
AWTEvent EventQueue::getCurrentEvent() { return AWTEvent(*classes[className]->invokeStaticMethod<jobject>("getCurrentEvent", "()Ljava/awt/AWTEvent;")); }
void EventQueue::push(EventQueue arg0) { (classes[className]->invokeMethod<void>(this->object, "push", "(Ljava/awt/EventQueue;)V", arg0)); }
void EventQueue::pop() { (classes[className]->invokeMethod<void>(this->object, "pop", "()V")); }
EventDispatchThread EventQueue::getDispatchThread() { return EventDispatchThread(*classes[className]->invokeMethod<jobject>(this->object, "getDispatchThread", "()Ljava/awt/EventDispatchThread;")); }
SecondaryLoop EventQueue::createSecondaryLoop(Conditional arg0, EventFilter arg1, long arg2) { return SecondaryLoop(*classes[className]->invokeMethod<jobject>(this->object, "createSecondaryLoop", "(Ljava/awt/Conditional;Ljava/awt/EventFilter;J)Ljava/awt/SecondaryLoop;", arg0, arg1, arg2)); }
SecondaryLoop EventQueue::createSecondaryLoop() { return SecondaryLoop(*classes[className]->invokeMethod<jobject>(this->object, "createSecondaryLoop", "()Ljava/awt/SecondaryLoop;")); }
void EventQueue::postEventPrivate(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "postEventPrivate", "(Ljava/awt/AWTEvent;)V", arg0)); }
void EventQueue::initDispatchThread() { (classes[className]->invokeMethod<void>(this->object, "initDispatchThread", "()V")); }
bool EventQueue::coalesceEvent(AWTEvent arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "coalesceEvent", "(Ljava/awt/AWTEvent;I)Z", arg0, arg1)); }
void EventQueue::cacheEQItem(EventQueueItem arg0) { (classes[className]->invokeMethod<void>(this->object, "cacheEQItem", "(Lsun/awt/EventQueueItem;)V", arg0)); }
bool EventQueue::noEvents() { return bool(*classes[className]->invokeMethod<bool>(this->object, "noEvents", "()Z")); }
bool EventQueue::coalescePaintEvent(PaintEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "coalescePaintEvent", "(Ljava/awt/event/PaintEvent;)Z", arg0)); }
int EventQueue::eventToCacheIndex(AWTEvent arg0) { return int(*classes[className]->invokeStaticMethod<int>("eventToCacheIndex", "(Ljava/awt/AWTEvent;)I", arg0)); }
PaintEvent EventQueue::mergePaintEvents(PaintEvent arg0, PaintEvent arg1) { return PaintEvent(*classes[className]->invokeMethod<jobject>(this->object, "mergePaintEvents", "(Ljava/awt/event/PaintEvent;Ljava/awt/event/PaintEvent;)Ljava/awt/event/PaintEvent;", arg0, arg1)); }
bool EventQueue::coalescePeerEvent(PeerEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "coalescePeerEvent", "(Lsun/awt/PeerEvent;)Z", arg0)); }
bool EventQueue::coalesceOtherEvent(AWTEvent arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "coalesceOtherEvent", "(Ljava/awt/AWTEvent;I)Z", arg0, arg1)); }
bool EventQueue::coalesceMouseEvent(MouseEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "coalesceMouseEvent", "(Ljava/awt/event/MouseEvent;)Z", arg0)); }
AWTEvent EventQueue::getNextEventPrivate() { return AWTEvent(*classes[className]->invokeMethod<jobject>(this->object, "getNextEventPrivate", "()Ljava/awt/AWTEvent;")); }
void EventQueue::uncacheEQItem(EventQueueItem arg0) { (classes[className]->invokeMethod<void>(this->object, "uncacheEQItem", "(Lsun/awt/EventQueueItem;)V", arg0)); }
AccessControlContext EventQueue::getAccessControlContextFrom(Object arg0) { return AccessControlContext(*classes[className]->invokeStaticMethod<jobject>("getAccessControlContextFrom", "(Ljava/lang/Object;)Ljava/security/AccessControlContext;", arg0)); }
void EventQueue::setCurrentEventAndMostRecentTimeImpl(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "setCurrentEventAndMostRecentTimeImpl", "(Ljava/awt/AWTEvent;)V", arg0)); }
PlatformLogger EventQueue::getEventLog() { return PlatformLogger(*classes[className]->invokeStaticMethod<jobject>("getEventLog", "()Lsun/util/logging/PlatformLogger;")); }
long EventQueue::getMostRecentEventTimeImpl() { return long(*classes[className]->invokeMethod<long>(this->object, "getMostRecentEventTimeImpl", "()J")); }
AWTEvent EventQueue::getCurrentEventImpl() { return AWTEvent(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentEventImpl", "()Ljava/awt/AWTEvent;")); }
AWTEvent EventQueue::peekEvent() { return AWTEvent(*classes[className]->invokeMethod<jobject>(this->object, "peekEvent", "()Ljava/awt/AWTEvent;")); }
AWTEvent EventQueue::peekEvent(int arg0) { return AWTEvent(*classes[className]->invokeMethod<jobject>(this->object, "peekEvent", "(I)Ljava/awt/AWTEvent;", arg0)); }
bool EventQueue::isDispatchThreadImpl() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDispatchThreadImpl", "()Z")); }
void EventQueue::wakeup(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "wakeup", "(Z)V", arg0)); }
void EventQueue::setFwDispatcher(FwDispatcher arg0) { (classes[className]->invokeMethod<void>(this->object, "setFwDispatcher", "(Lsun/awt/FwDispatcher;)V", arg0)); }
AWTEvent EventQueue::getNextEvent(int arg0) { return AWTEvent(*classes[className]->invokeMethod<jobject>(this->object, "getNextEvent", "(I)Ljava/awt/AWTEvent;", arg0)); }
AWTEvent EventQueue::getNextEvent() { return AWTEvent(*classes[className]->invokeMethod<jobject>(this->object, "getNextEvent", "()Ljava/awt/AWTEvent;")); }
long EventQueue::getMostRecentEventTime() { return long(*classes[className]->invokeStaticMethod<long>("getMostRecentEventTime", "()J")); }
long EventQueue::getMostRecentEventTimeEx() { return long(*classes[className]->invokeMethod<long>(this->object, "getMostRecentEventTimeEx", "()J")); }
void EventQueue::detachDispatchThread(EventDispatchThread arg0) { (classes[className]->invokeMethod<void>(this->object, "detachDispatchThread", "(Ljava/awt/EventDispatchThread;)V", arg0)); }
int EventQueue::getPriority(AWTEvent arg0) { return int(*classes[className]->invokeStaticMethod<int>("getPriority", "(Ljava/awt/AWTEvent;)I", arg0)); }

void AWTEvent::consume() { (classes[className]->invokeMethod<void>(this->object, "consume", "()V")); }
bool AWTEvent::isConsumed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConsumed", "()Z")); }
Event AWTEvent::convertToOld() { return Event(*classes[className]->invokeMethod<jobject>(this->object, "convertToOld", "()Ljava/awt/Event;")); }
void AWTEvent::copyPrivateDataInto(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "copyPrivateDataInto", "(Ljava/awt/AWTEvent;)V", arg0)); }
AccessControlContext AWTEvent::getAccessControlContext() { return AccessControlContext(*classes[className]->invokeMethod<jobject>(this->object, "getAccessControlContext", "()Ljava/security/AccessControlContext;")); }
int AWTEvent::getID() { return int(*classes[className]->invokeMethod<int>(this->object, "getID", "()I")); }
void AWTEvent::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
void AWTEvent::nativeSetSource(ComponentPeer arg0) { (classes[className]->invokeMethod<void>(this->object, "nativeSetSource", "(Ljava/awt/peer/ComponentPeer;)V", arg0)); }
void AWTEvent::setSource(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "setSource", "(Ljava/lang/Object;)V", arg0)); }
void AWTEvent::dispatched() { (classes[className]->invokeMethod<void>(this->object, "dispatched", "()V")); }
String AWTEvent::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String AWTEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

void Event::translate(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }
void Event::consume() { (classes[className]->invokeMethod<void>(this->object, "consume", "()V")); }
bool Event::isConsumed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConsumed", "()Z")); }
char Event::getKeyEventChar() { return char(*classes[className]->invokeMethod<char>(this->object, "getKeyEventChar", "()C")); }
void Event::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
bool Event::shiftDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "shiftDown", "()Z")); }
bool Event::controlDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "controlDown", "()Z")); }
bool Event::metaDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "metaDown", "()Z")); }
int Event::getOldEventKey(KeyEvent arg0) { return int(*classes[className]->invokeStaticMethod<int>("getOldEventKey", "(Ljava/awt/event/KeyEvent;)I", arg0)); }
String Event::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
String Event::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

void KeyEvent::setKeyCode(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setKeyCode", "(I)V", arg0)); }
int KeyEvent::getKeyCode() { return int(*classes[className]->invokeMethod<int>(this->object, "getKeyCode", "()I")); }
bool KeyEvent::isActionKey() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isActionKey", "()Z")); }
void KeyEvent::setKeyChar(char arg0) { (classes[className]->invokeMethod<void>(this->object, "setKeyChar", "(C)V", arg0)); }
void KeyEvent::setModifiers(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setModifiers", "(I)V", arg0)); }
char KeyEvent::getKeyChar() { return char(*classes[className]->invokeMethod<char>(this->object, "getKeyChar", "()C")); }
void KeyEvent::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
void KeyEvent::setNewModifiers() { (classes[className]->invokeMethod<void>(this->object, "setNewModifiers", "()V")); }
void KeyEvent::setOldModifiers() { (classes[className]->invokeMethod<void>(this->object, "setOldModifiers", "()V")); }
String KeyEvent::getKeyText(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getKeyText", "(I)Ljava/lang/String;", arg0)); }
String KeyEvent::getKeyModifiersText(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getKeyModifiersText", "(I)Ljava/lang/String;", arg0)); }
int KeyEvent::getExtendedKeyCodeForChar(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getExtendedKeyCodeForChar", "(I)I", arg0)); }
int KeyEvent::getKeyLocation() { return int(*classes[className]->invokeMethod<int>(this->object, "getKeyLocation", "()I")); }
int KeyEvent::getExtendedKeyCode() { return int(*classes[className]->invokeMethod<int>(this->object, "getExtendedKeyCode", "()I")); }
void KeyEvent::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
String KeyEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

bool InputEvent::isControlDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isControlDown", "()Z")); }
bool InputEvent::isShiftDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isShiftDown", "()Z")); }
void InputEvent::consume() { (classes[className]->invokeMethod<void>(this->object, "consume", "()V")); }
bool InputEvent::isConsumed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConsumed", "()Z")); }
long InputEvent::getWhen() { return long(*classes[className]->invokeMethod<long>(this->object, "getWhen", "()J")); }
void InputEvent::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
bool InputEvent::canAccessSystemClipboard() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canAccessSystemClipboard", "()Z")); }
int InputEvent::getModifiersEx() { return int(*classes[className]->invokeMethod<int>(this->object, "getModifiersEx", "()I")); }
String InputEvent::getModifiersExText(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getModifiersExText", "(I)Ljava/lang/String;", arg0)); }
int InputEvent::getMaskForButton(int arg0) { return int(*classes[className]->invokeStaticMethod<int>("getMaskForButton", "(I)I", arg0)); }
bool InputEvent::isMetaDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMetaDown", "()Z")); }
bool InputEvent::isAltDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAltDown", "()Z")); }
bool InputEvent::isAltGraphDown() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAltGraphDown", "()Z")); }
int InputEvent::getModifiers() { return int(*classes[className]->invokeMethod<int>(this->object, "getModifiers", "()I")); }

Component ComponentEvent::getComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponent", "()Ljava/awt/Component;")); }
String ComponentEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

void Component::setLocale(Locale arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocale", "(Ljava/util/Locale;)V", arg0)); }
void Component::enable(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "enable", "(Z)V", arg0)); }
void Component::enable() { (classes[className]->invokeMethod<void>(this->object, "enable", "()V")); }
int Component::getX() { return int(*classes[className]->invokeMethod<int>(this->object, "getX", "()I")); }
int Component::getY() { return int(*classes[className]->invokeMethod<int>(this->object, "getY", "()I")); }
void Component::invalidate() { (classes[className]->invokeMethod<void>(this->object, "invalidate", "()V")); }
void Component::setSize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }
void Component::setSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setSize", "(Ljava/awt/Dimension;)V", arg0)); }
int Component::getWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "()I")); }
int Component::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
bool Component::isValid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isValid", "()Z")); }
void Component::disable() { (classes[className]->invokeMethod<void>(this->object, "disable", "()V")); }
Toolkit Component::getToolkit() { return Toolkit(*classes[className]->invokeMethod<jobject>(this->object, "getToolkit", "()Ljava/awt/Toolkit;")); }
void Component::firePropertyChange(String arg0, long arg1, long arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;JJ)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;FF)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, double arg1, double arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;DD)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, bool arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;ZZ)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, byte arg1, byte arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;BB)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, Object arg1, Object arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, char arg1, char arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;CC)V", arg0, arg1, arg2)); }
void Component::firePropertyChange(String arg0, short arg1, short arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;SS)V", arg0, arg1, arg2)); }
Object Component::getTreeLock() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getTreeLock", "()Ljava/lang/Object;")); }
void Component::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
ComponentFactory Component::getComponentFactory() { return ComponentFactory(*classes[className]->invokeMethod<jobject>(this->object, "getComponentFactory", "()Lsun/awt/ComponentFactory;")); }
void Component::removeNotify() { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "()V")); }
Dimension Component::getPreferredSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getPreferredSize", "()Ljava/awt/Dimension;")); }
void Component::setMinimumSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setMinimumSize", "(Ljava/awt/Dimension;)V", arg0)); }
bool Component::isMinimumSizeSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMinimumSizeSet", "()Z")); }
Dimension Component::getMinimumSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getMinimumSize", "()Ljava/awt/Dimension;")); }
void Component::setBoundsOp(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setBoundsOp", "(I)V", arg0)); }
void Component::show(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "show", "(Z)V", arg0)); }
void Component::show() { (classes[className]->invokeMethod<void>(this->object, "show", "()V")); }
bool Component::isShowing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isShowing", "()Z")); }
void Component::hide() { (classes[className]->invokeMethod<void>(this->object, "hide", "()V")); }
bool Component::isDisplayable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDisplayable", "()Z")); }
void Component::setCursor(Cursor arg0) { (classes[className]->invokeMethod<void>(this->object, "setCursor", "(Ljava/awt/Cursor;)V", arg0)); }
bool Component::isVisible() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVisible", "()Z")); }
bool Component::eventEnabled(AWTEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "eventEnabled", "(Ljava/awt/AWTEvent;)Z", arg0)); }
void Component::processEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
void Component::requestFocus(FocusEvent_Cause arg0) { (classes[className]->invokeMethod<void>(this->object, "requestFocus", "(Ljava/awt/event/FocusEvent$Cause;)V", arg0)); }
void Component::requestFocus() { (classes[className]->invokeMethod<void>(this->object, "requestFocus", "()V")); }
bool Component::requestFocus(bool arg0, FocusEvent_Cause arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocus", "(ZLjava/awt/event/FocusEvent$Cause;)Z", arg0, arg1)); }
bool Component::requestFocus(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocus", "(Z)Z", arg0)); }
void Component::addPropertyChangeListener(PropertyChangeListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", arg0)); }
void Component::addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
void Component::dispatchEventImpl(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava/awt/AWTEvent;)V", arg0)); }
bool Component::handleEvent(Event arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleEvent", "(Ljava/awt/Event;)Z", arg0)); }
void Component::applyComponentOrientation(ComponentOrientation arg0) { (classes[className]->invokeMethod<void>(this->object, "applyComponentOrientation", "(Ljava/awt/ComponentOrientation;)V", arg0)); }
Object Component::getObjectLock() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getObjectLock", "()Ljava/lang/Object;")); }
GraphicsConfiguration Component::getGraphicsConfiguration_NoClientCode() { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "getGraphicsConfiguration_NoClientCode", "()Ljava/awt/GraphicsConfiguration;")); }
Window Component::getContainingWindow() { return Window(*classes[className]->invokeMethod<jobject>(this->object, "getContainingWindow", "()Ljava/awt/Window;")); }
Point Component::getLocationOnScreen() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocationOnScreen", "()Ljava/awt/Point;")); }
void Component::createBufferStrategy(int arg0) { (classes[className]->invokeMethod<void>(this->object, "createBufferStrategy", "(I)V", arg0)); }
void Component::createBufferStrategy(int arg0, BufferCapabilities arg1) { (classes[className]->invokeMethod<void>(this->object, "createBufferStrategy", "(ILjava/awt/BufferCapabilities;)V", arg0, arg1)); }
BufferStrategy Component::getBufferStrategy() { return BufferStrategy(*classes[className]->invokeMethod<jobject>(this->object, "getBufferStrategy", "()Ljava/awt/image/BufferStrategy;")); }
bool Component::canBeFocusOwner() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeFocusOwner", "()Z")); }
int Component::getBoundsOp() { return int(*classes[className]->invokeMethod<int>(this->object, "getBoundsOp", "()I")); }
void Component::paint(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "paint", "(Ljava/awt/Graphics;)V", arg0)); }
String Component::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
Dimension Component::minimumSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "minimumSize", "()Ljava/awt/Dimension;")); }
void Component::clearMostRecentFocusOwnerOnHide() { (classes[className]->invokeMethod<void>(this->object, "clearMostRecentFocusOwnerOnHide", "()V")); }
void Component::adjustListeningChildrenOnParent(long arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "adjustListeningChildrenOnParent", "(JI)V", arg0, arg1)); }
InputContext Component::getInputContext() { return InputContext(*classes[className]->invokeMethod<jobject>(this->object, "getInputContext", "()Ljava/awt/im/InputContext;")); }
Set Component::getFocusTraversalKeys(int arg0) { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getFocusTraversalKeys", "(I)Ljava/util/Set;", arg0)); }
bool Component::isFocusCycleRoot(Container arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocusCycleRoot", "(Ljava/awt/Container;)Z", arg0)); }
Container Component::getFocusCycleRootAncestor() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getFocusCycleRootAncestor", "()Ljava/awt/Container;")); }
AccessibleContext Component::getAccessibleContext() { return AccessibleContext(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax/accessibility/AccessibleContext;")); }
bool Component::dispatchMouseWheelToAncestor(MouseWheelEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "dispatchMouseWheelToAncestor", "(Ljava/awt/event/MouseWheelEvent;)Z", arg0)); }
bool Component::isRecursivelyVisible() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRecursivelyVisible", "()Z")); }
Container Component::getContainer() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getContainer", "()Ljava/awt/Container;")); }
void Component::applyCompoundShape(Region arg0) { (classes[className]->invokeMethod<void>(this->object, "applyCompoundShape", "(Lsun/java2d/pipe/Region;)V", arg0)); }
void Component::applyCurrentShape() { (classes[className]->invokeMethod<void>(this->object, "applyCurrentShape", "()V")); }
void Component::mixOnReshaping() { (classes[className]->invokeMethod<void>(this->object, "mixOnReshaping", "()V")); }
Point Component::getLocationOnWindow() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocationOnWindow", "()Ljava/awt/Point;")); }
void Component::updateZOrder() { (classes[className]->invokeMethod<void>(this->object, "updateZOrder", "()V")); }
void Component::checkTreeLock() { (classes[className]->invokeMethod<void>(this->object, "checkTreeLock", "()V")); }
void Component::checkGD(String arg0) { (classes[className]->invokeMethod<void>(this->object, "checkGD", "(Ljava/lang/String;)V", arg0)); }
int Component::numListening(long arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "numListening", "(J)I", arg0)); }
int Component::countHierarchyMembers() { return int(*classes[className]->invokeMethod<int>(this->object, "countHierarchyMembers", "()I")); }
void Component::invalidateIfValid() { (classes[className]->invokeMethod<void>(this->object, "invalidateIfValid", "()V")); }
void Component::dispatchEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
int Component::createHierarchyEvents(int arg0, Component arg1, Container arg2, long arg3, bool arg4) { return int(*classes[className]->invokeMethod<int>(this->object, "createHierarchyEvents", "(ILjava/awt/Component;Ljava/awt/Container;JZ)I", arg0, arg1, arg2, arg3, arg4)); }
void Component::updateCursorImmediately() { (classes[className]->invokeMethod<void>(this->object, "updateCursorImmediately", "()V")); }
bool Component::isFocusable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocusable", "()Z")); }
Container Component::getNativeContainer() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getNativeContainer", "()Ljava/awt/Container;")); }
bool Component::isLightweight() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLightweight", "()Z")); }
void Component::mixOnZOrderChanging(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "mixOnZOrderChanging", "(II)V", arg0, arg1)); }
void Component::relocateComponent() { (classes[className]->invokeMethod<void>(this->object, "relocateComponent", "()V")); }
bool Component::isFocusOwner() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocusOwner", "()Z")); }
bool Component::canBeFocusOwnerRecursively() { return bool(*classes[className]->invokeMethod<bool>(this->object, "canBeFocusOwnerRecursively", "()Z")); }
bool Component::transferFocus(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "transferFocus", "(Z)Z", arg0)); }
void Component::transferFocus() { (classes[className]->invokeMethod<void>(this->object, "transferFocus", "()V")); }
bool Component::updateGraphicsData(GraphicsConfiguration arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "updateGraphicsData", "(Ljava/awt/GraphicsConfiguration;)Z", arg0)); }
void Component::invalidateParent() { (classes[className]->invokeMethod<void>(this->object, "invalidateParent", "()V")); }
void Component::doLayout() { (classes[className]->invokeMethod<void>(this->object, "doLayout", "()V")); }
Dimension Component::preferredSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "preferredSize", "()Ljava/awt/Dimension;")); }
bool Component::isPreferredSizeSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPreferredSizeSet", "()Z")); }
bool Component::isMaximumSizeSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMaximumSizeSet", "()Z")); }
Dimension Component::getMaximumSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getMaximumSize", "()Ljava/awt/Dimension;")); }
float Component::getAlignmentX() { return float(*classes[className]->invokeMethod<float>(this->object, "getAlignmentX", "()F")); }
float Component::getAlignmentY() { return float(*classes[className]->invokeMethod<float>(this->object, "getAlignmentY", "()F")); }
void Component::lightweightPaint(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "lightweightPaint", "(Ljava/awt/Graphics;)V", arg0)); }
void Component::paintHeavyweightComponents(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "paintHeavyweightComponents", "(Ljava/awt/Graphics;)V", arg0)); }
void Component::lightweightPrint(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "lightweightPrint", "(Ljava/awt/Graphics;)V", arg0)); }
void Component::printHeavyweightComponents(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "printHeavyweightComponents", "(Ljava/awt/Graphics;)V", arg0)); }
void Component::enableEvents(long arg0) { (classes[className]->invokeMethod<void>(this->object, "enableEvents", "(J)V", arg0)); }
Component Component::getComponentAt(Point arg0) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponentAt", "(Ljava/awt/Point;)Ljava/awt/Component;", arg0)); }
Component Component::getComponentAt(int arg0, int arg1) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponentAt", "(II)Ljava/awt/Component;", arg0, arg1)); }
void Component::deliverEvent(Event arg0) { (classes[className]->invokeMethod<void>(this->object, "deliverEvent", "(Ljava/awt/Event;)V", arg0)); }
Component Component::locate(int arg0, int arg1) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "locate", "(II)Ljava/awt/Component;", arg0, arg1)); }
Component Component::findUnderMouseInWindow(PointerInfo arg0) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "findUnderMouseInWindow", "(Ljava/awt/PointerInfo;)Ljava/awt/Component;", arg0)); }
bool Component::isSameOrAncestorOf(Component arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSameOrAncestorOf", "(Ljava/awt/Component;Z)Z", arg0, arg1)); }
Point Component::pointRelativeToComponent(Point arg0) { return Point(*classes[className]->invokeMethod<jobject>(this->object, "pointRelativeToComponent", "(Ljava/awt/Point;)Ljava/awt/Point;", arg0)); }
void Component::setAutoFocusTransferOnDisposal(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setAutoFocusTransferOnDisposal", "(Z)V", arg0)); }
bool Component::containsFocus() { return bool(*classes[className]->invokeMethod<bool>(this->object, "containsFocus", "()Z")); }
bool Component::transferFocusBackward(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "transferFocusBackward", "(Z)Z", arg0)); }
void Component::transferFocusBackward() { (classes[className]->invokeMethod<void>(this->object, "transferFocusBackward", "()V")); }
void Component::setFocusTraversalKeys_NoIDCheck(int arg0, Set arg1) { (classes[className]->invokeMethod<void>(this->object, "setFocusTraversalKeys_NoIDCheck", "(ILjava/util/Set;)V", arg0, arg1)); }
Set Component::getFocusTraversalKeys_NoIDCheck(int arg0) { return Set(*classes[className]->invokeMethod<jobject>(this->object, "getFocusTraversalKeys_NoIDCheck", "(I)Ljava/util/Set;", arg0)); }
Container Component::getTraversalRoot() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getTraversalRoot", "()Ljava/awt/Container;")); }
bool Component::isNonOpaqueForMixing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isNonOpaqueForMixing", "()Z")); }
Region Component::getOpaqueShape() { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getOpaqueShape", "()Lsun/java2d/pipe/Region;")); }
Region Component::getNormalShape() { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getNormalShape", "()Lsun/java2d/pipe/Region;")); }
void Component::subtractAndApplyShape(Region arg0) { (classes[className]->invokeMethod<void>(this->object, "subtractAndApplyShape", "(Lsun/java2d/pipe/Region;)V", arg0)); }
bool Component::isMixingNeeded() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMixingNeeded", "()Z")); }
void Component::mixOnShowing() { (classes[className]->invokeMethod<void>(this->object, "mixOnShowing", "()V")); }
void Component::mixOnHiding(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "mixOnHiding", "(Z)V", arg0)); }
void Component::subtractAndApplyShapeBelowMe() { (classes[className]->invokeMethod<void>(this->object, "subtractAndApplyShapeBelowMe", "()V")); }
void Component::mixOnValidating() { (classes[className]->invokeMethod<void>(this->object, "mixOnValidating", "()V")); }
void Component::initializeFocusTraversalKeys() { (classes[className]->invokeMethod<void>(this->object, "initializeFocusTraversalKeys", "()V")); }
bool Component::updateChildGraphicsData(GraphicsConfiguration arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "updateChildGraphicsData", "(Ljava/awt/GraphicsConfiguration;)Z", arg0)); }
Point Component::getMousePosition() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getMousePosition", "()Ljava/awt/Point;")); }
void Component::setFocusTraversalKeys(int arg0, Set arg1) { (classes[className]->invokeMethod<void>(this->object, "setFocusTraversalKeys", "(ILjava/util/Set;)V", arg0, arg1)); }
bool Component::areFocusTraversalKeysSet(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "areFocusTraversalKeysSet", "(I)Z", arg0)); }
void Component::clearCurrentFocusCycleRootOnHide() { (classes[className]->invokeMethod<void>(this->object, "clearCurrentFocusCycleRootOnHide", "()V")); }
bool Component::postsOldMouseEvents() { return bool(*classes[className]->invokeMethod<bool>(this->object, "postsOldMouseEvents", "()Z")); }
bool Component::isFocusTraversableOverridden() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocusTraversableOverridden", "()Z")); }
bool Component::checkCoalescing() { return bool(*classes[className]->invokeMethod<bool>(this->object, "checkCoalescing", "()Z")); }
Container Component::getParent_NoClientCode() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getParent_NoClientCode", "()Ljava/awt/Container;")); }
bool Component::updateSelfGraphicsData(GraphicsConfiguration arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "updateSelfGraphicsData", "(Ljava/awt/GraphicsConfiguration;)Z", arg0)); }
Toolkit Component::getToolkitImpl() { return Toolkit(*classes[className]->invokeMethod<jobject>(this->object, "getToolkitImpl", "()Ljava/awt/Toolkit;")); }
bool Component::isVisible_NoClientCode() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isVisible_NoClientCode", "()Z")); }
Rectangle Component::getRecursivelyVisibleBounds() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getRecursivelyVisibleBounds", "()Ljava/awt/Rectangle;")); }
bool Component::isEnabledImpl() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnabledImpl", "()Z")); }
void Component::setEnabled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }
void Component::repaint(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "repaint", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Component::repaint(long arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "repaint", "(JIIII)V", arg0, arg1, arg2, arg3, arg4)); }
void Component::repaint() { (classes[className]->invokeMethod<void>(this->object, "repaint", "()V")); }
void Component::repaint(long arg0) { (classes[className]->invokeMethod<void>(this->object, "repaint", "(J)V", arg0)); }
Font Component::getFont_NoClientCode() { return Font(*classes[className]->invokeMethod<jobject>(this->object, "getFont_NoClientCode", "()Ljava/awt/Font;")); }
Point Component::getLocationOnScreen_NoTreeLock() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocationOnScreen_NoTreeLock", "()Ljava/awt/Point;")); }
Point Component::location_NoClientCode() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "location_NoClientCode", "()Ljava/awt/Point;")); }
void Component::reshapeNativePeer(int arg0, int arg1, int arg2, int arg3, int arg4) { (classes[className]->invokeMethod<void>(this->object, "reshapeNativePeer", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }
void Component::notifyNewBounds(bool arg0, bool arg1) { (classes[className]->invokeMethod<void>(this->object, "notifyNewBounds", "(ZZ)V", arg0, arg1)); }
void Component::repaintParentIfNeeded(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "repaintParentIfNeeded", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Component::revalidateSynchronously() { (classes[className]->invokeMethod<void>(this->object, "revalidateSynchronously", "()V")); }
Graphics Component::getGraphics_NoClientCode() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "getGraphics_NoClientCode", "()Ljava/awt/Graphics;")); }
Cursor Component::getCursor_NoClientCode() { return Cursor(*classes[className]->invokeMethod<jobject>(this->object, "getCursor_NoClientCode", "()Ljava/awt/Cursor;")); }
VolatileImage Component::createVolatileImage(int arg0, int arg1) { return VolatileImage(*classes[className]->invokeMethod<jobject>(this->object, "createVolatileImage", "(II)Ljava/awt/image/VolatileImage;", arg0, arg1)); }
VolatileImage Component::createVolatileImage(int arg0, int arg1, ImageCapabilities arg2) { return VolatileImage(*classes[className]->invokeMethod<jobject>(this->object, "createVolatileImage", "(IILjava/awt/ImageCapabilities;)Ljava/awt/image/VolatileImage;", arg0, arg1, arg2)); }
bool Component::prepareImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "prepareImage", "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z", arg0, arg1, arg2, arg3)); }
bool Component::prepareImage(Image arg0, ImageObserver arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "prepareImage", "(Ljava/awt/Image;Ljava/awt/image/ImageObserver;)Z", arg0, arg1)); }
int Component::checkImage(Image arg0, ImageObserver arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "checkImage", "(Ljava/awt/Image;Ljava/awt/image/ImageObserver;)I", arg0, arg1)); }
int Component::checkImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return int(*classes[className]->invokeMethod<int>(this->object, "checkImage", "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)I", arg0, arg1, arg2, arg3)); }
Image Component::getBackBuffer() { return Image(*classes[className]->invokeMethod<jobject>(this->object, "getBackBuffer", "()Ljava/awt/Image;")); }
bool Component::eventTypeEnabled(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "eventTypeEnabled", "(I)Z", arg0)); }
void Component::processKeyEvent(KeyEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava/awt/event/KeyEvent;)V", arg0)); }
bool Component::areInputMethodsEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "areInputMethodsEnabled", "()Z")); }
void Component::autoProcessMouseWheel(MouseWheelEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "autoProcessMouseWheel", "(Ljava/awt/event/MouseWheelEvent;)V", arg0)); }
bool Component::isCoalesceEventsOverriden(Class arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isCoalesceEventsOverriden", "(Ljava/lang/Class;)Z", arg0)); }
AWTEvent Component::coalesceEvents(AWTEvent arg0, AWTEvent arg1) { return AWTEvent(*classes[className]->invokeMethod<jobject>(this->object, "coalesceEvents", "(Ljava/awt/AWTEvent;Ljava/awt/AWTEvent;)Ljava/awt/AWTEvent;", arg0, arg1)); }
void Component::processFocusEvent(FocusEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processFocusEvent", "(Ljava/awt/event/FocusEvent;)V", arg0)); }
void Component::processMouseEvent(MouseEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava/awt/event/MouseEvent;)V", arg0)); }
void Component::processMouseMotionEvent(MouseEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processMouseMotionEvent", "(Ljava/awt/event/MouseEvent;)V", arg0)); }
void Component::processMouseWheelEvent(MouseWheelEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processMouseWheelEvent", "(Ljava/awt/event/MouseWheelEvent;)V", arg0)); }
void Component::processComponentEvent(ComponentEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processComponentEvent", "(Ljava/awt/event/ComponentEvent;)V", arg0)); }
void Component::processInputMethodEvent(InputMethodEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processInputMethodEvent", "(Ljava/awt/event/InputMethodEvent;)V", arg0)); }
void Component::processHierarchyEvent(HierarchyEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processHierarchyEvent", "(Ljava/awt/event/HierarchyEvent;)V", arg0)); }
void Component::processHierarchyBoundsEvent(HierarchyEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processHierarchyBoundsEvent", "(Ljava/awt/event/HierarchyEvent;)V", arg0)); }
bool Component::mouseEnter(Event arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mouseEnter", "(Ljava/awt/Event;II)Z", arg0, arg1, arg2)); }
bool Component::mouseExit(Event arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mouseExit", "(Ljava/awt/Event;II)Z", arg0, arg1, arg2)); }
bool Component::mouseMove(Event arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mouseMove", "(Ljava/awt/Event;II)Z", arg0, arg1, arg2)); }
bool Component::mouseDown(Event arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mouseDown", "(Ljava/awt/Event;II)Z", arg0, arg1, arg2)); }
bool Component::mouseDrag(Event arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mouseDrag", "(Ljava/awt/Event;II)Z", arg0, arg1, arg2)); }
bool Component::mouseUp(Event arg0, int arg1, int arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "mouseUp", "(Ljava/awt/Event;II)Z", arg0, arg1, arg2)); }
bool Component::keyDown(Event arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "keyDown", "(Ljava/awt/Event;I)Z", arg0, arg1)); }
bool Component::keyUp(Event arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "keyUp", "(Ljava/awt/Event;I)Z", arg0, arg1)); }
bool Component::gotFocus(Event arg0, Object arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "gotFocus", "(Ljava/awt/Event;Ljava/lang/Object;)Z", arg0, arg1)); }
bool Component::lostFocus(Event arg0, Object arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "lostFocus", "(Ljava/awt/Event;Ljava/lang/Object;)Z", arg0, arg1)); }
bool Component::isFocusTraversable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFocusTraversable", "()Z")); }
bool Component::requestFocusHelper(bool arg0, bool arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocusHelper", "(ZZ)Z", arg0, arg1)); }
bool Component::requestFocusHelper(bool arg0, bool arg1, FocusEvent_Cause arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocusHelper", "(ZZLjava/awt/event/FocusEvent$Cause;)Z", arg0, arg1, arg2)); }
bool Component::isRequestFocusAccepted(bool arg0, bool arg1, FocusEvent_Cause arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRequestFocusAccepted", "(ZZLjava/awt/event/FocusEvent$Cause;)Z", arg0, arg1, arg2)); }
void Component::nextFocus() { (classes[className]->invokeMethod<void>(this->object, "nextFocus", "()V")); }
Component Component::getNextFocusCandidate() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getNextFocusCandidate", "()Ljava/awt/Component;")); }
bool Component::requestFocusInWindow() { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocusInWindow", "()Z")); }
bool Component::requestFocusInWindow(FocusEvent_Cause arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocusInWindow", "(Ljava/awt/event/FocusEvent$Cause;)Z", arg0)); }
bool Component::requestFocusInWindow(bool arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocusInWindow", "(Z)Z", arg0)); }
bool Component::requestFocusInWindow(bool arg0, FocusEvent_Cause arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "requestFocusInWindow", "(ZLjava/awt/event/FocusEvent$Cause;)Z", arg0, arg1)); }
bool Component::hasFocus() { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasFocus", "()Z")); }
void Component::removePropertyChangeListener(PropertyChangeListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", arg0)); }
void Component::removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
void Component::doSwingSerialization() { (classes[className]->invokeMethod<void>(this->object, "doSwingSerialization", "()V")); }
void Component::addComponentListener(ComponentListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addComponentListener", "(Ljava/awt/event/ComponentListener;)V", arg0)); }
void Component::addFocusListener(FocusListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addFocusListener", "(Ljava/awt/event/FocusListener;)V", arg0)); }
void Component::addKeyListener(KeyListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addKeyListener", "(Ljava/awt/event/KeyListener;)V", arg0)); }
void Component::addMouseListener(MouseListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addMouseListener", "(Ljava/awt/event/MouseListener;)V", arg0)); }
void Component::addMouseMotionListener(MouseMotionListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addMouseMotionListener", "(Ljava/awt/event/MouseMotionListener;)V", arg0)); }
void Component::addInputMethodListener(InputMethodListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addInputMethodListener", "(Ljava/awt/event/InputMethodListener;)V", arg0)); }
void Component::addHierarchyListener(HierarchyListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addHierarchyListener", "(Ljava/awt/event/HierarchyListener;)V", arg0)); }
void Component::addHierarchyBoundsListener(HierarchyBoundsListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addHierarchyBoundsListener", "(Ljava/awt/event/HierarchyBoundsListener;)V", arg0)); }
void Component::addMouseWheelListener(MouseWheelListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addMouseWheelListener", "(Ljava/awt/event/MouseWheelListener;)V", arg0)); }
void Component::setComponentOrientation(ComponentOrientation arg0) { (classes[className]->invokeMethod<void>(this->object, "setComponentOrientation", "(Ljava/awt/ComponentOrientation;)V", arg0)); }
int Component::getAccessibleIndexInParent() { return int(*classes[className]->invokeMethod<int>(this->object, "getAccessibleIndexInParent", "()I")); }
bool Component::areBoundsValid() { return bool(*classes[className]->invokeMethod<bool>(this->object, "areBoundsValid", "()Z")); }
Region Component::getAppliedShape() { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getAppliedShape", "()Lsun/java2d/pipe/Region;")); }
int Component::getSiblingIndexAbove() { return int(*classes[className]->invokeMethod<int>(this->object, "getSiblingIndexAbove", "()I")); }
Region Component::calculateCurrentShape() { return Region(*classes[className]->invokeMethod<jobject>(this->object, "calculateCurrentShape", "()Lsun/java2d/pipe/Region;")); }
int Component::getSiblingIndexBelow() { return int(*classes[className]->invokeMethod<int>(this->object, "getSiblingIndexBelow", "()I")); }
void Component::applyCurrentShapeBelowMe() { (classes[className]->invokeMethod<void>(this->object, "applyCurrentShapeBelowMe", "()V")); }
ComponentPeer Component::getHWPeerAboveMe() { return ComponentPeer(*classes[className]->invokeMethod<jobject>(this->object, "getHWPeerAboveMe", "()Ljava/awt/peer/ComponentPeer;")); }
AccessControlContext Component::getAccessControlContext() { return AccessControlContext(*classes[className]->invokeMethod<jobject>(this->object, "getAccessControlContext", "()Ljava/security/AccessControlContext;")); }
void Component::setDropTarget(DropTarget arg0) { (classes[className]->invokeMethod<void>(this->object, "setDropTarget", "(Ljava/awt/dnd/DropTarget;)V", arg0)); }
DropTarget Component::getDropTarget() { return DropTarget(*classes[className]->invokeMethod<jobject>(this->object, "getDropTarget", "()Ljava/awt/dnd/DropTarget;")); }
bool Component::isDoubleBuffered() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDoubleBuffered", "()Z")); }
void Component::enableInputMethods(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "enableInputMethods", "(Z)V", arg0)); }
bool Component::isForegroundSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isForegroundSet", "()Z")); }
bool Component::isBackgroundSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isBackgroundSet", "()Z")); }
bool Component::isFontSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFontSet", "()Z")); }
void Component::setPreferredSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setPreferredSize", "(Ljava/awt/Dimension;)V", arg0)); }
void Component::setMaximumSize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "setMaximumSize", "(Ljava/awt/Dimension;)V", arg0)); }
int Component::getBaseline(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "getBaseline", "(II)I", arg0, arg1)); }
Component_BaselineResizeBehavior Component::getBaselineResizeBehavior() { return Component_BaselineResizeBehavior(*classes[className]->invokeMethod<jobject>(this->object, "getBaselineResizeBehavior", "()Ljava/awt/Component$BaselineResizeBehavior;")); }
void Component::revalidate() { (classes[className]->invokeMethod<void>(this->object, "revalidate", "()V")); }
Cursor Component::getCursor() { return Cursor(*classes[className]->invokeMethod<jobject>(this->object, "getCursor", "()Ljava/awt/Cursor;")); }
bool Component::isCursorSet() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCursorSet", "()Z")); }
void Component::paintAll(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "paintAll", "(Ljava/awt/Graphics;)V", arg0)); }
void Component::printAll(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "printAll", "(Ljava/awt/Graphics;)V", arg0)); }
Insets Component::getInsets_NoClientCode() { return Insets(*classes[className]->invokeMethod<jobject>(this->object, "getInsets_NoClientCode", "()Ljava/awt/Insets;")); }
void Component::setIgnoreRepaint(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setIgnoreRepaint", "(Z)V", arg0)); }
bool Component::getIgnoreRepaint() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getIgnoreRepaint", "()Z")); }
void Component::removeComponentListener(ComponentListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeComponentListener", "(Ljava/awt/event/ComponentListener;)V", arg0)); }
void Component::removeFocusListener(FocusListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeFocusListener", "(Ljava/awt/event/FocusListener;)V", arg0)); }
void Component::removeHierarchyListener(HierarchyListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeHierarchyListener", "(Ljava/awt/event/HierarchyListener;)V", arg0)); }
void Component::removeHierarchyBoundsListener(HierarchyBoundsListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeHierarchyBoundsListener", "(Ljava/awt/event/HierarchyBoundsListener;)V", arg0)); }
void Component::removeKeyListener(KeyListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeKeyListener", "(Ljava/awt/event/KeyListener;)V", arg0)); }
void Component::removeMouseListener(MouseListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeMouseListener", "(Ljava/awt/event/MouseListener;)V", arg0)); }
void Component::removeMouseMotionListener(MouseMotionListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeMouseMotionListener", "(Ljava/awt/event/MouseMotionListener;)V", arg0)); }
void Component::removeMouseWheelListener(MouseWheelListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeMouseWheelListener", "(Ljava/awt/event/MouseWheelListener;)V", arg0)); }
void Component::removeInputMethodListener(InputMethodListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeInputMethodListener", "(Ljava/awt/event/InputMethodListener;)V", arg0)); }
InputMethodRequests Component::getInputMethodRequests() { return InputMethodRequests(*classes[className]->invokeMethod<jobject>(this->object, "getInputMethodRequests", "()Ljava/awt/im/InputMethodRequests;")); }
void Component::disableEvents(long arg0) { (classes[className]->invokeMethod<void>(this->object, "disableEvents", "(J)V", arg0)); }
bool Component::isCoalescingEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCoalescingEnabled", "()Z")); }
void Component::setFocusable(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setFocusable", "(Z)V", arg0)); }
void Component::setFocusTraversalKeysEnabled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setFocusTraversalKeysEnabled", "(Z)V", arg0)); }
bool Component::getFocusTraversalKeysEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getFocusTraversalKeysEnabled", "()Z")); }
void Component::setRequestFocusController(RequestFocusController arg0) { (classes[className]->invokeStaticMethod<void>("setRequestFocusController", "(Lsun/awt/RequestFocusController;)V", arg0)); }
void Component::transferFocusUpCycle() { (classes[className]->invokeMethod<void>(this->object, "transferFocusUpCycle", "()V")); }
bool Component::isAutoFocusTransferOnDisposal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAutoFocusTransferOnDisposal", "()Z")); }
ComponentOrientation Component::getComponentOrientation() { return ComponentOrientation(*classes[className]->invokeMethod<jobject>(this->object, "getComponentOrientation", "()Ljava/awt/ComponentOrientation;")); }
AccessibleStateSet Component::getAccessibleStateSet() { return AccessibleStateSet(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleStateSet", "()Ljavax/accessibility/AccessibleStateSet;")); }
void Component::setMixingCutoutShape(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "setMixingCutoutShape", "(Ljava/awt/Shape;)V", arg0)); }
GraphicsConfiguration Component::getGraphicsConfiguration() { return GraphicsConfiguration(*classes[className]->invokeMethod<jobject>(this->object, "getGraphicsConfiguration", "()Ljava/awt/GraphicsConfiguration;")); }
void Component::setGraphicsConfiguration(GraphicsConfiguration arg0) { (classes[className]->invokeMethod<void>(this->object, "setGraphicsConfiguration", "(Ljava/awt/GraphicsConfiguration;)V", arg0)); }
void Component::setVisible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }
void Component::layout() { (classes[className]->invokeMethod<void>(this->object, "layout", "()V")); }
Color Component::getForeground() { return Color(*classes[className]->invokeMethod<jobject>(this->object, "getForeground", "()Ljava/awt/Color;")); }
void Component::setForeground(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setForeground", "(Ljava/awt/Color;)V", arg0)); }
void Component::move(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "move", "(II)V", arg0, arg1)); }
Locale Component::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
void Component::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
bool Component::isInstanceOf(Object arg0, String arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("isInstanceOf", "(Ljava/lang/Object;Ljava/lang/String;)Z", arg0, arg1)); }
bool Component::isEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnabled", "()Z")); }
ColorModel Component::getColorModel() { return ColorModel(*classes[className]->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava/awt/image/ColorModel;")); }
Graphics Component::getGraphics() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava/awt/Graphics;")); }
Image Component::createImage(ImageProducer arg0) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "createImage", "(Ljava/awt/image/ImageProducer;)Ljava/awt/Image;", arg0)); }
Image Component::createImage(int arg0, int arg1) { return Image(*classes[className]->invokeMethod<jobject>(this->object, "createImage", "(II)Ljava/awt/Image;", arg0, arg1)); }
void Component::setBounds(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "setBounds", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Component::setBounds(Rectangle arg0) { (classes[className]->invokeMethod<void>(this->object, "setBounds", "(Ljava/awt/Rectangle;)V", arg0)); }
void Component::reshape(int arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "reshape", "(IIII)V", arg0, arg1, arg2, arg3)); }
void Component::setLocation(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(Ljava/awt/Point;)V", arg0)); }
void Component::setLocation(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }
bool Component::inside(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "inside", "(II)Z", arg0, arg1)); }
void Component::setBackground(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setBackground", "(Ljava/awt/Color;)V", arg0)); }
Color Component::getBackground() { return Color(*classes[className]->invokeMethod<jobject>(this->object, "getBackground", "()Ljava/awt/Color;")); }
FontMetrics Component::getFontMetrics(Font arg0) { return FontMetrics(*classes[className]->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", arg0)); }
void Component::setFont(Font arg0) { (classes[className]->invokeMethod<void>(this->object, "setFont", "(Ljava/awt/Font;)V", arg0)); }
String Component::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
void Component::add(PopupMenu arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/awt/PopupMenu;)V", arg0)); }
String Component::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void Component::update(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "update", "(Ljava/awt/Graphics;)V", arg0)); }
Dimension Component::size() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "size", "()Ljava/awt/Dimension;")); }
bool Component::contains(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(II)Z", arg0, arg1)); }
bool Component::contains(Point arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/awt/Point;)Z", arg0)); }
void Component::list(PrintWriter arg0) { (classes[className]->invokeMethod<void>(this->object, "list", "(Ljava/io/PrintWriter;)V", arg0)); }
void Component::list() { (classes[className]->invokeMethod<void>(this->object, "list", "()V")); }
void Component::list(PrintWriter arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "list", "(Ljava/io/PrintWriter;I)V", arg0, arg1)); }
void Component::list(PrintStream arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "list", "(Ljava/io/PrintStream;I)V", arg0, arg1)); }
void Component::list(PrintStream arg0) { (classes[className]->invokeMethod<void>(this->object, "list", "(Ljava/io/PrintStream;)V", arg0)); }
Rectangle Component::getBounds(Rectangle arg0) { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getBounds", "(Ljava/awt/Rectangle;)Ljava/awt/Rectangle;", arg0)); }
Rectangle Component::getBounds() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getBounds", "()Ljava/awt/Rectangle;")); }
void Component::validate() { (classes[className]->invokeMethod<void>(this->object, "validate", "()V")); }
Rectangle Component::bounds() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "bounds", "()Ljava/awt/Rectangle;")); }
Point Component::getLocation(Point arg0) { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocation", "(Ljava/awt/Point;)Ljava/awt/Point;", arg0)); }
Point Component::getLocation() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocation", "()Ljava/awt/Point;")); }
Container Component::getParent() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/awt/Container;")); }
void Component::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Component::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
bool Component::action(Event arg0, Object arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "action", "(Ljava/awt/Event;Ljava/lang/Object;)Z", arg0, arg1)); }
void Component::setName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setName", "(Ljava/lang/String;)V", arg0)); }
void Component::print(Graphics arg0) { (classes[className]->invokeMethod<void>(this->object, "print", "(Ljava/awt/Graphics;)V", arg0)); }
Point Component::location() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "location", "()Ljava/awt/Point;")); }
Dimension Component::getSize() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getSize", "()Ljava/awt/Dimension;")); }
Dimension Component::getSize(Dimension arg0) { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getSize", "(Ljava/awt/Dimension;)Ljava/awt/Dimension;", arg0)); }
String Component::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }
bool Component::isOpaque() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpaque", "()Z")); }
void Component::resize(Dimension arg0) { (classes[className]->invokeMethod<void>(this->object, "resize", "(Ljava/awt/Dimension;)V", arg0)); }
void Component::resize(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "resize", "(II)V", arg0, arg1)); }


Cursor Cursor::getPredefinedCursor(int arg0) { return Cursor(*classes[className]->invokeStaticMethod<jobject>("getPredefinedCursor", "(I)Ljava/awt/Cursor;", arg0)); }
void Cursor::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
void Cursor::loadSystemCustomCursorProperties() { (classes[className]->invokeStaticMethod<void>("loadSystemCustomCursorProperties", "()V")); }
void Cursor::setPData(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setPData", "(J)V", arg0)); }
Cursor Cursor::getSystemCustomCursor(String arg0) { return Cursor(*classes[className]->invokeStaticMethod<jobject>("getSystemCustomCursor", "(Ljava/lang/String;)Ljava/awt/Cursor;", arg0)); }
Cursor Cursor::getDefaultCursor() { return Cursor(*classes[className]->invokeStaticMethod<jobject>("getDefaultCursor", "()Ljava/awt/Cursor;")); }
void Cursor::finalizeImpl(long arg0) { (classes[className]->invokeStaticMethod<void>("finalizeImpl", "(J)V", arg0)); }
String Cursor::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
String Cursor::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Cursor::getType() { return int(*classes[className]->invokeMethod<int>(this->object, "getType", "()I")); }

FocusEvent_Cause FocusEvent_Cause::valueOf(String arg0) { return FocusEvent_Cause(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/awt/event/FocusEvent$Cause;", arg0)); }


bool ComponentOrientation::isHorizontal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isHorizontal", "()Z")); }
ComponentOrientation ComponentOrientation::getOrientation(ResourceBundle arg0) { return ComponentOrientation(*classes[className]->invokeStaticMethod<jobject>("getOrientation", "(Ljava/util/ResourceBundle;)Ljava/awt/ComponentOrientation;", arg0)); }
ComponentOrientation ComponentOrientation::getOrientation(Locale arg0) { return ComponentOrientation(*classes[className]->invokeStaticMethod<jobject>("getOrientation", "(Ljava/util/Locale;)Ljava/awt/ComponentOrientation;", arg0)); }
bool ComponentOrientation::isLeftToRight() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLeftToRight", "()Z")); }

BufferCapabilities_FlipContents BufferCapabilities::getFlipContents() { return BufferCapabilities_FlipContents(*classes[className]->invokeMethod<jobject>(this->object, "getFlipContents", "()Ljava/awt/BufferCapabilities$FlipContents;")); }
ImageCapabilities BufferCapabilities::getFrontBufferCapabilities() { return ImageCapabilities(*classes[className]->invokeMethod<jobject>(this->object, "getFrontBufferCapabilities", "()Ljava/awt/ImageCapabilities;")); }
ImageCapabilities BufferCapabilities::getBackBufferCapabilities() { return ImageCapabilities(*classes[className]->invokeMethod<jobject>(this->object, "getBackBufferCapabilities", "()Ljava/awt/ImageCapabilities;")); }
bool BufferCapabilities::isPageFlipping() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPageFlipping", "()Z")); }
bool BufferCapabilities::isFullScreenRequired() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFullScreenRequired", "()Z")); }
bool BufferCapabilities::isMultiBufferAvailable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isMultiBufferAvailable", "()Z")); }
Object BufferCapabilities::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }


String AttributeValue::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int AttributeValue::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

BufferCapabilities BufferStrategy::getCapabilities() { return BufferCapabilities(*classes[className]->invokeMethod<jobject>(this->object, "getCapabilities", "()Ljava/awt/BufferCapabilities;")); }
void BufferStrategy::show() { (classes[className]->invokeMethod<void>(this->object, "show", "()V")); }
bool BufferStrategy::contentsLost() { return bool(*classes[className]->invokeMethod<bool>(this->object, "contentsLost", "()Z")); }
void BufferStrategy::dispose() { (classes[className]->invokeMethod<void>(this->object, "dispose", "()V")); }
Graphics BufferStrategy::getDrawGraphics() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "getDrawGraphics", "()Ljava/awt/Graphics;")); }
bool BufferStrategy::contentsRestored() { return bool(*classes[className]->invokeMethod<bool>(this->object, "contentsRestored", "()Z")); }

void InputContext::removeNotify(Component arg0) { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "(Ljava/awt/Component;)V", arg0)); }
void InputContext::dispatchEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
void InputContext::endComposition() { (classes[className]->invokeMethod<void>(this->object, "endComposition", "()V")); }
Locale InputContext::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
void InputContext::dispose() { (classes[className]->invokeMethod<void>(this->object, "dispose", "()V")); }
bool InputContext::selectInputMethod(Locale arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "selectInputMethod", "(Ljava/util/Locale;)Z", arg0)); }
void InputContext::setCharacterSubsets(Character_Subset_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setCharacterSubsets", "([Ljava/lang/Character$Subset;)V", arg0)); }
void InputContext::setCompositionEnabled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setCompositionEnabled", "(Z)V", arg0)); }
bool InputContext::isCompositionEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCompositionEnabled", "()Z")); }
void InputContext::reconvert() { (classes[className]->invokeMethod<void>(this->object, "reconvert", "()V")); }
Object InputContext::getInputMethodControlObject() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getInputMethodControlObject", "()Ljava/lang/Object;")); }
InputContext InputContext::getInstance() { return InputContext(*classes[className]->invokeStaticMethod<jobject>("getInstance", "()Ljava/awt/im/InputContext;")); }




Component FocusTraversalPolicy::getInitialComponent(Window arg0) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getInitialComponent", "(Ljava/awt/Window;)Ljava/awt/Component;", arg0)); }
Component FocusTraversalPolicy::getDefaultComponent(Container arg0) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultComponent", "(Ljava/awt/Container;)Ljava/awt/Component;", arg0)); }
Component FocusTraversalPolicy::getComponentAfter(Container arg0, Component arg1) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponentAfter", "(Ljava/awt/Container;Ljava/awt/Component;)Ljava/awt/Component;", arg0, arg1)); }
Component FocusTraversalPolicy::getComponentBefore(Container arg0, Component arg1) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponentBefore", "(Ljava/awt/Container;Ljava/awt/Component;)Ljava/awt/Component;", arg0, arg1)); }
Component FocusTraversalPolicy::getFirstComponent(Container arg0) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getFirstComponent", "(Ljava/awt/Container;)Ljava/awt/Component;", arg0)); }
Component FocusTraversalPolicy::getLastComponent(Container arg0) { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getLastComponent", "(Ljava/awt/Container;)Ljava/awt/Component;", arg0)); }


Container ContainerEvent::getContainer() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getContainer", "()Ljava/awt/Container;")); }
Component ContainerEvent::getChild() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getChild", "()Ljava/awt/Component;")); }
String ContainerEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }




int Region::getWidth() { return int(*classes[className]->invokeMethod<int>(this->object, "getWidth", "()I")); }
int Region::getHeight() { return int(*classes[className]->invokeMethod<int>(this->object, "getHeight", "()I")); }
Region Region::getUnion(Region arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getUnion", "(Lsun/java2d/pipe/Region;)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getIntersection(Region arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getIntersection", "(Lsun/java2d/pipe/Region;)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getIntersection(Rectangle arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getIntersection", "(Ljava/awt/Rectangle;)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getIntersection(Rectangle2D arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getIntersection", "(Ljava/awt/geom/Rectangle2D;)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getTranslatedRegion(int arg0, int arg1) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getTranslatedRegion", "(II)Lsun/java2d/pipe/Region;", arg0, arg1)); }
Region Region::getInstanceXYWH(int arg0, int arg1, int arg2, int arg3) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstanceXYWH", "(IIII)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
Region Region::getDifference(Region arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getDifference", "(Lsun/java2d/pipe/Region;)Lsun/java2d/pipe/Region;", arg0)); }
void Region::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
int Region::clipAdd(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("clipAdd", "(II)I", arg0, arg1)); }
int Region::dimAdd(int arg0, int arg1) { return int(*classes[className]->invokeStaticMethod<int>("dimAdd", "(II)I", arg0, arg1)); }
Region Region::getInstanceXYXY(int arg0, int arg1, int arg2, int arg3) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstanceXYXY", "(IIII)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
void Region::appendSpans(SpanIterator arg0) { (classes[className]->invokeMethod<void>(this->object, "appendSpans", "(Lsun/java2d/pipe/SpanIterator;)V", arg0)); }
void Region::appendSpan(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "appendSpan", "([I)V", arg0)); }
void Region::endRow(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "endRow", "([I)V", arg0)); }
void Region::calcBBox() { (classes[className]->invokeMethod<void>(this->object, "calcBBox", "()V")); }
int Region::clipScale(int arg0, double arg1) { return int(*classes[className]->invokeStaticMethod<int>("clipScale", "(ID)I", arg0, arg1)); }
Region Region::getSafeTranslatedRegion(int arg0, int arg1) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getSafeTranslatedRegion", "(II)Lsun/java2d/pipe/Region;", arg0, arg1)); }
Region Region::getIntersectionXYWH(int arg0, int arg1, int arg2, int arg3) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getIntersectionXYWH", "(IIII)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
Region Region::getIntersectionXYXY(double arg0, double arg1, double arg2, double arg3) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getIntersectionXYXY", "(DDDD)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
Region Region::getIntersectionXYXY(int arg0, int arg1, int arg2, int arg3) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getIntersectionXYXY", "(IIII)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
int Region::clipRound(double arg0) { return int(*classes[className]->invokeStaticMethod<int>("clipRound", "(D)I", arg0)); }
bool Region::isInsideXYXY(int arg0, int arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInsideXYXY", "(IIII)Z", arg0, arg1, arg2, arg3)); }
SpanIterator Region::getSpanIterator(arr_I arg0) { return SpanIterator(*classes[className]->invokeMethod<jobject>(this->object, "getSpanIterator", "([I)Lsun/java2d/pipe/SpanIterator;", arg0)); }
SpanIterator Region::getSpanIterator() { return SpanIterator(*classes[className]->invokeMethod<jobject>(this->object, "getSpanIterator", "()Lsun/java2d/pipe/SpanIterator;")); }
bool Region::isInsideQuickCheck(Region arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInsideQuickCheck", "(Lsun/java2d/pipe/Region;)Z", arg0)); }
void Region::filterSpans(Region arg0, Region arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "filterSpans", "(Lsun/java2d/pipe/Region;Lsun/java2d/pipe/Region;I)V", arg0, arg1, arg2)); }
bool Region::intersectsQuickCheck(Region arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsQuickCheck", "(Lsun/java2d/pipe/Region;)Z", arg0)); }
Region Region::getBoundsIntersectionXYWH(int arg0, int arg1, int arg2, int arg3) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getBoundsIntersectionXYWH", "(IIII)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
Region Region::getBoundsIntersectionXYXY(int arg0, int arg1, int arg2, int arg3) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getBoundsIntersectionXYXY", "(IIII)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
bool Region::encompasses(Region arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "encompasses", "(Lsun/java2d/pipe/Region;)Z", arg0)); }
void Region::needSpace(int arg0) { (classes[className]->invokeMethod<void>(this->object, "needSpace", "(I)V", arg0)); }
bool Region::encompassesXYXY(int arg0, int arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "encompassesXYXY", "(IIII)Z", arg0, arg1, arg2, arg3)); }
Region Region::getScaledRegion(double arg0, double arg1) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getScaledRegion", "(DD)Lsun/java2d/pipe/Region;", arg0, arg1)); }
Region Region::getExclusiveOr(Region arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getExclusiveOr", "(Lsun/java2d/pipe/Region;)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getBoundsIntersection(Rectangle arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getBoundsIntersection", "(Ljava/awt/Rectangle;)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getBoundsIntersection(Region arg0) { return Region(*classes[className]->invokeMethod<jobject>(this->object, "getBoundsIntersection", "(Lsun/java2d/pipe/Region;)Lsun/java2d/pipe/Region;", arg0)); }
int Region::getLoX() { return int(*classes[className]->invokeMethod<int>(this->object, "getLoX", "()I")); }
int Region::getLoY() { return int(*classes[className]->invokeMethod<int>(this->object, "getLoY", "()I")); }
int Region::getHiX() { return int(*classes[className]->invokeMethod<int>(this->object, "getHiX", "()I")); }
int Region::getHiY() { return int(*classes[className]->invokeMethod<int>(this->object, "getHiY", "()I")); }
bool Region::isRectangular() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRectangular", "()Z")); }
bool Region::isInsideXYWH(int arg0, int arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isInsideXYWH", "(IIII)Z", arg0, arg1, arg2, arg3)); }
bool Region::intersectsQuickCheckXYXY(int arg0, int arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "intersectsQuickCheckXYXY", "(IIII)Z", arg0, arg1, arg2, arg3)); }
bool Region::encompassesXYWH(int arg0, int arg1, int arg2, int arg3) { return bool(*classes[className]->invokeMethod<bool>(this->object, "encompassesXYWH", "(IIII)Z", arg0, arg1, arg2, arg3)); }
void Region::clipBoxToBounds(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "clipBoxToBounds", "([I)V", arg0)); }
bool Region::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String Region::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int Region::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
bool Region::isEmpty() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEmpty", "()Z")); }
bool Region::contains(int arg0, int arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(II)Z", arg0, arg1)); }
void Region::getBounds(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "getBounds", "([I)V", arg0)); }
SpanIterator Region::filter(SpanIterator arg0) { return SpanIterator(*classes[className]->invokeMethod<jobject>(this->object, "filter", "(Lsun/java2d/pipe/SpanIterator;)Lsun/java2d/pipe/SpanIterator;", arg0)); }
Region Region::getInstance(arr_I arg0, SpanIterator arg1) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstance", "([ILsun/java2d/pipe/SpanIterator;)Lsun/java2d/pipe/Region;", arg0, arg1)); }
Region Region::getInstance(arr_I arg0) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstance", "([I)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getInstance(Region arg0, Shape arg1, AffineTransform arg2) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Lsun/java2d/pipe/Region;Ljava/awt/Shape;Ljava/awt/geom/AffineTransform;)Lsun/java2d/pipe/Region;", arg0, arg1, arg2)); }
Region Region::getInstance(Shape arg0, AffineTransform arg1) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/awt/Shape;Ljava/awt/geom/AffineTransform;)Lsun/java2d/pipe/Region;", arg0, arg1)); }
Region Region::getInstance(int arg0, int arg1, int arg2, int arg3, arr_I arg4) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(IIII[I)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3, arg4)); }
Region Region::getInstance(Rectangle arg0) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/awt/Rectangle;)Lsun/java2d/pipe/Region;", arg0)); }
Region Region::getInstance(Region arg0, bool arg1, Shape arg2, AffineTransform arg3) { return Region(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Lsun/java2d/pipe/Region;ZLjava/awt/Shape;Ljava/awt/geom/AffineTransform;)Lsun/java2d/pipe/Region;", arg0, arg1, arg2, arg3)); }
RegionIterator Region::getIterator() { return RegionIterator(*classes[className]->invokeMethod<jobject>(this->object, "getIterator", "()Lsun/java2d/pipe/RegionIterator;")); }


RegionIterator RegionIterator::createCopy() { return RegionIterator(*classes[className]->invokeMethod<jobject>(this->object, "createCopy", "()Lsun/java2d/pipe/RegionIterator;")); }
void RegionIterator::copyStateFrom(RegionIterator arg0) { (classes[className]->invokeMethod<void>(this->object, "copyStateFrom", "(Lsun/java2d/pipe/RegionIterator;)V", arg0)); }
bool RegionIterator::nextYRange(arr_I arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "nextYRange", "([I)Z", arg0)); }
bool RegionIterator::nextXBand(arr_I arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "nextXBand", "([I)Z", arg0)); }

void AccessibleContext::firePropertyChange(String arg0, Object arg1, Object arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", arg0, arg1, arg2)); }
void AccessibleContext::addPropertyChangeListener(PropertyChangeListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", arg0)); }
int AccessibleContext::getAccessibleChildrenCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getAccessibleChildrenCount", "()I")); }
Accessible AccessibleContext::getAccessibleChild(int arg0) { return Accessible(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleChild", "(I)Ljavax/accessibility/Accessible;", arg0)); }
AccessibleComponent AccessibleContext::getAccessibleComponent() { return AccessibleComponent(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleComponent", "()Ljavax/accessibility/AccessibleComponent;")); }
void AccessibleContext::removePropertyChangeListener(PropertyChangeListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", arg0)); }
Accessible AccessibleContext::getAccessibleParent() { return Accessible(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleParent", "()Ljavax/accessibility/Accessible;")); }
AccessibleSelection AccessibleContext::getAccessibleSelection() { return AccessibleSelection(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleSelection", "()Ljavax/accessibility/AccessibleSelection;")); }
int AccessibleContext::getAccessibleIndexInParent() { return int(*classes[className]->invokeMethod<int>(this->object, "getAccessibleIndexInParent", "()I")); }
AccessibleStateSet AccessibleContext::getAccessibleStateSet() { return AccessibleStateSet(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleStateSet", "()Ljavax/accessibility/AccessibleStateSet;")); }
Locale AccessibleContext::getLocale() { return Locale(*classes[className]->invokeMethod<jobject>(this->object, "getLocale", "()Ljava/util/Locale;")); }
String AccessibleContext::getAccessibleName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleName", "()Ljava/lang/String;")); }
void AccessibleContext::setAccessibleName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccessibleName", "(Ljava/lang/String;)V", arg0)); }
String AccessibleContext::getAccessibleDescription() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleDescription", "()Ljava/lang/String;")); }
void AccessibleContext::setAccessibleDescription(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccessibleDescription", "(Ljava/lang/String;)V", arg0)); }
AccessibleRole AccessibleContext::getAccessibleRole() { return AccessibleRole(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleRole", "()Ljavax/accessibility/AccessibleRole;")); }
void AccessibleContext::setAccessibleParent(Accessible arg0) { (classes[className]->invokeMethod<void>(this->object, "setAccessibleParent", "(Ljavax/accessibility/Accessible;)V", arg0)); }
AccessibleAction AccessibleContext::getAccessibleAction() { return AccessibleAction(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleAction", "()Ljavax/accessibility/AccessibleAction;")); }
AccessibleText AccessibleContext::getAccessibleText() { return AccessibleText(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleText", "()Ljavax/accessibility/AccessibleText;")); }
AccessibleEditableText AccessibleContext::getAccessibleEditableText() { return AccessibleEditableText(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleEditableText", "()Ljavax/accessibility/AccessibleEditableText;")); }
AccessibleValue AccessibleContext::getAccessibleValue() { return AccessibleValue(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleValue", "()Ljavax/accessibility/AccessibleValue;")); }
AccessibleRelationSet AccessibleContext::getAccessibleRelationSet() { return AccessibleRelationSet(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleRelationSet", "()Ljavax/accessibility/AccessibleRelationSet;")); }
AccessibleTable AccessibleContext::getAccessibleTable() { return AccessibleTable(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleTable", "()Ljavax/accessibility/AccessibleTable;")); }



bool AccessibleStateSet::add(AccessibleState arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "add", "(Ljavax/accessibility/AccessibleState;)Z", arg0)); }
bool AccessibleStateSet::remove(AccessibleState arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "remove", "(Ljavax/accessibility/AccessibleState;)Z", arg0)); }
String AccessibleStateSet::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void AccessibleStateSet::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
bool AccessibleStateSet::contains(AccessibleState arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljavax/accessibility/AccessibleState;)Z", arg0)); }
void AccessibleStateSet::addAll(AccessibleState_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "addAll", "([Ljavax/accessibility/AccessibleState;)V", arg0)); }


String AccessibleBundle::toDisplayString(Locale arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toDisplayString", "(Ljava/util/Locale;)Ljava/lang/String;", arg0)); }
String AccessibleBundle::toDisplayString(String arg0, Locale arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "toDisplayString", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", arg0, arg1)); }
String AccessibleBundle::toDisplayString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toDisplayString", "()Ljava/lang/String;")); }
String AccessibleBundle::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }







bool AccessibleRelationSet::add(AccessibleRelation arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "add", "(Ljavax/accessibility/AccessibleRelation;)Z", arg0)); }
bool AccessibleRelationSet::remove(AccessibleRelation arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "remove", "(Ljavax/accessibility/AccessibleRelation;)Z", arg0)); }
AccessibleRelation AccessibleRelationSet::get(String arg0) { return AccessibleRelation(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Ljava/lang/String;)Ljavax/accessibility/AccessibleRelation;", arg0)); }
String AccessibleRelationSet::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void AccessibleRelationSet::clear() { (classes[className]->invokeMethod<void>(this->object, "clear", "()V")); }
int AccessibleRelationSet::size() { return int(*classes[className]->invokeMethod<int>(this->object, "size", "()I")); }
bool AccessibleRelationSet::contains(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/lang/String;)Z", arg0)); }
void AccessibleRelationSet::addAll(AccessibleRelation_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "addAll", "([Ljavax/accessibility/AccessibleRelation;)V", arg0)); }

String AccessibleRelation::getKey() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getKey", "()Ljava/lang/String;")); }
void AccessibleRelation::setTarget(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "setTarget", "(Ljava/lang/Object;)V", arg0)); }
void AccessibleRelation::setTarget(Object_interface arg0) { (classes[className]->invokeMethod<void>(this->object, "setTarget", "([Ljava/lang/Object;)V", arg0)); }



int MouseWheelEvent::getScrollType() { return int(*classes[className]->invokeMethod<int>(this->object, "getScrollType", "()I")); }
int MouseWheelEvent::getScrollAmount() { return int(*classes[className]->invokeMethod<int>(this->object, "getScrollAmount", "()I")); }
int MouseWheelEvent::getWheelRotation() { return int(*classes[className]->invokeMethod<int>(this->object, "getWheelRotation", "()I")); }
double MouseWheelEvent::getPreciseWheelRotation() { return double(*classes[className]->invokeMethod<double>(this->object, "getPreciseWheelRotation", "()D")); }
int MouseWheelEvent::getUnitsToScroll() { return int(*classes[className]->invokeMethod<int>(this->object, "getUnitsToScroll", "()I")); }
String MouseWheelEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

int MouseEvent::getX() { return int(*classes[className]->invokeMethod<int>(this->object, "getX", "()I")); }
int MouseEvent::getY() { return int(*classes[className]->invokeMethod<int>(this->object, "getY", "()I")); }
Point MouseEvent::getPoint() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getPoint", "()Ljava/awt/Point;")); }
Point MouseEvent::getLocationOnScreen() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocationOnScreen", "()Ljava/awt/Point;")); }
int MouseEvent::getXOnScreen() { return int(*classes[className]->invokeMethod<int>(this->object, "getXOnScreen", "()I")); }
int MouseEvent::getYOnScreen() { return int(*classes[className]->invokeMethod<int>(this->object, "getYOnScreen", "()I")); }
int MouseEvent::getClickCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getClickCount", "()I")); }
bool MouseEvent::isPopupTrigger() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPopupTrigger", "()Z")); }
void MouseEvent::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
int MouseEvent::getModifiersEx() { return int(*classes[className]->invokeMethod<int>(this->object, "getModifiersEx", "()I")); }
void MouseEvent::setNewModifiers() { (classes[className]->invokeMethod<void>(this->object, "setNewModifiers", "()V")); }
void MouseEvent::setOldModifiers() { (classes[className]->invokeMethod<void>(this->object, "setOldModifiers", "()V")); }
int MouseEvent::getButton() { return int(*classes[className]->invokeMethod<int>(this->object, "getButton", "()I")); }
String MouseEvent::getMouseModifiersText(int arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("getMouseModifiersText", "(I)Ljava/lang/String;", arg0)); }
void MouseEvent::translatePoint(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "translatePoint", "(II)V", arg0, arg1)); }
void MouseEvent::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
String MouseEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

GraphicsDevice PointerInfo::getDevice() { return GraphicsDevice(*classes[className]->invokeMethod<jobject>(this->object, "getDevice", "()Ljava/awt/GraphicsDevice;")); }
Point PointerInfo::getLocation() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocation", "()Ljava/awt/Point;")); }

Component FocusEvent::getOppositeComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getOppositeComponent", "()Ljava/awt/Component;")); }
bool FocusEvent::isTemporary() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTemporary", "()Z")); }
FocusEvent_Cause FocusEvent::getCause() { return FocusEvent_Cause(*classes[className]->invokeMethod<jobject>(this->object, "getCause", "()Ljava/awt/event/FocusEvent$Cause;")); }
String FocusEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }
Object FocusEvent::readResolve() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "readResolve", "()Ljava/lang/Object;")); }

AttributedCharacterIterator InputMethodEvent::getText() { return AttributedCharacterIterator(*classes[className]->invokeMethod<jobject>(this->object, "getText", "()Ljava/text/AttributedCharacterIterator;")); }
void InputMethodEvent::consume() { (classes[className]->invokeMethod<void>(this->object, "consume", "()V")); }
bool InputMethodEvent::isConsumed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isConsumed", "()Z")); }
long InputMethodEvent::getWhen() { return long(*classes[className]->invokeMethod<long>(this->object, "getWhen", "()J")); }
long InputMethodEvent::getMostRecentEventTimeForSource(Object arg0) { return long(*classes[className]->invokeStaticMethod<long>("getMostRecentEventTimeForSource", "(Ljava/lang/Object;)J", arg0)); }
int InputMethodEvent::getCommittedCharacterCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getCommittedCharacterCount", "()I")); }
TextHitInfo InputMethodEvent::getCaret() { return TextHitInfo(*classes[className]->invokeMethod<jobject>(this->object, "getCaret", "()Ljava/awt/font/TextHitInfo;")); }
TextHitInfo InputMethodEvent::getVisiblePosition() { return TextHitInfo(*classes[className]->invokeMethod<jobject>(this->object, "getVisiblePosition", "()Ljava/awt/font/TextHitInfo;")); }
void InputMethodEvent::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
String InputMethodEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

TextHitInfo TextHitInfo::leading(int arg0) { return TextHitInfo(*classes[className]->invokeStaticMethod<jobject>("leading", "(I)Ljava/awt/font/TextHitInfo;", arg0)); }
bool TextHitInfo::isLeadingEdge() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLeadingEdge", "()Z")); }
TextHitInfo TextHitInfo::trailing(int arg0) { return TextHitInfo(*classes[className]->invokeStaticMethod<jobject>("trailing", "(I)Ljava/awt/font/TextHitInfo;", arg0)); }
int TextHitInfo::getCharIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getCharIndex", "()I")); }
int TextHitInfo::getInsertionIndex() { return int(*classes[className]->invokeMethod<int>(this->object, "getInsertionIndex", "()I")); }
TextHitInfo TextHitInfo::beforeOffset(int arg0) { return TextHitInfo(*classes[className]->invokeStaticMethod<jobject>("beforeOffset", "(I)Ljava/awt/font/TextHitInfo;", arg0)); }
TextHitInfo TextHitInfo::afterOffset(int arg0) { return TextHitInfo(*classes[className]->invokeStaticMethod<jobject>("afterOffset", "(I)Ljava/awt/font/TextHitInfo;", arg0)); }
TextHitInfo TextHitInfo::getOtherHit() { return TextHitInfo(*classes[className]->invokeMethod<jobject>(this->object, "getOtherHit", "()Ljava/awt/font/TextHitInfo;")); }
TextHitInfo TextHitInfo::getOffsetHit(int arg0) { return TextHitInfo(*classes[className]->invokeMethod<jobject>(this->object, "getOffsetHit", "(I)Ljava/awt/font/TextHitInfo;", arg0)); }
bool TextHitInfo::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
bool TextHitInfo::equals(TextHitInfo arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/awt/font/TextHitInfo;)Z", arg0)); }
String TextHitInfo::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int TextHitInfo::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

Component HierarchyEvent::getChanged() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getChanged", "()Ljava/awt/Component;")); }
Component HierarchyEvent::getComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponent", "()Ljava/awt/Component;")); }
Container HierarchyEvent::getChangedParent() { return Container(*classes[className]->invokeMethod<jobject>(this->object, "getChangedParent", "()Ljava/awt/Container;")); }
long HierarchyEvent::getChangeFlags() { return long(*classes[className]->invokeMethod<long>(this->object, "getChangeFlags", "()J")); }
String HierarchyEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }











bool AccessControlContext::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int AccessControlContext::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
void AccessControlContext::checkPermission(Permission arg0) { (classes[className]->invokeMethod<void>(this->object, "checkPermission", "(Ljava/security/Permission;)V", arg0)); }
bool AccessControlContext::isAuthorized() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isAuthorized", "()Z")); }
bool AccessControlContext::isPrivileged() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isPrivileged", "()Z")); }
DomainCombiner AccessControlContext::getCombiner() { return DomainCombiner(*classes[className]->invokeMethod<jobject>(this->object, "getCombiner", "()Ljava/security/DomainCombiner;")); }
Debug AccessControlContext::getDebug() { return Debug(*classes[className]->invokeStaticMethod<jobject>("getDebug", "()Lsun/security/util/Debug;")); }
void AccessControlContext::checkPermission2(Permission arg0) { (classes[className]->invokeMethod<void>(this->object, "checkPermission2", "(Ljava/security/Permission;)V", arg0)); }
void AccessControlContext::calculateFields(AccessControlContext arg0, AccessControlContext arg1, Permission_interface arg2) { (classes[className]->invokeMethod<void>(this->object, "calculateFields", "(Ljava/security/AccessControlContext;Ljava/security/AccessControlContext;[Ljava/security/Permission;)V", arg0, arg1, arg2)); }
bool AccessControlContext::containsAllPDs(ProtectionDomain_interface arg0, ProtectionDomain_interface arg1) { return bool(*classes[className]->invokeStaticMethod<bool>("containsAllPDs", "([Ljava/security/ProtectionDomain;[Ljava/security/ProtectionDomain;)Z", arg0, arg1)); }
bool AccessControlContext::equalContext(AccessControlContext arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equalContext", "(Ljava/security/AccessControlContext;)Z", arg0)); }
bool AccessControlContext::equalLimitedContext(AccessControlContext arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equalLimitedContext", "(Ljava/security/AccessControlContext;)Z", arg0)); }
bool AccessControlContext::equalPDs(ProtectionDomain_interface arg0, ProtectionDomain_interface arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equalPDs", "([Ljava/security/ProtectionDomain;[Ljava/security/ProtectionDomain;)Z", arg0, arg1)); }
bool AccessControlContext::containsAllLimits(AccessControlContext arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "containsAllLimits", "(Ljava/security/AccessControlContext;)Z", arg0)); }
AccessControlContext AccessControlContext::getNextPC(AccessControlContext arg0) { return AccessControlContext(*classes[className]->invokeStaticMethod<jobject>("getNextPC", "(Ljava/security/AccessControlContext;)Ljava/security/AccessControlContext;", arg0)); }
DomainCombiner AccessControlContext::getAssignedCombiner() { return DomainCombiner(*classes[className]->invokeMethod<jobject>(this->object, "getAssignedCombiner", "()Ljava/security/DomainCombiner;")); }
DomainCombiner AccessControlContext::getDomainCombiner() { return DomainCombiner(*classes[className]->invokeMethod<jobject>(this->object, "getDomainCombiner", "()Ljava/security/DomainCombiner;")); }
AccessControlContext AccessControlContext::optimize() { return AccessControlContext(*classes[className]->invokeMethod<jobject>(this->object, "optimize", "()Ljava/security/AccessControlContext;")); }


String Debug::marshal(String arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("marshal", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
void Debug::Help() { (classes[className]->invokeStaticMethod<void>("Help", "()V")); }
bool Debug::isVerbose() { return bool(*classes[className]->invokeStaticMethod<bool>("isVerbose", "()Z")); }
PrintStream Debug::getPrintStream() { return PrintStream(*classes[className]->invokeMethod<jobject>(this->object, "getPrintStream", "()Ljava/io/PrintStream;")); }
void Debug::println(Object arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "println", "(Ljava/lang/Object;Ljava/lang/String;)V", arg0, arg1)); }
void Debug::println(String arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("println", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1)); }
void Debug::println() { (classes[className]->invokeMethod<void>(this->object, "println", "()V")); }
void Debug::println(String arg0) { (classes[className]->invokeMethod<void>(this->object, "println", "(Ljava/lang/String;)V", arg0)); }
String Debug::toString(arr_B arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toString", "([B)Ljava/lang/String;", arg0)); }
String Debug::toHexString(BigInteger arg0) { return String(*classes[className]->invokeStaticMethod<jobject>("toHexString", "(Ljava/math/BigInteger;)Ljava/lang/String;", arg0)); }
Debug Debug::getInstance(String arg0, String arg1) { return Debug(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/lang/String;Ljava/lang/String;)Lsun/security/util/Debug;", arg0, arg1)); }
Debug Debug::getInstance(String arg0) { return Debug(*classes[className]->invokeStaticMethod<jobject>("getInstance", "(Ljava/lang/String;)Lsun/security/util/Debug;", arg0)); }
bool Debug::isOn(String arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isOn", "(Ljava/lang/String;)Z", arg0)); }



void DropTarget::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
void DropTarget::removeNotify() { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "()V")); }
Component DropTarget::getComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponent", "()Ljava/awt/Component;")); }
void DropTarget::setComponent(Component arg0) { (classes[className]->invokeMethod<void>(this->object, "setComponent", "(Ljava/awt/Component;)V", arg0)); }
DropTargetContext DropTarget::createDropTargetContext() { return DropTargetContext(*classes[className]->invokeMethod<jobject>(this->object, "createDropTargetContext", "()Ljava/awt/dnd/DropTargetContext;")); }
void DropTarget::setDefaultActions(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setDefaultActions", "(I)V", arg0)); }
void DropTarget::addDropTargetListener(DropTargetListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addDropTargetListener", "(Ljava/awt/dnd/DropTargetListener;)V", arg0)); }
void DropTarget::setActive(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setActive", "(Z)V", arg0)); }
void DropTarget::clearAutoscroll() { (classes[className]->invokeMethod<void>(this->object, "clearAutoscroll", "()V")); }
DropTargetContext DropTarget::getDropTargetContext() { return DropTargetContext(*classes[className]->invokeMethod<jobject>(this->object, "getDropTargetContext", "()Ljava/awt/dnd/DropTargetContext;")); }
void DropTarget::initializeAutoscrolling(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "initializeAutoscrolling", "(Ljava/awt/Point;)V", arg0)); }
void DropTarget::updateAutoscroll(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "updateAutoscroll", "(Ljava/awt/Point;)V", arg0)); }
DropTarget_DropTargetAutoScroller DropTarget::createDropTargetAutoScroller(Component arg0, Point arg1) { return DropTarget_DropTargetAutoScroller(*classes[className]->invokeMethod<jobject>(this->object, "createDropTargetAutoScroller", "(Ljava/awt/Component;Ljava/awt/Point;)Ljava/awt/dnd/DropTarget$DropTargetAutoScroller;", arg0, arg1)); }
void DropTarget::doSetDefaultActions(int arg0) { (classes[className]->invokeMethod<void>(this->object, "doSetDefaultActions", "(I)V", arg0)); }
int DropTarget::getDefaultActions() { return int(*classes[className]->invokeMethod<int>(this->object, "getDefaultActions", "()I")); }
void DropTarget::removeDropTargetListener(DropTargetListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeDropTargetListener", "(Ljava/awt/dnd/DropTargetListener;)V", arg0)); }
void DropTarget::setFlavorMap(FlavorMap arg0) { (classes[className]->invokeMethod<void>(this->object, "setFlavorMap", "(Ljava/awt/datatransfer/FlavorMap;)V", arg0)); }
FlavorMap DropTarget::getFlavorMap() { return FlavorMap(*classes[className]->invokeMethod<jobject>(this->object, "getFlavorMap", "()Ljava/awt/datatransfer/FlavorMap;")); }
void DropTarget::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void DropTarget::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
bool DropTarget::isActive() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isActive", "()Z")); }

bool DropTargetContext::isDataFlavorSupported(DataFlavor arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDataFlavorSupported", "(Ljava/awt/datatransfer/DataFlavor;)Z", arg0)); }
Component DropTargetContext::getComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponent", "()Ljava/awt/Component;")); }
DropTarget DropTargetContext::getDropTarget() { return DropTarget(*classes[className]->invokeMethod<jobject>(this->object, "getDropTarget", "()Ljava/awt/dnd/DropTarget;")); }
void DropTargetContext::setTargetActions(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setTargetActions", "(I)V", arg0)); }
void DropTargetContext::rejectDrop() { (classes[className]->invokeMethod<void>(this->object, "rejectDrop", "()V")); }
DropTargetContextPeer DropTargetContext::getDropTargetContextPeer() { return DropTargetContextPeer(*classes[className]->invokeMethod<jobject>(this->object, "getDropTargetContextPeer", "()Ljava/awt/dnd/peer/DropTargetContextPeer;")); }
int DropTargetContext::getTargetActions() { return int(*classes[className]->invokeMethod<int>(this->object, "getTargetActions", "()I")); }
void DropTargetContext::dropComplete(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "dropComplete", "(Z)V", arg0)); }
void DropTargetContext::acceptDrag(int arg0) { (classes[className]->invokeMethod<void>(this->object, "acceptDrag", "(I)V", arg0)); }
void DropTargetContext::rejectDrag() { (classes[className]->invokeMethod<void>(this->object, "rejectDrag", "()V")); }
void DropTargetContext::acceptDrop(int arg0) { (classes[className]->invokeMethod<void>(this->object, "acceptDrop", "(I)V", arg0)); }
List DropTargetContext::getCurrentDataFlavorsAsList() { return List(*classes[className]->invokeMethod<jobject>(this->object, "getCurrentDataFlavorsAsList", "()Ljava/util/List;")); }
Transferable DropTargetContext::getTransferable() { return Transferable(*classes[className]->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava/awt/datatransfer/Transferable;")); }
Transferable DropTargetContext::createTransferableProxy(Transferable arg0, bool arg1) { return Transferable(*classes[className]->invokeMethod<jobject>(this->object, "createTransferableProxy", "(Ljava/awt/datatransfer/Transferable;Z)Ljava/awt/datatransfer/Transferable;", arg0, arg1)); }
void DropTargetContext::setDropTargetContextPeer(DropTargetContextPeer arg0) { (classes[className]->invokeMethod<void>(this->object, "setDropTargetContextPeer", "(Ljava/awt/dnd/peer/DropTargetContextPeer;)V", arg0)); }
void DropTargetContext::reset() { (classes[className]->invokeMethod<void>(this->object, "reset", "()V")); }



void DropTarget_DropTargetAutoScroller::updateLocation(Point arg0) { (classes[className]->invokeMethod<void>(this->object, "updateLocation", "(Ljava/awt/Point;)V", arg0)); }
void DropTarget_DropTargetAutoScroller::updateRegion() { (classes[className]->invokeMethod<void>(this->object, "updateRegion", "()V")); }
void DropTarget_DropTargetAutoScroller::stop() { (classes[className]->invokeMethod<void>(this->object, "stop", "()V")); }


Component_BaselineResizeBehavior Component_BaselineResizeBehavior::valueOf(String arg0) { return Component_BaselineResizeBehavior(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/awt/Component$BaselineResizeBehavior;", arg0)); }



void PopupMenu::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
void PopupMenu::show(Component arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "show", "(Ljava/awt/Component;II)V", arg0, arg1, arg2)); }
String PopupMenu::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
MenuContainer PopupMenu::getParent() { return MenuContainer(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/awt/MenuContainer;")); }


void Menu::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
void Menu::removeNotify() { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "()V")); }
String Menu::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
int Menu::countItems() { return int(*classes[className]->invokeMethod<int>(this->object, "countItems", "()I")); }
int Menu::countItemsImpl() { return int(*classes[className]->invokeMethod<int>(this->object, "countItemsImpl", "()I")); }
MenuItem Menu::getItemImpl(int arg0) { return MenuItem(*classes[className]->invokeMethod<jobject>(this->object, "getItemImpl", "(I)Ljava/awt/MenuItem;", arg0)); }
void Menu::addSeparator() { (classes[className]->invokeMethod<void>(this->object, "addSeparator", "()V")); }
MenuItem Menu::getShortcutMenuItem(MenuShortcut arg0) { return MenuItem(*classes[className]->invokeMethod<jobject>(this->object, "getShortcutMenuItem", "(Ljava/awt/MenuShortcut;)Ljava/awt/MenuItem;", arg0)); }
Enumeration Menu::shortcuts() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "shortcuts", "()Ljava/util/Enumeration;")); }
void Menu::deleteShortcut(MenuShortcut arg0) { (classes[className]->invokeMethod<void>(this->object, "deleteShortcut", "(Ljava/awt/MenuShortcut;)V", arg0)); }
bool Menu::isTearOff() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isTearOff", "()Z")); }
void Menu::insertSeparator(int arg0) { (classes[className]->invokeMethod<void>(this->object, "insertSeparator", "(I)V", arg0)); }
MenuItem Menu::getItem(int arg0) { return MenuItem(*classes[className]->invokeMethod<jobject>(this->object, "getItem", "(I)Ljava/awt/MenuItem;", arg0)); }
int Menu::getItemCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getItemCount", "()I")); }
void Menu::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
int Menu::getAccessibleChildIndex(MenuComponent arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getAccessibleChildIndex", "(Ljava/awt/MenuComponent;)I", arg0)); }
bool Menu::handleShortcut(KeyEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleShortcut", "(Ljava/awt/event/KeyEvent;)Z", arg0)); }
MenuItem Menu::add(MenuItem arg0) { return MenuItem(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/awt/MenuItem;)Ljava/awt/MenuItem;", arg0)); }
void Menu::add(String arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/lang/String;)V", arg0)); }
void Menu::insert(String arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "insert", "(Ljava/lang/String;I)V", arg0, arg1)); }
void Menu::insert(MenuItem arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "insert", "(Ljava/awt/MenuItem;I)V", arg0, arg1)); }
void Menu::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Menu::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
String Menu::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }
void Menu::removeAll() { (classes[className]->invokeMethod<void>(this->object, "removeAll", "()V")); }

void MenuItem::enable(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "enable", "(Z)V", arg0)); }
void MenuItem::enable() { (classes[className]->invokeMethod<void>(this->object, "enable", "()V")); }
void MenuItem::disable() { (classes[className]->invokeMethod<void>(this->object, "disable", "()V")); }
void MenuItem::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
bool MenuItem::eventEnabled(AWTEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "eventEnabled", "(Ljava/awt/AWTEvent;)Z", arg0)); }
void MenuItem::processEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
String MenuItem::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
void MenuItem::enableEvents(long arg0) { (classes[className]->invokeMethod<void>(this->object, "enableEvents", "(J)V", arg0)); }
void MenuItem::setEnabled(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }
void MenuItem::disableEvents(long arg0) { (classes[className]->invokeMethod<void>(this->object, "disableEvents", "(J)V", arg0)); }
MenuItem MenuItem::getShortcutMenuItem(MenuShortcut arg0) { return MenuItem(*classes[className]->invokeMethod<jobject>(this->object, "getShortcutMenuItem", "(Ljava/awt/MenuShortcut;)Ljava/awt/MenuItem;", arg0)); }
MenuShortcut MenuItem::getShortcut() { return MenuShortcut(*classes[className]->invokeMethod<jobject>(this->object, "getShortcut", "()Ljava/awt/MenuShortcut;")); }
void MenuItem::deleteShortcut(MenuShortcut arg0) { (classes[className]->invokeMethod<void>(this->object, "deleteShortcut", "(Ljava/awt/MenuShortcut;)V", arg0)); }
void MenuItem::deleteShortcut() { (classes[className]->invokeMethod<void>(this->object, "deleteShortcut", "()V")); }
void MenuItem::setLabel(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setLabel", "(Ljava/lang/String;)V", arg0)); }
bool MenuItem::isItemEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isItemEnabled", "()Z")); }
void MenuItem::doMenuEvent(long arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "doMenuEvent", "(JI)V", arg0, arg1)); }
String MenuItem::getActionCommandImpl() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getActionCommandImpl", "()Ljava/lang/String;")); }
void MenuItem::processActionEvent(ActionEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processActionEvent", "(Ljava/awt/event/ActionEvent;)V", arg0)); }
void MenuItem::addActionListener(ActionListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addActionListener", "(Ljava/awt/event/ActionListener;)V", arg0)); }
void MenuItem::setShortcut(MenuShortcut arg0) { (classes[className]->invokeMethod<void>(this->object, "setShortcut", "(Ljava/awt/MenuShortcut;)V", arg0)); }
void MenuItem::setActionCommand(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setActionCommand", "(Ljava/lang/String;)V", arg0)); }
void MenuItem::removeActionListener(ActionListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeActionListener", "(Ljava/awt/event/ActionListener;)V", arg0)); }
void MenuItem::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
bool MenuItem::isEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnabled", "()Z")); }
String MenuItem::getLabel() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getLabel", "()Ljava/lang/String;")); }
String MenuItem::getActionCommand() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getActionCommand", "()Ljava/lang/String;")); }
bool MenuItem::handleShortcut(KeyEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleShortcut", "(Ljava/awt/event/KeyEvent;)Z", arg0)); }
void MenuItem::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void MenuItem::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
String MenuItem::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

bool MenuShortcut::usesShiftModifier() { return bool(*classes[className]->invokeMethod<bool>(this->object, "usesShiftModifier", "()Z")); }
bool MenuShortcut::equals(MenuShortcut arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/awt/MenuShortcut;)Z", arg0)); }
bool MenuShortcut::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String MenuShortcut::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int MenuShortcut::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
int MenuShortcut::getKey() { return int(*classes[className]->invokeMethod<int>(this->object, "getKey", "()I")); }
String MenuShortcut::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

long ActionEvent::getWhen() { return long(*classes[className]->invokeMethod<long>(this->object, "getWhen", "()J")); }
String ActionEvent::getActionCommand() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getActionCommand", "()Ljava/lang/String;")); }
int ActionEvent::getModifiers() { return int(*classes[className]->invokeMethod<int>(this->object, "getModifiers", "()I")); }
String ActionEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }


Object MenuComponent::getTreeLock() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getTreeLock", "()Ljava/lang/Object;")); }
ComponentFactory MenuComponent::getComponentFactory() { return ComponentFactory(*classes[className]->invokeMethod<jobject>(this->object, "getComponentFactory", "()Lsun/awt/ComponentFactory;")); }
void MenuComponent::removeNotify() { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "()V")); }
bool MenuComponent::postEvent(Event arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "postEvent", "(Ljava/awt/Event;)Z", arg0)); }
bool MenuComponent::eventEnabled(AWTEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "eventEnabled", "(Ljava/awt/AWTEvent;)Z", arg0)); }
void MenuComponent::processEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
void MenuComponent::dispatchEventImpl(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava/awt/AWTEvent;)V", arg0)); }
String MenuComponent::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
AccessibleContext MenuComponent::getAccessibleContext() { return AccessibleContext(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax/accessibility/AccessibleContext;")); }
void MenuComponent::dispatchEvent(AWTEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava/awt/AWTEvent;)V", arg0)); }
MenuContainer MenuComponent::getParent_NoClientCode() { return MenuContainer(*classes[className]->invokeMethod<jobject>(this->object, "getParent_NoClientCode", "()Ljava/awt/MenuContainer;")); }
Font MenuComponent::getFont_NoClientCode() { return Font(*classes[className]->invokeMethod<jobject>(this->object, "getFont_NoClientCode", "()Ljava/awt/Font;")); }
int MenuComponent::getAccessibleIndexInParent() { return int(*classes[className]->invokeMethod<int>(this->object, "getAccessibleIndexInParent", "()I")); }
AccessControlContext MenuComponent::getAccessControlContext() { return AccessControlContext(*classes[className]->invokeMethod<jobject>(this->object, "getAccessControlContext", "()Ljava/security/AccessControlContext;")); }
AccessibleStateSet MenuComponent::getAccessibleStateSet() { return AccessibleStateSet(*classes[className]->invokeMethod<jobject>(this->object, "getAccessibleStateSet", "()Ljavax/accessibility/AccessibleStateSet;")); }
void MenuComponent::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
Font MenuComponent::getFont() { return Font(*classes[className]->invokeMethod<jobject>(this->object, "getFont", "()Ljava/awt/Font;")); }
void MenuComponent::setFont(Font arg0) { (classes[className]->invokeMethod<void>(this->object, "setFont", "(Ljava/awt/Font;)V", arg0)); }
int MenuComponent::getAccessibleChildIndex(MenuComponent arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getAccessibleChildIndex", "(Ljava/awt/MenuComponent;)I", arg0)); }
String MenuComponent::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
String MenuComponent::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
MenuContainer MenuComponent::getParent() { return MenuContainer(*classes[className]->invokeMethod<jobject>(this->object, "getParent", "()Ljava/awt/MenuContainer;")); }
void MenuComponent::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void MenuComponent::setName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setName", "(Ljava/lang/String;)V", arg0)); }
String MenuComponent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

Object EventObject::getSource() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getSource", "()Ljava/lang/Object;")); }
String EventObject::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }

EventQueue EventDispatchThread::getEventQueue() { return EventQueue(*classes[className]->invokeMethod<jobject>(this->object, "getEventQueue", "()Ljava/awt/EventQueue;")); }
void EventDispatchThread::pumpEventsForHierarchy(Conditional arg0, Component arg1) { (classes[className]->invokeMethod<void>(this->object, "pumpEventsForHierarchy", "(Ljava/awt/Conditional;Ljava/awt/Component;)V", arg0, arg1)); }
void EventDispatchThread::pumpEventsForHierarchy(int arg0, Conditional arg1, Component arg2) { (classes[className]->invokeMethod<void>(this->object, "pumpEventsForHierarchy", "(ILjava/awt/Conditional;Ljava/awt/Component;)V", arg0, arg1, arg2)); }
void EventDispatchThread::pumpEvents(int arg0, Conditional arg1) { (classes[className]->invokeMethod<void>(this->object, "pumpEvents", "(ILjava/awt/Conditional;)V", arg0, arg1)); }
void EventDispatchThread::pumpEvents(Conditional arg0) { (classes[className]->invokeMethod<void>(this->object, "pumpEvents", "(Ljava/awt/Conditional;)V", arg0)); }
void EventDispatchThread::pumpEventsForFilter(int arg0, Conditional arg1, EventFilter arg2) { (classes[className]->invokeMethod<void>(this->object, "pumpEventsForFilter", "(ILjava/awt/Conditional;Ljava/awt/EventFilter;)V", arg0, arg1, arg2)); }
void EventDispatchThread::pumpEventsForFilter(Conditional arg0, EventFilter arg1) { (classes[className]->invokeMethod<void>(this->object, "pumpEventsForFilter", "(Ljava/awt/Conditional;Ljava/awt/EventFilter;)V", arg0, arg1)); }
void EventDispatchThread::pumpOneEventForFilters(int arg0) { (classes[className]->invokeMethod<void>(this->object, "pumpOneEventForFilters", "(I)V", arg0)); }
bool EventDispatchThread::filterAndCheckEvent(AWTEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "filterAndCheckEvent", "(Ljava/awt/AWTEvent;)Z", arg0)); }
void EventDispatchThread::processException(Throwable arg0) { (classes[className]->invokeMethod<void>(this->object, "processException", "(Ljava/lang/Throwable;)V", arg0)); }
void EventDispatchThread::addEventFilter(EventFilter arg0) { (classes[className]->invokeMethod<void>(this->object, "addEventFilter", "(Ljava/awt/EventFilter;)V", arg0)); }
void EventDispatchThread::removeEventFilter(EventFilter arg0) { (classes[className]->invokeMethod<void>(this->object, "removeEventFilter", "(Ljava/awt/EventFilter;)V", arg0)); }
void EventDispatchThread::stopDispatching() { (classes[className]->invokeMethod<void>(this->object, "stopDispatching", "()V")); }
void EventDispatchThread::setEventQueue(EventQueue arg0) { (classes[className]->invokeMethod<void>(this->object, "setEventQueue", "(Ljava/awt/EventQueue;)V", arg0)); }





void PaintEvent::setUpdateRect(Rectangle arg0) { (classes[className]->invokeMethod<void>(this->object, "setUpdateRect", "(Ljava/awt/Rectangle;)V", arg0)); }
Rectangle PaintEvent::getUpdateRect() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getUpdateRect", "()Ljava/awt/Rectangle;")); }
String PaintEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

PeerEvent PeerEvent::coalesceEvents(PeerEvent arg0) { return PeerEvent(*classes[className]->invokeMethod<jobject>(this->object, "coalesceEvents", "(Lsun/awt/PeerEvent;)Lsun/awt/PeerEvent;", arg0)); }
long PeerEvent::getFlags() { return long(*classes[className]->invokeMethod<long>(this->object, "getFlags", "()J")); }

long InvocationEvent::getWhen() { return long(*classes[className]->invokeMethod<long>(this->object, "getWhen", "()J")); }
void InvocationEvent::finishedDispatching(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "finishedDispatching", "(Z)V", arg0)); }
bool InvocationEvent::isDispatched() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDispatched", "()Z")); }
Throwable InvocationEvent::getThrowable() { return Throwable(*classes[className]->invokeMethod<jobject>(this->object, "getThrowable", "()Ljava/lang/Throwable;")); }
Exception InvocationEvent::getException() { return Exception(*classes[className]->invokeMethod<jobject>(this->object, "getException", "()Ljava/lang/Exception;")); }
String InvocationEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

bool PlatformLogger::isLoggable(PlatformLogger_Level arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isLoggable", "(Lsun/util/logging/PlatformLogger$Level;)Z", arg0)); }
void PlatformLogger::finer(String arg0) { (classes[className]->invokeMethod<void>(this->object, "finer", "(Ljava/lang/String;)V", arg0)); }
void PlatformLogger::finer(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "finer", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
void PlatformLogger::finer(String arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "finer", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
void PlatformLogger::fine(String arg0) { (classes[className]->invokeMethod<void>(this->object, "fine", "(Ljava/lang/String;)V", arg0)); }
void PlatformLogger::fine(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "fine", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
void PlatformLogger::fine(String arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "fine", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
void PlatformLogger::finest(String arg0) { (classes[className]->invokeMethod<void>(this->object, "finest", "(Ljava/lang/String;)V", arg0)); }
void PlatformLogger::finest(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "finest", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
void PlatformLogger::finest(String arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "finest", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
void PlatformLogger::severe(String arg0) { (classes[className]->invokeMethod<void>(this->object, "severe", "(Ljava/lang/String;)V", arg0)); }
void PlatformLogger::severe(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "severe", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
void PlatformLogger::severe(String arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "severe", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
PlatformLogger_Level PlatformLogger::toPlatformLevel(System_Logger_Level arg0) { return PlatformLogger_Level(*classes[className]->invokeStaticMethod<jobject>("toPlatformLevel", "(Ljava/lang/System$Logger$Level;)Lsun/util/logging/PlatformLogger$Level;", arg0)); }
void PlatformLogger::config(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "config", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
void PlatformLogger::config(String arg0) { (classes[className]->invokeMethod<void>(this->object, "config", "(Ljava/lang/String;)V", arg0)); }
void PlatformLogger::config(String arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "config", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
PlatformLogger_Level PlatformLogger::level() { return PlatformLogger_Level(*classes[className]->invokeMethod<jobject>(this->object, "level", "()Lsun/util/logging/PlatformLogger$Level;")); }
void PlatformLogger::warning(String arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "warning", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
void PlatformLogger::warning(String arg0) { (classes[className]->invokeMethod<void>(this->object, "warning", "(Ljava/lang/String;)V", arg0)); }
void PlatformLogger::warning(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "warning", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
bool PlatformLogger::isEnabled() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isEnabled", "()Z")); }
void PlatformLogger::setLevel(PlatformLogger_Level arg0) { (classes[className]->invokeMethod<void>(this->object, "setLevel", "(Lsun/util/logging/PlatformLogger$Level;)V", arg0)); }
String PlatformLogger::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
void PlatformLogger::info(String arg0) { (classes[className]->invokeMethod<void>(this->object, "info", "(Ljava/lang/String;)V", arg0)); }
void PlatformLogger::info(String arg0, Throwable arg1) { (classes[className]->invokeMethod<void>(this->object, "info", "(Ljava/lang/String;Ljava/lang/Throwable;)V", arg0, arg1)); }
void PlatformLogger::info(String arg0, Object_interface arg1) { (classes[className]->invokeMethod<void>(this->object, "info", "(Ljava/lang/String;[Ljava/lang/Object;)V", arg0, arg1)); }
PlatformLogger PlatformLogger::getLogger(String arg0) { return PlatformLogger(*classes[className]->invokeStaticMethod<jobject>("getLogger", "(Ljava/lang/String;)Lsun/util/logging/PlatformLogger;", arg0)); }

System_Logger_Level PlatformLogger_Level::systemLevel() { return System_Logger_Level(*classes[className]->invokeMethod<jobject>(this->object, "systemLevel", "()Ljava/lang/System$Logger$Level;")); }
int PlatformLogger_Level::intValue() { return int(*classes[className]->invokeMethod<int>(this->object, "intValue", "()I")); }
PlatformLogger_Level PlatformLogger_Level::valueOf(String arg0) { return PlatformLogger_Level(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Lsun/util/logging/PlatformLogger$Level;", arg0)); }
PlatformLogger_Level PlatformLogger_Level::valueOf(int arg0) { return PlatformLogger_Level(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(I)Lsun/util/logging/PlatformLogger$Level;", arg0)); }

int System_Logger_Level::getSeverity() { return int(*classes[className]->invokeMethod<int>(this->object, "getSeverity", "()I")); }
String System_Logger_Level::getName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getName", "()Ljava/lang/String;")); }
System_Logger_Level System_Logger_Level::valueOf(String arg0) { return System_Logger_Level(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/lang/System$Logger$Level;", arg0)); }


Dialog_ModalExclusionType Dialog_ModalExclusionType::valueOf(String arg0) { return Dialog_ModalExclusionType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/awt/Dialog$ModalExclusionType;", arg0)); }

void PropertyChangeSupport::fire(PropertyChangeListener_interface arg0, PropertyChangeEvent arg1) { (classes[className]->invokeStaticMethod<void>("fire", "([Ljava/beans/PropertyChangeListener;Ljava/beans/PropertyChangeEvent;)V", arg0, arg1)); }
void PropertyChangeSupport::firePropertyChange(String arg0, Object arg1, Object arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", arg0, arg1, arg2)); }
void PropertyChangeSupport::firePropertyChange(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
void PropertyChangeSupport::firePropertyChange(PropertyChangeEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/beans/PropertyChangeEvent;)V", arg0)); }
void PropertyChangeSupport::firePropertyChange(String arg0, bool arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava/lang/String;ZZ)V", arg0, arg1, arg2)); }
void PropertyChangeSupport::addPropertyChangeListener(PropertyChangeListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", arg0)); }
void PropertyChangeSupport::addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
void PropertyChangeSupport::removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
void PropertyChangeSupport::removePropertyChangeListener(PropertyChangeListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", arg0)); }
bool PropertyChangeSupport::hasListeners(String arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "hasListeners", "(Ljava/lang/String;)Z", arg0)); }
void PropertyChangeSupport::fireIndexedPropertyChange(String arg0, int arg1, bool arg2, bool arg3) { (classes[className]->invokeMethod<void>(this->object, "fireIndexedPropertyChange", "(Ljava/lang/String;IZZ)V", arg0, arg1, arg2, arg3)); }
void PropertyChangeSupport::fireIndexedPropertyChange(String arg0, int arg1, int arg2, int arg3) { (classes[className]->invokeMethod<void>(this->object, "fireIndexedPropertyChange", "(Ljava/lang/String;III)V", arg0, arg1, arg2, arg3)); }
void PropertyChangeSupport::fireIndexedPropertyChange(String arg0, int arg1, Object arg2, Object arg3) { (classes[className]->invokeMethod<void>(this->object, "fireIndexedPropertyChange", "(Ljava/lang/String;ILjava/lang/Object;Ljava/lang/Object;)V", arg0, arg1, arg2, arg3)); }
void PropertyChangeSupport::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void PropertyChangeSupport::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }


Object PropertyChangeEvent::getPropagationId() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getPropagationId", "()Ljava/lang/Object;")); }
void PropertyChangeEvent::setPropagationId(Object arg0) { (classes[className]->invokeMethod<void>(this->object, "setPropagationId", "(Ljava/lang/Object;)V", arg0)); }
String PropertyChangeEvent::getPropertyName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPropertyName", "()Ljava/lang/String;")); }
Object PropertyChangeEvent::getOldValue() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getOldValue", "()Ljava/lang/Object;")); }
Object PropertyChangeEvent::getNewValue() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "getNewValue", "()Ljava/lang/Object;")); }
String PropertyChangeEvent::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
void PropertyChangeEvent::appendTo(StringBuilder arg0) { (classes[className]->invokeMethod<void>(this->object, "appendTo", "(Ljava/lang/StringBuilder;)V", arg0)); }

String Frame::getTitle() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTitle", "()Ljava/lang/String;")); }
void Frame::setTitle(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setTitle", "(Ljava/lang/String;)V", arg0)); }
void Frame::setResizable(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setResizable", "(Z)V", arg0)); }
void Frame::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
void Frame::removeNotify() { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "()V")); }
void Frame::setCursor(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setCursor", "(I)V", arg0)); }
String Frame::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
void Frame::setIconImage(Image arg0) { (classes[className]->invokeMethod<void>(this->object, "setIconImage", "(Ljava/awt/Image;)V", arg0)); }
void Frame::postProcessKeyEvent(KeyEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "postProcessKeyEvent", "(Ljava/awt/event/KeyEvent;)V", arg0)); }
bool Frame::isFrameStateSupported(int arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isFrameStateSupported", "(I)Z", arg0)); }
void Frame::setShape(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "setShape", "(Ljava/awt/Shape;)V", arg0)); }
void Frame::setOpacity(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setOpacity", "(F)V", arg0)); }
void Frame::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
void Frame::setBackground(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setBackground", "(Ljava/awt/Color;)V", arg0)); }
bool Frame::isUndecorated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUndecorated", "()Z")); }
bool Frame::isResizable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isResizable", "()Z")); }
void Frame::setUndecorated(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setUndecorated", "(Z)V", arg0)); }
void Frame::setMenuBar(MenuBar arg0) { (classes[className]->invokeMethod<void>(this->object, "setMenuBar", "(Ljava/awt/MenuBar;)V", arg0)); }
void Frame::setMaximizedBounds(Rectangle arg0) { (classes[className]->invokeMethod<void>(this->object, "setMaximizedBounds", "(Ljava/awt/Rectangle;)V", arg0)); }
int Frame::getExtendedState() { return int(*classes[className]->invokeMethod<int>(this->object, "getExtendedState", "()I")); }
void Frame::setExtendedState(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setExtendedState", "(I)V", arg0)); }
void Frame::setState(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setState", "(I)V", arg0)); }
Image Frame::getIconImage() { return Image(*classes[className]->invokeMethod<jobject>(this->object, "getIconImage", "()Ljava/awt/Image;")); }
MenuBar Frame::getMenuBar() { return MenuBar(*classes[className]->invokeMethod<jobject>(this->object, "getMenuBar", "()Ljava/awt/MenuBar;")); }
Rectangle Frame::getMaximizedBounds() { return Rectangle(*classes[className]->invokeMethod<jobject>(this->object, "getMaximizedBounds", "()Ljava/awt/Rectangle;")); }
int Frame::getCursorType() { return int(*classes[className]->invokeMethod<int>(this->object, "getCursorType", "()I")); }
void Frame::init(String arg0, GraphicsConfiguration arg1) { (classes[className]->invokeMethod<void>(this->object, "init", "(Ljava/lang/String;Ljava/awt/GraphicsConfiguration;)V", arg0, arg1)); }
void Frame::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void Frame::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
int Frame::getState() { return int(*classes[className]->invokeMethod<int>(this->object, "getState", "()I")); }
String Frame::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

void MenuBar::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
void MenuBar::removeNotify() { (classes[className]->invokeMethod<void>(this->object, "removeNotify", "()V")); }
String MenuBar::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
int MenuBar::getMenuCount() { return int(*classes[className]->invokeMethod<int>(this->object, "getMenuCount", "()I")); }
Menu MenuBar::getMenu(int arg0) { return Menu(*classes[className]->invokeMethod<jobject>(this->object, "getMenu", "(I)Ljava/awt/Menu;", arg0)); }
int MenuBar::countMenus() { return int(*classes[className]->invokeMethod<int>(this->object, "countMenus", "()I")); }
int MenuBar::getMenuCountImpl() { return int(*classes[className]->invokeMethod<int>(this->object, "getMenuCountImpl", "()I")); }
Menu MenuBar::getMenuImpl(int arg0) { return Menu(*classes[className]->invokeMethod<jobject>(this->object, "getMenuImpl", "(I)Ljava/awt/Menu;", arg0)); }
Menu MenuBar::getHelpMenu() { return Menu(*classes[className]->invokeMethod<jobject>(this->object, "getHelpMenu", "()Ljava/awt/Menu;")); }
void MenuBar::setHelpMenu(Menu arg0) { (classes[className]->invokeMethod<void>(this->object, "setHelpMenu", "(Ljava/awt/Menu;)V", arg0)); }
MenuItem MenuBar::getShortcutMenuItem(MenuShortcut arg0) { return MenuItem(*classes[className]->invokeMethod<jobject>(this->object, "getShortcutMenuItem", "(Ljava/awt/MenuShortcut;)Ljava/awt/MenuItem;", arg0)); }
Enumeration MenuBar::shortcuts() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "shortcuts", "()Ljava/util/Enumeration;")); }
void MenuBar::deleteShortcut(MenuShortcut arg0) { (classes[className]->invokeMethod<void>(this->object, "deleteShortcut", "(Ljava/awt/MenuShortcut;)V", arg0)); }
void MenuBar::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
int MenuBar::getAccessibleChildIndex(MenuComponent arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "getAccessibleChildIndex", "(Ljava/awt/MenuComponent;)I", arg0)); }
bool MenuBar::handleShortcut(KeyEvent arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "handleShortcut", "(Ljava/awt/event/KeyEvent;)Z", arg0)); }
Menu MenuBar::add(Menu arg0) { return Menu(*classes[className]->invokeMethod<jobject>(this->object, "add", "(Ljava/awt/Menu;)Ljava/awt/Menu;", arg0)); }
void MenuBar::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void MenuBar::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }

void JobAttributes::setCopiesToDefault() { (classes[className]->invokeMethod<void>(this->object, "setCopiesToDefault", "()V")); }
void JobAttributes::setDefaultSelection(JobAttributes_DefaultSelectionType arg0) { (classes[className]->invokeMethod<void>(this->object, "setDefaultSelection", "(Ljava/awt/JobAttributes$DefaultSelectionType;)V", arg0)); }
void JobAttributes::setDestination(JobAttributes_DestinationType arg0) { (classes[className]->invokeMethod<void>(this->object, "setDestination", "(Ljava/awt/JobAttributes$DestinationType;)V", arg0)); }
void JobAttributes::setDialog(JobAttributes_DialogType arg0) { (classes[className]->invokeMethod<void>(this->object, "setDialog", "(Ljava/awt/JobAttributes$DialogType;)V", arg0)); }
void JobAttributes::setMaxPage(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setMaxPage", "(I)V", arg0)); }
void JobAttributes::setMinPage(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setMinPage", "(I)V", arg0)); }
void JobAttributes::setMultipleDocumentHandlingToDefault() { (classes[className]->invokeMethod<void>(this->object, "setMultipleDocumentHandlingToDefault", "()V")); }
void JobAttributes::setSidesToDefault() { (classes[className]->invokeMethod<void>(this->object, "setSidesToDefault", "()V")); }
void JobAttributes::setCopies(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setCopies", "(I)V", arg0)); }
void JobAttributes::setFileName(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setFileName", "(Ljava/lang/String;)V", arg0)); }
void JobAttributes::setMultipleDocumentHandling(JobAttributes_MultipleDocumentHandlingType arg0) { (classes[className]->invokeMethod<void>(this->object, "setMultipleDocumentHandling", "(Ljava/awt/JobAttributes$MultipleDocumentHandlingType;)V", arg0)); }
void JobAttributes::setPageRanges(arr_arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "setPageRanges", "([[I)V", arg0)); }
void JobAttributes::setPrinter(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setPrinter", "(Ljava/lang/String;)V", arg0)); }
void JobAttributes::setSides(JobAttributes_SidesType arg0) { (classes[className]->invokeMethod<void>(this->object, "setSides", "(Ljava/awt/JobAttributes$SidesType;)V", arg0)); }
int JobAttributes::getMinPage() { return int(*classes[className]->invokeMethod<int>(this->object, "getMinPage", "()I")); }
int JobAttributes::getFromPage() { return int(*classes[className]->invokeMethod<int>(this->object, "getFromPage", "()I")); }
int JobAttributes::getToPage() { return int(*classes[className]->invokeMethod<int>(this->object, "getToPage", "()I")); }
int JobAttributes::getCopies() { return int(*classes[className]->invokeMethod<int>(this->object, "getCopies", "()I")); }
JobAttributes_DefaultSelectionType JobAttributes::getDefaultSelection() { return JobAttributes_DefaultSelectionType(*classes[className]->invokeMethod<jobject>(this->object, "getDefaultSelection", "()Ljava/awt/JobAttributes$DefaultSelectionType;")); }
JobAttributes_DestinationType JobAttributes::getDestination() { return JobAttributes_DestinationType(*classes[className]->invokeMethod<jobject>(this->object, "getDestination", "()Ljava/awt/JobAttributes$DestinationType;")); }
JobAttributes_DialogType JobAttributes::getDialog() { return JobAttributes_DialogType(*classes[className]->invokeMethod<jobject>(this->object, "getDialog", "()Ljava/awt/JobAttributes$DialogType;")); }
int JobAttributes::getMaxPage() { return int(*classes[className]->invokeMethod<int>(this->object, "getMaxPage", "()I")); }
JobAttributes_MultipleDocumentHandlingType JobAttributes::getMultipleDocumentHandling() { return JobAttributes_MultipleDocumentHandlingType(*classes[className]->invokeMethod<jobject>(this->object, "getMultipleDocumentHandling", "()Ljava/awt/JobAttributes$MultipleDocumentHandlingType;")); }
String JobAttributes::getPrinter() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getPrinter", "()Ljava/lang/String;")); }
JobAttributes_SidesType JobAttributes::getSides() { return JobAttributes_SidesType(*classes[className]->invokeMethod<jobject>(this->object, "getSides", "()Ljava/awt/JobAttributes$SidesType;")); }
void JobAttributes::setFromPage(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setFromPage", "(I)V", arg0)); }
void JobAttributes::setToPage(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setToPage", "(I)V", arg0)); }
bool JobAttributes::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String JobAttributes::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int JobAttributes::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object JobAttributes::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void JobAttributes::set(JobAttributes arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "(Ljava/awt/JobAttributes;)V", arg0)); }
String JobAttributes::getFileName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getFileName", "()Ljava/lang/String;")); }







PageAttributes_ColorType PageAttributes::getColor() { return PageAttributes_ColorType(*classes[className]->invokeMethod<jobject>(this->object, "getColor", "()Ljava/awt/PageAttributes$ColorType;")); }
void PageAttributes::setColor(PageAttributes_ColorType arg0) { (classes[className]->invokeMethod<void>(this->object, "setColor", "(Ljava/awt/PageAttributes$ColorType;)V", arg0)); }
void PageAttributes::setMediaToDefault() { (classes[className]->invokeMethod<void>(this->object, "setMediaToDefault", "()V")); }
void PageAttributes::setOrientationRequestedToDefault() { (classes[className]->invokeMethod<void>(this->object, "setOrientationRequestedToDefault", "()V")); }
void PageAttributes::setOrigin(PageAttributes_OriginType arg0) { (classes[className]->invokeMethod<void>(this->object, "setOrigin", "(Ljava/awt/PageAttributes$OriginType;)V", arg0)); }
void PageAttributes::setPrintQualityToDefault() { (classes[className]->invokeMethod<void>(this->object, "setPrintQualityToDefault", "()V")); }
void PageAttributes::setPrinterResolutionToDefault() { (classes[className]->invokeMethod<void>(this->object, "setPrinterResolutionToDefault", "()V")); }
void PageAttributes::setMedia(PageAttributes_MediaType arg0) { (classes[className]->invokeMethod<void>(this->object, "setMedia", "(Ljava/awt/PageAttributes$MediaType;)V", arg0)); }
void PageAttributes::setOrientationRequested(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setOrientationRequested", "(I)V", arg0)); }
void PageAttributes::setOrientationRequested(PageAttributes_OrientationRequestedType arg0) { (classes[className]->invokeMethod<void>(this->object, "setOrientationRequested", "(Ljava/awt/PageAttributes$OrientationRequestedType;)V", arg0)); }
void PageAttributes::setPrintQuality(PageAttributes_PrintQualityType arg0) { (classes[className]->invokeMethod<void>(this->object, "setPrintQuality", "(Ljava/awt/PageAttributes$PrintQualityType;)V", arg0)); }
void PageAttributes::setPrintQuality(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setPrintQuality", "(I)V", arg0)); }
void PageAttributes::setPrinterResolution(arr_I arg0) { (classes[className]->invokeMethod<void>(this->object, "setPrinterResolution", "([I)V", arg0)); }
void PageAttributes::setPrinterResolution(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setPrinterResolution", "(I)V", arg0)); }
PageAttributes_MediaType PageAttributes::getMedia() { return PageAttributes_MediaType(*classes[className]->invokeMethod<jobject>(this->object, "getMedia", "()Ljava/awt/PageAttributes$MediaType;")); }
PageAttributes_OrientationRequestedType PageAttributes::getOrientationRequested() { return PageAttributes_OrientationRequestedType(*classes[className]->invokeMethod<jobject>(this->object, "getOrientationRequested", "()Ljava/awt/PageAttributes$OrientationRequestedType;")); }
PageAttributes_OriginType PageAttributes::getOrigin() { return PageAttributes_OriginType(*classes[className]->invokeMethod<jobject>(this->object, "getOrigin", "()Ljava/awt/PageAttributes$OriginType;")); }
PageAttributes_PrintQualityType PageAttributes::getPrintQuality() { return PageAttributes_PrintQualityType(*classes[className]->invokeMethod<jobject>(this->object, "getPrintQuality", "()Ljava/awt/PageAttributes$PrintQualityType;")); }
bool PageAttributes::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
String PageAttributes::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int PageAttributes::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }
Object PageAttributes::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void PageAttributes::set(PageAttributes arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "(Ljava/awt/PageAttributes;)V", arg0)); }






Graphics PrintJob::getGraphics() { return Graphics(*classes[className]->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava/awt/Graphics;")); }
Dimension PrintJob::getPageDimension() { return Dimension(*classes[className]->invokeMethod<jobject>(this->object, "getPageDimension", "()Ljava/awt/Dimension;")); }
int PrintJob::getPageResolution() { return int(*classes[className]->invokeMethod<int>(this->object, "getPageResolution", "()I")); }
bool PrintJob::lastPageFirst() { return bool(*classes[className]->invokeMethod<bool>(this->object, "lastPageFirst", "()Z")); }
void PrintJob::finalize() { (classes[className]->invokeMethod<void>(this->object, "finalize", "()V")); }
void PrintJob::end() { (classes[className]->invokeMethod<void>(this->object, "end", "()V")); }

String Properties::getProperty(String arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", arg0)); }
String Properties::getProperty(String arg0, String arg1) { return String(*classes[className]->invokeMethod<jobject>(this->object, "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1)); }
String Properties::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Object Properties::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }
void Properties::load(Reader arg0) { (classes[className]->invokeMethod<void>(this->object, "load", "(Ljava/io/Reader;)V", arg0)); }
void Properties::load(InputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "load", "(Ljava/io/InputStream;)V", arg0)); }
void Properties::store(OutputStream arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "store", "(Ljava/io/OutputStream;Ljava/lang/String;)V", arg0, arg1)); }
void Properties::store(Writer arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "store", "(Ljava/io/Writer;Ljava/lang/String;)V", arg0, arg1)); }
bool Properties::contains(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "contains", "(Ljava/lang/Object;)Z", arg0)); }
void Properties::list(PrintStream arg0) { (classes[className]->invokeMethod<void>(this->object, "list", "(Ljava/io/PrintStream;)V", arg0)); }
void Properties::list(PrintWriter arg0) { (classes[className]->invokeMethod<void>(this->object, "list", "(Ljava/io/PrintWriter;)V", arg0)); }
Enumeration Properties::elements() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "elements", "()Ljava/util/Enumeration;")); }
Object Properties::setProperty(String arg0, String arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", arg0, arg1)); }
void Properties::load0(Properties_LineReader arg0) { (classes[className]->invokeMethod<void>(this->object, "load0", "(Ljava/util/Properties$LineReader;)V", arg0)); }
void Properties::enumerate(Map arg0) { (classes[className]->invokeMethod<void>(this->object, "enumerate", "(Ljava/util/Map;)V", arg0)); }
String Properties::loadConvert(arr_C arg0, int arg1, int arg2, StringBuilder arg3) { return String(*classes[className]->invokeMethod<jobject>(this->object, "loadConvert", "([CIILjava/lang/StringBuilder;)Ljava/lang/String;", arg0, arg1, arg2, arg3)); }
void Properties::store0(BufferedWriter arg0, String arg1, bool arg2) { (classes[className]->invokeMethod<void>(this->object, "store0", "(Ljava/io/BufferedWriter;Ljava/lang/String;Z)V", arg0, arg1, arg2)); }
void Properties::writeComments(BufferedWriter arg0, String arg1) { (classes[className]->invokeStaticMethod<void>("writeComments", "(Ljava/io/BufferedWriter;Ljava/lang/String;)V", arg0, arg1)); }
String Properties::saveConvert(String arg0, bool arg1, bool arg2) { return String(*classes[className]->invokeMethod<jobject>(this->object, "saveConvert", "(Ljava/lang/String;ZZ)Ljava/lang/String;", arg0, arg1, arg2)); }
void Properties::storeToXML(OutputStream arg0, String arg1, String arg2) { (classes[className]->invokeMethod<void>(this->object, "storeToXML", "(Ljava/io/OutputStream;Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1, arg2)); }
void Properties::storeToXML(OutputStream arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "storeToXML", "(Ljava/io/OutputStream;Ljava/lang/String;)V", arg0, arg1)); }
void Properties::storeToXML(OutputStream arg0, String arg1, Charset arg2) { (classes[className]->invokeMethod<void>(this->object, "storeToXML", "(Ljava/io/OutputStream;Ljava/lang/String;Ljava/nio/charset/Charset;)V", arg0, arg1, arg2)); }
Enumeration Properties::keys() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "keys", "()Ljava/util/Enumeration;")); }
void Properties::enumerateStringProperties(Map arg0) { (classes[className]->invokeMethod<void>(this->object, "enumerateStringProperties", "(Ljava/util/Map;)V", arg0)); }
void Properties::save(OutputStream arg0, String arg1) { (classes[className]->invokeMethod<void>(this->object, "save", "(Ljava/io/OutputStream;Ljava/lang/String;)V", arg0, arg1)); }
void Properties::loadFromXML(InputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "loadFromXML", "(Ljava/io/InputStream;)V", arg0)); }
Enumeration Properties::propertyNames() { return Enumeration(*classes[className]->invokeMethod<jobject>(this->object, "propertyNames", "()Ljava/util/Enumeration;")); }
Set Properties::stringPropertyNames() { return Set(*classes[className]->invokeMethod<jobject>(this->object, "stringPropertyNames", "()Ljava/util/Set;")); }
void Properties::rehash() { (classes[className]->invokeMethod<void>(this->object, "rehash", "()V")); }
void Properties::writeHashtable(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeHashtable", "(Ljava/io/ObjectOutputStream;)V", arg0)); }
void Properties::readHashtable(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readHashtable", "(Ljava/io/ObjectInputStream;)V", arg0)); }

int Properties_LineReader::readLine() { return int(*classes[className]->invokeMethod<int>(this->object, "readLine", "()I")); }

void BufferedWriter::ensureOpen() { (classes[className]->invokeMethod<void>(this->object, "ensureOpen", "()V")); }
void BufferedWriter::flushBuffer() { (classes[className]->invokeMethod<void>(this->object, "flushBuffer", "()V")); }
int BufferedWriter::min(int arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "min", "(II)I", arg0, arg1)); }
void BufferedWriter::write(arr_C arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "([CII)V", arg0, arg1, arg2)); }
void BufferedWriter::write(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "write", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
void BufferedWriter::write(int arg0) { (classes[className]->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }
void BufferedWriter::newLine() { (classes[className]->invokeMethod<void>(this->object, "newLine", "()V")); }


DragGestureRecognizer DragSource::createDragGestureRecognizer(Class arg0, Component arg1, int arg2, DragGestureListener arg3) { return DragGestureRecognizer(*classes[className]->invokeMethod<jobject>(this->object, "createDragGestureRecognizer", "(Ljava/lang/Class;Ljava/awt/Component;ILjava/awt/dnd/DragGestureListener;)Ljava/awt/dnd/DragGestureRecognizer;", arg0, arg1, arg2, arg3)); }
DragSourceContext DragSource::createDragSourceContext(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5) { return DragSourceContext(*classes[className]->invokeMethod<jobject>(this->object, "createDragSourceContext", "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)Ljava/awt/dnd/DragSourceContext;", arg0, arg1, arg2, arg3, arg4, arg5)); }
void DragSource::startDrag(DragGestureEvent arg0, Cursor arg1, Transferable arg2, DragSourceListener arg3, FlavorMap arg4) { (classes[className]->invokeMethod<void>(this->object, "startDrag", "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;Ljava/awt/datatransfer/FlavorMap;)V", arg0, arg1, arg2, arg3, arg4)); }
void DragSource::startDrag(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5) { (classes[className]->invokeMethod<void>(this->object, "startDrag", "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void DragSource::startDrag(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5, FlavorMap arg6) { (classes[className]->invokeMethod<void>(this->object, "startDrag", "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;Ljava/awt/datatransfer/FlavorMap;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void DragSource::startDrag(DragGestureEvent arg0, Cursor arg1, Transferable arg2, DragSourceListener arg3) { (classes[className]->invokeMethod<void>(this->object, "startDrag", "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V", arg0, arg1, arg2, arg3)); }
void DragSource::addDragSourceListener(DragSourceListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addDragSourceListener", "(Ljava/awt/dnd/DragSourceListener;)V", arg0)); }
void DragSource::addDragSourceMotionListener(DragSourceMotionListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addDragSourceMotionListener", "(Ljava/awt/dnd/DragSourceMotionListener;)V", arg0)); }
DragSource DragSource::getDefaultDragSource() { return DragSource(*classes[className]->invokeStaticMethod<jobject>("getDefaultDragSource", "()Ljava/awt/dnd/DragSource;")); }
bool DragSource::isDragImageSupported() { return bool(*classes[className]->invokeStaticMethod<bool>("isDragImageSupported", "()Z")); }
FlavorMap DragSource::getFlavorMap() { return FlavorMap(*classes[className]->invokeMethod<jobject>(this->object, "getFlavorMap", "()Ljava/awt/datatransfer/FlavorMap;")); }
DragGestureRecognizer DragSource::createDefaultDragGestureRecognizer(Component arg0, int arg1, DragGestureListener arg2) { return DragGestureRecognizer(*classes[className]->invokeMethod<jobject>(this->object, "createDefaultDragGestureRecognizer", "(Ljava/awt/Component;ILjava/awt/dnd/DragGestureListener;)Ljava/awt/dnd/DragGestureRecognizer;", arg0, arg1, arg2)); }
void DragSource::removeDragSourceListener(DragSourceListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeDragSourceListener", "(Ljava/awt/dnd/DragSourceListener;)V", arg0)); }
void DragSource::removeDragSourceMotionListener(DragSourceMotionListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeDragSourceMotionListener", "(Ljava/awt/dnd/DragSourceMotionListener;)V", arg0)); }
void DragSource::processDragEnter(DragSourceDragEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processDragEnter", "(Ljava/awt/dnd/DragSourceDragEvent;)V", arg0)); }
void DragSource::processDragOver(DragSourceDragEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processDragOver", "(Ljava/awt/dnd/DragSourceDragEvent;)V", arg0)); }
void DragSource::processDropActionChanged(DragSourceDragEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processDropActionChanged", "(Ljava/awt/dnd/DragSourceDragEvent;)V", arg0)); }
void DragSource::processDragExit(DragSourceEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processDragExit", "(Ljava/awt/dnd/DragSourceEvent;)V", arg0)); }
void DragSource::processDragDropEnd(DragSourceDropEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processDragDropEnd", "(Ljava/awt/dnd/DragSourceDropEvent;)V", arg0)); }
void DragSource::processDragMouseMoved(DragSourceDragEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "processDragMouseMoved", "(Ljava/awt/dnd/DragSourceDragEvent;)V", arg0)); }
int DragSource::getDragThreshold() { return int(*classes[className]->invokeStaticMethod<int>("getDragThreshold", "()I")); }
Cursor DragSource::load(String arg0) { return Cursor(*classes[className]->invokeStaticMethod<jobject>("load", "(Ljava/lang/String;)Ljava/awt/Cursor;", arg0)); }
void DragSource::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void DragSource::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }


Component DragGestureRecognizer::getComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponent", "()Ljava/awt/Component;")); }
void DragGestureRecognizer::setComponent(Component arg0) { (classes[className]->invokeMethod<void>(this->object, "setComponent", "(Ljava/awt/Component;)V", arg0)); }
void DragGestureRecognizer::addDragGestureListener(DragGestureListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addDragGestureListener", "(Ljava/awt/dnd/DragGestureListener;)V", arg0)); }
void DragGestureRecognizer::unregisterListeners() { (classes[className]->invokeMethod<void>(this->object, "unregisterListeners", "()V")); }
void DragGestureRecognizer::registerListeners() { (classes[className]->invokeMethod<void>(this->object, "registerListeners", "()V")); }
DragSource DragGestureRecognizer::getDragSource() { return DragSource(*classes[className]->invokeMethod<jobject>(this->object, "getDragSource", "()Ljava/awt/dnd/DragSource;")); }
int DragGestureRecognizer::getSourceActions() { return int(*classes[className]->invokeMethod<int>(this->object, "getSourceActions", "()I")); }
void DragGestureRecognizer::setSourceActions(int arg0) { (classes[className]->invokeMethod<void>(this->object, "setSourceActions", "(I)V", arg0)); }
InputEvent DragGestureRecognizer::getTriggerEvent() { return InputEvent(*classes[className]->invokeMethod<jobject>(this->object, "getTriggerEvent", "()Ljava/awt/event/InputEvent;")); }
void DragGestureRecognizer::resetRecognizer() { (classes[className]->invokeMethod<void>(this->object, "resetRecognizer", "()V")); }
void DragGestureRecognizer::removeDragGestureListener(DragGestureListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeDragGestureListener", "(Ljava/awt/dnd/DragGestureListener;)V", arg0)); }
void DragGestureRecognizer::fireDragGestureRecognized(int arg0, Point arg1) { (classes[className]->invokeMethod<void>(this->object, "fireDragGestureRecognized", "(ILjava/awt/Point;)V", arg0, arg1)); }
void DragGestureRecognizer::appendEvent(InputEvent arg0) { (classes[className]->invokeMethod<void>(this->object, "appendEvent", "(Ljava/awt/event/InputEvent;)V", arg0)); }
void DragGestureRecognizer::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void DragGestureRecognizer::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }

Component DragGestureEvent::getComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponent", "()Ljava/awt/Component;")); }
DragGestureRecognizer DragGestureEvent::getSourceAsDragGestureRecognizer() { return DragGestureRecognizer(*classes[className]->invokeMethod<jobject>(this->object, "getSourceAsDragGestureRecognizer", "()Ljava/awt/dnd/DragGestureRecognizer;")); }
Point DragGestureEvent::getDragOrigin() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getDragOrigin", "()Ljava/awt/Point;")); }
int DragGestureEvent::getDragAction() { return int(*classes[className]->invokeMethod<int>(this->object, "getDragAction", "()I")); }
void DragGestureEvent::startDrag(Cursor arg0, Transferable arg1, DragSourceListener arg2) { (classes[className]->invokeMethod<void>(this->object, "startDrag", "(Ljava/awt/Cursor;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V", arg0, arg1, arg2)); }
void DragGestureEvent::startDrag(Cursor arg0, Transferable arg1) { (classes[className]->invokeMethod<void>(this->object, "startDrag", "(Ljava/awt/Cursor;Ljava/awt/datatransfer/Transferable;)V", arg0, arg1)); }
void DragGestureEvent::startDrag(Cursor arg0, Image arg1, Point arg2, Transferable arg3, DragSourceListener arg4) { (classes[className]->invokeMethod<void>(this->object, "startDrag", "(Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V", arg0, arg1, arg2, arg3, arg4)); }
DragSource DragGestureEvent::getDragSource() { return DragSource(*classes[className]->invokeMethod<jobject>(this->object, "getDragSource", "()Ljava/awt/dnd/DragSource;")); }
InputEvent DragGestureEvent::getTriggerEvent() { return InputEvent(*classes[className]->invokeMethod<jobject>(this->object, "getTriggerEvent", "()Ljava/awt/event/InputEvent;")); }
Iterator DragGestureEvent::iterator() { return Iterator(*classes[className]->invokeMethod<jobject>(this->object, "iterator", "()Ljava/util/Iterator;")); }
void DragGestureEvent::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void DragGestureEvent::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }


void DragSourceContext::setCursor(Cursor arg0) { (classes[className]->invokeMethod<void>(this->object, "setCursor", "(Ljava/awt/Cursor;)V", arg0)); }
Component DragSourceContext::getComponent() { return Component(*classes[className]->invokeMethod<jobject>(this->object, "getComponent", "()Ljava/awt/Component;")); }
Cursor DragSourceContext::getCursor() { return Cursor(*classes[className]->invokeMethod<jobject>(this->object, "getCursor", "()Ljava/awt/Cursor;")); }
void DragSourceContext::updateCurrentCursor(int arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "updateCurrentCursor", "(III)V", arg0, arg1, arg2)); }
void DragSourceContext::setCursorImpl(Cursor arg0) { (classes[className]->invokeMethod<void>(this->object, "setCursorImpl", "(Ljava/awt/Cursor;)V", arg0)); }
void DragSourceContext::transferablesFlavorsChanged() { (classes[className]->invokeMethod<void>(this->object, "transferablesFlavorsChanged", "()V")); }
DragGestureEvent DragSourceContext::getTrigger() { return DragGestureEvent(*classes[className]->invokeMethod<jobject>(this->object, "getTrigger", "()Ljava/awt/dnd/DragGestureEvent;")); }
Transferable DragSourceContext::getTransferable() { return Transferable(*classes[className]->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava/awt/datatransfer/Transferable;")); }
void DragSourceContext::addDragSourceListener(DragSourceListener arg0) { (classes[className]->invokeMethod<void>(this->object, "addDragSourceListener", "(Ljava/awt/dnd/DragSourceListener;)V", arg0)); }
void DragSourceContext::removeDragSourceListener(DragSourceListener arg0) { (classes[className]->invokeMethod<void>(this->object, "removeDragSourceListener", "(Ljava/awt/dnd/DragSourceListener;)V", arg0)); }
DragSource DragSourceContext::getDragSource() { return DragSource(*classes[className]->invokeMethod<jobject>(this->object, "getDragSource", "()Ljava/awt/dnd/DragSource;")); }
int DragSourceContext::getSourceActions() { return int(*classes[className]->invokeMethod<int>(this->object, "getSourceActions", "()I")); }
void DragSourceContext::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
void DragSourceContext::writeObject(ObjectOutputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "writeObject", "(Ljava/io/ObjectOutputStream;)V", arg0)); }


int DragSourceDragEvent::getGestureModifiers() { return int(*classes[className]->invokeMethod<int>(this->object, "getGestureModifiers", "()I")); }
int DragSourceDragEvent::getGestureModifiersEx() { return int(*classes[className]->invokeMethod<int>(this->object, "getGestureModifiersEx", "()I")); }
int DragSourceDragEvent::getUserAction() { return int(*classes[className]->invokeMethod<int>(this->object, "getUserAction", "()I")); }
int DragSourceDragEvent::getTargetActions() { return int(*classes[className]->invokeMethod<int>(this->object, "getTargetActions", "()I")); }
int DragSourceDragEvent::getDropAction() { return int(*classes[className]->invokeMethod<int>(this->object, "getDropAction", "()I")); }
void DragSourceDragEvent::setNewModifiers() { (classes[className]->invokeMethod<void>(this->object, "setNewModifiers", "()V")); }
void DragSourceDragEvent::setOldModifiers() { (classes[className]->invokeMethod<void>(this->object, "setOldModifiers", "()V")); }

int DragSourceEvent::getX() { return int(*classes[className]->invokeMethod<int>(this->object, "getX", "()I")); }
int DragSourceEvent::getY() { return int(*classes[className]->invokeMethod<int>(this->object, "getY", "()I")); }
DragSourceContext DragSourceEvent::getDragSourceContext() { return DragSourceContext(*classes[className]->invokeMethod<jobject>(this->object, "getDragSourceContext", "()Ljava/awt/dnd/DragSourceContext;")); }
Point DragSourceEvent::getLocation() { return Point(*classes[className]->invokeMethod<jobject>(this->object, "getLocation", "()Ljava/awt/Point;")); }

bool DragSourceDropEvent::getDropSuccess() { return bool(*classes[className]->invokeMethod<bool>(this->object, "getDropSuccess", "()Z")); }
int DragSourceDropEvent::getDropAction() { return int(*classes[className]->invokeMethod<int>(this->object, "getDropAction", "()I")); }

Dialog_ModalityType Dialog_ModalityType::valueOf(String arg0) { return Dialog_ModalityType(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/awt/Dialog$ModalityType;", arg0)); }


String Dialog::getTitle() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getTitle", "()Ljava/lang/String;")); }
void Dialog::setTitle(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setTitle", "(Ljava/lang/String;)V", arg0)); }
void Dialog::setResizable(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setResizable", "(Z)V", arg0)); }
void Dialog::addNotify() { (classes[className]->invokeMethod<void>(this->object, "addNotify", "()V")); }
void Dialog::checkShouldBeBlocked(Window arg0) { (classes[className]->invokeStaticMethod<void>("checkShouldBeBlocked", "(Ljava/awt/Window;)V", arg0)); }
void Dialog::show() { (classes[className]->invokeMethod<void>(this->object, "show", "()V")); }
void Dialog::hide() { (classes[className]->invokeMethod<void>(this->object, "hide", "()V")); }
void Dialog::unblockWindow(Window arg0) { (classes[className]->invokeMethod<void>(this->object, "unblockWindow", "(Ljava/awt/Window;)V", arg0)); }
void Dialog::doDispose() { (classes[className]->invokeMethod<void>(this->object, "doDispose", "()V")); }
void Dialog::toBack() { (classes[className]->invokeMethod<void>(this->object, "toBack", "()V")); }
String Dialog::constructComponentName() { return String(*classes[className]->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava/lang/String;")); }
void Dialog::setShape(Shape arg0) { (classes[className]->invokeMethod<void>(this->object, "setShape", "(Ljava/awt/Shape;)V", arg0)); }
void Dialog::setOpacity(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setOpacity", "(F)V", arg0)); }
void Dialog::setVisible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }
void Dialog::initIDs() { (classes[className]->invokeStaticMethod<void>("initIDs", "()V")); }
void Dialog::setBackground(Color arg0) { (classes[className]->invokeMethod<void>(this->object, "setBackground", "(Ljava/awt/Color;)V", arg0)); }
void Dialog::setModalityType(Dialog_ModalityType arg0) { (classes[className]->invokeMethod<void>(this->object, "setModalityType", "(Ljava/awt/Dialog$ModalityType;)V", arg0)); }
bool Dialog::isModal_NoClientCode() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isModal_NoClientCode", "()Z")); }
void Dialog::checkModalityPermission(Dialog_ModalityType arg0) { (classes[className]->invokeMethod<void>(this->object, "checkModalityPermission", "(Ljava/awt/Dialog$ModalityType;)V", arg0)); }
bool Dialog::isModal() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isModal", "()Z")); }
void Dialog::modalShow() { (classes[className]->invokeMethod<void>(this->object, "modalShow", "()V")); }
bool Dialog::conditionalShow(Component arg0, AtomicLong arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "conditionalShow", "(Ljava/awt/Component;Ljava/util/concurrent/atomic/AtomicLong;)Z", arg0, arg1)); }
void Dialog::modalityPushed() { (classes[className]->invokeMethod<void>(this->object, "modalityPushed", "()V")); }
void Dialog::modalityPopped() { (classes[className]->invokeMethod<void>(this->object, "modalityPopped", "()V")); }
void Dialog::modalHide() { (classes[className]->invokeMethod<void>(this->object, "modalHide", "()V")); }
void Dialog::hideAndDisposePreHandler() { (classes[className]->invokeMethod<void>(this->object, "hideAndDisposePreHandler", "()V")); }
void Dialog::hideAndDisposeHandler() { (classes[className]->invokeMethod<void>(this->object, "hideAndDisposeHandler", "()V")); }
bool Dialog::isUndecorated() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUndecorated", "()Z")); }
bool Dialog::shouldBlock(Window arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "shouldBlock", "(Ljava/awt/Window;)Z", arg0)); }
Dialog_ModalityType Dialog::getModalityType() { return Dialog_ModalityType(*classes[className]->invokeMethod<jobject>(this->object, "getModalityType", "()Ljava/awt/Dialog$ModalityType;")); }
void Dialog::blockWindow(Window arg0) { (classes[className]->invokeMethod<void>(this->object, "blockWindow", "(Ljava/awt/Window;)V", arg0)); }
void Dialog::blockWindows(List arg0) { (classes[className]->invokeMethod<void>(this->object, "blockWindows", "(Ljava/util/List;)V", arg0)); }
void Dialog::setModal(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setModal", "(Z)V", arg0)); }
bool Dialog::isResizable() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isResizable", "()Z")); }
void Dialog::setUndecorated(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setUndecorated", "(Z)V", arg0)); }
void Dialog::readObject(ObjectInputStream arg0) { (classes[className]->invokeMethod<void>(this->object, "readObject", "(Ljava/io/ObjectInputStream;)V", arg0)); }
String Dialog::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

bool AtomicLong::VMSupportsCS8() { return bool(*classes[className]->invokeStaticMethod<bool>("VMSupportsCS8", "()Z")); }
bool AtomicLong::weakCompareAndSetVolatile(long arg0, long arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSetVolatile", "(JJ)Z", arg0, arg1)); }
long AtomicLong::getAndIncrement() { return long(*classes[className]->invokeMethod<long>(this->object, "getAndIncrement", "()J")); }
long AtomicLong::getAndDecrement() { return long(*classes[className]->invokeMethod<long>(this->object, "getAndDecrement", "()J")); }
long AtomicLong::incrementAndGet() { return long(*classes[className]->invokeMethod<long>(this->object, "incrementAndGet", "()J")); }
long AtomicLong::decrementAndGet() { return long(*classes[className]->invokeMethod<long>(this->object, "decrementAndGet", "()J")); }
long AtomicLong::addAndGet(long arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "addAndGet", "(J)J", arg0)); }
long AtomicLong::getAndUpdate(LongUnaryOperator arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getAndUpdate", "(Ljava/util/function/LongUnaryOperator;)J", arg0)); }
long AtomicLong::updateAndGet(LongUnaryOperator arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "updateAndGet", "(Ljava/util/function/LongUnaryOperator;)J", arg0)); }
long AtomicLong::getAndAccumulate(long arg0, LongBinaryOperator arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "getAndAccumulate", "(JLjava/util/function/LongBinaryOperator;)J", arg0, arg1)); }
long AtomicLong::accumulateAndGet(long arg0, LongBinaryOperator arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "accumulateAndGet", "(JLjava/util/function/LongBinaryOperator;)J", arg0, arg1)); }
long AtomicLong::getPlain() { return long(*classes[className]->invokeMethod<long>(this->object, "getPlain", "()J")); }
void AtomicLong::setPlain(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlain", "(J)V", arg0)); }
long AtomicLong::get() { return long(*classes[className]->invokeMethod<long>(this->object, "get", "()J")); }
String AtomicLong::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
int AtomicLong::intValue() { return int(*classes[className]->invokeMethod<int>(this->object, "intValue", "()I")); }
long AtomicLong::longValue() { return long(*classes[className]->invokeMethod<long>(this->object, "longValue", "()J")); }
float AtomicLong::floatValue() { return float(*classes[className]->invokeMethod<float>(this->object, "floatValue", "()F")); }
double AtomicLong::doubleValue() { return double(*classes[className]->invokeMethod<double>(this->object, "doubleValue", "()D")); }
void AtomicLong::set(long arg0) { (classes[className]->invokeMethod<void>(this->object, "set", "(J)V", arg0)); }
long AtomicLong::getOpaque() { return long(*classes[className]->invokeMethod<long>(this->object, "getOpaque", "()J")); }
void AtomicLong::setOpaque(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setOpaque", "(J)V", arg0)); }
long AtomicLong::getAcquire() { return long(*classes[className]->invokeMethod<long>(this->object, "getAcquire", "()J")); }
void AtomicLong::setRelease(long arg0) { (classes[className]->invokeMethod<void>(this->object, "setRelease", "(J)V", arg0)); }
bool AtomicLong::compareAndSet(long arg0, long arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "compareAndSet", "(JJ)Z", arg0, arg1)); }
long AtomicLong::compareAndExchange(long arg0, long arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "compareAndExchange", "(JJ)J", arg0, arg1)); }
long AtomicLong::compareAndExchangeAcquire(long arg0, long arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "compareAndExchangeAcquire", "(JJ)J", arg0, arg1)); }
long AtomicLong::compareAndExchangeRelease(long arg0, long arg1) { return long(*classes[className]->invokeMethod<long>(this->object, "compareAndExchangeRelease", "(JJ)J", arg0, arg1)); }
bool AtomicLong::weakCompareAndSetPlain(long arg0, long arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSetPlain", "(JJ)Z", arg0, arg1)); }
bool AtomicLong::weakCompareAndSet(long arg0, long arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSet", "(JJ)Z", arg0, arg1)); }
bool AtomicLong::weakCompareAndSetAcquire(long arg0, long arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSetAcquire", "(JJ)Z", arg0, arg1)); }
bool AtomicLong::weakCompareAndSetRelease(long arg0, long arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "weakCompareAndSetRelease", "(JJ)Z", arg0, arg1)); }
long AtomicLong::getAndSet(long arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getAndSet", "(J)J", arg0)); }
long AtomicLong::getAndAdd(long arg0) { return long(*classes[className]->invokeMethod<long>(this->object, "getAndAdd", "(J)J", arg0)); }
void AtomicLong::lazySet(long arg0) { (classes[className]->invokeMethod<void>(this->object, "lazySet", "(J)V", arg0)); }


Window WindowEvent::getOppositeWindow() { return Window(*classes[className]->invokeMethod<jobject>(this->object, "getOppositeWindow", "()Ljava/awt/Window;")); }
Window WindowEvent::getWindow() { return Window(*classes[className]->invokeMethod<jobject>(this->object, "getWindow", "()Ljava/awt/Window;")); }
int WindowEvent::getOldState() { return int(*classes[className]->invokeMethod<int>(this->object, "getOldState", "()I")); }
int WindowEvent::getNewState() { return int(*classes[className]->invokeMethod<int>(this->object, "getNewState", "()I")); }
String WindowEvent::paramString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "paramString", "()Ljava/lang/String;")); }

void AppContext::addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
void AppContext::removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (classes[className]->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava/lang/String;Ljava/beans/PropertyChangeListener;)V", arg0, arg1)); }
AppContext AppContext::getAppContext() { return AppContext(*classes[className]->invokeStaticMethod<jobject>("getAppContext", "()Lsun/awt/AppContext;")); }
void AppContext::dispose() { (classes[className]->invokeMethod<void>(this->object, "dispose", "()V")); }
Set AppContext::getAppContexts() { return Set(*classes[className]->invokeStaticMethod<jobject>("getAppContexts", "()Ljava/util/Set;")); }
bool AppContext::isDisposed() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isDisposed", "()Z")); }
void AppContext::initMainAppContext() { (classes[className]->invokeStaticMethod<void>("initMainAppContext", "()V")); }
bool AppContext::isMainContext(AppContext arg0) { return bool(*classes[className]->invokeStaticMethod<bool>("isMainContext", "(Lsun/awt/AppContext;)Z", arg0)); }
void AppContext::stopEventDispatchThreads() { (classes[className]->invokeStaticMethod<void>("stopEventDispatchThreads", "()V")); }
Object AppContext::getSoftReferenceValue(Object arg0, Supplier arg1) { return Object(*classes[className]->invokeStaticMethod<jobject>("getSoftReferenceValue", "(Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;", arg0, arg1)); }
Object AppContext::remove(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object AppContext::get(Object arg0) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "get", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0)); }
Object AppContext::put(Object arg0, Object arg1) { return Object(*classes[className]->invokeMethod<jobject>(this->object, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", arg0, arg1)); }
String AppContext::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
ThreadGroup AppContext::getThreadGroup() { return ThreadGroup(*classes[className]->invokeMethod<jobject>(this->object, "getThreadGroup", "()Ljava/lang/ThreadGroup;")); }
ClassLoader AppContext::getContextClassLoader() { return ClassLoader(*classes[className]->invokeMethod<jobject>(this->object, "getContextClassLoader", "()Ljava/lang/ClassLoader;")); }




void IdentityArrayList::rangeCheck(int arg0) { (classes[className]->invokeMethod<void>(this->object, "rangeCheck", "(I)V", arg0)); }
void IdentityArrayList::ensureCapacity(int arg0) { (classes[className]->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }
void IdentityArrayList::trimToSize() { (classes[className]->invokeMethod<void>(this->object, "trimToSize", "()V")); }
void IdentityArrayList::rangeCheckForAdd(int arg0) { (classes[className]->invokeMethod<void>(this->object, "rangeCheckForAdd", "(I)V", arg0)); }
void IdentityArrayList::fastRemove(int arg0) { (classes[className]->invokeMethod<void>(this->object, "fastRemove", "(I)V", arg0)); }
String IdentityArrayList::outOfBoundsMsg(int arg0) { return String(*classes[className]->invokeMethod<jobject>(this->object, "outOfBoundsMsg", "(I)Ljava/lang/String;", arg0)); }
void IdentityArrayList::removeRange(int arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "removeRange", "(II)V", arg0, arg1)); }

Window_Type Window_Type::valueOf(String arg0) { return Window_Type(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/awt/Window$Type;", arg0)); }

GraphicsDevice_WindowTranslucency GraphicsDevice_WindowTranslucency::valueOf(String arg0) { return GraphicsDevice_WindowTranslucency(*classes[className]->invokeStaticMethod<jobject>("valueOf", "(Ljava/lang/String;)Ljava/awt/GraphicsDevice$WindowTranslucency;", arg0)); }





String RenderingHints_Key::getIdentity() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getIdentity", "()Ljava/lang/String;")); }
void RenderingHints_Key::recordIdentity(RenderingHints_Key arg0) { (classes[className]->invokeStaticMethod<void>("recordIdentity", "(Ljava/awt/RenderingHints$Key;)V", arg0)); }
bool RenderingHints_Key::isCompatibleValue(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCompatibleValue", "(Ljava/lang/Object;)Z", arg0)); }
int RenderingHints_Key::intKey() { return int(*classes[className]->invokeMethod<int>(this->object, "intKey", "()I")); }
bool RenderingHints_Key::equals(Object arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "equals", "(Ljava/lang/Object;)Z", arg0)); }
int RenderingHints_Key::hashCode() { return int(*classes[className]->invokeMethod<int>(this->object, "hashCode", "()I")); }

void RenderingHints::add(RenderingHints arg0) { (classes[className]->invokeMethod<void>(this->object, "add", "(Ljava/awt/RenderingHints;)V", arg0)); }
String RenderingHints::toString() { return String(*classes[className]->invokeMethod<jobject>(this->object, "toString", "()Ljava/lang/String;")); }
Object RenderingHints::clone() { return Object(*classes[className]->invokeMethod<jobject>(this->object, "clone", "()Ljava/lang/Object;")); }


void EntityPlayerSP::addStat(StatBase arg0, int arg1) { (classes[className]->invokeMethod<void>(this->object, "addStat", "(Lnet/minecraft/stats/StatBase;I)V", arg0, arg1)); }
void EntityPlayerSP::displayGui(IInteractionObject arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGui", "(Lnet/minecraft/world/IInteractionObject;)V", arg0)); }
bool EntityPlayerSP::isUser() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isUser", "()Z")); }
void EntityPlayerSP::setXPStats(float arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setXPStats", "(FII)V", arg0, arg1, arg2)); }
void EntityPlayerSP::playSound(String arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "playSound", "(Ljava/lang/String;FF)V", arg0, arg1, arg2)); }
void EntityPlayerSP::onUpdate() { (classes[className]->invokeMethod<void>(this->object, "onUpdate", "()V")); }
bool EntityPlayerSP::isSneaking() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isSneaking", "()Z")); }
void EntityPlayerSP::heal(float arg0) { (classes[className]->invokeMethod<void>(this->object, "heal", "(F)V", arg0)); }
void EntityPlayerSP::swingItem() { (classes[className]->invokeMethod<void>(this->object, "swingItem", "()V")); }
bool EntityPlayerSP::isRidingHorse() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isRidingHorse", "()Z")); }
void EntityPlayerSP::sendHorseInventory() { (classes[className]->invokeMethod<void>(this->object, "sendHorseInventory", "()V")); }
EntityItem EntityPlayerSP::dropOneItem(bool arg0) { return EntityItem(*classes[className]->invokeMethod<jobject>(this->object, "dropOneItem", "(Z)Lnet/minecraft/entity/item/EntityItem;", arg0)); }
String EntityPlayerSP::getClientBrand() { return String(*classes[className]->invokeMethod<jobject>(this->object, "getClientBrand", "()Ljava/lang/String;")); }
StatFileWriter EntityPlayerSP::getStatFileWriter() { return StatFileWriter(*classes[className]->invokeMethod<jobject>(this->object, "getStatFileWriter", "()Lnet/minecraft/stats/StatFileWriter;")); }
void EntityPlayerSP::setClientBrand(String arg0) { (classes[className]->invokeMethod<void>(this->object, "setClientBrand", "(Ljava/lang/String;)V", arg0)); }
void EntityPlayerSP::onEnchantmentCritical(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onEnchantmentCritical", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
bool EntityPlayerSP::isOpenBlockSpace(BlockPos arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "isOpenBlockSpace", "(Lnet/minecraft/util/BlockPos;)Z", arg0)); }
void EntityPlayerSP::mountEntity(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "mountEntity", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayerSP::closeScreen() { (classes[className]->invokeMethod<void>(this->object, "closeScreen", "()V")); }
void EntityPlayerSP::updateEntityActionState() { (classes[className]->invokeMethod<void>(this->object, "updateEntityActionState", "()V")); }
void EntityPlayerSP::onLivingUpdate() { (classes[className]->invokeMethod<void>(this->object, "onLivingUpdate", "()V")); }
void EntityPlayerSP::joinEntityItemWithWorld(EntityItem arg0) { (classes[className]->invokeMethod<void>(this->object, "joinEntityItemWithWorld", "(Lnet/minecraft/entity/item/EntityItem;)V", arg0)); }
bool EntityPlayerSP::attackEntityFrom(DamageSource arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "attackEntityFrom", "(Lnet/minecraft/util/DamageSource;F)Z", arg0, arg1)); }
void EntityPlayerSP::damageEntity(DamageSource arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "damageEntity", "(Lnet/minecraft/util/DamageSource;F)V", arg0, arg1)); }
void EntityPlayerSP::openEditSign(TileEntitySign arg0) { (classes[className]->invokeMethod<void>(this->object, "openEditSign", "(Lnet/minecraft/tileentity/TileEntitySign;)V", arg0)); }
void EntityPlayerSP::openEditCommandBlock(CommandBlockLogic arg0) { (classes[className]->invokeMethod<void>(this->object, "openEditCommandBlock", "(Lnet/minecraft/command/server/CommandBlockLogic;)V", arg0)); }
void EntityPlayerSP::displayVillagerTradeGui(IMerchant arg0) { (classes[className]->invokeMethod<void>(this->object, "displayVillagerTradeGui", "(Lnet/minecraft/entity/IMerchant;)V", arg0)); }
void EntityPlayerSP::displayGUIChest(IInventory arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGUIChest", "(Lnet/minecraft/inventory/IInventory;)V", arg0)); }
void EntityPlayerSP::displayGUIHorse(EntityHorse arg0, IInventory arg1) { (classes[className]->invokeMethod<void>(this->object, "displayGUIHorse", "(Lnet/minecraft/entity/passive/EntityHorse;Lnet/minecraft/inventory/IInventory;)V", arg0, arg1)); }
void EntityPlayerSP::displayGUIBook(ItemStack arg0) { (classes[className]->invokeMethod<void>(this->object, "displayGUIBook", "(Lnet/minecraft/item/ItemStack;)V", arg0)); }
void EntityPlayerSP::setSprinting(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setSprinting", "(Z)V", arg0)); }
void EntityPlayerSP::onCriticalHit(Entity arg0) { (classes[className]->invokeMethod<void>(this->object, "onCriticalHit", "(Lnet/minecraft/entity/Entity;)V", arg0)); }
void EntityPlayerSP::respawnPlayer() { (classes[className]->invokeMethod<void>(this->object, "respawnPlayer", "()V")); }
void EntityPlayerSP::addChatComponentMessage(IChatComponent arg0) { (classes[className]->invokeMethod<void>(this->object, "addChatComponentMessage", "(Lnet/minecraft/util/IChatComponent;)V", arg0)); }
void EntityPlayerSP::sendPlayerAbilities() { (classes[className]->invokeMethod<void>(this->object, "sendPlayerAbilities", "()V")); }
bool EntityPlayerSP::isServerWorld() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isServerWorld", "()Z")); }
bool EntityPlayerSP::pushOutOfBlocks(double arg0, double arg1, double arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "pushOutOfBlocks", "(DDD)Z", arg0, arg1, arg2)); }
void EntityPlayerSP::onUpdateWalkingPlayer() { (classes[className]->invokeMethod<void>(this->object, "onUpdateWalkingPlayer", "()V")); }
bool EntityPlayerSP::isCurrentViewEntity() { return bool(*classes[className]->invokeMethod<bool>(this->object, "isCurrentViewEntity", "()Z")); }
void EntityPlayerSP::sendChatMessage(String arg0) { (classes[className]->invokeMethod<void>(this->object, "sendChatMessage", "(Ljava/lang/String;)V", arg0)); }
void EntityPlayerSP::closeScreenAndDropStack() { (classes[className]->invokeMethod<void>(this->object, "closeScreenAndDropStack", "()V")); }
void EntityPlayerSP::setPlayerSPHealth(float arg0) { (classes[className]->invokeMethod<void>(this->object, "setPlayerSPHealth", "(F)V", arg0)); }
void EntityPlayerSP::sendHorseJump() { (classes[className]->invokeMethod<void>(this->object, "sendHorseJump", "()V")); }
float EntityPlayerSP::getHorseJumpPower() { return float(*classes[className]->invokeMethod<float>(this->object, "getHorseJumpPower", "()F")); }

void RenderPlayer::doRender(AbstractClientPlayer arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "doRender", "(Lnet/minecraft/client/entity/AbstractClientPlayer;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void RenderPlayer::renderRightArm(AbstractClientPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "renderRightArm", "(Lnet/minecraft/client/entity/AbstractClientPlayer;)V", arg0)); }
void RenderPlayer::renderLeftArm(AbstractClientPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "renderLeftArm", "(Lnet/minecraft/client/entity/AbstractClientPlayer;)V", arg0)); }
void RenderPlayer::renderOffsetLivingLabel(AbstractClientPlayer arg0, double arg1, double arg2, double arg3, String arg4, float arg5, double arg6) { (classes[className]->invokeMethod<void>(this->object, "renderOffsetLivingLabel", "(Lnet/minecraft/client/entity/AbstractClientPlayer;DDDLjava/lang/String;FD)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
ResourceLocation RenderPlayer::getEntityTexture(AbstractClientPlayer arg0) { return ResourceLocation(*classes[className]->invokeMethod<jobject>(this->object, "getEntityTexture", "(Lnet/minecraft/client/entity/AbstractClientPlayer;)Lnet/minecraft/util/ResourceLocation;", arg0)); }
ModelPlayer RenderPlayer::getMainModel() { return ModelPlayer(*classes[className]->invokeMethod<jobject>(this->object, "getMainModel", "()Lnet/minecraft/client/model/ModelPlayer;")); }
void RenderPlayer::setModelVisibilities(AbstractClientPlayer arg0) { (classes[className]->invokeMethod<void>(this->object, "setModelVisibilities", "(Lnet/minecraft/client/entity/AbstractClientPlayer;)V", arg0)); }
void RenderPlayer::preRenderCallback(AbstractClientPlayer arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "preRenderCallback", "(Lnet/minecraft/client/entity/AbstractClientPlayer;F)V", arg0, arg1)); }
void RenderPlayer::renderLivingAt(AbstractClientPlayer arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "renderLivingAt", "(Lnet/minecraft/client/entity/AbstractClientPlayer;DDD)V", arg0, arg1, arg2, arg3)); }
void RenderPlayer::rotateCorpse(AbstractClientPlayer arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "rotateCorpse", "(Lnet/minecraft/client/entity/AbstractClientPlayer;FFF)V", arg0, arg1, arg2, arg3)); }
void RenderPlayer::transformHeldFull3DItemLayer() { (classes[className]->invokeMethod<void>(this->object, "transformHeldFull3DItemLayer", "()V")); }

void ModelPlayer::renderCape(float arg0) { (classes[className]->invokeMethod<void>(this->object, "renderCape", "(F)V", arg0)); }
void ModelPlayer::render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (classes[className]->invokeMethod<void>(this->object, "render", "(Lnet/minecraft/entity/Entity;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelPlayer::renderRightArm() { (classes[className]->invokeMethod<void>(this->object, "renderRightArm", "()V")); }
void ModelPlayer::renderLeftArm() { (classes[className]->invokeMethod<void>(this->object, "renderLeftArm", "()V")); }
void ModelPlayer::setInvisible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setInvisible", "(Z)V", arg0)); }
void ModelPlayer::renderDeadmau5Head(float arg0) { (classes[className]->invokeMethod<void>(this->object, "renderDeadmau5Head", "(F)V", arg0)); }
void ModelPlayer::setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6) { (classes[className]->invokeMethod<void>(this->object, "setRotationAngles", "(FFFFFFLnet/minecraft/entity/Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelPlayer::postRenderArm(float arg0) { (classes[className]->invokeMethod<void>(this->object, "postRenderArm", "(F)V", arg0)); }

void ModelBiped::render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (classes[className]->invokeMethod<void>(this->object, "render", "(Lnet/minecraft/entity/Entity;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelBiped::setInvisible(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setInvisible", "(Z)V", arg0)); }
void ModelBiped::setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6) { (classes[className]->invokeMethod<void>(this->object, "setRotationAngles", "(FFFFFFLnet/minecraft/entity/Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelBiped::setModelAttributes(ModelBase arg0) { (classes[className]->invokeMethod<void>(this->object, "setModelAttributes", "(Lnet/minecraft/client/model/ModelBase;)V", arg0)); }
void ModelBiped::postRenderArm(float arg0) { (classes[className]->invokeMethod<void>(this->object, "postRenderArm", "(F)V", arg0)); }

void ModelBase::render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (classes[className]->invokeMethod<void>(this->object, "render", "(Lnet/minecraft/entity/Entity;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelBase::setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6) { (classes[className]->invokeMethod<void>(this->object, "setRotationAngles", "(FFFFFFLnet/minecraft/entity/Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelBase::setLivingAnimations(EntityLivingBase arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "setLivingAnimations", "(Lnet/minecraft/entity/EntityLivingBase;FFF)V", arg0, arg1, arg2, arg3)); }
ModelRenderer ModelBase::getRandomModelBox(Random arg0) { return ModelRenderer(*classes[className]->invokeMethod<jobject>(this->object, "getRandomModelBox", "(Ljava/util/Random;)Lnet/minecraft/client/model/ModelRenderer;", arg0)); }
void ModelBase::setTextureOffset(String arg0, int arg1, int arg2) { (classes[className]->invokeMethod<void>(this->object, "setTextureOffset", "(Ljava/lang/String;II)V", arg0, arg1, arg2)); }
TextureOffset ModelBase::getTextureOffset(String arg0) { return TextureOffset(*classes[className]->invokeMethod<jobject>(this->object, "getTextureOffset", "(Ljava/lang/String;)Lnet/minecraft/client/model/TextureOffset;", arg0)); }
void ModelBase::copyModelAngles(ModelRenderer arg0, ModelRenderer arg1) { (classes[className]->invokeStaticMethod<void>("copyModelAngles", "(Lnet/minecraft/client/model/ModelRenderer;Lnet/minecraft/client/model/ModelRenderer;)V", arg0, arg1)); }
void ModelBase::setModelAttributes(ModelBase arg0) { (classes[className]->invokeMethod<void>(this->object, "setModelAttributes", "(Lnet/minecraft/client/model/ModelBase;)V", arg0)); }

ModelRenderer ModelRenderer::addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5) { return ModelRenderer(*classes[className]->invokeMethod<jobject>(this->object, "addBox", "(FFFIII)Lnet/minecraft/client/model/ModelRenderer;", arg0, arg1, arg2, arg3, arg4, arg5)); }
ModelRenderer ModelRenderer::addBox(String arg0, float arg1, float arg2, float arg3, int arg4, int arg5, int arg6) { return ModelRenderer(*classes[className]->invokeMethod<jobject>(this->object, "addBox", "(Ljava/lang/String;FFFIII)Lnet/minecraft/client/model/ModelRenderer;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelRenderer::addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5, float arg6) { (classes[className]->invokeMethod<void>(this->object, "addBox", "(FFFIIIF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
ModelRenderer ModelRenderer::addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5, bool arg6) { return ModelRenderer(*classes[className]->invokeMethod<jobject>(this->object, "addBox", "(FFFIIIZ)Lnet/minecraft/client/model/ModelRenderer;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void ModelRenderer::postRender(float arg0) { (classes[className]->invokeMethod<void>(this->object, "postRender", "(F)V", arg0)); }
void ModelRenderer::addChild(ModelRenderer arg0) { (classes[className]->invokeMethod<void>(this->object, "addChild", "(Lnet/minecraft/client/model/ModelRenderer;)V", arg0)); }
void ModelRenderer::render(float arg0) { (classes[className]->invokeMethod<void>(this->object, "render", "(F)V", arg0)); }
ModelRenderer ModelRenderer::setTextureSize(int arg0, int arg1) { return ModelRenderer(*classes[className]->invokeMethod<jobject>(this->object, "setTextureSize", "(II)Lnet/minecraft/client/model/ModelRenderer;", arg0, arg1)); }
void ModelRenderer::compileDisplayList(float arg0) { (classes[className]->invokeMethod<void>(this->object, "compileDisplayList", "(F)V", arg0)); }
ModelRenderer ModelRenderer::setTextureOffset(int arg0, int arg1) { return ModelRenderer(*classes[className]->invokeMethod<jobject>(this->object, "setTextureOffset", "(II)Lnet/minecraft/client/model/ModelRenderer;", arg0, arg1)); }
void ModelRenderer::setRotationPoint(float arg0, float arg1, float arg2) { (classes[className]->invokeMethod<void>(this->object, "setRotationPoint", "(FFF)V", arg0, arg1, arg2)); }
void ModelRenderer::renderWithRotation(float arg0) { (classes[className]->invokeMethod<void>(this->object, "renderWithRotation", "(F)V", arg0)); }


bool RendererLivingEntity::addLayer(LayerRenderer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "addLayer", "(Lnet/minecraft/client/renderer/entity/layers/LayerRenderer;)Z", arg0)); }
void RendererLivingEntity::renderName(EntityLivingBase arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "renderName", "(Lnet/minecraft/entity/EntityLivingBase;DDD)V", arg0, arg1, arg2, arg3)); }
void RendererLivingEntity::doRender(EntityLivingBase arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (classes[className]->invokeMethod<void>(this->object, "doRender", "(Lnet/minecraft/entity/EntityLivingBase;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }
void RendererLivingEntity::renderModel(EntityLivingBase arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (classes[className]->invokeMethod<void>(this->object, "renderModel", "(Lnet/minecraft/entity/EntityLivingBase;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }
void RendererLivingEntity::setRenderOutlines(bool arg0) { (classes[className]->invokeMethod<void>(this->object, "setRenderOutlines", "(Z)V", arg0)); }
float RendererLivingEntity::getSwingProgress(EntityLivingBase arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "getSwingProgress", "(Lnet/minecraft/entity/EntityLivingBase;F)F", arg0, arg1)); }
bool RendererLivingEntity::canRenderName(EntityLivingBase arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "canRenderName", "(Lnet/minecraft/entity/EntityLivingBase;)Z", arg0)); }
ModelBase RendererLivingEntity::getMainModel() { return ModelBase(*classes[className]->invokeMethod<jobject>(this->object, "getMainModel", "()Lnet/minecraft/client/model/ModelBase;")); }
void RendererLivingEntity::preRenderCallback(EntityLivingBase arg0, float arg1) { (classes[className]->invokeMethod<void>(this->object, "preRenderCallback", "(Lnet/minecraft/entity/EntityLivingBase;F)V", arg0, arg1)); }
void RendererLivingEntity::renderLivingAt(EntityLivingBase arg0, double arg1, double arg2, double arg3) { (classes[className]->invokeMethod<void>(this->object, "renderLivingAt", "(Lnet/minecraft/entity/EntityLivingBase;DDD)V", arg0, arg1, arg2, arg3)); }
void RendererLivingEntity::rotateCorpse(EntityLivingBase arg0, float arg1, float arg2, float arg3) { (classes[className]->invokeMethod<void>(this->object, "rotateCorpse", "(Lnet/minecraft/entity/EntityLivingBase;FFF)V", arg0, arg1, arg2, arg3)); }
float RendererLivingEntity::getDeathMaxRotation(EntityLivingBase arg0) { return float(*classes[className]->invokeMethod<float>(this->object, "getDeathMaxRotation", "(Lnet/minecraft/entity/EntityLivingBase;)F", arg0)); }
bool RendererLivingEntity::removeLayer(LayerRenderer arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "removeLayer", "(Lnet/minecraft/client/renderer/entity/layers/LayerRenderer;)Z", arg0)); }
float RendererLivingEntity::interpolateRotation(float arg0, float arg1, float arg2) { return float(*classes[className]->invokeMethod<float>(this->object, "interpolateRotation", "(FFF)F", arg0, arg1, arg2)); }
float RendererLivingEntity::handleRotationFloat(EntityLivingBase arg0, float arg1) { return float(*classes[className]->invokeMethod<float>(this->object, "handleRotationFloat", "(Lnet/minecraft/entity/EntityLivingBase;F)F", arg0, arg1)); }
bool RendererLivingEntity::setScoreTeamColor(EntityLivingBase arg0) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setScoreTeamColor", "(Lnet/minecraft/entity/EntityLivingBase;)Z", arg0)); }
void RendererLivingEntity::unsetScoreTeamColor() { (classes[className]->invokeMethod<void>(this->object, "unsetScoreTeamColor", "()V")); }
bool RendererLivingEntity::setDoRenderBrightness(EntityLivingBase arg0, float arg1) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setDoRenderBrightness", "(Lnet/minecraft/entity/EntityLivingBase;F)Z", arg0, arg1)); }
void RendererLivingEntity::unsetBrightness() { (classes[className]->invokeMethod<void>(this->object, "unsetBrightness", "()V")); }
void RendererLivingEntity::renderLayers(EntityLivingBase arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7) { (classes[className]->invokeMethod<void>(this->object, "renderLayers", "(Lnet/minecraft/entity/EntityLivingBase;FFFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
bool RendererLivingEntity::setBrightness(EntityLivingBase arg0, float arg1, bool arg2) { return bool(*classes[className]->invokeMethod<bool>(this->object, "setBrightness", "(Lnet/minecraft/entity/EntityLivingBase;FZ)Z", arg0, arg1, arg2)); }
int RendererLivingEntity::getColorMultiplier(EntityLivingBase arg0, float arg1, float arg2) { return int(*classes[className]->invokeMethod<int>(this->object, "getColorMultiplier", "(Lnet/minecraft/entity/EntityLivingBase;FF)I", arg0, arg1, arg2)); }
void RendererLivingEntity::transformHeldFull3DItemLayer() { (classes[className]->invokeMethod<void>(this->object, "transformHeldFull3DItemLayer", "()V")); }


void FrameTimer::func_181747_a(long arg0) { (classes[className]->invokeMethod<void>(this->object, "func_181747_a", "(J)V", arg0)); }
int FrameTimer::func_181751_b(int arg0) { return int(*classes[className]->invokeMethod<int>(this->object, "func_181751_b", "(I)I", arg0)); }
int FrameTimer::func_181748_a(long arg0, int arg1) { return int(*classes[className]->invokeMethod<int>(this->object, "func_181748_a", "(JI)I", arg0, arg1)); }
int FrameTimer::func_181749_a() { return int(*classes[className]->invokeMethod<int>(this->object, "func_181749_a", "()I")); }
int FrameTimer::func_181750_b() { return int(*classes[className]->invokeMethod<int>(this->object, "func_181750_b", "()I")); }



