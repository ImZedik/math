//
//  javaobjectimpl.cpp
//  math
//
//  Created by Derek Li on 10/12/23.
//

#include "javaobjectimpl.hpp"

/**
 * Classpath: java.lang.Object
 * Package name: java.lang
 */
class Object : public JavaObject {
protected:
    const inline static char *className = "java.lang.Object";
public:
    STATICINITIALIZE;

    Object(jobject object) : JavaObject(object) {}

    void finalize() { (*javaClass->invokeMethod<void>(this->object, "finalize", "()V", )); }

    void wait(long arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "wait", "(JI)V", arg0, arg1)); }

    void wait() { (*javaClass->invokeMethod<void>(this->object, "wait", "()V", )); }

    void wait(long arg0) { (*javaClass->invokeMethod<void>(this->object, "wait", "(J)V", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Class getClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getClass", "()Ljava.lang.Class;", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void notify() { (*javaClass->invokeMethod<void>(this->object, "notify", "()V", )); }

    void notifyAll() { (*javaClass->invokeMethod<void>(this->object, "notifyAll", "()V", )); }

};


/**
 * Classpath: java.lang.Class
 * Package name: java.lang
 */
class Class : public Object {
protected:
    const inline static char *className = "java.lang.Class";
public:
    STATICINITIALIZE;

    Class(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void checkPackageAccess(SecurityManager arg0, ClassLoader arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "checkPackageAccess", "(Ljava.lang.SecurityManager;Ljava.lang.ClassLoader;Z)V", arg0, arg1, arg2)); }

    static Class forName(String arg0, bool arg1, ClassLoader arg2) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "forName", "(Ljava.lang.String;ZLjava.lang.ClassLoader;)Ljava.lang.Class;", arg0, arg1, arg2)); }

    static Class forName(String arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "forName", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    static Class forName(Module arg0, String arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "forName", "(Ljava.lang.Module;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1)); }

    static Class forName0(String arg0, bool arg1, ClassLoader arg2, Class arg3) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "forName0", "(Ljava.lang.String;ZLjava.lang.ClassLoader;Ljava.lang.Class;)Ljava.lang.Class;", arg0, arg1, arg2, arg3)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Module getModule() { return Module(*javaClass->invokeMethod<jobject>(this->object, "getModule", "()Ljava.lang.Module;", )); }

    ProtectionDomain getProtectionDomain() { return ProtectionDomain(*javaClass->invokeMethod<jobject>(this->object, "getProtectionDomain", "()Ljava.security.ProtectionDomain;", )); }

    bool isAssignableFrom(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAssignableFrom", "(Ljava.lang.Class;)Z", arg0)); }

    bool isInstance(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInstance", "(Ljava.lang.Object;)Z", arg0)); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    bool isInterface() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInterface", "()Z", )); }

    bool isArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isArray", "()Z", )); }

    bool isPrimitive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPrimitive", "()Z", )); }

    bool isHidden() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHidden", "()Z", )); }

    Class getSuperclass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getSuperclass", "()Ljava.lang.Class;", )); }

    Object cast(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "cast", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    TypeDescriptor_OfField componentType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "componentType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

    Class componentType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "componentType", "()Ljava.lang.Class;", )); }

    ClassLoader getClassLoader0() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getClassLoader0", "()Ljava.lang.ClassLoader;", )); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    Class getComponentType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getComponentType", "()Ljava.lang.Class;", )); }

    bool isAnnotation() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnnotation", "()Z", )); }

    bool isEnum() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnum", "()Z", )); }

    bool isRecord() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRecord", "()Z", )); }

    ClassLoader getClassLoader() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava.lang.ClassLoader;", )); }

    void checkMemberAccess(SecurityManager arg0, int arg1, Class arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "checkMemberAccess", "(Ljava.lang.SecurityManager;ILjava.lang.Class;Z)V", arg0, arg1, arg2, arg3)); }

    static ReflectionFactory getReflectionFactory() { return ReflectionFactory(*javaClass->invokeStaticMethod<jobject>(this->object, "getReflectionFactory", "()Ljdk.internal.reflect.ReflectionFactory;", )); }

    Constructor getConstructor0(Class_interface arg0, int arg1) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "getConstructor0", "([Ljava.lang.Class;I)Ljava.lang.reflect.Constructor;", arg0, arg1)); }

    Object newInstance() { return Object(*javaClass->invokeMethod<jobject>(this->object, "newInstance", "()Ljava.lang.Object;", )); }

    String initClassName() { return String(*javaClass->invokeMethod<jobject>(this->object, "initClassName", "()Ljava.lang.String;", )); }

    ClassRepository getGenericInfo() { return ClassRepository(*javaClass->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun.reflect.generics.repository.ClassRepository;", )); }

    Class elementType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "elementType", "()Ljava.lang.Class;", )); }

    Class_ReflectionData reflectionData() { return Class_ReflectionData(*javaClass->invokeMethod<jobject>(this->object, "reflectionData", "()Ljava.lang.Class$ReflectionData;", )); }

    Class_EnclosingMethodInfo getEnclosingMethodInfo() { return Class_EnclosingMethodInfo(*javaClass->invokeMethod<jobject>(this->object, "getEnclosingMethodInfo", "()Ljava.lang.Class$EnclosingMethodInfo;", )); }

    GenericsFactory getFactory() { return GenericsFactory(*javaClass->invokeMethod<jobject>(this->object, "getFactory", "()Lsun.reflect.generics.factory.GenericsFactory;", )); }

    static Class toClass(Type arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "toClass", "(Ljava.lang.reflect.Type;)Ljava.lang.Class;", arg0)); }

    Class getEnclosingClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getEnclosingClass", "()Ljava.lang.Class;", )); }

    static bool arrayContentsEq(Object_interface arg0, Object_interface arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "arrayContentsEq", "([Ljava.lang.Object;[Ljava.lang.Object;)Z", arg0, arg1)); }

    Class getDeclaringClass0() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass0", "()Ljava.lang.Class;", )); }

    String getSimpleName0() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSimpleName0", "()Ljava.lang.String;", )); }

    String getSimpleName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSimpleName", "()Ljava.lang.String;", )); }

    String getSimpleBinaryName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSimpleBinaryName", "()Ljava.lang.String;", )); }

    String getCanonicalName0() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalName0", "()Ljava.lang.String;", )); }

    String getCanonicalName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalName", "()Ljava.lang.String;", )); }

    bool isLocalOrAnonymousClass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLocalOrAnonymousClass", "()Z", )); }

    String getSimpleBinaryName0() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSimpleBinaryName0", "()Ljava.lang.String;", )); }

    bool isTopLevelClass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTopLevelClass", "()Z", )); }

    bool hasEnclosingMethodInfo() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasEnclosingMethodInfo", "()Z", )); }

    Field getField0(String arg0) { return Field(*javaClass->invokeMethod<jobject>(this->object, "getField0", "(Ljava.lang.String;)Ljava.lang.reflect.Field;", arg0)); }

    Method getMethod0(String arg0, Class_interface arg1) { return Method(*javaClass->invokeMethod<jobject>(this->object, "getMethod0", "(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;", arg0, arg1)); }

    String methodToString(String arg0, Class_interface arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "methodToString", "(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.String;", arg0, arg1)); }

    static Field searchFields(Field_interface arg0, String arg1) { return Field(*javaClass->invokeStaticMethod<jobject>(this->object, "searchFields", "([Ljava.lang.reflect.Field;Ljava.lang.String;)Ljava.lang.reflect.Field;", arg0, arg1)); }

    static Method searchMethods(Method_interface arg0, String arg1, Class_interface arg2) { return Method(*javaClass->invokeStaticMethod<jobject>(this->object, "searchMethods", "([Ljava.lang.reflect.Method;Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;", arg0, arg1, arg2)); }

    String resolveName(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "resolveName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    bool isOpenToCaller(String arg0, Class arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpenToCaller", "(Ljava.lang.String;Ljava.lang.Class;)Z", arg0, arg1)); }

    InputStream getResourceAsStream(String arg0) { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "getResourceAsStream", "(Ljava.lang.String;)Ljava.io.InputStream;", arg0)); }

    URL getResource(String arg0) { return URL(*javaClass->invokeMethod<jobject>(this->object, "getResource", "(Ljava.lang.String;)Ljava.net.URL;", arg0)); }

    ProtectionDomain protectionDomain() { return ProtectionDomain(*javaClass->invokeMethod<jobject>(this->object, "protectionDomain", "()Ljava.security.ProtectionDomain;", )); }

    ProtectionDomain getProtectionDomain0() { return ProtectionDomain(*javaClass->invokeMethod<jobject>(this->object, "getProtectionDomain0", "()Ljava.security.ProtectionDomain;", )); }

    String getPackageName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPackageName", "()Ljava.lang.String;", )); }

    Class_ReflectionData newReflectionData(SoftReference arg0, int arg1) { return Class_ReflectionData(*javaClass->invokeMethod<jobject>(this->object, "newReflectionData", "(Ljava.lang.ref.SoftReference;I)Ljava.lang.Class$ReflectionData;", arg0, arg1)); }

    String getGenericSignature0() { return String(*javaClass->invokeMethod<jobject>(this->object, "getGenericSignature0", "()Ljava.lang.String;", )); }

    static void addAll(Collection arg0, Field_interface arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "addAll", "(Ljava.util.Collection;[Ljava.lang.reflect.Field;)V", arg0, arg1)); }

    PublicMethods_MethodList getMethodsRecursive(String arg0, Class_interface arg1, bool arg2) { return PublicMethods_MethodList(*javaClass->invokeMethod<jobject>(this->object, "getMethodsRecursive", "(Ljava.lang.String;[Ljava.lang.Class;Z)Ljava.lang.PublicMethods$MethodList;", arg0, arg1, arg2)); }

    static bool desiredAssertionStatus0(Class arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "desiredAssertionStatus0", "(Ljava.lang.Class;)Z", arg0)); }

    bool desiredAssertionStatus() { return bool(*javaClass->invokeMethod<boolean>(this->object, "desiredAssertionStatus", "()Z", )); }

    bool isRecord0() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRecord0", "()Z", )); }

    Method getMethod(String arg0, Class_interface arg1) { return Method(*javaClass->invokeMethod<jobject>(this->object, "getMethod", "(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;", arg0, arg1)); }

    Map enumConstantDirectory() { return Map(*javaClass->invokeMethod<jobject>(this->object, "enumConstantDirectory", "()Ljava.util.Map;", )); }

    String cannotCastMsg(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "cannotCastMsg", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    Class_AnnotationData annotationData() { return Class_AnnotationData(*javaClass->invokeMethod<jobject>(this->object, "annotationData", "()Ljava.lang.Class$AnnotationData;", )); }

    bool isAnnotationPresent(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnnotationPresent", "(Ljava.lang.Class;)Z", arg0)); }

    Class_AnnotationData createAnnotationData(int arg0) { return Class_AnnotationData(*javaClass->invokeMethod<jobject>(this->object, "createAnnotationData", "(I)Ljava.lang.Class$AnnotationData;", arg0)); }

    ConstantPool getConstantPool() { return ConstantPool(*javaClass->invokeMethod<jobject>(this->object, "getConstantPool", "()Ljdk.internal.reflect.ConstantPool;", )); }

    bool casAnnotationType(AnnotationType arg0, AnnotationType arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "casAnnotationType", "(Lsun.reflect.annotation.AnnotationType;Lsun.reflect.annotation.AnnotationType;)Z", arg0, arg1)); }

    Class getNestHost0() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getNestHost0", "()Ljava.lang.Class;", )); }

    Class getNestHost() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getNestHost", "()Ljava.lang.Class;", )); }

    String descriptorString() { return String(*javaClass->invokeMethod<jobject>(this->object, "descriptorString", "()Ljava.lang.String;", )); }

    static void checkPackageAccessForPermittedSubclasses(SecurityManager arg0, ClassLoader arg1, Class_interface arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "checkPackageAccessForPermittedSubclasses", "(Ljava.lang.SecurityManager;Ljava.lang.ClassLoader;[Ljava.lang.Class;)V", arg0, arg1, arg2)); }

    TypeDescriptor_OfField arrayType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "arrayType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

    Class arrayType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "arrayType", "()Ljava.lang.Class;", )); }

    bool isDirectSubType(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirectSubType", "(Ljava.lang.Class;)Z", arg0)); }

    static void registerNatives() { (*javaClass->invokeStaticMethod<void>(this->object, "registerNatives", "()V", )); }

    String toGenericString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava.lang.String;", )); }

    static String typeVarBounds(TypeVariable arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "typeVarBounds", "(Ljava.lang.reflect.TypeVariable;)Ljava.lang.String;", arg0)); }

    bool isSynthetic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSynthetic", "()Z", )); }

    Object getClassData() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getClassData", "()Ljava.lang.Object;", )); }

    Type getGenericSuperclass() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getGenericSuperclass", "()Ljava.lang.reflect.Type;", )); }

    Package getPackage() { return Package(*javaClass->invokeMethod<jobject>(this->object, "getPackage", "()Ljava.lang.Package;", )); }

    void setSigners(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setSigners", "([Ljava.lang.Object;)V", arg0)); }

    Method getEnclosingMethod() { return Method(*javaClass->invokeMethod<jobject>(this->object, "getEnclosingMethod", "()Ljava.lang.reflect.Method;", )); }

    Constructor getEnclosingConstructor() { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "getEnclosingConstructor", "()Ljava.lang.reflect.Constructor;", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    String getTypeName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTypeName", "()Ljava.lang.String;", )); }

    bool isAnonymousClass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnonymousClass", "()Z", )); }

    bool isLocalClass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLocalClass", "()Z", )); }

    bool isMemberClass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMemberClass", "()Z", )); }

    Field getField(String arg0) { return Field(*javaClass->invokeMethod<jobject>(this->object, "getField", "(Ljava.lang.String;)Ljava.lang.reflect.Field;", arg0)); }

    Constructor getConstructor(Class_interface arg0) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "getConstructor", "([Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0)); }

    Field getDeclaredField(String arg0) { return Field(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredField", "(Ljava.lang.String;)Ljava.lang.reflect.Field;", arg0)); }

    Method getDeclaredMethod(String arg0, Class_interface arg1) { return Method(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredMethod", "(Ljava.lang.String;[Ljava.lang.Class;)Ljava.lang.reflect.Method;", arg0, arg1)); }

    List getDeclaredPublicMethods(String arg0, Class_interface arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredPublicMethods", "(Ljava.lang.String;[Ljava.lang.Class;)Ljava.util.List;", arg0, arg1)); }

    Constructor getDeclaredConstructor(Class_interface arg0) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredConstructor", "([Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0)); }

    static Class getPrimitiveClass(String arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "getPrimitiveClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Class asSubclass(Class arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "asSubclass", "(Ljava.lang.Class;)Ljava.lang.Class;", arg0)); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    Annotation getDeclaredAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    AnnotationType getAnnotationType() { return AnnotationType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotationType", "()Lsun.reflect.annotation.AnnotationType;", )); }

    Map getDeclaredAnnotationMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredAnnotationMap", "()Ljava.util.Map;", )); }

    AnnotatedType getAnnotatedSuperclass() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedSuperclass", "()Ljava.lang.reflect.AnnotatedType;", )); }

    bool isNestmateOf(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNestmateOf", "(Ljava.lang.Class;)Z", arg0)); }

    bool isSealed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSealed", "()Z", )); }

    bool lambda_getPermittedSubclasses_1(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$getPermittedSubclasses$1", "(Ljava.lang.Class;)Z", arg0)); }

    static String lambda_methodToString_0(Class arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$methodToString$0", "(Ljava.lang.Class;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.lang.SecurityManager
 * Package name: java.lang
 */
class SecurityManager : public Object {
protected:
    const inline static char *className = "java.lang.SecurityManager";
public:
    STATICINITIALIZE;

    SecurityManager(jobject object) : JavaObject(object) {}

    void checkPackageAccess(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkPackageAccess", "(Ljava.lang.String;)V", arg0)); }

    void checkPermission(Permission arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "checkPermission", "(Ljava.security.Permission;Ljava.lang.Object;)V", arg0, arg1)); }

    void checkPermission(Permission arg0) { (*javaClass->invokeMethod<void>(this->object, "checkPermission", "(Ljava.security.Permission;)V", arg0)); }

    void checkCreateClassLoader() { (*javaClass->invokeMethod<void>(this->object, "checkCreateClassLoader", "()V", )); }

    void checkPropertiesAccess() { (*javaClass->invokeMethod<void>(this->object, "checkPropertiesAccess", "()V", )); }

    void checkPropertyAccess(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkPropertyAccess", "(Ljava.lang.String;)V", arg0)); }

    ThreadGroup getThreadGroup() { return ThreadGroup(*javaClass->invokeMethod<jobject>(this->object, "getThreadGroup", "()Ljava.lang.ThreadGroup;", )); }

    static Set nonExportedPkgs(ModuleDescriptor arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "nonExportedPkgs", "(Ljava.lang.module.ModuleDescriptor;)Ljava.util.Set;", arg0)); }

    static ThreadGroup getRootGroup() { return ThreadGroup(*javaClass->invokeStaticMethod<jobject>(this->object, "getRootGroup", "()Ljava.lang.ThreadGroup;", )); }

    static void addNonExportedPackages(ModuleLayer arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "addNonExportedPackages", "(Ljava.lang.ModuleLayer;)V", arg0)); }

    Object getSecurityContext() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getSecurityContext", "()Ljava.lang.Object;", )); }

    void checkAccess(Thread arg0) { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "(Ljava.lang.Thread;)V", arg0)); }

    void checkAccess(ThreadGroup arg0) { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "(Ljava.lang.ThreadGroup;)V", arg0)); }

    void checkExit(int arg0) { (*javaClass->invokeMethod<void>(this->object, "checkExit", "(I)V", arg0)); }

    void checkExec(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkExec", "(Ljava.lang.String;)V", arg0)); }

    void checkLink(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkLink", "(Ljava.lang.String;)V", arg0)); }

    void checkRead(FileDescriptor arg0) { (*javaClass->invokeMethod<void>(this->object, "checkRead", "(Ljava.io.FileDescriptor;)V", arg0)); }

    void checkRead(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkRead", "(Ljava.lang.String;)V", arg0)); }

    void checkRead(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "checkRead", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    void checkWrite(FileDescriptor arg0) { (*javaClass->invokeMethod<void>(this->object, "checkWrite", "(Ljava.io.FileDescriptor;)V", arg0)); }

    void checkWrite(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkWrite", "(Ljava.lang.String;)V", arg0)); }

    void checkDelete(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkDelete", "(Ljava.lang.String;)V", arg0)); }

    void checkConnect(String arg0, int arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "checkConnect", "(Ljava.lang.String;ILjava.lang.Object;)V", arg0, arg1, arg2)); }

    void checkConnect(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "checkConnect", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void checkListen(int arg0) { (*javaClass->invokeMethod<void>(this->object, "checkListen", "(I)V", arg0)); }

    void checkAccept(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "checkAccept", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void checkMulticast(InetAddress arg0) { (*javaClass->invokeMethod<void>(this->object, "checkMulticast", "(Ljava.net.InetAddress;)V", arg0)); }

    void checkMulticast(InetAddress arg0, byte arg1) { (*javaClass->invokeMethod<void>(this->object, "checkMulticast", "(Ljava.net.InetAddress;B)V", arg0, arg1)); }

    void checkPrintJobAccess() { (*javaClass->invokeMethod<void>(this->object, "checkPrintJobAccess", "()V", )); }

    static void invalidatePackageAccessCache() { (*javaClass->invokeStaticMethod<void>(this->object, "invalidatePackageAccessCache", "()V", )); }

    void checkPackageDefinition(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkPackageDefinition", "(Ljava.lang.String;)V", arg0)); }

    void checkSetFactory() { (*javaClass->invokeMethod<void>(this->object, "checkSetFactory", "()V", )); }

    void checkSecurityAccess(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkSecurityAccess", "(Ljava.lang.String;)V", arg0)); }

    static bool lambda_nonExportedPkgs_3(ModuleDescriptor_Opens arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$nonExportedPkgs$3", "(Ljava.lang.module.ModuleDescriptor$Opens;)Z", arg0)); }

    static bool lambda_nonExportedPkgs_2(ModuleDescriptor_Exports arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$nonExportedPkgs$2", "(Ljava.lang.module.ModuleDescriptor$Exports;)Z", arg0)); }

    static void lambda_addNonExportedPackages_1(String arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "lambda$addNonExportedPackages$1", "(Ljava.lang.String;)V", arg0)); }

    static bool lambda_addNonExportedPackages_0(Set arg0, Set arg1, ModuleDescriptor arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$addNonExportedPackages$0", "(Ljava.util.Set;Ljava.util.Set;Ljava.lang.module.ModuleDescriptor;)Z", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.security.Permission
 * Package name: java.security
 */
class Permission : public Object {
protected:
    const inline static char *className = "java.security.Permission";
public:
    STATICINITIALIZE;

    Permission(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool implies(Permission arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "implies", "(Ljava.security.Permission;)Z", arg0)); }

    String getActions() { return String(*javaClass->invokeMethod<jobject>(this->object, "getActions", "()Ljava.lang.String;", )); }

    PermissionCollection newPermissionCollection() { return PermissionCollection(*javaClass->invokeMethod<jobject>(this->object, "newPermissionCollection", "()Ljava.security.PermissionCollection;", )); }

    void checkGuard(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "checkGuard", "(Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: java.security.PermissionCollection
 * Package name: java.security
 */
class PermissionCollection : public Object {
protected:
    const inline static char *className = "java.security.PermissionCollection";
public:
    STATICINITIALIZE;

    PermissionCollection(jobject object) : JavaObject(object) {}

    void add(Permission arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.security.Permission;)V", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Enumeration elements() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "elements", "()Ljava.util.Enumeration;", )); }

    void setReadOnly() { (*javaClass->invokeMethod<void>(this->object, "setReadOnly", "()V", )); }

    bool implies(Permission arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "implies", "(Ljava.security.Permission;)Z", arg0)); }

    bool isReadOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadOnly", "()Z", )); }

    Stream elementsAsStream() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "elementsAsStream", "()Ljava.util.stream.Stream;", )); }

};


/**
 * Classpath: java.util.Enumeration
 * Package name: java.util
 */
class Enumeration : public JavaObject {
protected:
    const inline static char *className = "java.util.Enumeration";
public:
    STATICINITIALIZE;

    Enumeration(jobject object) : JavaObject(object) {}

    Iterator asIterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "asIterator", "()Ljava.util.Iterator;", )); }

    bool hasMoreElements() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasMoreElements", "()Z", )); }

    Object nextElement() { return Object(*javaClass->invokeMethod<jobject>(this->object, "nextElement", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.util.Iterator
 * Package name: java.util
 */
class Iterator : public JavaObject {
protected:
    const inline static char *className = "java.util.Iterator";
public:
    STATICINITIALIZE;

    Iterator(jobject object) : JavaObject(object) {}

    void remove() { (*javaClass->invokeMethod<void>(this->object, "remove", "()V", )); }

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    bool hasNext() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNext", "()Z", )); }

    Object next() { return Object(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.util.function.Consumer
 * Package name: java.util.function
 */
class Consumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Consumer";
public:
    STATICINITIALIZE;

    Consumer(jobject object) : JavaObject(object) {}

    void accept(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljava.lang.Object;)V", arg0)); }

    Consumer andThen(Consumer arg0) { return Consumer(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.Consumer;)Ljava.util.function.Consumer;", arg0)); }

    void lambda_andThen_0(Consumer arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "lambda$andThen$0", "(Ljava.util.function.Consumer;Ljava.lang.Object;)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.stream.Stream
 * Package name: java.util.stream
 */
class Stream : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.Stream";
public:
    STATICINITIALIZE;

    Stream(jobject object) : JavaObject(object) {}

    Optional min(Comparator arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "min", "(Ljava.util.Comparator;)Ljava.util.Optional;", arg0)); }

    Optional max(Comparator arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "max", "(Ljava.util.Comparator;)Ljava.util.Optional;", arg0)); }

    Stream map(Function arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "map", "(Ljava.util.function.Function;)Ljava.util.stream.Stream;", arg0)); }

    Object collect(Supplier arg0, BiConsumer arg1, BiConsumer arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "collect", "(Ljava.util.function.Supplier;Ljava.util.function.BiConsumer;Ljava.util.function.BiConsumer;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Object collect(Collector arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "collect", "(Ljava.util.stream.Collector;)Ljava.lang.Object;", arg0)); }

    List toList() { return List(*javaClass->invokeMethod<jobject>(this->object, "toList", "()Ljava.util.List;", )); }

    static Stream of(Object_interface arg0) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "([Ljava.lang.Object;)Ljava.util.stream.Stream;", arg0)); }

    static Stream of(Object arg0) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;)Ljava.util.stream.Stream;", arg0)); }

    long count() { return long(*javaClass->invokeMethod<long>(this->object, "count", "()J", )); }

    static Stream_Builder builder() { return Stream_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Ljava.util.stream.Stream$Builder;", )); }

    static Stream concat(Stream arg0, Stream arg1) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "concat", "(Ljava.util.stream.Stream;Ljava.util.stream.Stream;)Ljava.util.stream.Stream;", arg0, arg1)); }

    Stream limit(long arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "limit", "(J)Ljava.util.stream.Stream;", arg0)); }

    Stream filter(Predicate arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "filter", "(Ljava.util.function.Predicate;)Ljava.util.stream.Stream;", arg0)); }

    static Stream empty() { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.stream.Stream;", )); }

    bool anyMatch(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "anyMatch", "(Ljava.util.function.Predicate;)Z", arg0)); }

    Stream flatMap(Function arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "flatMap", "(Ljava.util.function.Function;)Ljava.util.stream.Stream;", arg0)); }

    void forEach(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.Consumer;)V", arg0)); }

    Optional findAny() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "findAny", "()Ljava.util.Optional;", )); }

    Stream skip(long arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "skip", "(J)Ljava.util.stream.Stream;", arg0)); }

    Stream peek(Consumer arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "peek", "(Ljava.util.function.Consumer;)Ljava.util.stream.Stream;", arg0)); }

    Object reduce(Object arg0, BiFunction arg1, BinaryOperator arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduce", "(Ljava.lang.Object;Ljava.util.function.BiFunction;Ljava.util.function.BinaryOperator;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Object reduce(Object arg0, BinaryOperator arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduce", "(Ljava.lang.Object;Ljava.util.function.BinaryOperator;)Ljava.lang.Object;", arg0, arg1)); }

    Optional reduce(BinaryOperator arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "reduce", "(Ljava.util.function.BinaryOperator;)Ljava.util.Optional;", arg0)); }

    Stream distinct() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "distinct", "()Ljava.util.stream.Stream;", )); }

    Optional findFirst() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "findFirst", "()Ljava.util.Optional;", )); }

    bool allMatch(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "allMatch", "(Ljava.util.function.Predicate;)Z", arg0)); }

    static Stream iterate(Object arg0, Predicate arg1, UnaryOperator arg2) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(Ljava.lang.Object;Ljava.util.function.Predicate;Ljava.util.function.UnaryOperator;)Ljava.util.stream.Stream;", arg0, arg1, arg2)); }

    static Stream iterate(Object arg0, UnaryOperator arg1) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(Ljava.lang.Object;Ljava.util.function.UnaryOperator;)Ljava.util.stream.Stream;", arg0, arg1)); }

    static Stream ofNullable(Object arg0) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "ofNullable", "(Ljava.lang.Object;)Ljava.util.stream.Stream;", arg0)); }

    Stream sorted(Comparator arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "sorted", "(Ljava.util.Comparator;)Ljava.util.stream.Stream;", arg0)); }

    Stream sorted() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "sorted", "()Ljava.util.stream.Stream;", )); }

    static Stream generate(Supplier arg0) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "generate", "(Ljava.util.function.Supplier;)Ljava.util.stream.Stream;", arg0)); }

    IntStream flatMapToInt(Function arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "flatMapToInt", "(Ljava.util.function.Function;)Ljava.util.stream.IntStream;", arg0)); }

    LongStream flatMapToLong(Function arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "flatMapToLong", "(Ljava.util.function.Function;)Ljava.util.stream.LongStream;", arg0)); }

    DoubleStream flatMapToDouble(Function arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "flatMapToDouble", "(Ljava.util.function.Function;)Ljava.util.stream.DoubleStream;", arg0)); }

    IntStream mapToInt(ToIntFunction arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "mapToInt", "(Ljava.util.function.ToIntFunction;)Ljava.util.stream.IntStream;", arg0)); }

    LongStream mapToLong(ToLongFunction arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "mapToLong", "(Ljava.util.function.ToLongFunction;)Ljava.util.stream.LongStream;", arg0)); }

    DoubleStream mapToDouble(ToDoubleFunction arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "mapToDouble", "(Ljava.util.function.ToDoubleFunction;)Ljava.util.stream.DoubleStream;", arg0)); }

    Stream mapMulti(BiConsumer arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "mapMulti", "(Ljava.util.function.BiConsumer;)Ljava.util.stream.Stream;", arg0)); }

    IntStream mapMultiToInt(BiConsumer arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "mapMultiToInt", "(Ljava.util.function.BiConsumer;)Ljava.util.stream.IntStream;", arg0)); }

    LongStream mapMultiToLong(BiConsumer arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "mapMultiToLong", "(Ljava.util.function.BiConsumer;)Ljava.util.stream.LongStream;", arg0)); }

    DoubleStream mapMultiToDouble(BiConsumer arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "mapMultiToDouble", "(Ljava.util.function.BiConsumer;)Ljava.util.stream.DoubleStream;", arg0)); }

    Stream takeWhile(Predicate arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "takeWhile", "(Ljava.util.function.Predicate;)Ljava.util.stream.Stream;", arg0)); }

    Stream dropWhile(Predicate arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "dropWhile", "(Ljava.util.function.Predicate;)Ljava.util.stream.Stream;", arg0)); }

    void forEachOrdered(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachOrdered", "(Ljava.util.function.Consumer;)V", arg0)); }

    bool noneMatch(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "noneMatch", "(Ljava.util.function.Predicate;)Z", arg0)); }

    static DoubleStream lambda_mapMultiToDouble_3(BiConsumer arg0, Object arg1) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$mapMultiToDouble$3", "(Ljava.util.function.BiConsumer;Ljava.lang.Object;)Ljava.util.stream.DoubleStream;", arg0, arg1)); }

    static LongStream lambda_mapMultiToLong_2(BiConsumer arg0, Object arg1) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$mapMultiToLong$2", "(Ljava.util.function.BiConsumer;Ljava.lang.Object;)Ljava.util.stream.LongStream;", arg0, arg1)); }

    static IntStream lambda_mapMultiToInt_1(BiConsumer arg0, Object arg1) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$mapMultiToInt$1", "(Ljava.util.function.BiConsumer;Ljava.lang.Object;)Ljava.util.stream.IntStream;", arg0, arg1)); }

    static Stream lambda_mapMulti_0(BiConsumer arg0, Object arg1) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$mapMulti$0", "(Ljava.util.function.BiConsumer;Ljava.lang.Object;)Ljava.util.stream.Stream;", arg0, arg1)); }

};


/**
 * Classpath: java.util.Comparator
 * Package name: java.util
 */
class Comparator : public JavaObject {
protected:
    const inline static char *className = "java.util.Comparator";
public:
    STATICINITIALIZE;

    Comparator(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int compare(Object arg0, Object arg1) { return int(*javaClass->invokeMethod<int>(this->object, "compare", "(Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1)); }

    static Comparator reverseOrder() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "reverseOrder", "()Ljava.util.Comparator;", )); }

    static Comparator comparing(Function arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparing", "(Ljava.util.function.Function;)Ljava.util.Comparator;", arg0)); }

    static Comparator comparing(Function arg0, Comparator arg1) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparing", "(Ljava.util.function.Function;Ljava.util.Comparator;)Ljava.util.Comparator;", arg0, arg1)); }

    Comparator thenComparing(Comparator arg0) { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "thenComparing", "(Ljava.util.Comparator;)Ljava.util.Comparator;", arg0)); }

    Comparator thenComparing(Function arg0, Comparator arg1) { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "thenComparing", "(Ljava.util.function.Function;Ljava.util.Comparator;)Ljava.util.Comparator;", arg0, arg1)); }

    Comparator thenComparing(Function arg0) { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "thenComparing", "(Ljava.util.function.Function;)Ljava.util.Comparator;", arg0)); }

    static Comparator comparingInt(ToIntFunction arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparingInt", "(Ljava.util.function.ToIntFunction;)Ljava.util.Comparator;", arg0)); }

    static Comparator comparingLong(ToLongFunction arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparingLong", "(Ljava.util.function.ToLongFunction;)Ljava.util.Comparator;", arg0)); }

    static Comparator comparingDouble(ToDoubleFunction arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparingDouble", "(Ljava.util.function.ToDoubleFunction;)Ljava.util.Comparator;", arg0)); }

    static int lambda_comparingLong_6043328a_1(ToLongFunction arg0, Object arg1, Object arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparingLong$6043328a$1", "(Ljava.util.function.ToLongFunction;Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1, arg2)); }

    static int lambda_comparing_ea9a8b3a_1(Comparator arg0, Function arg1, Object arg2, Object arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparing$ea9a8b3a$1", "(Ljava.util.Comparator;Ljava.util.function.Function;Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1, arg2, arg3)); }

    static int lambda_comparing_77a9974f_1(Function arg0, Object arg1, Object arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparing$77a9974f$1", "(Ljava.util.function.Function;Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1, arg2)); }

    static int lambda_comparingDouble_8dcf42ea_1(ToDoubleFunction arg0, Object arg1, Object arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparingDouble$8dcf42ea$1", "(Ljava.util.function.ToDoubleFunction;Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1, arg2)); }

    int lambda_thenComparing_36697e65_1(Comparator arg0, Object arg1, Object arg2) { return int(*javaClass->invokeMethod<int>(this->object, "lambda$thenComparing$36697e65$1", "(Ljava.util.Comparator;Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1, arg2)); }

    static int lambda_comparingInt_7b0bb60_1(ToIntFunction arg0, Object arg1, Object arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparingInt$7b0bb60$1", "(Ljava.util.function.ToIntFunction;Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1, arg2)); }

    Comparator reversed() { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "reversed", "()Ljava.util.Comparator;", )); }

    Comparator thenComparingInt(ToIntFunction arg0) { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "thenComparingInt", "(Ljava.util.function.ToIntFunction;)Ljava.util.Comparator;", arg0)); }

    Comparator thenComparingLong(ToLongFunction arg0) { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "thenComparingLong", "(Ljava.util.function.ToLongFunction;)Ljava.util.Comparator;", arg0)); }

    Comparator thenComparingDouble(ToDoubleFunction arg0) { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "thenComparingDouble", "(Ljava.util.function.ToDoubleFunction;)Ljava.util.Comparator;", arg0)); }

    static Comparator naturalOrder() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "naturalOrder", "()Ljava.util.Comparator;", )); }

    static Comparator nullsFirst(Comparator arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "nullsFirst", "(Ljava.util.Comparator;)Ljava.util.Comparator;", arg0)); }

    static Comparator nullsLast(Comparator arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "nullsLast", "(Ljava.util.Comparator;)Ljava.util.Comparator;", arg0)); }

    static Object _deserializeLambda_(SerializedLambda arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "$deserializeLambda$", "(Ljava.lang.invoke.SerializedLambda;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.function.Function
 * Package name: java.util.function
 */
class Function : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Function";
public:
    STATICINITIALIZE;

    Function(jobject object) : JavaObject(object) {}

    Object apply(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "apply", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Function identity() { return Function(*javaClass->invokeStaticMethod<jobject>(this->object, "identity", "()Ljava.util.function.Function;", )); }

    Function compose(Function arg0) { return Function(*javaClass->invokeMethod<jobject>(this->object, "compose", "(Ljava.util.function.Function;)Ljava.util.function.Function;", arg0)); }

    Function andThen(Function arg0) { return Function(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.Function;)Ljava.util.function.Function;", arg0)); }

    static Object lambda_identity_2(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$identity$2", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object lambda_andThen_1(Function arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "lambda$andThen$1", "(Ljava.util.function.Function;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object lambda_compose_0(Function arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "lambda$compose$0", "(Ljava.util.function.Function;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.ToIntFunction
 * Package name: java.util.function
 */
class ToIntFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToIntFunction";
public:
    STATICINITIALIZE;

    ToIntFunction(jobject object) : JavaObject(object) {}

    int applyAsInt(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "applyAsInt", "(Ljava.lang.Object;)I", arg0)); }

};


/**
 * Classpath: java.util.function.ToLongFunction
 * Package name: java.util.function
 */
class ToLongFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToLongFunction";
public:
    STATICINITIALIZE;

    ToLongFunction(jobject object) : JavaObject(object) {}

    long applyAsLong(Object arg0) { return long(*javaClass->invokeMethod<long>(this->object, "applyAsLong", "(Ljava.lang.Object;)J", arg0)); }

};


/**
 * Classpath: java.util.function.ToDoubleFunction
 * Package name: java.util.function
 */
class ToDoubleFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToDoubleFunction";
public:
    STATICINITIALIZE;

    ToDoubleFunction(jobject object) : JavaObject(object) {}

    double applyAsDouble(Object arg0) { return double(*javaClass->invokeMethod<double>(this->object, "applyAsDouble", "(Ljava.lang.Object;)D", arg0)); }

};


/**
 * Classpath: java.lang.invoke.SerializedLambda
 * Package name: java.lang.invoke
 */
class SerializedLambda : public Object {
protected:
    const inline static char *className = "java.lang.invoke.SerializedLambda";
public:
    STATICINITIALIZE;

    SerializedLambda(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

    String getImplMethodName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getImplMethodName", "()Ljava.lang.String;", )); }

    int getImplMethodKind() { return int(*javaClass->invokeMethod<int>(this->object, "getImplMethodKind", "()I", )); }

    String getFunctionalInterfaceClass() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFunctionalInterfaceClass", "()Ljava.lang.String;", )); }

    String getFunctionalInterfaceMethodName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFunctionalInterfaceMethodName", "()Ljava.lang.String;", )); }

    String getFunctionalInterfaceMethodSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFunctionalInterfaceMethodSignature", "()Ljava.lang.String;", )); }

    String getImplClass() { return String(*javaClass->invokeMethod<jobject>(this->object, "getImplClass", "()Ljava.lang.String;", )); }

    String getImplMethodSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "getImplMethodSignature", "()Ljava.lang.String;", )); }

    Object getCapturedArg(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getCapturedArg", "(I)Ljava.lang.Object;", arg0)); }

    String getCapturingClass() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCapturingClass", "()Ljava.lang.String;", )); }

    String getInstantiatedMethodType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getInstantiatedMethodType", "()Ljava.lang.String;", )); }

    int getCapturedArgCount() { return int(*javaClass->invokeMethod<int>(this->object, "getCapturedArgCount", "()I", )); }

};


/**
 * Classpath: java.util.Optional
 * Package name: java.util
 */
class Optional : public Object {
protected:
    const inline static char *className = "java.util.Optional";
public:
    STATICINITIALIZE;

    Optional(jobject object) : JavaObject(object) {}

    Object get() { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "()Ljava.lang.Object;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    Optional map(Function arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "map", "(Ljava.util.function.Function;)Ljava.util.Optional;", arg0)); }

    Stream stream() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "stream", "()Ljava.util.stream.Stream;", )); }

    static Optional of(Object arg0) { return Optional(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;)Ljava.util.Optional;", arg0)); }

    Optional filter(Predicate arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "filter", "(Ljava.util.function.Predicate;)Ljava.util.Optional;", arg0)); }

    static Optional empty() { return Optional(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.Optional;", )); }

    Optional flatMap(Function arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "flatMap", "(Ljava.util.function.Function;)Ljava.util.Optional;", arg0)); }

    bool isPresent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPresent", "()Z", )); }

    Object orElse(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "orElse", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object orElseThrow(Supplier arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "orElseThrow", "(Ljava.util.function.Supplier;)Ljava.lang.Object;", arg0)); }

    Object orElseThrow() { return Object(*javaClass->invokeMethod<jobject>(this->object, "orElseThrow", "()Ljava.lang.Object;", )); }

    void ifPresent(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "ifPresent", "(Ljava.util.function.Consumer;)V", arg0)); }

    static Optional ofNullable(Object arg0) { return Optional(*javaClass->invokeStaticMethod<jobject>(this->object, "ofNullable", "(Ljava.lang.Object;)Ljava.util.Optional;", arg0)); }

    void ifPresentOrElse(Consumer arg0, Runnable arg1) { (*javaClass->invokeMethod<void>(this->object, "ifPresentOrElse", "(Ljava.util.function.Consumer;Ljava.lang.Runnable;)V", arg0, arg1)); }

    Optional or(Supplier arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "or", "(Ljava.util.function.Supplier;)Ljava.util.Optional;", arg0)); }

    Object orElseGet(Supplier arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "orElseGet", "(Ljava.util.function.Supplier;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.function.Predicate
 * Package name: java.util.function
 */
class Predicate : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Predicate";
public:
    STATICINITIALIZE;

    Predicate(jobject object) : JavaObject(object) {}

    bool test(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "test", "(Ljava.lang.Object;)Z", arg0)); }

    Predicate negate() { return Predicate(*javaClass->invokeMethod<jobject>(this->object, "negate", "()Ljava.util.function.Predicate;", )); }

    Predicate and(Predicate arg0) { return Predicate(*javaClass->invokeMethod<jobject>(this->object, "and", "(Ljava.util.function.Predicate;)Ljava.util.function.Predicate;", arg0)); }

    static Predicate isEqual(Object arg0) { return Predicate(*javaClass->invokeStaticMethod<jobject>(this->object, "isEqual", "(Ljava.lang.Object;)Ljava.util.function.Predicate;", arg0)); }

    static Predicate not(Predicate arg0) { return Predicate(*javaClass->invokeStaticMethod<jobject>(this->object, "not", "(Ljava.util.function.Predicate;)Ljava.util.function.Predicate;", arg0)); }

    static bool lambda_isEqual_3(Object arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$isEqual$3", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool lambda_or_2(Predicate arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$or$2", "(Ljava.util.function.Predicate;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool lambda_negate_1(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$negate$1", "(Ljava.lang.Object;)Z", arg0)); }

    bool lambda_and_0(Predicate arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$and$0", "(Ljava.util.function.Predicate;Ljava.lang.Object;)Z", arg0, arg1)); }

    Predicate or(Predicate arg0) { return Predicate(*javaClass->invokeMethod<jobject>(this->object, "or", "(Ljava.util.function.Predicate;)Ljava.util.function.Predicate;", arg0)); }

};


/**
 * Classpath: java.util.function.Supplier
 * Package name: java.util.function
 */
class Supplier : public JavaObject {
protected:
    const inline static char *className = "java.util.function.Supplier";
public:
    STATICINITIALIZE;

    Supplier(jobject object) : JavaObject(object) {}

    Object get() { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.lang.Runnable
 * Package name: java.lang
 */
class Runnable : public JavaObject {
protected:
    const inline static char *className = "java.lang.Runnable";
public:
    STATICINITIALIZE;

    Runnable(jobject object) : JavaObject(object) {}

    void run() { (*javaClass->invokeMethod<void>(this->object, "run", "()V", )); }

};


/**
 * Classpath: java.util.function.BiConsumer
 * Package name: java.util.function
 */
class BiConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.BiConsumer";
public:
    STATICINITIALIZE;

    BiConsumer(jobject object) : JavaObject(object) {}

    void accept(Object arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1)); }

    BiConsumer andThen(BiConsumer arg0) { return BiConsumer(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.BiConsumer;)Ljava.util.function.BiConsumer;", arg0)); }

    void lambda_andThen_0(BiConsumer arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "lambda$andThen$0", "(Ljava.util.function.BiConsumer;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.util.stream.Collector
 * Package name: java.util.stream
 */
class Collector : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.Collector";
public:
    STATICINITIALIZE;

    Collector(jobject object) : JavaObject(object) {}

    static Collector of(Supplier arg0, BiConsumer arg1, BinaryOperator arg2, Function arg3, Collector_Characteristics_interface arg4) { return Collector(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.util.function.Supplier;Ljava.util.function.BiConsumer;Ljava.util.function.BinaryOperator;Ljava.util.function.Function;[Ljava.util.stream.Collector$Characteristics;)Ljava.util.stream.Collector;", arg0, arg1, arg2, arg3, arg4)); }

    static Collector of(Supplier arg0, BiConsumer arg1, BinaryOperator arg2, Collector_Characteristics_interface arg3) { return Collector(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.util.function.Supplier;Ljava.util.function.BiConsumer;Ljava.util.function.BinaryOperator;[Ljava.util.stream.Collector$Characteristics;)Ljava.util.stream.Collector;", arg0, arg1, arg2, arg3)); }

    Set characteristics() { return Set(*javaClass->invokeMethod<jobject>(this->object, "characteristics", "()Ljava.util.Set;", )); }

    BinaryOperator combiner() { return BinaryOperator(*javaClass->invokeMethod<jobject>(this->object, "combiner", "()Ljava.util.function.BinaryOperator;", )); }

    Supplier supplier() { return Supplier(*javaClass->invokeMethod<jobject>(this->object, "supplier", "()Ljava.util.function.Supplier;", )); }

    BiConsumer accumulator() { return BiConsumer(*javaClass->invokeMethod<jobject>(this->object, "accumulator", "()Ljava.util.function.BiConsumer;", )); }

    Function finisher() { return Function(*javaClass->invokeMethod<jobject>(this->object, "finisher", "()Ljava.util.function.Function;", )); }

};


/**
 * Classpath: java.util.function.BinaryOperator
 * Package name: java.util.function
 */
class BinaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.BinaryOperator";
public:
    STATICINITIALIZE;

    BinaryOperator(jobject object) : JavaObject(object) {}

    static BinaryOperator maxBy(Comparator arg0) { return BinaryOperator(*javaClass->invokeStaticMethod<jobject>(this->object, "maxBy", "(Ljava.util.Comparator;)Ljava.util.function.BinaryOperator;", arg0)); }

    static BinaryOperator minBy(Comparator arg0) { return BinaryOperator(*javaClass->invokeStaticMethod<jobject>(this->object, "minBy", "(Ljava.util.Comparator;)Ljava.util.function.BinaryOperator;", arg0)); }

    static Object lambda_maxBy_1(Comparator arg0, Object arg1, Object arg2) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$maxBy$1", "(Ljava.util.Comparator;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    static Object lambda_minBy_0(Comparator arg0, Object arg1, Object arg2) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$minBy$0", "(Ljava.util.Comparator;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2)); }

};


/**
 * Classpath: [Ljava.util.stream.Collector$Characteristics;
 */
class Collector_Characteristics_interface : public Object {
protected:
    const inline static char *className = "[Ljava.util.stream.Collector$Characteristics;";
public:
    STATICINITIALIZE;

    Collector_Characteristics_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.util.Set
 * Package name: java.util
 */
class Set : public JavaObject {
protected:
    const inline static char *className = "java.util.Set";
public:
    STATICINITIALIZE;

    Set(jobject object) : JavaObject(object) {}

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static Set copyOf(Collection arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Collection;)Ljava.util.Set;", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    static Set of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static Set of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2, arg3, arg4)); }

    static Set of(Object arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;)Ljava.util.Set;", arg0)); }

    static Set of(Object arg0, Object arg1, Object arg2, Object arg3) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2, arg3)); }

    static Set of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static Set of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    static Set of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static Set of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static Set of(Object_interface arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "([Ljava.lang.Object;)Ljava.util.Set;", arg0)); }

    static Set of(Object arg0, Object arg1, Object arg2) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1, arg2)); }

    static Set of() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Ljava.util.Set;", )); }

    static Set of(Object arg0, Object arg1) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Set;", arg0, arg1)); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

};


/**
 * Classpath: java.util.Collection
 * Package name: java.util
 */
class Collection : public JavaObject {
protected:
    const inline static char *className = "java.util.Collection";
public:
    STATICINITIALIZE;

    Collection(jobject object) : JavaObject(object) {}

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    Stream stream() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "stream", "()Ljava.util.stream.Stream;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool removeIf(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeIf", "(Ljava.util.function.Predicate;)Z", arg0)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

    Stream parallelStream() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "parallelStream", "()Ljava.util.stream.Stream;", )); }

};


/**
 * Classpath: java.util.Spliterator
 * Package name: java.util
 */
class Spliterator : public JavaObject {
protected:
    const inline static char *className = "java.util.Spliterator";
public:
    STATICINITIALIZE;

    Spliterator(jobject object) : JavaObject(object) {}

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    int characteristics() { return int(*javaClass->invokeMethod<int>(this->object, "characteristics", "()I", )); }

    bool tryAdvance(Consumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.util.function.Consumer;)Z", arg0)); }

    long estimateSize() { return long(*javaClass->invokeMethod<long>(this->object, "estimateSize", "()J", )); }

    Spliterator trySplit() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator;", )); }

    long getExactSizeIfKnown() { return long(*javaClass->invokeMethod<long>(this->object, "getExactSizeIfKnown", "()J", )); }

    bool hasCharacteristics(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasCharacteristics", "(I)Z", arg0)); }

    Comparator getComparator() { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "getComparator", "()Ljava.util.Comparator;", )); }

};


/**
 * Classpath: [Ljava.lang.Object;
 */
class Object_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Object;";
public:
    STATICINITIALIZE;

    Object_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.util.List
 * Package name: java.util
 */
class List : public JavaObject {
protected:
    const inline static char *className = "java.util.List";
public:
    STATICINITIALIZE;

    List(jobject object) : JavaObject(object) {}

    void add(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(ILjava.lang.Object;)V", arg0, arg1)); }

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    Object remove(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(I)Ljava.lang.Object;", arg0)); }

    Object get(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Ljava.lang.Object;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static List copyOf(Collection arg0) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Collection;)Ljava.util.List;", arg0)); }

    int indexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.Object;)I", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int lastIndexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.Object;)I", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    void replaceAll(UnaryOperator arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.UnaryOperator;)V", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    List subList(int arg0, int arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "subList", "(II)Ljava.util.List;", arg0, arg1)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    static List of(Object arg0, Object arg1, Object arg2, Object arg3) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2, arg3)); }

    static List of(Object arg0, Object arg1, Object arg2) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2)); }

    static List of(Object arg0, Object arg1) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1)); }

    static List of(Object arg0) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;)Ljava.util.List;", arg0)); }

    static List of() { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Ljava.util.List;", )); }

    static List of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static List of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static List of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static List of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4)); }

    static List of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static List of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    static List of(Object_interface arg0) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "([Ljava.lang.Object;)Ljava.util.List;", arg0)); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    bool addAll(int arg0, Collection arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(ILjava.util.Collection;)Z", arg0, arg1)); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    Object set(int arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "set", "(ILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void sort(Comparator arg0) { (*javaClass->invokeMethod<void>(this->object, "sort", "(Ljava.util.Comparator;)V", arg0)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    ListIterator listIterator(int arg0) { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "(I)Ljava.util.ListIterator;", arg0)); }

    ListIterator listIterator() { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "()Ljava.util.ListIterator;", )); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

};


/**
 * Classpath: java.util.function.UnaryOperator
 * Package name: java.util.function
 */
class UnaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.UnaryOperator";
public:
    STATICINITIALIZE;

    UnaryOperator(jobject object) : JavaObject(object) {}

    static UnaryOperator identity() { return UnaryOperator(*javaClass->invokeStaticMethod<jobject>(this->object, "identity", "()Ljava.util.function.UnaryOperator;", )); }

    static Object lambda_identity_0(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$identity$0", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.ListIterator
 * Package name: java.util
 */
class ListIterator : public JavaObject {
protected:
    const inline static char *className = "java.util.ListIterator";
public:
    STATICINITIALIZE;

    ListIterator(jobject object) : JavaObject(object) {}

    void add(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.Object;)V", arg0)); }

    void remove() { (*javaClass->invokeMethod<void>(this->object, "remove", "()V", )); }

    bool hasNext() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNext", "()Z", )); }

    Object next() { return Object(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Object;", )); }

    void set(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.lang.Object;)V", arg0)); }

    int nextIndex() { return int(*javaClass->invokeMethod<int>(this->object, "nextIndex", "()I", )); }

    int previousIndex() { return int(*javaClass->invokeMethod<int>(this->object, "previousIndex", "()I", )); }

    bool hasPrevious() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPrevious", "()Z", )); }

    Object previous() { return Object(*javaClass->invokeMethod<jobject>(this->object, "previous", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.util.stream.Stream$Builder
 * Enclosing class: java.util.stream.Stream
 * Package name: java.util.stream
 */
class Stream_Builder : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.Stream$Builder";
public:
    STATICINITIALIZE;

    Stream_Builder(jobject object) : JavaObject(object) {}

    Stream_Builder add(Object arg0) { return Stream_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Ljava.util.stream.Stream$Builder;", arg0)); }

    void accept(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljava.lang.Object;)V", arg0)); }

    Stream build() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "build", "()Ljava.util.stream.Stream;", )); }

};


/**
 * Classpath: java.util.function.BiFunction
 * Package name: java.util.function
 */
class BiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.BiFunction";
public:
    STATICINITIALIZE;

    BiFunction(jobject object) : JavaObject(object) {}

    Object apply(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "apply", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    BiFunction andThen(Function arg0) { return BiFunction(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.Function;)Ljava.util.function.BiFunction;", arg0)); }

    Object lambda_andThen_0(Function arg0, Object arg1, Object arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "lambda$andThen$0", "(Ljava.util.function.Function;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.util.stream.IntStream
 * Package name: java.util.stream
 */
class IntStream : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.IntStream";
public:
    STATICINITIALIZE;

    IntStream(jobject object) : JavaObject(object) {}

    OptionalDouble average() { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "average", "()Ljava.util.OptionalDouble;", )); }

    OptionalInt min() { return OptionalInt(*javaClass->invokeMethod<jobject>(this->object, "min", "()Ljava.util.OptionalInt;", )); }

    OptionalInt max() { return OptionalInt(*javaClass->invokeMethod<jobject>(this->object, "max", "()Ljava.util.OptionalInt;", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    PrimitiveIterator_OfInt iterator() { return PrimitiveIterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.PrimitiveIterator$OfInt;", )); }

    IntStream map(IntUnaryOperator arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "map", "(Ljava.util.function.IntUnaryOperator;)Ljava.util.stream.IntStream;", arg0)); }

    Object collect(Supplier arg0, ObjIntConsumer arg1, BiConsumer arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "collect", "(Ljava.util.function.Supplier;Ljava.util.function.ObjIntConsumer;Ljava.util.function.BiConsumer;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    static IntStream of(arr_I arg0) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "([I)Ljava.util.stream.IntStream;", arg0)); }

    static IntStream of(int arg0) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(I)Ljava.util.stream.IntStream;", arg0)); }

    long count() { return long(*javaClass->invokeMethod<long>(this->object, "count", "()J", )); }

    static IntStream_Builder builder() { return IntStream_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Ljava.util.stream.IntStream$Builder;", )); }

    static IntStream concat(IntStream arg0, IntStream arg1) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "concat", "(Ljava.util.stream.IntStream;Ljava.util.stream.IntStream;)Ljava.util.stream.IntStream;", arg0, arg1)); }

    IntStream limit(long arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "limit", "(J)Ljava.util.stream.IntStream;", arg0)); }

    Spliterator_OfInt spliterator() { return Spliterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator$OfInt;", )); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    IntStream filter(IntPredicate arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "filter", "(Ljava.util.function.IntPredicate;)Ljava.util.stream.IntStream;", arg0)); }

    static IntStream empty() { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.stream.IntStream;", )); }

    bool anyMatch(IntPredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "anyMatch", "(Ljava.util.function.IntPredicate;)Z", arg0)); }

    IntStream flatMap(IntFunction arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "flatMap", "(Ljava.util.function.IntFunction;)Ljava.util.stream.IntStream;", arg0)); }

    void forEach(IntConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.IntConsumer;)V", arg0)); }

    OptionalInt findAny() { return OptionalInt(*javaClass->invokeMethod<jobject>(this->object, "findAny", "()Ljava.util.OptionalInt;", )); }

    IntStream skip(long arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "skip", "(J)Ljava.util.stream.IntStream;", arg0)); }

    IntStream peek(IntConsumer arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "peek", "(Ljava.util.function.IntConsumer;)Ljava.util.stream.IntStream;", arg0)); }

    int sum() { return int(*javaClass->invokeMethod<int>(this->object, "sum", "()I", )); }

    OptionalInt reduce(IntBinaryOperator arg0) { return OptionalInt(*javaClass->invokeMethod<jobject>(this->object, "reduce", "(Ljava.util.function.IntBinaryOperator;)Ljava.util.OptionalInt;", arg0)); }

    int reduce(int arg0, IntBinaryOperator arg1) { return int(*javaClass->invokeMethod<int>(this->object, "reduce", "(ILjava.util.function.IntBinaryOperator;)I", arg0, arg1)); }

    IntStream distinct() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "distinct", "()Ljava.util.stream.IntStream;", )); }

    OptionalInt findFirst() { return OptionalInt(*javaClass->invokeMethod<jobject>(this->object, "findFirst", "()Ljava.util.OptionalInt;", )); }

    bool allMatch(IntPredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "allMatch", "(Ljava.util.function.IntPredicate;)Z", arg0)); }

    Stream mapToObj(IntFunction arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "mapToObj", "(Ljava.util.function.IntFunction;)Ljava.util.stream.Stream;", arg0)); }

    IntSummaryStatistics summaryStatistics() { return IntSummaryStatistics(*javaClass->invokeMethod<jobject>(this->object, "summaryStatistics", "()Ljava.util.IntSummaryStatistics;", )); }

    LongStream asLongStream() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "asLongStream", "()Ljava.util.stream.LongStream;", )); }

    DoubleStream asDoubleStream() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "asDoubleStream", "()Ljava.util.stream.DoubleStream;", )); }

    Stream boxed() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "boxed", "()Ljava.util.stream.Stream;", )); }

    static IntStream rangeClosed(int arg0, int arg1) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "rangeClosed", "(II)Ljava.util.stream.IntStream;", arg0, arg1)); }

    static IntStream iterate(int arg0, IntPredicate arg1, IntUnaryOperator arg2) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(ILjava.util.function.IntPredicate;Ljava.util.function.IntUnaryOperator;)Ljava.util.stream.IntStream;", arg0, arg1, arg2)); }

    static IntStream iterate(int arg0, IntUnaryOperator arg1) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(ILjava.util.function.IntUnaryOperator;)Ljava.util.stream.IntStream;", arg0, arg1)); }

    static IntStream range(int arg0, int arg1) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "range", "(II)Ljava.util.stream.IntStream;", arg0, arg1)); }

    BaseStream parallel() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "parallel", "()Ljava.util.stream.BaseStream;", )); }

    IntStream parallel() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "parallel", "()Ljava.util.stream.IntStream;", )); }

    IntStream sorted() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "sorted", "()Ljava.util.stream.IntStream;", )); }

    static IntStream generate(IntSupplier arg0) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "generate", "(Ljava.util.function.IntSupplier;)Ljava.util.stream.IntStream;", arg0)); }

    LongStream mapToLong(IntToLongFunction arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "mapToLong", "(Ljava.util.function.IntToLongFunction;)Ljava.util.stream.LongStream;", arg0)); }

    DoubleStream mapToDouble(IntToDoubleFunction arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "mapToDouble", "(Ljava.util.function.IntToDoubleFunction;)Ljava.util.stream.DoubleStream;", arg0)); }

    IntStream mapMulti(IntStream_IntMapMultiConsumer arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "mapMulti", "(Ljava.util.stream.IntStream$IntMapMultiConsumer;)Ljava.util.stream.IntStream;", arg0)); }

    IntStream takeWhile(IntPredicate arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "takeWhile", "(Ljava.util.function.IntPredicate;)Ljava.util.stream.IntStream;", arg0)); }

    IntStream dropWhile(IntPredicate arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "dropWhile", "(Ljava.util.function.IntPredicate;)Ljava.util.stream.IntStream;", arg0)); }

    void forEachOrdered(IntConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachOrdered", "(Ljava.util.function.IntConsumer;)V", arg0)); }

    bool noneMatch(IntPredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "noneMatch", "(Ljava.util.function.IntPredicate;)Z", arg0)); }

    static IntStream lambda_mapMulti_0(IntStream_IntMapMultiConsumer arg0, int arg1) { return IntStream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$mapMulti$0", "(Ljava.util.stream.IntStream$IntMapMultiConsumer;I)Ljava.util.stream.IntStream;", arg0, arg1)); }

    IntStream sequential() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "sequential", "()Ljava.util.stream.IntStream;", )); }

    BaseStream sequential() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "sequential", "()Ljava.util.stream.BaseStream;", )); }

};


/**
 * Classpath: java.util.OptionalDouble
 * Package name: java.util
 */
class OptionalDouble : public Object {
protected:
    const inline static char *className = "java.util.OptionalDouble";
public:
    STATICINITIALIZE;

    OptionalDouble(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    DoubleStream stream() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "stream", "()Ljava.util.stream.DoubleStream;", )); }

    static OptionalDouble of(double arg0) { return OptionalDouble(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(D)Ljava.util.OptionalDouble;", arg0)); }

    static OptionalDouble empty() { return OptionalDouble(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.OptionalDouble;", )); }

    bool isPresent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPresent", "()Z", )); }

    double orElse(double arg0) { return double(*javaClass->invokeMethod<double>(this->object, "orElse", "(D)D", arg0)); }

    double orElseThrow(Supplier arg0) { return double(*javaClass->invokeMethod<double>(this->object, "orElseThrow", "(Ljava.util.function.Supplier;)D", arg0)); }

    double orElseThrow() { return double(*javaClass->invokeMethod<double>(this->object, "orElseThrow", "()D", )); }

    double getAsDouble() { return double(*javaClass->invokeMethod<double>(this->object, "getAsDouble", "()D", )); }

    void ifPresent(DoubleConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "ifPresent", "(Ljava.util.function.DoubleConsumer;)V", arg0)); }

    void ifPresentOrElse(DoubleConsumer arg0, Runnable arg1) { (*javaClass->invokeMethod<void>(this->object, "ifPresentOrElse", "(Ljava.util.function.DoubleConsumer;Ljava.lang.Runnable;)V", arg0, arg1)); }

    double orElseGet(DoubleSupplier arg0) { return double(*javaClass->invokeMethod<double>(this->object, "orElseGet", "(Ljava.util.function.DoubleSupplier;)D", arg0)); }

};


/**
 * Classpath: java.util.stream.DoubleStream
 * Package name: java.util.stream
 */
class DoubleStream : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.DoubleStream";
public:
    STATICINITIALIZE;

    DoubleStream(jobject object) : JavaObject(object) {}

    OptionalDouble average() { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "average", "()Ljava.util.OptionalDouble;", )); }

    OptionalDouble min() { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "min", "()Ljava.util.OptionalDouble;", )); }

    OptionalDouble max() { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "max", "()Ljava.util.OptionalDouble;", )); }

    PrimitiveIterator_OfDouble iterator() { return PrimitiveIterator_OfDouble(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.PrimitiveIterator$OfDouble;", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    DoubleStream map(DoubleUnaryOperator arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "map", "(Ljava.util.function.DoubleUnaryOperator;)Ljava.util.stream.DoubleStream;", arg0)); }

    Object collect(Supplier arg0, ObjDoubleConsumer arg1, BiConsumer arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "collect", "(Ljava.util.function.Supplier;Ljava.util.function.ObjDoubleConsumer;Ljava.util.function.BiConsumer;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    static DoubleStream of(double arg0) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(D)Ljava.util.stream.DoubleStream;", arg0)); }

    static DoubleStream of(arr_D arg0) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "([D)Ljava.util.stream.DoubleStream;", arg0)); }

    long count() { return long(*javaClass->invokeMethod<long>(this->object, "count", "()J", )); }

    static DoubleStream_Builder builder() { return DoubleStream_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Ljava.util.stream.DoubleStream$Builder;", )); }

    static DoubleStream concat(DoubleStream arg0, DoubleStream arg1) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "concat", "(Ljava.util.stream.DoubleStream;Ljava.util.stream.DoubleStream;)Ljava.util.stream.DoubleStream;", arg0, arg1)); }

    DoubleStream limit(long arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "limit", "(J)Ljava.util.stream.DoubleStream;", arg0)); }

    Spliterator_OfDouble spliterator() { return Spliterator_OfDouble(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator$OfDouble;", )); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    DoubleStream filter(DoublePredicate arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "filter", "(Ljava.util.function.DoublePredicate;)Ljava.util.stream.DoubleStream;", arg0)); }

    static DoubleStream empty() { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.stream.DoubleStream;", )); }

    bool anyMatch(DoublePredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "anyMatch", "(Ljava.util.function.DoublePredicate;)Z", arg0)); }

    DoubleStream flatMap(DoubleFunction arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "flatMap", "(Ljava.util.function.DoubleFunction;)Ljava.util.stream.DoubleStream;", arg0)); }

    void forEach(DoubleConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.DoubleConsumer;)V", arg0)); }

    OptionalDouble findAny() { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "findAny", "()Ljava.util.OptionalDouble;", )); }

    DoubleStream skip(long arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "skip", "(J)Ljava.util.stream.DoubleStream;", arg0)); }

    DoubleStream peek(DoubleConsumer arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "peek", "(Ljava.util.function.DoubleConsumer;)Ljava.util.stream.DoubleStream;", arg0)); }

    double sum() { return double(*javaClass->invokeMethod<double>(this->object, "sum", "()D", )); }

    double reduce(double arg0, DoubleBinaryOperator arg1) { return double(*javaClass->invokeMethod<double>(this->object, "reduce", "(DLjava.util.function.DoubleBinaryOperator;)D", arg0, arg1)); }

    OptionalDouble reduce(DoubleBinaryOperator arg0) { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "reduce", "(Ljava.util.function.DoubleBinaryOperator;)Ljava.util.OptionalDouble;", arg0)); }

    DoubleStream distinct() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "distinct", "()Ljava.util.stream.DoubleStream;", )); }

    OptionalDouble findFirst() { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "findFirst", "()Ljava.util.OptionalDouble;", )); }

    bool allMatch(DoublePredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "allMatch", "(Ljava.util.function.DoublePredicate;)Z", arg0)); }

    Stream mapToObj(DoubleFunction arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "mapToObj", "(Ljava.util.function.DoubleFunction;)Ljava.util.stream.Stream;", arg0)); }

    DoubleSummaryStatistics summaryStatistics() { return DoubleSummaryStatistics(*javaClass->invokeMethod<jobject>(this->object, "summaryStatistics", "()Ljava.util.DoubleSummaryStatistics;", )); }

    Stream boxed() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "boxed", "()Ljava.util.stream.Stream;", )); }

    static DoubleStream iterate(double arg0, DoubleUnaryOperator arg1) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(DLjava.util.function.DoubleUnaryOperator;)Ljava.util.stream.DoubleStream;", arg0, arg1)); }

    static DoubleStream iterate(double arg0, DoublePredicate arg1, DoubleUnaryOperator arg2) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(DLjava.util.function.DoublePredicate;Ljava.util.function.DoubleUnaryOperator;)Ljava.util.stream.DoubleStream;", arg0, arg1, arg2)); }

    BaseStream parallel() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "parallel", "()Ljava.util.stream.BaseStream;", )); }

    DoubleStream parallel() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "parallel", "()Ljava.util.stream.DoubleStream;", )); }

    DoubleStream sorted() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "sorted", "()Ljava.util.stream.DoubleStream;", )); }

    static DoubleStream generate(DoubleSupplier arg0) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "generate", "(Ljava.util.function.DoubleSupplier;)Ljava.util.stream.DoubleStream;", arg0)); }

    IntStream mapToInt(DoubleToIntFunction arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "mapToInt", "(Ljava.util.function.DoubleToIntFunction;)Ljava.util.stream.IntStream;", arg0)); }

    LongStream mapToLong(DoubleToLongFunction arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "mapToLong", "(Ljava.util.function.DoubleToLongFunction;)Ljava.util.stream.LongStream;", arg0)); }

    DoubleStream mapMulti(DoubleStream_DoubleMapMultiConsumer arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "mapMulti", "(Ljava.util.stream.DoubleStream$DoubleMapMultiConsumer;)Ljava.util.stream.DoubleStream;", arg0)); }

    DoubleStream takeWhile(DoublePredicate arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "takeWhile", "(Ljava.util.function.DoublePredicate;)Ljava.util.stream.DoubleStream;", arg0)); }

    DoubleStream dropWhile(DoublePredicate arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "dropWhile", "(Ljava.util.function.DoublePredicate;)Ljava.util.stream.DoubleStream;", arg0)); }

    void forEachOrdered(DoubleConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachOrdered", "(Ljava.util.function.DoubleConsumer;)V", arg0)); }

    bool noneMatch(DoublePredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "noneMatch", "(Ljava.util.function.DoublePredicate;)Z", arg0)); }

    static DoubleStream lambda_mapMulti_0(DoubleStream_DoubleMapMultiConsumer arg0, double arg1) { return DoubleStream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$mapMulti$0", "(Ljava.util.stream.DoubleStream$DoubleMapMultiConsumer;D)Ljava.util.stream.DoubleStream;", arg0, arg1)); }

    BaseStream sequential() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "sequential", "()Ljava.util.stream.BaseStream;", )); }

    DoubleStream sequential() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "sequential", "()Ljava.util.stream.DoubleStream;", )); }

};


/**
 * Classpath: java.util.PrimitiveIterator$OfDouble
 * Enclosing class: java.util.PrimitiveIterator
 * Package name: java.util
 */
class PrimitiveIterator_OfDouble : public JavaObject {
protected:
    const inline static char *className = "java.util.PrimitiveIterator$OfDouble";
public:
    STATICINITIALIZE;

    PrimitiveIterator_OfDouble(jobject object) : JavaObject(object) {}

    void forEachRemaining(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.lang.Object;)V", arg0)); }

    void forEachRemaining(DoubleConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.DoubleConsumer;)V", arg0)); }

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    Object next() { return Object(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Object;", )); }

    Double next() { return Double(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Double;", )); }

    double nextDouble() { return double(*javaClass->invokeMethod<double>(this->object, "nextDouble", "()D", )); }

};


/**
 * Classpath: java.util.function.DoubleConsumer
 * Package name: java.util.function
 */
class DoubleConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleConsumer";
public:
    STATICINITIALIZE;

    DoubleConsumer(jobject object) : JavaObject(object) {}

    void accept(double arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(D)V", arg0)); }

    DoubleConsumer andThen(DoubleConsumer arg0) { return DoubleConsumer(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.DoubleConsumer;)Ljava.util.function.DoubleConsumer;", arg0)); }

    void lambda_andThen_0(DoubleConsumer arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "lambda$andThen$0", "(Ljava.util.function.DoubleConsumer;D)V", arg0, arg1)); }

};


/**
 * Classpath: java.lang.invoke.MethodHandles$Lookup
 * Enclosing class: java.lang.invoke.MethodHandles
 * Package name: java.lang.invoke
 */
class MethodHandles_Lookup : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandles$Lookup";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup(jobject object) : JavaObject(object) {}

    MethodHandle linkMethodHandleConstant(byte arg0, Class arg1, String arg2, Object arg3) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "linkMethodHandleConstant", "(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2, arg3)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Class findClass(String arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Class defineClass(arr_B arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "([B)Ljava.lang.Class;", arg0)); }

    MethodHandles_Lookup in(Class arg0) { return MethodHandles_Lookup(*javaClass->invokeMethod<jobject>(this->object, "in", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandles$Lookup;", arg0)); }

    void checkAccess(byte arg0, Class arg1, MemberName arg2) { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)V", arg0, arg1, arg2)); }

    MemberName resolveOrNull(byte arg0, Class arg1, String arg2, MethodType arg3) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveOrNull", "(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2, arg3)); }

    MemberName resolveOrNull(byte arg0, MemberName arg1) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveOrNull", "(BLjava.lang.invoke.MemberName;)Ljava.lang.invoke.MemberName;", arg0, arg1)); }

    MemberName resolveOrFail(byte arg0, MemberName arg1) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava.lang.invoke.MemberName;)Ljava.lang.invoke.MemberName;", arg0, arg1)); }

    MemberName resolveOrFail(byte arg0, Class arg1, String arg2, Class arg3) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2, arg3)); }

    MemberName resolveOrFail(byte arg0, Class arg1, String arg2, MethodType arg3) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2, arg3)); }

    Class ensureInitialized(Class arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "ensureInitialized", "(Ljava.lang.Class;)Ljava.lang.Class;", arg0)); }

    MethodHandleInfo revealDirect(MethodHandle arg0) { return MethodHandleInfo(*javaClass->invokeMethod<jobject>(this->object, "revealDirect", "(Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandleInfo;", arg0)); }

    IllegalAccessException makeAccessException(Class arg0) { return IllegalAccessException(*javaClass->invokeMethod<jobject>(this->object, "makeAccessException", "(Ljava.lang.Class;)Ljava.lang.IllegalAccessException;", arg0)); }

    Class lookupClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "lookupClass", "()Ljava.lang.Class;", )); }

    Class previousLookupClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "previousLookupClass", "()Ljava.lang.Class;", )); }

    MethodHandle findVirtual(Class arg0, String arg1, MethodType arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findVirtual", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle findStatic(Class arg0, String arg1, MethodType arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findStatic", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    int lookupModes() { return int(*javaClass->invokeMethod<int>(this->object, "lookupModes", "()I", )); }

    static MethodHandles_Lookup newLookup(Class arg0, Class arg1, int arg2) { return MethodHandles_Lookup(*javaClass->invokeStaticMethod<jobject>(this->object, "newLookup", "(Ljava.lang.Class;Ljava.lang.Class;I)Ljava.lang.invoke.MethodHandles$Lookup;", arg0, arg1, arg2)); }

    static void checkUnprivilegedlookupClass(Class arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "checkUnprivilegedlookupClass", "(Ljava.lang.Class;)V", arg0)); }

    bool isClassAccessible(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isClassAccessible", "(Ljava.lang.Class;)Z", arg0)); }

    void ensureDefineClassPermission() { (*javaClass->invokeMethod<void>(this->object, "ensureDefineClassPermission", "()V", )); }

    MethodHandles_Lookup_ClassDefiner makeClassDefiner(arr_B arg0) { return MethodHandles_Lookup_ClassDefiner(*javaClass->invokeMethod<jobject>(this->object, "makeClassDefiner", "([B)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;", arg0)); }

    bool hasFullPrivilegeAccess() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasFullPrivilegeAccess", "()Z", )); }

    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(arr_B arg0) { return MethodHandles_Lookup_ClassDefiner(*javaClass->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "([B)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;", arg0)); }

    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(arr_B arg0, Set arg1, bool arg2) { return MethodHandles_Lookup_ClassDefiner(*javaClass->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "([BLjava.util.Set;Z)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;", arg0, arg1, arg2)); }

    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(String arg0, arr_B arg1) { return MethodHandles_Lookup_ClassDefiner(*javaClass->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "(Ljava.lang.String;[B)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;", arg0, arg1)); }

    MethodHandles_Lookup_ClassDefiner makeHiddenClassDefiner(MethodHandles_Lookup_ClassFile arg0, Set arg1, bool arg2) { return MethodHandles_Lookup_ClassDefiner(*javaClass->invokeMethod<jobject>(this->object, "makeHiddenClassDefiner", "(Ljava.lang.invoke.MethodHandles$Lookup$ClassFile;Ljava.util.Set;Z)Ljava.lang.invoke.MethodHandles$Lookup$ClassDefiner;", arg0, arg1, arg2)); }

    MethodHandles_Lookup findBoundCallerLookup(MemberName arg0) { return MethodHandles_Lookup(*javaClass->invokeMethod<jobject>(this->object, "findBoundCallerLookup", "(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandles$Lookup;", arg0)); }

    MethodHandle getDirectMethod(byte arg0, Class arg1, MemberName arg2, MethodHandles_Lookup arg3) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectMethod", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2, arg3)); }

    MethodHandle findVirtualForMH(String arg0, MethodType arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findVirtualForMH", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle findVirtualForVH(String arg0, MethodType arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findVirtualForVH", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle getDirectConstructor(Class arg0, MemberName arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectConstructor", "(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    Class accessClass(Class arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "accessClass", "(Ljava.lang.Class;)Ljava.lang.Class;", arg0)); }

    void checkSecurityManager(Class arg0, MemberName arg1) { (*javaClass->invokeMethod<void>(this->object, "checkSecurityManager", "(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)V", arg0, arg1)); }

    void checkSecurityManager(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "checkSecurityManager", "(Ljava.lang.Class;)V", arg0)); }

    void checkSpecialCaller(Class arg0, Class arg1) { (*javaClass->invokeMethod<void>(this->object, "checkSpecialCaller", "(Ljava.lang.Class;Ljava.lang.Class;)V", arg0, arg1)); }

    MethodHandle getDirectField(byte arg0, Class arg1, MemberName arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectField", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    VarHandle getFieldVarHandle(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4) { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "getFieldVarHandle", "(BBLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.VarHandle;", arg0, arg1, arg2, arg3, arg4)); }

    MethodHandle getDirectMethodNoRestrictInvokeSpecial(Class arg0, MemberName arg1, MethodHandles_Lookup arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectMethodNoRestrictInvokeSpecial", "(Ljava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle unreflectForMH(Method arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectForMH", "(Ljava.lang.reflect.Method;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle unreflectForVH(Method arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectForVH", "(Ljava.lang.reflect.Method;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle getDirectMethodNoSecurityManager(byte arg0, Class arg1, MemberName arg2, MethodHandles_Lookup arg3) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectMethodNoSecurityManager", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2, arg3)); }

    MethodHandle getDirectConstructorNoSecurityManager(Class arg0, MemberName arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectConstructorNoSecurityManager", "(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle unreflectField(Field arg0, bool arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectField", "(Ljava.lang.reflect.Field;Z)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle getDirectFieldNoSecurityManager(byte arg0, Class arg1, MemberName arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectFieldNoSecurityManager", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    VarHandle getFieldVarHandleNoSecurityManager(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4) { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "getFieldVarHandleNoSecurityManager", "(BBLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.VarHandle;", arg0, arg1, arg2, arg3, arg4)); }

    void checkSymbolicClass(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "checkSymbolicClass", "(Ljava.lang.Class;)V", arg0)); }

    Class lookupClassOrNull() { return Class(*javaClass->invokeMethod<jobject>(this->object, "lookupClassOrNull", "()Ljava.lang.Class;", )); }

    void checkMethodName(byte arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "checkMethodName", "(BLjava.lang.String;)V", arg0, arg1)); }

    static int fixmods(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "fixmods", "(I)I", arg0)); }

    String accessFailedMessage(Class arg0, MemberName arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "accessFailedMessage", "(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.String;", arg0, arg1)); }

    MethodHandle getDirectMethodCommon(byte arg0, Class arg1, MemberName arg2, bool arg3, bool arg4, MethodHandles_Lookup arg5) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectMethodCommon", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;ZZLjava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void checkMethod(byte arg0, Class arg1, MemberName arg2) { (*javaClass->invokeMethod<void>(this->object, "checkMethod", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)V", arg0, arg1, arg2)); }

    bool restrictProtectedReceiver(MemberName arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "restrictProtectedReceiver", "(Ljava.lang.invoke.MemberName;)Z", arg0)); }

    MethodHandle restrictReceiver(MemberName arg0, DirectMethodHandle arg1, Class arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "restrictReceiver", "(Ljava.lang.invoke.MemberName;Ljava.lang.invoke.DirectMethodHandle;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle maybeBindCaller(MemberName arg0, MethodHandle arg1, MethodHandles_Lookup arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "maybeBindCaller", "(Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle getDirectFieldCommon(byte arg0, Class arg1, MemberName arg2, bool arg3) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectFieldCommon", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2, arg3)); }

    void checkField(byte arg0, Class arg1, MemberName arg2) { (*javaClass->invokeMethod<void>(this->object, "checkField", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)V", arg0, arg1, arg2)); }

    VarHandle getFieldVarHandleCommon(byte arg0, byte arg1, Class arg2, MemberName arg3, MemberName arg4, bool arg5) { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "getFieldVarHandleCommon", "(BBLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.VarHandle;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    MethodHandle getDirectConstructorCommon(Class arg0, MemberName arg1, bool arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectConstructorCommon", "(Ljava.lang.Class;Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle getDirectMethodForConstant(byte arg0, Class arg1, MemberName arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getDirectMethodForConstant", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    bool canBeCached(byte arg0, Class arg1, MemberName arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeCached", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;)Z", arg0, arg1, arg2)); }

    MethodHandles_Lookup dropLookupMode(int arg0) { return MethodHandles_Lookup(*javaClass->invokeMethod<jobject>(this->object, "dropLookupMode", "(I)Ljava.lang.invoke.MethodHandles$Lookup;", arg0)); }

    MethodHandles_Lookup defineHiddenClass(arr_B arg0, bool arg1, MethodHandles_Lookup_ClassOption_interface arg2) { return MethodHandles_Lookup(*javaClass->invokeMethod<jobject>(this->object, "defineHiddenClass", "([BZ[Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;)Ljava.lang.invoke.MethodHandles$Lookup;", arg0, arg1, arg2)); }

    MethodHandles_Lookup defineHiddenClassWithClassData(arr_B arg0, Object arg1, bool arg2, MethodHandles_Lookup_ClassOption_interface arg3) { return MethodHandles_Lookup(*javaClass->invokeMethod<jobject>(this->object, "defineHiddenClassWithClassData", "([BLjava.lang.Object;Z[Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;)Ljava.lang.invoke.MethodHandles$Lookup;", arg0, arg1, arg2, arg3)); }

    ProtectionDomain lookupClassProtectionDomain() { return ProtectionDomain(*javaClass->invokeMethod<jobject>(this->object, "lookupClassProtectionDomain", "()Ljava.security.ProtectionDomain;", )); }

    MethodHandle findConstructor(Class arg0, MethodType arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findConstructor", "(Ljava.lang.Class;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle findSpecial(Class arg0, String arg1, MethodType arg2, Class arg3) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findSpecial", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2, arg3)); }

    MethodHandle findGetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findGetter", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle findSetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findSetter", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    VarHandle findVarHandle(Class arg0, String arg1, Class arg2) { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "findVarHandle", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.VarHandle;", arg0, arg1, arg2)); }

    MethodHandle findStaticGetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findStaticGetter", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle findStaticSetter(Class arg0, String arg1, Class arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findStaticSetter", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    VarHandle findStaticVarHandle(Class arg0, String arg1, Class arg2) { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "findStaticVarHandle", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.VarHandle;", arg0, arg1, arg2)); }

    MethodHandle bind(Object arg0, String arg1, MethodType arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bind", "(Ljava.lang.Object;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle unreflect(Method arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflect", "(Ljava.lang.reflect.Method;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle unreflectSpecial(Method arg0, Class arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectSpecial", "(Ljava.lang.reflect.Method;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle unreflectConstructor(Constructor arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectConstructor", "(Ljava.lang.reflect.Constructor;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle unreflectGetter(Field arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectGetter", "(Ljava.lang.reflect.Field;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle unreflectSetter(Field arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectSetter", "(Ljava.lang.reflect.Field;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    VarHandle unreflectVarHandle(Field arg0) { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "unreflectVarHandle", "(Ljava.lang.reflect.Field;)Ljava.lang.invoke.VarHandle;", arg0)); }

    bool hasPrivateAccess() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPrivateAccess", "()Z", )); }

};


/**
 * Classpath: java.lang.invoke.MethodHandle
 * Package name: java.lang.invoke
 */
class MethodHandle : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandle";
public:
    STATICINITIALIZE;

    MethodHandle(jobject object) : JavaObject(object) {}

    Object invokeBasic(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeBasic", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object linkToVirtual(Object_interface arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "linkToVirtual", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object linkToStatic(Object_interface arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "linkToStatic", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object linkToSpecial(Object_interface arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "linkToSpecial", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object linkToInterface(Object_interface arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "linkToInterface", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object linkToNative(Object_interface arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "linkToNative", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object invoke(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invoke", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object invokeExact(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeExact", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    MethodType type() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "type", "()Ljava.lang.invoke.MethodType;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    bool viewAsTypeChecks(MethodType arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "viewAsTypeChecks", "(Ljava.lang.invoke.MethodType;Z)Z", arg0, arg1)); }

    MemberName internalMemberName() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "internalMemberName", "()Ljava.lang.invoke.MemberName;", )); }

    void updateForm(Function arg0) { (*javaClass->invokeMethod<void>(this->object, "updateForm", "(Ljava.util.function.Function;)V", arg0)); }

    Object internalProperties() { return Object(*javaClass->invokeMethod<jobject>(this->object, "internalProperties", "()Ljava.lang.Object;", )); }

    BoundMethodHandle rebind() { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "rebind", "()Ljava.lang.invoke.BoundMethodHandle;", )); }

    MethodHandle copyWith(MethodType arg0, LambdaForm arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWith", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle viewAsType(MethodType arg0, bool arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "viewAsType", "(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    bool isCrackable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCrackable", "()Z", )); }

    MethodHandle asType(MethodType arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asType", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    Object invokeWithArguments(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeWithArguments", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object invokeWithArguments(List arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeWithArguments", "(Ljava.util.List;)Ljava.lang.Object;", arg0)); }

    MethodHandle asTypeCached(MethodType arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asTypeCached", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle asTypeUncached(MethodType arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asTypeUncached", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle asSpreader(int arg0, Class arg1, int arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asSpreader", "(ILjava.lang.Class;I)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle asSpreader(Class arg0, int arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asSpreader", "(Ljava.lang.Class;I)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodType asSpreaderChecks(Class arg0, int arg1, int arg2) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "asSpreaderChecks", "(Ljava.lang.Class;II)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    void spreadArrayChecks(Class arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "spreadArrayChecks", "(Ljava.lang.Class;I)V", arg0, arg1)); }

    bool isVarargsCollector() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVarargsCollector", "()Z", )); }

    MethodHandle asVarargsCollector(Class arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asVarargsCollector", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle asCollector(Class arg0, int arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asCollector", "(Ljava.lang.Class;I)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle asCollector(int arg0, Class arg1, int arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asCollector", "(ILjava.lang.Class;I)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    bool asCollectorChecks(Class arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "asCollectorChecks", "(Ljava.lang.Class;II)Z", arg0, arg1, arg2)); }

    BoundMethodHandle bindArgumentL(int arg0, Object arg1) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentL", "(ILjava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1)); }

    String debugString() { return String(*javaClass->invokeMethod<jobject>(this->object, "debugString", "()Ljava.lang.String;", )); }

    String standardString() { return String(*javaClass->invokeMethod<jobject>(this->object, "standardString", "()Ljava.lang.String;", )); }

    LambdaForm internalForm() { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "internalForm", "()Ljava.lang.invoke.LambdaForm;", )); }

    MethodHandle withVarargs(bool arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "withVarargs", "(Z)Ljava.lang.invoke.MethodHandle;", arg0)); }

    void customize() { (*javaClass->invokeMethod<void>(this->object, "customize", "()V", )); }

    MethodHandle asFixedArity() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "asFixedArity", "()Ljava.lang.invoke.MethodHandle;", )); }

    MethodHandle bindTo(Object arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindTo", "(Ljava.lang.Object;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle setVarargs(MemberName arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "setVarargs", "(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    Class internalCallerClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "internalCallerClass", "()Ljava.lang.Class;", )); }

    MethodHandleImpl_Intrinsic intrinsicName() { return MethodHandleImpl_Intrinsic(*javaClass->invokeMethod<jobject>(this->object, "intrinsicName", "()Ljava.lang.invoke.MethodHandleImpl$Intrinsic;", )); }

    Object intrinsicData() { return Object(*javaClass->invokeMethod<jobject>(this->object, "intrinsicData", "()Ljava.lang.Object;", )); }

    MethodHandle withInternalMemberName(MemberName arg0, bool arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "withInternalMemberName", "(Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    bool isInvokeSpecial() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvokeSpecial", "()Z", )); }

    Object internalValues() { return Object(*javaClass->invokeMethod<jobject>(this->object, "internalValues", "()Ljava.lang.Object;", )); }

    void maybeCustomize() { (*javaClass->invokeMethod<void>(this->object, "maybeCustomize", "()V", )); }

};


/**
 * Classpath: java.lang.invoke.MethodType
 * Package name: java.lang.invoke
 */
class MethodType : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodType";
public:
    STATICINITIALIZE;

    MethodType(jobject object) : JavaObject(object) {}

    Class returnType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "returnType", "()Ljava.lang.Class;", )); }

    TypeDescriptor_OfField returnType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "returnType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

    bool equals(MethodType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.MethodType;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    MethodType basicType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "basicType", "()Ljava.lang.invoke.MethodType;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    MethodType wrap() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "wrap", "()Ljava.lang.invoke.MethodType;", )); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    String descriptorString() { return String(*javaClass->invokeMethod<jobject>(this->object, "descriptorString", "()Ljava.lang.String;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    Class parameterType(int arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava.lang.Class;", arg0)); }

    TypeDescriptor_OfField parameterType(int arg0) { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava.lang.invoke.TypeDescriptor$OfField;", arg0)); }

    MethodType insertParameterTypes(int arg0, List arg1) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "insertParameterTypes", "(ILjava.util.List;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    MethodType insertParameterTypes(int arg0, Class_interface arg1) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "insertParameterTypes", "(I[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    TypeDescriptor_OfMethod insertParameterTypes(int arg0, TypeDescriptor_OfField_interface arg1) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "insertParameterTypes", "(I[Ljava.lang.invoke.TypeDescriptor$OfField;)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0, arg1)); }

    MethodType changeReturnType(Class arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "changeReturnType", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0)); }

    TypeDescriptor_OfMethod changeReturnType(TypeDescriptor_OfField arg0) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "changeReturnType", "(Ljava.lang.invoke.TypeDescriptor$OfField;)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0)); }

    MethodTypeForm form() { return MethodTypeForm(*javaClass->invokeMethod<jobject>(this->object, "form", "()Ljava.lang.invoke.MethodTypeForm;", )); }

    static MethodType methodType(Class arg0, Class_interface arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "methodType", "(Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    static MethodType methodType(Class arg0, MethodType arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "methodType", "(Ljava.lang.Class;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    static MethodType methodType(Class arg0, Class arg1, Class_interface arg2) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "methodType", "(Ljava.lang.Class;Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    static MethodType methodType(Class arg0, List arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "methodType", "(Ljava.lang.Class;Ljava.util.List;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    static MethodType methodType(Class arg0, Class arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "methodType", "(Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    static MethodType methodType(Class arg0) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "methodType", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0)); }

    TypeDescriptor_OfMethod dropParameterTypes(int arg0, int arg1) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "dropParameterTypes", "(II)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0, arg1)); }

    MethodType dropParameterTypes(int arg0, int arg1) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "dropParameterTypes", "(II)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    MethodType appendParameterTypes(List arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "appendParameterTypes", "(Ljava.util.List;)Ljava.lang.invoke.MethodType;", arg0)); }

    MethodType appendParameterTypes(Class_interface arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "appendParameterTypes", "([Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0)); }

    int parameterCount() { return int(*javaClass->invokeMethod<int>(this->object, "parameterCount", "()I", )); }

    MethodType invokerType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "invokerType", "()Ljava.lang.invoke.MethodType;", )); }

    static MethodType genericMethodType(int arg0, bool arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "genericMethodType", "(IZ)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    static MethodType genericMethodType(int arg0) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "genericMethodType", "(I)Ljava.lang.invoke.MethodType;", arg0)); }

    Invokers invokers() { return Invokers(*javaClass->invokeMethod<jobject>(this->object, "invokers", "()Ljava.lang.invoke.Invokers;", )); }

    bool isConvertibleTo(MethodType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConvertibleTo", "(Ljava.lang.invoke.MethodType;)Z", arg0)); }

    MethodType replaceParameterTypes(int arg0, int arg1, Class_interface arg2) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "replaceParameterTypes", "(II[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    static bool canConvert(Class arg0, Class arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "canConvert", "(Ljava.lang.Class;Ljava.lang.Class;)Z", arg0, arg1)); }

    MethodType asSpreaderType(Class arg0, int arg1, int arg2) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "asSpreaderType", "(Ljava.lang.Class;II)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    Class lastParameterType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "lastParameterType", "()Ljava.lang.Class;", )); }

    MethodType asCollectorType(Class arg0, int arg1, int arg2) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "asCollectorType", "(Ljava.lang.Class;II)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    Class leadingReferenceParameter() { return Class(*javaClass->invokeMethod<jobject>(this->object, "leadingReferenceParameter", "()Ljava.lang.Class;", )); }

    bool isViewableAs(MethodType arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isViewableAs", "(Ljava.lang.invoke.MethodType;Z)Z", arg0, arg1)); }

    List parameterList() { return List(*javaClass->invokeMethod<jobject>(this->object, "parameterList", "()Ljava.util.List;", )); }

    MethodType erase() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "erase", "()Ljava.lang.invoke.MethodType;", )); }

    static MethodType fromDescriptor(String arg0, ClassLoader arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "fromDescriptor", "(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    static MethodType makeImpl(Class arg0, Class_interface arg1, bool arg2) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "makeImpl", "(Ljava.lang.Class;[Ljava.lang.Class;Z)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    String toMethodDescriptorString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toMethodDescriptorString", "()Ljava.lang.String;", )); }

    Class rtype() { return Class(*javaClass->invokeMethod<jobject>(this->object, "rtype", "()Ljava.lang.Class;", )); }

    static void checkSlotCount(int arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "checkSlotCount", "(I)V", arg0)); }

    static int checkPtypes(Class_interface arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "checkPtypes", "([Ljava.lang.Class;)I", arg0)); }

    static IndexOutOfBoundsException newIndexOutOfBoundsException(Object arg0) { return IndexOutOfBoundsException(*javaClass->invokeStaticMethod<jobject>(this->object, "newIndexOutOfBoundsException", "(Ljava.lang.Object;)Ljava.lang.IndexOutOfBoundsException;", arg0)); }

    int parameterSlotCount() { return int(*javaClass->invokeMethod<int>(this->object, "parameterSlotCount", "()I", )); }

    bool isGeneric() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isGeneric", "()Z", )); }

    bool hasPrimitives() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPrimitives", "()Z", )); }

    MethodType unwrap() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "unwrap", "()Ljava.lang.invoke.MethodType;", )); }

    static MethodType wrapWithPrims(MethodType arg0) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "wrapWithPrims", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodType;", arg0)); }

    static MethodType unwrapWithNoPrims(MethodType arg0) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "unwrapWithNoPrims", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodType;", arg0)); }

    bool canConvertParameters(Class_interface arg0, Class_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canConvertParameters", "([Ljava.lang.Class;[Ljava.lang.Class;)Z", arg0, arg1)); }

    bool explicitCastEquivalentToAsType(MethodType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "explicitCastEquivalentToAsType", "(Ljava.lang.invoke.MethodType;)Z", arg0)); }

    static bool explicitCastEquivalentToAsType(Class arg0, Class arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "explicitCastEquivalentToAsType", "(Ljava.lang.Class;Ljava.lang.Class;)Z", arg0, arg1)); }

    TypeDescriptor_OfMethod changeParameterType(int arg0, TypeDescriptor_OfField arg1) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "changeParameterType", "(ILjava.lang.invoke.TypeDescriptor$OfField;)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0, arg1)); }

    MethodType changeParameterType(int arg0, Class arg1) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "changeParameterType", "(ILjava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    void setForm(MethodTypeForm arg0) { (*javaClass->invokeMethod<void>(this->object, "setForm", "(Ljava.lang.invoke.MethodTypeForm;)V", arg0)); }

    bool hasWrappers() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasWrappers", "()Z", )); }

    MethodType generic() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "generic", "()Ljava.lang.invoke.MethodType;", )); }

    bool effectivelyIdenticalParameters(int arg0, List arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "effectivelyIdenticalParameters", "(ILjava.util.List;)Z", arg0, arg1)); }

    static MethodType fromMethodDescriptorString(String arg0, ClassLoader arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "fromMethodDescriptorString", "(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    static String toFieldDescriptorString(Class arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toFieldDescriptorString", "(Ljava.lang.Class;)Ljava.lang.String;", arg0)); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

    static ClassDesc lambda_describeConstable_0(Class arg0) { return ClassDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$describeConstable$0", "(Ljava.lang.Class;)Ljava.lang.constant.ClassDesc;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.TypeDescriptor$OfField
 * Enclosing class: java.lang.invoke.TypeDescriptor
 * Package name: java.lang.invoke
 */
class TypeDescriptor_OfField : public JavaObject {
protected:
    const inline static char *className = "java.lang.invoke.TypeDescriptor$OfField";
public:
    STATICINITIALIZE;

    TypeDescriptor_OfField(jobject object) : JavaObject(object) {}

    bool isArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isArray", "()Z", )); }

    bool isPrimitive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPrimitive", "()Z", )); }

    TypeDescriptor_OfField componentType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "componentType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

    TypeDescriptor_OfField arrayType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "arrayType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

};


/**
 * Classpath: java.io.ObjectStreamClass
 * Package name: java.io
 */
class ObjectStreamClass : public Object {
protected:
    const inline static char *className = "java.io.ObjectStreamClass";
public:
    STATICINITIALIZE;

    ObjectStreamClass(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static ObjectStreamClass lookup(Class arg0, bool arg1) { return ObjectStreamClass(*javaClass->invokeStaticMethod<jobject>(this->object, "lookup", "(Ljava.lang.Class;Z)Ljava.io.ObjectStreamClass;", arg0, arg1)); }

    static ObjectStreamClass lookup(Class arg0) { return ObjectStreamClass(*javaClass->invokeStaticMethod<jobject>(this->object, "lookup", "(Ljava.lang.Class;)Ljava.io.ObjectStreamClass;", arg0)); }

    bool isEnum() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnum", "()Z", )); }

    bool isRecord() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRecord", "()Z", )); }

    Object newInstance() { return Object(*javaClass->invokeMethod<jobject>(this->object, "newInstance", "()Ljava.lang.Object;", )); }

    ObjectStreamField getField(String arg0, Class arg1) { return ObjectStreamField(*javaClass->invokeMethod<jobject>(this->object, "getField", "(Ljava.lang.String;Ljava.lang.Class;)Ljava.io.ObjectStreamField;", arg0, arg1)); }

    ObjectStreamField getField(String arg0) { return ObjectStreamField(*javaClass->invokeMethod<jobject>(this->object, "getField", "(Ljava.lang.String;)Ljava.io.ObjectStreamField;", arg0)); }

    static void processQueue(ReferenceQueue arg0, ConcurrentMap arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "processQueue", "(Ljava.lang.ref.ReferenceQueue;Ljava.util.concurrent.ConcurrentMap;)V", arg0, arg1)); }

    void checkInitialized() { (*javaClass->invokeMethod<void>(this->object, "checkInitialized", "()V", )); }

    bool isSerializable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSerializable", "()Z", )); }

    static bool packageEquals(Class arg0, Class arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "packageEquals", "(Ljava.lang.Class;Ljava.lang.Class;)Z", arg0, arg1)); }

    static bool hasStaticInitializer(Class arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "hasStaticInitializer", "(Ljava.lang.Class;)Z", arg0)); }

    static Long getDeclaredSUID(Class arg0) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "getDeclaredSUID", "(Ljava.lang.Class;)Ljava.lang.Long;", arg0)); }

    static long computeDefaultSUID(Class arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "computeDefaultSUID", "(Ljava.lang.Class;)J", arg0)); }

    static MethodHandle lambda_canonicalRecordCtr_2(Class arg0) { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$canonicalRecordCtr$2", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    Object lambda_newInstance_0() { return Object(*javaClass->invokeMethod<jobject>(this->object, "lambda$newInstance$0", "()Ljava.lang.Object;", )); }

    bool hasWriteObjectData() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasWriteObjectData", "()Z", )); }

    void readNonProxy(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readNonProxy", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Class forClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "forClass", "()Ljava.lang.Class;", )); }

    ClassNotFoundException getResolveException() { return ClassNotFoundException(*javaClass->invokeMethod<jobject>(this->object, "getResolveException", "()Ljava.lang.ClassNotFoundException;", )); }

    void initProxy(Class arg0, ClassNotFoundException arg1, ObjectStreamClass arg2) { (*javaClass->invokeMethod<void>(this->object, "initProxy", "(Ljava.lang.Class;Ljava.lang.ClassNotFoundException;Ljava.io.ObjectStreamClass;)V", arg0, arg1, arg2)); }

    void initNonProxy(ObjectStreamClass arg0, Class arg1, ClassNotFoundException arg2, ObjectStreamClass arg3) { (*javaClass->invokeMethod<void>(this->object, "initNonProxy", "(Ljava.io.ObjectStreamClass;Ljava.lang.Class;Ljava.lang.ClassNotFoundException;Ljava.io.ObjectStreamClass;)V", arg0, arg1, arg2, arg3)); }

    void checkDeserialize() { (*javaClass->invokeMethod<void>(this->object, "checkDeserialize", "()V", )); }

    bool isInstantiable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInstantiable", "()Z", )); }

    bool isExternalizable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isExternalizable", "()Z", )); }

    bool hasReadResolveMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasReadResolveMethod", "()Z", )); }

    Object invokeReadResolve(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeReadResolve", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool hasBlockExternalData() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasBlockExternalData", "()Z", )); }

    bool hasReadObjectMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasReadObjectMethod", "()Z", )); }

    bool hasReadObjectNoDataMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasReadObjectNoDataMethod", "()Z", )); }

    void invokeReadObject(Object arg0, ObjectInputStream arg1) { (*javaClass->invokeMethod<void>(this->object, "invokeReadObject", "(Ljava.lang.Object;Ljava.io.ObjectInputStream;)V", arg0, arg1)); }

    void invokeReadObjectNoData(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "invokeReadObjectNoData", "(Ljava.lang.Object;)V", arg0)); }

    void writeNonProxy(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeNonProxy", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool hasWriteReplaceMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasWriteReplaceMethod", "()Z", )); }

    Object invokeWriteReplace(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeWriteReplace", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool isProxy() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isProxy", "()Z", )); }

    ObjectStreamClass getSuperDesc() { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "getSuperDesc", "()Ljava.io.ObjectStreamClass;", )); }

    void checkSerialize() { (*javaClass->invokeMethod<void>(this->object, "checkSerialize", "()V", )); }

    bool hasWriteObjectMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasWriteObjectMethod", "()Z", )); }

    void invokeWriteObject(Object arg0, ObjectOutputStream arg1) { (*javaClass->invokeMethod<void>(this->object, "invokeWriteObject", "(Ljava.lang.Object;Ljava.io.ObjectOutputStream;)V", arg0, arg1)); }

    void checkDefaultSerialize() { (*javaClass->invokeMethod<void>(this->object, "checkDefaultSerialize", "()V", )); }

    int getPrimDataSize() { return int(*javaClass->invokeMethod<int>(this->object, "getPrimDataSize", "()I", )); }

    void getPrimFieldValues(Object arg0, arr_B arg1) { (*javaClass->invokeMethod<void>(this->object, "getPrimFieldValues", "(Ljava.lang.Object;[B)V", arg0, arg1)); }

    int getNumObjFields() { return int(*javaClass->invokeMethod<int>(this->object, "getNumObjFields", "()I", )); }

    void getObjFieldValues(Object arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "getObjFieldValues", "(Ljava.lang.Object;[Ljava.lang.Object;)V", arg0, arg1)); }

    void requireInitialized() { (*javaClass->invokeMethod<void>(this->object, "requireInitialized", "()V", )); }

    long getSerialVersionUID() { return long(*javaClass->invokeMethod<long>(this->object, "getSerialVersionUID", "()J", )); }

    static ObjectStreamClass_FieldReflector getReflector(ObjectStreamField_interface arg0, ObjectStreamClass arg1) { return ObjectStreamClass_FieldReflector(*javaClass->invokeStaticMethod<jobject>(this->object, "getReflector", "([Ljava.io.ObjectStreamField;Ljava.io.ObjectStreamClass;)Ljava.io.ObjectStreamClass$FieldReflector;", arg0, arg1)); }

    ProtectionDomain noPermissionsDomain() { return ProtectionDomain(*javaClass->invokeMethod<jobject>(this->object, "noPermissionsDomain", "()Ljava.security.ProtectionDomain;", )); }

    static bool classNamesEqual(String arg0, String arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "classNamesEqual", "(Ljava.lang.String;Ljava.lang.String;)Z", arg0, arg1)); }

    void computeFieldOffsets() { (*javaClass->invokeMethod<void>(this->object, "computeFieldOffsets", "()V", )); }

    static void throwMiscException(Throwable arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "throwMiscException", "(Ljava.lang.Throwable;)V", arg0)); }

    ObjectStreamClass getVariantFor(Class arg0) { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "getVariantFor", "(Ljava.lang.Class;)Ljava.io.ObjectStreamClass;", arg0)); }

    void setPrimFieldValues(Object arg0, arr_B arg1) { (*javaClass->invokeMethod<void>(this->object, "setPrimFieldValues", "(Ljava.lang.Object;[B)V", arg0, arg1)); }

    void setObjFieldValues(Object arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "setObjFieldValues", "(Ljava.lang.Object;[Ljava.lang.Object;)V", arg0, arg1)); }

    static void initNative() { (*javaClass->invokeStaticMethod<void>(this->object, "initNative", "()V", )); }

    static ObjectStreamClass lookupAny(Class arg0) { return ObjectStreamClass(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupAny", "(Ljava.lang.Class;)Ljava.io.ObjectStreamClass;", arg0)); }

    ObjectStreamClass getLocalDesc() { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "getLocalDesc", "()Ljava.io.ObjectStreamClass;", )); }

    void checkObjFieldValueTypes(Object arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "checkObjFieldValueTypes", "(Ljava.lang.Object;[Ljava.lang.Object;)V", arg0, arg1)); }

    static Constructor getExternalizableConstructor(Class arg0) { return Constructor(*javaClass->invokeStaticMethod<jobject>(this->object, "getExternalizableConstructor", "(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0)); }

    static Constructor getSerializableConstructor(Class arg0) { return Constructor(*javaClass->invokeStaticMethod<jobject>(this->object, "getSerializableConstructor", "(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0)); }

    static MethodHandle canonicalRecordCtr(Class arg0) { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalRecordCtr", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle getRecordConstructor() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getRecordConstructor", "()Ljava.lang.invoke.MethodHandle;", )); }

    static Method getInheritableMethod(Class arg0, String arg1, Class_interface arg2, Class arg3) { return Method(*javaClass->invokeStaticMethod<jobject>(this->object, "getInheritableMethod", "(Ljava.lang.Class;Ljava.lang.String;[Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.reflect.Method;", arg0, arg1, arg2, arg3)); }

    static Method getPrivateMethod(Class arg0, String arg1, Class_interface arg2, Class arg3) { return Method(*javaClass->invokeStaticMethod<jobject>(this->object, "getPrivateMethod", "(Ljava.lang.Class;Ljava.lang.String;[Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.reflect.Method;", arg0, arg1, arg2, arg3)); }

    static String getMethodSignature(Class_interface arg0, Class arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getMethodSignature", "([Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.String;", arg0, arg1)); }

};


/**
 * Classpath: java.io.ObjectStreamField
 * Package name: java.io
 */
class ObjectStreamField : public Object {
protected:
    const inline static char *className = "java.io.ObjectStreamField";
public:
    STATICINITIALIZE;

    ObjectStreamField(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool isPrimitive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPrimitive", "()Z", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    Field getField() { return Field(*javaClass->invokeMethod<jobject>(this->object, "getField", "()Ljava.lang.reflect.Field;", )); }

    Class getType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Ljava.lang.Class;", )); }

    String getSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSignature", "()Ljava.lang.String;", )); }

    static String getPrimitiveSignature(Class arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getPrimitiveSignature", "(Ljava.lang.Class;)Ljava.lang.String;", arg0)); }

    static StringBuilder appendClassSignature(StringBuilder arg0, Class arg1) { return StringBuilder(*javaClass->invokeStaticMethod<jobject>(this->object, "appendClassSignature", "(Ljava.lang.StringBuilder;Ljava.lang.Class;)Ljava.lang.StringBuilder;", arg0, arg1)); }

    static String getClassSignature(Class arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getClassSignature", "(Ljava.lang.Class;)Ljava.lang.String;", arg0)); }

    char getTypeCode() { return char(*javaClass->invokeMethod<char>(this->object, "getTypeCode", "()C", )); }

    String getTypeString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTypeString", "()Ljava.lang.String;", )); }

    int getOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getOffset", "()I", )); }

    void setOffset(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setOffset", "(I)V", arg0)); }

    bool isUnshared() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUnshared", "()Z", )); }

};


/**
 * Classpath: sun.reflect.generics.factory.GenericsFactory
 * Package name: sun.reflect.generics.factory
 */
class GenericsFactory : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.factory.GenericsFactory";
public:
    STATICINITIALIZE;

    GenericsFactory(jobject object) : JavaObject(object) {}

    Type makeLong() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeLong", "()Ljava.lang.reflect.Type;", )); }

    Type makeInt() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeInt", "()Ljava.lang.reflect.Type;", )); }

    Type makeShort() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeShort", "()Ljava.lang.reflect.Type;", )); }

    TypeVariable makeTypeVariable(String arg0, FieldTypeSignature_interface arg1) { return TypeVariable(*javaClass->invokeMethod<jobject>(this->object, "makeTypeVariable", "(Ljava.lang.String;[Lsun.reflect.generics.tree.FieldTypeSignature;)Ljava.lang.reflect.TypeVariable;", arg0, arg1)); }

    ParameterizedType makeParameterizedType(Type arg0, Type_interface arg1, Type arg2) { return ParameterizedType(*javaClass->invokeMethod<jobject>(this->object, "makeParameterizedType", "(Ljava.lang.reflect.Type;[Ljava.lang.reflect.Type;Ljava.lang.reflect.Type;)Ljava.lang.reflect.ParameterizedType;", arg0, arg1, arg2)); }

    TypeVariable findTypeVariable(String arg0) { return TypeVariable(*javaClass->invokeMethod<jobject>(this->object, "findTypeVariable", "(Ljava.lang.String;)Ljava.lang.reflect.TypeVariable;", arg0)); }

    WildcardType makeWildcard(FieldTypeSignature_interface arg0, FieldTypeSignature_interface arg1) { return WildcardType(*javaClass->invokeMethod<jobject>(this->object, "makeWildcard", "([Lsun.reflect.generics.tree.FieldTypeSignature;[Lsun.reflect.generics.tree.FieldTypeSignature;)Ljava.lang.reflect.WildcardType;", arg0, arg1)); }

    Type makeNamedType(String arg0) { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeNamedType", "(Ljava.lang.String;)Ljava.lang.reflect.Type;", arg0)); }

    Type makeArrayType(Type arg0) { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeArrayType", "(Ljava.lang.reflect.Type;)Ljava.lang.reflect.Type;", arg0)); }

    Type makeByte() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeByte", "()Ljava.lang.reflect.Type;", )); }

    Type makeBool() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeBool", "()Ljava.lang.reflect.Type;", )); }

    Type makeChar() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeChar", "()Ljava.lang.reflect.Type;", )); }

    Type makeFloat() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeFloat", "()Ljava.lang.reflect.Type;", )); }

    Type makeVoid() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeVoid", "()Ljava.lang.reflect.Type;", )); }

    Type makeDouble() { return Type(*javaClass->invokeMethod<jobject>(this->object, "makeDouble", "()Ljava.lang.reflect.Type;", )); }

};


/**
 * Classpath: java.lang.reflect.Type
 * Package name: java.lang.reflect
 */
class Type : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.Type";
public:
    STATICINITIALIZE;

    Type(jobject object) : JavaObject(object) {}

    String getTypeName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTypeName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: [Lsun.reflect.generics.tree.FieldTypeSignature;
 */
class FieldTypeSignature_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.FieldTypeSignature;";
public:
    STATICINITIALIZE;

    FieldTypeSignature_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.reflect.TypeVariable
 * Package name: java.lang.reflect
 */
class TypeVariable : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.TypeVariable";
public:
    STATICINITIALIZE;

    TypeVariable(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    GenericDeclaration getGenericDeclaration() { return GenericDeclaration(*javaClass->invokeMethod<jobject>(this->object, "getGenericDeclaration", "()Ljava.lang.reflect.GenericDeclaration;", )); }

};


/**
 * Classpath: java.lang.reflect.GenericDeclaration
 * Package name: java.lang.reflect
 */
class GenericDeclaration : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.GenericDeclaration";
public:
    STATICINITIALIZE;

    GenericDeclaration(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.lang.reflect.Type;
 */
class Type_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.Type;";
public:
    STATICINITIALIZE;

    Type_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.reflect.ParameterizedType
 * Package name: java.lang.reflect
 */
class ParameterizedType : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.ParameterizedType";
public:
    STATICINITIALIZE;

    ParameterizedType(jobject object) : JavaObject(object) {}

    Type getRawType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getRawType", "()Ljava.lang.reflect.Type;", )); }

    Type getOwnerType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getOwnerType", "()Ljava.lang.reflect.Type;", )); }

};


/**
 * Classpath: java.lang.reflect.WildcardType
 * Package name: java.lang.reflect
 */
class WildcardType : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.WildcardType";
public:
    STATICINITIALIZE;

    WildcardType(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.reflect.generics.tree.TypeSignature
 * Package name: sun.reflect.generics.tree
 */
class TypeSignature : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.tree.TypeSignature";
public:
    STATICINITIALIZE;

    TypeSignature(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.reflect.generics.tree.Tree
 * Package name: sun.reflect.generics.tree
 */
class Tree : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.tree.Tree";
public:
    STATICINITIALIZE;

    Tree(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.reflect.generics.repository.AbstractRepository
 * Package name: sun.reflect.generics.repository
 */
class AbstractRepository : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.repository.AbstractRepository";
public:
    STATICINITIALIZE;

    AbstractRepository(jobject object) : JavaObject(object) {}

    GenericsFactory getFactory() { return GenericsFactory(*javaClass->invokeMethod<jobject>(this->object, "getFactory", "()Lsun.reflect.generics.factory.GenericsFactory;", )); }

    Reifier getReifier() { return Reifier(*javaClass->invokeMethod<jobject>(this->object, "getReifier", "()Lsun.reflect.generics.visitor.Reifier;", )); }

    Tree getTree() { return Tree(*javaClass->invokeMethod<jobject>(this->object, "getTree", "()Lsun.reflect.generics.tree.Tree;", )); }

    Tree parse(String arg0) { return Tree(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Lsun.reflect.generics.tree.Tree;", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.visitor.Reifier
 * Package name: sun.reflect.generics.visitor
 */
class Reifier : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.visitor.Reifier";
public:
    STATICINITIALIZE;

    Reifier(jobject object) : JavaObject(object) {}

    GenericsFactory getFactory() { return GenericsFactory(*javaClass->invokeMethod<jobject>(this->object, "getFactory", "()Lsun.reflect.generics.factory.GenericsFactory;", )); }

    static Reifier make(GenericsFactory arg0) { return Reifier(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.visitor.Reifier;", arg0)); }

    void visitFormalTypeParameter(FormalTypeParameter arg0) { (*javaClass->invokeMethod<void>(this->object, "visitFormalTypeParameter", "(Lsun.reflect.generics.tree.FormalTypeParameter;)V", arg0)); }

    void visitClassTypeSignature(ClassTypeSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitClassTypeSignature", "(Lsun.reflect.generics.tree.ClassTypeSignature;)V", arg0)); }

    void visitArrayTypeSignature(ArrayTypeSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitArrayTypeSignature", "(Lsun.reflect.generics.tree.ArrayTypeSignature;)V", arg0)); }

    void visitTypeVariableSignature(TypeVariableSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitTypeVariableSignature", "(Lsun.reflect.generics.tree.TypeVariableSignature;)V", arg0)); }

    void visitWildcard(Wildcard arg0) { (*javaClass->invokeMethod<void>(this->object, "visitWildcard", "(Lsun.reflect.generics.tree.Wildcard;)V", arg0)); }

    void visitSimpleClassTypeSignature(SimpleClassTypeSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitSimpleClassTypeSignature", "(Lsun.reflect.generics.tree.SimpleClassTypeSignature;)V", arg0)); }

    void visitBottomSignature(BottomSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitBottomSignature", "(Lsun.reflect.generics.tree.BottomSignature;)V", arg0)); }

    void visitByteSignature(ByteSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitByteSignature", "(Lsun.reflect.generics.tree.ByteSignature;)V", arg0)); }

    void visitBooleanSignature(BooleanSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitBooleanSignature", "(Lsun.reflect.generics.tree.BooleanSignature;)V", arg0)); }

    void visitShortSignature(ShortSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitShortSignature", "(Lsun.reflect.generics.tree.ShortSignature;)V", arg0)); }

    void visitCharSignature(CharSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitCharSignature", "(Lsun.reflect.generics.tree.CharSignature;)V", arg0)); }

    void visitIntSignature(IntSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitIntSignature", "(Lsun.reflect.generics.tree.IntSignature;)V", arg0)); }

    void visitLongSignature(LongSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitLongSignature", "(Lsun.reflect.generics.tree.LongSignature;)V", arg0)); }

    void visitFloatSignature(FloatSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitFloatSignature", "(Lsun.reflect.generics.tree.FloatSignature;)V", arg0)); }

    void visitDoubleSignature(DoubleSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitDoubleSignature", "(Lsun.reflect.generics.tree.DoubleSignature;)V", arg0)); }

    void visitVoidDescriptor(VoidDescriptor arg0) { (*javaClass->invokeMethod<void>(this->object, "visitVoidDescriptor", "(Lsun.reflect.generics.tree.VoidDescriptor;)V", arg0)); }

    Object getResult() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getResult", "()Ljava.lang.Object;", )); }

    Type getResult() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getResult", "()Ljava.lang.reflect.Type;", )); }

};


/**
 * Classpath: sun.reflect.generics.tree.FormalTypeParameter
 * Package name: sun.reflect.generics.tree
 */
class FormalTypeParameter : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.FormalTypeParameter";
public:
    STATICINITIALIZE;

    FormalTypeParameter(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    static FormalTypeParameter make(String arg0, FieldTypeSignature_interface arg1) { return FormalTypeParameter(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.String;[Lsun.reflect.generics.tree.FieldTypeSignature;)Lsun.reflect.generics.tree.FormalTypeParameter;", arg0, arg1)); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.visitor.TypeTreeVisitor
 * Package name: sun.reflect.generics.visitor
 */
class TypeTreeVisitor : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.visitor.TypeTreeVisitor";
public:
    STATICINITIALIZE;

    TypeTreeVisitor(jobject object) : JavaObject(object) {}

    void visitFormalTypeParameter(FormalTypeParameter arg0) { (*javaClass->invokeMethod<void>(this->object, "visitFormalTypeParameter", "(Lsun.reflect.generics.tree.FormalTypeParameter;)V", arg0)); }

    void visitClassTypeSignature(ClassTypeSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitClassTypeSignature", "(Lsun.reflect.generics.tree.ClassTypeSignature;)V", arg0)); }

    void visitArrayTypeSignature(ArrayTypeSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitArrayTypeSignature", "(Lsun.reflect.generics.tree.ArrayTypeSignature;)V", arg0)); }

    void visitTypeVariableSignature(TypeVariableSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitTypeVariableSignature", "(Lsun.reflect.generics.tree.TypeVariableSignature;)V", arg0)); }

    void visitWildcard(Wildcard arg0) { (*javaClass->invokeMethod<void>(this->object, "visitWildcard", "(Lsun.reflect.generics.tree.Wildcard;)V", arg0)); }

    void visitSimpleClassTypeSignature(SimpleClassTypeSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitSimpleClassTypeSignature", "(Lsun.reflect.generics.tree.SimpleClassTypeSignature;)V", arg0)); }

    void visitBottomSignature(BottomSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitBottomSignature", "(Lsun.reflect.generics.tree.BottomSignature;)V", arg0)); }

    void visitByteSignature(ByteSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitByteSignature", "(Lsun.reflect.generics.tree.ByteSignature;)V", arg0)); }

    void visitBooleanSignature(BooleanSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitBooleanSignature", "(Lsun.reflect.generics.tree.BooleanSignature;)V", arg0)); }

    void visitShortSignature(ShortSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitShortSignature", "(Lsun.reflect.generics.tree.ShortSignature;)V", arg0)); }

    void visitCharSignature(CharSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitCharSignature", "(Lsun.reflect.generics.tree.CharSignature;)V", arg0)); }

    void visitIntSignature(IntSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitIntSignature", "(Lsun.reflect.generics.tree.IntSignature;)V", arg0)); }

    void visitLongSignature(LongSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitLongSignature", "(Lsun.reflect.generics.tree.LongSignature;)V", arg0)); }

    void visitFloatSignature(FloatSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitFloatSignature", "(Lsun.reflect.generics.tree.FloatSignature;)V", arg0)); }

    void visitDoubleSignature(DoubleSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitDoubleSignature", "(Lsun.reflect.generics.tree.DoubleSignature;)V", arg0)); }

    void visitVoidDescriptor(VoidDescriptor arg0) { (*javaClass->invokeMethod<void>(this->object, "visitVoidDescriptor", "(Lsun.reflect.generics.tree.VoidDescriptor;)V", arg0)); }

    Object getResult() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getResult", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: sun.reflect.generics.tree.ClassTypeSignature
 * Package name: sun.reflect.generics.tree
 */
class ClassTypeSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ClassTypeSignature";
public:
    STATICINITIALIZE;

    ClassTypeSignature(jobject object) : JavaObject(object) {}

    static ClassTypeSignature make(List arg0) { return ClassTypeSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.util.List;)Lsun.reflect.generics.tree.ClassTypeSignature;", arg0)); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

    List getPath() { return List(*javaClass->invokeMethod<jobject>(this->object, "getPath", "()Ljava.util.List;", )); }

};


/**
 * Classpath: sun.reflect.generics.tree.ArrayTypeSignature
 * Package name: sun.reflect.generics.tree
 */
class ArrayTypeSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ArrayTypeSignature";
public:
    STATICINITIALIZE;

    ArrayTypeSignature(jobject object) : JavaObject(object) {}

    TypeSignature getComponentType() { return TypeSignature(*javaClass->invokeMethod<jobject>(this->object, "getComponentType", "()Lsun.reflect.generics.tree.TypeSignature;", )); }

    static ArrayTypeSignature make(TypeSignature arg0) { return ArrayTypeSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Lsun.reflect.generics.tree.TypeSignature;)Lsun.reflect.generics.tree.ArrayTypeSignature;", arg0)); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.TypeVariableSignature
 * Package name: sun.reflect.generics.tree
 */
class TypeVariableSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.TypeVariableSignature";
public:
    STATICINITIALIZE;

    TypeVariableSignature(jobject object) : JavaObject(object) {}

    static TypeVariableSignature make(String arg0) { return TypeVariableSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.String;)Lsun.reflect.generics.tree.TypeVariableSignature;", arg0)); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

    String getIdentifier() { return String(*javaClass->invokeMethod<jobject>(this->object, "getIdentifier", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: sun.reflect.generics.tree.Wildcard
 * Package name: sun.reflect.generics.tree
 */
class Wildcard : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.Wildcard";
public:
    STATICINITIALIZE;

    Wildcard(jobject object) : JavaObject(object) {}

    static Wildcard make(FieldTypeSignature_interface arg0, FieldTypeSignature_interface arg1) { return Wildcard(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "([Lsun.reflect.generics.tree.FieldTypeSignature;[Lsun.reflect.generics.tree.FieldTypeSignature;)Lsun.reflect.generics.tree.Wildcard;", arg0, arg1)); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.SimpleClassTypeSignature
 * Package name: sun.reflect.generics.tree
 */
class SimpleClassTypeSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.SimpleClassTypeSignature";
public:
    STATICINITIALIZE;

    SimpleClassTypeSignature(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    static SimpleClassTypeSignature make(String arg0, bool arg1, TypeArgument_interface arg2) { return SimpleClassTypeSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.String;Z[Lsun.reflect.generics.tree.TypeArgument;)Lsun.reflect.generics.tree.SimpleClassTypeSignature;", arg0, arg1, arg2)); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

    bool getDollar() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getDollar", "()Z", )); }

};


/**
 * Classpath: [Lsun.reflect.generics.tree.TypeArgument;
 */
class TypeArgument_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.TypeArgument;";
public:
    STATICINITIALIZE;

    TypeArgument_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.reflect.generics.tree.BottomSignature
 * Package name: sun.reflect.generics.tree
 */
class BottomSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.BottomSignature";
public:
    STATICINITIALIZE;

    BottomSignature(jobject object) : JavaObject(object) {}

    static BottomSignature make() { return BottomSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.BottomSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.ByteSignature
 * Package name: sun.reflect.generics.tree
 */
class ByteSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ByteSignature";
public:
    STATICINITIALIZE;

    ByteSignature(jobject object) : JavaObject(object) {}

    static ByteSignature make() { return ByteSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.ByteSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.BooleanSignature
 * Package name: sun.reflect.generics.tree
 */
class BooleanSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.BooleanSignature";
public:
    STATICINITIALIZE;

    BooleanSignature(jobject object) : JavaObject(object) {}

    static BooleanSignature make() { return BooleanSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.BooleanSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.ShortSignature
 * Package name: sun.reflect.generics.tree
 */
class ShortSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ShortSignature";
public:
    STATICINITIALIZE;

    ShortSignature(jobject object) : JavaObject(object) {}

    static ShortSignature make() { return ShortSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.ShortSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.CharSignature
 * Package name: sun.reflect.generics.tree
 */
class CharSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.CharSignature";
public:
    STATICINITIALIZE;

    CharSignature(jobject object) : JavaObject(object) {}

    static CharSignature make() { return CharSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.CharSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.IntSignature
 * Package name: sun.reflect.generics.tree
 */
class IntSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.IntSignature";
public:
    STATICINITIALIZE;

    IntSignature(jobject object) : JavaObject(object) {}

    static IntSignature make() { return IntSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.IntSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.LongSignature
 * Package name: sun.reflect.generics.tree
 */
class LongSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.LongSignature";
public:
    STATICINITIALIZE;

    LongSignature(jobject object) : JavaObject(object) {}

    static LongSignature make() { return LongSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.LongSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.FloatSignature
 * Package name: sun.reflect.generics.tree
 */
class FloatSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.FloatSignature";
public:
    STATICINITIALIZE;

    FloatSignature(jobject object) : JavaObject(object) {}

    static FloatSignature make() { return FloatSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.FloatSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.DoubleSignature
 * Package name: sun.reflect.generics.tree
 */
class DoubleSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.DoubleSignature";
public:
    STATICINITIALIZE;

    DoubleSignature(jobject object) : JavaObject(object) {}

    static DoubleSignature make() { return DoubleSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.DoubleSignature;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.VoidDescriptor
 * Package name: sun.reflect.generics.tree
 */
class VoidDescriptor : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.VoidDescriptor";
public:
    STATICINITIALIZE;

    VoidDescriptor(jobject object) : JavaObject(object) {}

    static VoidDescriptor make() { return VoidDescriptor(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "()Lsun.reflect.generics.tree.VoidDescriptor;", )); }

    void accept(TypeTreeVisitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.TypeTreeVisitor;)V", arg0)); }

};


/**
 * Classpath: java.util.Map
 * Package name: java.util
 */
class Map : public JavaObject {
protected:
    const inline static char *className = "java.util.Map";
public:
    STATICINITIALIZE;

    Map(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static Map copyOf(Map arg0) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Map;)Ljava.util.Map;", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    Object replace(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool replace(Object arg0, Object arg1, Object arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1, arg2)); }

    void replaceAll(BiFunction arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.BiFunction;)V", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static Map of() { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Ljava.util.Map;", )); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3)); }

    static Map of(Object arg0, Object arg1) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1)); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }

    static Map of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }

    Object merge(Object arg0, Object arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    void putAll(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "putAll", "(Ljava.util.Map;)V", arg0)); }

    Object putIfAbsent(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "putIfAbsent", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object compute(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compute", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    static Map_Entry entry(Object arg0, Object arg1) { return Map_Entry(*javaClass->invokeStaticMethod<jobject>(this->object, "entry", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.Map$Entry;", arg0, arg1)); }

    void forEach(BiConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.BiConsumer;)V", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Object computeIfAbsent(Object arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfAbsent", "(Ljava.lang.Object;Ljava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Object getOrDefault(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOrDefault", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object computeIfPresent(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfPresent", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    static Map ofEntries(Map_Entry_interface arg0) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "ofEntries", "([Ljava.util.Map$Entry;)Ljava.util.Map;", arg0)); }

};


/**
 * Classpath: java.util.Map$Entry
 * Enclosing class: java.util.Map
 * Package name: java.util
 */
class Map_Entry : public JavaObject {
protected:
    const inline static char *className = "java.util.Map$Entry";
public:
    STATICINITIALIZE;

    Map_Entry(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static Map_Entry copyOf(Map_Entry arg0) { return Map_Entry(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Map$Entry;)Ljava.util.Map$Entry;", arg0)); }

    Object getValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.Object;", )); }

    Object getKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getKey", "()Ljava.lang.Object;", )); }

    Object setValue(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "setValue", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object _deserializeLambda_(SerializedLambda arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "$deserializeLambda$", "(Ljava.lang.invoke.SerializedLambda;)Ljava.lang.Object;", arg0)); }

    static int lambda_comparingByValue_827a17d5_1(Comparator arg0, Map_Entry arg1, Map_Entry arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparingByValue$827a17d5$1", "(Ljava.util.Comparator;Ljava.util.Map$Entry;Ljava.util.Map$Entry;)I", arg0, arg1, arg2)); }

    static int lambda_comparingByKey_bbdbfea9_1(Map_Entry arg0, Map_Entry arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparingByKey$bbdbfea9$1", "(Ljava.util.Map$Entry;Ljava.util.Map$Entry;)I", arg0, arg1)); }

    static int lambda_comparingByValue_1065357e_1(Map_Entry arg0, Map_Entry arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparingByValue$1065357e$1", "(Ljava.util.Map$Entry;Ljava.util.Map$Entry;)I", arg0, arg1)); }

    static int lambda_comparingByKey_6d558cbf_1(Comparator arg0, Map_Entry arg1, Map_Entry arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$comparingByKey$6d558cbf$1", "(Ljava.util.Comparator;Ljava.util.Map$Entry;Ljava.util.Map$Entry;)I", arg0, arg1, arg2)); }

    static Comparator comparingByKey(Comparator arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparingByKey", "(Ljava.util.Comparator;)Ljava.util.Comparator;", arg0)); }

    static Comparator comparingByKey() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparingByKey", "()Ljava.util.Comparator;", )); }

    static Comparator comparingByValue() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparingByValue", "()Ljava.util.Comparator;", )); }

    static Comparator comparingByValue(Comparator arg0) { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "comparingByValue", "(Ljava.util.Comparator;)Ljava.util.Comparator;", arg0)); }

};


/**
 * Classpath: [Ljava.util.Map$Entry;
 */
class Map_Entry_interface : public Object {
protected:
    const inline static char *className = "[Ljava.util.Map$Entry;";
public:
    STATICINITIALIZE;

    Map_Entry_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.annotation.Annotation
 * Package name: java.lang.annotation
 */
class Annotation : public JavaObject {
protected:
    const inline static char *className = "java.lang.annotation.Annotation";
public:
    STATICINITIALIZE;

    Annotation(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Class annotationType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "annotationType", "()Ljava.lang.Class;", )); }

};


/**
 * Classpath: java.lang.reflect.AccessibleObject
 * Package name: java.lang.reflect
 */
class AccessibleObject : public Object {
protected:
    const inline static char *className = "java.lang.reflect.AccessibleObject";
public:
    STATICINITIALIZE;

    AccessibleObject(jobject object) : JavaObject(object) {}

    static void checkPermission() { (*javaClass->invokeStaticMethod<void>(this->object, "checkPermission", "()V", )); }

    bool isAnnotationPresent(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnnotationPresent", "(Ljava.lang.Class;)Z", arg0)); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    Annotation getDeclaredAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    void setAccessible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }

    static void setAccessible(AccessibleObject_interface arg0, bool arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setAccessible", "([Ljava.lang.reflect.AccessibleObject;Z)V", arg0, arg1)); }

    void checkAccess(Class arg0, Class arg1, Class arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "(Ljava.lang.Class;Ljava.lang.Class;Ljava.lang.Class;I)V", arg0, arg1, arg2, arg3)); }

    void checkCanSetAccessible(Class arg0, Class arg1) { (*javaClass->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava.lang.Class;Ljava.lang.Class;)V", arg0, arg1)); }

    void checkCanSetAccessible(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava.lang.Class;)V", arg0)); }

    bool checkCanSetAccessible(Class arg0, Class arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkCanSetAccessible", "(Ljava.lang.Class;Ljava.lang.Class;Z)Z", arg0, arg1, arg2)); }

    bool setAccessible0(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setAccessible0", "(Z)Z", arg0)); }

    bool isSubclassOf(Class arg0, Class arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSubclassOf", "(Ljava.lang.Class;Ljava.lang.Class;)Z", arg0, arg1)); }

    static bool printStackTraceWhenAccessFails() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "printStackTraceWhenAccessFails", "()Z", )); }

    bool verifyAccess(Class arg0, Class arg1, Class arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "verifyAccess", "(Ljava.lang.Class;Ljava.lang.Class;Ljava.lang.Class;I)Z", arg0, arg1, arg2, arg3)); }

    bool isAccessChecked(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessChecked", "(Ljava.lang.Class;)Z", arg0)); }

    bool isAccessChecked(Class arg0, Class arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessChecked", "(Ljava.lang.Class;Ljava.lang.Class;)Z", arg0, arg1)); }

    bool slowVerifyAccess(Class arg0, Class arg1, Class arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "slowVerifyAccess", "(Ljava.lang.Class;Ljava.lang.Class;Ljava.lang.Class;I)Z", arg0, arg1, arg2, arg3)); }

    bool trySetAccessible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "trySetAccessible", "()Z", )); }

    String toShortString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toShortString", "()Ljava.lang.String;", )); }

    bool isAccessible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessible", "()Z", )); }

    bool canAccess(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAccess", "(Ljava.lang.Object;)Z", arg0)); }

    AccessibleObject getRoot() { return AccessibleObject(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.lang.reflect.AccessibleObject;", )); }

};


/**
 * Classpath: [Ljava.lang.reflect.AccessibleObject;
 */
class AccessibleObject_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.AccessibleObject;";
public:
    STATICINITIALIZE;

    AccessibleObject_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.reflect.FieldAccessor
 * Package name: jdk.internal.reflect
 */
class FieldAccessor : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.reflect.FieldAccessor";
public:
    STATICINITIALIZE;

    FieldAccessor(jobject object) : JavaObject(object) {}

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool getBoolean(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(Ljava.lang.Object;)Z", arg0)); }

    byte getByte(Object arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(Ljava.lang.Object;)B", arg0)); }

    short getShort(Object arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(Ljava.lang.Object;)S", arg0)); }

    char getChar(Object arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "(Ljava.lang.Object;)C", arg0)); }

    int getInt(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(Object arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.lang.Object;)J", arg0)); }

    float getFloat(Object arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(Ljava.lang.Object;)F", arg0)); }

    double getDouble(Object arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(Ljava.lang.Object;)D", arg0)); }

    void set(Object arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1)); }

    void setBoolean(Object arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setBoolean", "(Ljava.lang.Object;Z)V", arg0, arg1)); }

    void setByte(Object arg0, byte arg1) { (*javaClass->invokeMethod<void>(this->object, "setByte", "(Ljava.lang.Object;B)V", arg0, arg1)); }

    void setChar(Object arg0, char arg1) { (*javaClass->invokeMethod<void>(this->object, "setChar", "(Ljava.lang.Object;C)V", arg0, arg1)); }

    void setShort(Object arg0, short arg1) { (*javaClass->invokeMethod<void>(this->object, "setShort", "(Ljava.lang.Object;S)V", arg0, arg1)); }

    void setInt(Object arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setInt", "(Ljava.lang.Object;I)V", arg0, arg1)); }

    void setLong(Object arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "setLong", "(Ljava.lang.Object;J)V", arg0, arg1)); }

    void setFloat(Object arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setFloat", "(Ljava.lang.Object;F)V", arg0, arg1)); }

    void setDouble(Object arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setDouble", "(Ljava.lang.Object;D)V", arg0, arg1)); }

};


/**
 * Classpath: java.lang.reflect.AnnotatedType
 * Package name: java.lang.reflect
 */
class AnnotatedType : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.AnnotatedType";
public:
    STATICINITIALIZE;

    AnnotatedType(jobject object) : JavaObject(object) {}

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    Type getType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Ljava.lang.reflect.Type;", )); }

    AnnotatedType getAnnotatedOwnerType() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedOwnerType", "()Ljava.lang.reflect.AnnotatedType;", )); }

};


/**
 * Classpath: [C
 */
class arr_C : public Object {
protected:
    const inline static char *className = "[C";
public:
    STATICINITIALIZE;

    arr_C(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.AbstractStringBuilder
 * Package name: java.lang
 */
class AbstractStringBuilder : public Object {
protected:
    const inline static char *className = "java.lang.AbstractStringBuilder";
public:
    STATICINITIALIZE;

    AbstractStringBuilder(jobject object) : JavaObject(object) {}

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    AbstractStringBuilder append(AbstractStringBuilder arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.AbstractStringBuilder;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(CharSequence arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(CharSequence arg0, int arg1, int arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    AbstractStringBuilder append(arr_C arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([C)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(Object arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.Object;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(StringBuffer arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.StringBuffer;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(String arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(long arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(J)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(float arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(F)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(double arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(D)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(char arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(bool arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Z)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(arr_C arg0, int arg1, int arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([CII)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    void inflate() { (*javaClass->invokeMethod<void>(this->object, "inflate", "()V", )); }

    void getChars(int arg0, int arg1, arr_C arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "getChars", "(II[CI)V", arg0, arg1, arg2, arg3)); }

    int compareTo(AbstractStringBuilder arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.AbstractStringBuilder;)I", arg0)); }

    int indexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;)I", arg0)); }

    int indexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, String arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, CharSequence arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, arr_C arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, Object arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.Object;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, arr_C arg1, int arg2, int arg3) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }

    AbstractStringBuilder insert(int arg0, bool arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, float arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, double arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, long arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, CharSequence arg1, int arg2, int arg3) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }

    AbstractStringBuilder insert(int arg0, int arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(II)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, char arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    bool isLatin1() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLatin1", "()Z", )); }

    char charAt(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "charAt", "(I)C", arg0)); }

    int codePointAt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointAt", "(I)I", arg0)); }

    int codePointBefore(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointBefore", "(I)I", arg0)); }

    int codePointCount(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "codePointCount", "(II)I", arg0, arg1)); }

    int offsetByCodePoints(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "offsetByCodePoints", "(II)I", arg0, arg1)); }

    void getBytes(arr_B arg0, int arg1, byte arg2) { (*javaClass->invokeMethod<void>(this->object, "getBytes", "([BIB)V", arg0, arg1, arg2)); }

    byte getCoder() { return byte(*javaClass->invokeMethod<byte>(this->object, "getCoder", "()B", )); }

    int lastIndexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;)I", arg0)); }

    int lastIndexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    String substring(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(I)Ljava.lang.String;", arg0)); }

    String substring(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(II)Ljava.lang.String;", arg0, arg1)); }

    AbstractStringBuilder replace(int arg0, int arg1, String arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "replace", "(IILjava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    IntStream codePoints() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "codePoints", "()Ljava.util.stream.IntStream;", )); }

    CharSequence subSequence(int arg0, int arg1) { return CharSequence(*javaClass->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava.lang.CharSequence;", arg0, arg1)); }

    IntStream chars() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "chars", "()Ljava.util.stream.IntStream;", )); }

    Spliterator_OfInt lambda_codePoints_1() { return Spliterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "lambda$codePoints$1", "()Ljava.util.Spliterator$OfInt;", )); }

    Spliterator_OfInt lambda_chars_0() { return Spliterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "lambda$chars$0", "()Ljava.util.Spliterator$OfInt;", )); }

    AbstractStringBuilder delete(int arg0, int arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "delete", "(II)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    void setLength(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLength", "(I)V", arg0)); }

    int newCapacity(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "newCapacity", "(I)I", arg0)); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    void setCharAt(int arg0, char arg1) { (*javaClass->invokeMethod<void>(this->object, "setCharAt", "(IC)V", arg0, arg1)); }

    AbstractStringBuilder appendCodePoint(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder deleteCharAt(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder reverse() { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "reverse", "()Ljava.lang.AbstractStringBuilder;", )); }

    void initBytes(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "initBytes", "([CII)V", arg0, arg1, arg2)); }

    void ensureCapacityInternal(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacityInternal", "(I)V", arg0)); }

    static void checkRangeSIOOBE(int arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "checkRangeSIOOBE", "(III)V", arg0, arg1, arg2)); }

    static void checkRange(int arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "checkRange", "(III)V", arg0, arg1, arg2)); }

    AbstractStringBuilder appendNull() { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "appendNull", "()Ljava.lang.AbstractStringBuilder;", )); }

    void putStringAt(int arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "putStringAt", "(ILjava.lang.String;)V", arg0, arg1)); }

    void putStringAt(int arg0, String arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putStringAt", "(ILjava.lang.String;II)V", arg0, arg1, arg2, arg3)); }

    void putCharsAt(int arg0, arr_C arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putCharsAt", "(I[CII)V", arg0, arg1, arg2, arg3)); }

    void putCharsAt(int arg0, CharSequence arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putCharsAt", "(ILjava.lang.CharSequence;II)V", arg0, arg1, arg2, arg3)); }

    void appendChars(CharSequence arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "appendChars", "(Ljava.lang.CharSequence;II)V", arg0, arg1, arg2)); }

    void appendChars(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "appendChars", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void appendChars(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "appendChars", "([CII)V", arg0, arg1, arg2)); }

    void shift(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "shift", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: java.lang.CharSequence
 * Package name: java.lang
 */
class CharSequence : public JavaObject {
protected:
    const inline static char *className = "java.lang.CharSequence";
public:
    STATICINITIALIZE;

    CharSequence(jobject object) : JavaObject(object) {}

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static int compare(CharSequence arg0, CharSequence arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(Ljava.lang.CharSequence;Ljava.lang.CharSequence;)I", arg0, arg1)); }

    char charAt(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "charAt", "(I)C", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    IntStream codePoints() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "codePoints", "()Ljava.util.stream.IntStream;", )); }

    CharSequence subSequence(int arg0, int arg1) { return CharSequence(*javaClass->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava.lang.CharSequence;", arg0, arg1)); }

    IntStream chars() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "chars", "()Ljava.util.stream.IntStream;", )); }

    Spliterator_OfInt lambda_codePoints_1() { return Spliterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "lambda$codePoints$1", "()Ljava.util.Spliterator$OfInt;", )); }

    Spliterator_OfInt lambda_chars_0() { return Spliterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "lambda$chars$0", "()Ljava.util.Spliterator$OfInt;", )); }

};


/**
 * Classpath: java.util.Spliterator$OfInt
 * Enclosing class: java.util.Spliterator
 * Package name: java.util
 */
class Spliterator_OfInt : public JavaObject {
protected:
    const inline static char *className = "java.util.Spliterator$OfInt";
public:
    STATICINITIALIZE;

    Spliterator_OfInt(jobject object) : JavaObject(object) {}

    void forEachRemaining(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.lang.Object;)V", arg0)); }

    void forEachRemaining(IntConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.IntConsumer;)V", arg0)); }

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    bool tryAdvance(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.lang.Object;)Z", arg0)); }

    bool tryAdvance(Consumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.util.function.Consumer;)Z", arg0)); }

    bool tryAdvance(IntConsumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.util.function.IntConsumer;)Z", arg0)); }

    Spliterator_OfPrimitive trySplit() { return Spliterator_OfPrimitive(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator$OfPrimitive;", )); }

    Spliterator trySplit() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator;", )); }

    Spliterator_OfInt trySplit() { return Spliterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator$OfInt;", )); }

};


/**
 * Classpath: java.util.function.IntConsumer
 * Package name: java.util.function
 */
class IntConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntConsumer";
public:
    STATICINITIALIZE;

    IntConsumer(jobject object) : JavaObject(object) {}

    void accept(int arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(I)V", arg0)); }

    IntConsumer andThen(IntConsumer arg0) { return IntConsumer(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.IntConsumer;)Ljava.util.function.IntConsumer;", arg0)); }

    void lambda_andThen_0(IntConsumer arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "lambda$andThen$0", "(Ljava.util.function.IntConsumer;I)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.Spliterator$OfPrimitive
 * Enclosing class: java.util.Spliterator
 * Package name: java.util
 */
class Spliterator_OfPrimitive : public JavaObject {
protected:
    const inline static char *className = "java.util.Spliterator$OfPrimitive";
public:
    STATICINITIALIZE;

    Spliterator_OfPrimitive(jobject object) : JavaObject(object) {}

    void forEachRemaining(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.lang.Object;)V", arg0)); }

    bool tryAdvance(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.lang.Object;)Z", arg0)); }

    Spliterator trySplit() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator;", )); }

    Spliterator_OfPrimitive trySplit() { return Spliterator_OfPrimitive(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator$OfPrimitive;", )); }

};


/**
 * Classpath: java.lang.Appendable
 * Package name: java.lang
 */
class Appendable : public JavaObject {
protected:
    const inline static char *className = "java.lang.Appendable";
public:
    STATICINITIALIZE;

    Appendable(jobject object) : JavaObject(object) {}

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

};


/**
 * Classpath: [B
 */
class arr_B : public Object {
protected:
    const inline static char *className = "[B";
public:
    STATICINITIALIZE;

    arr_B(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.io.ObjectOutputStream$PutField
 * Enclosing class: java.io.ObjectOutputStream
 * Package name: java.io
 */
class ObjectOutputStream_PutField : public Object {
protected:
    const inline static char *className = "java.io.ObjectOutputStream$PutField";
public:
    STATICINITIALIZE;

    ObjectOutputStream_PutField(jobject object) : JavaObject(object) {}

    void put(String arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;F)V", arg0, arg1)); }

    void put(String arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;J)V", arg0, arg1)); }

    void put(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void put(String arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;D)V", arg0, arg1)); }

    void put(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    void put(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void put(String arg0, byte arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;B)V", arg0, arg1)); }

    void put(String arg0, char arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;C)V", arg0, arg1)); }

    void put(String arg0, short arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;S)V", arg0, arg1)); }

    void write(ObjectOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.io.ObjectOutput;)V", arg0)); }

};


/**
 * Classpath: java.io.ObjectOutput
 * Package name: java.io
 */
class ObjectOutput : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectOutput";
public:
    STATICINITIALIZE;

    ObjectOutput(jobject object) : JavaObject(object) {}

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void write(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }

    void write(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void writeObject(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.lang.Object;)V", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

};


/**
 * Classpath: java.lang.Boolean
 * Package name: java.lang
 */
class Boolean : public Object {
protected:
    const inline static char *className = "java.lang.Boolean";
public:
    STATICINITIALIZE;

    Boolean(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static String toString(bool arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(Z)Ljava.lang.String;", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static int hashCode(bool arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashCode", "(Z)I", arg0)); }

    int compareTo(Boolean arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Boolean;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static bool getBoolean(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "getBoolean", "(Ljava.lang.String;)Z", arg0)); }

    static int compare(bool arg0, bool arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(ZZ)I", arg0, arg1)); }

    bool booleanValue() { return bool(*javaClass->invokeMethod<boolean>(this->object, "booleanValue", "()Z", )); }

    static Boolean valueOf(String arg0) { return Boolean(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.Boolean;", arg0)); }

    static Boolean valueOf(bool arg0) { return Boolean(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Z)Ljava.lang.Boolean;", arg0)); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    static bool parseBoolean(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "parseBoolean", "(Ljava.lang.String;)Z", arg0)); }

    static bool logicalAnd(bool arg0, bool arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "logicalAnd", "(ZZ)Z", arg0, arg1)); }

    static bool logicalOr(bool arg0, bool arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "logicalOr", "(ZZ)Z", arg0, arg1)); }

    static bool logicalXor(bool arg0, bool arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "logicalXor", "(ZZ)Z", arg0, arg1)); }

};


/**
 * Classpath: java.lang.Throwable
 * Package name: java.lang
 */
class Throwable : public Object {
protected:
    const inline static char *className = "java.lang.Throwable";
public:
    STATICINITIALIZE;

    Throwable(jobject object) : JavaObject(object) {}

    void printStackTrace() { (*javaClass->invokeMethod<void>(this->object, "printStackTrace", "()V", )); }

    void printStackTrace(PrintStream arg0) { (*javaClass->invokeMethod<void>(this->object, "printStackTrace", "(Ljava.io.PrintStream;)V", arg0)); }

    void printStackTrace(PrintWriter arg0) { (*javaClass->invokeMethod<void>(this->object, "printStackTrace", "(Ljava.io.PrintWriter;)V", arg0)); }

    void printStackTrace(Throwable_PrintStreamOrWriter arg0) { (*javaClass->invokeMethod<void>(this->object, "printStackTrace", "(Ljava.lang.Throwable$PrintStreamOrWriter;)V", arg0)); }

    Throwable fillInStackTrace(int arg0) { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "fillInStackTrace", "(I)Ljava.lang.Throwable;", arg0)); }

    Throwable fillInStackTrace() { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "fillInStackTrace", "()Ljava.lang.Throwable;", )); }

    Throwable getCause() { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "getCause", "()Ljava.lang.Throwable;", )); }

    Throwable initCause(Throwable arg0) { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "initCause", "(Ljava.lang.Throwable;)Ljava.lang.Throwable;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String getMessage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMessage", "()Ljava.lang.String;", )); }

    String getLocalizedMessage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLocalizedMessage", "()Ljava.lang.String;", )); }

    void printEnclosedStackTrace(Throwable_PrintStreamOrWriter arg0, StackTraceElement_interface arg1, String arg2, String arg3, Set arg4) { (*javaClass->invokeMethod<void>(this->object, "printEnclosedStackTrace", "(Ljava.lang.Throwable$PrintStreamOrWriter;[Ljava.lang.StackTraceElement;Ljava.lang.String;Ljava.lang.String;Ljava.util.Set;)V", arg0, arg1, arg2, arg3, arg4)); }

    int validateSuppressedExceptionsList(List arg0) { return int(*javaClass->invokeMethod<int>(this->object, "validateSuppressedExceptionsList", "(Ljava.util.List;)I", arg0)); }

    void setCause(Throwable arg0) { (*javaClass->invokeMethod<void>(this->object, "setCause", "(Ljava.lang.Throwable;)V", arg0)); }

    void setStackTrace(StackTraceElement_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setStackTrace", "([Ljava.lang.StackTraceElement;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void addSuppressed(Throwable arg0) { (*javaClass->invokeMethod<void>(this->object, "addSuppressed", "(Ljava.lang.Throwable;)V", arg0)); }

};


/**
 * Classpath: java.util.Locale
 * Package name: java.util
 */
class Locale : public Object {
protected:
    const inline static char *className = "java.util.Locale";
public:
    STATICINITIALIZE;

    Locale(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    static Locale getDefault(Locale_Category arg0) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefault", "(Ljava.util.Locale$Category;)Ljava.util.Locale;", arg0)); }

    static Locale getDefault() { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefault", "()Ljava.util.Locale;", )); }

    static Locale lookup(List arg0, Collection arg1) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "lookup", "(Ljava.util.List;Ljava.util.Collection;)Ljava.util.Locale;", arg0, arg1)); }

    static List filter(List arg0, Collection arg1, Locale_FilteringMode arg2) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "filter", "(Ljava.util.List;Ljava.util.Collection;Ljava.util.Locale$FilteringMode;)Ljava.util.List;", arg0, arg1, arg2)); }

    static List filter(List arg0, Collection arg1) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "filter", "(Ljava.util.List;Ljava.util.Collection;)Ljava.util.List;", arg0, arg1)); }

    static Locale getInstance(String arg0, String arg1, String arg2, String arg3, LocaleExtensions arg4) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Lsun.util.locale.LocaleExtensions;)Ljava.util.Locale;", arg0, arg1, arg2, arg3, arg4)); }

    static Locale getInstance(BaseLocale arg0, LocaleExtensions arg1) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Lsun.util.locale.BaseLocale;Lsun.util.locale.LocaleExtensions;)Ljava.util.Locale;", arg0, arg1)); }

    static Locale getInstance(String arg0, String arg1, String arg2) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.util.Locale;", arg0, arg1, arg2)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

    static Set getISOCountries(Locale_IsoCountryCode arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getISOCountries", "(Ljava.util.Locale$IsoCountryCode;)Ljava.util.Set;", arg0)); }

    Locale stripExtensions() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "stripExtensions", "()Ljava.util.Locale;", )); }

    String getExtension(char arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getExtension", "(C)Ljava.lang.String;", arg0)); }

    Set getExtensionKeys() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getExtensionKeys", "()Ljava.util.Set;", )); }

    String toLanguageTag() { return String(*javaClass->invokeMethod<jobject>(this->object, "toLanguageTag", "()Ljava.lang.String;", )); }

    static Locale forLanguageTag(String arg0) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "forLanguageTag", "(Ljava.lang.String;)Ljava.util.Locale;", arg0)); }

    String getISO3Language() { return String(*javaClass->invokeMethod<jobject>(this->object, "getISO3Language", "()Ljava.lang.String;", )); }

    String getISO3Country() { return String(*javaClass->invokeMethod<jobject>(this->object, "getISO3Country", "()Ljava.lang.String;", )); }

    static String lambda_formatList_3(String arg0, String arg1, String arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$formatList$3", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1, arg2)); }

    static String lambda_getDisplayKeyTypeExtensionString_2(Locale arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$getDisplayKeyTypeExtensionString$2", "(Ljava.util.Locale;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    String lambda_getDisplayName_1(LocaleResources arg0, Locale arg1, String arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "lambda$getDisplayName$1", "(Lsun.util.locale.provider.LocaleResources;Ljava.util.Locale;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1, arg2)); }

    String lambda_getDisplayName_0(Locale arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "lambda$getDisplayName$0", "(Ljava.util.Locale;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    String getLanguage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLanguage", "()Ljava.lang.String;", )); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

    String getDisplayName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    static String convertOldISOCodes(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "convertOldISOCodes", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static LocaleExtensions getCompatibilityExtensions(String arg0, String arg1, String arg2, String arg3) { return LocaleExtensions(*javaClass->invokeStaticMethod<jobject>(this->object, "getCompatibilityExtensions", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Lsun.util.locale.LocaleExtensions;", arg0, arg1, arg2, arg3)); }

    static Locale getDisplayLocale() { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getDisplayLocale", "()Ljava.util.Locale;", )); }

    static Locale getFormatLocale() { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getFormatLocale", "()Ljava.util.Locale;", )); }

    static Locale initDefault(Locale_Category arg0) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "initDefault", "(Ljava.util.Locale$Category;)Ljava.util.Locale;", arg0)); }

    static Locale initDefault() { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "initDefault", "()Ljava.util.Locale;", )); }

    static Optional getDefaultExtensions(String arg0) { return Optional(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultExtensions", "(Ljava.lang.String;)Ljava.util.Optional;", arg0)); }

    String getScript() { return String(*javaClass->invokeMethod<jobject>(this->object, "getScript", "()Ljava.lang.String;", )); }

    String getCountry() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCountry", "()Ljava.lang.String;", )); }

    String getVariant() { return String(*javaClass->invokeMethod<jobject>(this->object, "getVariant", "()Ljava.lang.String;", )); }

    LocaleExtensions getLocaleExtensions() { return LocaleExtensions(*javaClass->invokeMethod<jobject>(this->object, "getLocaleExtensions", "()Lsun.util.locale.LocaleExtensions;", )); }

    static void setDefault(Locale_Category arg0, Locale arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefault", "(Ljava.util.Locale$Category;Ljava.util.Locale;)V", arg0, arg1)); }

    static void setDefault(Locale arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefault", "(Ljava.util.Locale;)V", arg0)); }

    bool hasExtensions() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasExtensions", "()Z", )); }

    Set getUnicodeLocaleAttributes() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getUnicodeLocaleAttributes", "()Ljava.util.Set;", )); }

    static bool isUnicodeExtensionKey(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUnicodeExtensionKey", "(Ljava.lang.String;)Z", arg0)); }

    String getUnicodeLocaleType(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnicodeLocaleType", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    Set getUnicodeLocaleKeys() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getUnicodeLocaleKeys", "()Ljava.util.Set;", )); }

    BaseLocale getBaseLocale() { return BaseLocale(*javaClass->invokeMethod<jobject>(this->object, "getBaseLocale", "()Lsun.util.locale.BaseLocale;", )); }

    static String getISO3Code(String arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getISO3Code", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    String getDisplayLanguage(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayLanguage", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String getDisplayLanguage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayLanguage", "()Ljava.lang.String;", )); }

    String getDisplayString(String arg0, String arg1, Locale arg2, int arg3) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayString", "(Ljava.lang.String;Ljava.lang.String;Ljava.util.Locale;I)Ljava.lang.String;", arg0, arg1, arg2, arg3)); }

    String getDisplayScript() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayScript", "()Ljava.lang.String;", )); }

    String getDisplayScript(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayScript", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String getDisplayCountry(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayCountry", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String getDisplayCountry() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayCountry", "()Ljava.lang.String;", )); }

    String getDisplayVariant() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayVariant", "()Ljava.lang.String;", )); }

    String getDisplayVariant(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayVariant", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    static String formatList(String_interface arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "formatList", "([Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    static List filterTags(List arg0, Collection arg1) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "filterTags", "(Ljava.util.List;Ljava.util.Collection;)Ljava.util.List;", arg0, arg1)); }

    static List filterTags(List arg0, Collection arg1, Locale_FilteringMode arg2) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "filterTags", "(Ljava.util.List;Ljava.util.Collection;Ljava.util.Locale$FilteringMode;)Ljava.util.List;", arg0, arg1, arg2)); }

    static String lookupTag(List arg0, Collection arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupTag", "(Ljava.util.List;Ljava.util.Collection;)Ljava.lang.String;", arg0, arg1)); }

    String getDisplayKeyTypeExtensionString(String arg0, LocaleResources arg1, Locale arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayKeyTypeExtensionString", "(Ljava.lang.String;Lsun.util.locale.provider.LocaleResources;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1, arg2)); }

    static Locale createConstant(byte arg0) { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "createConstant", "(B)Ljava.util.Locale;", arg0)); }

};


/**
 * Classpath: java.lang.Enum
 * Package name: java.lang
 */
class Enum : public Object {
protected:
    const inline static char *className = "java.lang.Enum";
public:
    STATICINITIALIZE;

    Enum(jobject object) : JavaObject(object) {}

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    void finalize() { (*javaClass->invokeMethod<void>(this->object, "finalize", "()V", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(Enum arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Enum;)I", arg0)); }

    static Enum valueOf(Class arg0, String arg1) { return Enum(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.Class;Ljava.lang.String;)Ljava.lang.Enum;", arg0, arg1)); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    int ordinal() { return int(*javaClass->invokeMethod<int>(this->object, "ordinal", "()I", )); }

    Enum_EnumDesc lambda_describeConstable_0(ClassDesc arg0) { return Enum_EnumDesc(*javaClass->invokeMethod<jobject>(this->object, "lambda$describeConstable$0", "(Ljava.lang.constant.ClassDesc;)Ljava.lang.Enum$EnumDesc;", arg0)); }

    void readObjectNoData() { (*javaClass->invokeMethod<void>(this->object, "readObjectNoData", "()V", )); }

};


/**
 * Classpath: java.lang.constant.ClassDesc
 * Package name: java.lang.constant
 */
class ClassDesc : public JavaObject {
protected:
    const inline static char *className = "java.lang.constant.ClassDesc";
public:
    STATICINITIALIZE;

    ClassDesc(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool isArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isArray", "()Z", )); }

    bool isPrimitive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPrimitive", "()Z", )); }

    TypeDescriptor_OfField componentType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "componentType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

    ClassDesc componentType() { return ClassDesc(*javaClass->invokeMethod<jobject>(this->object, "componentType", "()Ljava.lang.constant.ClassDesc;", )); }

    static ClassDesc of(String arg0) { return ClassDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;)Ljava.lang.constant.ClassDesc;", arg0)); }

    static ClassDesc of(String arg0, String arg1) { return ClassDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.constant.ClassDesc;", arg0, arg1)); }

    String packageName() { return String(*javaClass->invokeMethod<jobject>(this->object, "packageName", "()Ljava.lang.String;", )); }

    String descriptorString() { return String(*javaClass->invokeMethod<jobject>(this->object, "descriptorString", "()Ljava.lang.String;", )); }

    static ClassDesc ofDescriptor(String arg0) { return ClassDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "ofDescriptor", "(Ljava.lang.String;)Ljava.lang.constant.ClassDesc;", arg0)); }

    TypeDescriptor_OfField arrayType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "arrayType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

    ClassDesc arrayType(int arg0) { return ClassDesc(*javaClass->invokeMethod<jobject>(this->object, "arrayType", "(I)Ljava.lang.constant.ClassDesc;", arg0)); }

    ClassDesc arrayType() { return ClassDesc(*javaClass->invokeMethod<jobject>(this->object, "arrayType", "()Ljava.lang.constant.ClassDesc;", )); }

    String displayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "displayName", "()Ljava.lang.String;", )); }

    bool isClassOrInterface() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isClassOrInterface", "()Z", )); }

    ClassDesc nested(String arg0, String_interface arg1) { return ClassDesc(*javaClass->invokeMethod<jobject>(this->object, "nested", "(Ljava.lang.String;[Ljava.lang.String;)Ljava.lang.constant.ClassDesc;", arg0, arg1)); }

    ClassDesc nested(String arg0) { return ClassDesc(*javaClass->invokeMethod<jobject>(this->object, "nested", "(Ljava.lang.String;)Ljava.lang.constant.ClassDesc;", arg0)); }

};


/**
 * Classpath: [Ljava.lang.String;
 */
class String_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.String;";
public:
    STATICINITIALIZE;

    String_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.constant.DynamicConstantDesc
 * Package name: java.lang.constant
 */
class DynamicConstantDesc : public Object {
protected:
    const inline static char *className = "java.lang.constant.DynamicConstantDesc";
public:
    STATICINITIALIZE;

    DynamicConstantDesc(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static DynamicConstantDesc of(DirectMethodHandleDesc arg0, ConstantDesc_interface arg1) { return DynamicConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.constant.DirectMethodHandleDesc;[Ljava.lang.constant.ConstantDesc;)Ljava.lang.constant.DynamicConstantDesc;", arg0, arg1)); }

    static DynamicConstantDesc of(DirectMethodHandleDesc arg0) { return DynamicConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.constant.DirectMethodHandleDesc;)Ljava.lang.constant.DynamicConstantDesc;", arg0)); }

    Object resolveConstantDesc(MethodHandles_Lookup arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Object;", arg0)); }

    DirectMethodHandleDesc bootstrapMethod() { return DirectMethodHandleDesc(*javaClass->invokeMethod<jobject>(this->object, "bootstrapMethod", "()Ljava.lang.constant.DirectMethodHandleDesc;", )); }

    static DynamicConstantDesc ofNamed(DirectMethodHandleDesc arg0, String arg1, ClassDesc arg2, ConstantDesc_interface arg3) { return DynamicConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "ofNamed", "(Ljava.lang.constant.DirectMethodHandleDesc;Ljava.lang.String;Ljava.lang.constant.ClassDesc;[Ljava.lang.constant.ConstantDesc;)Ljava.lang.constant.DynamicConstantDesc;", arg0, arg1, arg2, arg3)); }

    ClassDesc constantType() { return ClassDesc(*javaClass->invokeMethod<jobject>(this->object, "constantType", "()Ljava.lang.constant.ClassDesc;", )); }

    String constantName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constantName", "()Ljava.lang.String;", )); }

    ConstantDesc tryCanonicalize() { return ConstantDesc(*javaClass->invokeMethod<jobject>(this->object, "tryCanonicalize", "()Ljava.lang.constant.ConstantDesc;", )); }

    static ConstantDesc ofCanonical(DirectMethodHandleDesc arg0, String arg1, ClassDesc arg2, ConstantDesc_interface arg3) { return ConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "ofCanonical", "(Ljava.lang.constant.DirectMethodHandleDesc;Ljava.lang.String;Ljava.lang.constant.ClassDesc;[Ljava.lang.constant.ConstantDesc;)Ljava.lang.constant.ConstantDesc;", arg0, arg1, arg2, arg3)); }

    List bootstrapArgsList() { return List(*javaClass->invokeMethod<jobject>(this->object, "bootstrapArgsList", "()Ljava.util.List;", )); }

    static ConstantDesc canonicalizeNull(DynamicConstantDesc arg0) { return ConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalizeNull", "(Ljava.lang.constant.DynamicConstantDesc;)Ljava.lang.constant.ConstantDesc;", arg0)); }

    static ConstantDesc canonicalizeEnum(DynamicConstantDesc arg0) { return ConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalizeEnum", "(Ljava.lang.constant.DynamicConstantDesc;)Ljava.lang.constant.ConstantDesc;", arg0)); }

    static ConstantDesc canonicalizePrimitiveClass(DynamicConstantDesc arg0) { return ConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalizePrimitiveClass", "(Ljava.lang.constant.DynamicConstantDesc;)Ljava.lang.constant.ConstantDesc;", arg0)); }

    static ConstantDesc canonicalizeStaticFieldVarHandle(DynamicConstantDesc arg0) { return ConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalizeStaticFieldVarHandle", "(Ljava.lang.constant.DynamicConstantDesc;)Ljava.lang.constant.ConstantDesc;", arg0)); }

    static ConstantDesc canonicalizeFieldVarHandle(DynamicConstantDesc arg0) { return ConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalizeFieldVarHandle", "(Ljava.lang.constant.DynamicConstantDesc;)Ljava.lang.constant.ConstantDesc;", arg0)); }

    static ConstantDesc canonicalizeArrayVarHandle(DynamicConstantDesc arg0) { return ConstantDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalizeArrayVarHandle", "(Ljava.lang.constant.DynamicConstantDesc;)Ljava.lang.constant.ConstantDesc;", arg0)); }

};


/**
 * Classpath: java.lang.constant.DirectMethodHandleDesc
 * Package name: java.lang.constant
 */
class DirectMethodHandleDesc : public JavaObject {
protected:
    const inline static char *className = "java.lang.constant.DirectMethodHandleDesc";
public:
    STATICINITIALIZE;

    DirectMethodHandleDesc(jobject object) : JavaObject(object) {}

    String methodName() { return String(*javaClass->invokeMethod<jobject>(this->object, "methodName", "()Ljava.lang.String;", )); }

    int refKind() { return int(*javaClass->invokeMethod<int>(this->object, "refKind", "()I", )); }

    DirectMethodHandleDesc_Kind kind() { return DirectMethodHandleDesc_Kind(*javaClass->invokeMethod<jobject>(this->object, "kind", "()Ljava.lang.constant.DirectMethodHandleDesc$Kind;", )); }

    ClassDesc owner() { return ClassDesc(*javaClass->invokeMethod<jobject>(this->object, "owner", "()Ljava.lang.constant.ClassDesc;", )); }

    bool isOwnerInterface() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOwnerInterface", "()Z", )); }

    String lookupDescriptor() { return String(*javaClass->invokeMethod<jobject>(this->object, "lookupDescriptor", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.lang.constant.DirectMethodHandleDesc$Kind
 * Enclosing class: java.lang.constant.DirectMethodHandleDesc
 * Package name: java.lang.constant
 */
class DirectMethodHandleDesc_Kind : public Enum {
protected:
    const inline static char *className = "java.lang.constant.DirectMethodHandleDesc$Kind";
public:
    STATICINITIALIZE;

    DirectMethodHandleDesc_Kind(jobject object) : JavaObject(object) {}

    static DirectMethodHandleDesc_Kind valueOf(int arg0, bool arg1) { return DirectMethodHandleDesc_Kind(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(IZ)Ljava.lang.constant.DirectMethodHandleDesc$Kind;", arg0, arg1)); }

    static DirectMethodHandleDesc_Kind valueOf(String arg0) { return DirectMethodHandleDesc_Kind(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.constant.DirectMethodHandleDesc$Kind;", arg0)); }

    static DirectMethodHandleDesc_Kind valueOf(int arg0) { return DirectMethodHandleDesc_Kind(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(I)Ljava.lang.constant.DirectMethodHandleDesc$Kind;", arg0)); }

    static int tableIndex(int arg0, bool arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "tableIndex", "(IZ)I", arg0, arg1)); }

    bool isVirtualMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVirtualMethod", "()Z", )); }

};


/**
 * Classpath: [Ljava.lang.constant.ConstantDesc;
 */
class ConstantDesc_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.constant.ConstantDesc;";
public:
    STATICINITIALIZE;

    ConstantDesc_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.constant.ConstantDesc
 * Package name: java.lang.constant
 */
class ConstantDesc : public JavaObject {
protected:
    const inline static char *className = "java.lang.constant.ConstantDesc";
public:
    STATICINITIALIZE;

    ConstantDesc(jobject object) : JavaObject(object) {}

    Object resolveConstantDesc(MethodHandles_Lookup arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.Locale$FilteringMode
 * Enclosing class: java.util.Locale
 * Package name: java.util
 */
class Locale_FilteringMode : public Enum {
protected:
    const inline static char *className = "java.util.Locale$FilteringMode";
public:
    STATICINITIALIZE;

    Locale_FilteringMode(jobject object) : JavaObject(object) {}

    static Locale_FilteringMode valueOf(String arg0) { return Locale_FilteringMode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.util.Locale$FilteringMode;", arg0)); }

};


/**
 * Classpath: sun.util.locale.LocaleExtensions
 * Package name: sun.util.locale
 */
class LocaleExtensions : public Object {
protected:
    const inline static char *className = "sun.util.locale.LocaleExtensions";
public:
    STATICINITIALIZE;

    LocaleExtensions(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    Extension getExtension(Character arg0) { return Extension(*javaClass->invokeMethod<jobject>(this->object, "getExtension", "(Ljava.lang.Character;)Lsun.util.locale.Extension;", arg0)); }

    static String toID(SortedMap arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toID", "(Ljava.util.SortedMap;)Ljava.lang.String;", arg0)); }

    static bool isValidUnicodeLocaleKey(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isValidUnicodeLocaleKey", "(Ljava.lang.String;)Z", arg0)); }

    static bool isValidKey(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isValidKey", "(C)Z", arg0)); }

    String getExtensionValue(Character arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getExtensionValue", "(Ljava.lang.Character;)Ljava.lang.String;", arg0)); }

    Set getKeys() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getKeys", "()Ljava.util.Set;", )); }

    Set getUnicodeLocaleAttributes() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getUnicodeLocaleAttributes", "()Ljava.util.Set;", )); }

    String getUnicodeLocaleType(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnicodeLocaleType", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    Set getUnicodeLocaleKeys() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getUnicodeLocaleKeys", "()Ljava.util.Set;", )); }

    String getID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getID", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.lang.Character
 * Package name: java.lang
 */
class Character : public Object {
protected:
    const inline static char *className = "java.lang.Character";
public:
    STATICINITIALIZE;

    Character(jobject object) : JavaObject(object) {}

    static String getName(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getName", "(I)Ljava.lang.String;", arg0)); }

    static bool isJavaIdentifierStart(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isJavaIdentifierStart", "(C)Z", arg0)); }

    static bool isJavaIdentifierStart(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isJavaIdentifierStart", "(I)Z", arg0)); }

    static bool isJavaIdentifierPart(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isJavaIdentifierPart", "(C)Z", arg0)); }

    static bool isJavaIdentifierPart(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isJavaIdentifierPart", "(I)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    static String toString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(I)Ljava.lang.String;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static String toString(char arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(C)Ljava.lang.String;", arg0)); }

    static int hashCode(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashCode", "(C)I", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static char reverseBytes(char arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "reverseBytes", "(C)C", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(Character arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Character;)I", arg0)); }

    static bool isDigit(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isDigit", "(I)Z", arg0)); }

    static bool isDigit(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isDigit", "(C)Z", arg0)); }

    static bool isLowerCase(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLowerCase", "(I)Z", arg0)); }

    static bool isLowerCase(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLowerCase", "(C)Z", arg0)); }

    static bool isUpperCase(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUpperCase", "(C)Z", arg0)); }

    static bool isUpperCase(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUpperCase", "(I)Z", arg0)); }

    static bool isWhitespace(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isWhitespace", "(I)Z", arg0)); }

    static bool isWhitespace(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isWhitespace", "(C)Z", arg0)); }

    static int compare(char arg0, char arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(CC)I", arg0, arg1)); }

    char charValue() { return char(*javaClass->invokeMethod<char>(this->object, "charValue", "()C", )); }

    static Character valueOf(char arg0) { return Character(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(C)Ljava.lang.Character;", arg0)); }

    static int toChars(int arg0, arr_C arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toChars", "(I[CI)I", arg0, arg1, arg2)); }

    static bool isHighSurrogate(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isHighSurrogate", "(C)Z", arg0)); }

    static bool isLowSurrogate(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLowSurrogate", "(C)Z", arg0)); }

    static bool isSurrogate(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isSurrogate", "(C)Z", arg0)); }

    static bool isSupplementaryCodePoint(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isSupplementaryCodePoint", "(I)Z", arg0)); }

    static char highSurrogate(int arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "highSurrogate", "(I)C", arg0)); }

    static char lowSurrogate(int arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "lowSurrogate", "(I)C", arg0)); }

    static int toCodePoint(char arg0, char arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toCodePoint", "(CC)I", arg0, arg1)); }

    static int codePointAt(arr_C arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointAt", "([CI)I", arg0, arg1)); }

    static int codePointAt(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointAt", "([CII)I", arg0, arg1, arg2)); }

    static int codePointAt(CharSequence arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointAt", "(Ljava.lang.CharSequence;I)I", arg0, arg1)); }

    static int codePointBefore(CharSequence arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointBefore", "(Ljava.lang.CharSequence;I)I", arg0, arg1)); }

    static int codePointBefore(arr_C arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointBefore", "([CI)I", arg0, arg1)); }

    static int codePointBefore(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointBefore", "([CII)I", arg0, arg1, arg2)); }

    static int codePointCount(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointCount", "([CII)I", arg0, arg1, arg2)); }

    static int codePointCount(CharSequence arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointCount", "(Ljava.lang.CharSequence;II)I", arg0, arg1, arg2)); }

    static int offsetByCodePoints(CharSequence arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "offsetByCodePoints", "(Ljava.lang.CharSequence;II)I", arg0, arg1, arg2)); }

    static int offsetByCodePoints(arr_C arg0, int arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "offsetByCodePoints", "([CIIII)I", arg0, arg1, arg2, arg3, arg4)); }

    static int toLowerCase(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toLowerCase", "(I)I", arg0)); }

    static char toLowerCase(char arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "toLowerCase", "(C)C", arg0)); }

    static char toUpperCase(char arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "toUpperCase", "(C)C", arg0)); }

    static int toUpperCase(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toUpperCase", "(I)I", arg0)); }

    static bool isBmpCodePoint(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isBmpCodePoint", "(I)Z", arg0)); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    static int getType(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getType", "(C)I", arg0)); }

    static int getType(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getType", "(I)I", arg0)); }

    static bool isLetter(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLetter", "(C)Z", arg0)); }

    static bool isLetter(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLetter", "(I)Z", arg0)); }

    static bool isLetterOrDigit(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLetterOrDigit", "(I)Z", arg0)); }

    static bool isLetterOrDigit(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLetterOrDigit", "(C)Z", arg0)); }

    static int codePointAtImpl(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointAtImpl", "([CII)I", arg0, arg1, arg2)); }

    static int codePointBeforeImpl(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointBeforeImpl", "([CII)I", arg0, arg1, arg2)); }

    static bool isValidCodePoint(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isValidCodePoint", "(I)Z", arg0)); }

    static void toSurrogates(int arg0, arr_C arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "toSurrogates", "(I[CI)V", arg0, arg1, arg2)); }

    static int codePointCountImpl(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointCountImpl", "([CII)I", arg0, arg1, arg2)); }

    static int offsetByCodePointsImpl(arr_C arg0, int arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "offsetByCodePointsImpl", "([CIIII)I", arg0, arg1, arg2, arg3, arg4)); }

    static bool isTitleCase(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isTitleCase", "(I)Z", arg0)); }

    static bool isTitleCase(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isTitleCase", "(C)Z", arg0)); }

    static bool isDefined(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isDefined", "(I)Z", arg0)); }

    static bool isDefined(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isDefined", "(C)Z", arg0)); }

    static bool isIdeographic(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isIdeographic", "(I)Z", arg0)); }

    static bool isUnicodeIdentifierStart(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUnicodeIdentifierStart", "(I)Z", arg0)); }

    static bool isUnicodeIdentifierStart(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUnicodeIdentifierStart", "(C)Z", arg0)); }

    static bool isUnicodeIdentifierPart(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUnicodeIdentifierPart", "(I)Z", arg0)); }

    static bool isUnicodeIdentifierPart(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUnicodeIdentifierPart", "(C)Z", arg0)); }

    static bool isIdentifierIgnorable(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isIdentifierIgnorable", "(I)Z", arg0)); }

    static bool isIdentifierIgnorable(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isIdentifierIgnorable", "(C)Z", arg0)); }

    static int toTitleCase(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toTitleCase", "(I)I", arg0)); }

    static char toTitleCase(char arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "toTitleCase", "(C)C", arg0)); }

    static int digit(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "digit", "(II)I", arg0, arg1)); }

    static int digit(char arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "digit", "(CI)I", arg0, arg1)); }

    static int getNumericValue(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getNumericValue", "(I)I", arg0)); }

    static int getNumericValue(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getNumericValue", "(C)I", arg0)); }

    static bool isSpaceChar(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isSpaceChar", "(I)Z", arg0)); }

    static bool isSpaceChar(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isSpaceChar", "(C)Z", arg0)); }

    static bool isISOControl(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isISOControl", "(C)Z", arg0)); }

    static bool isISOControl(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isISOControl", "(I)Z", arg0)); }

    static byte getDirectionality(int arg0) { return byte(*javaClass->invokeStaticMethod<byte>(this->object, "getDirectionality", "(I)B", arg0)); }

    static byte getDirectionality(char arg0) { return byte(*javaClass->invokeStaticMethod<byte>(this->object, "getDirectionality", "(C)B", arg0)); }

    static bool isMirrored(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMirrored", "(C)Z", arg0)); }

    static bool isMirrored(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMirrored", "(I)Z", arg0)); }

    static int toUpperCaseEx(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toUpperCaseEx", "(I)I", arg0)); }

    static bool isSurrogatePair(char arg0, char arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isSurrogatePair", "(CC)Z", arg0, arg1)); }

    static int charCount(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "charCount", "(I)I", arg0)); }

    static bool isJavaLetter(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isJavaLetter", "(C)Z", arg0)); }

    static bool isJavaLetterOrDigit(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isJavaLetterOrDigit", "(C)Z", arg0)); }

    static bool isAlphabetic(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isAlphabetic", "(I)Z", arg0)); }

    static bool isSpace(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isSpace", "(C)Z", arg0)); }

    static char forDigit(int arg0, int arg1) { return char(*javaClass->invokeStaticMethod<char>(this->object, "forDigit", "(II)C", arg0, arg1)); }

    static int codePointOf(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "codePointOf", "(Ljava.lang.String;)I", arg0)); }

};


/**
 * Classpath: sun.util.locale.Extension
 * Package name: sun.util.locale
 */
class Extension : public Object {
protected:
    const inline static char *className = "sun.util.locale.Extension";
public:
    STATICINITIALIZE;

    Extension(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String getValue() { return String(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.String;", )); }

    char getKey() { return char(*javaClass->invokeMethod<char>(this->object, "getKey", "()C", )); }

    void setValue(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setValue", "(Ljava.lang.String;)V", arg0)); }

    String getID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getID", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.util.SortedMap
 * Package name: java.util
 */
class SortedMap : public JavaObject {
protected:
    const inline static char *className = "java.util.SortedMap";
public:
    STATICINITIALIZE;

    SortedMap(jobject object) : JavaObject(object) {}

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    Comparator comparator() { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "comparator", "()Ljava.util.Comparator;", )); }

    Object firstKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "firstKey", "()Ljava.lang.Object;", )); }

    Object lastKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "lastKey", "()Ljava.lang.Object;", )); }

    SortedMap subMap(Object arg0, Object arg1) { return SortedMap(*javaClass->invokeMethod<jobject>(this->object, "subMap", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.SortedMap;", arg0, arg1)); }

    SortedMap headMap(Object arg0) { return SortedMap(*javaClass->invokeMethod<jobject>(this->object, "headMap", "(Ljava.lang.Object;)Ljava.util.SortedMap;", arg0)); }

    SortedMap tailMap(Object arg0) { return SortedMap(*javaClass->invokeMethod<jobject>(this->object, "tailMap", "(Ljava.lang.Object;)Ljava.util.SortedMap;", arg0)); }

};


/**
 * Classpath: sun.util.locale.BaseLocale
 * Package name: sun.util.locale
 */
class BaseLocale : public Object {
protected:
    const inline static char *className = "sun.util.locale.BaseLocale";
public:
    STATICINITIALIZE;

    BaseLocale(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static BaseLocale getInstance(String arg0, String arg1, String arg2, String arg3) { return BaseLocale(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Lsun.util.locale.BaseLocale;", arg0, arg1, arg2, arg3)); }

    static BaseLocale createInstance(String arg0, String arg1) { return BaseLocale(*javaClass->invokeStaticMethod<jobject>(this->object, "createInstance", "(Ljava.lang.String;Ljava.lang.String;)Lsun.util.locale.BaseLocale;", arg0, arg1)); }

    String getLanguage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLanguage", "()Ljava.lang.String;", )); }

    static String convertOldISOCodes(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "convertOldISOCodes", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String getScript() { return String(*javaClass->invokeMethod<jobject>(this->object, "getScript", "()Ljava.lang.String;", )); }

    String getVariant() { return String(*javaClass->invokeMethod<jobject>(this->object, "getVariant", "()Ljava.lang.String;", )); }

    String getRegion() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRegion", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.util.Locale$IsoCountryCode
 * Enclosing class: java.util.Locale
 * Package name: java.util
 */
class Locale_IsoCountryCode : public Enum {
protected:
    const inline static char *className = "java.util.Locale$IsoCountryCode";
public:
    STATICINITIALIZE;

    Locale_IsoCountryCode(jobject object) : JavaObject(object) {}

    static Locale_IsoCountryCode valueOf(String arg0) { return Locale_IsoCountryCode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.util.Locale$IsoCountryCode;", arg0)); }

    Set createCountryCodeSet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "createCountryCodeSet", "()Ljava.util.Set;", )); }

    static Set retrieveISOCountryCodes(Locale_IsoCountryCode arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "retrieveISOCountryCodes", "(Ljava.util.Locale$IsoCountryCode;)Ljava.util.Set;", arg0)); }

};


/**
 * Classpath: sun.util.locale.provider.LocaleResources
 * Package name: sun.util.locale.provider
 */
class LocaleResources : public Object {
protected:
    const inline static char *className = "sun.util.locale.provider.LocaleResources";
public:
    STATICINITIALIZE;

    LocaleResources(jobject object) : JavaObject(object) {}

    static void trace(String arg0, Object_interface arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "trace", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    void removeEmptyReferences() { (*javaClass->invokeMethod<void>(this->object, "removeEmptyReferences", "()V", )); }

    Object getBreakIteratorInfo(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getBreakIteratorInfo", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    String getCalendarData(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getCalendarData", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String getCollationData() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCollationData", "()Ljava.lang.String;", )); }

    Object getTimeZoneNames(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getTimeZoneNames", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Set getZoneIDs() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getZoneIDs", "()Ljava.util.Set;", )); }

    ResourceBundle getJavaTimeFormatData() { return ResourceBundle(*javaClass->invokeMethod<jobject>(this->object, "getJavaTimeFormatData", "()Ljava.util.ResourceBundle;", )); }

    String getDateTimePattern(int arg0, int arg1, Calendar arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDateTimePattern", "(IILjava.util.Calendar;)Ljava.lang.String;", arg0, arg1, arg2)); }

    String getDateTimePattern(String arg0, int arg1, int arg2, String arg3) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDateTimePattern", "(Ljava.lang.String;IILjava.lang.String;)Ljava.lang.String;", arg0, arg1, arg2, arg3)); }

    String getDateTimePattern(String arg0, String arg1, int arg2, String arg3) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDateTimePattern", "(Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;)Ljava.lang.String;", arg0, arg1, arg2, arg3)); }

    String getJavaTimeDateTimePattern(int arg0, int arg1, String arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "getJavaTimeDateTimePattern", "(IILjava.lang.String;)Ljava.lang.String;", arg0, arg1, arg2)); }

    static void lambda_getZoneStrings_1(Set arg0, TimeZoneNamesBundle arg1, Set arg2, String arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "lambda$getZoneStrings$1", "(Ljava.util.Set;Lsun.util.resources.TimeZoneNamesBundle;Ljava.util.Set;Ljava.lang.String;)V", arg0, arg1, arg2, arg3)); }

    static bool lambda_getZoneStrings_0(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$getZoneStrings$0", "(Ljava.lang.String;)Z", arg0)); }

    String getLocaleName(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getLocaleName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String getCurrencyName(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getCurrencyName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.util.ResourceBundle
 * Package name: java.util
 */
class ResourceBundle : public Object {
protected:
    const inline static char *className = "java.util.ResourceBundle";
public:
    STATICINITIALIZE;

    ResourceBundle(jobject object) : JavaObject(object) {}

    static void trace(String arg0, Object_interface arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "trace", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    bool containsKey(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.String;)Z", arg0)); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    void setParent(ResourceBundle arg0) { (*javaClass->invokeMethod<void>(this->object, "setParent", "(Ljava.util.ResourceBundle;)V", arg0)); }

    Object getObject(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getObject", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    static void clearCache(ClassLoader arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "clearCache", "(Ljava.lang.ClassLoader;)V", arg0)); }

    static void clearCache() { (*javaClass->invokeStaticMethod<void>(this->object, "clearCache", "()V", )); }

    static void uncheckedThrow(Throwable arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "uncheckedThrow", "(Ljava.lang.Throwable;)V", arg0)); }

    static bool lambda_clearCache_1(ClassLoader arg0, ResourceBundle_CacheKey arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$clearCache$1", "(Ljava.lang.ClassLoader;Ljava.util.ResourceBundle$CacheKey;)Z", arg0, arg1)); }

    static bool lambda_clearCache_0(Class arg0, ResourceBundle_CacheKey arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$clearCache$0", "(Ljava.lang.Class;Ljava.util.ResourceBundle$CacheKey;)Z", arg0, arg1)); }

    Object handleGetObject(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "handleGetObject", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    static ResourceBundle_Control getDefaultControl(Class arg0, String arg1) { return ResourceBundle_Control(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultControl", "(Ljava.lang.Class;Ljava.lang.String;)Ljava.util.ResourceBundle$Control;", arg0, arg1)); }

    static ResourceBundle_Control getDefaultControl(Module arg0, String arg1) { return ResourceBundle_Control(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultControl", "(Ljava.lang.Module;Ljava.lang.String;)Ljava.util.ResourceBundle$Control;", arg0, arg1)); }

    static ResourceBundle getBundleImpl(String arg0, Locale arg1, Class arg2, ClassLoader arg3, ResourceBundle_Control arg4) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundleImpl", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Class;Ljava.lang.ClassLoader;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }

    static ResourceBundle getBundleImpl(String arg0, Locale arg1, Class arg2, ResourceBundle_Control arg3) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundleImpl", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Class;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3)); }

    static ResourceBundle getBundleImpl(Module arg0, Module arg1, String arg2, Locale arg3, ResourceBundle_Control arg4) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundleImpl", "(Ljava.lang.Module;Ljava.lang.Module;Ljava.lang.String;Ljava.util.Locale;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }

    static void checkNamedModule(Class arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "checkNamedModule", "(Ljava.lang.Class;)V", arg0)); }

    static ResourceBundle getBundleFromModule(Class arg0, Module arg1, String arg2, Locale arg3, ResourceBundle_Control arg4) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundleFromModule", "(Ljava.lang.Class;Ljava.lang.Module;Ljava.lang.String;Ljava.util.Locale;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }

    static bool isValidBundle(ResourceBundle arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isValidBundle", "(Ljava.util.ResourceBundle;)Z", arg0)); }

    static bool hasValidParentChain(ResourceBundle arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "hasValidParentChain", "(Ljava.util.ResourceBundle;)Z", arg0)); }

    static bool checkList(List arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkList", "(Ljava.util.List;)Z", arg0)); }

    static ResourceBundle findBundle(Module arg0, Module arg1, ResourceBundle_CacheKey arg2, List arg3, List arg4, int arg5, ResourceBundle_Control arg6, ResourceBundle arg7) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "findBundle", "(Ljava.lang.Module;Ljava.lang.Module;Ljava.util.ResourceBundle$CacheKey;Ljava.util.List;Ljava.util.List;ILjava.util.ResourceBundle$Control;Ljava.util.ResourceBundle;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static void throwMissingResourceException(String arg0, Locale arg1, Throwable arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "throwMissingResourceException", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Throwable;)V", arg0, arg1, arg2)); }

    static ResourceBundle findBundleInCache(ResourceBundle_CacheKey arg0, ResourceBundle_Control arg1) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "findBundleInCache", "(Ljava.util.ResourceBundle$CacheKey;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1)); }

    static ResourceBundle loadBundle(ResourceBundle_CacheKey arg0, List arg1, ResourceBundle_Control arg2, bool arg3) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "loadBundle", "(Ljava.util.ResourceBundle$CacheKey;Ljava.util.List;Ljava.util.ResourceBundle$Control;Z)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3)); }

    static ResourceBundle loadBundle(ResourceBundle_CacheKey arg0, List arg1, ResourceBundle_Control arg2, Module arg3, Module arg4) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "loadBundle", "(Ljava.util.ResourceBundle$CacheKey;Ljava.util.List;Ljava.util.ResourceBundle$Control;Ljava.lang.Module;Ljava.lang.Module;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }

    static ResourceBundle putBundleInCache(ResourceBundle_CacheKey arg0, ResourceBundle arg1, ResourceBundle_Control arg2) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "putBundleInCache", "(Ljava.util.ResourceBundle$CacheKey;Ljava.util.ResourceBundle;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1, arg2)); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    static ResourceBundle loadBundleFromProviders(String arg0, Locale arg1, ServiceLoader arg2, ResourceBundle_CacheKey arg3) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "loadBundleFromProviders", "(Ljava.lang.String;Ljava.util.Locale;Ljava.util.ServiceLoader;Ljava.util.ResourceBundle$CacheKey;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3)); }

    static Class getResourceBundleProviderType(String arg0, ClassLoader arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "getResourceBundleProviderType", "(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.Class;", arg0, arg1)); }

    static ClassLoader getLoaderForControl(Module arg0) { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getLoaderForControl", "(Ljava.lang.Module;)Ljava.lang.ClassLoader;", arg0)); }

    static void setExpirationTime(ResourceBundle_CacheKey arg0, ResourceBundle_Control arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setExpirationTime", "(Ljava.util.ResourceBundle$CacheKey;Ljava.util.ResourceBundle$Control;)V", arg0, arg1)); }

    Set handleKeySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "handleKeySet", "()Ljava.util.Set;", )); }

    String getBaseBundleName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getBaseBundleName", "()Ljava.lang.String;", )); }

    static ResourceBundle getBundle(String arg0, ResourceBundle_Control arg1) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1)); }

    static ResourceBundle getBundle(String arg0) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;)Ljava.util.ResourceBundle;", arg0)); }

    static ResourceBundle getBundle(String arg0, Locale arg1, ResourceBundle_Control arg2) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;Ljava.util.Locale;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1, arg2)); }

    static ResourceBundle getBundle(String arg0, Locale arg1, ClassLoader arg2) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.ClassLoader;)Ljava.util.ResourceBundle;", arg0, arg1, arg2)); }

    static ResourceBundle getBundle(String arg0, Locale arg1, ClassLoader arg2, ResourceBundle_Control arg3) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.ClassLoader;Ljava.util.ResourceBundle$Control;)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3)); }

    static ResourceBundle getBundle(String arg0, Module arg1) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;Ljava.lang.Module;)Ljava.util.ResourceBundle;", arg0, arg1)); }

    static ResourceBundle getBundle(String arg0, Locale arg1) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;Ljava.util.Locale;)Ljava.util.ResourceBundle;", arg0, arg1)); }

    static ResourceBundle getBundle(String arg0, Locale arg1, Module arg2) { return ResourceBundle(*javaClass->invokeStaticMethod<jobject>(this->object, "getBundle", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.Module;)Ljava.util.ResourceBundle;", arg0, arg1, arg2)); }

    static ServiceLoader getServiceLoader(Module arg0, String arg1) { return ServiceLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getServiceLoader", "(Ljava.lang.Module;Ljava.lang.String;)Ljava.util.ServiceLoader;", arg0, arg1)); }

    static ClassLoader getLoader(Module arg0) { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getLoader", "(Ljava.lang.Module;)Ljava.lang.ClassLoader;", arg0)); }

    String getString(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    Enumeration getKeys() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getKeys", "()Ljava.util.Enumeration;", )); }

};


/**
 * Classpath: java.lang.ClassLoader
 * Package name: java.lang
 */
class ClassLoader : public Object {
protected:
    const inline static char *className = "java.lang.ClassLoader";
public:
    STATICINITIALIZE;

    ClassLoader(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    Class loadClass(String arg0, bool arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "loadClass", "(Ljava.lang.String;Z)Ljava.lang.Class;", arg0, arg1)); }

    Class loadClass(String arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "loadClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Class loadClass(Module arg0, String arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "loadClass", "(Ljava.lang.Module;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1)); }

    static long findNative(ClassLoader arg0, String arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "findNative", "(Ljava.lang.ClassLoader;Ljava.lang.String;)J", arg0, arg1)); }

    static ClassLoader getPlatformClassLoader() { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getPlatformClassLoader", "()Ljava.lang.ClassLoader;", )); }

    static ClassLoader getSystemClassLoader() { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getSystemClassLoader", "()Ljava.lang.ClassLoader;", )); }

    void checkPackageAccess(Class arg0, ProtectionDomain arg1) { (*javaClass->invokeMethod<void>(this->object, "checkPackageAccess", "(Ljava.lang.Class;Ljava.security.ProtectionDomain;)V", arg0, arg1)); }

    static ClassLoader getClassLoader(Class arg0) { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getClassLoader", "(Ljava.lang.Class;)Ljava.lang.ClassLoader;", arg0)); }

    static void checkClassLoaderPermission(ClassLoader arg0, Class arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkClassLoaderPermission", "(Ljava.lang.ClassLoader;Ljava.lang.Class;)V", arg0, arg1)); }

    Package definePackage(String arg0, Module arg1) { return Package(*javaClass->invokeMethod<jobject>(this->object, "definePackage", "(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Package;", arg0, arg1)); }

    Package definePackage(String arg0, String arg1, String arg2, String arg3, String arg4, String arg5, String arg6, URL arg7) { return Package(*javaClass->invokeMethod<jobject>(this->object, "definePackage", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.net.URL;)Ljava.lang.Package;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    Package definePackage(Class arg0) { return Package(*javaClass->invokeMethod<jobject>(this->object, "definePackage", "(Ljava.lang.Class;)Ljava.lang.Package;", arg0)); }

    URL findResource(String arg0) { return URL(*javaClass->invokeMethod<jobject>(this->object, "findResource", "(Ljava.lang.String;)Ljava.net.URL;", arg0)); }

    URL findResource(String arg0, String arg1) { return URL(*javaClass->invokeMethod<jobject>(this->object, "findResource", "(Ljava.lang.String;Ljava.lang.String;)Ljava.net.URL;", arg0, arg1)); }

    static InputStream getSystemResourceAsStream(String arg0) { return InputStream(*javaClass->invokeStaticMethod<jobject>(this->object, "getSystemResourceAsStream", "(Ljava.lang.String;)Ljava.io.InputStream;", arg0)); }

    InputStream getResourceAsStream(String arg0) { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "getResourceAsStream", "(Ljava.lang.String;)Ljava.io.InputStream;", arg0)); }

    static URL getSystemResource(String arg0) { return URL(*javaClass->invokeStaticMethod<jobject>(this->object, "getSystemResource", "(Ljava.lang.String;)Ljava.net.URL;", arg0)); }

    URL getResource(String arg0) { return URL(*javaClass->invokeMethod<jobject>(this->object, "getResource", "(Ljava.lang.String;)Ljava.net.URL;", arg0)); }

    Stream packages() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "packages", "()Ljava.util.stream.Stream;", )); }

    bool desiredAssertionStatus(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "desiredAssertionStatus", "(Ljava.lang.String;)Z", arg0)); }

    static void registerNatives() { (*javaClass->invokeStaticMethod<void>(this->object, "registerNatives", "()V", )); }

    Package getPackage(String arg0) { return Package(*javaClass->invokeMethod<jobject>(this->object, "getPackage", "(Ljava.lang.String;)Ljava.lang.Package;", arg0)); }

    void setSigners(Class arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "setSigners", "(Ljava.lang.Class;[Ljava.lang.Object;)V", arg0, arg1)); }

    static Void checkCreateClassLoader() { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "checkCreateClassLoader", "()Ljava.lang.Void;", )); }

    static Void checkCreateClassLoader(String arg0) { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "checkCreateClassLoader", "(Ljava.lang.String;)Ljava.lang.Void;", arg0)); }

    static String nameAndId(ClassLoader arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "nameAndId", "(Ljava.lang.ClassLoader;)Ljava.lang.String;", arg0)); }

    Object getClassLoadingLock(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getClassLoadingLock", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Class findLoadedClass(String arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findLoadedClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    static Class findBootstrapClassOrNull(String arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "findBootstrapClassOrNull", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Class findClass(String arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Class findClass(String arg0, String arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findClass", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1)); }

    void resolveClass(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "resolveClass", "(Ljava.lang.Class;)V", arg0)); }

    Class defineClass(arr_B arg0, int arg1, int arg2) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "([BII)Ljava.lang.Class;", arg0, arg1, arg2)); }

    Class defineClass(String arg0, ByteBuffer arg1, ProtectionDomain arg2) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(Ljava.lang.String;Ljava.nio.ByteBuffer;Ljava.security.ProtectionDomain;)Ljava.lang.Class;", arg0, arg1, arg2)); }

    Class defineClass(String arg0, arr_B arg1, int arg2, int arg3, ProtectionDomain arg4) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(Ljava.lang.String;[BIILjava.security.ProtectionDomain;)Ljava.lang.Class;", arg0, arg1, arg2, arg3, arg4)); }

    Class defineClass(String arg0, arr_B arg1, int arg2, int arg3) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(Ljava.lang.String;[BII)Ljava.lang.Class;", arg0, arg1, arg2, arg3)); }

    static bool checkName(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkName", "(Ljava.lang.String;)Z", arg0)); }

    static ClassLoader getBuiltinPlatformClassLoader() { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getBuiltinPlatformClassLoader", "()Ljava.lang.ClassLoader;", )); }

    void checkCerts(String arg0, CodeSource arg1) { (*javaClass->invokeMethod<void>(this->object, "checkCerts", "(Ljava.lang.String;Ljava.security.CodeSource;)V", arg0, arg1)); }

    NamedPackage getNamedPackage(String arg0, Module arg1) { return NamedPackage(*javaClass->invokeMethod<jobject>(this->object, "getNamedPackage", "(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.NamedPackage;", arg0, arg1)); }

    ProtectionDomain preDefineClass(String arg0, ProtectionDomain arg1) { return ProtectionDomain(*javaClass->invokeMethod<jobject>(this->object, "preDefineClass", "(Ljava.lang.String;Ljava.security.ProtectionDomain;)Ljava.security.ProtectionDomain;", arg0, arg1)); }

    String defineClassSourceLocation(ProtectionDomain arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "defineClassSourceLocation", "(Ljava.security.ProtectionDomain;)Ljava.lang.String;", arg0)); }

    static Class defineClass1(ClassLoader arg0, String arg1, arr_B arg2, int arg3, int arg4, ProtectionDomain arg5, String arg6) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "defineClass1", "(Ljava.lang.ClassLoader;Ljava.lang.String;[BIILjava.security.ProtectionDomain;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void postDefineClass(Class arg0, ProtectionDomain arg1) { (*javaClass->invokeMethod<void>(this->object, "postDefineClass", "(Ljava.lang.Class;Ljava.security.ProtectionDomain;)V", arg0, arg1)); }

    static Class defineClass2(ClassLoader arg0, String arg1, ByteBuffer arg2, int arg3, int arg4, ProtectionDomain arg5, String arg6) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "defineClass2", "(Ljava.lang.ClassLoader;Ljava.lang.String;Ljava.nio.ByteBuffer;IILjava.security.ProtectionDomain;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    bool compareCerts(Certificate_interface arg0, Certificate_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "compareCerts", "([Ljava.security.cert.Certificate;[Ljava.security.cert.Certificate;)Z", arg0, arg1)); }

    static Class findBootstrapClass(String arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "findBootstrapClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Class findLoadedClass0(String arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findLoadedClass0", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Enumeration getResources(String arg0) { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getResources", "(Ljava.lang.String;)Ljava.util.Enumeration;", arg0)); }

    Enumeration findResources(String arg0) { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "findResources", "(Ljava.lang.String;)Ljava.util.Enumeration;", arg0)); }

    static ClassLoader getBuiltinAppClassLoader() { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "getBuiltinAppClassLoader", "()Ljava.lang.ClassLoader;", )); }

    bool isAncestor(ClassLoader arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAncestor", "(Ljava.lang.ClassLoader;)Z", arg0)); }

    static bool needsClassLoaderPermissionCheck(ClassLoader arg0, ClassLoader arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "needsClassLoaderPermissionCheck", "(Ljava.lang.ClassLoader;Ljava.lang.ClassLoader;)Z", arg0, arg1)); }

    Package toPackage(String arg0, NamedPackage arg1, Module arg2) { return Package(*javaClass->invokeMethod<jobject>(this->object, "toPackage", "(Ljava.lang.String;Ljava.lang.NamedPackage;Ljava.lang.Module;)Ljava.lang.Package;", arg0, arg1, arg2)); }

    Package getDefinedPackage(String arg0) { return Package(*javaClass->invokeMethod<jobject>(this->object, "getDefinedPackage", "(Ljava.lang.String;)Ljava.lang.Package;", arg0)); }

    static NativeLibrary loadLibrary(Class arg0, String arg1) { return NativeLibrary(*javaClass->invokeStaticMethod<jobject>(this->object, "loadLibrary", "(Ljava.lang.Class;Ljava.lang.String;)Ljdk.internal.loader.NativeLibrary;", arg0, arg1)); }

    static NativeLibrary loadLibrary(Class arg0, File arg1) { return NativeLibrary(*javaClass->invokeStaticMethod<jobject>(this->object, "loadLibrary", "(Ljava.lang.Class;Ljava.io.File;)Ljdk.internal.loader.NativeLibrary;", arg0, arg1)); }

    String findLibrary(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "findLibrary", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    void initializeJavaAssertionMaps() { (*javaClass->invokeMethod<void>(this->object, "initializeJavaAssertionMaps", "()V", )); }

    static AssertionStatusDirectives retrieveDirectives() { return AssertionStatusDirectives(*javaClass->invokeStaticMethod<jobject>(this->object, "retrieveDirectives", "()Ljava.lang.AssertionStatusDirectives;", )); }

    bool trySetObjectField(String arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "trySetObjectField", "(Ljava.lang.String;Ljava.lang.Object;)Z", arg0, arg1)); }

    void addClass(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "addClass", "(Ljava.lang.Class;)V", arg0)); }

    static Class defineClass0(ClassLoader arg0, Class arg1, String arg2, arr_B arg3, int arg4, int arg5, ProtectionDomain arg6, bool arg7, int arg8, Object arg9) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "defineClass0", "(Ljava.lang.ClassLoader;Ljava.lang.Class;Ljava.lang.String;[BIILjava.security.ProtectionDomain;ZILjava.lang.Object;)Ljava.lang.Class;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    Class findSystemClass(String arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findSystemClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Stream resources(String arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "resources", "(Ljava.lang.String;)Ljava.util.stream.Stream;", arg0)); }

    static bool registerAsParallelCapable() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "registerAsParallelCapable", "()Z", )); }

    bool isRegisteredAsParallelCapable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRegisteredAsParallelCapable", "()Z", )); }

    static Enumeration getSystemResources(String arg0) { return Enumeration(*javaClass->invokeStaticMethod<jobject>(this->object, "getSystemResources", "(Ljava.lang.String;)Ljava.util.Enumeration;", arg0)); }

    ClassLoader getParent() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.lang.ClassLoader;", )); }

    Module getUnnamedModule() { return Module(*javaClass->invokeMethod<jobject>(this->object, "getUnnamedModule", "()Ljava.lang.Module;", )); }

    static ClassLoader initSystemClassLoader() { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "initSystemClassLoader", "()Ljava.lang.ClassLoader;", )); }

    void setDefaultAssertionStatus(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultAssertionStatus", "(Z)V", arg0)); }

    void setPackageAssertionStatus(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setPackageAssertionStatus", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void setClassAssertionStatus(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setClassAssertionStatus", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void clearAssertionStatus() { (*javaClass->invokeMethod<void>(this->object, "clearAssertionStatus", "()V", )); }

    ConcurrentHashMap createOrGetClassLoaderValueMap() { return ConcurrentHashMap(*javaClass->invokeMethod<jobject>(this->object, "createOrGetClassLoaderValueMap", "()Ljava.util.concurrent.ConcurrentHashMap;", )); }

    void resetArchivedStates() { (*javaClass->invokeMethod<void>(this->object, "resetArchivedStates", "()V", )); }

    Package lambda_packages_4(NamedPackage arg0) { return Package(*javaClass->invokeMethod<jobject>(this->object, "lambda$packages$4", "(Ljava.lang.NamedPackage;)Ljava.lang.Package;", arg0)); }

    NamedPackage lambda_definePackage_1(Module arg0, String arg1, NamedPackage arg2) { return NamedPackage(*javaClass->invokeMethod<jobject>(this->object, "lambda$definePackage$1", "(Ljava.lang.Module;Ljava.lang.String;Ljava.lang.NamedPackage;)Ljava.lang.NamedPackage;", arg0, arg1, arg2)); }

    Spliterator lambda_resources_0(String arg0, int arg1) { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "lambda$resources$0", "(Ljava.lang.String;I)Ljava.util.Spliterator;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.Module
 * Package name: java.lang
 */
class Module : public Object {
protected:
    const inline static char *className = "java.lang.Module";
public:
    STATICINITIALIZE;

    Module(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Module addReads(Module arg0) { return Module(*javaClass->invokeMethod<jobject>(this->object, "addReads", "(Ljava.lang.Module;)Ljava.lang.Module;", arg0)); }

    Module addExports(String arg0, Module arg1) { return Module(*javaClass->invokeMethod<jobject>(this->object, "addExports", "(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Module;", arg0, arg1)); }

    Module addOpens(String arg0, Module arg1) { return Module(*javaClass->invokeMethod<jobject>(this->object, "addOpens", "(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Module;", arg0, arg1)); }

    Module addUses(Class arg0) { return Module(*javaClass->invokeMethod<jobject>(this->object, "addUses", "(Ljava.lang.Class;)Ljava.lang.Module;", arg0)); }

    ClassLoader getClassLoader() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava.lang.ClassLoader;", )); }

    ModuleDescriptor getDescriptor() { return ModuleDescriptor(*javaClass->invokeMethod<jobject>(this->object, "getDescriptor", "()Ljava.lang.module.ModuleDescriptor;", )); }

    bool isNamed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNamed", "()Z", )); }

    InputStream getResourceAsStream(String arg0) { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "getResourceAsStream", "(Ljava.lang.String;)Ljava.io.InputStream;", arg0)); }

    bool isOpen(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpen", "(Ljava.lang.String;)Z", arg0)); }

    bool isOpen(String arg0, Module arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpen", "(Ljava.lang.String;Ljava.lang.Module;)Z", arg0, arg1)); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    Set getPackages() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getPackages", "()Ljava.util.Set;", )); }

    static void defineModule0(Module arg0, bool arg1, String arg2, String arg3, Object_interface arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "defineModule0", "(Ljava.lang.Module;ZLjava.lang.String;Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1, arg2, arg3, arg4)); }

    Module implAddEnableNativeAccess() { return Module(*javaClass->invokeMethod<jobject>(this->object, "implAddEnableNativeAccess", "()Ljava.lang.Module;", )); }

    Module getCallerModule(Class arg0) { return Module(*javaClass->invokeMethod<jobject>(this->object, "getCallerModule", "(Ljava.lang.Class;)Ljava.lang.Module;", arg0)); }

    void implAddReads(Module arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "implAddReads", "(Ljava.lang.Module;Z)V", arg0, arg1)); }

    void implAddReads(Module arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddReads", "(Ljava.lang.Module;)V", arg0)); }

    bool canRead(Module arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRead", "(Ljava.lang.Module;)Z", arg0)); }

    static void addReads0(Module arg0, Module arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "addReads0", "(Ljava.lang.Module;Ljava.lang.Module;)V", arg0, arg1)); }

    bool implIsExportedOrOpen(String arg0, Module arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "implIsExportedOrOpen", "(Ljava.lang.String;Ljava.lang.Module;Z)Z", arg0, arg1, arg2)); }

    bool isStaticallyExportedOrOpen(String arg0, Module arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStaticallyExportedOrOpen", "(Ljava.lang.String;Ljava.lang.Module;Z)Z", arg0, arg1, arg2)); }

    bool isReflectivelyExportedOrOpen(String arg0, Module arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReflectivelyExportedOrOpen", "(Ljava.lang.String;Ljava.lang.Module;Z)Z", arg0, arg1, arg2)); }

    bool allows(Set arg0, Module arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "allows", "(Ljava.util.Set;Ljava.lang.Module;)Z", arg0, arg1)); }

    void implAddExportsOrOpens(String arg0, Module arg1, bool arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "implAddExportsOrOpens", "(Ljava.lang.String;Ljava.lang.Module;ZZ)V", arg0, arg1, arg2, arg3)); }

    static void addExportsToAll0(Module arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "addExportsToAll0", "(Ljava.lang.Module;Ljava.lang.String;)V", arg0, arg1)); }

    static void addExportsToAllUnnamed0(Module arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "addExportsToAllUnnamed0", "(Ljava.lang.Module;Ljava.lang.String;)V", arg0, arg1)); }

    static void addExports0(Module arg0, String arg1, Module arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "addExports0", "(Ljava.lang.Module;Ljava.lang.String;Ljava.lang.Module;)V", arg0, arg1, arg2)); }

    void implAddOpensToAllUnnamed(Set arg0, Set arg1) { (*javaClass->invokeMethod<void>(this->object, "implAddOpensToAllUnnamed", "(Ljava.util.Set;Ljava.util.Set;)V", arg0, arg1)); }

    void implAddOpensToAllUnnamed(Set arg0, Map arg1) { (*javaClass->invokeMethod<void>(this->object, "implAddOpensToAllUnnamed", "(Ljava.util.Set;Ljava.util.Map;)V", arg0, arg1)); }

    void implAddOpensToAllUnnamed(String arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddOpensToAllUnnamed", "(Ljava.lang.String;)V", arg0)); }

    void implAddUses(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddUses", "(Ljava.lang.Class;)V", arg0)); }

    bool canUse(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canUse", "(Ljava.lang.Class;)Z", arg0)); }

    static Module findModule(ModuleLayer arg0, ResolvedModule arg1) { return Module(*javaClass->invokeStaticMethod<jobject>(this->object, "findModule", "(Ljava.lang.ModuleLayer;Ljava.lang.module.ResolvedModule;)Ljava.lang.Module;", arg0, arg1)); }

    static Module findModule(String arg0, Map arg1, Map arg2, List arg3) { return Module(*javaClass->invokeStaticMethod<jobject>(this->object, "findModule", "(Ljava.lang.String;Ljava.util.Map;Ljava.util.Map;Ljava.util.List;)Ljava.lang.Module;", arg0, arg1, arg2, arg3)); }

    static void initExports(Module arg0, Map arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "initExports", "(Ljava.lang.Module;Ljava.util.Map;)V", arg0, arg1)); }

    static void initExportsAndOpens(Module arg0, Map arg1, Map arg2, List arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "initExportsAndOpens", "(Ljava.lang.Module;Ljava.util.Map;Ljava.util.Map;Ljava.util.List;)V", arg0, arg1, arg2, arg3)); }

    Class moduleInfoClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "moduleInfoClass", "()Ljava.lang.Class;", )); }

    Class loadModuleInfoClass(InputStream arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "loadModuleInfoClass", "(Ljava.io.InputStream;)Ljava.lang.Class;", arg0)); }

    Class loadModuleInfoClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "loadModuleInfoClass", "()Ljava.lang.Class;", )); }

    ModuleLayer getLayer() { return ModuleLayer(*javaClass->invokeMethod<jobject>(this->object, "getLayer", "()Ljava.lang.ModuleLayer;", )); }

    static void implAddEnableNativeAccessAllUnnamed() { (*javaClass->invokeStaticMethod<void>(this->object, "implAddEnableNativeAccessAllUnnamed", "()V", )); }

    bool implIsEnableNativeAccess() { return bool(*javaClass->invokeMethod<boolean>(this->object, "implIsEnableNativeAccess", "()Z", )); }

    void implAddReadsAllUnnamed() { (*javaClass->invokeMethod<void>(this->object, "implAddReadsAllUnnamed", "()V", )); }

    void implAddReadsNoSync(Module arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddReadsNoSync", "(Ljava.lang.Module;)V", arg0)); }

    bool isExported(String arg0, Module arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isExported", "(Ljava.lang.String;Ljava.lang.Module;)Z", arg0, arg1)); }

    bool isExported(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isExported", "(Ljava.lang.String;)Z", arg0)); }

    bool isReflectivelyExported(String arg0, Module arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReflectivelyExported", "(Ljava.lang.String;Ljava.lang.Module;)Z", arg0, arg1)); }

    bool isReflectivelyOpened(String arg0, Module arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReflectivelyOpened", "(Ljava.lang.String;Ljava.lang.Module;)Z", arg0, arg1)); }

    void implAddExports(String arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddExports", "(Ljava.lang.String;)V", arg0)); }

    void implAddExports(String arg0, Module arg1) { (*javaClass->invokeMethod<void>(this->object, "implAddExports", "(Ljava.lang.String;Ljava.lang.Module;)V", arg0, arg1)); }

    void implAddExportsToAllUnnamed(String arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddExportsToAllUnnamed", "(Ljava.lang.String;)V", arg0)); }

    void implAddExportsNoSync(String arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddExportsNoSync", "(Ljava.lang.String;)V", arg0)); }

    void implAddExportsNoSync(String arg0, Module arg1) { (*javaClass->invokeMethod<void>(this->object, "implAddExportsNoSync", "(Ljava.lang.String;Ljava.lang.Module;)V", arg0, arg1)); }

    void implAddOpens(String arg0) { (*javaClass->invokeMethod<void>(this->object, "implAddOpens", "(Ljava.lang.String;)V", arg0)); }

    void implAddOpens(String arg0, Module arg1) { (*javaClass->invokeMethod<void>(this->object, "implAddOpens", "(Ljava.lang.String;Ljava.lang.Module;)V", arg0, arg1)); }

    static Map defineModules(Configuration arg0, Function arg1, ModuleLayer arg2) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "defineModules", "(Ljava.lang.module.Configuration;Ljava.util.function.Function;Ljava.lang.ModuleLayer;)Ljava.util.Map;", arg0, arg1, arg2)); }

    static Module lambda_findModule_3(String arg0, ModuleLayer arg1) { return Module(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$findModule$3", "(Ljava.lang.String;Ljava.lang.ModuleLayer;)Ljava.lang.Module;", arg0, arg1)); }

    static bool lambda_findModule_2(Configuration arg0, ModuleLayer arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$findModule$2", "(Ljava.lang.module.Configuration;Ljava.lang.ModuleLayer;)Z", arg0, arg1)); }

    bool lambda_getPackages_1(Package arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$getPackages$1", "(Ljava.lang.Package;)Z", arg0)); }

    static Map lambda_implAddExportsOrOpens_0(Module arg0, Module arg1) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$implAddExportsOrOpens$0", "(Ljava.lang.Module;Ljava.lang.Module;)Ljava.util.Map;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.module.ModuleDescriptor
 * Package name: java.lang.module
 */
class ModuleDescriptor : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor";
public:
    STATICINITIALIZE;

    ModuleDescriptor(jobject object) : JavaObject(object) {}

    Set modifiers() { return Set(*javaClass->invokeMethod<jobject>(this->object, "modifiers", "()Ljava.util.Set;", )); }

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    static String toString(Set arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Optional version() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "version", "()Ljava.util.Optional;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ModuleDescriptor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.module.ModuleDescriptor;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static int compare(Set arg0, Set arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(Ljava.util.Set;Ljava.util.Set;)I", arg0, arg1)); }

    static int compare(Object arg0, Object arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1)); }

    static String packageName(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "packageName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    Set packages() { return Set(*javaClass->invokeMethod<jobject>(this->object, "packages", "()Ljava.util.Set;", )); }

    bool isOpen() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpen", "()Z", )); }

    static ModuleDescriptor read(InputStream arg0) { return ModuleDescriptor(*javaClass->invokeStaticMethod<jobject>(this->object, "read", "(Ljava.io.InputStream;)Ljava.lang.module.ModuleDescriptor;", arg0)); }

    static ModuleDescriptor read(InputStream arg0, Supplier arg1) { return ModuleDescriptor(*javaClass->invokeStaticMethod<jobject>(this->object, "read", "(Ljava.io.InputStream;Ljava.util.function.Supplier;)Ljava.lang.module.ModuleDescriptor;", arg0, arg1)); }

    static ModuleDescriptor read(ByteBuffer arg0) { return ModuleDescriptor(*javaClass->invokeStaticMethod<jobject>(this->object, "read", "(Ljava.nio.ByteBuffer;)Ljava.lang.module.ModuleDescriptor;", arg0)); }

    static ModuleDescriptor read(ByteBuffer arg0, Supplier arg1) { return ModuleDescriptor(*javaClass->invokeStaticMethod<jobject>(this->object, "read", "(Ljava.nio.ByteBuffer;Ljava.util.function.Supplier;)Ljava.lang.module.ModuleDescriptor;", arg0, arg1)); }

    Set exports() { return Set(*javaClass->invokeMethod<jobject>(this->object, "exports", "()Ljava.util.Set;", )); }

    Set opens() { return Set(*javaClass->invokeMethod<jobject>(this->object, "opens", "()Ljava.util.Set;", )); }

    bool isAutomatic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAutomatic", "()Z", )); }

    Set uses() { return Set(*javaClass->invokeMethod<jobject>(this->object, "uses", "()Ljava.util.Set;", )); }

    Set provides() { return Set(*javaClass->invokeMethod<jobject>(this->object, "provides", "()Ljava.util.Set;", )); }

    Set requires() { return Set(*javaClass->invokeMethod<jobject>(this->object, "requires", "()Ljava.util.Set;", )); }

    Optional mainClass() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "mainClass", "()Ljava.util.Optional;", )); }

    static long modsValue(Set arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "modsValue", "(Ljava.util.Set;)J", arg0)); }

    String toNameAndVersion() { return String(*javaClass->invokeMethod<jobject>(this->object, "toNameAndVersion", "()Ljava.lang.String;", )); }

    Optional rawVersion() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "rawVersion", "()Ljava.util.Optional;", )); }

    static ModuleDescriptor_Builder newModule(String arg0, Set arg1) { return ModuleDescriptor_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "newModule", "(Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1)); }

    static ModuleDescriptor_Builder newModule(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "newModule", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    static ModuleDescriptor_Builder newOpenModule(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "newOpenModule", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    static ModuleDescriptor_Builder newAutomaticModule(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "newAutomaticModule", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    static String lambda_toString_0(Object arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$toString$0", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.io.InputStream
 * Package name: java.io
 */
class InputStream : public Object {
protected:
    const inline static char *className = "java.io.InputStream";
public:
    STATICINITIALIZE;

    InputStream(jobject object) : JavaObject(object) {}

    int read(arr_B arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "read", "([BII)I", arg0, arg1, arg2)); }

    int read(arr_B arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "([B)I", arg0)); }

    int read() { return int(*javaClass->invokeMethod<int>(this->object, "read", "()I", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void mark(int arg0) { (*javaClass->invokeMethod<void>(this->object, "mark", "(I)V", arg0)); }

    int readNBytes(arr_B arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "readNBytes", "([BII)I", arg0, arg1, arg2)); }

    long transferTo(OutputStream arg0) { return long(*javaClass->invokeMethod<long>(this->object, "transferTo", "(Ljava.io.OutputStream;)J", arg0)); }

    long skip(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "skip", "(J)J", arg0)); }

    int available() { return int(*javaClass->invokeMethod<int>(this->object, "available", "()I", )); }

    bool markSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "markSupported", "()Z", )); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    static InputStream nullInputStream() { return InputStream(*javaClass->invokeStaticMethod<jobject>(this->object, "nullInputStream", "()Ljava.io.InputStream;", )); }

    void skipNBytes(long arg0) { (*javaClass->invokeMethod<void>(this->object, "skipNBytes", "(J)V", arg0)); }

};


/**
 * Classpath: java.io.OutputStream
 * Package name: java.io
 */
class OutputStream : public Object {
protected:
    const inline static char *className = "java.io.OutputStream";
public:
    STATICINITIALIZE;

    OutputStream(jobject object) : JavaObject(object) {}

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void write(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }

    void write(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    static OutputStream nullOutputStream() { return OutputStream(*javaClass->invokeStaticMethod<jobject>(this->object, "nullOutputStream", "()Ljava.io.OutputStream;", )); }

};


/**
 * Classpath: java.nio.Buffer
 * Package name: java.nio
 */
class Buffer : public Object {
protected:
    const inline static char *className = "java.nio.Buffer";
public:
    STATICINITIALIZE;

    Buffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    int checkIndex(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "checkIndex", "(II)I", arg0, arg1)); }

    int checkIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "checkIndex", "(I)I", arg0)); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    int position() { return int(*javaClass->invokeMethod<int>(this->object, "position", "()I", )); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    int limit() { return int(*javaClass->invokeMethod<int>(this->object, "limit", "()I", )); }

    int remaining() { return int(*javaClass->invokeMethod<int>(this->object, "remaining", "()I", )); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    static IllegalArgumentException createCapacityException(int arg0) { return IllegalArgumentException(*javaClass->invokeStaticMethod<jobject>(this->object, "createCapacityException", "(I)Ljava.lang.IllegalArgumentException;", arg0)); }

    IllegalArgumentException createPositionException(int arg0) { return IllegalArgumentException(*javaClass->invokeMethod<jobject>(this->object, "createPositionException", "(I)Ljava.lang.IllegalArgumentException;", arg0)); }

    IllegalArgumentException createLimitException(int arg0) { return IllegalArgumentException(*javaClass->invokeMethod<jobject>(this->object, "createLimitException", "(I)Ljava.lang.IllegalArgumentException;", arg0)); }

    ScopedMemoryAccess_Scope scope() { return ScopedMemoryAccess_Scope(*javaClass->invokeMethod<jobject>(this->object, "scope", "()Ljdk.internal.misc.ScopedMemoryAccess$Scope;", )); }

    static IllegalArgumentException createSameBufferException() { return IllegalArgumentException(*javaClass->invokeStaticMethod<jobject>(this->object, "createSameBufferException", "()Ljava.lang.IllegalArgumentException;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    bool hasRemaining() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasRemaining", "()Z", )); }

    bool isReadOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadOnly", "()Z", )); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    int nextGetIndex() { return int(*javaClass->invokeMethod<int>(this->object, "nextGetIndex", "()I", )); }

    int nextGetIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "nextGetIndex", "(I)I", arg0)); }

    int nextPutIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "nextPutIndex", "(I)I", arg0)); }

    int nextPutIndex() { return int(*javaClass->invokeMethod<int>(this->object, "nextPutIndex", "()I", )); }

    int markValue() { return int(*javaClass->invokeMethod<int>(this->object, "markValue", "()I", )); }

    void discardMark() { (*javaClass->invokeMethod<void>(this->object, "discardMark", "()V", )); }

    void checkScope() { (*javaClass->invokeMethod<void>(this->object, "checkScope", "()V", )); }

};


/**
 * Classpath: java.lang.Exception
 * Package name: java.lang
 */
class Exception : public Throwable {
protected:
    const inline static char *className = "java.lang.Exception";
public:
    STATICINITIALIZE;

    Exception(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.misc.ScopedMemoryAccess$Scope
 * Enclosing class: jdk.internal.misc.ScopedMemoryAccess
 * Package name: jdk.internal.misc
 */
class ScopedMemoryAccess_Scope : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.misc.ScopedMemoryAccess$Scope";
public:
    STATICINITIALIZE;

    ScopedMemoryAccess_Scope(jobject object) : JavaObject(object) {}

    bool isImplicit() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isImplicit", "()Z", )); }

    void release(ScopedMemoryAccess_Scope_Handle arg0) { (*javaClass->invokeMethod<void>(this->object, "release", "(Ljdk.internal.misc.ScopedMemoryAccess$Scope$Handle;)V", arg0)); }

    void checkValidState() { (*javaClass->invokeMethod<void>(this->object, "checkValidState", "()V", )); }

    Thread ownerThread() { return Thread(*javaClass->invokeMethod<jobject>(this->object, "ownerThread", "()Ljava.lang.Thread;", )); }

    ScopedMemoryAccess_Scope_Handle acquire() { return ScopedMemoryAccess_Scope_Handle(*javaClass->invokeMethod<jobject>(this->object, "acquire", "()Ljdk.internal.misc.ScopedMemoryAccess$Scope$Handle;", )); }

};


/**
 * Classpath: jdk.internal.misc.ScopedMemoryAccess$Scope$Handle
 * Enclosing class: jdk.internal.misc.ScopedMemoryAccess$Scope
 * Package name: jdk.internal.misc
 */
class ScopedMemoryAccess_Scope_Handle : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.misc.ScopedMemoryAccess$Scope$Handle";
public:
    STATICINITIALIZE;

    ScopedMemoryAccess_Scope_Handle(jobject object) : JavaObject(object) {}

    ScopedMemoryAccess_Scope scope() { return ScopedMemoryAccess_Scope(*javaClass->invokeMethod<jobject>(this->object, "scope", "()Ljdk.internal.misc.ScopedMemoryAccess$Scope;", )); }

};


/**
 * Classpath: java.lang.Thread
 * Package name: java.lang
 */
class Thread : public Object {
protected:
    const inline static char *className = "java.lang.Thread";
public:
    STATICINITIALIZE;

    Thread(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void run() { (*javaClass->invokeMethod<void>(this->object, "run", "()V", )); }

    void exit() { (*javaClass->invokeMethod<void>(this->object, "exit", "()V", )); }

    void dispatchUncaughtException(Throwable arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchUncaughtException", "(Ljava.lang.Throwable;)V", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    static Thread currentThread() { return Thread(*javaClass->invokeStaticMethod<jobject>(this->object, "currentThread", "()Ljava.lang.Thread;", )); }

    static void onSpinWait() { (*javaClass->invokeStaticMethod<void>(this->object, "onSpinWait", "()V", )); }

    void join() { (*javaClass->invokeMethod<void>(this->object, "join", "()V", )); }

    void join(long arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "join", "(JI)V", arg0, arg1)); }

    void join(long arg0) { (*javaClass->invokeMethod<void>(this->object, "join", "(J)V", arg0)); }

    void start() { (*javaClass->invokeMethod<void>(this->object, "start", "()V", )); }

    static void registerNatives() { (*javaClass->invokeStaticMethod<void>(this->object, "registerNatives", "()V", )); }

    ThreadGroup getThreadGroup() { return ThreadGroup(*javaClass->invokeMethod<jobject>(this->object, "getThreadGroup", "()Ljava.lang.ThreadGroup;", )); }

    void setContextClassLoader(ClassLoader arg0) { (*javaClass->invokeMethod<void>(this->object, "setContextClassLoader", "(Ljava.lang.ClassLoader;)V", arg0)); }

    static bool holdsLock(Object arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "holdsLock", "(Ljava.lang.Object;)Z", arg0)); }

    void checkAccess() { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "()V", )); }

    static void dumpStack() { (*javaClass->invokeStaticMethod<void>(this->object, "dumpStack", "()V", )); }

    void setPriority(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPriority", "(I)V", arg0)); }

    void setDaemon(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDaemon", "(Z)V", arg0)); }

    static void sleep(long arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "sleep", "(J)V", arg0)); }

    static void sleep(long arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "sleep", "(JI)V", arg0, arg1)); }

    static bool isCCLOverridden(Class arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isCCLOverridden", "(Ljava.lang.Class;)Z", arg0)); }

    bool isDaemon() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDaemon", "()Z", )); }

    int getPriority() { return int(*javaClass->invokeMethod<int>(this->object, "getPriority", "()I", )); }

    ClassLoader getContextClassLoader() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getContextClassLoader", "()Ljava.lang.ClassLoader;", )); }

    static long nextThreadID() { return long(*javaClass->invokeStaticMethod<long>(this->object, "nextThreadID", "()J", )); }

    static int nextThreadNum() { return int(*javaClass->invokeStaticMethod<int>(this->object, "nextThreadNum", "()I", )); }

    void start0() { (*javaClass->invokeMethod<void>(this->object, "start0", "()V", )); }

    void resume() { (*javaClass->invokeMethod<void>(this->object, "resume", "()V", )); }

    void stop0(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "stop0", "(Ljava.lang.Object;)V", arg0)); }

    static bool interrupted() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "interrupted", "()Z", )); }

    void interrupt0() { (*javaClass->invokeMethod<void>(this->object, "interrupt0", "()V", )); }

    void interrupt() { (*javaClass->invokeMethod<void>(this->object, "interrupt", "()V", )); }

    static void clearInterruptEvent() { (*javaClass->invokeStaticMethod<void>(this->object, "clearInterruptEvent", "()V", )); }

    void suspend0() { (*javaClass->invokeMethod<void>(this->object, "suspend0", "()V", )); }

    void resume0() { (*javaClass->invokeMethod<void>(this->object, "resume0", "()V", )); }

    void setPriority0(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPriority0", "(I)V", arg0)); }

    void setNativeName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setNativeName", "(Ljava.lang.String;)V", arg0)); }

    static int activeCount() { return int(*javaClass->invokeStaticMethod<int>(this->object, "activeCount", "()I", )); }

    static int enumerate(Thread_interface arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "enumerate", "([Ljava.lang.Thread;)I", arg0)); }

    bool isAlive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAlive", "()Z", )); }

    static void processQueue(ReferenceQueue arg0, ConcurrentMap arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "processQueue", "(Ljava.lang.ref.ReferenceQueue;Ljava.util.concurrent.ConcurrentMap;)V", arg0, arg1)); }

    static bool auditSubclass(Class arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "auditSubclass", "(Ljava.lang.Class;)Z", arg0)); }

    static void setDefaultUncaughtExceptionHandler(Thread_UncaughtExceptionHandler arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefaultUncaughtExceptionHandler", "(Ljava.lang.Thread$UncaughtExceptionHandler;)V", arg0)); }

    Thread_UncaughtExceptionHandler getUncaughtExceptionHandler() { return Thread_UncaughtExceptionHandler(*javaClass->invokeMethod<jobject>(this->object, "getUncaughtExceptionHandler", "()Ljava.lang.Thread$UncaughtExceptionHandler;", )); }

    static void blockedOn(Interruptible arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "blockedOn", "(Lsun.nio.ch.Interruptible;)V", arg0)); }

    static void yield() { (*javaClass->invokeStaticMethod<void>(this->object, "yield", "()V", )); }

    void stop() { (*javaClass->invokeMethod<void>(this->object, "stop", "()V", )); }

    bool isInterrupted() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInterrupted", "()Z", )); }

    void suspend() { (*javaClass->invokeMethod<void>(this->object, "suspend", "()V", )); }

    void setName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setName", "(Ljava.lang.String;)V", arg0)); }

    int countStackFrames() { return int(*javaClass->invokeMethod<int>(this->object, "countStackFrames", "()I", )); }

    static Map getAllStackTraces() { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "getAllStackTraces", "()Ljava.util.Map;", )); }

    long getId() { return long(*javaClass->invokeMethod<long>(this->object, "getId", "()J", )); }

    Thread_State getState() { return Thread_State(*javaClass->invokeMethod<jobject>(this->object, "getState", "()Ljava.lang.Thread$State;", )); }

    static Thread_UncaughtExceptionHandler getDefaultUncaughtExceptionHandler() { return Thread_UncaughtExceptionHandler(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultUncaughtExceptionHandler", "()Ljava.lang.Thread$UncaughtExceptionHandler;", )); }

    void setUncaughtExceptionHandler(Thread_UncaughtExceptionHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setUncaughtExceptionHandler", "(Ljava.lang.Thread$UncaughtExceptionHandler;)V", arg0)); }

};


/**
 * Classpath: java.lang.ThreadGroup
 * Package name: java.lang
 */
class ThreadGroup : public Object {
protected:
    const inline static char *className = "java.lang.ThreadGroup";
public:
    STATICINITIALIZE;

    ThreadGroup(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void add(ThreadGroup arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.ThreadGroup;)V", arg0)); }

    void add(Thread arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.Thread;)V", arg0)); }

    void remove(ThreadGroup arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.lang.ThreadGroup;)V", arg0)); }

    void remove(Thread arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.lang.Thread;)V", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void list() { (*javaClass->invokeMethod<void>(this->object, "list", "()V", )); }

    void list(PrintStream arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "list", "(Ljava.io.PrintStream;I)V", arg0, arg1)); }

    ThreadGroup getParent() { return ThreadGroup(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.lang.ThreadGroup;", )); }

    void checkAccess() { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "()V", )); }

    void setDaemon(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDaemon", "(Z)V", arg0)); }

    void addUnstarted() { (*javaClass->invokeMethod<void>(this->object, "addUnstarted", "()V", )); }

    bool isDaemon() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDaemon", "()Z", )); }

    void threadStartFailed(Thread arg0) { (*javaClass->invokeMethod<void>(this->object, "threadStartFailed", "(Ljava.lang.Thread;)V", arg0)); }

    void threadTerminated(Thread arg0) { (*javaClass->invokeMethod<void>(this->object, "threadTerminated", "(Ljava.lang.Thread;)V", arg0)); }

    void resume() { (*javaClass->invokeMethod<void>(this->object, "resume", "()V", )); }

    void interrupt() { (*javaClass->invokeMethod<void>(this->object, "interrupt", "()V", )); }

    int getMaxPriority() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxPriority", "()I", )); }

    int activeCount() { return int(*javaClass->invokeMethod<int>(this->object, "activeCount", "()I", )); }

    int enumerate(ThreadGroup_interface arg0, bool arg1) { return int(*javaClass->invokeMethod<int>(this->object, "enumerate", "([Ljava.lang.ThreadGroup;Z)I", arg0, arg1)); }

    int enumerate(Thread_interface arg0, int arg1, bool arg2) { return int(*javaClass->invokeMethod<int>(this->object, "enumerate", "([Ljava.lang.Thread;IZ)I", arg0, arg1, arg2)); }

    int enumerate(ThreadGroup_interface arg0) { return int(*javaClass->invokeMethod<int>(this->object, "enumerate", "([Ljava.lang.ThreadGroup;)I", arg0)); }

    int enumerate(Thread_interface arg0) { return int(*javaClass->invokeMethod<int>(this->object, "enumerate", "([Ljava.lang.Thread;)I", arg0)); }

    int enumerate(Thread_interface arg0, bool arg1) { return int(*javaClass->invokeMethod<int>(this->object, "enumerate", "([Ljava.lang.Thread;Z)I", arg0, arg1)); }

    int enumerate(ThreadGroup_interface arg0, int arg1, bool arg2) { return int(*javaClass->invokeMethod<int>(this->object, "enumerate", "([Ljava.lang.ThreadGroup;IZ)I", arg0, arg1, arg2)); }

    void uncaughtException(Thread arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "uncaughtException", "(Ljava.lang.Thread;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void stop() { (*javaClass->invokeMethod<void>(this->object, "stop", "()V", )); }

    void suspend() { (*javaClass->invokeMethod<void>(this->object, "suspend", "()V", )); }

    static Void checkParentAccess(ThreadGroup arg0) { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "checkParentAccess", "(Ljava.lang.ThreadGroup;)Ljava.lang.Void;", arg0)); }

    void setMaxPriority(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaxPriority", "(I)V", arg0)); }

    int activeGroupCount() { return int(*javaClass->invokeMethod<int>(this->object, "activeGroupCount", "()I", )); }

    bool stopOrSuspend(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "stopOrSuspend", "(Z)Z", arg0)); }

    void destroy() { (*javaClass->invokeMethod<void>(this->object, "destroy", "()V", )); }

    bool isDestroyed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDestroyed", "()Z", )); }

    bool parentOf(ThreadGroup arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "parentOf", "(Ljava.lang.ThreadGroup;)Z", arg0)); }

    bool allowThreadSuspension(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "allowThreadSuspension", "(Z)Z", arg0)); }

};


/**
 * Classpath: [Ljava.lang.ThreadGroup;
 */
class ThreadGroup_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.ThreadGroup;";
public:
    STATICINITIALIZE;

    ThreadGroup_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.lang.Thread;
 */
class Thread_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Thread;";
public:
    STATICINITIALIZE;

    Thread_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.Void
 * Package name: java.lang
 */
class Void : public Object {
protected:
    const inline static char *className = "java.lang.Void";
public:
    STATICINITIALIZE;

    Void(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.ref.ReferenceQueue
 * Package name: java.lang.ref
 */
class ReferenceQueue : public Object {
protected:
    const inline static char *className = "java.lang.ref.ReferenceQueue";
public:
    STATICINITIALIZE;

    ReferenceQueue(jobject object) : JavaObject(object) {}

    Reference remove(long arg0) { return Reference(*javaClass->invokeMethod<jobject>(this->object, "remove", "(J)Ljava.lang.ref.Reference;", arg0)); }

    Reference remove() { return Reference(*javaClass->invokeMethod<jobject>(this->object, "remove", "()Ljava.lang.ref.Reference;", )); }

    void forEach(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.Consumer;)V", arg0)); }

    bool enqueue(Reference arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "enqueue", "(Ljava.lang.ref.Reference;)Z", arg0)); }

    Reference poll() { return Reference(*javaClass->invokeMethod<jobject>(this->object, "poll", "()Ljava.lang.ref.Reference;", )); }

    Reference reallyPoll() { return Reference(*javaClass->invokeMethod<jobject>(this->object, "reallyPoll", "()Ljava.lang.ref.Reference;", )); }

};


/**
 * Classpath: java.lang.ref.Reference
 * Package name: java.lang.ref
 */
class Reference : public Object {
protected:
    const inline static char *className = "java.lang.ref.Reference";
public:
    STATICINITIALIZE;

    Reference(jobject object) : JavaObject(object) {}

    Object get() { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "()Ljava.lang.Object;", )); }

    bool refersTo0(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "refersTo0", "(Ljava.lang.Object;)Z", arg0)); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    static void reachabilityFence(Object arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "reachabilityFence", "(Ljava.lang.Object;)V", arg0)); }

    bool enqueue() { return bool(*javaClass->invokeMethod<boolean>(this->object, "enqueue", "()Z", )); }

    static void waitForReferencePendingList() { (*javaClass->invokeStaticMethod<void>(this->object, "waitForReferencePendingList", "()V", )); }

    static Reference getAndClearReferencePendingList() { return Reference(*javaClass->invokeStaticMethod<jobject>(this->object, "getAndClearReferencePendingList", "()Ljava.lang.ref.Reference;", )); }

    void enqueueFromPending() { (*javaClass->invokeMethod<void>(this->object, "enqueueFromPending", "()V", )); }

    static bool hasReferencePendingList() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "hasReferencePendingList", "()Z", )); }

    void clear0() { (*javaClass->invokeMethod<void>(this->object, "clear0", "()V", )); }

    static void processPendingReferences() { (*javaClass->invokeStaticMethod<void>(this->object, "processPendingReferences", "()V", )); }

    static bool waitForReferenceProcessing() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "waitForReferenceProcessing", "()Z", )); }

    bool refersTo(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "refersTo", "(Ljava.lang.Object;)Z", arg0)); }

    Object getFromInactiveFinalReference() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getFromInactiveFinalReference", "()Ljava.lang.Object;", )); }

    void clearInactiveFinalReference() { (*javaClass->invokeMethod<void>(this->object, "clearInactiveFinalReference", "()V", )); }

    bool isEnqueued() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnqueued", "()Z", )); }

};


/**
 * Classpath: java.util.concurrent.ConcurrentMap
 * Package name: java.util.concurrent
 */
class ConcurrentMap : public JavaObject {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentMap";
public:
    STATICINITIALIZE;

    ConcurrentMap(jobject object) : JavaObject(object) {}

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool replace(Object arg0, Object arg1, Object arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1, arg2)); }

    Object replace(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void replaceAll(BiFunction arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.BiFunction;)V", arg0)); }

    Object merge(Object arg0, Object arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Object putIfAbsent(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "putIfAbsent", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object compute(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compute", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    void forEach(BiConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.BiConsumer;)V", arg0)); }

    Object computeIfAbsent(Object arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfAbsent", "(Ljava.lang.Object;Ljava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    Object getOrDefault(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOrDefault", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object computeIfPresent(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfPresent", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    void lambda_replaceAll_0(BiFunction arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "lambda$replaceAll$0", "(Ljava.util.function.BiFunction;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.lang.Thread$UncaughtExceptionHandler
 * Enclosing class: java.lang.Thread
 * Package name: java.lang
 */
class Thread_UncaughtExceptionHandler : public JavaObject {
protected:
    const inline static char *className = "java.lang.Thread$UncaughtExceptionHandler";
public:
    STATICINITIALIZE;

    Thread_UncaughtExceptionHandler(jobject object) : JavaObject(object) {}

    void uncaughtException(Thread arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "uncaughtException", "(Ljava.lang.Thread;Ljava.lang.Throwable;)V", arg0, arg1)); }

};


/**
 * Classpath: sun.nio.ch.Interruptible
 * Package name: sun.nio.ch
 */
class Interruptible : public JavaObject {
protected:
    const inline static char *className = "sun.nio.ch.Interruptible";
public:
    STATICINITIALIZE;

    Interruptible(jobject object) : JavaObject(object) {}

    void interrupt(Thread arg0) { (*javaClass->invokeMethod<void>(this->object, "interrupt", "(Ljava.lang.Thread;)V", arg0)); }

};


/**
 * Classpath: java.lang.Thread$State
 * Enclosing class: java.lang.Thread
 * Package name: java.lang
 */
class Thread_State : public Enum {
protected:
    const inline static char *className = "java.lang.Thread$State";
public:
    STATICINITIALIZE;

    Thread_State(jobject object) : JavaObject(object) {}

    static Thread_State valueOf(String arg0) { return Thread_State(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.Thread$State;", arg0)); }

};


/**
 * Classpath: java.nio.ByteOrder
 * Package name: java.nio
 */
class ByteOrder : public Object {
protected:
    const inline static char *className = "java.nio.ByteOrder";
public:
    STATICINITIALIZE;

    ByteOrder(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static ByteOrder nativeOrder() { return ByteOrder(*javaClass->invokeStaticMethod<jobject>(this->object, "nativeOrder", "()Ljava.nio.ByteOrder;", )); }

};


/**
 * Classpath: java.nio.CharBuffer
 * Package name: java.nio
 */
class CharBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.CharBuffer";
public:
    STATICINITIALIZE;

    CharBuffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    char get() { return char(*javaClass->invokeMethod<char>(this->object, "get", "()C", )); }

    char get(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "get", "(I)C", arg0)); }

    CharBuffer get(arr_C arg0, int arg1, int arg2) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([CII)Ljava.nio.CharBuffer;", arg0, arg1, arg2)); }

    CharBuffer get(arr_C arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([C)Ljava.nio.CharBuffer;", arg0)); }

    CharBuffer get(int arg0, arr_C arg1) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[C)Ljava.nio.CharBuffer;", arg0, arg1)); }

    CharBuffer get(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[CII)Ljava.nio.CharBuffer;", arg0, arg1, arg2, arg3)); }

    CharBuffer put(CharBuffer arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.nio.CharBuffer;)Ljava.nio.CharBuffer;", arg0)); }

    CharBuffer put(String arg0, int arg1, int arg2) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.String;II)Ljava.nio.CharBuffer;", arg0, arg1, arg2)); }

    CharBuffer put(int arg0, arr_C arg1) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[C)Ljava.nio.CharBuffer;", arg0, arg1)); }

    CharBuffer put(int arg0, char arg1) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(IC)Ljava.nio.CharBuffer;", arg0, arg1)); }

    CharBuffer put(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[CII)Ljava.nio.CharBuffer;", arg0, arg1, arg2, arg3)); }

    CharBuffer put(arr_C arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([C)Ljava.nio.CharBuffer;", arg0)); }

    CharBuffer put(arr_C arg0, int arg1, int arg2) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([CII)Ljava.nio.CharBuffer;", arg0, arg1, arg2)); }

    CharBuffer put(int arg0, CharBuffer arg1, int arg2, int arg3) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ILjava.nio.CharBuffer;II)Ljava.nio.CharBuffer;", arg0, arg1, arg2, arg3)); }

    CharBuffer put(char arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(C)Ljava.nio.CharBuffer;", arg0)); }

    CharBuffer put(String arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.String;)Ljava.nio.CharBuffer;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String toString(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(II)Ljava.lang.String;", arg0, arg1)); }

    CharBuffer append(CharSequence arg0, int arg1, int arg2) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.nio.CharBuffer;", arg0, arg1, arg2)); }

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    CharBuffer append(char arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.nio.CharBuffer;", arg0)); }

    CharBuffer append(CharSequence arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.nio.CharBuffer;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(CharBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.CharBuffer;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static int compare(char arg0, char arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(CC)I", arg0, arg1)); }

    CharBuffer clear() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.CharBuffer;", )); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    static CharBuffer wrap(arr_C arg0, int arg1, int arg2) { return CharBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([CII)Ljava.nio.CharBuffer;", arg0, arg1, arg2)); }

    static CharBuffer wrap(arr_C arg0) { return CharBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([C)Ljava.nio.CharBuffer;", arg0)); }

    static CharBuffer wrap(CharSequence arg0) { return CharBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "(Ljava.lang.CharSequence;)Ljava.nio.CharBuffer;", arg0)); }

    static CharBuffer wrap(CharSequence arg0, int arg1, int arg2) { return CharBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "(Ljava.lang.CharSequence;II)Ljava.nio.CharBuffer;", arg0, arg1, arg2)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    CharBuffer position(int arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.CharBuffer;", arg0)); }

    char charAt(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "charAt", "(I)C", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    CharSequence subSequence(int arg0, int arg1) { return CharSequence(*javaClass->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava.lang.CharSequence;", arg0, arg1)); }

    CharBuffer subSequence(int arg0, int arg1) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava.nio.CharBuffer;", arg0, arg1)); }

    CharBuffer limit(int arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.CharBuffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    IntStream chars() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "chars", "()Ljava.util.stream.IntStream;", )); }

    Spliterator_OfInt lambda_chars_0() { return Spliterator_OfInt(*javaClass->invokeMethod<jobject>(this->object, "lambda$chars$0", "()Ljava.util.Spliterator$OfInt;", )); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    int read(CharBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "(Ljava.nio.CharBuffer;)I", arg0)); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    CharBuffer mark() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.CharBuffer;", )); }

    CharBuffer reset() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.CharBuffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    CharBuffer flip() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.CharBuffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    CharBuffer rewind() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.CharBuffer;", )); }

    CharBuffer slice() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.CharBuffer;", )); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    CharBuffer slice(int arg0, int arg1) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.CharBuffer;", arg0, arg1)); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    CharBuffer duplicate() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.CharBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    bool isAddressable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAddressable", "()Z", )); }

    char getUnchecked(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getUnchecked", "(I)C", arg0)); }

    ByteOrder charRegionOrder() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "charRegionOrder", "()Ljava.nio.ByteOrder;", )); }

    int mismatch(CharBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "mismatch", "(Ljava.nio.CharBuffer;)I", arg0)); }

    static CharBuffer allocate(int arg0) { return CharBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocate", "(I)Ljava.nio.CharBuffer;", arg0)); }

    CharBuffer getArray(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "getArray", "(I[CII)Ljava.nio.CharBuffer;", arg0, arg1, arg2, arg3)); }

    void putBuffer(int arg0, CharBuffer arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBuffer", "(ILjava.nio.CharBuffer;II)V", arg0, arg1, arg2, arg3)); }

    CharBuffer putArray(int arg0, arr_C arg1, int arg2, int arg3) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "putArray", "(I[CII)Ljava.nio.CharBuffer;", arg0, arg1, arg2, arg3)); }

    CharBuffer asReadOnlyBuffer() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava.nio.CharBuffer;", )); }

    CharBuffer compact() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.CharBuffer;", )); }

};


/**
 * Classpath: java.nio.ShortBuffer
 * Package name: java.nio
 */
class ShortBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.ShortBuffer";
public:
    STATICINITIALIZE;

    ShortBuffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    short get() { return short(*javaClass->invokeMethod<short>(this->object, "get", "()S", )); }

    ShortBuffer get(int arg0, arr_S arg1) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[S)Ljava.nio.ShortBuffer;", arg0, arg1)); }

    short get(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "get", "(I)S", arg0)); }

    ShortBuffer get(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[SII)Ljava.nio.ShortBuffer;", arg0, arg1, arg2, arg3)); }

    ShortBuffer get(arr_S arg0, int arg1, int arg2) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([SII)Ljava.nio.ShortBuffer;", arg0, arg1, arg2)); }

    ShortBuffer get(arr_S arg0) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([S)Ljava.nio.ShortBuffer;", arg0)); }

    ShortBuffer put(arr_S arg0) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([S)Ljava.nio.ShortBuffer;", arg0)); }

    ShortBuffer put(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[SII)Ljava.nio.ShortBuffer;", arg0, arg1, arg2, arg3)); }

    ShortBuffer put(int arg0, arr_S arg1) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[S)Ljava.nio.ShortBuffer;", arg0, arg1)); }

    ShortBuffer put(arr_S arg0, int arg1, int arg2) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([SII)Ljava.nio.ShortBuffer;", arg0, arg1, arg2)); }

    ShortBuffer put(int arg0, ShortBuffer arg1, int arg2, int arg3) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ILjava.nio.ShortBuffer;II)Ljava.nio.ShortBuffer;", arg0, arg1, arg2, arg3)); }

    ShortBuffer put(ShortBuffer arg0) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.nio.ShortBuffer;)Ljava.nio.ShortBuffer;", arg0)); }

    ShortBuffer put(int arg0, short arg1) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(IS)Ljava.nio.ShortBuffer;", arg0, arg1)); }

    ShortBuffer put(short arg0) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(S)Ljava.nio.ShortBuffer;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ShortBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.ShortBuffer;)I", arg0)); }

    static int compare(short arg0, short arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(SS)I", arg0, arg1)); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    ShortBuffer clear() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.ShortBuffer;", )); }

    static ShortBuffer wrap(arr_S arg0) { return ShortBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([S)Ljava.nio.ShortBuffer;", arg0)); }

    static ShortBuffer wrap(arr_S arg0, int arg1, int arg2) { return ShortBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([SII)Ljava.nio.ShortBuffer;", arg0, arg1, arg2)); }

    ShortBuffer position(int arg0) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.ShortBuffer;", arg0)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    ShortBuffer limit(int arg0) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.ShortBuffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    ShortBuffer mark() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.ShortBuffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    ShortBuffer reset() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.ShortBuffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    ShortBuffer flip() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.ShortBuffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    ShortBuffer rewind() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.ShortBuffer;", )); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    ShortBuffer slice(int arg0, int arg1) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.ShortBuffer;", arg0, arg1)); }

    ShortBuffer slice() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.ShortBuffer;", )); }

    ShortBuffer duplicate() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.ShortBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int mismatch(ShortBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "mismatch", "(Ljava.nio.ShortBuffer;)I", arg0)); }

    static ShortBuffer allocate(int arg0) { return ShortBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocate", "(I)Ljava.nio.ShortBuffer;", arg0)); }

    ShortBuffer getArray(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "getArray", "(I[SII)Ljava.nio.ShortBuffer;", arg0, arg1, arg2, arg3)); }

    void putBuffer(int arg0, ShortBuffer arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBuffer", "(ILjava.nio.ShortBuffer;II)V", arg0, arg1, arg2, arg3)); }

    ShortBuffer putArray(int arg0, arr_S arg1, int arg2, int arg3) { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "putArray", "(I[SII)Ljava.nio.ShortBuffer;", arg0, arg1, arg2, arg3)); }

    ShortBuffer asReadOnlyBuffer() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava.nio.ShortBuffer;", )); }

    ShortBuffer compact() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.ShortBuffer;", )); }

};


/**
 * Classpath: [S
 */
class arr_S : public Object {
protected:
    const inline static char *className = "[S";
public:
    STATICINITIALIZE;

    arr_S(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.IntBuffer
 * Package name: java.nio
 */
class IntBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.IntBuffer";
public:
    STATICINITIALIZE;

    IntBuffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    int get() { return int(*javaClass->invokeMethod<int>(this->object, "get", "()I", )); }

    IntBuffer get(int arg0, arr_I arg1) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[I)Ljava.nio.IntBuffer;", arg0, arg1)); }

    int get(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(I)I", arg0)); }

    IntBuffer get(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[III)Ljava.nio.IntBuffer;", arg0, arg1, arg2, arg3)); }

    IntBuffer get(arr_I arg0, int arg1, int arg2) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([III)Ljava.nio.IntBuffer;", arg0, arg1, arg2)); }

    IntBuffer get(arr_I arg0) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([I)Ljava.nio.IntBuffer;", arg0)); }

    IntBuffer put(arr_I arg0) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([I)Ljava.nio.IntBuffer;", arg0)); }

    IntBuffer put(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[III)Ljava.nio.IntBuffer;", arg0, arg1, arg2, arg3)); }

    IntBuffer put(int arg0, arr_I arg1) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[I)Ljava.nio.IntBuffer;", arg0, arg1)); }

    IntBuffer put(arr_I arg0, int arg1, int arg2) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([III)Ljava.nio.IntBuffer;", arg0, arg1, arg2)); }

    IntBuffer put(int arg0, IntBuffer arg1, int arg2, int arg3) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ILjava.nio.IntBuffer;II)Ljava.nio.IntBuffer;", arg0, arg1, arg2, arg3)); }

    IntBuffer put(IntBuffer arg0) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.nio.IntBuffer;)Ljava.nio.IntBuffer;", arg0)); }

    IntBuffer put(int arg0, int arg1) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(II)Ljava.nio.IntBuffer;", arg0, arg1)); }

    IntBuffer put(int arg0) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I)Ljava.nio.IntBuffer;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(IntBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.IntBuffer;)I", arg0)); }

    static int compare(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(II)I", arg0, arg1)); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    IntBuffer clear() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.IntBuffer;", )); }

    static IntBuffer wrap(arr_I arg0) { return IntBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([I)Ljava.nio.IntBuffer;", arg0)); }

    static IntBuffer wrap(arr_I arg0, int arg1, int arg2) { return IntBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([III)Ljava.nio.IntBuffer;", arg0, arg1, arg2)); }

    IntBuffer position(int arg0) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.IntBuffer;", arg0)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    IntBuffer limit(int arg0) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.IntBuffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    IntBuffer mark() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.IntBuffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    IntBuffer reset() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.IntBuffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    IntBuffer flip() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.IntBuffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    IntBuffer rewind() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.IntBuffer;", )); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    IntBuffer slice(int arg0, int arg1) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.IntBuffer;", arg0, arg1)); }

    IntBuffer slice() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.IntBuffer;", )); }

    IntBuffer duplicate() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.IntBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int mismatch(IntBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "mismatch", "(Ljava.nio.IntBuffer;)I", arg0)); }

    static IntBuffer allocate(int arg0) { return IntBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocate", "(I)Ljava.nio.IntBuffer;", arg0)); }

    IntBuffer getArray(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "getArray", "(I[III)Ljava.nio.IntBuffer;", arg0, arg1, arg2, arg3)); }

    void putBuffer(int arg0, IntBuffer arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBuffer", "(ILjava.nio.IntBuffer;II)V", arg0, arg1, arg2, arg3)); }

    IntBuffer putArray(int arg0, arr_I arg1, int arg2, int arg3) { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "putArray", "(I[III)Ljava.nio.IntBuffer;", arg0, arg1, arg2, arg3)); }

    IntBuffer asReadOnlyBuffer() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava.nio.IntBuffer;", )); }

    IntBuffer compact() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.IntBuffer;", )); }

};


/**
 * Classpath: [I
 */
class arr_I : public Object {
protected:
    const inline static char *className = "[I";
public:
    STATICINITIALIZE;

    arr_I(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.LongBuffer
 * Package name: java.nio
 */
class LongBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.LongBuffer";
public:
    STATICINITIALIZE;

    LongBuffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    long get() { return long(*javaClass->invokeMethod<long>(this->object, "get", "()J", )); }

    LongBuffer get(int arg0, arr_J arg1) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[J)Ljava.nio.LongBuffer;", arg0, arg1)); }

    long get(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "get", "(I)J", arg0)); }

    LongBuffer get(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[JII)Ljava.nio.LongBuffer;", arg0, arg1, arg2, arg3)); }

    LongBuffer get(arr_J arg0, int arg1, int arg2) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([JII)Ljava.nio.LongBuffer;", arg0, arg1, arg2)); }

    LongBuffer get(arr_J arg0) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([J)Ljava.nio.LongBuffer;", arg0)); }

    LongBuffer put(arr_J arg0) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([J)Ljava.nio.LongBuffer;", arg0)); }

    LongBuffer put(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[JII)Ljava.nio.LongBuffer;", arg0, arg1, arg2, arg3)); }

    LongBuffer put(int arg0, arr_J arg1) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[J)Ljava.nio.LongBuffer;", arg0, arg1)); }

    LongBuffer put(arr_J arg0, int arg1, int arg2) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([JII)Ljava.nio.LongBuffer;", arg0, arg1, arg2)); }

    LongBuffer put(int arg0, LongBuffer arg1, int arg2, int arg3) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ILjava.nio.LongBuffer;II)Ljava.nio.LongBuffer;", arg0, arg1, arg2, arg3)); }

    LongBuffer put(LongBuffer arg0) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.nio.LongBuffer;)Ljava.nio.LongBuffer;", arg0)); }

    LongBuffer put(int arg0, long arg1) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(IJ)Ljava.nio.LongBuffer;", arg0, arg1)); }

    LongBuffer put(long arg0) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(J)Ljava.nio.LongBuffer;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(LongBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.LongBuffer;)I", arg0)); }

    static int compare(long arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(JJ)I", arg0, arg1)); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    LongBuffer clear() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.LongBuffer;", )); }

    static LongBuffer wrap(arr_J arg0) { return LongBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([J)Ljava.nio.LongBuffer;", arg0)); }

    static LongBuffer wrap(arr_J arg0, int arg1, int arg2) { return LongBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([JII)Ljava.nio.LongBuffer;", arg0, arg1, arg2)); }

    LongBuffer position(int arg0) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.LongBuffer;", arg0)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    LongBuffer limit(int arg0) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.LongBuffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    LongBuffer mark() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.LongBuffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    LongBuffer reset() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.LongBuffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    LongBuffer flip() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.LongBuffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    LongBuffer rewind() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.LongBuffer;", )); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    LongBuffer slice(int arg0, int arg1) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.LongBuffer;", arg0, arg1)); }

    LongBuffer slice() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.LongBuffer;", )); }

    LongBuffer duplicate() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.LongBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int mismatch(LongBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "mismatch", "(Ljava.nio.LongBuffer;)I", arg0)); }

    static LongBuffer allocate(int arg0) { return LongBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocate", "(I)Ljava.nio.LongBuffer;", arg0)); }

    LongBuffer getArray(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "getArray", "(I[JII)Ljava.nio.LongBuffer;", arg0, arg1, arg2, arg3)); }

    void putBuffer(int arg0, LongBuffer arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBuffer", "(ILjava.nio.LongBuffer;II)V", arg0, arg1, arg2, arg3)); }

    LongBuffer putArray(int arg0, arr_J arg1, int arg2, int arg3) { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "putArray", "(I[JII)Ljava.nio.LongBuffer;", arg0, arg1, arg2, arg3)); }

    LongBuffer asReadOnlyBuffer() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava.nio.LongBuffer;", )); }

    LongBuffer compact() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.LongBuffer;", )); }

};


/**
 * Classpath: [J
 */
class arr_J : public Object {
protected:
    const inline static char *className = "[J";
public:
    STATICINITIALIZE;

    arr_J(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.FloatBuffer
 * Package name: java.nio
 */
class FloatBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.FloatBuffer";
public:
    STATICINITIALIZE;

    FloatBuffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    float get() { return float(*javaClass->invokeMethod<float>(this->object, "get", "()F", )); }

    FloatBuffer get(int arg0, arr_F arg1) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[F)Ljava.nio.FloatBuffer;", arg0, arg1)); }

    float get(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "get", "(I)F", arg0)); }

    FloatBuffer get(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[FII)Ljava.nio.FloatBuffer;", arg0, arg1, arg2, arg3)); }

    FloatBuffer get(arr_F arg0, int arg1, int arg2) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([FII)Ljava.nio.FloatBuffer;", arg0, arg1, arg2)); }

    FloatBuffer get(arr_F arg0) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([F)Ljava.nio.FloatBuffer;", arg0)); }

    FloatBuffer put(arr_F arg0) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([F)Ljava.nio.FloatBuffer;", arg0)); }

    FloatBuffer put(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[FII)Ljava.nio.FloatBuffer;", arg0, arg1, arg2, arg3)); }

    FloatBuffer put(int arg0, arr_F arg1) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[F)Ljava.nio.FloatBuffer;", arg0, arg1)); }

    FloatBuffer put(arr_F arg0, int arg1, int arg2) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([FII)Ljava.nio.FloatBuffer;", arg0, arg1, arg2)); }

    FloatBuffer put(int arg0, FloatBuffer arg1, int arg2, int arg3) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ILjava.nio.FloatBuffer;II)Ljava.nio.FloatBuffer;", arg0, arg1, arg2, arg3)); }

    FloatBuffer put(FloatBuffer arg0) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.nio.FloatBuffer;)Ljava.nio.FloatBuffer;", arg0)); }

    FloatBuffer put(int arg0, float arg1) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(IF)Ljava.nio.FloatBuffer;", arg0, arg1)); }

    FloatBuffer put(float arg0) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(F)Ljava.nio.FloatBuffer;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(FloatBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.FloatBuffer;)I", arg0)); }

    static int compare(float arg0, float arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(FF)I", arg0, arg1)); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    FloatBuffer clear() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.FloatBuffer;", )); }

    static FloatBuffer wrap(arr_F arg0) { return FloatBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([F)Ljava.nio.FloatBuffer;", arg0)); }

    static FloatBuffer wrap(arr_F arg0, int arg1, int arg2) { return FloatBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([FII)Ljava.nio.FloatBuffer;", arg0, arg1, arg2)); }

    FloatBuffer position(int arg0) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.FloatBuffer;", arg0)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    FloatBuffer limit(int arg0) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.FloatBuffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    FloatBuffer mark() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.FloatBuffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    FloatBuffer reset() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.FloatBuffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    FloatBuffer flip() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.FloatBuffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    FloatBuffer rewind() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.FloatBuffer;", )); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    FloatBuffer slice(int arg0, int arg1) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.FloatBuffer;", arg0, arg1)); }

    FloatBuffer slice() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.FloatBuffer;", )); }

    FloatBuffer duplicate() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.FloatBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int mismatch(FloatBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "mismatch", "(Ljava.nio.FloatBuffer;)I", arg0)); }

    static FloatBuffer allocate(int arg0) { return FloatBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocate", "(I)Ljava.nio.FloatBuffer;", arg0)); }

    FloatBuffer getArray(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "getArray", "(I[FII)Ljava.nio.FloatBuffer;", arg0, arg1, arg2, arg3)); }

    void putBuffer(int arg0, FloatBuffer arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBuffer", "(ILjava.nio.FloatBuffer;II)V", arg0, arg1, arg2, arg3)); }

    FloatBuffer putArray(int arg0, arr_F arg1, int arg2, int arg3) { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "putArray", "(I[FII)Ljava.nio.FloatBuffer;", arg0, arg1, arg2, arg3)); }

    FloatBuffer asReadOnlyBuffer() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava.nio.FloatBuffer;", )); }

    FloatBuffer compact() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.FloatBuffer;", )); }

};


/**
 * Classpath: [F
 */
class arr_F : public Object {
protected:
    const inline static char *className = "[F";
public:
    STATICINITIALIZE;

    arr_F(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.DoubleBuffer
 * Package name: java.nio
 */
class DoubleBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.DoubleBuffer";
public:
    STATICINITIALIZE;

    DoubleBuffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    double get() { return double(*javaClass->invokeMethod<double>(this->object, "get", "()D", )); }

    DoubleBuffer get(int arg0, arr_D arg1) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[D)Ljava.nio.DoubleBuffer;", arg0, arg1)); }

    double get(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "get", "(I)D", arg0)); }

    DoubleBuffer get(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[DII)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2, arg3)); }

    DoubleBuffer get(arr_D arg0, int arg1, int arg2) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([DII)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2)); }

    DoubleBuffer get(arr_D arg0) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([D)Ljava.nio.DoubleBuffer;", arg0)); }

    DoubleBuffer put(arr_D arg0) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([D)Ljava.nio.DoubleBuffer;", arg0)); }

    DoubleBuffer put(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[DII)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2, arg3)); }

    DoubleBuffer put(int arg0, arr_D arg1) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[D)Ljava.nio.DoubleBuffer;", arg0, arg1)); }

    DoubleBuffer put(arr_D arg0, int arg1, int arg2) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([DII)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2)); }

    DoubleBuffer put(int arg0, DoubleBuffer arg1, int arg2, int arg3) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ILjava.nio.DoubleBuffer;II)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2, arg3)); }

    DoubleBuffer put(DoubleBuffer arg0) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.nio.DoubleBuffer;)Ljava.nio.DoubleBuffer;", arg0)); }

    DoubleBuffer put(int arg0, double arg1) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ID)Ljava.nio.DoubleBuffer;", arg0, arg1)); }

    DoubleBuffer put(double arg0) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(D)Ljava.nio.DoubleBuffer;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(DoubleBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.DoubleBuffer;)I", arg0)); }

    static int compare(double arg0, double arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(DD)I", arg0, arg1)); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    DoubleBuffer clear() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.DoubleBuffer;", )); }

    static DoubleBuffer wrap(arr_D arg0) { return DoubleBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([D)Ljava.nio.DoubleBuffer;", arg0)); }

    static DoubleBuffer wrap(arr_D arg0, int arg1, int arg2) { return DoubleBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([DII)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2)); }

    DoubleBuffer position(int arg0) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.DoubleBuffer;", arg0)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    DoubleBuffer limit(int arg0) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.DoubleBuffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    DoubleBuffer mark() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.DoubleBuffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    DoubleBuffer reset() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.DoubleBuffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    DoubleBuffer flip() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.DoubleBuffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    DoubleBuffer rewind() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.DoubleBuffer;", )); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    DoubleBuffer slice(int arg0, int arg1) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.DoubleBuffer;", arg0, arg1)); }

    DoubleBuffer slice() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.DoubleBuffer;", )); }

    DoubleBuffer duplicate() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.DoubleBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int mismatch(DoubleBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "mismatch", "(Ljava.nio.DoubleBuffer;)I", arg0)); }

    static DoubleBuffer allocate(int arg0) { return DoubleBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocate", "(I)Ljava.nio.DoubleBuffer;", arg0)); }

    DoubleBuffer getArray(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "getArray", "(I[DII)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2, arg3)); }

    void putBuffer(int arg0, DoubleBuffer arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBuffer", "(ILjava.nio.DoubleBuffer;II)V", arg0, arg1, arg2, arg3)); }

    DoubleBuffer putArray(int arg0, arr_D arg1, int arg2, int arg3) { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "putArray", "(I[DII)Ljava.nio.DoubleBuffer;", arg0, arg1, arg2, arg3)); }

    DoubleBuffer asReadOnlyBuffer() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava.nio.DoubleBuffer;", )); }

    DoubleBuffer compact() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.DoubleBuffer;", )); }

};


/**
 * Classpath: [D
 */
class arr_D : public Object {
protected:
    const inline static char *className = "[D";
public:
    STATICINITIALIZE;

    arr_D(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.module.ModuleDescriptor$Builder
 * Enclosing class: java.lang.module.ModuleDescriptor
 * Package name: java.lang.module
 */
class ModuleDescriptor_Builder : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Builder";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Builder(jobject object) : JavaObject(object) {}

    ModuleDescriptor_Builder version(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "version", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder version(ModuleDescriptor_Version arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "version", "(Ljava.lang.module.ModuleDescriptor$Version;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    Set packages() { return Set(*javaClass->invokeMethod<jobject>(this->object, "packages", "()Ljava.util.Set;", )); }

    ModuleDescriptor_Builder packages(Set arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "packages", "(Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder exports(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "exports", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder exports(Set arg0, String arg1, Set arg2) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "exports", "(Ljava.util.Set;Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1, arg2)); }

    ModuleDescriptor_Builder exports(String arg0, Set arg1) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "exports", "(Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1)); }

    ModuleDescriptor_Builder exports(Set arg0, String arg1) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "exports", "(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1)); }

    ModuleDescriptor_Builder exports(ModuleDescriptor_Exports arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "exports", "(Ljava.lang.module.ModuleDescriptor$Exports;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder opens(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "opens", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder opens(Set arg0, String arg1, Set arg2) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "opens", "(Ljava.util.Set;Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1, arg2)); }

    ModuleDescriptor_Builder opens(String arg0, Set arg1) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "opens", "(Ljava.lang.String;Ljava.util.Set;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1)); }

    ModuleDescriptor_Builder opens(ModuleDescriptor_Opens arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "opens", "(Ljava.lang.module.ModuleDescriptor$Opens;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder opens(Set arg0, String arg1) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "opens", "(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1)); }

    ModuleDescriptor_Builder uses(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "uses", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder provides(ModuleDescriptor_Provides arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "provides", "(Ljava.lang.module.ModuleDescriptor$Provides;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder provides(String arg0, List arg1) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "provides", "(Ljava.lang.String;Ljava.util.List;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1)); }

    ModuleDescriptor build() { return ModuleDescriptor(*javaClass->invokeMethod<jobject>(this->object, "build", "()Ljava.lang.module.ModuleDescriptor;", )); }

    ModuleDescriptor_Builder requires(ModuleDescriptor_Requires arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "requires", "(Ljava.lang.module.ModuleDescriptor$Requires;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder requires(Set arg0, String arg1, ModuleDescriptor_Version arg2) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "requires", "(Ljava.util.Set;Ljava.lang.String;Ljava.lang.module.ModuleDescriptor$Version;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1, arg2)); }

    ModuleDescriptor_Builder requires(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "requires", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    ModuleDescriptor_Builder requires(Set arg0, String arg1) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "requires", "(Ljava.util.Set;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1)); }

    ModuleDescriptor_Builder requires(Set arg0, String arg1, String arg2) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "requires", "(Ljava.util.Set;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0, arg1, arg2)); }

    ModuleDescriptor_Builder mainClass(String arg0) { return ModuleDescriptor_Builder(*javaClass->invokeMethod<jobject>(this->object, "mainClass", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Builder;", arg0)); }

    void lambda_provides_0(String arg0) { (*javaClass->invokeMethod<void>(this->object, "lambda$provides$0", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: java.lang.module.ModuleDescriptor$Version
 * Enclosing class: java.lang.module.ModuleDescriptor
 * Package name: java.lang.module
 */
class ModuleDescriptor_Version : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Version";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Version(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ModuleDescriptor_Version arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.module.ModuleDescriptor$Version;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int cmp(Object arg0, Object arg1) { return int(*javaClass->invokeMethod<int>(this->object, "cmp", "(Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1)); }

    static ModuleDescriptor_Version parse(String arg0) { return ModuleDescriptor_Version(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Ljava.lang.module.ModuleDescriptor$Version;", arg0)); }

    static int takeNumber(String arg0, int arg1, List arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "takeNumber", "(Ljava.lang.String;ILjava.util.List;)I", arg0, arg1, arg2)); }

    static int takeString(String arg0, int arg1, List arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "takeString", "(Ljava.lang.String;ILjava.util.List;)I", arg0, arg1, arg2)); }

    int compareTokens(List arg0, List arg1) { return int(*javaClass->invokeMethod<int>(this->object, "compareTokens", "(Ljava.util.List;Ljava.util.List;)I", arg0, arg1)); }

};


/**
 * Classpath: java.lang.module.ModuleDescriptor$Exports
 * Enclosing class: java.lang.module.ModuleDescriptor
 * Package name: java.lang.module
 */
class ModuleDescriptor_Exports : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Exports";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Exports(jobject object) : JavaObject(object) {}

    Set modifiers() { return Set(*javaClass->invokeMethod<jobject>(this->object, "modifiers", "()Ljava.util.Set;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ModuleDescriptor_Exports arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.module.ModuleDescriptor$Exports;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    String source() { return String(*javaClass->invokeMethod<jobject>(this->object, "source", "()Ljava.lang.String;", )); }

    bool isQualified() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isQualified", "()Z", )); }

    Set targets() { return Set(*javaClass->invokeMethod<jobject>(this->object, "targets", "()Ljava.util.Set;", )); }

};


/**
 * Classpath: java.lang.module.ModuleDescriptor$Opens
 * Enclosing class: java.lang.module.ModuleDescriptor
 * Package name: java.lang.module
 */
class ModuleDescriptor_Opens : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Opens";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Opens(jobject object) : JavaObject(object) {}

    Set modifiers() { return Set(*javaClass->invokeMethod<jobject>(this->object, "modifiers", "()Ljava.util.Set;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ModuleDescriptor_Opens arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.module.ModuleDescriptor$Opens;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    String source() { return String(*javaClass->invokeMethod<jobject>(this->object, "source", "()Ljava.lang.String;", )); }

    bool isQualified() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isQualified", "()Z", )); }

    Set targets() { return Set(*javaClass->invokeMethod<jobject>(this->object, "targets", "()Ljava.util.Set;", )); }

};


/**
 * Classpath: java.lang.module.ModuleDescriptor$Provides
 * Enclosing class: java.lang.module.ModuleDescriptor
 * Package name: java.lang.module
 */
class ModuleDescriptor_Provides : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Provides";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Provides(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ModuleDescriptor_Provides arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.module.ModuleDescriptor$Provides;)I", arg0)); }

    String service() { return String(*javaClass->invokeMethod<jobject>(this->object, "service", "()Ljava.lang.String;", )); }

    List providers() { return List(*javaClass->invokeMethod<jobject>(this->object, "providers", "()Ljava.util.List;", )); }

};


/**
 * Classpath: java.lang.module.ModuleDescriptor$Requires
 * Enclosing class: java.lang.module.ModuleDescriptor
 * Package name: java.lang.module
 */
class ModuleDescriptor_Requires : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleDescriptor$Requires";
public:
    STATICINITIALIZE;

    ModuleDescriptor_Requires(jobject object) : JavaObject(object) {}

    Set modifiers() { return Set(*javaClass->invokeMethod<jobject>(this->object, "modifiers", "()Ljava.util.Set;", )); }

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ModuleDescriptor_Requires arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.module.ModuleDescriptor$Requires;)I", arg0)); }

    Optional rawCompiledVersion() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "rawCompiledVersion", "()Ljava.util.Optional;", )); }

    Optional compiledVersion() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "compiledVersion", "()Ljava.util.Optional;", )); }

};


/**
 * Classpath: java.lang.ModuleLayer
 * Package name: java.lang
 */
class ModuleLayer : public Object {
protected:
    const inline static char *className = "java.lang.ModuleLayer";
public:
    STATICINITIALIZE;

    ModuleLayer(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static ModuleLayer empty() { return ModuleLayer(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.lang.ModuleLayer;", )); }

    static ModuleLayer boot() { return ModuleLayer(*javaClass->invokeStaticMethod<jobject>(this->object, "boot", "()Ljava.lang.ModuleLayer;", )); }

    Set modules() { return Set(*javaClass->invokeMethod<jobject>(this->object, "modules", "()Ljava.util.Set;", )); }

    Configuration configuration() { return Configuration(*javaClass->invokeMethod<jobject>(this->object, "configuration", "()Ljava.lang.module.Configuration;", )); }

    List parents() { return List(*javaClass->invokeMethod<jobject>(this->object, "parents", "()Ljava.util.List;", )); }

    Optional findModule(String arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "findModule", "(Ljava.lang.String;)Ljava.util.Optional;", arg0)); }

    ServicesCatalog getServicesCatalog() { return ServicesCatalog(*javaClass->invokeMethod<jobject>(this->object, "getServicesCatalog", "()Ljdk.internal.module.ServicesCatalog;", )); }

    void bindToLoader(ClassLoader arg0) { (*javaClass->invokeMethod<void>(this->object, "bindToLoader", "(Ljava.lang.ClassLoader;)V", arg0)); }

    Stream layers() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "layers", "()Ljava.util.stream.Stream;", )); }

    static Stream layers(ClassLoader arg0) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "layers", "(Ljava.lang.ClassLoader;)Ljava.util.stream.Stream;", arg0)); }

    ModuleLayer defineModules(Configuration arg0, Function arg1) { return ModuleLayer(*javaClass->invokeMethod<jobject>(this->object, "defineModules", "(Ljava.lang.module.Configuration;Ljava.util.function.Function;)Ljava.lang.ModuleLayer;", arg0, arg1)); }

    static ModuleLayer_Controller defineModules(Configuration arg0, List arg1, Function arg2) { return ModuleLayer_Controller(*javaClass->invokeStaticMethod<jobject>(this->object, "defineModules", "(Ljava.lang.module.Configuration;Ljava.util.List;Ljava.util.function.Function;)Ljava.lang.ModuleLayer$Controller;", arg0, arg1, arg2)); }

    static Module lambda_findModule_2(String arg0, ModuleLayer arg1) { return Module(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$findModule$2", "(Ljava.lang.String;Ljava.lang.ModuleLayer;)Ljava.lang.Module;", arg0, arg1)); }

    static LayerInstantiationException fail(String arg0, Object_interface arg1) { return LayerInstantiationException(*javaClass->invokeStaticMethod<jobject>(this->object, "fail", "(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.LayerInstantiationException;", arg0, arg1)); }

    static ModuleLayer_Controller defineModulesWithOneLoader(Configuration arg0, List arg1, ClassLoader arg2) { return ModuleLayer_Controller(*javaClass->invokeStaticMethod<jobject>(this->object, "defineModulesWithOneLoader", "(Ljava.lang.module.Configuration;Ljava.util.List;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer$Controller;", arg0, arg1, arg2)); }

    ModuleLayer defineModulesWithOneLoader(Configuration arg0, ClassLoader arg1) { return ModuleLayer(*javaClass->invokeMethod<jobject>(this->object, "defineModulesWithOneLoader", "(Ljava.lang.module.Configuration;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer;", arg0, arg1)); }

    static ModuleLayer_Controller defineModulesWithManyLoaders(Configuration arg0, List arg1, ClassLoader arg2) { return ModuleLayer_Controller(*javaClass->invokeStaticMethod<jobject>(this->object, "defineModulesWithManyLoaders", "(Ljava.lang.module.Configuration;Ljava.util.List;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer$Controller;", arg0, arg1, arg2)); }

    ModuleLayer defineModulesWithManyLoaders(Configuration arg0, ClassLoader arg1) { return ModuleLayer(*javaClass->invokeMethod<jobject>(this->object, "defineModulesWithManyLoaders", "(Ljava.lang.module.Configuration;Ljava.lang.ClassLoader;)Ljava.lang.ModuleLayer;", arg0, arg1)); }

    static void checkConfiguration(Configuration arg0, List arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkConfiguration", "(Ljava.lang.module.Configuration;Ljava.util.List;)V", arg0, arg1)); }

    static void checkCreateClassLoaderPermission() { (*javaClass->invokeStaticMethod<void>(this->object, "checkCreateClassLoaderPermission", "()V", )); }

    static void checkGetClassLoaderPermission() { (*javaClass->invokeStaticMethod<void>(this->object, "checkGetClassLoaderPermission", "()V", )); }

    static void checkForDuplicatePkgs(Configuration arg0, Function arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkForDuplicatePkgs", "(Ljava.lang.module.Configuration;Ljava.util.function.Function;)V", arg0, arg1)); }

    ClassLoader findLoader(String arg0) { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "findLoader", "(Ljava.lang.String;)Ljava.lang.ClassLoader;", arg0)); }

    static Set lambda_checkForDuplicatePkgs_1(ClassLoader arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$checkForDuplicatePkgs$1", "(Ljava.lang.ClassLoader;)Ljava.util.Set;", arg0)); }

    static ClassLoader lambda_defineModulesWithOneLoader_0(Loader arg0, String arg1) { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$defineModulesWithOneLoader$0", "(Ljdk.internal.loader.Loader;Ljava.lang.String;)Ljava.lang.ClassLoader;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.module.Configuration
 * Package name: java.lang.module
 */
class Configuration : public Object {
protected:
    const inline static char *className = "java.lang.module.Configuration";
public:
    STATICINITIALIZE;

    Configuration(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static Configuration empty() { return Configuration(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.lang.module.Configuration;", )); }

    Configuration resolve(ModuleFinder arg0, ModuleFinder arg1, Collection arg2) { return Configuration(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(Ljava.lang.module.ModuleFinder;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;", arg0, arg1, arg2)); }

    static Configuration resolve(ModuleFinder arg0, List arg1, ModuleFinder arg2, Collection arg3) { return Configuration(*javaClass->invokeStaticMethod<jobject>(this->object, "resolve", "(Ljava.lang.module.ModuleFinder;Ljava.util.List;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;", arg0, arg1, arg2, arg3)); }

    Set modules() { return Set(*javaClass->invokeMethod<jobject>(this->object, "modules", "()Ljava.util.Set;", )); }

    Set reads(ResolvedModule arg0) { return Set(*javaClass->invokeMethod<jobject>(this->object, "reads", "(Ljava.lang.module.ResolvedModule;)Ljava.util.Set;", arg0)); }

    List parents() { return List(*javaClass->invokeMethod<jobject>(this->object, "parents", "()Ljava.util.List;", )); }

    Optional findModule(String arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "findModule", "(Ljava.lang.String;)Ljava.util.Optional;", arg0)); }

    static Configuration resolveAndBind(ModuleFinder arg0, Collection arg1, PrintStream arg2) { return Configuration(*javaClass->invokeStaticMethod<jobject>(this->object, "resolveAndBind", "(Ljava.lang.module.ModuleFinder;Ljava.util.Collection;Ljava.io.PrintStream;)Ljava.lang.module.Configuration;", arg0, arg1, arg2)); }

    static Configuration resolveAndBind(ModuleFinder arg0, List arg1, ModuleFinder arg2, Collection arg3) { return Configuration(*javaClass->invokeStaticMethod<jobject>(this->object, "resolveAndBind", "(Ljava.lang.module.ModuleFinder;Ljava.util.List;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;", arg0, arg1, arg2, arg3)); }

    Configuration resolveAndBind(ModuleFinder arg0, ModuleFinder arg1, Collection arg2) { return Configuration(*javaClass->invokeMethod<jobject>(this->object, "resolveAndBind", "(Ljava.lang.module.ModuleFinder;Ljava.lang.module.ModuleFinder;Ljava.util.Collection;)Ljava.lang.module.Configuration;", arg0, arg1, arg2)); }

    Set descriptors() { return Set(*javaClass->invokeMethod<jobject>(this->object, "descriptors", "()Ljava.util.Set;", )); }

    String targetPlatform() { return String(*javaClass->invokeMethod<jobject>(this->object, "targetPlatform", "()Ljava.lang.String;", )); }

    Stream configurations() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "configurations", "()Ljava.util.stream.Stream;", )); }

    static ResolvedModule lambda_findModule_0(String arg0, Configuration arg1) { return ResolvedModule(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$findModule$0", "(Ljava.lang.String;Ljava.lang.module.Configuration;)Ljava.lang.module.ResolvedModule;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.module.ModuleFinder
 * Package name: java.lang.module
 */
class ModuleFinder : public JavaObject {
protected:
    const inline static char *className = "java.lang.module.ModuleFinder";
public:
    STATICINITIALIZE;

    ModuleFinder(jobject object) : JavaObject(object) {}

    static ModuleFinder of(Path_interface arg0) { return ModuleFinder(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "([Ljava.nio.file.Path;)Ljava.lang.module.ModuleFinder;", arg0)); }

    Optional find(String arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "find", "(Ljava.lang.String;)Ljava.util.Optional;", arg0)); }

    static ModuleFinder ofSystem() { return ModuleFinder(*javaClass->invokeStaticMethod<jobject>(this->object, "ofSystem", "()Ljava.lang.module.ModuleFinder;", )); }

    static ModuleFinder compose(ModuleFinder_interface arg0) { return ModuleFinder(*javaClass->invokeStaticMethod<jobject>(this->object, "compose", "([Ljava.lang.module.ModuleFinder;)Ljava.lang.module.ModuleFinder;", arg0)); }

    Set findAll() { return Set(*javaClass->invokeMethod<jobject>(this->object, "findAll", "()Ljava.util.Set;", )); }

};


/**
 * Classpath: [Ljava.nio.file.Path;
 */
class Path_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.Path;";
public:
    STATICINITIALIZE;

    Path_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.lang.module.ModuleFinder;
 */
class ModuleFinder_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.module.ModuleFinder;";
public:
    STATICINITIALIZE;

    ModuleFinder_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.module.ResolvedModule
 * Package name: java.lang.module
 */
class ResolvedModule : public Object {
protected:
    const inline static char *className = "java.lang.module.ResolvedModule";
public:
    STATICINITIALIZE;

    ResolvedModule(jobject object) : JavaObject(object) {}

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    ModuleDescriptor descriptor() { return ModuleDescriptor(*javaClass->invokeMethod<jobject>(this->object, "descriptor", "()Ljava.lang.module.ModuleDescriptor;", )); }

    Set reads() { return Set(*javaClass->invokeMethod<jobject>(this->object, "reads", "()Ljava.util.Set;", )); }

    ModuleReference reference() { return ModuleReference(*javaClass->invokeMethod<jobject>(this->object, "reference", "()Ljava.lang.module.ModuleReference;", )); }

    Configuration configuration() { return Configuration(*javaClass->invokeMethod<jobject>(this->object, "configuration", "()Ljava.lang.module.Configuration;", )); }

};


/**
 * Classpath: java.lang.module.ModuleReference
 * Package name: java.lang.module
 */
class ModuleReference : public Object {
protected:
    const inline static char *className = "java.lang.module.ModuleReference";
public:
    STATICINITIALIZE;

    ModuleReference(jobject object) : JavaObject(object) {}

    ModuleDescriptor descriptor() { return ModuleDescriptor(*javaClass->invokeMethod<jobject>(this->object, "descriptor", "()Ljava.lang.module.ModuleDescriptor;", )); }

    Optional location() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "location", "()Ljava.util.Optional;", )); }

    ModuleReader open() { return ModuleReader(*javaClass->invokeMethod<jobject>(this->object, "open", "()Ljava.lang.module.ModuleReader;", )); }

};


/**
 * Classpath: java.lang.module.ModuleReader
 * Package name: java.lang.module
 */
class ModuleReader : public JavaObject {
protected:
    const inline static char *className = "java.lang.module.ModuleReader";
public:
    STATICINITIALIZE;

    ModuleReader(jobject object) : JavaObject(object) {}

    Stream list() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "list", "()Ljava.util.stream.Stream;", )); }

    Optional find(String arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "find", "(Ljava.lang.String;)Ljava.util.Optional;", arg0)); }

    Optional read(String arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "read", "(Ljava.lang.String;)Ljava.util.Optional;", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    Optional open(String arg0) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "open", "(Ljava.lang.String;)Ljava.util.Optional;", arg0)); }

    void release(ByteBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "release", "(Ljava.nio.ByteBuffer;)V", arg0)); }

};


/**
 * Classpath: jdk.internal.module.ServicesCatalog
 * Package name: jdk.internal.module
 */
class ServicesCatalog : public Object {
protected:
    const inline static char *className = "jdk.internal.module.ServicesCatalog";
public:
    STATICINITIALIZE;

    ServicesCatalog(jobject object) : JavaObject(object) {}

    void register(Module arg0) { (*javaClass->invokeMethod<void>(this->object, "register", "(Ljava.lang.Module;)V", arg0)); }

    static ServicesCatalog getServicesCatalog(ClassLoader arg0) { return ServicesCatalog(*javaClass->invokeStaticMethod<jobject>(this->object, "getServicesCatalog", "(Ljava.lang.ClassLoader;)Ljdk.internal.module.ServicesCatalog;", arg0)); }

    void addProvider(Module arg0, Class arg1, Class arg2) { (*javaClass->invokeMethod<void>(this->object, "addProvider", "(Ljava.lang.Module;Ljava.lang.Class;Ljava.lang.Class;)V", arg0, arg1, arg2)); }

    static ServicesCatalog create() { return ServicesCatalog(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "()Ljdk.internal.module.ServicesCatalog;", )); }

    static void putServicesCatalog(ClassLoader arg0, ServicesCatalog arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "putServicesCatalog", "(Ljava.lang.ClassLoader;Ljdk.internal.module.ServicesCatalog;)V", arg0, arg1)); }

    void addProviders(String arg0, ServicesCatalog_ServiceProvider_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "addProviders", "(Ljava.lang.String;[Ljdk.internal.module.ServicesCatalog$ServiceProvider;)V", arg0, arg1)); }

    List findServices(String arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "findServices", "(Ljava.lang.String;)Ljava.util.List;", arg0)); }

    static ServicesCatalog getServicesCatalogOrNull(ClassLoader arg0) { return ServicesCatalog(*javaClass->invokeStaticMethod<jobject>(this->object, "getServicesCatalogOrNull", "(Ljava.lang.ClassLoader;)Ljdk.internal.module.ServicesCatalog;", arg0)); }

};


/**
 * Classpath: [Ljdk.internal.module.ServicesCatalog$ServiceProvider;
 */
class ServicesCatalog_ServiceProvider_interface : public Object {
protected:
    const inline static char *className = "[Ljdk.internal.module.ServicesCatalog$ServiceProvider;";
public:
    STATICINITIALIZE;

    ServicesCatalog_ServiceProvider_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.ModuleLayer$Controller
 * Enclosing class: java.lang.ModuleLayer
 * Package name: java.lang
 */
class ModuleLayer_Controller : public Object {
protected:
    const inline static char *className = "java.lang.ModuleLayer$Controller";
public:
    STATICINITIALIZE;

    ModuleLayer_Controller(jobject object) : JavaObject(object) {}

    ModuleLayer_Controller addReads(Module arg0, Module arg1) { return ModuleLayer_Controller(*javaClass->invokeMethod<jobject>(this->object, "addReads", "(Ljava.lang.Module;Ljava.lang.Module;)Ljava.lang.ModuleLayer$Controller;", arg0, arg1)); }

    ModuleLayer_Controller addExports(Module arg0, String arg1, Module arg2) { return ModuleLayer_Controller(*javaClass->invokeMethod<jobject>(this->object, "addExports", "(Ljava.lang.Module;Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.ModuleLayer$Controller;", arg0, arg1, arg2)); }

    ModuleLayer_Controller addOpens(Module arg0, String arg1, Module arg2) { return ModuleLayer_Controller(*javaClass->invokeMethod<jobject>(this->object, "addOpens", "(Ljava.lang.Module;Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.ModuleLayer$Controller;", arg0, arg1, arg2)); }

    ModuleLayer layer() { return ModuleLayer(*javaClass->invokeMethod<jobject>(this->object, "layer", "()Ljava.lang.ModuleLayer;", )); }

    void ensureInLayer(Module arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureInLayer", "(Ljava.lang.Module;)V", arg0)); }

};


/**
 * Classpath: java.net.URL
 * Package name: java.net
 */
class URL : public Object {
protected:
    const inline static char *className = "java.net.URL";
public:
    STATICINITIALIZE;

    URL(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static String toLowerCase(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toLowerCase", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    InputStream openStream() { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "openStream", "()Ljava.io.InputStream;", )); }

    void set(String arg0, String arg1, int arg2, String arg3, String arg4, String arg5, String arg6, String arg7) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    InetAddress getHostAddress() { return InetAddress(*javaClass->invokeMethod<jobject>(this->object, "getHostAddress", "()Ljava.net.InetAddress;", )); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

    void checkSpecifyHandler(SecurityManager arg0) { (*javaClass->invokeMethod<void>(this->object, "checkSpecifyHandler", "(Ljava.lang.SecurityManager;)V", arg0)); }

    static URLStreamHandler getURLStreamHandler(String arg0) { return URLStreamHandler(*javaClass->invokeStaticMethod<jobject>(this->object, "getURLStreamHandler", "(Ljava.lang.String;)Ljava.net.URLStreamHandler;", arg0)); }

    bool isBuiltinStreamHandler(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBuiltinStreamHandler", "(Ljava.lang.String;)Z", arg0)); }

    bool isBuiltinStreamHandler(URLStreamHandler arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBuiltinStreamHandler", "(Ljava.net.URLStreamHandler;)Z", arg0)); }

    bool isValidProtocol(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidProtocol", "(Ljava.lang.String;)Z", arg0)); }

    String getHost() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHost", "()Ljava.lang.String;", )); }

    int getPort() { return int(*javaClass->invokeMethod<int>(this->object, "getPort", "()I", )); }

    int getDefaultPort() { return int(*javaClass->invokeMethod<int>(this->object, "getDefaultPort", "()I", )); }

    bool sameFile(URL arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "sameFile", "(Ljava.net.URL;)Z", arg0)); }

    String toExternalForm() { return String(*javaClass->invokeMethod<jobject>(this->object, "toExternalForm", "()Ljava.lang.String;", )); }

    URLConnection openConnection() { return URLConnection(*javaClass->invokeMethod<jobject>(this->object, "openConnection", "()Ljava.net.URLConnection;", )); }

    URLConnection openConnection(Proxy arg0) { return URLConnection(*javaClass->invokeMethod<jobject>(this->object, "openConnection", "(Ljava.net.Proxy;)Ljava.net.URLConnection;", arg0)); }

    Object getContent() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getContent", "()Ljava.lang.Object;", )); }

    Object getContent(Class_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getContent", "([Ljava.lang.Class;)Ljava.lang.Object;", arg0)); }

    static bool isOverrideable(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isOverrideable", "(Ljava.lang.String;)Z", arg0)); }

    static URLStreamHandler lookupViaProviders(String arg0) { return URLStreamHandler(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupViaProviders", "(Ljava.lang.String;)Ljava.net.URLStreamHandler;", arg0)); }

    static URLStreamHandler lookupViaProperty(String arg0) { return URLStreamHandler(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupViaProperty", "(Ljava.lang.String;)Ljava.net.URLStreamHandler;", arg0)); }

    String getProtocol() { return String(*javaClass->invokeMethod<jobject>(this->object, "getProtocol", "()Ljava.lang.String;", )); }

    URL fabricateNewURL() { return URL(*javaClass->invokeMethod<jobject>(this->object, "fabricateNewURL", "()Ljava.net.URL;", )); }

    URL setDeserializedFields(URLStreamHandler arg0) { return URL(*javaClass->invokeMethod<jobject>(this->object, "setDeserializedFields", "(Ljava.net.URLStreamHandler;)Ljava.net.URL;", arg0)); }

    String getAuthority() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAuthority", "()Ljava.lang.String;", )); }

    String getFile() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFile", "()Ljava.lang.String;", )); }

    String getRef() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRef", "()Ljava.lang.String;", )); }

    void resetState() { (*javaClass->invokeMethod<void>(this->object, "resetState", "()V", )); }

    void setSerializedHashCode(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSerializedHashCode", "(I)V", arg0)); }

    static URL fromURI(URI arg0) { return URL(*javaClass->invokeStaticMethod<jobject>(this->object, "fromURI", "(Ljava.net.URI;)Ljava.net.URL;", arg0)); }

    String getQuery() { return String(*javaClass->invokeMethod<jobject>(this->object, "getQuery", "()Ljava.lang.String;", )); }

    String getPath() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPath", "()Ljava.lang.String;", )); }

    String getUserInfo() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUserInfo", "()Ljava.lang.String;", )); }

    URI toURI() { return URI(*javaClass->invokeMethod<jobject>(this->object, "toURI", "()Ljava.net.URI;", )); }

    static void setURLStreamHandlerFactory(URLStreamHandlerFactory arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setURLStreamHandlerFactory", "(Ljava.net.URLStreamHandlerFactory;)V", arg0)); }

    static Iterator providers() { return Iterator(*javaClass->invokeStaticMethod<jobject>(this->object, "providers", "()Ljava.util.Iterator;", )); }

};


/**
 * Classpath: java.net.InetAddress
 * Package name: java.net
 */
class InetAddress : public Object {
protected:
    const inline static char *className = "java.net.InetAddress";
public:
    STATICINITIALIZE;

    InetAddress(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static void init() { (*javaClass->invokeStaticMethod<void>(this->object, "init", "()V", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String getHostAddress() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHostAddress", "()Ljava.lang.String;", )); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

    static InetAddress getByName(String arg0, InetAddress arg1) { return InetAddress(*javaClass->invokeStaticMethod<jobject>(this->object, "getByName", "(Ljava.lang.String;Ljava.net.InetAddress;)Ljava.net.InetAddress;", arg0, arg1)); }

    static InetAddress getByName(String arg0) { return InetAddress(*javaClass->invokeStaticMethod<jobject>(this->object, "getByName", "(Ljava.lang.String;)Ljava.net.InetAddress;", arg0)); }

    String getHostName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHostName", "()Ljava.lang.String;", )); }

    String getHostName(bool arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getHostName", "(Z)Ljava.lang.String;", arg0)); }

    InetAddress_InetAddressHolder holder() { return InetAddress_InetAddressHolder(*javaClass->invokeMethod<jobject>(this->object, "holder", "()Ljava.net.InetAddress$InetAddressHolder;", )); }

    bool isReachable(NetworkInterface arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReachable", "(Ljava.net.NetworkInterface;II)Z", arg0, arg1, arg2)); }

    bool isReachable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReachable", "(I)Z", arg0)); }

    static String getHostFromNameService(InetAddress arg0, bool arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getHostFromNameService", "(Ljava.net.InetAddress;Z)Ljava.lang.String;", arg0, arg1)); }

    static int checkNumericZone(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "checkNumericZone", "(Ljava.lang.String;)I", arg0)); }

    static InetAddress getByAddress(arr_B arg0) { return InetAddress(*javaClass->invokeStaticMethod<jobject>(this->object, "getByAddress", "([B)Ljava.net.InetAddress;", arg0)); }

    static InetAddress getByAddress(String arg0, arr_B arg1) { return InetAddress(*javaClass->invokeStaticMethod<jobject>(this->object, "getByAddress", "(Ljava.lang.String;[B)Ljava.net.InetAddress;", arg0, arg1)); }

    static InetAddress anyLocalAddress() { return InetAddress(*javaClass->invokeStaticMethod<jobject>(this->object, "anyLocalAddress", "()Ljava.net.InetAddress;", )); }

    static InetAddress_NameService createNameService() { return InetAddress_NameService(*javaClass->invokeStaticMethod<jobject>(this->object, "createNameService", "()Ljava.net.InetAddress$NameService;", )); }

    bool isMulticastAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMulticastAddress", "()Z", )); }

    bool isAnyLocalAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnyLocalAddress", "()Z", )); }

    bool isLoopbackAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLoopbackAddress", "()Z", )); }

    bool isSiteLocalAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSiteLocalAddress", "()Z", )); }

    bool isMCGlobal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMCGlobal", "()Z", )); }

    bool isMCNodeLocal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMCNodeLocal", "()Z", )); }

    bool isMCLinkLocal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMCLinkLocal", "()Z", )); }

    bool isMCSiteLocal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMCSiteLocal", "()Z", )); }

    bool isMCOrgLocal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMCOrgLocal", "()Z", )); }

    String getCanonicalHostName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalHostName", "()Ljava.lang.String;", )); }

    static InetAddress getLoopbackAddress() { return InetAddress(*javaClass->invokeStaticMethod<jobject>(this->object, "getLoopbackAddress", "()Ljava.net.InetAddress;", )); }

    static InetAddressImpl loadImpl(String arg0) { return InetAddressImpl(*javaClass->invokeStaticMethod<jobject>(this->object, "loadImpl", "(Ljava.lang.String;)Ljava.net.InetAddressImpl;", arg0)); }

    void readObjectNoData() { (*javaClass->invokeMethod<void>(this->object, "readObjectNoData", "()V", )); }

    bool isLinkLocalAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLinkLocalAddress", "()Z", )); }

    static InetAddress getLocalHost() { return InetAddress(*javaClass->invokeStaticMethod<jobject>(this->object, "getLocalHost", "()Ljava.net.InetAddress;", )); }

};


/**
 * Classpath: java.net.InetAddress$InetAddressHolder
 * Enclosing class: java.net.InetAddress
 * Package name: java.net
 */
class InetAddress_InetAddressHolder : public Object {
protected:
    const inline static char *className = "java.net.InetAddress$InetAddressHolder";
public:
    STATICINITIALIZE;

    InetAddress_InetAddressHolder(jobject object) : JavaObject(object) {}

    void init(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "init", "(Ljava.lang.String;I)V", arg0, arg1)); }

    int getAddress() { return int(*javaClass->invokeMethod<int>(this->object, "getAddress", "()I", )); }

    String getHostName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHostName", "()Ljava.lang.String;", )); }

    int getFamily() { return int(*javaClass->invokeMethod<int>(this->object, "getFamily", "()I", )); }

    String getOriginalHostName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getOriginalHostName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.net.NetworkInterface
 * Package name: java.net
 */
class NetworkInterface : public Object {
protected:
    const inline static char *className = "java.net.NetworkInterface";
public:
    STATICINITIALIZE;

    NetworkInterface(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static NetworkInterface getDefault() { return NetworkInterface(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefault", "()Ljava.net.NetworkInterface;", )); }

    NetworkInterface getParent() { return NetworkInterface(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.net.NetworkInterface;", )); }

    static void init() { (*javaClass->invokeStaticMethod<void>(this->object, "init", "()V", )); }

    static NetworkInterface getByName(String arg0) { return NetworkInterface(*javaClass->invokeStaticMethod<jobject>(this->object, "getByName", "(Ljava.lang.String;)Ljava.net.NetworkInterface;", arg0)); }

    int getIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getIndex", "()I", )); }

    Enumeration getInetAddresses() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getInetAddresses", "()Ljava.util.Enumeration;", )); }

    static bool isBoundInetAddress(InetAddress arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isBoundInetAddress", "(Ljava.net.InetAddress;)Z", arg0)); }

    static Enumeration getNetworkInterfaces() { return Enumeration(*javaClass->invokeStaticMethod<jobject>(this->object, "getNetworkInterfaces", "()Ljava.util.Enumeration;", )); }

    static Enumeration enumerationFromArray(Object_interface arg0) { return Enumeration(*javaClass->invokeStaticMethod<jobject>(this->object, "enumerationFromArray", "([Ljava.lang.Object;)Ljava.util.Enumeration;", arg0)); }

    static Stream streamFromArray(Object_interface arg0) { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "streamFromArray", "([Ljava.lang.Object;)Ljava.util.stream.Stream;", arg0)); }

    static NetworkInterface getByName0(String arg0) { return NetworkInterface(*javaClass->invokeStaticMethod<jobject>(this->object, "getByName0", "(Ljava.lang.String;)Ljava.net.NetworkInterface;", arg0)); }

    static NetworkInterface getByIndex0(int arg0) { return NetworkInterface(*javaClass->invokeStaticMethod<jobject>(this->object, "getByIndex0", "(I)Ljava.net.NetworkInterface;", arg0)); }

    static NetworkInterface getByInetAddress0(InetAddress arg0) { return NetworkInterface(*javaClass->invokeStaticMethod<jobject>(this->object, "getByInetAddress0", "(Ljava.net.InetAddress;)Ljava.net.NetworkInterface;", arg0)); }

    static bool boundInetAddress0(InetAddress arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "boundInetAddress0", "(Ljava.net.InetAddress;)Z", arg0)); }

    static bool isUp0(String arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isUp0", "(Ljava.lang.String;I)Z", arg0, arg1)); }

    static bool isLoopback0(String arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLoopback0", "(Ljava.lang.String;I)Z", arg0, arg1)); }

    static bool isP2P0(String arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isP2P0", "(Ljava.lang.String;I)Z", arg0, arg1)); }

    static bool supportsMulticast0(String arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "supportsMulticast0", "(Ljava.lang.String;I)Z", arg0, arg1)); }

    static int getMTU0(String arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getMTU0", "(Ljava.lang.String;I)I", arg0, arg1)); }

    List getInterfaceAddresses() { return List(*javaClass->invokeMethod<jobject>(this->object, "getInterfaceAddresses", "()Ljava.util.List;", )); }

    Enumeration getSubInterfaces() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getSubInterfaces", "()Ljava.util.Enumeration;", )); }

    Stream subInterfaces() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "subInterfaces", "()Ljava.util.stream.Stream;", )); }

    static NetworkInterface getByIndex(int arg0) { return NetworkInterface(*javaClass->invokeStaticMethod<jobject>(this->object, "getByIndex", "(I)Ljava.net.NetworkInterface;", arg0)); }

    static NetworkInterface getByInetAddress(InetAddress arg0) { return NetworkInterface(*javaClass->invokeStaticMethod<jobject>(this->object, "getByInetAddress", "(Ljava.net.InetAddress;)Ljava.net.NetworkInterface;", arg0)); }

    bool isUp() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUp", "()Z", )); }

    bool isLoopback() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLoopback", "()Z", )); }

    bool isPointToPoint() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPointToPoint", "()Z", )); }

    bool supportsMulticast() { return bool(*javaClass->invokeMethod<boolean>(this->object, "supportsMulticast", "()Z", )); }

    int getMTU() { return int(*javaClass->invokeMethod<int>(this->object, "getMTU", "()I", )); }

    bool isVirtual() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVirtual", "()Z", )); }

    static Stream networkInterfaces() { return Stream(*javaClass->invokeStaticMethod<jobject>(this->object, "networkInterfaces", "()Ljava.util.stream.Stream;", )); }

    Stream inetAddresses() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "inetAddresses", "()Ljava.util.stream.Stream;", )); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.net.InetAddress$NameService
 * Enclosing class: java.net.InetAddress
 * Package name: java.net
 */
class InetAddress_NameService : public JavaObject {
protected:
    const inline static char *className = "java.net.InetAddress$NameService";
public:
    STATICINITIALIZE;

    InetAddress_NameService(jobject object) : JavaObject(object) {}

    String getHostByAddr(arr_B arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getHostByAddr", "([B)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.net.InetAddressImpl
 * Package name: java.net
 */
class InetAddressImpl : public JavaObject {
protected:
    const inline static char *className = "java.net.InetAddressImpl";
public:
    STATICINITIALIZE;

    InetAddressImpl(jobject object) : JavaObject(object) {}

    bool isReachable(InetAddress arg0, int arg1, NetworkInterface arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReachable", "(Ljava.net.InetAddress;ILjava.net.NetworkInterface;I)Z", arg0, arg1, arg2, arg3)); }

    String getHostByAddr(arr_B arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getHostByAddr", "([B)Ljava.lang.String;", arg0)); }

    InetAddress loopbackAddress() { return InetAddress(*javaClass->invokeMethod<jobject>(this->object, "loopbackAddress", "()Ljava.net.InetAddress;", )); }

    String getLocalHostName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLocalHostName", "()Ljava.lang.String;", )); }

    InetAddress anyLocalAddress() { return InetAddress(*javaClass->invokeMethod<jobject>(this->object, "anyLocalAddress", "()Ljava.net.InetAddress;", )); }

};


/**
 * Classpath: java.net.URLStreamHandler
 * Package name: java.net
 */
class URLStreamHandler : public Object {
protected:
    const inline static char *className = "java.net.URLStreamHandler";
public:
    STATICINITIALIZE;

    URLStreamHandler(jobject object) : JavaObject(object) {}

    bool equals(URL arg0, URL arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.net.URL;Ljava.net.URL;)Z", arg0, arg1)); }

    int hashCode(URL arg0) { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "(Ljava.net.URL;)I", arg0)); }

    InetAddress getHostAddress(URL arg0) { return InetAddress(*javaClass->invokeMethod<jobject>(this->object, "getHostAddress", "(Ljava.net.URL;)Ljava.net.InetAddress;", arg0)); }

    void parseURL(URL arg0, String arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "parseURL", "(Ljava.net.URL;Ljava.lang.String;II)V", arg0, arg1, arg2, arg3)); }

    int getDefaultPort() { return int(*javaClass->invokeMethod<int>(this->object, "getDefaultPort", "()I", )); }

    bool sameFile(URL arg0, URL arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "sameFile", "(Ljava.net.URL;Ljava.net.URL;)Z", arg0, arg1)); }

    String toExternalForm(URL arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toExternalForm", "(Ljava.net.URL;)Ljava.lang.String;", arg0)); }

    URLConnection openConnection(URL arg0) { return URLConnection(*javaClass->invokeMethod<jobject>(this->object, "openConnection", "(Ljava.net.URL;)Ljava.net.URLConnection;", arg0)); }

    URLConnection openConnection(URL arg0, Proxy arg1) { return URLConnection(*javaClass->invokeMethod<jobject>(this->object, "openConnection", "(Ljava.net.URL;Ljava.net.Proxy;)Ljava.net.URLConnection;", arg0, arg1)); }

    bool hostsEqual(URL arg0, URL arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hostsEqual", "(Ljava.net.URL;Ljava.net.URL;)Z", arg0, arg1)); }

    void setURL(URL arg0, String arg1, String arg2, int arg3, String arg4, String arg5, String arg6, String arg7, String arg8) { (*javaClass->invokeMethod<void>(this->object, "setURL", "(Ljava.net.URL;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    void setURL(URL arg0, String arg1, String arg2, int arg3, String arg4, String arg5) { (*javaClass->invokeMethod<void>(this->object, "setURL", "(Ljava.net.URL;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

};


/**
 * Classpath: java.net.URLConnection
 * Package name: java.net
 */
class URLConnection : public Object {
protected:
    const inline static char *className = "java.net.URLConnection";
public:
    STATICINITIALIZE;

    URLConnection(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void connect() { (*javaClass->invokeMethod<void>(this->object, "connect", "()V", )); }

    InputStream getInputStream() { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "getInputStream", "()Ljava.io.InputStream;", )); }

    Object getContent(Class_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getContent", "([Ljava.lang.Class;)Ljava.lang.Object;", arg0)); }

    Object getContent() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getContent", "()Ljava.lang.Object;", )); }

    URL getURL() { return URL(*javaClass->invokeMethod<jobject>(this->object, "getURL", "()Ljava.net.URL;", )); }

    void setUseCaches(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setUseCaches", "(Z)V", arg0)); }

    int getContentLength() { return int(*javaClass->invokeMethod<int>(this->object, "getContentLength", "()I", )); }

    void setRequestProperty(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "setRequestProperty", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    static int readBytes(arr_I arg0, int arg1, InputStream arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "readBytes", "([IILjava.io.InputStream;)I", arg0, arg1, arg2)); }

    long getLastModified() { return long(*javaClass->invokeMethod<long>(this->object, "getLastModified", "()J", )); }

    static bool getDefaultUseCaches(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "getDefaultUseCaches", "(Ljava.lang.String;)Z", arg0)); }

    bool getDefaultUseCaches() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getDefaultUseCaches", "()Z", )); }

    long getContentLengthLong() { return long(*javaClass->invokeMethod<long>(this->object, "getContentLengthLong", "()J", )); }

    long getHeaderFieldLong(String arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "getHeaderFieldLong", "(Ljava.lang.String;J)J", arg0, arg1)); }

    String getHeaderField(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getHeaderField", "(I)Ljava.lang.String;", arg0)); }

    String getHeaderField(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getHeaderField", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    long getHeaderFieldDate(String arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "getHeaderFieldDate", "(Ljava.lang.String;J)J", arg0, arg1)); }

    ContentHandler getContentHandler() { return ContentHandler(*javaClass->invokeMethod<jobject>(this->object, "getContentHandler", "()Ljava.net.ContentHandler;", )); }

    void checkConnected() { (*javaClass->invokeMethod<void>(this->object, "checkConnected", "()V", )); }

    String getContentType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getContentType", "()Ljava.lang.String;", )); }

    String stripOffParameters(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "stripOffParameters", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    ContentHandler lookupContentHandlerViaProvider(String arg0) { return ContentHandler(*javaClass->invokeMethod<jobject>(this->object, "lookupContentHandlerViaProvider", "(Ljava.lang.String;)Ljava.net.ContentHandler;", arg0)); }

    ContentHandler lookupContentHandlerClassFor(String arg0) { return ContentHandler(*javaClass->invokeMethod<jobject>(this->object, "lookupContentHandlerClassFor", "(Ljava.lang.String;)Ljava.net.ContentHandler;", arg0)); }

    String typeToPackageName(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "typeToPackageName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String getContentHandlerPkgPrefixes() { return String(*javaClass->invokeMethod<jobject>(this->object, "getContentHandlerPkgPrefixes", "()Ljava.lang.String;", )); }

    static FileNameMap getFileNameMap() { return FileNameMap(*javaClass->invokeStaticMethod<jobject>(this->object, "getFileNameMap", "()Ljava.net.FileNameMap;", )); }

    static bool checkfpx(InputStream arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkfpx", "(Ljava.io.InputStream;)Z", arg0)); }

    static long skipForward(InputStream arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "skipForward", "(Ljava.io.InputStream;J)J", arg0, arg1)); }

    static void setFileNameMap(FileNameMap arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setFileNameMap", "(Ljava.net.FileNameMap;)V", arg0)); }

    void setConnectTimeout(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setConnectTimeout", "(I)V", arg0)); }

    int getConnectTimeout() { return int(*javaClass->invokeMethod<int>(this->object, "getConnectTimeout", "()I", )); }

    void setReadTimeout(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setReadTimeout", "(I)V", arg0)); }

    int getReadTimeout() { return int(*javaClass->invokeMethod<int>(this->object, "getReadTimeout", "()I", )); }

    String getContentEncoding() { return String(*javaClass->invokeMethod<jobject>(this->object, "getContentEncoding", "()Ljava.lang.String;", )); }

    long getExpiration() { return long(*javaClass->invokeMethod<long>(this->object, "getExpiration", "()J", )); }

    long getDate() { return long(*javaClass->invokeMethod<long>(this->object, "getDate", "()J", )); }

    Map getHeaderFields() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getHeaderFields", "()Ljava.util.Map;", )); }

    int getHeaderFieldInt(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getHeaderFieldInt", "(Ljava.lang.String;I)I", arg0, arg1)); }

    String getHeaderFieldKey(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getHeaderFieldKey", "(I)Ljava.lang.String;", arg0)); }

    OutputStream getOutputStream() { return OutputStream(*javaClass->invokeMethod<jobject>(this->object, "getOutputStream", "()Ljava.io.OutputStream;", )); }

    void setDoInput(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDoInput", "(Z)V", arg0)); }

    bool getDoInput() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getDoInput", "()Z", )); }

    void setDoOutput(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDoOutput", "(Z)V", arg0)); }

    bool getDoOutput() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getDoOutput", "()Z", )); }

    void setAllowUserInteraction(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAllowUserInteraction", "(Z)V", arg0)); }

    bool getAllowUserInteraction() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAllowUserInteraction", "()Z", )); }

    static void setDefaultAllowUserInteraction(bool arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefaultAllowUserInteraction", "(Z)V", arg0)); }

    static bool getDefaultAllowUserInteraction() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "getDefaultAllowUserInteraction", "()Z", )); }

    bool getUseCaches() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getUseCaches", "()Z", )); }

    void setIfModifiedSince(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setIfModifiedSince", "(J)V", arg0)); }

    long getIfModifiedSince() { return long(*javaClass->invokeMethod<long>(this->object, "getIfModifiedSince", "()J", )); }

    void setDefaultUseCaches(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultUseCaches", "(Z)V", arg0)); }

    static void setDefaultUseCaches(String arg0, bool arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefaultUseCaches", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void addRequestProperty(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "addRequestProperty", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    String getRequestProperty(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getRequestProperty", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    Map getRequestProperties() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getRequestProperties", "()Ljava.util.Map;", )); }

    static void setDefaultRequestProperty(String arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefaultRequestProperty", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    static String getDefaultRequestProperty(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultRequestProperty", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static void setContentHandlerFactory(ContentHandlerFactory arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setContentHandlerFactory", "(Ljava.net.ContentHandlerFactory;)V", arg0)); }

    static String guessContentTypeFromName(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "guessContentTypeFromName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static String guessContentTypeFromStream(InputStream arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "guessContentTypeFromStream", "(Ljava.io.InputStream;)Ljava.lang.String;", arg0)); }

    Permission getPermission() { return Permission(*javaClass->invokeMethod<jobject>(this->object, "getPermission", "()Ljava.security.Permission;", )); }

};


/**
 * Classpath: [Ljava.lang.Class;
 */
class Class_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Class;";
public:
    STATICINITIALIZE;

    Class_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.net.ContentHandler
 * Package name: java.net
 */
class ContentHandler : public Object {
protected:
    const inline static char *className = "java.net.ContentHandler";
public:
    STATICINITIALIZE;

    ContentHandler(jobject object) : JavaObject(object) {}

    Object getContent(URLConnection arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getContent", "(Ljava.net.URLConnection;)Ljava.lang.Object;", arg0)); }

    Object getContent(URLConnection arg0, Class_interface arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getContent", "(Ljava.net.URLConnection;[Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1)); }

};


/**
 * Classpath: java.net.FileNameMap
 * Package name: java.net
 */
class FileNameMap : public JavaObject {
protected:
    const inline static char *className = "java.net.FileNameMap";
public:
    STATICINITIALIZE;

    FileNameMap(jobject object) : JavaObject(object) {}

    String getContentTypeFor(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getContentTypeFor", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.net.ContentHandlerFactory
 * Package name: java.net
 */
class ContentHandlerFactory : public JavaObject {
protected:
    const inline static char *className = "java.net.ContentHandlerFactory";
public:
    STATICINITIALIZE;

    ContentHandlerFactory(jobject object) : JavaObject(object) {}

    ContentHandler createContentHandler(String arg0) { return ContentHandler(*javaClass->invokeMethod<jobject>(this->object, "createContentHandler", "(Ljava.lang.String;)Ljava.net.ContentHandler;", arg0)); }

};


/**
 * Classpath: java.net.Proxy
 * Package name: java.net
 */
class Proxy : public Object {
protected:
    const inline static char *className = "java.net.Proxy";
public:
    STATICINITIALIZE;

    Proxy(jobject object) : JavaObject(object) {}

    Proxy_Type type() { return Proxy_Type(*javaClass->invokeMethod<jobject>(this->object, "type", "()Ljava.net.Proxy$Type;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    SocketAddress address() { return SocketAddress(*javaClass->invokeMethod<jobject>(this->object, "address", "()Ljava.net.SocketAddress;", )); }

};


/**
 * Classpath: java.net.Proxy$Type
 * Enclosing class: java.net.Proxy
 * Package name: java.net
 */
class Proxy_Type : public Enum {
protected:
    const inline static char *className = "java.net.Proxy$Type";
public:
    STATICINITIALIZE;

    Proxy_Type(jobject object) : JavaObject(object) {}

    static Proxy_Type valueOf(String arg0) { return Proxy_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.net.Proxy$Type;", arg0)); }

};


/**
 * Classpath: java.net.SocketAddress
 * Package name: java.net
 */
class SocketAddress : public Object {
protected:
    const inline static char *className = "java.net.SocketAddress";
public:
    STATICINITIALIZE;

    SocketAddress(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.net.URI
 * Package name: java.net
 */
class URI : public Object {
protected:
    const inline static char *className = "java.net.URI";
public:
    STATICINITIALIZE;

    URI(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString(String arg0, String arg1, String arg2, String arg3, String arg4, int arg5, String arg6, String arg7, String arg8) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(URI arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.net.URI;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static int compare(String arg0, String arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(Ljava.lang.String;Ljava.lang.String;)I", arg0, arg1)); }

    static int hash(int arg0, String arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(ILjava.lang.String;)I", arg0, arg1)); }

    static int decode(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "decode", "(C)I", arg0)); }

    static byte decode(char arg0, char arg1) { return byte(*javaClass->invokeStaticMethod<byte>(this->object, "decode", "(CC)B", arg0, arg1)); }

    static String decode(String arg0, bool arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "decode", "(Ljava.lang.String;Z)Ljava.lang.String;", arg0, arg1)); }

    static String decode(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "decode", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static String encode(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "encode", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static void split(arr_C arg0, arr_I arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "split", "([C[I)V", arg0, arg1)); }

    static int join(arr_C arg0, arr_I arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "join", "([C[I)I", arg0, arg1)); }

    bool isAbsolute() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAbsolute", "()Z", )); }

    URI resolve(String arg0) { return URI(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(Ljava.lang.String;)Ljava.net.URI;", arg0)); }

    static URI resolve(URI arg0, URI arg1) { return URI(*javaClass->invokeStaticMethod<jobject>(this->object, "resolve", "(Ljava.net.URI;Ljava.net.URI;)Ljava.net.URI;", arg0, arg1)); }

    URI resolve(URI arg0) { return URI(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(Ljava.net.URI;)Ljava.net.URI;", arg0)); }

    static bool match(char arg0, long arg1, long arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "match", "(CJJ)Z", arg0, arg1, arg2)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    URI normalize() { return URI(*javaClass->invokeMethod<jobject>(this->object, "normalize", "()Ljava.net.URI;", )); }

    static String normalize(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "normalize", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static URI normalize(URI arg0) { return URI(*javaClass->invokeStaticMethod<jobject>(this->object, "normalize", "(Ljava.net.URI;)Ljava.net.URI;", arg0)); }

    String getScheme() { return String(*javaClass->invokeMethod<jobject>(this->object, "getScheme", "()Ljava.lang.String;", )); }

    bool isOpaque() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpaque", "()Z", )); }

    String getRawFragment() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRawFragment", "()Ljava.lang.String;", )); }

    String getRawQuery() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRawQuery", "()Ljava.lang.String;", )); }

    String getRawPath() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRawPath", "()Ljava.lang.String;", )); }

    String getHost() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHost", "()Ljava.lang.String;", )); }

    int getPort() { return int(*javaClass->invokeMethod<int>(this->object, "getPort", "()I", )); }

    static URI create(String arg0) { return URI(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(Ljava.lang.String;)Ljava.net.URI;", arg0)); }

    String getAuthority() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAuthority", "()Ljava.lang.String;", )); }

    String getQuery() { return String(*javaClass->invokeMethod<jobject>(this->object, "getQuery", "()Ljava.lang.String;", )); }

    String getPath() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPath", "()Ljava.lang.String;", )); }

    String getUserInfo() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUserInfo", "()Ljava.lang.String;", )); }

    static int toLower(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toLower", "(C)I", arg0)); }

    URL toURL() { return URL(*javaClass->invokeMethod<jobject>(this->object, "toURL", "()Ljava.net.URL;", )); }

    static bool equal(String arg0, String arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "equal", "(Ljava.lang.String;Ljava.lang.String;)Z", arg0, arg1)); }

    String getRawAuthority() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRawAuthority", "()Ljava.lang.String;", )); }

    static URI relativize(URI arg0, URI arg1) { return URI(*javaClass->invokeStaticMethod<jobject>(this->object, "relativize", "(Ljava.net.URI;Ljava.net.URI;)Ljava.net.URI;", arg0, arg1)); }

    URI relativize(URI arg0) { return URI(*javaClass->invokeMethod<jobject>(this->object, "relativize", "(Ljava.net.URI;)Ljava.net.URI;", arg0)); }

    static void checkPath(String arg0, String arg1, String arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "checkPath", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    static bool validSchemeAndPath(String arg0, String arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "validSchemeAndPath", "(Ljava.lang.String;Ljava.lang.String;)Z", arg0, arg1)); }

    void appendSchemeSpecificPart(StringBuilder arg0, String arg1, String arg2, String arg3, String arg4, int arg5, String arg6, String arg7) { (*javaClass->invokeMethod<void>(this->object, "appendSchemeSpecificPart", "(Ljava.lang.StringBuilder;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;ILjava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    String getRawSchemeSpecificPart() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRawSchemeSpecificPart", "()Ljava.lang.String;", )); }

    static bool equalIgnoringCase(String arg0, String arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "equalIgnoringCase", "(Ljava.lang.String;Ljava.lang.String;)Z", arg0, arg1)); }

    static int hashIgnoringCase(int arg0, String arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashIgnoringCase", "(ILjava.lang.String;)I", arg0, arg1)); }

    static int compareIgnoringCase(String arg0, String arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareIgnoringCase", "(Ljava.lang.String;Ljava.lang.String;)I", arg0, arg1)); }

    String defineString() { return String(*javaClass->invokeMethod<jobject>(this->object, "defineString", "()Ljava.lang.String;", )); }

    static int percentNormalizedComparison(String arg0, String arg1, bool arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "percentNormalizedComparison", "(Ljava.lang.String;Ljava.lang.String;Z)I", arg0, arg1, arg2)); }

    static int normalizedHash(int arg0, String arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "normalizedHash", "(ILjava.lang.String;)I", arg0, arg1)); }

    static int toUpper(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toUpper", "(C)I", arg0)); }

    static String quote(String arg0, long arg1, long arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "quote", "(Ljava.lang.String;JJ)Ljava.lang.String;", arg0, arg1, arg2)); }

    void appendAuthority(StringBuilder arg0, String arg1, String arg2, String arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "appendAuthority", "(Ljava.lang.StringBuilder;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;I)V", arg0, arg1, arg2, arg3, arg4)); }

    void appendFragment(StringBuilder arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "appendFragment", "(Ljava.lang.StringBuilder;Ljava.lang.String;)V", arg0, arg1)); }

    static String resolvePath(String arg0, String arg1, bool arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "resolvePath", "(Ljava.lang.String;Ljava.lang.String;Z)Ljava.lang.String;", arg0, arg1, arg2)); }

    static int needsNormalization(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "needsNormalization", "(Ljava.lang.String;)I", arg0)); }

    static void removeDots(arr_C arg0, arr_I arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "removeDots", "([C[I)V", arg0, arg1)); }

    static void maybeAddLeadingDot(arr_C arg0, arr_I arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "maybeAddLeadingDot", "([C[I)V", arg0, arg1)); }

    static void appendEscape(StringBuilder arg0, byte arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "appendEscape", "(Ljava.lang.StringBuilder;B)V", arg0, arg1)); }

    static void appendEncoded(CharsetEncoder arg0, StringBuilder arg1, char arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "appendEncoded", "(Ljava.nio.charset.CharsetEncoder;Ljava.lang.StringBuilder;C)V", arg0, arg1, arg2)); }

    URI parseServerAuthority() { return URI(*javaClass->invokeMethod<jobject>(this->object, "parseServerAuthority", "()Ljava.net.URI;", )); }

    String getSchemeSpecificPart() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSchemeSpecificPart", "()Ljava.lang.String;", )); }

    String getRawUserInfo() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRawUserInfo", "()Ljava.lang.String;", )); }

    String getFragment() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFragment", "()Ljava.lang.String;", )); }

    String toASCIIString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toASCIIString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.nio.charset.CharsetEncoder
 * Package name: java.nio.charset
 */
class CharsetEncoder : public Object {
protected:
    const inline static char *className = "java.nio.charset.CharsetEncoder";
public:
    STATICINITIALIZE;

    CharsetEncoder(jobject object) : JavaObject(object) {}

    CharsetEncoder onMalformedInput(CodingErrorAction arg0) { return CharsetEncoder(*javaClass->invokeMethod<jobject>(this->object, "onMalformedInput", "(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetEncoder;", arg0)); }

    CharsetEncoder onUnmappableCharacter(CodingErrorAction arg0) { return CharsetEncoder(*javaClass->invokeMethod<jobject>(this->object, "onUnmappableCharacter", "(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetEncoder;", arg0)); }

    float maxBytesPerChar() { return float(*javaClass->invokeMethod<float>(this->object, "maxBytesPerChar", "()F", )); }

    CoderResult encode(CharBuffer arg0, ByteBuffer arg1, bool arg2) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "encode", "(Ljava.nio.CharBuffer;Ljava.nio.ByteBuffer;Z)Ljava.nio.charset.CoderResult;", arg0, arg1, arg2)); }

    ByteBuffer encode(CharBuffer arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "encode", "(Ljava.nio.CharBuffer;)Ljava.nio.ByteBuffer;", arg0)); }

    CoderResult flush(ByteBuffer arg0) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "flush", "(Ljava.nio.ByteBuffer;)Ljava.nio.charset.CoderResult;", arg0)); }

    bool canEncode(CharSequence arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEncode", "(Ljava.lang.CharSequence;)Z", arg0)); }

    bool canEncode(char arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEncode", "(C)Z", arg0)); }

    bool canEncode(CharBuffer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEncode", "(Ljava.nio.CharBuffer;)Z", arg0)); }

    Charset charset() { return Charset(*javaClass->invokeMethod<jobject>(this->object, "charset", "()Ljava.nio.charset.Charset;", )); }

    CharsetEncoder reset() { return CharsetEncoder(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.charset.CharsetEncoder;", )); }

    CoderResult implFlush(ByteBuffer arg0) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "implFlush", "(Ljava.nio.ByteBuffer;)Ljava.nio.charset.CoderResult;", arg0)); }

    bool isLegalReplacement(arr_B arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLegalReplacement", "([B)Z", arg0)); }

    CoderResult encodeLoop(CharBuffer arg0, ByteBuffer arg1) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "encodeLoop", "(Ljava.nio.CharBuffer;Ljava.nio.ByteBuffer;)Ljava.nio.charset.CoderResult;", arg0, arg1)); }

    CodingErrorAction malformedInputAction() { return CodingErrorAction(*javaClass->invokeMethod<jobject>(this->object, "malformedInputAction", "()Ljava.nio.charset.CodingErrorAction;", )); }

    CodingErrorAction unmappableCharacterAction() { return CodingErrorAction(*javaClass->invokeMethod<jobject>(this->object, "unmappableCharacterAction", "()Ljava.nio.charset.CodingErrorAction;", )); }

    float averageBytesPerChar() { return float(*javaClass->invokeMethod<float>(this->object, "averageBytesPerChar", "()F", )); }

    CharsetEncoder replaceWith(arr_B arg0) { return CharsetEncoder(*javaClass->invokeMethod<jobject>(this->object, "replaceWith", "([B)Ljava.nio.charset.CharsetEncoder;", arg0)); }

    void implReplaceWith(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "implReplaceWith", "([B)V", arg0)); }

    void implOnMalformedInput(CodingErrorAction arg0) { (*javaClass->invokeMethod<void>(this->object, "implOnMalformedInput", "(Ljava.nio.charset.CodingErrorAction;)V", arg0)); }

    void implOnUnmappableCharacter(CodingErrorAction arg0) { (*javaClass->invokeMethod<void>(this->object, "implOnUnmappableCharacter", "(Ljava.nio.charset.CodingErrorAction;)V", arg0)); }

    void throwIllegalStateException(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "throwIllegalStateException", "(II)V", arg0, arg1)); }

    void implReset() { (*javaClass->invokeMethod<void>(this->object, "implReset", "()V", )); }

};


/**
 * Classpath: java.nio.charset.CodingErrorAction
 * Package name: java.nio.charset
 */
class CodingErrorAction : public Object {
protected:
    const inline static char *className = "java.nio.charset.CodingErrorAction";
public:
    STATICINITIALIZE;

    CodingErrorAction(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.nio.charset.CoderResult
 * Package name: java.nio.charset
 */
class CoderResult : public Object {
protected:
    const inline static char *className = "java.nio.charset.CoderResult";
public:
    STATICINITIALIZE;

    CoderResult(jobject object) : JavaObject(object) {}

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool isUnderflow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUnderflow", "()Z", )); }

    void throwException() { (*javaClass->invokeMethod<void>(this->object, "throwException", "()V", )); }

    static CoderResult unmappableForLength(int arg0) { return CoderResult(*javaClass->invokeStaticMethod<jobject>(this->object, "unmappableForLength", "(I)Ljava.nio.charset.CoderResult;", arg0)); }

    static CoderResult lambda_unmappableForLength_1(Integer arg0) { return CoderResult(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$unmappableForLength$1", "(Ljava.lang.Integer;)Ljava.nio.charset.CoderResult;", arg0)); }

    static CoderResult lambda_malformedForLength_0(Integer arg0) { return CoderResult(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$malformedForLength$0", "(Ljava.lang.Integer;)Ljava.nio.charset.CoderResult;", arg0)); }

    bool isOverflow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOverflow", "()Z", )); }

    bool isError() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isError", "()Z", )); }

    static CoderResult malformedForLength(int arg0) { return CoderResult(*javaClass->invokeStaticMethod<jobject>(this->object, "malformedForLength", "(I)Ljava.nio.charset.CoderResult;", arg0)); }

    bool isMalformed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMalformed", "()Z", )); }

    bool isUnmappable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUnmappable", "()Z", )); }

};


/**
 * Classpath: java.lang.Number
 * Package name: java.lang
 */
class Number : public Object {
protected:
    const inline static char *className = "java.lang.Number";
public:
    STATICINITIALIZE;

    Number(jobject object) : JavaObject(object) {}

    byte byteValue() { return byte(*javaClass->invokeMethod<byte>(this->object, "byteValue", "()B", )); }

    short shortValue() { return short(*javaClass->invokeMethod<short>(this->object, "shortValue", "()S", )); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    long longValue() { return long(*javaClass->invokeMethod<long>(this->object, "longValue", "()J", )); }

    float floatValue() { return float(*javaClass->invokeMethod<float>(this->object, "floatValue", "()F", )); }

    double doubleValue() { return double(*javaClass->invokeMethod<double>(this->object, "doubleValue", "()D", )); }

};


/**
 * Classpath: java.nio.charset.Charset
 * Package name: java.nio.charset
 */
class Charset : public Object {
protected:
    const inline static char *className = "java.nio.charset.Charset";
public:
    STATICINITIALIZE;

    Charset(jobject object) : JavaObject(object) {}

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    static void put(Iterator arg0, Map arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "put", "(Ljava.util.Iterator;Ljava.util.Map;)V", arg0, arg1)); }

    static Charset forName(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "forName", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    static void cache(String arg0, Charset arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "cache", "(Ljava.lang.String;Ljava.nio.charset.Charset;)V", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(Charset arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.charset.Charset;)I", arg0)); }

    CharsetDecoder newDecoder() { return CharsetDecoder(*javaClass->invokeMethod<jobject>(this->object, "newDecoder", "()Ljava.nio.charset.CharsetDecoder;", )); }

    CharBuffer decode(ByteBuffer arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "decode", "(Ljava.nio.ByteBuffer;)Ljava.nio.CharBuffer;", arg0)); }

    CharsetEncoder newEncoder() { return CharsetEncoder(*javaClass->invokeMethod<jobject>(this->object, "newEncoder", "()Ljava.nio.charset.CharsetEncoder;", )); }

    ByteBuffer encode(String arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "encode", "(Ljava.lang.String;)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer encode(CharBuffer arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "encode", "(Ljava.nio.CharBuffer;)Ljava.nio.ByteBuffer;", arg0)); }

    static Charset defaultCharset() { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "defaultCharset", "()Ljava.nio.charset.Charset;", )); }

    bool canEncode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEncode", "()Z", )); }

    bool contains(Charset arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.nio.charset.Charset;)Z", arg0)); }

    static Charset lookup(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "lookup", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    bool isRegistered() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRegistered", "()Z", )); }

    static void checkName(String arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "checkName", "(Ljava.lang.String;)V", arg0)); }

    static Charset lookupViaProviders(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupViaProviders", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    static Iterator providers() { return Iterator(*javaClass->invokeStaticMethod<jobject>(this->object, "providers", "()Ljava.util.Iterator;", )); }

    static Charset lookup2(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "lookup2", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    static Charset lookupExtendedCharset(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupExtendedCharset", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    Set aliases() { return Set(*javaClass->invokeMethod<jobject>(this->object, "aliases", "()Ljava.util.Set;", )); }

    static bool isSupported(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isSupported", "(Ljava.lang.String;)Z", arg0)); }

    static SortedMap availableCharsets() { return SortedMap(*javaClass->invokeStaticMethod<jobject>(this->object, "availableCharsets", "()Ljava.util.SortedMap;", )); }

    String displayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "displayName", "()Ljava.lang.String;", )); }

    String displayName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "displayName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.nio.charset.CharsetDecoder
 * Package name: java.nio.charset
 */
class CharsetDecoder : public Object {
protected:
    const inline static char *className = "java.nio.charset.CharsetDecoder";
public:
    STATICINITIALIZE;

    CharsetDecoder(jobject object) : JavaObject(object) {}

    float maxCharsPerByte() { return float(*javaClass->invokeMethod<float>(this->object, "maxCharsPerByte", "()F", )); }

    CharsetDecoder onMalformedInput(CodingErrorAction arg0) { return CharsetDecoder(*javaClass->invokeMethod<jobject>(this->object, "onMalformedInput", "(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetDecoder;", arg0)); }

    CharsetDecoder onUnmappableCharacter(CodingErrorAction arg0) { return CharsetDecoder(*javaClass->invokeMethod<jobject>(this->object, "onUnmappableCharacter", "(Ljava.nio.charset.CodingErrorAction;)Ljava.nio.charset.CharsetDecoder;", arg0)); }

    CharBuffer decode(ByteBuffer arg0) { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "decode", "(Ljava.nio.ByteBuffer;)Ljava.nio.CharBuffer;", arg0)); }

    CoderResult decode(ByteBuffer arg0, CharBuffer arg1, bool arg2) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "decode", "(Ljava.nio.ByteBuffer;Ljava.nio.CharBuffer;Z)Ljava.nio.charset.CoderResult;", arg0, arg1, arg2)); }

    CoderResult flush(CharBuffer arg0) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "flush", "(Ljava.nio.CharBuffer;)Ljava.nio.charset.CoderResult;", arg0)); }

    Charset charset() { return Charset(*javaClass->invokeMethod<jobject>(this->object, "charset", "()Ljava.nio.charset.Charset;", )); }

    String replacement() { return String(*javaClass->invokeMethod<jobject>(this->object, "replacement", "()Ljava.lang.String;", )); }

    CharsetDecoder reset() { return CharsetDecoder(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.charset.CharsetDecoder;", )); }

    CoderResult decodeLoop(ByteBuffer arg0, CharBuffer arg1) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "decodeLoop", "(Ljava.nio.ByteBuffer;Ljava.nio.CharBuffer;)Ljava.nio.charset.CoderResult;", arg0, arg1)); }

    float averageCharsPerByte() { return float(*javaClass->invokeMethod<float>(this->object, "averageCharsPerByte", "()F", )); }

    bool isAutoDetecting() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAutoDetecting", "()Z", )); }

    bool isCharsetDetected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCharsetDetected", "()Z", )); }

    Charset detectedCharset() { return Charset(*javaClass->invokeMethod<jobject>(this->object, "detectedCharset", "()Ljava.nio.charset.Charset;", )); }

    CoderResult implFlush(CharBuffer arg0) { return CoderResult(*javaClass->invokeMethod<jobject>(this->object, "implFlush", "(Ljava.nio.CharBuffer;)Ljava.nio.charset.CoderResult;", arg0)); }

    CodingErrorAction malformedInputAction() { return CodingErrorAction(*javaClass->invokeMethod<jobject>(this->object, "malformedInputAction", "()Ljava.nio.charset.CodingErrorAction;", )); }

    CodingErrorAction unmappableCharacterAction() { return CodingErrorAction(*javaClass->invokeMethod<jobject>(this->object, "unmappableCharacterAction", "()Ljava.nio.charset.CodingErrorAction;", )); }

    CharsetDecoder replaceWith(String arg0) { return CharsetDecoder(*javaClass->invokeMethod<jobject>(this->object, "replaceWith", "(Ljava.lang.String;)Ljava.nio.charset.CharsetDecoder;", arg0)); }

    void implReplaceWith(String arg0) { (*javaClass->invokeMethod<void>(this->object, "implReplaceWith", "(Ljava.lang.String;)V", arg0)); }

    void implOnMalformedInput(CodingErrorAction arg0) { (*javaClass->invokeMethod<void>(this->object, "implOnMalformedInput", "(Ljava.nio.charset.CodingErrorAction;)V", arg0)); }

    void implOnUnmappableCharacter(CodingErrorAction arg0) { (*javaClass->invokeMethod<void>(this->object, "implOnUnmappableCharacter", "(Ljava.nio.charset.CodingErrorAction;)V", arg0)); }

    void throwIllegalStateException(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "throwIllegalStateException", "(II)V", arg0, arg1)); }

    void implReset() { (*javaClass->invokeMethod<void>(this->object, "implReset", "()V", )); }

};


/**
 * Classpath: java.net.URLStreamHandlerFactory
 * Package name: java.net
 */
class URLStreamHandlerFactory : public JavaObject {
protected:
    const inline static char *className = "java.net.URLStreamHandlerFactory";
public:
    STATICINITIALIZE;

    URLStreamHandlerFactory(jobject object) : JavaObject(object) {}

    URLStreamHandler createURLStreamHandler(String arg0) { return URLStreamHandler(*javaClass->invokeMethod<jobject>(this->object, "createURLStreamHandler", "(Ljava.lang.String;)Ljava.net.URLStreamHandler;", arg0)); }

};


/**
 * Classpath: jdk.internal.loader.Loader$LoadedModule
 * Enclosing class: jdk.internal.loader.Loader
 * Package name: jdk.internal.loader
 */
class Loader_LoadedModule : public Object {
protected:
    const inline static char *className = "jdk.internal.loader.Loader$LoadedModule";
public:
    STATICINITIALIZE;

    Loader_LoadedModule(jobject object) : JavaObject(object) {}

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    CodeSource codeSource() { return CodeSource(*javaClass->invokeMethod<jobject>(this->object, "codeSource", "()Ljava.security.CodeSource;", )); }

    URL location() { return URL(*javaClass->invokeMethod<jobject>(this->object, "location", "()Ljava.net.URL;", )); }

    ModuleReference mref() { return ModuleReference(*javaClass->invokeMethod<jobject>(this->object, "mref", "()Ljava.lang.module.ModuleReference;", )); }

};


/**
 * Classpath: java.security.CodeSource
 * Package name: java.security
 */
class CodeSource : public Object {
protected:
    const inline static char *className = "java.security.CodeSource";
public:
    STATICINITIALIZE;

    CodeSource(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    URL getLocation() { return URL(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.net.URL;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool implies(CodeSource arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "implies", "(Ljava.security.CodeSource;)Z", arg0)); }

    bool matchCerts(CodeSource arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "matchCerts", "(Ljava.security.CodeSource;Z)Z", arg0, arg1)); }

    bool matchLocation(CodeSource arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "matchLocation", "(Ljava.security.CodeSource;)Z", arg0)); }

    String getLocationNoFragString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLocationNoFragString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.lang.Error
 * Package name: java.lang
 */
class Error : public Throwable {
protected:
    const inline static char *className = "java.lang.Error";
public:
    STATICINITIALIZE;

    Error(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.loader.LoaderPool
 * Package name: jdk.internal.loader
 */
class LoaderPool : public Object {
protected:
    const inline static char *className = "jdk.internal.loader.LoaderPool";
public:
    STATICINITIALIZE;

    LoaderPool(jobject object) : JavaObject(object) {}

    static void lambda_new_0(Configuration arg0, List arg1, Loader arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "lambda$new$0", "(Ljava.lang.module.Configuration;Ljava.util.List;Ljdk.internal.loader.Loader;)V", arg0, arg1, arg2)); }

    Stream loaders() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "loaders", "()Ljava.util.stream.Stream;", )); }

    Loader loaderFor(String arg0) { return Loader(*javaClass->invokeMethod<jobject>(this->object, "loaderFor", "(Ljava.lang.String;)Ljdk.internal.loader.Loader;", arg0)); }

};


/**
 * Classpath: java.security.SecureClassLoader
 * Package name: java.security
 */
class SecureClassLoader : public ClassLoader {
protected:
    const inline static char *className = "java.security.SecureClassLoader";
public:
    STATICINITIALIZE;

    SecureClassLoader(jobject object) : JavaObject(object) {}

    ProtectionDomain getProtectionDomain(CodeSource arg0) { return ProtectionDomain(*javaClass->invokeMethod<jobject>(this->object, "getProtectionDomain", "(Ljava.security.CodeSource;)Ljava.security.ProtectionDomain;", arg0)); }

    Class defineClass(String arg0, ByteBuffer arg1, CodeSource arg2) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(Ljava.lang.String;Ljava.nio.ByteBuffer;Ljava.security.CodeSource;)Ljava.lang.Class;", arg0, arg1, arg2)); }

    Class defineClass(String arg0, arr_B arg1, int arg2, int arg3, CodeSource arg4) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(Ljava.lang.String;[BIILjava.security.CodeSource;)Ljava.lang.Class;", arg0, arg1, arg2, arg3, arg4)); }

    void resetArchivedStates() { (*javaClass->invokeMethod<void>(this->object, "resetArchivedStates", "()V", )); }

    PermissionCollection getPermissions(CodeSource arg0) { return PermissionCollection(*javaClass->invokeMethod<jobject>(this->object, "getPermissions", "(Ljava.security.CodeSource;)Ljava.security.PermissionCollection;", arg0)); }

};


/**
 * Classpath: java.security.ProtectionDomain
 * Package name: java.security
 */
class ProtectionDomain : public Object {
protected:
    const inline static char *className = "java.security.ProtectionDomain";
public:
    STATICINITIALIZE;

    ProtectionDomain(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    ClassLoader getClassLoader() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava.lang.ClassLoader;", )); }

    CodeSource getCodeSource() { return CodeSource(*javaClass->invokeMethod<jobject>(this->object, "getCodeSource", "()Ljava.security.CodeSource;", )); }

    bool implies(Permission arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "implies", "(Ljava.security.Permission;)Z", arg0)); }

    static bool seeAllp() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "seeAllp", "()Z", )); }

    PermissionCollection mergePermissions() { return PermissionCollection(*javaClass->invokeMethod<jobject>(this->object, "mergePermissions", "()Ljava.security.PermissionCollection;", )); }

    PermissionCollection getPermissions() { return PermissionCollection(*javaClass->invokeMethod<jobject>(this->object, "getPermissions", "()Ljava.security.PermissionCollection;", )); }

    bool staticPermissionsOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "staticPermissionsOnly", "()Z", )); }

    bool impliesWithAltFilePerm(Permission arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "impliesWithAltFilePerm", "(Ljava.security.Permission;)Z", arg0)); }

};


/**
 * Classpath: java.lang.NamedPackage
 * Package name: java.lang
 */
class NamedPackage : public Object {
protected:
    const inline static char *className = "java.lang.NamedPackage";
public:
    STATICINITIALIZE;

    NamedPackage(jobject object) : JavaObject(object) {}

    Module module() { return Module(*javaClass->invokeMethod<jobject>(this->object, "module", "()Ljava.lang.Module;", )); }

    String packageName() { return String(*javaClass->invokeMethod<jobject>(this->object, "packageName", "()Ljava.lang.String;", )); }

    static Package toPackage(String arg0, Module arg1) { return Package(*javaClass->invokeStaticMethod<jobject>(this->object, "toPackage", "(Ljava.lang.String;Ljava.lang.Module;)Ljava.lang.Package;", arg0, arg1)); }

    URI location() { return URI(*javaClass->invokeMethod<jobject>(this->object, "location", "()Ljava.net.URI;", )); }

};


/**
 * Classpath: [Ljava.security.cert.Certificate;
 */
class Certificate_interface : public Object {
protected:
    const inline static char *className = "[Ljava.security.cert.Certificate;";
public:
    STATICINITIALIZE;

    Certificate_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.loader.NativeLibrary
 * Package name: jdk.internal.loader
 */
class NativeLibrary : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.loader.NativeLibrary";
public:
    STATICINITIALIZE;

    NativeLibrary(jobject object) : JavaObject(object) {}

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    long lookup(String arg0) { return long(*javaClass->invokeMethod<long>(this->object, "lookup", "(Ljava.lang.String;)J", arg0)); }

    long find(String arg0) { return long(*javaClass->invokeMethod<long>(this->object, "find", "(Ljava.lang.String;)J", arg0)); }

};


/**
 * Classpath: java.io.File
 * Package name: java.io
 */
class File : public Object {
protected:
    const inline static char *className = "java.io.File";
public:
    STATICINITIALIZE;

    File(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    long length() { return long(*javaClass->invokeMethod<long>(this->object, "length", "()J", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isHidden() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHidden", "()Z", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(File arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.io.File;)I", arg0)); }

    bool isAbsolute() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAbsolute", "()Z", )); }

    String getParent() { return String(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.lang.String;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool delete() { return bool(*javaClass->invokeMethod<boolean>(this->object, "delete", "()Z", )); }

    bool setReadOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "setReadOnly", "()Z", )); }

    bool canRead() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRead", "()Z", )); }

    String getPath() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPath", "()Ljava.lang.String;", )); }

    URI toURI() { return URI(*javaClass->invokeMethod<jobject>(this->object, "toURI", "()Ljava.net.URI;", )); }

    URL toURL() { return URL(*javaClass->invokeMethod<jobject>(this->object, "toURL", "()Ljava.net.URL;", )); }

    bool exists() { return bool(*javaClass->invokeMethod<boolean>(this->object, "exists", "()Z", )); }

    bool createNewFile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "createNewFile", "()Z", )); }

    bool renameTo(File arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renameTo", "(Ljava.io.File;)Z", arg0)); }

    String getAbsolutePath() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAbsolutePath", "()Ljava.lang.String;", )); }

    String getCanonicalPath() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalPath", "()Ljava.lang.String;", )); }

    bool isDirectory() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirectory", "()Z", )); }

    static String slashify(String arg0, bool arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "slashify", "(Ljava.lang.String;Z)Ljava.lang.String;", arg0, arg1)); }

    File getAbsoluteFile() { return File(*javaClass->invokeMethod<jobject>(this->object, "getAbsoluteFile", "()Ljava.io.File;", )); }

    bool mkdir() { return bool(*javaClass->invokeMethod<boolean>(this->object, "mkdir", "()Z", )); }

    File getCanonicalFile() { return File(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalFile", "()Ljava.io.File;", )); }

    File getParentFile() { return File(*javaClass->invokeMethod<jobject>(this->object, "getParentFile", "()Ljava.io.File;", )); }

    bool mkdirs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "mkdirs", "()Z", )); }

    bool setWritable(bool arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setWritable", "(ZZ)Z", arg0, arg1)); }

    bool setWritable(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setWritable", "(Z)Z", arg0)); }

    bool setReadable(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setReadable", "(Z)Z", arg0)); }

    bool setReadable(bool arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setReadable", "(ZZ)Z", arg0, arg1)); }

    bool setExecutable(bool arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setExecutable", "(ZZ)Z", arg0, arg1)); }

    bool setExecutable(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setExecutable", "(Z)Z", arg0)); }

    static File createTempFile(String arg0, String arg1) { return File(*javaClass->invokeStaticMethod<jobject>(this->object, "createTempFile", "(Ljava.lang.String;Ljava.lang.String;)Ljava.io.File;", arg0, arg1)); }

    static File createTempFile(String arg0, String arg1, File arg2) { return File(*javaClass->invokeStaticMethod<jobject>(this->object, "createTempFile", "(Ljava.lang.String;Ljava.lang.String;Ljava.io.File;)Ljava.io.File;", arg0, arg1, arg2)); }

    int getPrefixLength() { return int(*javaClass->invokeMethod<int>(this->object, "getPrefixLength", "()I", )); }

    bool canWrite() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canWrite", "()Z", )); }

    bool isFile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFile", "()Z", )); }

    long lastModified() { return long(*javaClass->invokeMethod<long>(this->object, "lastModified", "()J", )); }

    void deleteOnExit() { (*javaClass->invokeMethod<void>(this->object, "deleteOnExit", "()V", )); }

    bool setLastModified(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setLastModified", "(J)Z", arg0)); }

    bool canExecute() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canExecute", "()Z", )); }

    long getTotalSpace() { return long(*javaClass->invokeMethod<long>(this->object, "getTotalSpace", "()J", )); }

    long getFreeSpace() { return long(*javaClass->invokeMethod<long>(this->object, "getFreeSpace", "()J", )); }

    long getUsableSpace() { return long(*javaClass->invokeMethod<long>(this->object, "getUsableSpace", "()J", )); }

    Path toPath() { return Path(*javaClass->invokeMethod<jobject>(this->object, "toPath", "()Ljava.nio.file.Path;", )); }

    bool isInvalid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvalid", "()Z", )); }

};


/**
 * Classpath: java.nio.file.Path
 * Package name: java.nio.file
 */
class Path : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.Path";
public:
    STATICINITIALIZE;

    Path(jobject object) : JavaObject(object) {}

    Path getName(int arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "getName", "(I)Ljava.nio.file.Path;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Path arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.file.Path;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    bool startsWith(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "startsWith", "(Ljava.lang.String;)Z", arg0)); }

    bool startsWith(Path arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "startsWith", "(Ljava.nio.file.Path;)Z", arg0)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    static Path of(String arg0, String_interface arg1) { return Path(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;[Ljava.lang.String;)Ljava.nio.file.Path;", arg0, arg1)); }

    static Path of(URI arg0) { return Path(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.net.URI;)Ljava.nio.file.Path;", arg0)); }

    bool endsWith(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "endsWith", "(Ljava.lang.String;)Z", arg0)); }

    bool endsWith(Path arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "endsWith", "(Ljava.nio.file.Path;)Z", arg0)); }

    WatchKey register(WatchService arg0, WatchEvent_Kind_interface arg1) { return WatchKey(*javaClass->invokeMethod<jobject>(this->object, "register", "(Ljava.nio.file.WatchService;[Ljava.nio.file.WatchEvent$Kind;)Ljava.nio.file.WatchKey;", arg0, arg1)); }

    WatchKey register(WatchService arg0, WatchEvent_Kind_interface arg1, WatchEvent_Modifier_interface arg2) { return WatchKey(*javaClass->invokeMethod<jobject>(this->object, "register", "(Ljava.nio.file.WatchService;[Ljava.nio.file.WatchEvent$Kind;[Ljava.nio.file.WatchEvent$Modifier;)Ljava.nio.file.WatchKey;", arg0, arg1, arg2)); }

    bool isAbsolute() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAbsolute", "()Z", )); }

    Path resolve(Path arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(Ljava.nio.file.Path;)Ljava.nio.file.Path;", arg0)); }

    Path resolve(String arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(Ljava.lang.String;)Ljava.nio.file.Path;", arg0)); }

    Path getParent() { return Path(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.nio.file.Path;", )); }

    Path getRoot() { return Path(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.nio.file.Path;", )); }

    Path normalize() { return Path(*javaClass->invokeMethod<jobject>(this->object, "normalize", "()Ljava.nio.file.Path;", )); }

    Path toRealPath(LinkOption_interface arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "toRealPath", "([Ljava.nio.file.LinkOption;)Ljava.nio.file.Path;", arg0)); }

    File toFile() { return File(*javaClass->invokeMethod<jobject>(this->object, "toFile", "()Ljava.io.File;", )); }

    Path getFileName() { return Path(*javaClass->invokeMethod<jobject>(this->object, "getFileName", "()Ljava.nio.file.Path;", )); }

    FileSystem getFileSystem() { return FileSystem(*javaClass->invokeMethod<jobject>(this->object, "getFileSystem", "()Ljava.nio.file.FileSystem;", )); }

    Path relativize(Path arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "relativize", "(Ljava.nio.file.Path;)Ljava.nio.file.Path;", arg0)); }

    int getNameCount() { return int(*javaClass->invokeMethod<int>(this->object, "getNameCount", "()I", )); }

    Path subpath(int arg0, int arg1) { return Path(*javaClass->invokeMethod<jobject>(this->object, "subpath", "(II)Ljava.nio.file.Path;", arg0, arg1)); }

    Path toAbsolutePath() { return Path(*javaClass->invokeMethod<jobject>(this->object, "toAbsolutePath", "()Ljava.nio.file.Path;", )); }

    URI toUri() { return URI(*javaClass->invokeMethod<jobject>(this->object, "toUri", "()Ljava.net.URI;", )); }

    Path resolveSibling(Path arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "resolveSibling", "(Ljava.nio.file.Path;)Ljava.nio.file.Path;", arg0)); }

    Path resolveSibling(String arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "resolveSibling", "(Ljava.lang.String;)Ljava.nio.file.Path;", arg0)); }

};


/**
 * Classpath: java.nio.file.WatchService
 * Package name: java.nio.file
 */
class WatchService : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.WatchService";
public:
    STATICINITIALIZE;

    WatchService(jobject object) : JavaObject(object) {}

    WatchKey poll(long arg0, TimeUnit arg1) { return WatchKey(*javaClass->invokeMethod<jobject>(this->object, "poll", "(JLjava.util.concurrent.TimeUnit;)Ljava.nio.file.WatchKey;", arg0, arg1)); }

    WatchKey poll() { return WatchKey(*javaClass->invokeMethod<jobject>(this->object, "poll", "()Ljava.nio.file.WatchKey;", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    WatchKey take() { return WatchKey(*javaClass->invokeMethod<jobject>(this->object, "take", "()Ljava.nio.file.WatchKey;", )); }

};


/**
 * Classpath: java.util.concurrent.TimeUnit
 * Package name: java.util.concurrent
 */
class TimeUnit : public Enum {
protected:
    const inline static char *className = "java.util.concurrent.TimeUnit";
public:
    STATICINITIALIZE;

    TimeUnit(jobject object) : JavaObject(object) {}

    long convert(Duration arg0) { return long(*javaClass->invokeMethod<long>(this->object, "convert", "(Ljava.time.Duration;)J", arg0)); }

    long convert(long arg0, TimeUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "convert", "(JLjava.util.concurrent.TimeUnit;)J", arg0, arg1)); }

    static TimeUnit valueOf(String arg0) { return TimeUnit(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.util.concurrent.TimeUnit;", arg0)); }

    static TimeUnit of(ChronoUnit arg0) { return TimeUnit(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.temporal.ChronoUnit;)Ljava.util.concurrent.TimeUnit;", arg0)); }

    void sleep(long arg0) { (*javaClass->invokeMethod<void>(this->object, "sleep", "(J)V", arg0)); }

    long toMillis(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toMillis", "(J)J", arg0)); }

    long toMicros(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toMicros", "(J)J", arg0)); }

    long toSeconds(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toSeconds", "(J)J", arg0)); }

    static long cvt(long arg0, long arg1, long arg2) { return long(*javaClass->invokeStaticMethod<long>(this->object, "cvt", "(JJJ)J", arg0, arg1, arg2)); }

    int excessNanos(long arg0, long arg1) { return int(*javaClass->invokeMethod<int>(this->object, "excessNanos", "(JJ)I", arg0, arg1)); }

    long toMinutes(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toMinutes", "(J)J", arg0)); }

    long toHours(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toHours", "(J)J", arg0)); }

    long toDays(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toDays", "(J)J", arg0)); }

    void timedWait(Object arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "timedWait", "(Ljava.lang.Object;J)V", arg0, arg1)); }

    void timedJoin(Thread arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "timedJoin", "(Ljava.lang.Thread;J)V", arg0, arg1)); }

    ChronoUnit toChronoUnit() { return ChronoUnit(*javaClass->invokeMethod<jobject>(this->object, "toChronoUnit", "()Ljava.time.temporal.ChronoUnit;", )); }

    long toNanos(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toNanos", "(J)J", arg0)); }

};


/**
 * Classpath: java.time.Duration
 * Package name: java.time
 */
class Duration : public Object {
protected:
    const inline static char *className = "java.time.Duration";
public:
    STATICINITIALIZE;

    Duration(jobject object) : JavaObject(object) {}

    long get(TemporalUnit arg0) { return long(*javaClass->invokeMethod<long>(this->object, "get", "(Ljava.time.temporal.TemporalUnit;)J", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Duration abs() { return Duration(*javaClass->invokeMethod<jobject>(this->object, "abs", "()Ljava.time.Duration;", )); }

    int compareTo(Duration arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.Duration;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static Duration of(long arg0, TemporalUnit arg1) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.Duration;", arg0, arg1)); }

    static Duration from(TemporalAmount arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.Duration;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    long toMillis() { return long(*javaClass->invokeMethod<long>(this->object, "toMillis", "()J", )); }

    static Duration create(BigDecimal arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(Ljava.math.BigDecimal;)Ljava.time.Duration;", arg0)); }

    static Duration create(long arg0, int arg1) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(JI)Ljava.time.Duration;", arg0, arg1)); }

    static Duration create(bool arg0, long arg1, long arg2, long arg3, long arg4, int arg5) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(ZJJJJI)Ljava.time.Duration;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    long toSeconds() { return long(*javaClass->invokeMethod<long>(this->object, "toSeconds", "()J", )); }

    long getSeconds() { return long(*javaClass->invokeMethod<long>(this->object, "getSeconds", "()J", )); }

    int getNano() { return int(*javaClass->invokeMethod<int>(this->object, "getNano", "()I", )); }

    long toMinutes() { return long(*javaClass->invokeMethod<long>(this->object, "toMinutes", "()J", )); }

    long toHours() { return long(*javaClass->invokeMethod<long>(this->object, "toHours", "()J", )); }

    long toDays() { return long(*javaClass->invokeMethod<long>(this->object, "toDays", "()J", )); }

    long toNanos() { return long(*javaClass->invokeMethod<long>(this->object, "toNanos", "()J", )); }

    Duration plus(long arg0, long arg1) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JJ)Ljava.time.Duration;", arg0, arg1)); }

    Duration plus(long arg0, TemporalUnit arg1) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.Duration;", arg0, arg1)); }

    Duration plus(Duration arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.Duration;)Ljava.time.Duration;", arg0)); }

    List getUnits() { return List(*javaClass->invokeMethod<jobject>(this->object, "getUnits", "()Ljava.util.List;", )); }

    static bool charMatch(CharSequence arg0, int arg1, int arg2, char arg3) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "charMatch", "(Ljava.lang.CharSequence;IIC)Z", arg0, arg1, arg2, arg3)); }

    static long parseNumber(CharSequence arg0, int arg1, int arg2, int arg3, String arg4) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseNumber", "(Ljava.lang.CharSequence;IIILjava.lang.String;)J", arg0, arg1, arg2, arg3, arg4)); }

    static int parseFraction(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseFraction", "(Ljava.lang.CharSequence;III)I", arg0, arg1, arg2, arg3)); }

    static Duration ofSeconds(long arg0, long arg1) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "ofSeconds", "(JJ)Ljava.time.Duration;", arg0, arg1)); }

    static Duration ofSeconds(long arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "ofSeconds", "(J)Ljava.time.Duration;", arg0)); }

    Duration negated() { return Duration(*javaClass->invokeMethod<jobject>(this->object, "negated", "()Ljava.time.Duration;", )); }

    static Duration ofNanos(long arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "ofNanos", "(J)Ljava.time.Duration;", arg0)); }

    Duration plusNanos(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava.time.Duration;", arg0)); }

    Duration plusSeconds(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava.time.Duration;", arg0)); }

    Duration plusMillis(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plusMillis", "(J)Ljava.time.Duration;", arg0)); }

    Duration multipliedBy(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "multipliedBy", "(J)Ljava.time.Duration;", arg0)); }

    Duration plusDays(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava.time.Duration;", arg0)); }

    Duration plusHours(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava.time.Duration;", arg0)); }

    Duration plusMinutes(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava.time.Duration;", arg0)); }

    BigDecimal toBigDecimalSeconds() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "toBigDecimalSeconds", "()Ljava.math.BigDecimal;", )); }

    bool isNegative() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNegative", "()Z", )); }

    Duration minus(Duration arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.Duration;)Ljava.time.Duration;", arg0)); }

    Duration minus(long arg0, TemporalUnit arg1) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.Duration;", arg0, arg1)); }

    static Duration ofDays(long arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "ofDays", "(J)Ljava.time.Duration;", arg0)); }

    static Duration ofHours(long arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "ofHours", "(J)Ljava.time.Duration;", arg0)); }

    static Duration ofMinutes(long arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "ofMinutes", "(J)Ljava.time.Duration;", arg0)); }

    static Duration ofMillis(long arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "ofMillis", "(J)Ljava.time.Duration;", arg0)); }

    static Duration readExternal(DataInput arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.Duration;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    static Duration parse(CharSequence arg0) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.Duration;", arg0)); }

    static Duration between(Temporal arg0, Temporal arg1) { return Duration(*javaClass->invokeStaticMethod<jobject>(this->object, "between", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.Temporal;)Ljava.time.Duration;", arg0, arg1)); }

    bool isZero() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isZero", "()Z", )); }

    Duration withSeconds(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "withSeconds", "(J)Ljava.time.Duration;", arg0)); }

    Duration withNanos(int arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "withNanos", "(I)Ljava.time.Duration;", arg0)); }

    Duration minusDays(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava.time.Duration;", arg0)); }

    Duration minusHours(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava.time.Duration;", arg0)); }

    Duration minusMinutes(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava.time.Duration;", arg0)); }

    Duration minusSeconds(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava.time.Duration;", arg0)); }

    Duration minusMillis(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minusMillis", "(J)Ljava.time.Duration;", arg0)); }

    Duration minusNanos(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava.time.Duration;", arg0)); }

    long dividedBy(Duration arg0) { return long(*javaClass->invokeMethod<long>(this->object, "dividedBy", "(Ljava.time.Duration;)J", arg0)); }

    Duration dividedBy(long arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "dividedBy", "(J)Ljava.time.Duration;", arg0)); }

    Temporal addTo(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "addTo", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal subtractFrom(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "subtractFrom", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    long toDaysPart() { return long(*javaClass->invokeMethod<long>(this->object, "toDaysPart", "()J", )); }

    int toHoursPart() { return int(*javaClass->invokeMethod<int>(this->object, "toHoursPart", "()I", )); }

    int toMinutesPart() { return int(*javaClass->invokeMethod<int>(this->object, "toMinutesPart", "()I", )); }

    int toSecondsPart() { return int(*javaClass->invokeMethod<int>(this->object, "toSecondsPart", "()I", )); }

    int toMillisPart() { return int(*javaClass->invokeMethod<int>(this->object, "toMillisPart", "()I", )); }

    int toNanosPart() { return int(*javaClass->invokeMethod<int>(this->object, "toNanosPart", "()I", )); }

    Duration truncatedTo(TemporalUnit arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava.time.temporal.TemporalUnit;)Ljava.time.Duration;", arg0)); }

};


/**
 * Classpath: java.time.temporal.TemporalUnit
 * Package name: java.time.temporal
 */
class TemporalUnit : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalUnit";
public:
    STATICINITIALIZE;

    TemporalUnit(jobject object) : JavaObject(object) {}

    Duration getDuration() { return Duration(*javaClass->invokeMethod<jobject>(this->object, "getDuration", "()Ljava.time.Duration;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool isDurationEstimated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDurationEstimated", "()Z", )); }

    long between(Temporal arg0, Temporal arg1) { return long(*javaClass->invokeMethod<long>(this->object, "between", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.Temporal;)J", arg0, arg1)); }

    Temporal addTo(Temporal arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "addTo", "(Ljava.time.temporal.Temporal;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    bool isDateBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDateBased", "()Z", )); }

    bool isTimeBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTimeBased", "()Z", )); }

    bool isSupportedBy(Temporal arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupportedBy", "(Ljava.time.temporal.Temporal;)Z", arg0)); }

};


/**
 * Classpath: java.time.temporal.Temporal
 * Package name: java.time.temporal
 */
class Temporal : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.Temporal";
public:
    STATICINITIALIZE;

    Temporal(jobject object) : JavaObject(object) {}

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

};


/**
 * Classpath: java.time.temporal.TemporalAmount
 * Package name: java.time.temporal
 */
class TemporalAmount : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalAmount";
public:
    STATICINITIALIZE;

    TemporalAmount(jobject object) : JavaObject(object) {}

    long get(TemporalUnit arg0) { return long(*javaClass->invokeMethod<long>(this->object, "get", "(Ljava.time.temporal.TemporalUnit;)J", arg0)); }

    List getUnits() { return List(*javaClass->invokeMethod<jobject>(this->object, "getUnits", "()Ljava.util.List;", )); }

    Temporal addTo(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "addTo", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal subtractFrom(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "subtractFrom", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.temporal.TemporalAdjuster
 * Package name: java.time.temporal
 */
class TemporalAdjuster : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalAdjuster";
public:
    STATICINITIALIZE;

    TemporalAdjuster(jobject object) : JavaObject(object) {}

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.temporal.TemporalField
 * Package name: java.time.temporal
 */
class TemporalField : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalField";
public:
    STATICINITIALIZE;

    TemporalField(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    TemporalAccessor resolve(Map arg0, TemporalAccessor arg1, ResolverStyle arg2) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(Ljava.util.Map;Ljava.time.temporal.TemporalAccessor;Ljava.time.format.ResolverStyle;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1, arg2)); }

    ValueRange range() { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "()Ljava.time.temporal.ValueRange;", )); }

    String getDisplayName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    bool isDateBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDateBased", "()Z", )); }

    bool isTimeBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTimeBased", "()Z", )); }

    bool isSupportedBy(TemporalAccessor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupportedBy", "(Ljava.time.temporal.TemporalAccessor;)Z", arg0)); }

    Temporal adjustInto(Temporal arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ValueRange rangeRefinedBy(TemporalAccessor arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "rangeRefinedBy", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.temporal.ValueRange;", arg0)); }

    TemporalUnit getBaseUnit() { return TemporalUnit(*javaClass->invokeMethod<jobject>(this->object, "getBaseUnit", "()Ljava.time.temporal.TemporalUnit;", )); }

    TemporalUnit getRangeUnit() { return TemporalUnit(*javaClass->invokeMethod<jobject>(this->object, "getRangeUnit", "()Ljava.time.temporal.TemporalUnit;", )); }

    long getFrom(TemporalAccessor arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getFrom", "(Ljava.time.temporal.TemporalAccessor;)J", arg0)); }

};


/**
 * Classpath: java.time.temporal.TemporalAccessor
 * Package name: java.time.temporal
 */
class TemporalAccessor : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalAccessor";
public:
    STATICINITIALIZE;

    TemporalAccessor(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

};


/**
 * Classpath: java.time.temporal.TemporalQuery
 * Package name: java.time.temporal
 */
class TemporalQuery : public JavaObject {
protected:
    const inline static char *className = "java.time.temporal.TemporalQuery";
public:
    STATICINITIALIZE;

    TemporalQuery(jobject object) : JavaObject(object) {}

    Object queryFrom(TemporalAccessor arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "queryFrom", "(Ljava.time.temporal.TemporalAccessor;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.time.temporal.ValueRange
 * Package name: java.time.temporal
 */
class ValueRange : public Object {
protected:
    const inline static char *className = "java.time.temporal.ValueRange";
public:
    STATICINITIALIZE;

    ValueRange(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ValueRange of(long arg0, long arg1) { return ValueRange(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(JJ)Ljava.time.temporal.ValueRange;", arg0, arg1)); }

    static ValueRange of(long arg0, long arg1, long arg2, long arg3) { return ValueRange(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(JJJJ)Ljava.time.temporal.ValueRange;", arg0, arg1, arg2, arg3)); }

    static ValueRange of(long arg0, long arg1, long arg2) { return ValueRange(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(JJJ)Ljava.time.temporal.ValueRange;", arg0, arg1, arg2)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    long getMinimum() { return long(*javaClass->invokeMethod<long>(this->object, "getMinimum", "()J", )); }

    long getMaximum() { return long(*javaClass->invokeMethod<long>(this->object, "getMaximum", "()J", )); }

    int checkValidIntValue(long arg0, TemporalField arg1) { return int(*javaClass->invokeMethod<int>(this->object, "checkValidIntValue", "(JLjava.time.temporal.TemporalField;)I", arg0, arg1)); }

    bool isIntValue() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isIntValue", "()Z", )); }

    bool isValidValue(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidValue", "(J)Z", arg0)); }

    String genInvalidFieldMessage(TemporalField arg0, long arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "genInvalidFieldMessage", "(Ljava.time.temporal.TemporalField;J)Ljava.lang.String;", arg0, arg1)); }

    bool isValidIntValue(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidIntValue", "(J)Z", arg0)); }

    bool isFixed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFixed", "()Z", )); }

    long getLargestMinimum() { return long(*javaClass->invokeMethod<long>(this->object, "getLargestMinimum", "()J", )); }

    long getSmallestMaximum() { return long(*javaClass->invokeMethod<long>(this->object, "getSmallestMaximum", "()J", )); }

    long checkValidValue(long arg0, TemporalField arg1) { return long(*javaClass->invokeMethod<long>(this->object, "checkValidValue", "(JLjava.time.temporal.TemporalField;)J", arg0, arg1)); }

};


/**
 * Classpath: java.time.format.ResolverStyle
 * Package name: java.time.format
 */
class ResolverStyle : public Enum {
protected:
    const inline static char *className = "java.time.format.ResolverStyle";
public:
    STATICINITIALIZE;

    ResolverStyle(jobject object) : JavaObject(object) {}

    static ResolverStyle valueOf(String arg0) { return ResolverStyle(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.format.ResolverStyle;", arg0)); }

};


/**
 * Classpath: java.math.BigDecimal
 * Package name: java.math
 */
class BigDecimal : public Number {
protected:
    const inline static char *className = "java.math.BigDecimal";
public:
    STATICINITIALIZE;

    BigDecimal(jobject object) : JavaObject(object) {}

    static BigDecimal add(BigInteger arg0, int arg1, BigInteger arg2, int arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "add", "(Ljava.math.BigInteger;ILjava.math.BigInteger;I)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    static BigDecimal add(long arg0, int arg1, BigInteger arg2, int arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "add", "(JILjava.math.BigInteger;I)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    BigDecimal add(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal add(BigDecimal arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    static BigDecimal add(long arg0, int arg1, long arg2, int arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "add", "(JIJI)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    static BigDecimal add(long arg0, long arg1, int arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "add", "(JJI)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static long add(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "add", "(JJ)J", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    BigDecimal abs() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "abs", "()Ljava.math.BigDecimal;", )); }

    BigDecimal abs(MathContext arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "abs", "(Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal sqrt(MathContext arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "sqrt", "(Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal pow(int arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "pow", "(I)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal pow(int arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "pow", "(ILjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    BigDecimal min(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "min", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal max(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "max", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    int signum() { return int(*javaClass->invokeMethod<int>(this->object, "signum", "()I", )); }

    int compareTo(BigDecimal arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.math.BigDecimal;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    long longValue() { return long(*javaClass->invokeMethod<long>(this->object, "longValue", "()J", )); }

    float floatValue() { return float(*javaClass->invokeMethod<float>(this->object, "floatValue", "()F", )); }

    double doubleValue() { return double(*javaClass->invokeMethod<double>(this->object, "doubleValue", "()D", )); }

    static BigDecimal valueOf(long arg0, int arg1, int arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(JII)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal valueOf(long arg0) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(J)Ljava.math.BigDecimal;", arg0)); }

    static BigDecimal valueOf(long arg0, int arg1) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(JI)Ljava.math.BigDecimal;", arg0, arg1)); }

    static BigDecimal valueOf(BigInteger arg0, int arg1, int arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.math.BigInteger;II)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal valueOf(double arg0) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(D)Ljava.math.BigDecimal;", arg0)); }

    int scale() { return int(*javaClass->invokeMethod<int>(this->object, "scale", "()I", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    static void print(String arg0, BigDecimal arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "print", "(Ljava.lang.String;Ljava.math.BigDecimal;)V", arg0, arg1)); }

    BigDecimal negate() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "negate", "()Ljava.math.BigDecimal;", )); }

    BigDecimal negate(MathContext arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "negate", "(Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal multiply(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "multiply", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal multiply(BigDecimal arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "multiply", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    static long multiply(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "multiply", "(JJ)J", arg0, arg1)); }

    static BigDecimal multiply(long arg0, BigInteger arg1, int arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "multiply", "(JLjava.math.BigInteger;I)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal multiply(BigInteger arg0, BigInteger arg1, int arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "multiply", "(Ljava.math.BigInteger;Ljava.math.BigInteger;I)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal multiply(long arg0, long arg1, int arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "multiply", "(JJI)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    BigDecimal round(MathContext arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "round", "(Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal ulp() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "ulp", "()Ljava.math.BigDecimal;", )); }

    BigDecimal plus(MathContext arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal plus() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "plus", "()Ljava.math.BigDecimal;", )); }

    static BigDecimal divide(BigInteger arg0, int arg1, BigInteger arg2, int arg3, int arg4, int arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(Ljava.math.BigInteger;ILjava.math.BigInteger;III)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static BigDecimal divide(BigInteger arg0, int arg1, long arg2, int arg3, int arg4, int arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(Ljava.math.BigInteger;IJIII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static BigDecimal divide(long arg0, int arg1, BigInteger arg2, int arg3, int arg4, int arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(JILjava.math.BigInteger;III)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static BigDecimal divide(BigInteger arg0, int arg1, BigInteger arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(Ljava.math.BigInteger;ILjava.math.BigInteger;IJLjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static BigDecimal divide(long arg0, int arg1, long arg2, int arg3, int arg4, int arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(JIJIII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    BigDecimal divide(BigDecimal arg0, int arg1, RoundingMode arg2) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.BigDecimal;ILjava.math.RoundingMode;)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    BigDecimal divide(BigDecimal arg0, int arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.BigDecimal;I)Ljava.math.BigDecimal;", arg0, arg1)); }

    BigDecimal divide(BigDecimal arg0, RoundingMode arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.BigDecimal;Ljava.math.RoundingMode;)Ljava.math.BigDecimal;", arg0, arg1)); }

    BigDecimal divide(BigDecimal arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    BigDecimal divide(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal divide(BigDecimal arg0, int arg1, int arg2) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.BigDecimal;II)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal divide(long arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(JIJIJLjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static BigDecimal divide(BigInteger arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(Ljava.math.BigInteger;IJIJLjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static BigDecimal divide(long arg0, int arg1, BigInteger arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divide", "(JILjava.math.BigInteger;IJLjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    BigDecimal divideToIntegralValue(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divideToIntegralValue", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal divideToIntegralValue(BigDecimal arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "divideToIntegralValue", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    long longValueExact() { return long(*javaClass->invokeMethod<long>(this->object, "longValueExact", "()J", )); }

    BigDecimal movePointRight(int arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "movePointRight", "(I)Ljava.math.BigDecimal;", arg0)); }

    BigInteger toBigIntegerExact() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "toBigIntegerExact", "()Ljava.math.BigInteger;", )); }

    int precision() { return int(*javaClass->invokeMethod<int>(this->object, "precision", "()I", )); }

    static int precision(long arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "precision", "(JJ)I", arg0, arg1)); }

    static long parseExp(arr_C arg0, int arg1, int arg2) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseExp", "([CII)J", arg0, arg1, arg2)); }

    int adjustScale(int arg0, long arg1) { return int(*javaClass->invokeMethod<int>(this->object, "adjustScale", "(IJ)I", arg0, arg1)); }

    static int checkScaleNonZero(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "checkScaleNonZero", "(J)I", arg0)); }

    static BigDecimal divideAndRound(BigInteger arg0, long arg1, int arg2, int arg3, int arg4) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divideAndRound", "(Ljava.math.BigInteger;JIII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }

    static BigInteger divideAndRound(BigInteger arg0, long arg1, int arg2) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "divideAndRound", "(Ljava.math.BigInteger;JI)Ljava.math.BigInteger;", arg0, arg1, arg2)); }

    static long divideAndRound(long arg0, long arg1, int arg2) { return long(*javaClass->invokeStaticMethod<long>(this->object, "divideAndRound", "(JJI)J", arg0, arg1, arg2)); }

    static BigDecimal divideAndRound(long arg0, long arg1, int arg2, int arg3, int arg4) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divideAndRound", "(JJIII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }

    static BigDecimal divideAndRound(BigInteger arg0, BigInteger arg1, int arg2, int arg3, int arg4) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divideAndRound", "(Ljava.math.BigInteger;Ljava.math.BigInteger;III)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }

    static BigInteger divideAndRound(BigInteger arg0, BigInteger arg1, int arg2) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "divideAndRound", "(Ljava.math.BigInteger;Ljava.math.BigInteger;I)Ljava.math.BigInteger;", arg0, arg1, arg2)); }

    static int longDigitLength(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "longDigitLength", "(J)I", arg0)); }

    static long compactValFor(BigInteger arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "compactValFor", "(Ljava.math.BigInteger;)J", arg0)); }

    static BigInteger divideAndRoundByTenPow(BigInteger arg0, int arg1, int arg2) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "divideAndRoundByTenPow", "(Ljava.math.BigInteger;II)Ljava.math.BigInteger;", arg0, arg1, arg2)); }

    static int bigDigitLength(BigInteger arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "bigDigitLength", "(Ljava.math.BigInteger;)I", arg0)); }

    static BigDecimal zeroValueOf(int arg0) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "zeroValueOf", "(I)Ljava.math.BigDecimal;", arg0)); }

    static BigDecimal doRound(BigInteger arg0, int arg1, MathContext arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "doRound", "(Ljava.math.BigInteger;ILjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal doRound(long arg0, int arg1, MathContext arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "doRound", "(JILjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal doRound(BigDecimal arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "doRound", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    static BigDecimal stripZerosToMatchScale(BigInteger arg0, long arg1, int arg2, int arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "stripZerosToMatchScale", "(Ljava.math.BigInteger;JII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    BigDecimal setScale(int arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "setScale", "(I)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal setScale(int arg0, int arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "setScale", "(II)Ljava.math.BigDecimal;", arg0, arg1)); }

    BigDecimal setScale(int arg0, RoundingMode arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "setScale", "(ILjava.math.RoundingMode;)Ljava.math.BigDecimal;", arg0, arg1)); }

    static void matchScale(BigDecimal_interface arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "matchScale", "([Ljava.math.BigDecimal;)V", arg0)); }

    BigInteger inflated() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "inflated", "()Ljava.math.BigInteger;", )); }

    static int checkScale(long arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "checkScale", "(JJ)I", arg0, arg1)); }

    int checkScale(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "checkScale", "(J)I", arg0)); }

    static int checkScale(BigInteger arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "checkScale", "(Ljava.math.BigInteger;J)I", arg0, arg1)); }

    BigDecimal subtract(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "subtract", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal subtract(BigDecimal arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "subtract", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    static BigDecimal multiplyAndRound(long arg0, BigInteger arg1, int arg2, MathContext arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "multiplyAndRound", "(JLjava.math.BigInteger;ILjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    static BigDecimal multiplyAndRound(BigInteger arg0, BigInteger arg1, int arg2, MathContext arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "multiplyAndRound", "(Ljava.math.BigInteger;Ljava.math.BigInteger;ILjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    static BigDecimal multiplyAndRound(long arg0, long arg1, int arg2, MathContext arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "multiplyAndRound", "(JJILjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    static int saturateLong(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "saturateLong", "(J)I", arg0)); }

    int compareMagnitude(BigDecimal arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareMagnitude", "(Ljava.math.BigDecimal;)I", arg0)); }

    BigDecimal stripTrailingZeros() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "stripTrailingZeros", "()Ljava.math.BigDecimal;", )); }

    bool isPowerOfTen() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPowerOfTen", "()Z", )); }

    BigDecimal scaleByPowerOfTen(int arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "scaleByPowerOfTen", "(I)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal square() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "square", "()Ljava.math.BigDecimal;", )); }

    bool squareRootResultAssertions(BigDecimal arg0, MathContext arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "squareRootResultAssertions", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Z", arg0, arg1)); }

    BigInteger unscaledValue() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "unscaledValue", "()Ljava.math.BigInteger;", )); }

    bool squareRootZeroResultAssertions(BigDecimal arg0, MathContext arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "squareRootZeroResultAssertions", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Z", arg0, arg1)); }

    static long longMultiplyPowerTen(long arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "longMultiplyPowerTen", "(JI)J", arg0, arg1)); }

    BigInteger bigMultiplyPowerTen(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "bigMultiplyPowerTen", "(I)Ljava.math.BigInteger;", arg0)); }

    static BigInteger bigMultiplyPowerTen(BigInteger arg0, int arg1) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "bigMultiplyPowerTen", "(Ljava.math.BigInteger;I)Ljava.math.BigInteger;", arg0, arg1)); }

    static BigInteger bigMultiplyPowerTen(long arg0, int arg1) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "bigMultiplyPowerTen", "(JI)Ljava.math.BigInteger;", arg0, arg1)); }

    static BigInteger bigTenToThe(int arg0) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "bigTenToThe", "(I)Ljava.math.BigInteger;", arg0)); }

    static BigDecimal createAndStripZerosToMatchScale(long arg0, int arg1, long arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "createAndStripZerosToMatchScale", "(JIJ)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal createAndStripZerosToMatchScale(BigInteger arg0, int arg1, long arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "createAndStripZerosToMatchScale", "(Ljava.math.BigInteger;IJ)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static int longCompareMagnitude(long arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "longCompareMagnitude", "(JJ)I", arg0, arg1)); }

    String layoutChars(bool arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "layoutChars", "(Z)Ljava.lang.String;", arg0)); }

    String getValueString(int arg0, String arg1, int arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "getValueString", "(ILjava.lang.String;I)Ljava.lang.String;", arg0, arg1, arg2)); }

    bool fractionOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "fractionOnly", "()Z", )); }

    BigInteger toBigInteger() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "toBigInteger", "()Ljava.math.BigInteger;", )); }

    static BigInteger expandBigIntegerTenPowers(int arg0) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "expandBigIntegerTenPowers", "(I)Ljava.math.BigInteger;", arg0)); }

    BigDecimal audit() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "audit", "()Ljava.math.BigDecimal;", )); }

    static bool needIncrement(long arg0, int arg1, int arg2, long arg3, long arg4) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "needIncrement", "(JIIJJ)Z", arg0, arg1, arg2, arg3, arg4)); }

    static bool needIncrement(MutableBigInteger arg0, int arg1, int arg2, MutableBigInteger arg3, MutableBigInteger arg4) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "needIncrement", "(Ljava.math.MutableBigInteger;IILjava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Z", arg0, arg1, arg2, arg3, arg4)); }

    static bool needIncrement(long arg0, int arg1, int arg2, MutableBigInteger arg3, long arg4) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "needIncrement", "(JIILjava.math.MutableBigInteger;J)Z", arg0, arg1, arg2, arg3, arg4)); }

    static bool commonNeedIncrement(int arg0, int arg1, int arg2, bool arg3) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "commonNeedIncrement", "(IIIZ)Z", arg0, arg1, arg2, arg3)); }

    static BigDecimal multiplyDivideAndRound(long arg0, long arg1, long arg2, int arg3, int arg4, int arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "multiplyDivideAndRound", "(JJJIII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static BigDecimal roundedTenPower(int arg0, int arg1, int arg2, int arg3) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "roundedTenPower", "(IIII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3)); }

    static BigDecimal divideSmallFastPath(long arg0, int arg1, long arg2, int arg3, long arg4, MathContext arg5) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divideSmallFastPath", "(JIJIJLjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static int compareMagnitudeNormalized(BigInteger arg0, int arg1, BigInteger arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareMagnitudeNormalized", "(Ljava.math.BigInteger;ILjava.math.BigInteger;I)I", arg0, arg1, arg2, arg3)); }

    static int compareMagnitudeNormalized(long arg0, int arg1, BigInteger arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareMagnitudeNormalized", "(JILjava.math.BigInteger;I)I", arg0, arg1, arg2, arg3)); }

    static int compareMagnitudeNormalized(long arg0, int arg1, long arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareMagnitudeNormalized", "(JIJI)I", arg0, arg1, arg2, arg3)); }

    static long make64(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "make64", "(JJ)J", arg0, arg1)); }

    static BigDecimal divideAndRound128(long arg0, long arg1, long arg2, int arg3, int arg4, int arg5, int arg6) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "divideAndRound128", "(JJJIIII)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static bool unsignedLongCompare(long arg0, long arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "unsignedLongCompare", "(JJ)Z", arg0, arg1)); }

    static long mulsub(long arg0, long arg1, long arg2, long arg3, long arg4) { return long(*javaClass->invokeStaticMethod<long>(this->object, "mulsub", "(JJJJJ)J", arg0, arg1, arg2, arg3, arg4)); }

    static BigDecimal scaledTenPow(int arg0, int arg1, int arg2) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "scaledTenPow", "(III)Ljava.math.BigDecimal;", arg0, arg1, arg2)); }

    static BigDecimal doRound128(long arg0, long arg1, int arg2, int arg3, MathContext arg4) { return BigDecimal(*javaClass->invokeStaticMethod<jobject>(this->object, "doRound128", "(JJIILjava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1, arg2, arg3, arg4)); }

    static bool unsignedLongCompareEq(long arg0, long arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "unsignedLongCompareEq", "(JJ)Z", arg0, arg1)); }

    static bool longLongCompareMagnitude(long arg0, long arg1, long arg2, long arg3) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "longLongCompareMagnitude", "(JJJJ)Z", arg0, arg1, arg2, arg3)); }

    BigDecimal remainder(BigDecimal arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "remainder", "(Ljava.math.BigDecimal;)Ljava.math.BigDecimal;", arg0)); }

    BigDecimal remainder(BigDecimal arg0, MathContext arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "remainder", "(Ljava.math.BigDecimal;Ljava.math.MathContext;)Ljava.math.BigDecimal;", arg0, arg1)); }

    BigDecimal movePointLeft(int arg0) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "movePointLeft", "(I)Ljava.math.BigDecimal;", arg0)); }

    String toEngineeringString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toEngineeringString", "()Ljava.lang.String;", )); }

    String toPlainString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toPlainString", "()Ljava.lang.String;", )); }

    int intValueExact() { return int(*javaClass->invokeMethod<int>(this->object, "intValueExact", "()I", )); }

    short shortValueExact() { return short(*javaClass->invokeMethod<short>(this->object, "shortValueExact", "()S", )); }

    byte byteValueExact() { return byte(*javaClass->invokeMethod<byte>(this->object, "byteValueExact", "()B", )); }

};


/**
 * Classpath: java.math.BigInteger
 * Package name: java.math
 */
class BigInteger : public Number {
protected:
    const inline static char *className = "java.math.BigInteger";
public:
    STATICINITIALIZE;

    BigInteger(jobject object) : JavaObject(object) {}

    BigInteger add(long arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "add", "(J)Ljava.math.BigInteger;", arg0)); }

    BigInteger add(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    int bitCount() { return int(*javaClass->invokeMethod<int>(this->object, "bitCount", "()I", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static void toString(BigInteger arg0, StringBuilder arg1, int arg2, int arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "toString", "(Ljava.math.BigInteger;Ljava.lang.StringBuilder;II)V", arg0, arg1, arg2, arg3)); }

    String toString(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(I)Ljava.lang.String;", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    BigInteger abs() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "abs", "()Ljava.math.BigInteger;", )); }

    BigInteger sqrt() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "sqrt", "()Ljava.math.BigInteger;", )); }

    BigInteger pow(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "pow", "(I)Ljava.math.BigInteger;", arg0)); }

    BigInteger min(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "min", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger max(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "max", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    int signum() { return int(*javaClass->invokeMethod<int>(this->object, "signum", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(BigInteger arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.math.BigInteger;)I", arg0)); }

    static int implMulAdd(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "implMulAdd", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }

    static void shiftRightImplWorker(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "shiftRightImplWorker", "([I[IIII)V", arg0, arg1, arg2, arg3, arg4)); }

    static void shiftLeftImplWorker(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "shiftLeftImplWorker", "([I[IIII)V", arg0, arg1, arg2, arg3, arg4)); }

    int getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    long longValue() { return long(*javaClass->invokeMethod<long>(this->object, "longValue", "()J", )); }

    float floatValue() { return float(*javaClass->invokeMethod<float>(this->object, "floatValue", "()F", )); }

    double doubleValue() { return double(*javaClass->invokeMethod<double>(this->object, "doubleValue", "()D", )); }

    static BigInteger valueOf(arr_I arg0) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "([I)Ljava.math.BigInteger;", arg0)); }

    static BigInteger valueOf(long arg0) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(J)Ljava.math.BigInteger;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    BigInteger mod(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "mod", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    void checkRange() { (*javaClass->invokeMethod<void>(this->object, "checkRange", "()V", )); }

    BigInteger setBit(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "setBit", "(I)Ljava.math.BigInteger;", arg0)); }

    int parseInt(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "parseInt", "([CII)I", arg0, arg1, arg2)); }

    BigInteger shiftLeft(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "shiftLeft", "(I)Ljava.math.BigInteger;", arg0)); }

    int signBit() { return int(*javaClass->invokeMethod<int>(this->object, "signBit", "()I", )); }

    BigInteger negate() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "negate", "()Ljava.math.BigInteger;", )); }

    BigInteger and(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "and", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger not() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "not", "()Ljava.math.BigInteger;", )); }

    BigInteger multiply(long arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "multiply", "(J)Ljava.math.BigInteger;", arg0)); }

    BigInteger multiply(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "multiply", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger multiply(BigInteger arg0, bool arg1) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "multiply", "(Ljava.math.BigInteger;Z)Ljava.math.BigInteger;", arg0, arg1)); }

    BigInteger divide(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    long longValueExact() { return long(*javaClass->invokeMethod<long>(this->object, "longValueExact", "()J", )); }

    int bitLength() { return int(*javaClass->invokeMethod<int>(this->object, "bitLength", "()I", )); }

    static int bitLength(arr_I arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "bitLength", "([II)I", arg0, arg1)); }

    BigInteger or(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "or", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger subtract(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "subtract", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    int compareMagnitude(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareMagnitude", "(J)I", arg0)); }

    int compareMagnitude(BigInteger arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareMagnitude", "(Ljava.math.BigInteger;)I", arg0)); }

    BigInteger square() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "square", "()Ljava.math.BigInteger;", )); }

    BigInteger square(bool arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "square", "(Z)Ljava.math.BigInteger;", arg0)); }

    bool testBit(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "testBit", "(I)Z", arg0)); }

    BigInteger remainder(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "remainder", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    int intValueExact() { return int(*javaClass->invokeMethod<int>(this->object, "intValueExact", "()I", )); }

    short shortValueExact() { return short(*javaClass->invokeMethod<short>(this->object, "shortValueExact", "()S", )); }

    byte byteValueExact() { return byte(*javaClass->invokeMethod<byte>(this->object, "byteValueExact", "()B", )); }

    static void reportOverflow() { (*javaClass->invokeStaticMethod<void>(this->object, "reportOverflow", "()V", )); }

    static void destructiveMulAdd(arr_I arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "destructiveMulAdd", "([III)V", arg0, arg1, arg2)); }

    static BigInteger smallPrime(int arg0, int arg1, Random arg2) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "smallPrime", "(IILjava.util.Random;)Ljava.math.BigInteger;", arg0, arg1, arg2)); }

    static BigInteger largePrime(int arg0, int arg1, Random arg2) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "largePrime", "(IILjava.util.Random;)Ljava.math.BigInteger;", arg0, arg1, arg2)); }

    bool primeToCertainty(int arg0, Random arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "primeToCertainty", "(ILjava.util.Random;)Z", arg0, arg1)); }

    static int getPrimeSearchLen(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getPrimeSearchLen", "(I)I", arg0)); }

    bool passesMillerRabin(int arg0, Random arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "passesMillerRabin", "(ILjava.util.Random;)Z", arg0, arg1)); }

    bool passesLucasLehmer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "passesLucasLehmer", "()Z", )); }

    static int jacobiSymbol(int arg0, BigInteger arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "jacobiSymbol", "(ILjava.math.BigInteger;)I", arg0, arg1)); }

    static BigInteger lucasLehmerSequence(int arg0, BigInteger arg1, BigInteger arg2) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "lucasLehmerSequence", "(ILjava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0, arg1, arg2)); }

    BigInteger shiftRight(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "shiftRight", "(I)Ljava.math.BigInteger;", arg0)); }

    int getLowestSetBit() { return int(*javaClass->invokeMethod<int>(this->object, "getLowestSetBit", "()I", )); }

    BigInteger modPow(BigInteger arg0, BigInteger arg1) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "modPow", "(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0, arg1)); }

    static BigInteger multiplyByInt(arr_I arg0, int arg1, int arg2) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "multiplyByInt", "([III)Ljava.math.BigInteger;", arg0, arg1, arg2)); }

    static BigInteger multiplyKaratsuba(BigInteger arg0, BigInteger arg1) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "multiplyKaratsuba", "(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0, arg1)); }

    static BigInteger multiplyToomCook3(BigInteger arg0, BigInteger arg1) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "multiplyToomCook3", "(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0, arg1)); }

    static void multiplyToLenCheck(arr_I arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "multiplyToLenCheck", "([II)V", arg0, arg1)); }

    BigInteger getLower(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "getLower", "(I)Ljava.math.BigInteger;", arg0)); }

    BigInteger getUpper(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "getUpper", "(I)Ljava.math.BigInteger;", arg0)); }

    BigInteger getToomSlice(int arg0, int arg1, int arg2, int arg3) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "getToomSlice", "(IIII)Ljava.math.BigInteger;", arg0, arg1, arg2, arg3)); }

    BigInteger exactDivideBy3() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "exactDivideBy3", "()Ljava.math.BigInteger;", )); }

    BigInteger squareKaratsuba() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "squareKaratsuba", "()Ljava.math.BigInteger;", )); }

    BigInteger squareToomCook3() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "squareToomCook3", "()Ljava.math.BigInteger;", )); }

    static void implSquareToLenChecks(arr_I arg0, int arg1, arr_I arg2, int arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "implSquareToLenChecks", "([II[II)V", arg0, arg1, arg2, arg3)); }

    static int mulAdd(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "mulAdd", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }

    static int addOne(arr_I arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "addOne", "([IIII)I", arg0, arg1, arg2, arg3)); }

    static void primitiveLeftShift(arr_I arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "primitiveLeftShift", "([III)V", arg0, arg1, arg2)); }

    BigInteger divideKnuth(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "divideKnuth", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger divideBurnikelZiegler(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "divideBurnikelZiegler", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger remainderKnuth(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "remainderKnuth", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger remainderBurnikelZiegler(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "remainderBurnikelZiegler", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    static int bitLengthForInt(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "bitLengthForInt", "(I)I", arg0)); }

    static void primitiveRightShift(arr_I arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "primitiveRightShift", "([III)V", arg0, arg1, arg2)); }

    BigInteger oddModPow(BigInteger arg0, BigInteger arg1) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "oddModPow", "(Ljava.math.BigInteger;Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0, arg1)); }

    BigInteger modPow2(BigInteger arg0, int arg1) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "modPow2", "(Ljava.math.BigInteger;I)Ljava.math.BigInteger;", arg0, arg1)); }

    BigInteger modInverse(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "modInverse", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    static void implMontgomeryMultiplyChecks(arr_I arg0, arr_I arg1, arr_I arg2, int arg3, arr_I arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "implMontgomeryMultiplyChecks", "([I[I[II[I)V", arg0, arg1, arg2, arg3, arg4)); }

    static int subN(arr_I arg0, arr_I arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "subN", "([I[II)I", arg0, arg1, arg2)); }

    static int intArrayCmpToLen(arr_I arg0, arr_I arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "intArrayCmpToLen", "([I[II)I", arg0, arg1, arg2)); }

    static void implMulAddCheck(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "implMulAddCheck", "([I[IIII)V", arg0, arg1, arg2, arg3, arg4)); }

    BigInteger mod2(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "mod2", "(I)Ljava.math.BigInteger;", arg0)); }

    BigInteger shiftRightImpl(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "shiftRightImpl", "(I)Ljava.math.BigInteger;", arg0)); }

    int intLength() { return int(*javaClass->invokeMethod<int>(this->object, "intLength", "()I", )); }

    static void padWithZeros(StringBuilder arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "padWithZeros", "(Ljava.lang.StringBuilder;I)V", arg0, arg1)); }

    void smallToString(int arg0, StringBuilder arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "smallToString", "(ILjava.lang.StringBuilder;I)V", arg0, arg1, arg2)); }

    static BigInteger getRadixConversionCache(int arg0, int arg1) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "getRadixConversionCache", "(II)Ljava.math.BigInteger;", arg0, arg1)); }

    int signInt() { return int(*javaClass->invokeMethod<int>(this->object, "signInt", "()I", )); }

    int firstNonzeroIntNum() { return int(*javaClass->invokeMethod<int>(this->object, "firstNonzeroIntNum", "()I", )); }

    static BigInteger probablePrime(int arg0, Random arg1) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "probablePrime", "(ILjava.util.Random;)Ljava.math.BigInteger;", arg0, arg1)); }

    BigInteger nextProbablePrime() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "nextProbablePrime", "()Ljava.math.BigInteger;", )); }

    BigInteger gcd(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "gcd", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger xor(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "xor", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger andNot(BigInteger arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "andNot", "(Ljava.math.BigInteger;)Ljava.math.BigInteger;", arg0)); }

    BigInteger clearBit(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "clearBit", "(I)Ljava.math.BigInteger;", arg0)); }

    BigInteger flipBit(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "flipBit", "(I)Ljava.math.BigInteger;", arg0)); }

    bool isProbablePrime(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isProbablePrime", "(I)Z", arg0)); }

};


/**
 * Classpath: java.util.Random
 * Package name: java.util
 */
class Random : public Object {
protected:
    const inline static char *className = "java.util.Random";
public:
    STATICINITIALIZE;

    Random(jobject object) : JavaObject(object) {}

    int next(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "next", "(I)I", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool nextBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "nextBoolean", "()Z", )); }

    long nextLong() { return long(*javaClass->invokeMethod<long>(this->object, "nextLong", "()J", )); }

    float nextFloat() { return float(*javaClass->invokeMethod<float>(this->object, "nextFloat", "()F", )); }

    IntStream ints() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "ints", "()Ljava.util.stream.IntStream;", )); }

    IntStream ints(long arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "ints", "(J)Ljava.util.stream.IntStream;", arg0)); }

    IntStream ints(long arg0, int arg1, int arg2) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "ints", "(JII)Ljava.util.stream.IntStream;", arg0, arg1, arg2)); }

    IntStream ints(int arg0, int arg1) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "ints", "(II)Ljava.util.stream.IntStream;", arg0, arg1)); }

    LongStream longs() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "longs", "()Ljava.util.stream.LongStream;", )); }

    LongStream longs(long arg0, long arg1, long arg2) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "longs", "(JJJ)Ljava.util.stream.LongStream;", arg0, arg1, arg2)); }

    LongStream longs(long arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "longs", "(J)Ljava.util.stream.LongStream;", arg0)); }

    LongStream longs(long arg0, long arg1) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "longs", "(JJ)Ljava.util.stream.LongStream;", arg0, arg1)); }

    DoubleStream doubles(long arg0, double arg1, double arg2) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "doubles", "(JDD)Ljava.util.stream.DoubleStream;", arg0, arg1, arg2)); }

    DoubleStream doubles(double arg0, double arg1) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "doubles", "(DD)Ljava.util.stream.DoubleStream;", arg0, arg1)); }

    DoubleStream doubles(long arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "doubles", "(J)Ljava.util.stream.DoubleStream;", arg0)); }

    DoubleStream doubles() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "doubles", "()Ljava.util.stream.DoubleStream;", )); }

    void setSeed(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setSeed", "(J)V", arg0)); }

    static long seedUniquifier() { return long(*javaClass->invokeStaticMethod<long>(this->object, "seedUniquifier", "()J", )); }

    static long initialScramble(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "initialScramble", "(J)J", arg0)); }

    void resetSeed(long arg0) { (*javaClass->invokeMethod<void>(this->object, "resetSeed", "(J)V", arg0)); }

    void nextBytes(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "nextBytes", "([B)V", arg0)); }

    double nextGaussian() { return double(*javaClass->invokeMethod<double>(this->object, "nextGaussian", "()D", )); }

    double nextDouble() { return double(*javaClass->invokeMethod<double>(this->object, "nextDouble", "()D", )); }

    int nextInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "nextInt", "(I)I", arg0)); }

    int nextInt() { return int(*javaClass->invokeMethod<int>(this->object, "nextInt", "()I", )); }

};


/**
 * Classpath: java.util.stream.LongStream
 * Package name: java.util.stream
 */
class LongStream : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.LongStream";
public:
    STATICINITIALIZE;

    LongStream(jobject object) : JavaObject(object) {}

    OptionalDouble average() { return OptionalDouble(*javaClass->invokeMethod<jobject>(this->object, "average", "()Ljava.util.OptionalDouble;", )); }

    OptionalLong min() { return OptionalLong(*javaClass->invokeMethod<jobject>(this->object, "min", "()Ljava.util.OptionalLong;", )); }

    OptionalLong max() { return OptionalLong(*javaClass->invokeMethod<jobject>(this->object, "max", "()Ljava.util.OptionalLong;", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    PrimitiveIterator_OfLong iterator() { return PrimitiveIterator_OfLong(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.PrimitiveIterator$OfLong;", )); }

    LongStream map(LongUnaryOperator arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "map", "(Ljava.util.function.LongUnaryOperator;)Ljava.util.stream.LongStream;", arg0)); }

    Object collect(Supplier arg0, ObjLongConsumer arg1, BiConsumer arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "collect", "(Ljava.util.function.Supplier;Ljava.util.function.ObjLongConsumer;Ljava.util.function.BiConsumer;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    static LongStream of(arr_J arg0) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "([J)Ljava.util.stream.LongStream;", arg0)); }

    static LongStream of(long arg0) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(J)Ljava.util.stream.LongStream;", arg0)); }

    long count() { return long(*javaClass->invokeMethod<long>(this->object, "count", "()J", )); }

    static LongStream_Builder builder() { return LongStream_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Ljava.util.stream.LongStream$Builder;", )); }

    static LongStream concat(LongStream arg0, LongStream arg1) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "concat", "(Ljava.util.stream.LongStream;Ljava.util.stream.LongStream;)Ljava.util.stream.LongStream;", arg0, arg1)); }

    LongStream limit(long arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "limit", "(J)Ljava.util.stream.LongStream;", arg0)); }

    Spliterator_OfLong spliterator() { return Spliterator_OfLong(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator$OfLong;", )); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    LongStream filter(LongPredicate arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "filter", "(Ljava.util.function.LongPredicate;)Ljava.util.stream.LongStream;", arg0)); }

    static LongStream empty() { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.stream.LongStream;", )); }

    bool anyMatch(LongPredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "anyMatch", "(Ljava.util.function.LongPredicate;)Z", arg0)); }

    LongStream flatMap(LongFunction arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "flatMap", "(Ljava.util.function.LongFunction;)Ljava.util.stream.LongStream;", arg0)); }

    void forEach(LongConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.LongConsumer;)V", arg0)); }

    OptionalLong findAny() { return OptionalLong(*javaClass->invokeMethod<jobject>(this->object, "findAny", "()Ljava.util.OptionalLong;", )); }

    LongStream skip(long arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "skip", "(J)Ljava.util.stream.LongStream;", arg0)); }

    LongStream peek(LongConsumer arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "peek", "(Ljava.util.function.LongConsumer;)Ljava.util.stream.LongStream;", arg0)); }

    long sum() { return long(*javaClass->invokeMethod<long>(this->object, "sum", "()J", )); }

    OptionalLong reduce(LongBinaryOperator arg0) { return OptionalLong(*javaClass->invokeMethod<jobject>(this->object, "reduce", "(Ljava.util.function.LongBinaryOperator;)Ljava.util.OptionalLong;", arg0)); }

    long reduce(long arg0, LongBinaryOperator arg1) { return long(*javaClass->invokeMethod<long>(this->object, "reduce", "(JLjava.util.function.LongBinaryOperator;)J", arg0, arg1)); }

    LongStream distinct() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "distinct", "()Ljava.util.stream.LongStream;", )); }

    OptionalLong findFirst() { return OptionalLong(*javaClass->invokeMethod<jobject>(this->object, "findFirst", "()Ljava.util.OptionalLong;", )); }

    bool allMatch(LongPredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "allMatch", "(Ljava.util.function.LongPredicate;)Z", arg0)); }

    Stream mapToObj(LongFunction arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "mapToObj", "(Ljava.util.function.LongFunction;)Ljava.util.stream.Stream;", arg0)); }

    LongSummaryStatistics summaryStatistics() { return LongSummaryStatistics(*javaClass->invokeMethod<jobject>(this->object, "summaryStatistics", "()Ljava.util.LongSummaryStatistics;", )); }

    DoubleStream asDoubleStream() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "asDoubleStream", "()Ljava.util.stream.DoubleStream;", )); }

    Stream boxed() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "boxed", "()Ljava.util.stream.Stream;", )); }

    static LongStream rangeClosed(long arg0, long arg1) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "rangeClosed", "(JJ)Ljava.util.stream.LongStream;", arg0, arg1)); }

    static LongStream iterate(long arg0, LongPredicate arg1, LongUnaryOperator arg2) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(JLjava.util.function.LongPredicate;Ljava.util.function.LongUnaryOperator;)Ljava.util.stream.LongStream;", arg0, arg1, arg2)); }

    static LongStream iterate(long arg0, LongUnaryOperator arg1) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "iterate", "(JLjava.util.function.LongUnaryOperator;)Ljava.util.stream.LongStream;", arg0, arg1)); }

    static LongStream range(long arg0, long arg1) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "range", "(JJ)Ljava.util.stream.LongStream;", arg0, arg1)); }

    LongStream parallel() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "parallel", "()Ljava.util.stream.LongStream;", )); }

    BaseStream parallel() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "parallel", "()Ljava.util.stream.BaseStream;", )); }

    LongStream sorted() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "sorted", "()Ljava.util.stream.LongStream;", )); }

    static LongStream generate(LongSupplier arg0) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "generate", "(Ljava.util.function.LongSupplier;)Ljava.util.stream.LongStream;", arg0)); }

    IntStream mapToInt(LongToIntFunction arg0) { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "mapToInt", "(Ljava.util.function.LongToIntFunction;)Ljava.util.stream.IntStream;", arg0)); }

    DoubleStream mapToDouble(LongToDoubleFunction arg0) { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "mapToDouble", "(Ljava.util.function.LongToDoubleFunction;)Ljava.util.stream.DoubleStream;", arg0)); }

    LongStream mapMulti(LongStream_LongMapMultiConsumer arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "mapMulti", "(Ljava.util.stream.LongStream$LongMapMultiConsumer;)Ljava.util.stream.LongStream;", arg0)); }

    LongStream takeWhile(LongPredicate arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "takeWhile", "(Ljava.util.function.LongPredicate;)Ljava.util.stream.LongStream;", arg0)); }

    LongStream dropWhile(LongPredicate arg0) { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "dropWhile", "(Ljava.util.function.LongPredicate;)Ljava.util.stream.LongStream;", arg0)); }

    void forEachOrdered(LongConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachOrdered", "(Ljava.util.function.LongConsumer;)V", arg0)); }

    bool noneMatch(LongPredicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "noneMatch", "(Ljava.util.function.LongPredicate;)Z", arg0)); }

    static LongStream lambda_mapMulti_0(LongStream_LongMapMultiConsumer arg0, long arg1) { return LongStream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$mapMulti$0", "(Ljava.util.stream.LongStream$LongMapMultiConsumer;J)Ljava.util.stream.LongStream;", arg0, arg1)); }

    LongStream sequential() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "sequential", "()Ljava.util.stream.LongStream;", )); }

    BaseStream sequential() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "sequential", "()Ljava.util.stream.BaseStream;", )); }

};


/**
 * Classpath: java.util.OptionalLong
 * Package name: java.util
 */
class OptionalLong : public Object {
protected:
    const inline static char *className = "java.util.OptionalLong";
public:
    STATICINITIALIZE;

    OptionalLong(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    LongStream stream() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "stream", "()Ljava.util.stream.LongStream;", )); }

    static OptionalLong of(long arg0) { return OptionalLong(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(J)Ljava.util.OptionalLong;", arg0)); }

    static OptionalLong empty() { return OptionalLong(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.OptionalLong;", )); }

    bool isPresent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPresent", "()Z", )); }

    long orElse(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "orElse", "(J)J", arg0)); }

    long orElseThrow(Supplier arg0) { return long(*javaClass->invokeMethod<long>(this->object, "orElseThrow", "(Ljava.util.function.Supplier;)J", arg0)); }

    long orElseThrow() { return long(*javaClass->invokeMethod<long>(this->object, "orElseThrow", "()J", )); }

    long getAsLong() { return long(*javaClass->invokeMethod<long>(this->object, "getAsLong", "()J", )); }

    void ifPresent(LongConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "ifPresent", "(Ljava.util.function.LongConsumer;)V", arg0)); }

    void ifPresentOrElse(LongConsumer arg0, Runnable arg1) { (*javaClass->invokeMethod<void>(this->object, "ifPresentOrElse", "(Ljava.util.function.LongConsumer;Ljava.lang.Runnable;)V", arg0, arg1)); }

    long orElseGet(LongSupplier arg0) { return long(*javaClass->invokeMethod<long>(this->object, "orElseGet", "(Ljava.util.function.LongSupplier;)J", arg0)); }

};


/**
 * Classpath: java.util.function.LongConsumer
 * Package name: java.util.function
 */
class LongConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongConsumer";
public:
    STATICINITIALIZE;

    LongConsumer(jobject object) : JavaObject(object) {}

    void accept(long arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(J)V", arg0)); }

    LongConsumer andThen(LongConsumer arg0) { return LongConsumer(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.LongConsumer;)Ljava.util.function.LongConsumer;", arg0)); }

    void lambda_andThen_0(LongConsumer arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "lambda$andThen$0", "(Ljava.util.function.LongConsumer;J)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.LongSupplier
 * Package name: java.util.function
 */
class LongSupplier : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongSupplier";
public:
    STATICINITIALIZE;

    LongSupplier(jobject object) : JavaObject(object) {}

    long getAsLong() { return long(*javaClass->invokeMethod<long>(this->object, "getAsLong", "()J", )); }

};


/**
 * Classpath: java.util.PrimitiveIterator$OfLong
 * Enclosing class: java.util.PrimitiveIterator
 * Package name: java.util
 */
class PrimitiveIterator_OfLong : public JavaObject {
protected:
    const inline static char *className = "java.util.PrimitiveIterator$OfLong";
public:
    STATICINITIALIZE;

    PrimitiveIterator_OfLong(jobject object) : JavaObject(object) {}

    void forEachRemaining(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.lang.Object;)V", arg0)); }

    void forEachRemaining(LongConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.LongConsumer;)V", arg0)); }

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    Object next() { return Object(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Object;", )); }

    Long next() { return Long(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Long;", )); }

    long nextLong() { return long(*javaClass->invokeMethod<long>(this->object, "nextLong", "()J", )); }

};


/**
 * Classpath: java.lang.Long
 * Package name: java.lang
 */
class Long : public Number {
protected:
    const inline static char *className = "java.lang.Long";
public:
    STATICINITIALIZE;

    Long(jobject object) : JavaObject(object) {}

    static int numberOfLeadingZeros(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "numberOfLeadingZeros", "(J)I", arg0)); }

    static int numberOfTrailingZeros(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "numberOfTrailingZeros", "(J)I", arg0)); }

    static int bitCount(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "bitCount", "(J)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    static String toString(long arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(J)Ljava.lang.String;", arg0)); }

    static String toString(long arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(JI)Ljava.lang.String;", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static int hashCode(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashCode", "(J)I", arg0)); }

    static long min(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "min", "(JJ)J", arg0, arg1)); }

    static long max(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "max", "(JJ)J", arg0, arg1)); }

    static int signum(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "signum", "(J)I", arg0)); }

    static long reverseBytes(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "reverseBytes", "(J)J", arg0)); }

    static int getChars(long arg0, int arg1, arr_B arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getChars", "(JI[B)I", arg0, arg1, arg2)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(Long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Long;)I", arg0)); }

    static Long getLong(String arg0, long arg1) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "getLong", "(Ljava.lang.String;J)Ljava.lang.Long;", arg0, arg1)); }

    static Long getLong(String arg0) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "getLong", "(Ljava.lang.String;)Ljava.lang.Long;", arg0)); }

    static Long getLong(String arg0, Long arg1) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "getLong", "(Ljava.lang.String;Ljava.lang.Long;)Ljava.lang.Long;", arg0, arg1)); }

    static int compare(long arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(JJ)I", arg0, arg1)); }

    byte byteValue() { return byte(*javaClass->invokeMethod<byte>(this->object, "byteValue", "()B", )); }

    short shortValue() { return short(*javaClass->invokeMethod<short>(this->object, "shortValue", "()S", )); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    long longValue() { return long(*javaClass->invokeMethod<long>(this->object, "longValue", "()J", )); }

    float floatValue() { return float(*javaClass->invokeMethod<float>(this->object, "floatValue", "()F", )); }

    double doubleValue() { return double(*javaClass->invokeMethod<double>(this->object, "doubleValue", "()D", )); }

    static Long valueOf(String arg0, int arg1) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;I)Ljava.lang.Long;", arg0, arg1)); }

    static Long valueOf(long arg0) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(J)Ljava.lang.Long;", arg0)); }

    static Long valueOf(String arg0) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.Long;", arg0)); }

    static String toHexString(long arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toHexString", "(J)Ljava.lang.String;", arg0)); }

    static Long decode(String arg0) { return Long(*javaClass->invokeStaticMethod<jobject>(this->object, "decode", "(Ljava.lang.String;)Ljava.lang.Long;", arg0)); }

    Object resolveConstantDesc(MethodHandles_Lookup arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Object;", arg0)); }

    Long resolveConstantDesc(MethodHandles_Lookup arg0) { return Long(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Long;", arg0)); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    static long reverse(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "reverse", "(J)J", arg0)); }

    static int stringSize(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "stringSize", "(J)I", arg0)); }

    static long sum(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "sum", "(JJ)J", arg0, arg1)); }

    static int compareUnsigned(long arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareUnsigned", "(JJ)I", arg0, arg1)); }

    static String toStringUTF16(long arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toStringUTF16", "(JI)Ljava.lang.String;", arg0, arg1)); }

    static String toUnsignedString(long arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toUnsignedString", "(JI)Ljava.lang.String;", arg0, arg1)); }

    static String toUnsignedString(long arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toUnsignedString", "(J)Ljava.lang.String;", arg0)); }

    static String toUnsignedString0(long arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toUnsignedString0", "(JI)Ljava.lang.String;", arg0, arg1)); }

    static long parseLong(CharSequence arg0, int arg1, int arg2, int arg3) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseLong", "(Ljava.lang.CharSequence;III)J", arg0, arg1, arg2, arg3)); }

    static long parseLong(String arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseLong", "(Ljava.lang.String;I)J", arg0, arg1)); }

    static long parseLong(String arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseLong", "(Ljava.lang.String;)J", arg0)); }

    static String toOctalString(long arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toOctalString", "(J)Ljava.lang.String;", arg0)); }

    static String toBinaryString(long arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toBinaryString", "(J)Ljava.lang.String;", arg0)); }

    static long divideUnsigned(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "divideUnsigned", "(JJ)J", arg0, arg1)); }

    static long remainderUnsigned(long arg0, long arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "remainderUnsigned", "(JJ)J", arg0, arg1)); }

    static long highestOneBit(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "highestOneBit", "(J)J", arg0)); }

    static long lowestOneBit(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "lowestOneBit", "(J)J", arg0)); }

    static long rotateLeft(long arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "rotateLeft", "(JI)J", arg0, arg1)); }

    static long rotateRight(long arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "rotateRight", "(JI)J", arg0, arg1)); }

    static BigInteger toUnsignedBigInteger(long arg0) { return BigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "toUnsignedBigInteger", "(J)Ljava.math.BigInteger;", arg0)); }

    static void formatUnsignedLong0(long arg0, int arg1, arr_B arg2, int arg3, int arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "formatUnsignedLong0", "(JI[BII)V", arg0, arg1, arg2, arg3, arg4)); }

    static void formatUnsignedLong0UTF16(long arg0, int arg1, arr_B arg2, int arg3, int arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "formatUnsignedLong0UTF16", "(JI[BII)V", arg0, arg1, arg2, arg3, arg4)); }

    static long parseUnsignedLong(String arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseUnsignedLong", "(Ljava.lang.String;I)J", arg0, arg1)); }

    static long parseUnsignedLong(CharSequence arg0, int arg1, int arg2, int arg3) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseUnsignedLong", "(Ljava.lang.CharSequence;III)J", arg0, arg1, arg2, arg3)); }

    static long parseUnsignedLong(String arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parseUnsignedLong", "(Ljava.lang.String;)J", arg0)); }

    static String fastUUID(long arg0, long arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "fastUUID", "(JJ)Ljava.lang.String;", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.LongUnaryOperator
 * Package name: java.util.function
 */
class LongUnaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongUnaryOperator";
public:
    STATICINITIALIZE;

    LongUnaryOperator(jobject object) : JavaObject(object) {}

    static LongUnaryOperator identity() { return LongUnaryOperator(*javaClass->invokeStaticMethod<jobject>(this->object, "identity", "()Ljava.util.function.LongUnaryOperator;", )); }

    long applyAsLong(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "applyAsLong", "(J)J", arg0)); }

    LongUnaryOperator compose(LongUnaryOperator arg0) { return LongUnaryOperator(*javaClass->invokeMethod<jobject>(this->object, "compose", "(Ljava.util.function.LongUnaryOperator;)Ljava.util.function.LongUnaryOperator;", arg0)); }

    LongUnaryOperator andThen(LongUnaryOperator arg0) { return LongUnaryOperator(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.LongUnaryOperator;)Ljava.util.function.LongUnaryOperator;", arg0)); }

    static long lambda_identity_2(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "lambda$identity$2", "(J)J", arg0)); }

    long lambda_andThen_1(LongUnaryOperator arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "lambda$andThen$1", "(Ljava.util.function.LongUnaryOperator;J)J", arg0, arg1)); }

    long lambda_compose_0(LongUnaryOperator arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "lambda$compose$0", "(Ljava.util.function.LongUnaryOperator;J)J", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.ObjLongConsumer
 * Package name: java.util.function
 */
class ObjLongConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ObjLongConsumer";
public:
    STATICINITIALIZE;

    ObjLongConsumer(jobject object) : JavaObject(object) {}

    void accept(Object arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljava.lang.Object;J)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.stream.LongStream$Builder
 * Enclosing class: java.util.stream.LongStream
 * Package name: java.util.stream
 */
class LongStream_Builder : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.LongStream$Builder";
public:
    STATICINITIALIZE;

    LongStream_Builder(jobject object) : JavaObject(object) {}

    LongStream_Builder add(long arg0) { return LongStream_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(J)Ljava.util.stream.LongStream$Builder;", arg0)); }

    void accept(long arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(J)V", arg0)); }

    LongStream build() { return LongStream(*javaClass->invokeMethod<jobject>(this->object, "build", "()Ljava.util.stream.LongStream;", )); }

};


/**
 * Classpath: java.util.Spliterator$OfLong
 * Enclosing class: java.util.Spliterator
 * Package name: java.util
 */
class Spliterator_OfLong : public JavaObject {
protected:
    const inline static char *className = "java.util.Spliterator$OfLong";
public:
    STATICINITIALIZE;

    Spliterator_OfLong(jobject object) : JavaObject(object) {}

    void forEachRemaining(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.lang.Object;)V", arg0)); }

    void forEachRemaining(LongConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.LongConsumer;)V", arg0)); }

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    bool tryAdvance(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.lang.Object;)Z", arg0)); }

    bool tryAdvance(Consumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.util.function.Consumer;)Z", arg0)); }

    bool tryAdvance(LongConsumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.util.function.LongConsumer;)Z", arg0)); }

    Spliterator_OfPrimitive trySplit() { return Spliterator_OfPrimitive(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator$OfPrimitive;", )); }

    Spliterator trySplit() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator;", )); }

    Spliterator_OfLong trySplit() { return Spliterator_OfLong(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator$OfLong;", )); }

};


/**
 * Classpath: java.util.function.LongPredicate
 * Package name: java.util.function
 */
class LongPredicate : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongPredicate";
public:
    STATICINITIALIZE;

    LongPredicate(jobject object) : JavaObject(object) {}

    bool test(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "test", "(J)Z", arg0)); }

    LongPredicate negate() { return LongPredicate(*javaClass->invokeMethod<jobject>(this->object, "negate", "()Ljava.util.function.LongPredicate;", )); }

    LongPredicate and(LongPredicate arg0) { return LongPredicate(*javaClass->invokeMethod<jobject>(this->object, "and", "(Ljava.util.function.LongPredicate;)Ljava.util.function.LongPredicate;", arg0)); }

    bool lambda_or_2(LongPredicate arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$or$2", "(Ljava.util.function.LongPredicate;J)Z", arg0, arg1)); }

    bool lambda_negate_1(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$negate$1", "(J)Z", arg0)); }

    bool lambda_and_0(LongPredicate arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$and$0", "(Ljava.util.function.LongPredicate;J)Z", arg0, arg1)); }

    LongPredicate or(LongPredicate arg0) { return LongPredicate(*javaClass->invokeMethod<jobject>(this->object, "or", "(Ljava.util.function.LongPredicate;)Ljava.util.function.LongPredicate;", arg0)); }

};


/**
 * Classpath: java.util.function.LongFunction
 * Package name: java.util.function
 */
class LongFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongFunction";
public:
    STATICINITIALIZE;

    LongFunction(jobject object) : JavaObject(object) {}

    Object apply(long arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "apply", "(J)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.function.LongBinaryOperator
 * Package name: java.util.function
 */
class LongBinaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongBinaryOperator";
public:
    STATICINITIALIZE;

    LongBinaryOperator(jobject object) : JavaObject(object) {}

    long applyAsLong(long arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "applyAsLong", "(JJ)J", arg0, arg1)); }

};


/**
 * Classpath: java.util.LongSummaryStatistics
 * Package name: java.util
 */
class LongSummaryStatistics : public Object {
protected:
    const inline static char *className = "java.util.LongSummaryStatistics";
public:
    STATICINITIALIZE;

    LongSummaryStatistics(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void accept(int arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(I)V", arg0)); }

    void accept(long arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(J)V", arg0)); }

    void combine(LongSummaryStatistics arg0) { (*javaClass->invokeMethod<void>(this->object, "combine", "(Ljava.util.LongSummaryStatistics;)V", arg0)); }

    long getCount() { return long(*javaClass->invokeMethod<long>(this->object, "getCount", "()J", )); }

    long getSum() { return long(*javaClass->invokeMethod<long>(this->object, "getSum", "()J", )); }

    long getMin() { return long(*javaClass->invokeMethod<long>(this->object, "getMin", "()J", )); }

    double getAverage() { return double(*javaClass->invokeMethod<double>(this->object, "getAverage", "()D", )); }

    long getMax() { return long(*javaClass->invokeMethod<long>(this->object, "getMax", "()J", )); }

};


/**
 * Classpath: java.util.stream.BaseStream
 * Package name: java.util.stream
 */
class BaseStream : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.BaseStream";
public:
    STATICINITIALIZE;

    BaseStream(jobject object) : JavaObject(object) {}

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    BaseStream parallel() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "parallel", "()Ljava.util.stream.BaseStream;", )); }

    bool isParallel() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isParallel", "()Z", )); }

    BaseStream onClose(Runnable arg0) { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "onClose", "(Ljava.lang.Runnable;)Ljava.util.stream.BaseStream;", arg0)); }

    BaseStream sequential() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "sequential", "()Ljava.util.stream.BaseStream;", )); }

    BaseStream unordered() { return BaseStream(*javaClass->invokeMethod<jobject>(this->object, "unordered", "()Ljava.util.stream.BaseStream;", )); }

};


/**
 * Classpath: java.util.function.LongToIntFunction
 * Package name: java.util.function
 */
class LongToIntFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongToIntFunction";
public:
    STATICINITIALIZE;

    LongToIntFunction(jobject object) : JavaObject(object) {}

    int applyAsInt(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "applyAsInt", "(J)I", arg0)); }

};


/**
 * Classpath: java.util.function.LongToDoubleFunction
 * Package name: java.util.function
 */
class LongToDoubleFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.LongToDoubleFunction";
public:
    STATICINITIALIZE;

    LongToDoubleFunction(jobject object) : JavaObject(object) {}

    double applyAsDouble(long arg0) { return double(*javaClass->invokeMethod<double>(this->object, "applyAsDouble", "(J)D", arg0)); }

};


/**
 * Classpath: java.util.stream.LongStream$LongMapMultiConsumer
 * Enclosing class: java.util.stream.LongStream
 * Package name: java.util.stream
 */
class LongStream_LongMapMultiConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.LongStream$LongMapMultiConsumer";
public:
    STATICINITIALIZE;

    LongStream_LongMapMultiConsumer(jobject object) : JavaObject(object) {}

    void accept(long arg0, LongConsumer arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(JLjava.util.function.LongConsumer;)V", arg0, arg1)); }

};


/**
 * Classpath: java.math.MathContext
 * Package name: java.math
 */
class MathContext : public Object {
protected:
    const inline static char *className = "java.math.MathContext";
public:
    STATICINITIALIZE;

    MathContext(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    int getPrecision() { return int(*javaClass->invokeMethod<int>(this->object, "getPrecision", "()I", )); }

    RoundingMode getRoundingMode() { return RoundingMode(*javaClass->invokeMethod<jobject>(this->object, "getRoundingMode", "()Ljava.math.RoundingMode;", )); }

};


/**
 * Classpath: java.math.RoundingMode
 * Package name: java.math
 */
class RoundingMode : public Enum {
protected:
    const inline static char *className = "java.math.RoundingMode";
public:
    STATICINITIALIZE;

    RoundingMode(jobject object) : JavaObject(object) {}

    static RoundingMode valueOf(String arg0) { return RoundingMode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.math.RoundingMode;", arg0)); }

    static RoundingMode valueOf(int arg0) { return RoundingMode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(I)Ljava.math.RoundingMode;", arg0)); }

};


/**
 * Classpath: [Ljava.math.BigDecimal;
 */
class BigDecimal_interface : public Object {
protected:
    const inline static char *className = "[Ljava.math.BigDecimal;";
public:
    STATICINITIALIZE;

    BigDecimal_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.math.MutableBigInteger
 * Package name: java.math
 */
class MutableBigInteger : public Object {
protected:
    const inline static char *className = "java.math.MutableBigInteger";
public:
    STATICINITIALIZE;

    MutableBigInteger(jobject object) : JavaObject(object) {}

    MutableBigInteger getBlock(int arg0, int arg1, int arg2) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "(III)Ljava.math.MutableBigInteger;", arg0, arg1, arg2)); }

    void add(MutableBigInteger arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.math.MutableBigInteger;)V", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    MutableBigInteger sqrt() { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "sqrt", "()Ljava.math.MutableBigInteger;", )); }

    int getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }

    long getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }

    int compare(MutableBigInteger arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compare", "(Ljava.math.MutableBigInteger;)I", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    void setValue(arr_I arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setValue", "([II)V", arg0, arg1)); }

    void setInt(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setInt", "(II)V", arg0, arg1)); }

    void normalize() { (*javaClass->invokeMethod<void>(this->object, "normalize", "()V", )); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    void multiply(MutableBigInteger arg0, MutableBigInteger arg1) { (*javaClass->invokeMethod<void>(this->object, "multiply", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)V", arg0, arg1)); }

    MutableBigInteger divide(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0, arg1)); }

    long divide(long arg0, MutableBigInteger arg1) { return long(*javaClass->invokeMethod<long>(this->object, "divide", "(JLjava.math.MutableBigInteger;)J", arg0, arg1)); }

    MutableBigInteger divide(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divide", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;Z)Ljava.math.MutableBigInteger;", arg0, arg1, arg2)); }

    long bitLength() { return long(*javaClass->invokeMethod<long>(this->object, "bitLength", "()J", )); }

    bool isZero() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isZero", "()Z", )); }

    int subtract(MutableBigInteger arg0) { return int(*javaClass->invokeMethod<int>(this->object, "subtract", "(Ljava.math.MutableBigInteger;)I", arg0)); }

    BigInteger toBigInteger() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "toBigInteger", "()Ljava.math.BigInteger;", )); }

    BigInteger toBigInteger(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "toBigInteger", "(I)Ljava.math.BigInteger;", arg0)); }

    BigDecimal toBigDecimal(int arg0, int arg1) { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "toBigDecimal", "(II)Ljava.math.BigDecimal;", arg0, arg1)); }

    long toCompactValue(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toCompactValue", "(I)J", arg0)); }

    bool isOdd() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOdd", "()Z", )); }

    int compareHalf(MutableBigInteger arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareHalf", "(Ljava.math.MutableBigInteger;)I", arg0)); }

    bool unsignedLongCompare(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "unsignedLongCompare", "(JJ)Z", arg0, arg1)); }

    int mulsub(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeMethod<int>(this->object, "mulsub", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }

    int getLowestSetBit() { return int(*javaClass->invokeMethod<int>(this->object, "getLowestSetBit", "()I", )); }

    BigInteger getLower(int arg0) { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "getLower", "(I)Ljava.math.BigInteger;", arg0)); }

    void primitiveLeftShift(int arg0) { (*javaClass->invokeMethod<void>(this->object, "primitiveLeftShift", "(I)V", arg0)); }

    MutableBigInteger divideKnuth(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divideKnuth", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;Z)Ljava.math.MutableBigInteger;", arg0, arg1, arg2)); }

    MutableBigInteger divideKnuth(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divideKnuth", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0, arg1)); }

    MutableBigInteger divideAndRemainderBurnikelZiegler(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divideAndRemainderBurnikelZiegler", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0, arg1)); }

    MutableBigInteger hybridGCD(MutableBigInteger arg0) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "hybridGCD", "(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0)); }

    void primitiveRightShift(int arg0) { (*javaClass->invokeMethod<void>(this->object, "primitiveRightShift", "(I)V", arg0)); }

    MutableBigInteger modInverse(MutableBigInteger arg0) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "modInverse", "(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0)); }

    static long inverseMod64(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "inverseMod64", "(J)J", arg0)); }

    void leftShift(int arg0) { (*javaClass->invokeMethod<void>(this->object, "leftShift", "(I)V", arg0)); }

    MutableBigInteger mutableModInverse(MutableBigInteger arg0) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "mutableModInverse", "(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0)); }

    int difference(MutableBigInteger arg0) { return int(*javaClass->invokeMethod<int>(this->object, "difference", "(Ljava.math.MutableBigInteger;)I", arg0)); }

    void rightShift(int arg0) { (*javaClass->invokeMethod<void>(this->object, "rightShift", "(I)V", arg0)); }

    void copyValue(MutableBigInteger arg0) { (*javaClass->invokeMethod<void>(this->object, "copyValue", "(Ljava.math.MutableBigInteger;)V", arg0)); }

    void copyValue(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "copyValue", "([I)V", arg0)); }

    static long divWord(long arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "divWord", "(JI)J", arg0, arg1)); }

    int divideOneWord(int arg0, MutableBigInteger arg1) { return int(*javaClass->invokeMethod<int>(this->object, "divideOneWord", "(ILjava.math.MutableBigInteger;)I", arg0, arg1)); }

    MutableBigInteger divideMagnitude(MutableBigInteger arg0, MutableBigInteger arg1, bool arg2) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divideMagnitude", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;Z)Ljava.math.MutableBigInteger;", arg0, arg1, arg2)); }

    void safeLeftShift(int arg0) { (*javaClass->invokeMethod<void>(this->object, "safeLeftShift", "(I)V", arg0)); }

    void addDisjoint(MutableBigInteger arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addDisjoint", "(Ljava.math.MutableBigInteger;I)V", arg0, arg1)); }

    MutableBigInteger divide2n1n(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divide2n1n", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0, arg1)); }

    void addShifted(MutableBigInteger arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addShifted", "(Ljava.math.MutableBigInteger;I)V", arg0, arg1)); }

    void safeRightShift(int arg0) { (*javaClass->invokeMethod<void>(this->object, "safeRightShift", "(I)V", arg0)); }

    void keepLower(int arg0) { (*javaClass->invokeMethod<void>(this->object, "keepLower", "(I)V", arg0)); }

    MutableBigInteger divide3n2n(MutableBigInteger arg0, MutableBigInteger arg1) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divide3n2n", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0, arg1)); }

    int compareShifted(MutableBigInteger arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "compareShifted", "(Ljava.math.MutableBigInteger;I)I", arg0, arg1)); }

    void ones(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ones", "(I)V", arg0)); }

    void addLower(MutableBigInteger arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addLower", "(Ljava.math.MutableBigInteger;I)V", arg0, arg1)); }

    MutableBigInteger divideLongMagnitude(long arg0, MutableBigInteger arg1) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "divideLongMagnitude", "(JLjava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0, arg1)); }

    long toLong() { return long(*javaClass->invokeMethod<long>(this->object, "toLong", "()J", )); }

    static void copyAndShift(arr_I arg0, int arg1, int arg2, arr_I arg3, int arg4, int arg5) { (*javaClass->invokeStaticMethod<void>(this->object, "copyAndShift", "([III[III)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    int divadd(arr_I arg0, arr_I arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "divadd", "([I[II)I", arg0, arg1, arg2)); }

    int mulsubBorrow(arr_I arg0, arr_I arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeMethod<int>(this->object, "mulsubBorrow", "([I[IIII)I", arg0, arg1, arg2, arg3, arg4)); }

    int mulsubLong(arr_I arg0, int arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeMethod<int>(this->object, "mulsubLong", "([IIIII)I", arg0, arg1, arg2, arg3, arg4)); }

    int divaddLong(int arg0, int arg1, arr_I arg2, int arg3) { return int(*javaClass->invokeMethod<int>(this->object, "divaddLong", "(II[II)I", arg0, arg1, arg2, arg3)); }

    MutableBigInteger binaryGCD(MutableBigInteger arg0) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "binaryGCD", "(Ljava.math.MutableBigInteger;)Ljava.math.MutableBigInteger;", arg0)); }

    static int binaryGcd(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "binaryGcd", "(II)I", arg0, arg1)); }

    bool isEven() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEven", "()Z", )); }

    bool isOne() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOne", "()Z", )); }

    MutableBigInteger modInverseMP2(int arg0) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "modInverseMP2", "(I)Ljava.math.MutableBigInteger;", arg0)); }

    static MutableBigInteger modInverseBP2(MutableBigInteger arg0, int arg1) { return MutableBigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "modInverseBP2", "(Ljava.math.MutableBigInteger;I)Ljava.math.MutableBigInteger;", arg0, arg1)); }

    MutableBigInteger euclidModInverse(int arg0) { return MutableBigInteger(*javaClass->invokeMethod<jobject>(this->object, "euclidModInverse", "(I)Ljava.math.MutableBigInteger;", arg0)); }

    static int inverseMod32(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "inverseMod32", "(I)I", arg0)); }

    static MutableBigInteger fixup(MutableBigInteger arg0, MutableBigInteger arg1, int arg2) { return MutableBigInteger(*javaClass->invokeStaticMethod<jobject>(this->object, "fixup", "(Ljava.math.MutableBigInteger;Ljava.math.MutableBigInteger;I)Ljava.math.MutableBigInteger;", arg0, arg1, arg2)); }

    void mul(int arg0, MutableBigInteger arg1) { (*javaClass->invokeMethod<void>(this->object, "mul", "(ILjava.math.MutableBigInteger;)V", arg0, arg1)); }

    bool isNormal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNormal", "()Z", )); }

};


/**
 * Classpath: java.io.DataInput
 * Package name: java.io
 */
class DataInput : public JavaObject {
protected:
    const inline static char *className = "java.io.DataInput";
public:
    STATICINITIALIZE;

    DataInput(jobject object) : JavaObject(object) {}

    String readLine() { return String(*javaClass->invokeMethod<jobject>(this->object, "readLine", "()Ljava.lang.String;", )); }

    int readInt() { return int(*javaClass->invokeMethod<int>(this->object, "readInt", "()I", )); }

    String readUTF() { return String(*javaClass->invokeMethod<jobject>(this->object, "readUTF", "()Ljava.lang.String;", )); }

    int readUnsignedShort() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedShort", "()I", )); }

    long readLong() { return long(*javaClass->invokeMethod<long>(this->object, "readLong", "()J", )); }

    byte readByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "readByte", "()B", )); }

    char readChar() { return char(*javaClass->invokeMethod<char>(this->object, "readChar", "()C", )); }

    short readShort() { return short(*javaClass->invokeMethod<short>(this->object, "readShort", "()S", )); }

    float readFloat() { return float(*javaClass->invokeMethod<float>(this->object, "readFloat", "()F", )); }

    void readFully(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "readFully", "([BII)V", arg0, arg1, arg2)); }

    void readFully(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "readFully", "([B)V", arg0)); }

    int skipBytes(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "skipBytes", "(I)I", arg0)); }

    bool readBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "readBoolean", "()Z", )); }

    int readUnsignedByte() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedByte", "()I", )); }

    double readDouble() { return double(*javaClass->invokeMethod<double>(this->object, "readDouble", "()D", )); }

};


/**
 * Classpath: java.io.DataOutput
 * Package name: java.io
 */
class DataOutput : public JavaObject {
protected:
    const inline static char *className = "java.io.DataOutput";
public:
    STATICINITIALIZE;

    DataOutput(jobject object) : JavaObject(object) {}

    void writeByte(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeByte", "(I)V", arg0)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void write(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }

    void write(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }

    void writeInt(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeInt", "(I)V", arg0)); }

    void writeUTF(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeUTF", "(Ljava.lang.String;)V", arg0)); }

    void writeChar(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeChar", "(I)V", arg0)); }

    void writeBytes(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeBytes", "(Ljava.lang.String;)V", arg0)); }

    void writeFloat(float arg0) { (*javaClass->invokeMethod<void>(this->object, "writeFloat", "(F)V", arg0)); }

    void writeLong(long arg0) { (*javaClass->invokeMethod<void>(this->object, "writeLong", "(J)V", arg0)); }

    void writeBoolean(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "writeBoolean", "(Z)V", arg0)); }

    void writeShort(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeShort", "(I)V", arg0)); }

    void writeDouble(double arg0) { (*javaClass->invokeMethod<void>(this->object, "writeDouble", "(D)V", arg0)); }

    void writeChars(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeChars", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: java.time.temporal.ChronoUnit
 * Package name: java.time.temporal
 */
class ChronoUnit : public Enum {
protected:
    const inline static char *className = "java.time.temporal.ChronoUnit";
public:
    STATICINITIALIZE;

    ChronoUnit(jobject object) : JavaObject(object) {}

    Duration getDuration() { return Duration(*javaClass->invokeMethod<jobject>(this->object, "getDuration", "()Ljava.time.Duration;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static ChronoUnit valueOf(String arg0) { return ChronoUnit(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.temporal.ChronoUnit;", arg0)); }

    bool isDurationEstimated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDurationEstimated", "()Z", )); }

    long between(Temporal arg0, Temporal arg1) { return long(*javaClass->invokeMethod<long>(this->object, "between", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.Temporal;)J", arg0, arg1)); }

    Temporal addTo(Temporal arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "addTo", "(Ljava.time.temporal.Temporal;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    bool isDateBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDateBased", "()Z", )); }

    bool isTimeBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTimeBased", "()Z", )); }

    bool isSupportedBy(Temporal arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupportedBy", "(Ljava.time.temporal.Temporal;)Z", arg0)); }

};


/**
 * Classpath: java.nio.file.WatchKey
 * Package name: java.nio.file
 */
class WatchKey : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.WatchKey";
public:
    STATICINITIALIZE;

    WatchKey(jobject object) : JavaObject(object) {}

    bool isValid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValid", "()Z", )); }

    bool reset() { return bool(*javaClass->invokeMethod<boolean>(this->object, "reset", "()Z", )); }

    void cancel() { (*javaClass->invokeMethod<void>(this->object, "cancel", "()V", )); }

    List pollEvents() { return List(*javaClass->invokeMethod<jobject>(this->object, "pollEvents", "()Ljava.util.List;", )); }

    Watchable watchable() { return Watchable(*javaClass->invokeMethod<jobject>(this->object, "watchable", "()Ljava.nio.file.Watchable;", )); }

};


/**
 * Classpath: java.nio.file.Watchable
 * Package name: java.nio.file
 */
class Watchable : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.Watchable";
public:
    STATICINITIALIZE;

    Watchable(jobject object) : JavaObject(object) {}

    WatchKey register(WatchService arg0, WatchEvent_Kind_interface arg1, WatchEvent_Modifier_interface arg2) { return WatchKey(*javaClass->invokeMethod<jobject>(this->object, "register", "(Ljava.nio.file.WatchService;[Ljava.nio.file.WatchEvent$Kind;[Ljava.nio.file.WatchEvent$Modifier;)Ljava.nio.file.WatchKey;", arg0, arg1, arg2)); }

    WatchKey register(WatchService arg0, WatchEvent_Kind_interface arg1) { return WatchKey(*javaClass->invokeMethod<jobject>(this->object, "register", "(Ljava.nio.file.WatchService;[Ljava.nio.file.WatchEvent$Kind;)Ljava.nio.file.WatchKey;", arg0, arg1)); }

};


/**
 * Classpath: [Ljava.nio.file.WatchEvent$Kind;
 */
class WatchEvent_Kind_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.WatchEvent$Kind;";
public:
    STATICINITIALIZE;

    WatchEvent_Kind_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.nio.file.WatchEvent$Modifier;
 */
class WatchEvent_Modifier_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.WatchEvent$Modifier;";
public:
    STATICINITIALIZE;

    WatchEvent_Modifier_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.nio.file.LinkOption;
 */
class LinkOption_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.LinkOption;";
public:
    STATICINITIALIZE;

    LinkOption_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.file.FileSystem
 * Package name: java.nio.file
 */
class FileSystem : public Object {
protected:
    const inline static char *className = "java.nio.file.FileSystem";
public:
    STATICINITIALIZE;

    FileSystem(jobject object) : JavaObject(object) {}

    bool isOpen() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpen", "()Z", )); }

    FileSystemProvider provider() { return FileSystemProvider(*javaClass->invokeMethod<jobject>(this->object, "provider", "()Ljava.nio.file.spi.FileSystemProvider;", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    Path getPath(String arg0, String_interface arg1) { return Path(*javaClass->invokeMethod<jobject>(this->object, "getPath", "(Ljava.lang.String;[Ljava.lang.String;)Ljava.nio.file.Path;", arg0, arg1)); }

    bool isReadOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadOnly", "()Z", )); }

    String getSeparator() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSeparator", "()Ljava.lang.String;", )); }

    Set supportedFileAttributeViews() { return Set(*javaClass->invokeMethod<jobject>(this->object, "supportedFileAttributeViews", "()Ljava.util.Set;", )); }

    WatchService newWatchService() { return WatchService(*javaClass->invokeMethod<jobject>(this->object, "newWatchService", "()Ljava.nio.file.WatchService;", )); }

    Iterable getRootDirectories() { return Iterable(*javaClass->invokeMethod<jobject>(this->object, "getRootDirectories", "()Ljava.lang.Iterable;", )); }

    Iterable getFileStores() { return Iterable(*javaClass->invokeMethod<jobject>(this->object, "getFileStores", "()Ljava.lang.Iterable;", )); }

    PathMatcher getPathMatcher(String arg0) { return PathMatcher(*javaClass->invokeMethod<jobject>(this->object, "getPathMatcher", "(Ljava.lang.String;)Ljava.nio.file.PathMatcher;", arg0)); }

    UserPrincipalLookupService getUserPrincipalLookupService() { return UserPrincipalLookupService(*javaClass->invokeMethod<jobject>(this->object, "getUserPrincipalLookupService", "()Ljava.nio.file.attribute.UserPrincipalLookupService;", )); }

};


/**
 * Classpath: java.nio.file.spi.FileSystemProvider
 * Package name: java.nio.file.spi
 */
class FileSystemProvider : public Object {
protected:
    const inline static char *className = "java.nio.file.spi.FileSystemProvider";
public:
    STATICINITIALIZE;

    FileSystemProvider(jobject object) : JavaObject(object) {}

    bool isHidden(Path arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHidden", "(Ljava.nio.file.Path;)Z", arg0)); }

    static Void checkPermission() { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "checkPermission", "()Ljava.lang.Void;", )); }

    void delete(Path arg0) { (*javaClass->invokeMethod<void>(this->object, "delete", "(Ljava.nio.file.Path;)V", arg0)); }

    void checkAccess(Path arg0, AccessMode_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "(Ljava.nio.file.Path;[Ljava.nio.file.AccessMode;)V", arg0, arg1)); }

    void copy(Path arg0, Path arg1, CopyOption_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "copy", "(Ljava.nio.file.Path;Ljava.nio.file.Path;[Ljava.nio.file.CopyOption;)V", arg0, arg1, arg2)); }

    String getScheme() { return String(*javaClass->invokeMethod<jobject>(this->object, "getScheme", "()Ljava.lang.String;", )); }

    Path getPath(URI arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "getPath", "(Ljava.net.URI;)Ljava.nio.file.Path;", arg0)); }

    void createDirectory(Path arg0, FileAttribute_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "createDirectory", "(Ljava.nio.file.Path;[Ljava.nio.file.attribute.FileAttribute;)V", arg0, arg1)); }

    FileSystem getFileSystem(URI arg0) { return FileSystem(*javaClass->invokeMethod<jobject>(this->object, "getFileSystem", "(Ljava.net.URI;)Ljava.nio.file.FileSystem;", arg0)); }

    DirectoryStream newDirectoryStream(Path arg0, DirectoryStream_Filter arg1) { return DirectoryStream(*javaClass->invokeMethod<jobject>(this->object, "newDirectoryStream", "(Ljava.nio.file.Path;Ljava.nio.file.DirectoryStream$Filter;)Ljava.nio.file.DirectoryStream;", arg0, arg1)); }

    FileSystem newFileSystem(URI arg0, Map arg1) { return FileSystem(*javaClass->invokeMethod<jobject>(this->object, "newFileSystem", "(Ljava.net.URI;Ljava.util.Map;)Ljava.nio.file.FileSystem;", arg0, arg1)); }

    FileSystem newFileSystem(Path arg0, Map arg1) { return FileSystem(*javaClass->invokeMethod<jobject>(this->object, "newFileSystem", "(Ljava.nio.file.Path;Ljava.util.Map;)Ljava.nio.file.FileSystem;", arg0, arg1)); }

    FileAttributeView getFileAttributeView(Path arg0, Class arg1, LinkOption_interface arg2) { return FileAttributeView(*javaClass->invokeMethod<jobject>(this->object, "getFileAttributeView", "(Ljava.nio.file.Path;Ljava.lang.Class;[Ljava.nio.file.LinkOption;)Ljava.nio.file.attribute.FileAttributeView;", arg0, arg1, arg2)); }

    FileStore getFileStore(Path arg0) { return FileStore(*javaClass->invokeMethod<jobject>(this->object, "getFileStore", "(Ljava.nio.file.Path;)Ljava.nio.file.FileStore;", arg0)); }

    BasicFileAttributes readAttributes(Path arg0, Class arg1, LinkOption_interface arg2) { return BasicFileAttributes(*javaClass->invokeMethod<jobject>(this->object, "readAttributes", "(Ljava.nio.file.Path;Ljava.lang.Class;[Ljava.nio.file.LinkOption;)Ljava.nio.file.attribute.BasicFileAttributes;", arg0, arg1, arg2)); }

    Map readAttributes(Path arg0, String arg1, LinkOption_interface arg2) { return Map(*javaClass->invokeMethod<jobject>(this->object, "readAttributes", "(Ljava.nio.file.Path;Ljava.lang.String;[Ljava.nio.file.LinkOption;)Ljava.util.Map;", arg0, arg1, arg2)); }

    FileChannel newFileChannel(Path arg0, Set arg1, FileAttribute_interface arg2) { return FileChannel(*javaClass->invokeMethod<jobject>(this->object, "newFileChannel", "(Ljava.nio.file.Path;Ljava.util.Set;[Ljava.nio.file.attribute.FileAttribute;)Ljava.nio.channels.FileChannel;", arg0, arg1, arg2)); }

    AsynchronousFileChannel newAsynchronousFileChannel(Path arg0, Set arg1, ExecutorService arg2, FileAttribute_interface arg3) { return AsynchronousFileChannel(*javaClass->invokeMethod<jobject>(this->object, "newAsynchronousFileChannel", "(Ljava.nio.file.Path;Ljava.util.Set;Ljava.util.concurrent.ExecutorService;[Ljava.nio.file.attribute.FileAttribute;)Ljava.nio.channels.AsynchronousFileChannel;", arg0, arg1, arg2, arg3)); }

    void move(Path arg0, Path arg1, CopyOption_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "move", "(Ljava.nio.file.Path;Ljava.nio.file.Path;[Ljava.nio.file.CopyOption;)V", arg0, arg1, arg2)); }

    bool isSameFile(Path arg0, Path arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSameFile", "(Ljava.nio.file.Path;Ljava.nio.file.Path;)Z", arg0, arg1)); }

    SeekableByteChannel newByteChannel(Path arg0, Set arg1, FileAttribute_interface arg2) { return SeekableByteChannel(*javaClass->invokeMethod<jobject>(this->object, "newByteChannel", "(Ljava.nio.file.Path;Ljava.util.Set;[Ljava.nio.file.attribute.FileAttribute;)Ljava.nio.channels.SeekableByteChannel;", arg0, arg1, arg2)); }

    void createSymbolicLink(Path arg0, Path arg1, FileAttribute_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "createSymbolicLink", "(Ljava.nio.file.Path;Ljava.nio.file.Path;[Ljava.nio.file.attribute.FileAttribute;)V", arg0, arg1, arg2)); }

    void createLink(Path arg0, Path arg1) { (*javaClass->invokeMethod<void>(this->object, "createLink", "(Ljava.nio.file.Path;Ljava.nio.file.Path;)V", arg0, arg1)); }

    Path readSymbolicLink(Path arg0) { return Path(*javaClass->invokeMethod<jobject>(this->object, "readSymbolicLink", "(Ljava.nio.file.Path;)Ljava.nio.file.Path;", arg0)); }

    void setAttribute(Path arg0, String arg1, Object arg2, LinkOption_interface arg3) { (*javaClass->invokeMethod<void>(this->object, "setAttribute", "(Ljava.nio.file.Path;Ljava.lang.String;Ljava.lang.Object;[Ljava.nio.file.LinkOption;)V", arg0, arg1, arg2, arg3)); }

    bool deleteIfExists(Path arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "deleteIfExists", "(Ljava.nio.file.Path;)Z", arg0)); }

    static List installedProviders() { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "installedProviders", "()Ljava.util.List;", )); }

    InputStream newInputStream(Path arg0, OpenOption_interface arg1) { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "newInputStream", "(Ljava.nio.file.Path;[Ljava.nio.file.OpenOption;)Ljava.io.InputStream;", arg0, arg1)); }

    OutputStream newOutputStream(Path arg0, OpenOption_interface arg1) { return OutputStream(*javaClass->invokeMethod<jobject>(this->object, "newOutputStream", "(Ljava.nio.file.Path;[Ljava.nio.file.OpenOption;)Ljava.io.OutputStream;", arg0, arg1)); }

    static List loadInstalledProviders() { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "loadInstalledProviders", "()Ljava.util.List;", )); }

};


/**
 * Classpath: [Ljava.nio.file.AccessMode;
 */
class AccessMode_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.AccessMode;";
public:
    STATICINITIALIZE;

    AccessMode_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.nio.file.CopyOption;
 */
class CopyOption_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.CopyOption;";
public:
    STATICINITIALIZE;

    CopyOption_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.nio.file.attribute.FileAttribute;
 */
class FileAttribute_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.attribute.FileAttribute;";
public:
    STATICINITIALIZE;

    FileAttribute_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.file.DirectoryStream$Filter
 * Enclosing class: java.nio.file.DirectoryStream
 * Package name: java.nio.file
 */
class DirectoryStream_Filter : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.DirectoryStream$Filter";
public:
    STATICINITIALIZE;

    DirectoryStream_Filter(jobject object) : JavaObject(object) {}

    bool accept(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accept", "(Ljava.lang.Object;)Z", arg0)); }

};


/**
 * Classpath: java.nio.file.DirectoryStream
 * Package name: java.nio.file
 */
class DirectoryStream : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.DirectoryStream";
public:
    STATICINITIALIZE;

    DirectoryStream(jobject object) : JavaObject(object) {}

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

};


/**
 * Classpath: java.nio.file.attribute.FileAttributeView
 * Package name: java.nio.file.attribute
 */
class FileAttributeView : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.attribute.FileAttributeView";
public:
    STATICINITIALIZE;

    FileAttributeView(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.file.FileStore
 * Package name: java.nio.file
 */
class FileStore : public Object {
protected:
    const inline static char *className = "java.nio.file.FileStore";
public:
    STATICINITIALIZE;

    FileStore(jobject object) : JavaObject(object) {}

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    String type() { return String(*javaClass->invokeMethod<jobject>(this->object, "type", "()Ljava.lang.String;", )); }

    bool isReadOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadOnly", "()Z", )); }

    long getTotalSpace() { return long(*javaClass->invokeMethod<long>(this->object, "getTotalSpace", "()J", )); }

    long getUsableSpace() { return long(*javaClass->invokeMethod<long>(this->object, "getUsableSpace", "()J", )); }

    Object getAttribute(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAttribute", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    long getUnallocatedSpace() { return long(*javaClass->invokeMethod<long>(this->object, "getUnallocatedSpace", "()J", )); }

    long getBlockSize() { return long(*javaClass->invokeMethod<long>(this->object, "getBlockSize", "()J", )); }

    bool supportsFileAttributeView(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "supportsFileAttributeView", "(Ljava.lang.Class;)Z", arg0)); }

    bool supportsFileAttributeView(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "supportsFileAttributeView", "(Ljava.lang.String;)Z", arg0)); }

    FileStoreAttributeView getFileStoreAttributeView(Class arg0) { return FileStoreAttributeView(*javaClass->invokeMethod<jobject>(this->object, "getFileStoreAttributeView", "(Ljava.lang.Class;)Ljava.nio.file.attribute.FileStoreAttributeView;", arg0)); }

};


/**
 * Classpath: java.nio.file.attribute.FileStoreAttributeView
 * Package name: java.nio.file.attribute
 */
class FileStoreAttributeView : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.attribute.FileStoreAttributeView";
public:
    STATICINITIALIZE;

    FileStoreAttributeView(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.file.attribute.BasicFileAttributes
 * Package name: java.nio.file.attribute
 */
class BasicFileAttributes : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.attribute.BasicFileAttributes";
public:
    STATICINITIALIZE;

    BasicFileAttributes(jobject object) : JavaObject(object) {}

    long size() { return long(*javaClass->invokeMethod<long>(this->object, "size", "()J", )); }

    bool isOther() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOther", "()Z", )); }

    bool isDirectory() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirectory", "()Z", )); }

    bool isRegularFile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRegularFile", "()Z", )); }

    bool isSymbolicLink() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSymbolicLink", "()Z", )); }

    FileTime lastModifiedTime() { return FileTime(*javaClass->invokeMethod<jobject>(this->object, "lastModifiedTime", "()Ljava.nio.file.attribute.FileTime;", )); }

    Object fileKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "fileKey", "()Ljava.lang.Object;", )); }

    FileTime lastAccessTime() { return FileTime(*javaClass->invokeMethod<jobject>(this->object, "lastAccessTime", "()Ljava.nio.file.attribute.FileTime;", )); }

    FileTime creationTime() { return FileTime(*javaClass->invokeMethod<jobject>(this->object, "creationTime", "()Ljava.nio.file.attribute.FileTime;", )); }

};


/**
 * Classpath: java.nio.file.attribute.FileTime
 * Package name: java.nio.file.attribute
 */
class FileTime : public Object {
protected:
    const inline static char *className = "java.nio.file.attribute.FileTime";
public:
    STATICINITIALIZE;

    FileTime(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    StringBuilder append(StringBuilder arg0, int arg1, int arg2) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.StringBuilder;II)Ljava.lang.StringBuilder;", arg0, arg1, arg2)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(FileTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.file.attribute.FileTime;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static long scale(long arg0, long arg1, long arg2) { return long(*javaClass->invokeStaticMethod<long>(this->object, "scale", "(JJJ)J", arg0, arg1, arg2)); }

    long to(TimeUnit arg0) { return long(*javaClass->invokeMethod<long>(this->object, "to", "(Ljava.util.concurrent.TimeUnit;)J", arg0)); }

    static FileTime from(long arg0, TimeUnit arg1) { return FileTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(JLjava.util.concurrent.TimeUnit;)Ljava.nio.file.attribute.FileTime;", arg0, arg1)); }

    static FileTime from(Instant arg0) { return FileTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.Instant;)Ljava.nio.file.attribute.FileTime;", arg0)); }

    long toMillis() { return long(*javaClass->invokeMethod<long>(this->object, "toMillis", "()J", )); }

    long toDays() { return long(*javaClass->invokeMethod<long>(this->object, "toDays", "()J", )); }

    Instant toInstant() { return Instant(*javaClass->invokeMethod<jobject>(this->object, "toInstant", "()Ljava.time.Instant;", )); }

    long toExcessNanos(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toExcessNanos", "(J)J", arg0)); }

    static FileTime fromMillis(long arg0) { return FileTime(*javaClass->invokeStaticMethod<jobject>(this->object, "fromMillis", "(J)Ljava.nio.file.attribute.FileTime;", arg0)); }

};


/**
 * Classpath: java.time.Instant
 * Package name: java.time
 */
class Instant : public Object {
protected:
    const inline static char *className = "java.time.Instant";
public:
    STATICINITIALIZE;

    Instant(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Instant arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.Instant;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    static Instant from(TemporalAccessor arg0) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.Instant;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    static Instant create(long arg0, int arg1) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(JI)Ljava.time.Instant;", arg0, arg1)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    static Instant now() { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "()Ljava.time.Instant;", )); }

    static Instant now(Clock arg0) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.Clock;)Ljava.time.Instant;", arg0)); }

    int getNano() { return int(*javaClass->invokeMethod<int>(this->object, "getNano", "()I", )); }

    long getEpochSecond() { return long(*javaClass->invokeMethod<long>(this->object, "getEpochSecond", "()J", )); }

    static Instant ofEpochSecond(long arg0) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "ofEpochSecond", "(J)Ljava.time.Instant;", arg0)); }

    static Instant ofEpochSecond(long arg0, long arg1) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "ofEpochSecond", "(JJ)Ljava.time.Instant;", arg0, arg1)); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    Instant plus(long arg0, long arg1) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JJ)Ljava.time.Instant;", arg0, arg1)); }

    Instant plus(long arg0, TemporalUnit arg1) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.Instant;", arg0, arg1)); }

    Instant plus(TemporalAmount arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.Instant;", arg0)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    Instant plusNanos(long arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava.time.Instant;", arg0)); }

    Instant plusSeconds(long arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava.time.Instant;", arg0)); }

    Instant plusMillis(long arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "plusMillis", "(J)Ljava.time.Instant;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Instant minus(long arg0, TemporalUnit arg1) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.Instant;", arg0, arg1)); }

    Instant minus(TemporalAmount arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.Instant;", arg0)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    static Instant readExternal(DataInput arg0) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.Instant;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    long nanosUntil(Instant arg0) { return long(*javaClass->invokeMethod<long>(this->object, "nanosUntil", "(Ljava.time.Instant;)J", arg0)); }

    long toEpochMilli() { return long(*javaClass->invokeMethod<long>(this->object, "toEpochMilli", "()J", )); }

    long secondsUntil(Instant arg0) { return long(*javaClass->invokeMethod<long>(this->object, "secondsUntil", "(Ljava.time.Instant;)J", arg0)); }

    OffsetDateTime atOffset(ZoneOffset arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "atOffset", "(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0)); }

    ZonedDateTime atZone(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "atZone", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    bool isAfter(Instant arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.Instant;)Z", arg0)); }

    bool isBefore(Instant arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.Instant;)Z", arg0)); }

    static Instant parse(CharSequence arg0) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.Instant;", arg0)); }

    static Instant ofEpochMilli(long arg0) { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "ofEpochMilli", "(J)Ljava.time.Instant;", arg0)); }

    Instant minusSeconds(long arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava.time.Instant;", arg0)); }

    Instant minusMillis(long arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "minusMillis", "(J)Ljava.time.Instant;", arg0)); }

    Instant minusNanos(long arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava.time.Instant;", arg0)); }

    Instant truncatedTo(TemporalUnit arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava.time.temporal.TemporalUnit;)Ljava.time.Instant;", arg0)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Instant with(TemporalAdjuster arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.Instant;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    Instant with(TemporalField arg0, long arg1) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.Instant;", arg0, arg1)); }

};


/**
 * Classpath: java.time.Clock
 * Package name: java.time
 */
class Clock : public Object {
protected:
    const inline static char *className = "java.time.Clock";
public:
    STATICINITIALIZE;

    Clock(jobject object) : JavaObject(object) {}

    static Clock tick(Clock arg0, Duration arg1) { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "tick", "(Ljava.time.Clock;Ljava.time.Duration;)Ljava.time.Clock;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static Clock offset(Clock arg0, Duration arg1) { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "offset", "(Ljava.time.Clock;Ljava.time.Duration;)Ljava.time.Clock;", arg0, arg1)); }

    long millis() { return long(*javaClass->invokeMethod<long>(this->object, "millis", "()J", )); }

    static Clock system(ZoneId arg0) { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "system", "(Ljava.time.ZoneId;)Ljava.time.Clock;", arg0)); }

    static Clock fixed(Instant arg0, ZoneId arg1) { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "fixed", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.Clock;", arg0, arg1)); }

    Instant instant() { return Instant(*javaClass->invokeMethod<jobject>(this->object, "instant", "()Ljava.time.Instant;", )); }

    ZoneId getZone() { return ZoneId(*javaClass->invokeMethod<jobject>(this->object, "getZone", "()Ljava.time.ZoneId;", )); }

    static Instant currentInstant() { return Instant(*javaClass->invokeStaticMethod<jobject>(this->object, "currentInstant", "()Ljava.time.Instant;", )); }

    static Clock systemUTC() { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "systemUTC", "()Ljava.time.Clock;", )); }

    static Clock systemDefaultZone() { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "systemDefaultZone", "()Ljava.time.Clock;", )); }

    static Clock tickMillis(ZoneId arg0) { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "tickMillis", "(Ljava.time.ZoneId;)Ljava.time.Clock;", arg0)); }

    static Clock tickSeconds(ZoneId arg0) { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "tickSeconds", "(Ljava.time.ZoneId;)Ljava.time.Clock;", arg0)); }

    static Clock tickMinutes(ZoneId arg0) { return Clock(*javaClass->invokeStaticMethod<jobject>(this->object, "tickMinutes", "(Ljava.time.ZoneId;)Ljava.time.Clock;", arg0)); }

    Clock withZone(ZoneId arg0) { return Clock(*javaClass->invokeMethod<jobject>(this->object, "withZone", "(Ljava.time.ZoneId;)Ljava.time.Clock;", arg0)); }

};


/**
 * Classpath: java.time.ZoneId
 * Package name: java.time
 */
class ZoneId : public Object {
protected:
    const inline static char *className = "java.time.ZoneId";
public:
    STATICINITIALIZE;

    ZoneId(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ZoneId of(String arg0) { return ZoneId(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;)Ljava.time.ZoneId;", arg0)); }

    static ZoneId of(String arg0, Map arg1) { return ZoneId(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;Ljava.util.Map;)Ljava.time.ZoneId;", arg0, arg1)); }

    static ZoneId of(String arg0, bool arg1) { return ZoneId(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;Z)Ljava.time.ZoneId;", arg0, arg1)); }

    static ZoneId from(TemporalAccessor arg0) { return ZoneId(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZoneId;", arg0)); }

    void write(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.io.DataOutput;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String getId() { return String(*javaClass->invokeMethod<jobject>(this->object, "getId", "()Ljava.lang.String;", )); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    ZoneId normalized() { return ZoneId(*javaClass->invokeMethod<jobject>(this->object, "normalized", "()Ljava.time.ZoneId;", )); }

    static Set getAvailableZoneIds() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getAvailableZoneIds", "()Ljava.util.Set;", )); }

    static ZoneId ofWithPrefix(String arg0, int arg1, bool arg2) { return ZoneId(*javaClass->invokeStaticMethod<jobject>(this->object, "ofWithPrefix", "(Ljava.lang.String;IZ)Ljava.time.ZoneId;", arg0, arg1, arg2)); }

    static ZoneId ofOffset(String arg0, ZoneOffset arg1) { return ZoneId(*javaClass->invokeStaticMethod<jobject>(this->object, "ofOffset", "(Ljava.lang.String;Ljava.time.ZoneOffset;)Ljava.time.ZoneId;", arg0, arg1)); }

    TemporalAccessor toTemporal() { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "toTemporal", "()Ljava.time.temporal.TemporalAccessor;", )); }

    String getDisplayName(TextStyle arg0, Locale arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1)); }

    static ZoneId systemDefault() { return ZoneId(*javaClass->invokeStaticMethod<jobject>(this->object, "systemDefault", "()Ljava.time.ZoneId;", )); }

    ZoneRules getRules() { return ZoneRules(*javaClass->invokeMethod<jobject>(this->object, "getRules", "()Ljava.time.zone.ZoneRules;", )); }

};


/**
 * Classpath: java.time.ZoneOffset
 * Package name: java.time
 */
class ZoneOffset : public ZoneId {
protected:
    const inline static char *className = "java.time.ZoneOffset";
public:
    STATICINITIALIZE;

    ZoneOffset(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ZoneOffset arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.ZoneOffset;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    static ZoneOffset of(String arg0) { return ZoneOffset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;)Ljava.time.ZoneOffset;", arg0)); }

    static ZoneOffset from(TemporalAccessor arg0) { return ZoneOffset(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZoneOffset;", arg0)); }

    static void validate(int arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "validate", "(III)V", arg0, arg1, arg2)); }

    void write(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.io.DataOutput;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String getId() { return String(*javaClass->invokeMethod<jobject>(this->object, "getId", "()Ljava.lang.String;", )); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    static int parseNumber(CharSequence arg0, int arg1, bool arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseNumber", "(Ljava.lang.CharSequence;IZ)I", arg0, arg1, arg2)); }

    static ZoneOffset ofHours(int arg0) { return ZoneOffset(*javaClass->invokeStaticMethod<jobject>(this->object, "ofHours", "(I)Ljava.time.ZoneOffset;", arg0)); }

    static ZoneOffset readExternal(DataInput arg0) { return ZoneOffset(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.ZoneOffset;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    static ZoneOffset ofHoursMinutesSeconds(int arg0, int arg1, int arg2) { return ZoneOffset(*javaClass->invokeStaticMethod<jobject>(this->object, "ofHoursMinutesSeconds", "(III)Ljava.time.ZoneOffset;", arg0, arg1, arg2)); }

    static int totalSeconds(int arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "totalSeconds", "(III)I", arg0, arg1, arg2)); }

    static ZoneOffset ofTotalSeconds(int arg0) { return ZoneOffset(*javaClass->invokeStaticMethod<jobject>(this->object, "ofTotalSeconds", "(I)Ljava.time.ZoneOffset;", arg0)); }

    static String buildId(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "buildId", "(I)Ljava.lang.String;", arg0)); }

    static ZoneOffset ofHoursMinutes(int arg0, int arg1) { return ZoneOffset(*javaClass->invokeStaticMethod<jobject>(this->object, "ofHoursMinutes", "(II)Ljava.time.ZoneOffset;", arg0, arg1)); }

    int getTotalSeconds() { return int(*javaClass->invokeMethod<int>(this->object, "getTotalSeconds", "()I", )); }

    ZoneRules getRules() { return ZoneRules(*javaClass->invokeMethod<jobject>(this->object, "getRules", "()Ljava.time.zone.ZoneRules;", )); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.zone.ZoneRules
 * Package name: java.time.zone
 */
class ZoneRules : public Object {
protected:
    const inline static char *className = "java.time.zone.ZoneRules";
public:
    STATICINITIALIZE;

    ZoneRules(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ZoneRules of(ZoneOffset arg0, ZoneOffset arg1, List arg2, List arg3, List arg4) { return ZoneRules(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.ZoneOffset;Ljava.time.ZoneOffset;Ljava.util.List;Ljava.util.List;Ljava.util.List;)Ljava.time.zone.ZoneRules;", arg0, arg1, arg2, arg3, arg4)); }

    static ZoneRules of(ZoneOffset arg0) { return ZoneRules(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.ZoneOffset;)Ljava.time.zone.ZoneRules;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    ZoneOffset getOffset(LocalDateTime arg0) { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffset", "(Ljava.time.LocalDateTime;)Ljava.time.ZoneOffset;", arg0)); }

    ZoneOffset getOffset(Instant arg0) { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffset", "(Ljava.time.Instant;)Ljava.time.ZoneOffset;", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    static ZoneRules readExternal(DataInput arg0) { return ZoneRules(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.zone.ZoneRules;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    bool isFixedOffset() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFixedOffset", "()Z", )); }

    List getValidOffsets(LocalDateTime arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getValidOffsets", "(Ljava.time.LocalDateTime;)Ljava.util.List;", arg0)); }

    ZoneOffsetTransition getTransition(LocalDateTime arg0) { return ZoneOffsetTransition(*javaClass->invokeMethod<jobject>(this->object, "getTransition", "(Ljava.time.LocalDateTime;)Ljava.time.zone.ZoneOffsetTransition;", arg0)); }

    bool isValidOffset(LocalDateTime arg0, ZoneOffset arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidOffset", "(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;)Z", arg0, arg1)); }

    int findYear(long arg0, ZoneOffset arg1) { return int(*javaClass->invokeMethod<int>(this->object, "findYear", "(JLjava.time.ZoneOffset;)I", arg0, arg1)); }

    Object getOffsetInfo(LocalDateTime arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOffsetInfo", "(Ljava.time.LocalDateTime;)Ljava.lang.Object;", arg0)); }

    Object findOffsetInfo(LocalDateTime arg0, ZoneOffsetTransition arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "findOffsetInfo", "(Ljava.time.LocalDateTime;Ljava.time.zone.ZoneOffsetTransition;)Ljava.lang.Object;", arg0, arg1)); }

    ZoneOffset getStandardOffset(Instant arg0) { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getStandardOffset", "(Ljava.time.Instant;)Ljava.time.ZoneOffset;", arg0)); }

    Duration getDaylightSavings(Instant arg0) { return Duration(*javaClass->invokeMethod<jobject>(this->object, "getDaylightSavings", "(Ljava.time.Instant;)Ljava.time.Duration;", arg0)); }

    bool isDaylightSavings(Instant arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDaylightSavings", "(Ljava.time.Instant;)Z", arg0)); }

    ZoneOffsetTransition nextTransition(Instant arg0) { return ZoneOffsetTransition(*javaClass->invokeMethod<jobject>(this->object, "nextTransition", "(Ljava.time.Instant;)Ljava.time.zone.ZoneOffsetTransition;", arg0)); }

    ZoneOffsetTransition previousTransition(Instant arg0) { return ZoneOffsetTransition(*javaClass->invokeMethod<jobject>(this->object, "previousTransition", "(Ljava.time.Instant;)Ljava.time.zone.ZoneOffsetTransition;", arg0)); }

    List getTransitions() { return List(*javaClass->invokeMethod<jobject>(this->object, "getTransitions", "()Ljava.util.List;", )); }

    List getTransitionRules() { return List(*javaClass->invokeMethod<jobject>(this->object, "getTransitionRules", "()Ljava.util.List;", )); }

};


/**
 * Classpath: java.time.LocalDateTime
 * Package name: java.time
 */
class LocalDateTime : public Object {
protected:
    const inline static char *className = "java.time.LocalDateTime";
public:
    STATICINITIALIZE;

    LocalDateTime(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ChronoLocalDateTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.chrono.ChronoLocalDateTime;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static LocalDateTime of(int arg0, Month arg1, int arg2, int arg3, int arg4) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(ILjava.time.Month;III)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3, arg4)); }

    static LocalDateTime of(int arg0, Month arg1, int arg2, int arg3, int arg4, int arg5) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(ILjava.time.Month;IIII)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static LocalDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(IIIIII)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static LocalDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(IIIII)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3, arg4)); }

    static LocalDateTime of(LocalDate arg0, LocalTime arg1) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.LocalDate;Ljava.time.LocalTime;)Ljava.time.LocalDateTime;", arg0, arg1)); }

    static LocalDateTime of(int arg0, Month arg1, int arg2, int arg3, int arg4, int arg5, int arg6) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(ILjava.time.Month;IIIII)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static LocalDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(IIIIIII)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static LocalDateTime from(TemporalAccessor arg0) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDateTime;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    bool isEqual(ChronoLocalDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljava.time.chrono.ChronoLocalDateTime;)Z", arg0)); }

    static LocalDateTime now() { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "()Ljava.time.LocalDateTime;", )); }

    static LocalDateTime now(ZoneId arg0) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.ZoneId;)Ljava.time.LocalDateTime;", arg0)); }

    static LocalDateTime now(Clock arg0) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.Clock;)Ljava.time.LocalDateTime;", arg0)); }

    int getNano() { return int(*javaClass->invokeMethod<int>(this->object, "getNano", "()I", )); }

    static LocalDateTime ofEpochSecond(long arg0, int arg1, ZoneOffset arg2) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofEpochSecond", "(JILjava.time.ZoneOffset;)Ljava.time.LocalDateTime;", arg0, arg1, arg2)); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    LocalDateTime plus(TemporalAmount arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plus(long arg0, TemporalUnit arg1) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDateTime;", arg0, arg1)); }

    ChronoLocalDateTime plus(TemporalAmount arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    ChronoLocalDateTime plus(long arg0, TemporalUnit arg1) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDateTime;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    LocalDateTime plusNanos(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusSeconds(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusDays(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusHours(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusMinutes(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minus(TemporalAmount arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDateTime;", arg0)); }

    ChronoLocalDateTime minus(TemporalAmount arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    LocalDateTime minus(long arg0, TemporalUnit arg1) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDateTime;", arg0, arg1)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDateTime minus(long arg0, TemporalUnit arg1) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDateTime;", arg0, arg1)); }

    static LocalDateTime readExternal(DataInput arg0) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.LocalDateTime;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    OffsetDateTime atOffset(ZoneOffset arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "atOffset", "(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0)); }

    ChronoZonedDateTime atZone(ZoneId arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "atZone", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ZonedDateTime atZone(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "atZone", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    bool isAfter(ChronoLocalDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.chrono.ChronoLocalDateTime;)Z", arg0)); }

    bool isBefore(ChronoLocalDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.chrono.ChronoLocalDateTime;)Z", arg0)); }

    LocalTime toLocalTime() { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava.time.LocalTime;", )); }

    LocalDate toLocalDate() { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava.time.LocalDate;", )); }

    ChronoLocalDate toLocalDate() { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava.time.chrono.ChronoLocalDate;", )); }

    Month getMonth() { return Month(*javaClass->invokeMethod<jobject>(this->object, "getMonth", "()Ljava.time.Month;", )); }

    int getDayOfYear() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfYear", "()I", )); }

    DayOfWeek getDayOfWeek() { return DayOfWeek(*javaClass->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava.time.DayOfWeek;", )); }

    LocalDateTime withYear(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime withMonth(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime withDayOfMonth(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime withDayOfYear(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime withHour(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime withMinute(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime withSecond(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime withNano(int arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusYears(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusMonths(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusWeeks(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minusYears(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minusMonths(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minusWeeks(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime plusWithOverflow(LocalDate arg0, long arg1, long arg2, long arg3, long arg4, int arg5) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusWithOverflow", "(Ljava.time.LocalDate;JJJJI)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    int compareTo0(LocalDateTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo0", "(Ljava.time.LocalDateTime;)I", arg0)); }

    static LocalDateTime parse(CharSequence arg0) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.LocalDateTime;", arg0)); }

    static LocalDateTime parse(CharSequence arg0, DateTimeFormatter arg1) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.LocalDateTime;", arg0, arg1)); }

    int getYear() { return int(*javaClass->invokeMethod<int>(this->object, "getYear", "()I", )); }

    int getMonthValue() { return int(*javaClass->invokeMethod<int>(this->object, "getMonthValue", "()I", )); }

    int getDayOfMonth() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfMonth", "()I", )); }

    int getHour() { return int(*javaClass->invokeMethod<int>(this->object, "getHour", "()I", )); }

    int getMinute() { return int(*javaClass->invokeMethod<int>(this->object, "getMinute", "()I", )); }

    int getSecond() { return int(*javaClass->invokeMethod<int>(this->object, "getSecond", "()I", )); }

    static LocalDateTime ofInstant(Instant arg0, ZoneId arg1) { return LocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofInstant", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.LocalDateTime;", arg0, arg1)); }

    LocalDateTime minusDays(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minusHours(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minusMinutes(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minusSeconds(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime minusNanos(long arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava.time.LocalDateTime;", arg0)); }

    LocalDateTime truncatedTo(TemporalUnit arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava.time.temporal.TemporalUnit;)Ljava.time.LocalDateTime;", arg0)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDateTime with(TemporalField arg0, long arg1) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.chrono.ChronoLocalDateTime;", arg0, arg1)); }

    ChronoLocalDateTime with(TemporalAdjuster arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    LocalDateTime with(LocalDate arg0, LocalTime arg1) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.LocalDate;Ljava.time.LocalTime;)Ljava.time.LocalDateTime;", arg0, arg1)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    LocalDateTime with(TemporalField arg0, long arg1) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.LocalDateTime;", arg0, arg1)); }

    LocalDateTime with(TemporalAdjuster arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.LocalDateTime;", arg0)); }

};


/**
 * Classpath: java.time.chrono.ChronoLocalDateTime
 * Package name: java.time.chrono
 */
class ChronoLocalDateTime : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.ChronoLocalDateTime";
public:
    STATICINITIALIZE;

    ChronoLocalDateTime(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ChronoLocalDateTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.chrono.ChronoLocalDateTime;)I", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static ChronoLocalDateTime from(TemporalAccessor arg0) { return ChronoLocalDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    static Object _deserializeLambda_(SerializedLambda arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "$deserializeLambda$", "(Ljava.lang.invoke.SerializedLambda;)Ljava.lang.Object;", arg0)); }

    bool isEqual(ChronoLocalDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljava.time.chrono.ChronoLocalDateTime;)Z", arg0)); }

    Instant toInstant(ZoneOffset arg0) { return Instant(*javaClass->invokeMethod<jobject>(this->object, "toInstant", "(Ljava.time.ZoneOffset;)Ljava.time.Instant;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDateTime plus(TemporalAmount arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    ChronoLocalDateTime plus(long arg0, TemporalUnit arg1) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDateTime;", arg0, arg1)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDateTime minus(long arg0, TemporalUnit arg1) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDateTime;", arg0, arg1)); }

    ChronoLocalDateTime minus(TemporalAmount arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    ChronoZonedDateTime atZone(ZoneId arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "atZone", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    bool isAfter(ChronoLocalDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.chrono.ChronoLocalDateTime;)Z", arg0)); }

    bool isBefore(ChronoLocalDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.chrono.ChronoLocalDateTime;)Z", arg0)); }

    LocalTime toLocalTime() { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava.time.LocalTime;", )); }

    ChronoLocalDate toLocalDate() { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava.time.chrono.ChronoLocalDate;", )); }

    static Comparator timeLineOrder() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "timeLineOrder", "()Ljava.util.Comparator;", )); }

    Chronology getChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.Chronology;", )); }

    static int lambda_timeLineOrder_b9959cb5_1(ChronoLocalDateTime arg0, ChronoLocalDateTime arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$timeLineOrder$b9959cb5$1", "(Ljava.time.chrono.ChronoLocalDateTime;Ljava.time.chrono.ChronoLocalDateTime;)I", arg0, arg1)); }

    long toEpochSecond(ZoneOffset arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toEpochSecond", "(Ljava.time.ZoneOffset;)J", arg0)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoLocalDateTime with(TemporalAdjuster arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDateTime with(TemporalField arg0, long arg1) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.chrono.ChronoLocalDateTime;", arg0, arg1)); }

};


/**
 * Classpath: java.time.format.DateTimeFormatter
 * Package name: java.time.format
 */
class DateTimeFormatter : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeFormatter";
public:
    STATICINITIALIZE;

    DateTimeFormatter(jobject object) : JavaObject(object) {}

    DateTimeParseContext parseUnresolved0(CharSequence arg0, ParsePosition arg1) { return DateTimeParseContext(*javaClass->invokeMethod<jobject>(this->object, "parseUnresolved0", "(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.format.DateTimeParseContext;", arg0, arg1)); }

    static DateTimeFormatter ofPattern(String arg0) { return DateTimeFormatter(*javaClass->invokeStaticMethod<jobject>(this->object, "ofPattern", "(Ljava.lang.String;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    static DateTimeFormatter ofPattern(String arg0, Locale arg1) { return DateTimeFormatter(*javaClass->invokeStaticMethod<jobject>(this->object, "ofPattern", "(Ljava.lang.String;Ljava.util.Locale;)Ljava.time.format.DateTimeFormatter;", arg0, arg1)); }

    static DateTimeFormatter ofLocalizedDate(FormatStyle arg0) { return DateTimeFormatter(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocalizedDate", "(Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    static DateTimeFormatter ofLocalizedTime(FormatStyle arg0) { return DateTimeFormatter(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocalizedTime", "(Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    static DateTimeFormatter ofLocalizedDateTime(FormatStyle arg0) { return DateTimeFormatter(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocalizedDateTime", "(Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    static DateTimeFormatter ofLocalizedDateTime(FormatStyle arg0, FormatStyle arg1) { return DateTimeFormatter(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocalizedDateTime", "(Ljava.time.format.FormatStyle;Ljava.time.format.FormatStyle;)Ljava.time.format.DateTimeFormatter;", arg0, arg1)); }

    static TemporalQuery parsedExcessDays() { return TemporalQuery(*javaClass->invokeStaticMethod<jobject>(this->object, "parsedExcessDays", "()Ljava.time.temporal.TemporalQuery;", )); }

    static TemporalQuery parsedLeapSecond() { return TemporalQuery(*javaClass->invokeStaticMethod<jobject>(this->object, "parsedLeapSecond", "()Ljava.time.temporal.TemporalQuery;", )); }

    DateTimeFormatter withLocale(Locale arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "withLocale", "(Ljava.util.Locale;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    DateTimeFormatter localizedBy(Locale arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "localizedBy", "(Ljava.util.Locale;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    DecimalStyle getDecimalStyle() { return DecimalStyle(*javaClass->invokeMethod<jobject>(this->object, "getDecimalStyle", "()Ljava.time.format.DecimalStyle;", )); }

    DateTimeFormatter withDecimalStyle(DecimalStyle arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "withDecimalStyle", "(Ljava.time.format.DecimalStyle;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    DateTimeFormatter withChronology(Chronology arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "withChronology", "(Ljava.time.chrono.Chronology;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    ResolverStyle getResolverStyle() { return ResolverStyle(*javaClass->invokeMethod<jobject>(this->object, "getResolverStyle", "()Ljava.time.format.ResolverStyle;", )); }

    DateTimeFormatter withResolverStyle(ResolverStyle arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "withResolverStyle", "(Ljava.time.format.ResolverStyle;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    Set getResolverFields() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getResolverFields", "()Ljava.util.Set;", )); }

    DateTimeFormatter withResolverFields(Set arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "withResolverFields", "(Ljava.util.Set;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    DateTimeFormatter withResolverFields(TemporalField_interface arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "withResolverFields", "([Ljava.time.temporal.TemporalField;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    TemporalAccessor parseBest(CharSequence arg0, TemporalQuery_interface arg1) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "parseBest", "(Ljava.lang.CharSequence;[Ljava.time.temporal.TemporalQuery;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1)); }

    TemporalAccessor parseUnresolved(CharSequence arg0, ParsePosition arg1) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "parseUnresolved", "(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1)); }

    DateTimeFormatterBuilder_CompositePrinterParser toPrinterParser(bool arg0) { return DateTimeFormatterBuilder_CompositePrinterParser(*javaClass->invokeMethod<jobject>(this->object, "toPrinterParser", "(Z)Ljava.time.format.DateTimeFormatterBuilder$CompositePrinterParser;", arg0)); }

    Format toFormat() { return Format(*javaClass->invokeMethod<jobject>(this->object, "toFormat", "()Ljava.text.Format;", )); }

    Format toFormat(TemporalQuery arg0) { return Format(*javaClass->invokeMethod<jobject>(this->object, "toFormat", "(Ljava.time.temporal.TemporalQuery;)Ljava.text.Format;", arg0)); }

    static Boolean lambda_static_1(TemporalAccessor arg0) { return Boolean(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$static$1", "(Ljava.time.temporal.TemporalAccessor;)Ljava.lang.Boolean;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String format(TemporalAccessor arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.temporal.TemporalAccessor;)Ljava.lang.String;", arg0)); }

    ZoneId getZone() { return ZoneId(*javaClass->invokeMethod<jobject>(this->object, "getZone", "()Ljava.time.ZoneId;", )); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    DateTimeFormatter withZone(ZoneId arg0) { return DateTimeFormatter(*javaClass->invokeMethod<jobject>(this->object, "withZone", "(Ljava.time.ZoneId;)Ljava.time.format.DateTimeFormatter;", arg0)); }

    Chronology getChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.Chronology;", )); }

    void formatTo(TemporalAccessor arg0, Appendable arg1) { (*javaClass->invokeMethod<void>(this->object, "formatTo", "(Ljava.time.temporal.TemporalAccessor;Ljava.lang.Appendable;)V", arg0, arg1)); }

    TemporalAccessor parseResolved0(CharSequence arg0, ParsePosition arg1) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "parseResolved0", "(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1)); }

    DateTimeParseException createError(CharSequence arg0, RuntimeException arg1) { return DateTimeParseException(*javaClass->invokeMethod<jobject>(this->object, "createError", "(Ljava.lang.CharSequence;Ljava.lang.RuntimeException;)Ljava.time.format.DateTimeParseException;", arg0, arg1)); }

    Object parse(CharSequence arg0, TemporalQuery arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0, arg1)); }

    TemporalAccessor parse(CharSequence arg0, ParsePosition arg1) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.text.ParsePosition;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1)); }

    TemporalAccessor parse(CharSequence arg0) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.temporal.TemporalAccessor;", arg0)); }

    static Period lambda_static_0(TemporalAccessor arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$static$0", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.Period;", arg0)); }

};


/**
 * Classpath: java.text.ParsePosition
 * Package name: java.text
 */
class ParsePosition : public Object {
protected:
    const inline static char *className = "java.text.ParsePosition";
public:
    STATICINITIALIZE;

    ParsePosition(jobject object) : JavaObject(object) {}

    int getErrorIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getErrorIndex", "()I", )); }

    void setErrorIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setErrorIndex", "(I)V", arg0)); }

    void setIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setIndex", "(I)V", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getIndex", "()I", )); }

};


/**
 * Classpath: java.time.format.DateTimeParseContext
 * Package name: java.time.format
 */
class DateTimeParseContext : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeParseContext";
public:
    STATICINITIALIZE;

    DateTimeParseContext(jobject object) : JavaObject(object) {}

    TemporalAccessor toResolved(ResolverStyle arg0, Set arg1) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "toResolved", "(Ljava.time.format.ResolverStyle;Ljava.util.Set;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1)); }

    Parsed toUnresolved() { return Parsed(*javaClass->invokeMethod<jobject>(this->object, "toUnresolved", "()Ljava.time.format.Parsed;", )); }

    DecimalStyle getDecimalStyle() { return DecimalStyle(*javaClass->invokeMethod<jobject>(this->object, "getDecimalStyle", "()Ljava.time.format.DecimalStyle;", )); }

    Parsed currentParsed() { return Parsed(*javaClass->invokeMethod<jobject>(this->object, "currentParsed", "()Ljava.time.format.Parsed;", )); }

    bool isCaseSensitive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCaseSensitive", "()Z", )); }

    static bool charEqualsIgnoreCase(char arg0, char arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "charEqualsIgnoreCase", "(CC)Z", arg0, arg1)); }

    Chronology getEffectiveChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getEffectiveChronology", "()Ljava.time.chrono.Chronology;", )); }

    void setCaseSensitive(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCaseSensitive", "(Z)V", arg0)); }

    bool subSequenceEquals(CharSequence arg0, int arg1, CharSequence arg2, int arg3, int arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "subSequenceEquals", "(Ljava.lang.CharSequence;ILjava.lang.CharSequence;II)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool charEquals(char arg0, char arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "charEquals", "(CC)Z", arg0, arg1)); }

    void setStrict(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setStrict", "(Z)V", arg0)); }

    void startOptional() { (*javaClass->invokeMethod<void>(this->object, "startOptional", "()V", )); }

    void endOptional(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "endOptional", "(Z)V", arg0)); }

    Long getParsed(TemporalField arg0) { return Long(*javaClass->invokeMethod<jobject>(this->object, "getParsed", "(Ljava.time.temporal.TemporalField;)Ljava.lang.Long;", arg0)); }

    int setParsedField(TemporalField arg0, long arg1, int arg2, int arg3) { return int(*javaClass->invokeMethod<int>(this->object, "setParsedField", "(Ljava.time.temporal.TemporalField;JII)I", arg0, arg1, arg2, arg3)); }

    void setParsed(Chronology arg0) { (*javaClass->invokeMethod<void>(this->object, "setParsed", "(Ljava.time.chrono.Chronology;)V", arg0)); }

    void setParsed(ZoneId arg0) { (*javaClass->invokeMethod<void>(this->object, "setParsed", "(Ljava.time.ZoneId;)V", arg0)); }

    void addChronoChangedListener(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "addChronoChangedListener", "(Ljava.util.function.Consumer;)V", arg0)); }

    void setParsedLeapSecond() { (*javaClass->invokeMethod<void>(this->object, "setParsedLeapSecond", "()V", )); }

    void setParsedDayPeriod(DateTimeFormatterBuilder_DayPeriod arg0) { (*javaClass->invokeMethod<void>(this->object, "setParsedDayPeriod", "(Ljava.time.format.DateTimeFormatterBuilder$DayPeriod;)V", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    DateTimeParseContext copy() { return DateTimeParseContext(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Ljava.time.format.DateTimeParseContext;", )); }

    bool isStrict() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStrict", "()Z", )); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

};


/**
 * Classpath: java.time.format.Parsed
 * Package name: java.time.format
 */
class Parsed : public Object {
protected:
    const inline static char *className = "java.time.format.Parsed";
public:
    STATICINITIALIZE;

    Parsed(jobject object) : JavaObject(object) {}

    void resolveFields() { (*javaClass->invokeMethod<void>(this->object, "resolveFields", "()V", )); }

    void resolveTimeLenient() { (*javaClass->invokeMethod<void>(this->object, "resolveTimeLenient", "()V", )); }

    void crossCheck() { (*javaClass->invokeMethod<void>(this->object, "crossCheck", "()V", )); }

    void crossCheck(TemporalAccessor arg0) { (*javaClass->invokeMethod<void>(this->object, "crossCheck", "(Ljava.time.temporal.TemporalAccessor;)V", arg0)); }

    void resolvePeriod() { (*javaClass->invokeMethod<void>(this->object, "resolvePeriod", "()V", )); }

    void resolveFractional() { (*javaClass->invokeMethod<void>(this->object, "resolveFractional", "()V", )); }

    void resolveInstantFields() { (*javaClass->invokeMethod<void>(this->object, "resolveInstantFields", "()V", )); }

    void resolveDateFields() { (*javaClass->invokeMethod<void>(this->object, "resolveDateFields", "()V", )); }

    void resolveTimeFields() { (*javaClass->invokeMethod<void>(this->object, "resolveTimeFields", "()V", )); }

    void updateCheckConflict(ChronoLocalDate arg0) { (*javaClass->invokeMethod<void>(this->object, "updateCheckConflict", "(Ljava.time.chrono.ChronoLocalDate;)V", arg0)); }

    void updateCheckConflict(LocalTime arg0, Period arg1) { (*javaClass->invokeMethod<void>(this->object, "updateCheckConflict", "(Ljava.time.LocalTime;Ljava.time.Period;)V", arg0, arg1)); }

    void updateCheckConflict(TemporalField arg0, TemporalField arg1, Long arg2) { (*javaClass->invokeMethod<void>(this->object, "updateCheckConflict", "(Ljava.time.temporal.TemporalField;Ljava.time.temporal.TemporalField;Ljava.lang.Long;)V", arg0, arg1, arg2)); }

    void resolveInstantFields0(ZoneId arg0) { (*javaClass->invokeMethod<void>(this->object, "resolveInstantFields0", "(Ljava.time.ZoneId;)V", arg0)); }

    void resolveTime(long arg0, long arg1, long arg2, long arg3) { (*javaClass->invokeMethod<void>(this->object, "resolveTime", "(JJJJ)V", arg0, arg1, arg2, arg3)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    TemporalAccessor resolve(ResolverStyle arg0, Set arg1) { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(Ljava.time.format.ResolverStyle;Ljava.util.Set;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1)); }

    Parsed copy() { return Parsed(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Ljava.time.format.Parsed;", )); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    void resolveInstant() { (*javaClass->invokeMethod<void>(this->object, "resolveInstant", "()V", )); }

};


/**
 * Classpath: java.time.chrono.ChronoLocalDate
 * Package name: java.time.chrono
 */
class ChronoLocalDate : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.ChronoLocalDate";
public:
    STATICINITIALIZE;

    ChronoLocalDate(jobject object) : JavaObject(object) {}

    bool isLeapYear() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "()Z", )); }

    int lengthOfMonth() { return int(*javaClass->invokeMethod<int>(this->object, "lengthOfMonth", "()I", )); }

    int lengthOfYear() { return int(*javaClass->invokeMethod<int>(this->object, "lengthOfYear", "()I", )); }

    ChronoLocalDateTime atTime(LocalTime arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atTime", "(Ljava.time.LocalTime;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    Era getEra() { return Era(*javaClass->invokeMethod<jobject>(this->object, "getEra", "()Ljava.time.chrono.Era;", )); }

    static int lambda_timeLineOrder_493d4938_1(ChronoLocalDate arg0, ChronoLocalDate arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$timeLineOrder$493d4938$1", "(Ljava.time.chrono.ChronoLocalDate;Ljava.time.chrono.ChronoLocalDate;)I", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ChronoLocalDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.chrono.ChronoLocalDate;)I", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static ChronoLocalDate from(TemporalAccessor arg0) { return ChronoLocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    static Object _deserializeLambda_(SerializedLambda arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "$deserializeLambda$", "(Ljava.lang.invoke.SerializedLambda;)Ljava.lang.Object;", arg0)); }

    bool isEqual(ChronoLocalDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljava.time.chrono.ChronoLocalDate;)Z", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    ChronoLocalDate plus(long arg0, TemporalUnit arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDate plus(TemporalAmount arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    ChronoPeriod until(ChronoLocalDate arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "until", "(Ljava.time.chrono.ChronoLocalDate;)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    ChronoLocalDate minus(long arg0, TemporalUnit arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoLocalDate minus(TemporalAmount arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    bool isAfter(ChronoLocalDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.chrono.ChronoLocalDate;)Z", arg0)); }

    bool isBefore(ChronoLocalDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.chrono.ChronoLocalDate;)Z", arg0)); }

    long toEpochDay() { return long(*javaClass->invokeMethod<long>(this->object, "toEpochDay", "()J", )); }

    static Comparator timeLineOrder() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "timeLineOrder", "()Ljava.util.Comparator;", )); }

    Chronology getChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.Chronology;", )); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDate with(TemporalAdjuster arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    ChronoLocalDate with(TemporalField arg0, long arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

};


/**
 * Classpath: java.time.LocalTime
 * Package name: java.time
 */
class LocalTime : public Object {
protected:
    const inline static char *className = "java.time.LocalTime";
public:
    STATICINITIALIZE;

    LocalTime(jobject object) : JavaObject(object) {}

    int get0(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get0", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    static LocalTime ofSecondOfDay(long arg0) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofSecondOfDay", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalDateTime atDate(LocalDate arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atDate", "(Ljava.time.LocalDate;)Ljava.time.LocalDateTime;", arg0)); }

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(LocalTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.LocalTime;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static LocalTime of(int arg0, int arg1, int arg2) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(III)Ljava.time.LocalTime;", arg0, arg1, arg2)); }

    static LocalTime of(int arg0, int arg1, int arg2, int arg3) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(IIII)Ljava.time.LocalTime;", arg0, arg1, arg2, arg3)); }

    static LocalTime of(int arg0, int arg1) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(II)Ljava.time.LocalTime;", arg0, arg1)); }

    static LocalTime from(TemporalAccessor arg0) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalTime;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    static LocalTime create(int arg0, int arg1, int arg2, int arg3) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(IIII)Ljava.time.LocalTime;", arg0, arg1, arg2, arg3)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    static LocalTime now() { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "()Ljava.time.LocalTime;", )); }

    static LocalTime now(ZoneId arg0) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.ZoneId;)Ljava.time.LocalTime;", arg0)); }

    static LocalTime now(Clock arg0) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.Clock;)Ljava.time.LocalTime;", arg0)); }

    int getNano() { return int(*javaClass->invokeMethod<int>(this->object, "getNano", "()I", )); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    LocalTime plus(long arg0, TemporalUnit arg1) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalTime;", arg0, arg1)); }

    LocalTime plus(TemporalAmount arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalTime;", arg0)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    LocalTime plusNanos(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalTime plusSeconds(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalTime plusHours(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalTime plusMinutes(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava.time.LocalTime;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    LocalTime minus(long arg0, TemporalUnit arg1) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalTime;", arg0, arg1)); }

    LocalTime minus(TemporalAmount arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalTime;", arg0)); }

    static LocalTime readExternal(DataInput arg0) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.LocalTime;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    OffsetTime atOffset(ZoneOffset arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "atOffset", "(Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;", arg0)); }

    bool isAfter(LocalTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.LocalTime;)Z", arg0)); }

    bool isBefore(LocalTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.LocalTime;)Z", arg0)); }

    LocalTime withHour(int arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava.time.LocalTime;", arg0)); }

    LocalTime withMinute(int arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava.time.LocalTime;", arg0)); }

    LocalTime withSecond(int arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava.time.LocalTime;", arg0)); }

    LocalTime withNano(int arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava.time.LocalTime;", arg0)); }

    long toNanoOfDay() { return long(*javaClass->invokeMethod<long>(this->object, "toNanoOfDay", "()J", )); }

    int toSecondOfDay() { return int(*javaClass->invokeMethod<int>(this->object, "toSecondOfDay", "()I", )); }

    static LocalTime ofNanoOfDay(long arg0) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofNanoOfDay", "(J)Ljava.time.LocalTime;", arg0)); }

    static LocalTime parse(CharSequence arg0) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.LocalTime;", arg0)); }

    static LocalTime parse(CharSequence arg0, DateTimeFormatter arg1) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.LocalTime;", arg0, arg1)); }

    long toEpochSecond(LocalDate arg0, ZoneOffset arg1) { return long(*javaClass->invokeMethod<long>(this->object, "toEpochSecond", "(Ljava.time.LocalDate;Ljava.time.ZoneOffset;)J", arg0, arg1)); }

    int getHour() { return int(*javaClass->invokeMethod<int>(this->object, "getHour", "()I", )); }

    int getMinute() { return int(*javaClass->invokeMethod<int>(this->object, "getMinute", "()I", )); }

    int getSecond() { return int(*javaClass->invokeMethod<int>(this->object, "getSecond", "()I", )); }

    static LocalTime ofInstant(Instant arg0, ZoneId arg1) { return LocalTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofInstant", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.LocalTime;", arg0, arg1)); }

    LocalTime minusHours(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalTime minusMinutes(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalTime minusSeconds(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalTime minusNanos(long arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava.time.LocalTime;", arg0)); }

    LocalTime truncatedTo(TemporalUnit arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava.time.temporal.TemporalUnit;)Ljava.time.LocalTime;", arg0)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    LocalTime with(TemporalAdjuster arg0) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.LocalTime;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    LocalTime with(TemporalField arg0, long arg1) { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.LocalTime;", arg0, arg1)); }

};


/**
 * Classpath: java.time.LocalDate
 * Package name: java.time
 */
class LocalDate : public Object {
protected:
    const inline static char *className = "java.time.LocalDate";
public:
    STATICINITIALIZE;

    LocalDate(jobject object) : JavaObject(object) {}

    bool isLeapYear() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "()Z", )); }

    int lengthOfMonth() { return int(*javaClass->invokeMethod<int>(this->object, "lengthOfMonth", "()I", )); }

    int lengthOfYear() { return int(*javaClass->invokeMethod<int>(this->object, "lengthOfYear", "()I", )); }

    int get0(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get0", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    long getProlepticMonth() { return long(*javaClass->invokeMethod<long>(this->object, "getProlepticMonth", "()J", )); }

    static LocalDate resolvePreviousValid(int arg0, int arg1, int arg2) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "resolvePreviousValid", "(III)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    static LocalDate ofYearDay(int arg0, int arg1) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "ofYearDay", "(II)Ljava.time.LocalDate;", arg0, arg1)); }

    long monthsUntil(LocalDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "monthsUntil", "(Ljava.time.LocalDate;)J", arg0)); }

    LocalDateTime atTime(int arg0, int arg1) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atTime", "(II)Ljava.time.LocalDateTime;", arg0, arg1)); }

    LocalDateTime atTime(int arg0, int arg1, int arg2) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atTime", "(III)Ljava.time.LocalDateTime;", arg0, arg1, arg2)); }

    LocalDateTime atTime(int arg0, int arg1, int arg2, int arg3) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atTime", "(IIII)Ljava.time.LocalDateTime;", arg0, arg1, arg2, arg3)); }

    OffsetDateTime atTime(OffsetTime arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "atTime", "(Ljava.time.OffsetTime;)Ljava.time.OffsetDateTime;", arg0)); }

    LocalDateTime atTime(LocalTime arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atTime", "(Ljava.time.LocalTime;)Ljava.time.LocalDateTime;", arg0)); }

    ChronoLocalDateTime atTime(LocalTime arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atTime", "(Ljava.time.LocalTime;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    IsoEra getEra() { return IsoEra(*javaClass->invokeMethod<jobject>(this->object, "getEra", "()Ljava.time.chrono.IsoEra;", )); }

    Era getEra() { return Era(*javaClass->invokeMethod<jobject>(this->object, "getEra", "()Ljava.time.chrono.Era;", )); }

    Stream datesUntil(LocalDate arg0) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "datesUntil", "(Ljava.time.LocalDate;)Ljava.util.stream.Stream;", arg0)); }

    Stream datesUntil(LocalDate arg0, Period arg1) { return Stream(*javaClass->invokeMethod<jobject>(this->object, "datesUntil", "(Ljava.time.LocalDate;Ljava.time.Period;)Ljava.util.stream.Stream;", arg0, arg1)); }

    ZonedDateTime atStartOfDay(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "atStartOfDay", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    LocalDateTime atStartOfDay() { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "atStartOfDay", "()Ljava.time.LocalDateTime;", )); }

    LocalDate lambda_datesUntil_1(long arg0, long arg1, long arg2) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "lambda$datesUntil$1", "(JJJ)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    static LocalDate lambda_datesUntil_0(long arg0, long arg1, long arg2) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$datesUntil$0", "(JJJ)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ChronoLocalDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.chrono.ChronoLocalDate;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static LocalDate of(int arg0, Month arg1, int arg2) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(ILjava.time.Month;I)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    static LocalDate of(int arg0, int arg1, int arg2) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(III)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    static LocalDate from(TemporalAccessor arg0) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDate;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    static LocalDate create(int arg0, int arg1, int arg2) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(III)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    bool isEqual(ChronoLocalDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljava.time.chrono.ChronoLocalDate;)Z", arg0)); }

    static LocalDate now() { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "()Ljava.time.LocalDate;", )); }

    static LocalDate now(Clock arg0) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.Clock;)Ljava.time.LocalDate;", arg0)); }

    static LocalDate now(ZoneId arg0) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.ZoneId;)Ljava.time.LocalDate;", arg0)); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoLocalDate plus(long arg0, TemporalUnit arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    LocalDate plus(TemporalAmount arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDate;", arg0)); }

    LocalDate plus(long arg0, TemporalUnit arg1) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDate;", arg0, arg1)); }

    ChronoLocalDate plus(TemporalAmount arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    Period until(ChronoLocalDate arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "until", "(Ljava.time.chrono.ChronoLocalDate;)Ljava.time.Period;", arg0)); }

    ChronoPeriod until(ChronoLocalDate arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "until", "(Ljava.time.chrono.ChronoLocalDate;)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    LocalDate plusDays(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava.time.LocalDate;", arg0)); }

    LocalDate minus(TemporalAmount arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.LocalDate;", arg0)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoLocalDate minus(TemporalAmount arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    LocalDate minus(long arg0, TemporalUnit arg1) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.LocalDate;", arg0, arg1)); }

    ChronoLocalDate minus(long arg0, TemporalUnit arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    static LocalDate readExternal(DataInput arg0) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.LocalDate;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    bool isAfter(ChronoLocalDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.chrono.ChronoLocalDate;)Z", arg0)); }

    bool isBefore(ChronoLocalDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.chrono.ChronoLocalDate;)Z", arg0)); }

    Month getMonth() { return Month(*javaClass->invokeMethod<jobject>(this->object, "getMonth", "()Ljava.time.Month;", )); }

    int getDayOfYear() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfYear", "()I", )); }

    DayOfWeek getDayOfWeek() { return DayOfWeek(*javaClass->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava.time.DayOfWeek;", )); }

    LocalDate withYear(int arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava.time.LocalDate;", arg0)); }

    LocalDate withMonth(int arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava.time.LocalDate;", arg0)); }

    LocalDate withDayOfMonth(int arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava.time.LocalDate;", arg0)); }

    LocalDate withDayOfYear(int arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava.time.LocalDate;", arg0)); }

    LocalDate plusYears(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava.time.LocalDate;", arg0)); }

    LocalDate plusMonths(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava.time.LocalDate;", arg0)); }

    LocalDate plusWeeks(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava.time.LocalDate;", arg0)); }

    long toEpochDay() { return long(*javaClass->invokeMethod<long>(this->object, "toEpochDay", "()J", )); }

    LocalDate minusYears(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava.time.LocalDate;", arg0)); }

    LocalDate minusMonths(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava.time.LocalDate;", arg0)); }

    LocalDate minusWeeks(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava.time.LocalDate;", arg0)); }

    Chronology getChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.Chronology;", )); }

    IsoChronology getChronology() { return IsoChronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.IsoChronology;", )); }

    static LocalDate ofEpochDay(long arg0) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "ofEpochDay", "(J)Ljava.time.LocalDate;", arg0)); }

    long daysUntil(LocalDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "daysUntil", "(Ljava.time.LocalDate;)J", arg0)); }

    int compareTo0(LocalDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo0", "(Ljava.time.LocalDate;)I", arg0)); }

    static LocalDate parse(CharSequence arg0) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.LocalDate;", arg0)); }

    static LocalDate parse(CharSequence arg0, DateTimeFormatter arg1) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.LocalDate;", arg0, arg1)); }

    long toEpochSecond(LocalTime arg0, ZoneOffset arg1) { return long(*javaClass->invokeMethod<long>(this->object, "toEpochSecond", "(Ljava.time.LocalTime;Ljava.time.ZoneOffset;)J", arg0, arg1)); }

    int getYear() { return int(*javaClass->invokeMethod<int>(this->object, "getYear", "()I", )); }

    int getMonthValue() { return int(*javaClass->invokeMethod<int>(this->object, "getMonthValue", "()I", )); }

    int getDayOfMonth() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfMonth", "()I", )); }

    static LocalDate ofInstant(Instant arg0, ZoneId arg1) { return LocalDate(*javaClass->invokeStaticMethod<jobject>(this->object, "ofInstant", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.LocalDate;", arg0, arg1)); }

    LocalDate minusDays(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava.time.LocalDate;", arg0)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    LocalDate with(TemporalField arg0, long arg1) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.LocalDate;", arg0, arg1)); }

    LocalDate with(TemporalAdjuster arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.LocalDate;", arg0)); }

    ChronoLocalDate with(TemporalField arg0, long arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate with(TemporalAdjuster arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

};


/**
 * Classpath: java.time.OffsetTime
 * Package name: java.time
 */
class OffsetTime : public Object {
protected:
    const inline static char *className = "java.time.OffsetTime";
public:
    STATICINITIALIZE;

    OffsetTime(jobject object) : JavaObject(object) {}

    OffsetDateTime atDate(LocalDate arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "atDate", "(Ljava.time.LocalDate;)Ljava.time.OffsetDateTime;", arg0)); }

    long toEpochNano() { return long(*javaClass->invokeMethod<long>(this->object, "toEpochNano", "()J", )); }

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(OffsetTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.OffsetTime;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static OffsetTime of(LocalTime arg0, ZoneOffset arg1) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.LocalTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;", arg0, arg1)); }

    static OffsetTime of(int arg0, int arg1, int arg2, int arg3, ZoneOffset arg4) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(IIIILjava.time.ZoneOffset;)Ljava.time.OffsetTime;", arg0, arg1, arg2, arg3, arg4)); }

    static OffsetTime from(TemporalAccessor arg0) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.OffsetTime;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    ZoneOffset getOffset() { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffset", "()Ljava.time.ZoneOffset;", )); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    bool isEqual(OffsetTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljava.time.OffsetTime;)Z", arg0)); }

    static OffsetTime now() { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "()Ljava.time.OffsetTime;", )); }

    static OffsetTime now(Clock arg0) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.Clock;)Ljava.time.OffsetTime;", arg0)); }

    static OffsetTime now(ZoneId arg0) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.ZoneId;)Ljava.time.OffsetTime;", arg0)); }

    int getNano() { return int(*javaClass->invokeMethod<int>(this->object, "getNano", "()I", )); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    OffsetTime plus(TemporalAmount arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetTime;", arg0)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    OffsetTime plus(long arg0, TemporalUnit arg1) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetTime;", arg0, arg1)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    OffsetTime plusNanos(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime plusSeconds(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime plusHours(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime plusMinutes(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava.time.OffsetTime;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    OffsetTime minus(long arg0, TemporalUnit arg1) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetTime;", arg0, arg1)); }

    OffsetTime minus(TemporalAmount arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetTime;", arg0)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    static OffsetTime readExternal(ObjectInput arg0) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.ObjectInput;)Ljava.time.OffsetTime;", arg0)); }

    void writeExternal(ObjectOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.ObjectOutput;)V", arg0)); }

    bool isAfter(OffsetTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.OffsetTime;)Z", arg0)); }

    bool isBefore(OffsetTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.OffsetTime;)Z", arg0)); }

    LocalTime toLocalTime() { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava.time.LocalTime;", )); }

    OffsetTime withHour(int arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime withMinute(int arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime withSecond(int arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime withNano(int arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime withOffsetSameInstant(ZoneOffset arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "withOffsetSameInstant", "(Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime withOffsetSameLocal(ZoneOffset arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "withOffsetSameLocal", "(Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;", arg0)); }

    static OffsetTime parse(CharSequence arg0) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.OffsetTime;", arg0)); }

    static OffsetTime parse(CharSequence arg0, DateTimeFormatter arg1) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.OffsetTime;", arg0, arg1)); }

    long toEpochSecond(LocalDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "toEpochSecond", "(Ljava.time.LocalDate;)J", arg0)); }

    int getHour() { return int(*javaClass->invokeMethod<int>(this->object, "getHour", "()I", )); }

    int getMinute() { return int(*javaClass->invokeMethod<int>(this->object, "getMinute", "()I", )); }

    int getSecond() { return int(*javaClass->invokeMethod<int>(this->object, "getSecond", "()I", )); }

    static OffsetTime ofInstant(Instant arg0, ZoneId arg1) { return OffsetTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofInstant", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.OffsetTime;", arg0, arg1)); }

    OffsetTime minusHours(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime minusMinutes(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime minusSeconds(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime minusNanos(long arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime truncatedTo(TemporalUnit arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava.time.temporal.TemporalUnit;)Ljava.time.OffsetTime;", arg0)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    OffsetTime with(LocalTime arg0, ZoneOffset arg1) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.LocalTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetTime;", arg0, arg1)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    OffsetTime with(TemporalAdjuster arg0) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.OffsetTime;", arg0)); }

    OffsetTime with(TemporalField arg0, long arg1) { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.OffsetTime;", arg0, arg1)); }

};


/**
 * Classpath: java.time.OffsetDateTime
 * Package name: java.time
 */
class OffsetDateTime : public Object {
protected:
    const inline static char *className = "java.time.OffsetDateTime";
public:
    STATICINITIALIZE;

    OffsetDateTime(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(OffsetDateTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.OffsetDateTime;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static OffsetDateTime of(LocalDate arg0, LocalTime arg1, ZoneOffset arg2) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.LocalDate;Ljava.time.LocalTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0, arg1, arg2)); }

    static OffsetDateTime of(LocalDateTime arg0, ZoneOffset arg1) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0, arg1)); }

    static OffsetDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, ZoneOffset arg7) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(IIIIIIILjava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static OffsetDateTime from(TemporalAccessor arg0) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.OffsetDateTime;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    ZoneOffset getOffset() { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffset", "()Ljava.time.ZoneOffset;", )); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    bool isEqual(OffsetDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljava.time.OffsetDateTime;)Z", arg0)); }

    static OffsetDateTime now(Clock arg0) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.Clock;)Ljava.time.OffsetDateTime;", arg0)); }

    static OffsetDateTime now() { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "()Ljava.time.OffsetDateTime;", )); }

    static OffsetDateTime now(ZoneId arg0) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.ZoneId;)Ljava.time.OffsetDateTime;", arg0)); }

    int getNano() { return int(*javaClass->invokeMethod<int>(this->object, "getNano", "()I", )); }

    Instant toInstant() { return Instant(*javaClass->invokeMethod<jobject>(this->object, "toInstant", "()Ljava.time.Instant;", )); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    OffsetDateTime plus(TemporalAmount arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plus(long arg0, TemporalUnit arg1) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetDateTime;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    OffsetDateTime plusNanos(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plusSeconds(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plusDays(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plusHours(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plusMinutes(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minus(TemporalAmount arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.OffsetDateTime;", arg0)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    OffsetDateTime minus(long arg0, TemporalUnit arg1) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.OffsetDateTime;", arg0, arg1)); }

    static OffsetDateTime readExternal(ObjectInput arg0) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.ObjectInput;)Ljava.time.OffsetDateTime;", arg0)); }

    void writeExternal(ObjectOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.ObjectOutput;)V", arg0)); }

    bool isAfter(OffsetDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.OffsetDateTime;)Z", arg0)); }

    bool isBefore(OffsetDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.OffsetDateTime;)Z", arg0)); }

    LocalDateTime toLocalDateTime() { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalDateTime", "()Ljava.time.LocalDateTime;", )); }

    LocalTime toLocalTime() { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava.time.LocalTime;", )); }

    LocalDate toLocalDate() { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava.time.LocalDate;", )); }

    Month getMonth() { return Month(*javaClass->invokeMethod<jobject>(this->object, "getMonth", "()Ljava.time.Month;", )); }

    int getDayOfYear() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfYear", "()I", )); }

    DayOfWeek getDayOfWeek() { return DayOfWeek(*javaClass->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava.time.DayOfWeek;", )); }

    OffsetDateTime withYear(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withMonth(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withDayOfMonth(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withDayOfYear(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withHour(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withMinute(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withSecond(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withNano(int arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plusYears(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plusMonths(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime plusWeeks(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime withOffsetSameInstant(ZoneOffset arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withOffsetSameInstant", "(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0)); }

    static int compareInstant(OffsetDateTime arg0, OffsetDateTime arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareInstant", "(Ljava.time.OffsetDateTime;Ljava.time.OffsetDateTime;)I", arg0, arg1)); }

    static Comparator timeLineOrder() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "timeLineOrder", "()Ljava.util.Comparator;", )); }

    OffsetDateTime withOffsetSameLocal(ZoneOffset arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "withOffsetSameLocal", "(Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minusYears(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minusMonths(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minusWeeks(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    ZonedDateTime atZoneSameInstant(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "atZoneSameInstant", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime atZoneSimilarLocal(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "atZoneSimilarLocal", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    OffsetTime toOffsetTime() { return OffsetTime(*javaClass->invokeMethod<jobject>(this->object, "toOffsetTime", "()Ljava.time.OffsetTime;", )); }

    ZonedDateTime toZonedDateTime() { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "toZonedDateTime", "()Ljava.time.ZonedDateTime;", )); }

    static OffsetDateTime parse(CharSequence arg0, DateTimeFormatter arg1) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.OffsetDateTime;", arg0, arg1)); }

    static OffsetDateTime parse(CharSequence arg0) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.OffsetDateTime;", arg0)); }

    long toEpochSecond() { return long(*javaClass->invokeMethod<long>(this->object, "toEpochSecond", "()J", )); }

    int getYear() { return int(*javaClass->invokeMethod<int>(this->object, "getYear", "()I", )); }

    int getMonthValue() { return int(*javaClass->invokeMethod<int>(this->object, "getMonthValue", "()I", )); }

    int getDayOfMonth() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfMonth", "()I", )); }

    int getHour() { return int(*javaClass->invokeMethod<int>(this->object, "getHour", "()I", )); }

    int getMinute() { return int(*javaClass->invokeMethod<int>(this->object, "getMinute", "()I", )); }

    int getSecond() { return int(*javaClass->invokeMethod<int>(this->object, "getSecond", "()I", )); }

    static OffsetDateTime ofInstant(Instant arg0, ZoneId arg1) { return OffsetDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofInstant", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.OffsetDateTime;", arg0, arg1)); }

    OffsetDateTime minusDays(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minusHours(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minusMinutes(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minusSeconds(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime minusNanos(long arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava.time.OffsetDateTime;", arg0)); }

    OffsetDateTime truncatedTo(TemporalUnit arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava.time.temporal.TemporalUnit;)Ljava.time.OffsetDateTime;", arg0)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    OffsetDateTime with(LocalDateTime arg0, ZoneOffset arg1) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;)Ljava.time.OffsetDateTime;", arg0, arg1)); }

    OffsetDateTime with(TemporalField arg0, long arg1) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.OffsetDateTime;", arg0, arg1)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    OffsetDateTime with(TemporalAdjuster arg0) { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.OffsetDateTime;", arg0)); }

};


/**
 * Classpath: java.io.ObjectInput
 * Package name: java.io
 */
class ObjectInput : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectInput";
public:
    STATICINITIALIZE;

    ObjectInput(jobject object) : JavaObject(object) {}

    Object readObject() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readObject", "()Ljava.lang.Object;", )); }

    int read(arr_B arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "read", "([BII)I", arg0, arg1, arg2)); }

    int read(arr_B arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "([B)I", arg0)); }

    int read() { return int(*javaClass->invokeMethod<int>(this->object, "read", "()I", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    long skip(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "skip", "(J)J", arg0)); }

    int available() { return int(*javaClass->invokeMethod<int>(this->object, "available", "()I", )); }

};


/**
 * Classpath: java.time.Month
 * Package name: java.time
 */
class Month : public Enum {
protected:
    const inline static char *className = "java.time.Month";
public:
    STATICINITIALIZE;

    Month(jobject object) : JavaObject(object) {}

    int firstDayOfYear(bool arg0) { return int(*javaClass->invokeMethod<int>(this->object, "firstDayOfYear", "(Z)I", arg0)); }

    Month firstMonthOfQuarter() { return Month(*javaClass->invokeMethod<jobject>(this->object, "firstMonthOfQuarter", "()Ljava.time.Month;", )); }

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    int length(bool arg0) { return int(*javaClass->invokeMethod<int>(this->object, "length", "(Z)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    static Month valueOf(String arg0) { return Month(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.Month;", arg0)); }

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    static Month of(int arg0) { return Month(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(I)Ljava.time.Month;", arg0)); }

    static Month from(TemporalAccessor arg0) { return Month(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.Month;", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    int minLength() { return int(*javaClass->invokeMethod<int>(this->object, "minLength", "()I", )); }

    int maxLength() { return int(*javaClass->invokeMethod<int>(this->object, "maxLength", "()I", )); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    Month plus(long arg0) { return Month(*javaClass->invokeMethod<jobject>(this->object, "plus", "(J)Ljava.time.Month;", arg0)); }

    Month minus(long arg0) { return Month(*javaClass->invokeMethod<jobject>(this->object, "minus", "(J)Ljava.time.Month;", arg0)); }

    String getDisplayName(TextStyle arg0, Locale arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.format.TextStyle
 * Package name: java.time.format
 */
class TextStyle : public Enum {
protected:
    const inline static char *className = "java.time.format.TextStyle";
public:
    STATICINITIALIZE;

    TextStyle(jobject object) : JavaObject(object) {}

    static TextStyle valueOf(String arg0) { return TextStyle(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.format.TextStyle;", arg0)); }

    int zoneNameStyleIndex() { return int(*javaClass->invokeMethod<int>(this->object, "zoneNameStyleIndex", "()I", )); }

    bool isStandalone() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStandalone", "()Z", )); }

    TextStyle asStandalone() { return TextStyle(*javaClass->invokeMethod<jobject>(this->object, "asStandalone", "()Ljava.time.format.TextStyle;", )); }

    TextStyle asNormal() { return TextStyle(*javaClass->invokeMethod<jobject>(this->object, "asNormal", "()Ljava.time.format.TextStyle;", )); }

    int toCalendarStyle() { return int(*javaClass->invokeMethod<int>(this->object, "toCalendarStyle", "()I", )); }

};


/**
 * Classpath: java.time.DayOfWeek
 * Package name: java.time
 */
class DayOfWeek : public Enum {
protected:
    const inline static char *className = "java.time.DayOfWeek";
public:
    STATICINITIALIZE;

    DayOfWeek(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    static DayOfWeek valueOf(String arg0) { return DayOfWeek(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.DayOfWeek;", arg0)); }

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    static DayOfWeek of(int arg0) { return DayOfWeek(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(I)Ljava.time.DayOfWeek;", arg0)); }

    static DayOfWeek from(TemporalAccessor arg0) { return DayOfWeek(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.DayOfWeek;", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    DayOfWeek plus(long arg0) { return DayOfWeek(*javaClass->invokeMethod<jobject>(this->object, "plus", "(J)Ljava.time.DayOfWeek;", arg0)); }

    DayOfWeek minus(long arg0) { return DayOfWeek(*javaClass->invokeMethod<jobject>(this->object, "minus", "(J)Ljava.time.DayOfWeek;", arg0)); }

    String getDisplayName(TextStyle arg0, Locale arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.ZonedDateTime
 * Package name: java.time
 */
class ZonedDateTime : public Object {
protected:
    const inline static char *className = "java.time.ZonedDateTime";
public:
    STATICINITIALIZE;

    ZonedDateTime(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static ZonedDateTime of(LocalDateTime arg0, ZoneId arg1) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.LocalDateTime;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1)); }

    static ZonedDateTime of(LocalDate arg0, LocalTime arg1, ZoneId arg2) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.LocalDate;Ljava.time.LocalTime;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1, arg2)); }

    static ZonedDateTime of(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, ZoneId arg7) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(IIIIIIILjava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static ZonedDateTime from(TemporalAccessor arg0) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZonedDateTime;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    static ZonedDateTime create(long arg0, int arg1, ZoneId arg2) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(JILjava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1, arg2)); }

    ZoneOffset getOffset() { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffset", "()Ljava.time.ZoneOffset;", )); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    static ZonedDateTime now() { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "()Ljava.time.ZonedDateTime;", )); }

    static ZonedDateTime now(Clock arg0) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.Clock;)Ljava.time.ZonedDateTime;", arg0)); }

    static ZonedDateTime now(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "now", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    int getNano() { return int(*javaClass->invokeMethod<int>(this->object, "getNano", "()I", )); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    ZoneId getZone() { return ZoneId(*javaClass->invokeMethod<jobject>(this->object, "getZone", "()Ljava.time.ZoneId;", )); }

    ZonedDateTime plus(TemporalAmount arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.ZonedDateTime;", arg0)); }

    ChronoZonedDateTime plus(long arg0, TemporalUnit arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

    ChronoZonedDateTime plus(TemporalAmount arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ZonedDateTime plus(long arg0, TemporalUnit arg1) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.ZonedDateTime;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    long until(Temporal arg0, TemporalUnit arg1) { return long(*javaClass->invokeMethod<long>(this->object, "until", "(Ljava.time.temporal.Temporal;Ljava.time.temporal.TemporalUnit;)J", arg0, arg1)); }

    ZonedDateTime plusNanos(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusNanos", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime plusSeconds(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusSeconds", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime plusDays(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime plusHours(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusHours", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime plusMinutes(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusMinutes", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime minus(TemporalAmount arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.ZonedDateTime;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoZonedDateTime minus(long arg0, TemporalUnit arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

    ChronoZonedDateTime minus(TemporalAmount arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    ZonedDateTime minus(long arg0, TemporalUnit arg1) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.ZonedDateTime;", arg0, arg1)); }

    static ZonedDateTime readExternal(ObjectInput arg0) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.ObjectInput;)Ljava.time.ZonedDateTime;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    LocalDateTime toLocalDateTime() { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalDateTime", "()Ljava.time.LocalDateTime;", )); }

    ChronoLocalDateTime toLocalDateTime() { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalDateTime", "()Ljava.time.chrono.ChronoLocalDateTime;", )); }

    LocalTime toLocalTime() { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava.time.LocalTime;", )); }

    ChronoLocalDate toLocalDate() { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava.time.chrono.ChronoLocalDate;", )); }

    LocalDate toLocalDate() { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava.time.LocalDate;", )); }

    Month getMonth() { return Month(*javaClass->invokeMethod<jobject>(this->object, "getMonth", "()Ljava.time.Month;", )); }

    int getDayOfYear() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfYear", "()I", )); }

    DayOfWeek getDayOfWeek() { return DayOfWeek(*javaClass->invokeMethod<jobject>(this->object, "getDayOfWeek", "()Ljava.time.DayOfWeek;", )); }

    ZonedDateTime withYear(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withYear", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withMonth(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withMonth", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withDayOfMonth(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withDayOfMonth", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withDayOfYear(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withDayOfYear", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withHour(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withHour", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withMinute(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withMinute", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withSecond(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withSecond", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withNano(int arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withNano", "(I)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime plusYears(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime plusMonths(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime plusWeeks(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plusWeeks", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    static ZonedDateTime ofLocal(LocalDateTime arg0, ZoneId arg1, ZoneOffset arg2) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocal", "(Ljava.time.LocalDateTime;Ljava.time.ZoneId;Ljava.time.ZoneOffset;)Ljava.time.ZonedDateTime;", arg0, arg1, arg2)); }

    ZonedDateTime minusYears(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime minusMonths(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime minusWeeks(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusWeeks", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime resolveLocal(LocalDateTime arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "resolveLocal", "(Ljava.time.LocalDateTime;)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime resolveOffset(ZoneOffset arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "resolveOffset", "(Ljava.time.ZoneOffset;)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime resolveInstant(LocalDateTime arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "resolveInstant", "(Ljava.time.LocalDateTime;)Ljava.time.ZonedDateTime;", arg0)); }

    ChronoZonedDateTime withZoneSameInstant(ZoneId arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withZoneSameInstant", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ZonedDateTime withZoneSameInstant(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withZoneSameInstant", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    OffsetDateTime toOffsetDateTime() { return OffsetDateTime(*javaClass->invokeMethod<jobject>(this->object, "toOffsetDateTime", "()Ljava.time.OffsetDateTime;", )); }

    static ZonedDateTime ofLenient(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLenient", "(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1, arg2)); }

    ChronoZonedDateTime withZoneSameLocal(ZoneId arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withZoneSameLocal", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ZonedDateTime withZoneSameLocal(ZoneId arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withZoneSameLocal", "(Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime withLaterOffsetAtOverlap() { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withLaterOffsetAtOverlap", "()Ljava.time.ZonedDateTime;", )); }

    ChronoZonedDateTime withLaterOffsetAtOverlap() { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withLaterOffsetAtOverlap", "()Ljava.time.chrono.ChronoZonedDateTime;", )); }

    ZonedDateTime withEarlierOffsetAtOverlap() { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withEarlierOffsetAtOverlap", "()Ljava.time.ZonedDateTime;", )); }

    ChronoZonedDateTime withEarlierOffsetAtOverlap() { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withEarlierOffsetAtOverlap", "()Ljava.time.chrono.ChronoZonedDateTime;", )); }

    static ZonedDateTime ofStrict(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofStrict", "(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1, arg2)); }

    ZonedDateTime withFixedOffsetZone() { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withFixedOffsetZone", "()Ljava.time.ZonedDateTime;", )); }

    static ZonedDateTime parse(CharSequence arg0) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.ZonedDateTime;", arg0)); }

    static ZonedDateTime parse(CharSequence arg0, DateTimeFormatter arg1) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;Ljava.time.format.DateTimeFormatter;)Ljava.time.ZonedDateTime;", arg0, arg1)); }

    int getYear() { return int(*javaClass->invokeMethod<int>(this->object, "getYear", "()I", )); }

    int getMonthValue() { return int(*javaClass->invokeMethod<int>(this->object, "getMonthValue", "()I", )); }

    int getDayOfMonth() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfMonth", "()I", )); }

    int getHour() { return int(*javaClass->invokeMethod<int>(this->object, "getHour", "()I", )); }

    int getMinute() { return int(*javaClass->invokeMethod<int>(this->object, "getMinute", "()I", )); }

    int getSecond() { return int(*javaClass->invokeMethod<int>(this->object, "getSecond", "()I", )); }

    static ZonedDateTime ofInstant(Instant arg0, ZoneId arg1) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofInstant", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1)); }

    static ZonedDateTime ofInstant(LocalDateTime arg0, ZoneOffset arg1, ZoneId arg2) { return ZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "ofInstant", "(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1, arg2)); }

    ZonedDateTime minusDays(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime minusHours(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusHours", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime minusMinutes(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusMinutes", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime minusSeconds(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusSeconds", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime minusNanos(long arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minusNanos", "(J)Ljava.time.ZonedDateTime;", arg0)); }

    ZonedDateTime truncatedTo(TemporalUnit arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "truncatedTo", "(Ljava.time.temporal.TemporalUnit;)Ljava.time.ZonedDateTime;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

    ZonedDateTime with(TemporalAdjuster arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.ZonedDateTime;", arg0)); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoZonedDateTime with(TemporalField arg0, long arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

    ChronoZonedDateTime with(TemporalAdjuster arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ZonedDateTime with(TemporalField arg0, long arg1) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.ZonedDateTime;", arg0, arg1)); }

};


/**
 * Classpath: java.time.chrono.ChronoZonedDateTime
 * Package name: java.time.chrono
 */
class ChronoZonedDateTime : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.ChronoZonedDateTime";
public:
    STATICINITIALIZE;

    ChronoZonedDateTime(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ChronoZonedDateTime arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.chrono.ChronoZonedDateTime;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    String format(DateTimeFormatter arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.time.format.DateTimeFormatter;)Ljava.lang.String;", arg0)); }

    static ChronoZonedDateTime from(TemporalAccessor arg0) { return ChronoZonedDateTime(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    ZoneOffset getOffset() { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffset", "()Ljava.time.ZoneOffset;", )); }

    static Object _deserializeLambda_(SerializedLambda arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "$deserializeLambda$", "(Ljava.lang.invoke.SerializedLambda;)Ljava.lang.Object;", arg0)); }

    bool isEqual(ChronoZonedDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljava.time.chrono.ChronoZonedDateTime;)Z", arg0)); }

    Instant toInstant() { return Instant(*javaClass->invokeMethod<jobject>(this->object, "toInstant", "()Ljava.time.Instant;", )); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalUnit arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalUnit;)Z", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    ZoneId getZone() { return ZoneId(*javaClass->invokeMethod<jobject>(this->object, "getZone", "()Ljava.time.ZoneId;", )); }

    Temporal plus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoZonedDateTime plus(long arg0, TemporalUnit arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

    Temporal plus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    ChronoZonedDateTime plus(TemporalAmount arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ChronoZonedDateTime minus(TemporalAmount arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    Temporal minus(long arg0, TemporalUnit arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoZonedDateTime minus(long arg0, TemporalUnit arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "minus", "(JLjava.time.temporal.TemporalUnit;)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

    Temporal minus(TemporalAmount arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.temporal.Temporal;", arg0)); }

    bool isAfter(ChronoZonedDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAfter", "(Ljava.time.chrono.ChronoZonedDateTime;)Z", arg0)); }

    bool isBefore(ChronoZonedDateTime arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBefore", "(Ljava.time.chrono.ChronoZonedDateTime;)Z", arg0)); }

    ChronoLocalDateTime toLocalDateTime() { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalDateTime", "()Ljava.time.chrono.ChronoLocalDateTime;", )); }

    LocalTime toLocalTime() { return LocalTime(*javaClass->invokeMethod<jobject>(this->object, "toLocalTime", "()Ljava.time.LocalTime;", )); }

    ChronoLocalDate toLocalDate() { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "toLocalDate", "()Ljava.time.chrono.ChronoLocalDate;", )); }

    static Comparator timeLineOrder() { return Comparator(*javaClass->invokeStaticMethod<jobject>(this->object, "timeLineOrder", "()Ljava.util.Comparator;", )); }

    ChronoZonedDateTime withZoneSameInstant(ZoneId arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withZoneSameInstant", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ChronoZonedDateTime withZoneSameLocal(ZoneId arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withZoneSameLocal", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ChronoZonedDateTime withLaterOffsetAtOverlap() { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withLaterOffsetAtOverlap", "()Ljava.time.chrono.ChronoZonedDateTime;", )); }

    ChronoZonedDateTime withEarlierOffsetAtOverlap() { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "withEarlierOffsetAtOverlap", "()Ljava.time.chrono.ChronoZonedDateTime;", )); }

    Chronology getChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.Chronology;", )); }

    static int lambda_timeLineOrder_f56e6d02_1(ChronoZonedDateTime arg0, ChronoZonedDateTime arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$timeLineOrder$f56e6d02$1", "(Ljava.time.chrono.ChronoZonedDateTime;Ljava.time.chrono.ChronoZonedDateTime;)I", arg0, arg1)); }

    long toEpochSecond() { return long(*javaClass->invokeMethod<long>(this->object, "toEpochSecond", "()J", )); }

    Temporal with(TemporalField arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ChronoZonedDateTime with(TemporalField arg0, long arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalField;J)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

    ChronoZonedDateTime with(TemporalAdjuster arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    Temporal with(TemporalAdjuster arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "with", "(Ljava.time.temporal.TemporalAdjuster;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.chrono.Chronology
 * Package name: java.time.chrono
 */
class Chronology : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.Chronology";
public:
    STATICINITIALIZE;

    Chronology(jobject object) : JavaObject(object) {}

    bool isLeapYear(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "(J)Z", arg0)); }

    Era eraOf(int arg0) { return Era(*javaClass->invokeMethod<jobject>(this->object, "eraOf", "(I)Ljava.time.chrono.Era;", arg0)); }

    static Set getAvailableChronologies() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getAvailableChronologies", "()Ljava.util.Set;", )); }

    int prolepticYear(Era arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "prolepticYear", "(Ljava.time.chrono.Era;I)I", arg0, arg1)); }

    ChronoLocalDate dateYearDay(int arg0, int arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateYearDay", "(II)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate dateYearDay(Era arg0, int arg1, int arg2) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateYearDay", "(Ljava.time.chrono.Era;II)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1, arg2)); }

    ChronoLocalDate dateNow(Clock arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "(Ljava.time.Clock;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    ChronoLocalDate dateNow() { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "()Ljava.time.chrono.ChronoLocalDate;", )); }

    ChronoLocalDate dateNow(ZoneId arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    ChronoLocalDate dateEpochDay(long arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateEpochDay", "(J)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    List eras() { return List(*javaClass->invokeMethod<jobject>(this->object, "eras", "()Ljava.util.List;", )); }

    ChronoLocalDate resolveDate(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveDate", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoPeriod period(int arg0, int arg1, int arg2) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "period", "(III)Ljava.time.chrono.ChronoPeriod;", arg0, arg1, arg2)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(Chronology arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.chrono.Chronology;)I", arg0)); }

    static Chronology of(String arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;)Ljava.time.chrono.Chronology;", arg0)); }

    static Chronology from(TemporalAccessor arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.Chronology;", arg0)); }

    String getId() { return String(*javaClass->invokeMethod<jobject>(this->object, "getId", "()Ljava.lang.String;", )); }

    ValueRange range(ChronoField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.ChronoField;)Ljava.time.temporal.ValueRange;", arg0)); }

    ChronoLocalDate date(int arg0, int arg1, int arg2) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(III)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1, arg2)); }

    ChronoLocalDate date(TemporalAccessor arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    ChronoLocalDate date(Era arg0, int arg1, int arg2, int arg3) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(Ljava.time.chrono.Era;III)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1, arg2, arg3)); }

    String getCalendarType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCalendarType", "()Ljava.lang.String;", )); }

    long epochSecond(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, ZoneOffset arg6) { return long(*javaClass->invokeMethod<long>(this->object, "epochSecond", "(IIIIIILjava.time.ZoneOffset;)J", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    long epochSecond(Era arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, ZoneOffset arg7) { return long(*javaClass->invokeMethod<long>(this->object, "epochSecond", "(Ljava.time.chrono.Era;IIIIIILjava.time.ZoneOffset;)J", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    ChronoLocalDateTime localDateTime(TemporalAccessor arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "localDateTime", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    ChronoZonedDateTime zonedDateTime(TemporalAccessor arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ChronoZonedDateTime zonedDateTime(Instant arg0, ZoneId arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

    static Chronology ofLocale(Locale arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocale", "(Ljava.util.Locale;)Ljava.time.chrono.Chronology;", arg0)); }

    String getDisplayName(TextStyle arg0, Locale arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1)); }

};


/**
 * Classpath: java.time.chrono.Era
 * Package name: java.time.chrono
 */
class Era : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.Era";
public:
    STATICINITIALIZE;

    Era(jobject object) : JavaObject(object) {}

    int get(TemporalField arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.time.temporal.TemporalField;)I", arg0)); }

    long getLong(TemporalField arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.time.temporal.TemporalField;)J", arg0)); }

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    Object query(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "query", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    ValueRange range(TemporalField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.TemporalField;)Ljava.time.temporal.ValueRange;", arg0)); }

    bool isSupported(TemporalField arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.time.temporal.TemporalField;)Z", arg0)); }

    String getDisplayName(TextStyle arg0, Locale arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.time.format.TextStyle;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1)); }

    Temporal adjustInto(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.chrono.ChronoPeriod
 * Package name: java.time.chrono
 */
class ChronoPeriod : public JavaObject {
protected:
    const inline static char *className = "java.time.chrono.ChronoPeriod";
public:
    STATICINITIALIZE;

    ChronoPeriod(jobject object) : JavaObject(object) {}

    long get(TemporalUnit arg0) { return long(*javaClass->invokeMethod<long>(this->object, "get", "(Ljava.time.temporal.TemporalUnit;)J", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    ChronoPeriod normalized() { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "normalized", "()Ljava.time.chrono.ChronoPeriod;", )); }

    ChronoPeriod plus(TemporalAmount arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    List getUnits() { return List(*javaClass->invokeMethod<jobject>(this->object, "getUnits", "()Ljava.util.List;", )); }

    ChronoPeriod negated() { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "negated", "()Ljava.time.chrono.ChronoPeriod;", )); }

    ChronoPeriod multipliedBy(int arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "multipliedBy", "(I)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    bool isNegative() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNegative", "()Z", )); }

    ChronoPeriod minus(TemporalAmount arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    Chronology getChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.Chronology;", )); }

    static ChronoPeriod between(ChronoLocalDate arg0, ChronoLocalDate arg1) { return ChronoPeriod(*javaClass->invokeStaticMethod<jobject>(this->object, "between", "(Ljava.time.chrono.ChronoLocalDate;Ljava.time.chrono.ChronoLocalDate;)Ljava.time.chrono.ChronoPeriod;", arg0, arg1)); }

    bool isZero() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isZero", "()Z", )); }

    Temporal addTo(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "addTo", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal subtractFrom(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "subtractFrom", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.temporal.ChronoField
 * Package name: java.time.temporal
 */
class ChronoField : public Enum {
protected:
    const inline static char *className = "java.time.temporal.ChronoField";
public:
    STATICINITIALIZE;

    ChronoField(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static ChronoField valueOf(String arg0) { return ChronoField(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.temporal.ChronoField;", arg0)); }

    ValueRange range() { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "()Ljava.time.temporal.ValueRange;", )); }

    int checkValidIntValue(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "checkValidIntValue", "(J)I", arg0)); }

    String getDisplayName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    bool isDateBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDateBased", "()Z", )); }

    bool isTimeBased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTimeBased", "()Z", )); }

    bool isSupportedBy(TemporalAccessor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupportedBy", "(Ljava.time.temporal.TemporalAccessor;)Z", arg0)); }

    Temporal adjustInto(Temporal arg0, long arg1) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "adjustInto", "(Ljava.time.temporal.Temporal;J)Ljava.time.temporal.Temporal;", arg0, arg1)); }

    ValueRange rangeRefinedBy(TemporalAccessor arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "rangeRefinedBy", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.temporal.ValueRange;", arg0)); }

    TemporalUnit getBaseUnit() { return TemporalUnit(*javaClass->invokeMethod<jobject>(this->object, "getBaseUnit", "()Ljava.time.temporal.TemporalUnit;", )); }

    TemporalUnit getRangeUnit() { return TemporalUnit(*javaClass->invokeMethod<jobject>(this->object, "getRangeUnit", "()Ljava.time.temporal.TemporalUnit;", )); }

    long getFrom(TemporalAccessor arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getFrom", "(Ljava.time.temporal.TemporalAccessor;)J", arg0)); }

    long checkValidValue(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "checkValidValue", "(J)J", arg0)); }

};


/**
 * Classpath: java.time.chrono.IsoEra
 * Package name: java.time.chrono
 */
class IsoEra : public Enum {
protected:
    const inline static char *className = "java.time.chrono.IsoEra";
public:
    STATICINITIALIZE;

    IsoEra(jobject object) : JavaObject(object) {}

    static IsoEra valueOf(String arg0) { return IsoEra(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.chrono.IsoEra;", arg0)); }

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    static IsoEra of(int arg0) { return IsoEra(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(I)Ljava.time.chrono.IsoEra;", arg0)); }

};


/**
 * Classpath: java.time.Period
 * Package name: java.time
 */
class Period : public Object {
protected:
    const inline static char *className = "java.time.Period";
public:
    STATICINITIALIZE;

    Period(jobject object) : JavaObject(object) {}

    long toTotalMonths() { return long(*javaClass->invokeMethod<long>(this->object, "toTotalMonths", "()J", )); }

    int getDays() { return int(*javaClass->invokeMethod<int>(this->object, "getDays", "()I", )); }

    int getYears() { return int(*javaClass->invokeMethod<int>(this->object, "getYears", "()I", )); }

    void validateChrono(TemporalAccessor arg0) { (*javaClass->invokeMethod<void>(this->object, "validateChrono", "(Ljava.time.temporal.TemporalAccessor;)V", arg0)); }

    static Period ofYears(int arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "ofYears", "(I)Ljava.time.Period;", arg0)); }

    static Period ofMonths(int arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "ofMonths", "(I)Ljava.time.Period;", arg0)); }

    static Period ofWeeks(int arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "ofWeeks", "(I)Ljava.time.Period;", arg0)); }

    Period withYears(int arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "withYears", "(I)Ljava.time.Period;", arg0)); }

    Period withMonths(int arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "withMonths", "(I)Ljava.time.Period;", arg0)); }

    Period withDays(int arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "withDays", "(I)Ljava.time.Period;", arg0)); }

    long get(TemporalUnit arg0) { return long(*javaClass->invokeMethod<long>(this->object, "get", "(Ljava.time.temporal.TemporalUnit;)J", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static Period of(int arg0, int arg1, int arg2) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(III)Ljava.time.Period;", arg0, arg1, arg2)); }

    static Period from(TemporalAmount arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.Period;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    static Period create(int arg0, int arg1, int arg2) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(III)Ljava.time.Period;", arg0, arg1, arg2)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    Period normalized() { return Period(*javaClass->invokeMethod<jobject>(this->object, "normalized", "()Ljava.time.Period;", )); }

    ChronoPeriod normalized() { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "normalized", "()Ljava.time.chrono.ChronoPeriod;", )); }

    int getMonths() { return int(*javaClass->invokeMethod<int>(this->object, "getMonths", "()I", )); }

    Period plus(TemporalAmount arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.Period;", arg0)); }

    ChronoPeriod plus(TemporalAmount arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "plus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    List getUnits() { return List(*javaClass->invokeMethod<jobject>(this->object, "getUnits", "()Ljava.util.List;", )); }

    static bool charMatch(CharSequence arg0, int arg1, int arg2, char arg3) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "charMatch", "(Ljava.lang.CharSequence;IIC)Z", arg0, arg1, arg2, arg3)); }

    static int parseNumber(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseNumber", "(Ljava.lang.CharSequence;III)I", arg0, arg1, arg2, arg3)); }

    Period negated() { return Period(*javaClass->invokeMethod<jobject>(this->object, "negated", "()Ljava.time.Period;", )); }

    ChronoPeriod negated() { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "negated", "()Ljava.time.chrono.ChronoPeriod;", )); }

    Period multipliedBy(int arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "multipliedBy", "(I)Ljava.time.Period;", arg0)); }

    ChronoPeriod multipliedBy(int arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "multipliedBy", "(I)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    Period plusDays(long arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "plusDays", "(J)Ljava.time.Period;", arg0)); }

    bool isNegative() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNegative", "()Z", )); }

    Period minus(TemporalAmount arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.Period;", arg0)); }

    ChronoPeriod minus(TemporalAmount arg0) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "minus", "(Ljava.time.temporal.TemporalAmount;)Ljava.time.chrono.ChronoPeriod;", arg0)); }

    static Period ofDays(int arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "ofDays", "(I)Ljava.time.Period;", arg0)); }

    static Period readExternal(DataInput arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.Period;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    Period plusYears(long arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "plusYears", "(J)Ljava.time.Period;", arg0)); }

    Period plusMonths(long arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "plusMonths", "(J)Ljava.time.Period;", arg0)); }

    Period minusYears(long arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "minusYears", "(J)Ljava.time.Period;", arg0)); }

    Period minusMonths(long arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "minusMonths", "(J)Ljava.time.Period;", arg0)); }

    Chronology getChronology() { return Chronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.Chronology;", )); }

    IsoChronology getChronology() { return IsoChronology(*javaClass->invokeMethod<jobject>(this->object, "getChronology", "()Ljava.time.chrono.IsoChronology;", )); }

    static Period parse(CharSequence arg0) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "parse", "(Ljava.lang.CharSequence;)Ljava.time.Period;", arg0)); }

    static Period between(LocalDate arg0, LocalDate arg1) { return Period(*javaClass->invokeStaticMethod<jobject>(this->object, "between", "(Ljava.time.LocalDate;Ljava.time.LocalDate;)Ljava.time.Period;", arg0, arg1)); }

    bool isZero() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isZero", "()Z", )); }

    Period minusDays(long arg0) { return Period(*javaClass->invokeMethod<jobject>(this->object, "minusDays", "(J)Ljava.time.Period;", arg0)); }

    Temporal addTo(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "addTo", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

    Temporal subtractFrom(Temporal arg0) { return Temporal(*javaClass->invokeMethod<jobject>(this->object, "subtractFrom", "(Ljava.time.temporal.Temporal;)Ljava.time.temporal.Temporal;", arg0)); }

};


/**
 * Classpath: java.time.chrono.AbstractChronology
 * Package name: java.time.chrono
 */
class AbstractChronology : public Object {
protected:
    const inline static char *className = "java.time.chrono.AbstractChronology";
public:
    STATICINITIALIZE;

    AbstractChronology(jobject object) : JavaObject(object) {}

    static Set getAvailableChronologies() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getAvailableChronologies", "()Ljava.util.Set;", )); }

    ChronoLocalDate resolveDate(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveDate", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    void addFieldValue(Map arg0, ChronoField arg1, long arg2) { (*javaClass->invokeMethod<void>(this->object, "addFieldValue", "(Ljava.util.Map;Ljava.time.temporal.ChronoField;J)V", arg0, arg1, arg2)); }

    ChronoLocalDate resolveYMD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYMD", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate resolveYearOfEra(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYearOfEra", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    void resolveProlepticMonth(Map arg0, ResolverStyle arg1) { (*javaClass->invokeMethod<void>(this->object, "resolveProlepticMonth", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)V", arg0, arg1)); }

    static Chronology registerChrono(Chronology arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "registerChrono", "(Ljava.time.chrono.Chronology;)Ljava.time.chrono.Chronology;", arg0)); }

    static Chronology registerChrono(Chronology arg0, String arg1) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "registerChrono", "(Ljava.time.chrono.Chronology;Ljava.lang.String;)Ljava.time.chrono.Chronology;", arg0, arg1)); }

    static bool initCache() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "initCache", "()Z", )); }

    static Chronology of0(String arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "of0", "(Ljava.lang.String;)Ljava.time.chrono.Chronology;", arg0)); }

    ChronoLocalDate resolveYMAA(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYMAA", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate resolveYMAD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYMAD", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate resolveYD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYD", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate resolveYAA(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYAA", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate resolveYAD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYAD", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    ChronoLocalDate resolveAligned(ChronoLocalDate arg0, long arg1, long arg2, long arg3) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveAligned", "(Ljava.time.chrono.ChronoLocalDate;JJJ)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1, arg2, arg3)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(Chronology arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.chrono.Chronology;)I", arg0)); }

    static Chronology of(String arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.String;)Ljava.time.chrono.Chronology;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    static Chronology readExternal(DataInput arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.chrono.Chronology;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    static Chronology ofLocale(Locale arg0) { return Chronology(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocale", "(Ljava.util.Locale;)Ljava.time.chrono.Chronology;", arg0)); }

};


/**
 * Classpath: java.time.format.DecimalStyle
 * Package name: java.time.format
 */
class DecimalStyle : public Object {
protected:
    const inline static char *className = "java.time.format.DecimalStyle";
public:
    STATICINITIALIZE;

    DecimalStyle(jobject object) : JavaObject(object) {}

    char getZeroDigit() { return char(*javaClass->invokeMethod<char>(this->object, "getZeroDigit", "()C", )); }

    char getDecimalSeparator() { return char(*javaClass->invokeMethod<char>(this->object, "getDecimalSeparator", "()C", )); }

    static DecimalStyle ofDefaultLocale() { return DecimalStyle(*javaClass->invokeStaticMethod<jobject>(this->object, "ofDefaultLocale", "()Ljava.time.format.DecimalStyle;", )); }

    DecimalStyle withZeroDigit(char arg0) { return DecimalStyle(*javaClass->invokeMethod<jobject>(this->object, "withZeroDigit", "(C)Ljava.time.format.DecimalStyle;", arg0)); }

    char getPositiveSign() { return char(*javaClass->invokeMethod<char>(this->object, "getPositiveSign", "()C", )); }

    DecimalStyle withPositiveSign(char arg0) { return DecimalStyle(*javaClass->invokeMethod<jobject>(this->object, "withPositiveSign", "(C)Ljava.time.format.DecimalStyle;", arg0)); }

    char getNegativeSign() { return char(*javaClass->invokeMethod<char>(this->object, "getNegativeSign", "()C", )); }

    DecimalStyle withNegativeSign(char arg0) { return DecimalStyle(*javaClass->invokeMethod<jobject>(this->object, "withNegativeSign", "(C)Ljava.time.format.DecimalStyle;", arg0)); }

    DecimalStyle withDecimalSeparator(char arg0) { return DecimalStyle(*javaClass->invokeMethod<jobject>(this->object, "withDecimalSeparator", "(C)Ljava.time.format.DecimalStyle;", arg0)); }

    int convertToDigit(char arg0) { return int(*javaClass->invokeMethod<int>(this->object, "convertToDigit", "(C)I", arg0)); }

    String convertNumberToI18N(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "convertNumberToI18N", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static DecimalStyle of(Locale arg0) { return DecimalStyle(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.util.Locale;)Ljava.time.format.DecimalStyle;", arg0)); }

    static DecimalStyle create(Locale arg0) { return DecimalStyle(*javaClass->invokeStaticMethod<jobject>(this->object, "create", "(Ljava.util.Locale;)Ljava.time.format.DecimalStyle;", arg0)); }

    static Set getAvailableLocales() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getAvailableLocales", "()Ljava.util.Set;", )); }

};


/**
 * Classpath: java.time.format.DateTimeFormatterBuilder$DayPeriod
 * Enclosing class: java.time.format.DateTimeFormatterBuilder
 * Package name: java.time.format
 */
class DateTimeFormatterBuilder_DayPeriod : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeFormatterBuilder$DayPeriod";
public:
    STATICINITIALIZE;

    DateTimeFormatterBuilder_DayPeriod(jobject object) : JavaObject(object) {}

    long duration() { return long(*javaClass->invokeMethod<long>(this->object, "duration", "()J", )); }

    bool includes(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "includes", "(J)Z", arg0)); }

    static Map getDayPeriodMap(Locale arg0) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "getDayPeriodMap", "(Ljava.util.Locale;)Ljava.util.Map;", arg0)); }

    static long mapToIndex(String arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "mapToIndex", "(Ljava.lang.String;)J", arg0)); }

    static DateTimeException lambda_ofLocale_4(Locale arg0, long arg1) { return DateTimeException(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$ofLocale$4", "(Ljava.util.Locale;J)Ljava.time.DateTimeException;", arg0, arg1)); }

    static bool lambda_ofLocale_3(long arg0, DateTimeFormatterBuilder_DayPeriod arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$ofLocale$3", "(JLjava.time.format.DateTimeFormatterBuilder$DayPeriod;)Z", arg0, arg1)); }

    static Map lambda_getDayPeriodMap_2(Locale arg0) { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$getDayPeriodMap$2", "(Ljava.util.Locale;)Ljava.util.Map;", arg0)); }

    static void lambda_getDayPeriodMap_1(Map arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "lambda$getDayPeriodMap$1", "(Ljava.util.Map;Ljava.lang.String;)V", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    long mid() { return long(*javaClass->invokeMethod<long>(this->object, "mid", "()J", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    long getIndex() { return long(*javaClass->invokeMethod<long>(this->object, "getIndex", "()J", )); }

    static DateTimeFormatterBuilder_DayPeriod ofLocale(Locale arg0, long arg1) { return DateTimeFormatterBuilder_DayPeriod(*javaClass->invokeStaticMethod<jobject>(this->object, "ofLocale", "(Ljava.util.Locale;J)Ljava.time.format.DateTimeFormatterBuilder$DayPeriod;", arg0, arg1)); }

    static int lambda_static_0(DateTimeFormatterBuilder_DayPeriod arg0, DateTimeFormatterBuilder_DayPeriod arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$static$0", "(Ljava.time.format.DateTimeFormatterBuilder$DayPeriod;Ljava.time.format.DateTimeFormatterBuilder$DayPeriod;)I", arg0, arg1)); }

};


/**
 * Classpath: java.time.format.FormatStyle
 * Package name: java.time.format
 */
class FormatStyle : public Enum {
protected:
    const inline static char *className = "java.time.format.FormatStyle";
public:
    STATICINITIALIZE;

    FormatStyle(jobject object) : JavaObject(object) {}

    static FormatStyle valueOf(String arg0) { return FormatStyle(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.time.format.FormatStyle;", arg0)); }

};


/**
 * Classpath: [Ljava.time.temporal.TemporalField;
 */
class TemporalField_interface : public Object {
protected:
    const inline static char *className = "[Ljava.time.temporal.TemporalField;";
public:
    STATICINITIALIZE;

    TemporalField_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.time.temporal.TemporalQuery;
 */
class TemporalQuery_interface : public Object {
protected:
    const inline static char *className = "[Ljava.time.temporal.TemporalQuery;";
public:
    STATICINITIALIZE;

    TemporalQuery_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.time.format.DateTimeFormatterBuilder$CompositePrinterParser
 * Enclosing class: java.time.format.DateTimeFormatterBuilder
 * Package name: java.time.format
 */
class DateTimeFormatterBuilder_CompositePrinterParser : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimeFormatterBuilder$CompositePrinterParser";
public:
    STATICINITIALIZE;

    DateTimeFormatterBuilder_CompositePrinterParser(jobject object) : JavaObject(object) {}

    DateTimeFormatterBuilder_CompositePrinterParser withOptional(bool arg0) { return DateTimeFormatterBuilder_CompositePrinterParser(*javaClass->invokeMethod<jobject>(this->object, "withOptional", "(Z)Ljava.time.format.DateTimeFormatterBuilder$CompositePrinterParser;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool format(DateTimePrintContext arg0, StringBuilder arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "format", "(Ljava.time.format.DateTimePrintContext;Ljava.lang.StringBuilder;)Z", arg0, arg1)); }

    int parse(DateTimeParseContext arg0, CharSequence arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "parse", "(Ljava.time.format.DateTimeParseContext;Ljava.lang.CharSequence;I)I", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.time.format.DateTimePrintContext
 * Package name: java.time.format
 */
class DateTimePrintContext : public Object {
protected:
    const inline static char *className = "java.time.format.DateTimePrintContext";
public:
    STATICINITIALIZE;

    DateTimePrintContext(jobject object) : JavaObject(object) {}

    DecimalStyle getDecimalStyle() { return DecimalStyle(*javaClass->invokeMethod<jobject>(this->object, "getDecimalStyle", "()Ljava.time.format.DecimalStyle;", )); }

    void startOptional() { (*javaClass->invokeMethod<void>(this->object, "startOptional", "()V", )); }

    void endOptional() { (*javaClass->invokeMethod<void>(this->object, "endOptional", "()V", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Long getValue(TemporalField arg0) { return Long(*javaClass->invokeMethod<jobject>(this->object, "getValue", "(Ljava.time.temporal.TemporalField;)Ljava.lang.Long;", arg0)); }

    Object getValue(TemporalQuery arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "(Ljava.time.temporal.TemporalQuery;)Ljava.lang.Object;", arg0)); }

    TemporalAccessor getTemporal() { return TemporalAccessor(*javaClass->invokeMethod<jobject>(this->object, "getTemporal", "()Ljava.time.temporal.TemporalAccessor;", )); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    static TemporalAccessor adjust(TemporalAccessor arg0, DateTimeFormatter arg1) { return TemporalAccessor(*javaClass->invokeStaticMethod<jobject>(this->object, "adjust", "(Ljava.time.temporal.TemporalAccessor;Ljava.time.format.DateTimeFormatter;)Ljava.time.temporal.TemporalAccessor;", arg0, arg1)); }

};


/**
 * Classpath: java.text.Format
 * Package name: java.text
 */
class Format : public Object {
protected:
    const inline static char *className = "java.text.Format";
public:
    STATICINITIALIZE;

    Format(jobject object) : JavaObject(object) {}

    AttributedCharacterIterator createAttributedCharacterIterator(String arg0) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "(Ljava.lang.String;)Ljava.text.AttributedCharacterIterator;", arg0)); }

    AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator_interface arg0) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "([Ljava.text.AttributedCharacterIterator;)Ljava.text.AttributedCharacterIterator;", arg0)); }

    AttributedCharacterIterator createAttributedCharacterIterator(String arg0, AttributedCharacterIterator_Attribute arg1, Object arg2) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "(Ljava.lang.String;Ljava.text.AttributedCharacterIterator$Attribute;Ljava.lang.Object;)Ljava.text.AttributedCharacterIterator;", arg0, arg1, arg2)); }

    AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator arg0, AttributedCharacterIterator_Attribute arg1, Object arg2) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "createAttributedCharacterIterator", "(Ljava.text.AttributedCharacterIterator;Ljava.text.AttributedCharacterIterator$Attribute;Ljava.lang.Object;)Ljava.text.AttributedCharacterIterator;", arg0, arg1, arg2)); }

    Object parseObject(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "parseObject", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Object parseObject(String arg0, ParsePosition arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "parseObject", "(Ljava.lang.String;Ljava.text.ParsePosition;)Ljava.lang.Object;", arg0, arg1)); }

    AttributedCharacterIterator formatToCharacterIterator(Object arg0) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "formatToCharacterIterator", "(Ljava.lang.Object;)Ljava.text.AttributedCharacterIterator;", arg0)); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    String format(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    StringBuffer format(Object arg0, StringBuffer arg1, FieldPosition arg2) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.lang.Object;Ljava.lang.StringBuffer;Ljava.text.FieldPosition;)Ljava.lang.StringBuffer;", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.text.AttributedCharacterIterator
 * Package name: java.text
 */
class AttributedCharacterIterator : public JavaObject {
protected:
    const inline static char *className = "java.text.AttributedCharacterIterator";
public:
    STATICINITIALIZE;

    AttributedCharacterIterator(jobject object) : JavaObject(object) {}

    Map getAttributes() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getAttributes", "()Ljava.util.Map;", )); }

    int getRunStart(Set arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRunStart", "(Ljava.util.Set;)I", arg0)); }

    int getRunStart(AttributedCharacterIterator_Attribute arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRunStart", "(Ljava.text.AttributedCharacterIterator$Attribute;)I", arg0)); }

    int getRunStart() { return int(*javaClass->invokeMethod<int>(this->object, "getRunStart", "()I", )); }

    int getRunLimit(Set arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRunLimit", "(Ljava.util.Set;)I", arg0)); }

    int getRunLimit(AttributedCharacterIterator_Attribute arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRunLimit", "(Ljava.text.AttributedCharacterIterator$Attribute;)I", arg0)); }

    int getRunLimit() { return int(*javaClass->invokeMethod<int>(this->object, "getRunLimit", "()I", )); }

    Set getAllAttributeKeys() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getAllAttributeKeys", "()Ljava.util.Set;", )); }

    Object getAttribute(AttributedCharacterIterator_Attribute arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAttribute", "(Ljava.text.AttributedCharacterIterator$Attribute;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.text.AttributedCharacterIterator$Attribute
 * Enclosing class: java.text.AttributedCharacterIterator
 * Package name: java.text
 */
class AttributedCharacterIterator_Attribute : public Object {
protected:
    const inline static char *className = "java.text.AttributedCharacterIterator$Attribute";
public:
    STATICINITIALIZE;

    AttributedCharacterIterator_Attribute(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: [Ljava.text.AttributedCharacterIterator;
 */
class AttributedCharacterIterator_interface : public Object {
protected:
    const inline static char *className = "[Ljava.text.AttributedCharacterIterator;";
public:
    STATICINITIALIZE;

    AttributedCharacterIterator_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.text.FieldPosition
 * Package name: java.text
 */
class FieldPosition : public Object {
protected:
    const inline static char *className = "java.text.FieldPosition";
public:
    STATICINITIALIZE;

    FieldPosition(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getField() { return int(*javaClass->invokeMethod<int>(this->object, "getField", "()I", )); }

    int getBeginIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getBeginIndex", "()I", )); }

    int getEndIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getEndIndex", "()I", )); }

    Format_Field getFieldAttribute() { return Format_Field(*javaClass->invokeMethod<jobject>(this->object, "getFieldAttribute", "()Ljava.text.Format$Field;", )); }

    void setBeginIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBeginIndex", "(I)V", arg0)); }

    void setEndIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setEndIndex", "(I)V", arg0)); }

    Format_FieldDelegate getFieldDelegate() { return Format_FieldDelegate(*javaClass->invokeMethod<jobject>(this->object, "getFieldDelegate", "()Ljava.text.Format$FieldDelegate;", )); }

    bool matchesField(Format_Field arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "matchesField", "(Ljava.text.Format$Field;)Z", arg0)); }

    bool matchesField(Format_Field arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "matchesField", "(Ljava.text.Format$Field;I)Z", arg0, arg1)); }

};


/**
 * Classpath: java.text.Format$Field
 * Enclosing class: java.text.Format
 * Package name: java.text
 */
class Format_Field : public AttributedCharacterIterator_Attribute {
protected:
    const inline static char *className = "java.text.Format$Field";
public:
    STATICINITIALIZE;

    Format_Field(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.text.Format$FieldDelegate
 * Enclosing class: java.text.Format
 * Package name: java.text
 */
class Format_FieldDelegate : public JavaObject {
protected:
    const inline static char *className = "java.text.Format$FieldDelegate";
public:
    STATICINITIALIZE;

    Format_FieldDelegate(jobject object) : JavaObject(object) {}

    void formatted(Format_Field arg0, Object arg1, int arg2, int arg3, StringBuffer arg4) { (*javaClass->invokeMethod<void>(this->object, "formatted", "(Ljava.text.Format$Field;Ljava.lang.Object;IILjava.lang.StringBuffer;)V", arg0, arg1, arg2, arg3, arg4)); }

    void formatted(int arg0, Format_Field arg1, Object arg2, int arg3, int arg4, StringBuffer arg5) { (*javaClass->invokeMethod<void>(this->object, "formatted", "(ILjava.text.Format$Field;Ljava.lang.Object;IILjava.lang.StringBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

};


/**
 * Classpath: java.time.zone.ZoneOffsetTransition
 * Package name: java.time.zone
 */
class ZoneOffsetTransition : public Object {
protected:
    const inline static char *className = "java.time.zone.ZoneOffsetTransition";
public:
    STATICINITIALIZE;

    ZoneOffsetTransition(jobject object) : JavaObject(object) {}

    Duration getDuration() { return Duration(*javaClass->invokeMethod<jobject>(this->object, "getDuration", "()Ljava.time.Duration;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ZoneOffsetTransition arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.time.zone.ZoneOffsetTransition;)I", arg0)); }

    static ZoneOffsetTransition of(LocalDateTime arg0, ZoneOffset arg1, ZoneOffset arg2) { return ZoneOffsetTransition(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.time.LocalDateTime;Ljava.time.ZoneOffset;Ljava.time.ZoneOffset;)Ljava.time.zone.ZoneOffsetTransition;", arg0, arg1, arg2)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    static ZoneOffsetTransition readExternal(DataInput arg0) { return ZoneOffsetTransition(*javaClass->invokeStaticMethod<jobject>(this->object, "readExternal", "(Ljava.io.DataInput;)Ljava.time.zone.ZoneOffsetTransition;", arg0)); }

    void writeExternal(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.DataOutput;)V", arg0)); }

    List getValidOffsets() { return List(*javaClass->invokeMethod<jobject>(this->object, "getValidOffsets", "()Ljava.util.List;", )); }

    ZoneOffset getOffsetAfter() { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffsetAfter", "()Ljava.time.ZoneOffset;", )); }

    bool isValidOffset(ZoneOffset arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidOffset", "(Ljava.time.ZoneOffset;)Z", arg0)); }

    bool isGap() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isGap", "()Z", )); }

    bool isOverlap() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOverlap", "()Z", )); }

    ZoneOffset getOffsetBefore() { return ZoneOffset(*javaClass->invokeMethod<jobject>(this->object, "getOffsetBefore", "()Ljava.time.ZoneOffset;", )); }

    LocalDateTime getDateTimeBefore() { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "getDateTimeBefore", "()Ljava.time.LocalDateTime;", )); }

    LocalDateTime getDateTimeAfter() { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "getDateTimeAfter", "()Ljava.time.LocalDateTime;", )); }

    int getDurationSeconds() { return int(*javaClass->invokeMethod<int>(this->object, "getDurationSeconds", "()I", )); }

    Instant getInstant() { return Instant(*javaClass->invokeMethod<jobject>(this->object, "getInstant", "()Ljava.time.Instant;", )); }

    long toEpochSecond() { return long(*javaClass->invokeMethod<long>(this->object, "toEpochSecond", "()J", )); }

};


/**
 * Classpath: java.nio.channels.FileLock
 * Package name: java.nio.channels
 */
class FileLock : public Object {
protected:
    const inline static char *className = "java.nio.channels.FileLock";
public:
    STATICINITIALIZE;

    FileLock(jobject object) : JavaObject(object) {}

    bool isValid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValid", "()Z", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    long position() { return long(*javaClass->invokeMethod<long>(this->object, "position", "()J", )); }

    long size() { return long(*javaClass->invokeMethod<long>(this->object, "size", "()J", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void release() { (*javaClass->invokeMethod<void>(this->object, "release", "()V", )); }

    Channel acquiredBy() { return Channel(*javaClass->invokeMethod<jobject>(this->object, "acquiredBy", "()Ljava.nio.channels.Channel;", )); }

    bool isShared() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isShared", "()Z", )); }

    bool overlaps(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "overlaps", "(JJ)Z", arg0, arg1)); }

    FileChannel channel() { return FileChannel(*javaClass->invokeMethod<jobject>(this->object, "channel", "()Ljava.nio.channels.FileChannel;", )); }

};


/**
 * Classpath: java.nio.channels.Channel
 * Package name: java.nio.channels
 */
class Channel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.Channel";
public:
    STATICINITIALIZE;

    Channel(jobject object) : JavaObject(object) {}

    bool isOpen() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpen", "()Z", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

};


/**
 * Classpath: java.nio.channels.SeekableByteChannel
 * Package name: java.nio.channels
 */
class SeekableByteChannel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.SeekableByteChannel";
public:
    STATICINITIALIZE;

    SeekableByteChannel(jobject object) : JavaObject(object) {}

    long position() { return long(*javaClass->invokeMethod<long>(this->object, "position", "()J", )); }

    SeekableByteChannel position(long arg0) { return SeekableByteChannel(*javaClass->invokeMethod<jobject>(this->object, "position", "(J)Ljava.nio.channels.SeekableByteChannel;", arg0)); }

    long size() { return long(*javaClass->invokeMethod<long>(this->object, "size", "()J", )); }

    int write(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "write", "(Ljava.nio.ByteBuffer;)I", arg0)); }

    int read(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "(Ljava.nio.ByteBuffer;)I", arg0)); }

    SeekableByteChannel truncate(long arg0) { return SeekableByteChannel(*javaClass->invokeMethod<jobject>(this->object, "truncate", "(J)Ljava.nio.channels.SeekableByteChannel;", arg0)); }

};


/**
 * Classpath: java.nio.channels.FileChannel$MapMode
 * Enclosing class: java.nio.channels.FileChannel
 * Package name: java.nio.channels
 */
class FileChannel_MapMode : public Object {
protected:
    const inline static char *className = "java.nio.channels.FileChannel$MapMode";
public:
    STATICINITIALIZE;

    FileChannel_MapMode(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.io.FileDescriptor
 * Package name: java.io
 */
class FileDescriptor : public Object {
protected:
    const inline static char *className = "java.io.FileDescriptor";
public:
    STATICINITIALIZE;

    FileDescriptor(jobject object) : JavaObject(object) {}

    void set(int arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(I)V", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void sync() { (*javaClass->invokeMethod<void>(this->object, "sync", "()V", )); }

    void attach(Closeable arg0) { (*javaClass->invokeMethod<void>(this->object, "attach", "(Ljava.io.Closeable;)V", arg0)); }

    void closeAll(Closeable arg0) { (*javaClass->invokeMethod<void>(this->object, "closeAll", "(Ljava.io.Closeable;)V", arg0)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    static long getHandle(int arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "getHandle", "(I)J", arg0)); }

    static bool getAppend(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "getAppend", "(I)Z", arg0)); }

    void unregisterCleanup() { (*javaClass->invokeMethod<void>(this->object, "unregisterCleanup", "()V", )); }

    void close0() { (*javaClass->invokeMethod<void>(this->object, "close0", "()V", )); }

    bool valid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "valid", "()Z", )); }

    void setHandle(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setHandle", "(J)V", arg0)); }

    void registerCleanup(PhantomCleanable arg0) { (*javaClass->invokeMethod<void>(this->object, "registerCleanup", "(Ljdk.internal.ref.PhantomCleanable;)V", arg0)); }

};


/**
 * Classpath: java.io.Closeable
 * Package name: java.io
 */
class Closeable : public JavaObject {
protected:
    const inline static char *className = "java.io.Closeable";
public:
    STATICINITIALIZE;

    Closeable(jobject object) : JavaObject(object) {}

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

};


/**
 * Classpath: java.lang.ref.PhantomReference
 * Package name: java.lang.ref
 */
class PhantomReference : public Reference {
protected:
    const inline static char *className = "java.lang.ref.PhantomReference";
public:
    STATICINITIALIZE;

    PhantomReference(jobject object) : JavaObject(object) {}

    Object get() { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "()Ljava.lang.Object;", )); }

    bool refersTo0(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "refersTo0", "(Ljava.lang.Object;)Z", arg0)); }

};


/**
 * Classpath: jdk.internal.access.foreign.UnmapperProxy
 * Package name: jdk.internal.access.foreign
 */
class UnmapperProxy : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.access.foreign.UnmapperProxy";
public:
    STATICINITIALIZE;

    UnmapperProxy(jobject object) : JavaObject(object) {}

    long address() { return long(*javaClass->invokeMethod<long>(this->object, "address", "()J", )); }

    void unmap() { (*javaClass->invokeMethod<void>(this->object, "unmap", "()V", )); }

    bool isSync() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSync", "()Z", )); }

    FileDescriptor fileDescriptor() { return FileDescriptor(*javaClass->invokeMethod<jobject>(this->object, "fileDescriptor", "()Ljava.io.FileDescriptor;", )); }

};


/**
 * Classpath: [Ljava.nio.ByteBuffer;
 */
class ByteBuffer_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.ByteBuffer;";
public:
    STATICINITIALIZE;

    ByteBuffer_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.nio.file.OpenOption;
 */
class OpenOption_interface : public Object {
protected:
    const inline static char *className = "[Ljava.nio.file.OpenOption;";
public:
    STATICINITIALIZE;

    OpenOption_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.channels.WritableByteChannel
 * Package name: java.nio.channels
 */
class WritableByteChannel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.WritableByteChannel";
public:
    STATICINITIALIZE;

    WritableByteChannel(jobject object) : JavaObject(object) {}

    int write(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "write", "(Ljava.nio.ByteBuffer;)I", arg0)); }

};


/**
 * Classpath: java.nio.channels.ReadableByteChannel
 * Package name: java.nio.channels
 */
class ReadableByteChannel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.ReadableByteChannel";
public:
    STATICINITIALIZE;

    ReadableByteChannel(jobject object) : JavaObject(object) {}

    int read(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "(Ljava.nio.ByteBuffer;)I", arg0)); }

};


/**
 * Classpath: java.nio.channels.spi.AbstractInterruptibleChannel
 * Package name: java.nio.channels.spi
 */
class AbstractInterruptibleChannel : public Object {
protected:
    const inline static char *className = "java.nio.channels.spi.AbstractInterruptibleChannel";
public:
    STATICINITIALIZE;

    AbstractInterruptibleChannel(jobject object) : JavaObject(object) {}

    void end(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "end", "(Z)V", arg0)); }

    void begin() { (*javaClass->invokeMethod<void>(this->object, "begin", "()V", )); }

    bool isOpen() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpen", "()Z", )); }

    static void blockedOn(Interruptible arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "blockedOn", "(Lsun.nio.ch.Interruptible;)V", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void implCloseChannel() { (*javaClass->invokeMethod<void>(this->object, "implCloseChannel", "()V", )); }

};


/**
 * Classpath: java.util.concurrent.ExecutorService
 * Package name: java.util.concurrent
 */
class ExecutorService : public JavaObject {
protected:
    const inline static char *className = "java.util.concurrent.ExecutorService";
public:
    STATICINITIALIZE;

    ExecutorService(jobject object) : JavaObject(object) {}

    Future submit(Callable arg0) { return Future(*javaClass->invokeMethod<jobject>(this->object, "submit", "(Ljava.util.concurrent.Callable;)Ljava.util.concurrent.Future;", arg0)); }

    Future submit(Runnable arg0) { return Future(*javaClass->invokeMethod<jobject>(this->object, "submit", "(Ljava.lang.Runnable;)Ljava.util.concurrent.Future;", arg0)); }

    Future submit(Runnable arg0, Object arg1) { return Future(*javaClass->invokeMethod<jobject>(this->object, "submit", "(Ljava.lang.Runnable;Ljava.lang.Object;)Ljava.util.concurrent.Future;", arg0, arg1)); }

    void shutdown() { (*javaClass->invokeMethod<void>(this->object, "shutdown", "()V", )); }

    List shutdownNow() { return List(*javaClass->invokeMethod<jobject>(this->object, "shutdownNow", "()Ljava.util.List;", )); }

    bool isTerminated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTerminated", "()Z", )); }

    bool awaitTermination(long arg0, TimeUnit arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "awaitTermination", "(JLjava.util.concurrent.TimeUnit;)Z", arg0, arg1)); }

    List invokeAll(Collection arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "invokeAll", "(Ljava.util.Collection;)Ljava.util.List;", arg0)); }

    List invokeAll(Collection arg0, long arg1, TimeUnit arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "invokeAll", "(Ljava.util.Collection;JLjava.util.concurrent.TimeUnit;)Ljava.util.List;", arg0, arg1, arg2)); }

    Object invokeAny(Collection arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeAny", "(Ljava.util.Collection;)Ljava.lang.Object;", arg0)); }

    Object invokeAny(Collection arg0, long arg1, TimeUnit arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeAny", "(Ljava.util.Collection;JLjava.util.concurrent.TimeUnit;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    bool isShutdown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isShutdown", "()Z", )); }

};


/**
 * Classpath: java.util.concurrent.Callable
 * Package name: java.util.concurrent
 */
class Callable : public JavaObject {
protected:
    const inline static char *className = "java.util.concurrent.Callable";
public:
    STATICINITIALIZE;

    Callable(jobject object) : JavaObject(object) {}

    Object call() { return Object(*javaClass->invokeMethod<jobject>(this->object, "call", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.util.concurrent.Future
 * Package name: java.util.concurrent
 */
class Future : public JavaObject {
protected:
    const inline static char *className = "java.util.concurrent.Future";
public:
    STATICINITIALIZE;

    Future(jobject object) : JavaObject(object) {}

    Object get(long arg0, TimeUnit arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(JLjava.util.concurrent.TimeUnit;)Ljava.lang.Object;", arg0, arg1)); }

    Object get() { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "()Ljava.lang.Object;", )); }

    bool cancel(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "cancel", "(Z)Z", arg0)); }

    bool isCancelled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCancelled", "()Z", )); }

    bool isDone() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDone", "()Z", )); }

};


/**
 * Classpath: java.nio.channels.AsynchronousFileChannel
 * Package name: java.nio.channels
 */
class AsynchronousFileChannel : public Object {
protected:
    const inline static char *className = "java.nio.channels.AsynchronousFileChannel";
public:
    STATICINITIALIZE;

    AsynchronousFileChannel(jobject object) : JavaObject(object) {}

    Future lock(long arg0, long arg1, bool arg2) { return Future(*javaClass->invokeMethod<jobject>(this->object, "lock", "(JJZ)Ljava.util.concurrent.Future;", arg0, arg1, arg2)); }

    void lock(Object arg0, CompletionHandler arg1) { (*javaClass->invokeMethod<void>(this->object, "lock", "(Ljava.lang.Object;Ljava.nio.channels.CompletionHandler;)V", arg0, arg1)); }

    void lock(long arg0, long arg1, bool arg2, Object arg3, CompletionHandler arg4) { (*javaClass->invokeMethod<void>(this->object, "lock", "(JJZLjava.lang.Object;Ljava.nio.channels.CompletionHandler;)V", arg0, arg1, arg2, arg3, arg4)); }

    Future lock() { return Future(*javaClass->invokeMethod<jobject>(this->object, "lock", "()Ljava.util.concurrent.Future;", )); }

    long size() { return long(*javaClass->invokeMethod<long>(this->object, "size", "()J", )); }

    Future write(ByteBuffer arg0, long arg1) { return Future(*javaClass->invokeMethod<jobject>(this->object, "write", "(Ljava.nio.ByteBuffer;J)Ljava.util.concurrent.Future;", arg0, arg1)); }

    void write(ByteBuffer arg0, long arg1, Object arg2, CompletionHandler arg3) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.nio.ByteBuffer;JLjava.lang.Object;Ljava.nio.channels.CompletionHandler;)V", arg0, arg1, arg2, arg3)); }

    Future read(ByteBuffer arg0, long arg1) { return Future(*javaClass->invokeMethod<jobject>(this->object, "read", "(Ljava.nio.ByteBuffer;J)Ljava.util.concurrent.Future;", arg0, arg1)); }

    void read(ByteBuffer arg0, long arg1, Object arg2, CompletionHandler arg3) { (*javaClass->invokeMethod<void>(this->object, "read", "(Ljava.nio.ByteBuffer;JLjava.lang.Object;Ljava.nio.channels.CompletionHandler;)V", arg0, arg1, arg2, arg3)); }

    static AsynchronousFileChannel open(Path arg0, Set arg1, ExecutorService arg2, FileAttribute_interface arg3) { return AsynchronousFileChannel(*javaClass->invokeStaticMethod<jobject>(this->object, "open", "(Ljava.nio.file.Path;Ljava.util.Set;Ljava.util.concurrent.ExecutorService;[Ljava.nio.file.attribute.FileAttribute;)Ljava.nio.channels.AsynchronousFileChannel;", arg0, arg1, arg2, arg3)); }

    static AsynchronousFileChannel open(Path arg0, OpenOption_interface arg1) { return AsynchronousFileChannel(*javaClass->invokeStaticMethod<jobject>(this->object, "open", "(Ljava.nio.file.Path;[Ljava.nio.file.OpenOption;)Ljava.nio.channels.AsynchronousFileChannel;", arg0, arg1)); }

    FileLock tryLock() { return FileLock(*javaClass->invokeMethod<jobject>(this->object, "tryLock", "()Ljava.nio.channels.FileLock;", )); }

    FileLock tryLock(long arg0, long arg1, bool arg2) { return FileLock(*javaClass->invokeMethod<jobject>(this->object, "tryLock", "(JJZ)Ljava.nio.channels.FileLock;", arg0, arg1, arg2)); }

    AsynchronousFileChannel truncate(long arg0) { return AsynchronousFileChannel(*javaClass->invokeMethod<jobject>(this->object, "truncate", "(J)Ljava.nio.channels.AsynchronousFileChannel;", arg0)); }

    void force(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "force", "(Z)V", arg0)); }

};


/**
 * Classpath: java.nio.channels.CompletionHandler
 * Package name: java.nio.channels
 */
class CompletionHandler : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.CompletionHandler";
public:
    STATICINITIALIZE;

    CompletionHandler(jobject object) : JavaObject(object) {}

    void failed(Throwable arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "failed", "(Ljava.lang.Throwable;Ljava.lang.Object;)V", arg0, arg1)); }

    void completed(Object arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "completed", "(Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1)); }

};


/**
 * Classpath: java.lang.Iterable
 * Package name: java.lang
 */
class Iterable : public JavaObject {
protected:
    const inline static char *className = "java.lang.Iterable";
public:
    STATICINITIALIZE;

    Iterable(jobject object) : JavaObject(object) {}

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    void forEach(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.Consumer;)V", arg0)); }

};


/**
 * Classpath: java.nio.file.PathMatcher
 * Package name: java.nio.file
 */
class PathMatcher : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.PathMatcher";
public:
    STATICINITIALIZE;

    PathMatcher(jobject object) : JavaObject(object) {}

    bool matches(Path arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "matches", "(Ljava.nio.file.Path;)Z", arg0)); }

};


/**
 * Classpath: java.nio.file.attribute.UserPrincipalLookupService
 * Package name: java.nio.file.attribute
 */
class UserPrincipalLookupService : public Object {
protected:
    const inline static char *className = "java.nio.file.attribute.UserPrincipalLookupService";
public:
    STATICINITIALIZE;

    UserPrincipalLookupService(jobject object) : JavaObject(object) {}

    UserPrincipal lookupPrincipalByName(String arg0) { return UserPrincipal(*javaClass->invokeMethod<jobject>(this->object, "lookupPrincipalByName", "(Ljava.lang.String;)Ljava.nio.file.attribute.UserPrincipal;", arg0)); }

    GroupPrincipal lookupPrincipalByGroupName(String arg0) { return GroupPrincipal(*javaClass->invokeMethod<jobject>(this->object, "lookupPrincipalByGroupName", "(Ljava.lang.String;)Ljava.nio.file.attribute.GroupPrincipal;", arg0)); }

};


/**
 * Classpath: java.nio.file.attribute.UserPrincipal
 * Package name: java.nio.file.attribute
 */
class UserPrincipal : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.attribute.UserPrincipal";
public:
    STATICINITIALIZE;

    UserPrincipal(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.nio.file.attribute.GroupPrincipal
 * Package name: java.nio.file.attribute
 */
class GroupPrincipal : public JavaObject {
protected:
    const inline static char *className = "java.nio.file.attribute.GroupPrincipal";
public:
    STATICINITIALIZE;

    GroupPrincipal(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.AssertionStatusDirectives
 * Package name: java.lang
 */
class AssertionStatusDirectives : public Object {
protected:
    const inline static char *className = "java.lang.AssertionStatusDirectives";
public:
    STATICINITIALIZE;

    AssertionStatusDirectives(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.util.concurrent.ConcurrentHashMap$CollectionView
 * Enclosing class: java.util.concurrent.ConcurrentHashMap
 * Package name: java.util.concurrent
 */
class ConcurrentHashMap_CollectionView : public Object {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap$CollectionView";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_CollectionView(jobject object) : JavaObject(object) {}

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

    ConcurrentHashMap getMap() { return ConcurrentHashMap(*javaClass->invokeMethod<jobject>(this->object, "getMap", "()Ljava.util.concurrent.ConcurrentHashMap;", )); }

};


/**
 * Classpath: [Ljava.util.concurrent.ConcurrentHashMap$Node;
 */
class ConcurrentHashMap_Node_interface : public Object {
protected:
    const inline static char *className = "[Ljava.util.concurrent.ConcurrentHashMap$Node;";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_Node_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.util.concurrent.ConcurrentHashMap$Node
 * Enclosing class: java.util.concurrent.ConcurrentHashMap
 * Package name: java.util.concurrent
 */
class ConcurrentHashMap_Node : public Object {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap$Node";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_Node(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object getValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.Object;", )); }

    Object getKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getKey", "()Ljava.lang.Object;", )); }

    ConcurrentHashMap_Node find(int arg0, Object arg1) { return ConcurrentHashMap_Node(*javaClass->invokeMethod<jobject>(this->object, "find", "(ILjava.lang.Object;)Ljava.util.concurrent.ConcurrentHashMap$Node;", arg0, arg1)); }

    Object setValue(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "setValue", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.function.ToDoubleBiFunction
 * Package name: java.util.function
 */
class ToDoubleBiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToDoubleBiFunction";
public:
    STATICINITIALIZE;

    ToDoubleBiFunction(jobject object) : JavaObject(object) {}

    double applyAsDouble(Object arg0, Object arg1) { return double(*javaClass->invokeMethod<double>(this->object, "applyAsDouble", "(Ljava.lang.Object;Ljava.lang.Object;)D", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.DoubleBinaryOperator
 * Package name: java.util.function
 */
class DoubleBinaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleBinaryOperator";
public:
    STATICINITIALIZE;

    DoubleBinaryOperator(jobject object) : JavaObject(object) {}

    double applyAsDouble(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "applyAsDouble", "(DD)D", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.ToLongBiFunction
 * Package name: java.util.function
 */
class ToLongBiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToLongBiFunction";
public:
    STATICINITIALIZE;

    ToLongBiFunction(jobject object) : JavaObject(object) {}

    long applyAsLong(Object arg0, Object arg1) { return long(*javaClass->invokeMethod<long>(this->object, "applyAsLong", "(Ljava.lang.Object;Ljava.lang.Object;)J", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.ToIntBiFunction
 * Package name: java.util.function
 */
class ToIntBiFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ToIntBiFunction";
public:
    STATICINITIALIZE;

    ToIntBiFunction(jobject object) : JavaObject(object) {}

    int applyAsInt(Object arg0, Object arg1) { return int(*javaClass->invokeMethod<int>(this->object, "applyAsInt", "(Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.IntBinaryOperator
 * Package name: java.util.function
 */
class IntBinaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntBinaryOperator";
public:
    STATICINITIALIZE;

    IntBinaryOperator(jobject object) : JavaObject(object) {}

    int applyAsInt(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "applyAsInt", "(II)I", arg0, arg1)); }

};


/**
 * Classpath: java.util.AbstractMap
 * Package name: java.util
 */
class AbstractMap : public Object {
protected:
    const inline static char *className = "java.util.AbstractMap";
public:
    STATICINITIALIZE;

    AbstractMap(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    void putAll(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "putAll", "(Ljava.util.Map;)V", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    static bool eq(Object arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "eq", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

};


/**
 * Classpath: java.util.ResourceBundle$CacheKey
 * Enclosing class: java.util.ResourceBundle
 * Package name: java.util
 */
class ResourceBundle_CacheKey : public Object {
protected:
    const inline static char *className = "java.util.ResourceBundle$CacheKey";
public:
    STATICINITIALIZE;

    ResourceBundle_CacheKey(jobject object) : JavaObject(object) {}

    ResourceBundle_CacheKey setLocale(Locale arg0) { return ResourceBundle_CacheKey(*javaClass->invokeMethod<jobject>(this->object, "setLocale", "(Ljava.util.Locale;)Ljava.util.ResourceBundle$CacheKey;", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    Throwable getCause() { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "getCause", "()Ljava.lang.Throwable;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Module getModule() { return Module(*javaClass->invokeMethod<jobject>(this->object, "getModule", "()Ljava.lang.Module;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void setCause(Throwable arg0) { (*javaClass->invokeMethod<void>(this->object, "setCause", "(Ljava.lang.Throwable;)V", arg0)); }

    Module getCallerModule() { return Module(*javaClass->invokeMethod<jobject>(this->object, "getCallerModule", "()Ljava.lang.Module;", )); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    bool hasProviders() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasProviders", "()Z", )); }

    void setFormat(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setFormat", "(Ljava.lang.String;)V", arg0)); }

    bool callerHasProvider() { return bool(*javaClass->invokeMethod<boolean>(this->object, "callerHasProvider", "()Z", )); }

    String getFormat() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFormat", "()Ljava.lang.String;", )); }

    ServiceLoader getProviders() { return ServiceLoader(*javaClass->invokeMethod<jobject>(this->object, "getProviders", "()Ljava.util.ServiceLoader;", )); }

};


/**
 * Classpath: java.util.ServiceLoader
 * Package name: java.util
 */
class ServiceLoader : public Object {
protected:
    const inline static char *className = "java.util.ServiceLoader";
public:
    STATICINITIALIZE;

    ServiceLoader(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static ServiceLoader load(Class arg0, ClassLoader arg1) { return ServiceLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "load", "(Ljava.lang.Class;Ljava.lang.ClassLoader;)Ljava.util.ServiceLoader;", arg0, arg1)); }

    static ServiceLoader load(Class arg0) { return ServiceLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "load", "(Ljava.lang.Class;)Ljava.util.ServiceLoader;", arg0)); }

    static ServiceLoader load(ModuleLayer arg0, Class arg1) { return ServiceLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "load", "(Ljava.lang.ModuleLayer;Ljava.lang.Class;)Ljava.util.ServiceLoader;", arg0, arg1)); }

    static ServiceLoader load(Class arg0, ClassLoader arg1, Module arg2) { return ServiceLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "load", "(Ljava.lang.Class;Ljava.lang.ClassLoader;Ljava.lang.Module;)Ljava.util.ServiceLoader;", arg0, arg1, arg2)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    Stream stream() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "stream", "()Ljava.util.stream.Stream;", )); }

    Constructor getConstructor(Class arg0) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "getConstructor", "(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0)); }

    static void fail(Class arg0, URL arg1, int arg2, String arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "fail", "(Ljava.lang.Class;Ljava.net.URL;ILjava.lang.String;)V", arg0, arg1, arg2, arg3)); }

    static void fail(Class arg0, String arg1, Throwable arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "fail", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1, arg2)); }

    static void fail(Class arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "fail", "(Ljava.lang.Class;Ljava.lang.String;)V", arg0, arg1)); }

    Optional findFirst() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "findFirst", "()Ljava.util.Optional;", )); }

    static ServiceLoader loadInstalled(Class arg0) { return ServiceLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "loadInstalled", "(Ljava.lang.Class;)Ljava.util.ServiceLoader;", arg0)); }

    static void checkCaller(Class arg0, Class arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkCaller", "(Ljava.lang.Class;Ljava.lang.Class;)V", arg0, arg1)); }

    bool inExplicitModule(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "inExplicitModule", "(Ljava.lang.Class;)Z", arg0)); }

    Method findStaticProviderMethod(Class arg0) { return Method(*javaClass->invokeMethod<jobject>(this->object, "findStaticProviderMethod", "(Ljava.lang.Class;)Ljava.lang.reflect.Method;", arg0)); }

    Iterator newLookupIterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "newLookupIterator", "()Ljava.util.Iterator;", )); }

    ServiceLoader_Provider loadProvider(ServicesCatalog_ServiceProvider arg0) { return ServiceLoader_Provider(*javaClass->invokeMethod<jobject>(this->object, "loadProvider", "(Ljdk.internal.module.ServicesCatalog$ServiceProvider;)Ljava.util.ServiceLoader$Provider;", arg0)); }

    void reload() { (*javaClass->invokeMethod<void>(this->object, "reload", "()V", )); }

    static Class lambda_loadProvider_1(Module arg0, String arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$loadProvider$1", "(Ljava.lang.Module;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1)); }

    static Void lambda_findStaticProviderMethod_0(Method arg0) { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$findStaticProviderMethod$0", "(Ljava.lang.reflect.Method;)Ljava.lang.Void;", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.MethodTypeSignature
 * Package name: sun.reflect.generics.tree
 */
class MethodTypeSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.MethodTypeSignature";
public:
    STATICINITIALIZE;

    MethodTypeSignature(jobject object) : JavaObject(object) {}

    static MethodTypeSignature make(FormalTypeParameter_interface arg0, TypeSignature_interface arg1, ReturnType arg2, FieldTypeSignature_interface arg3) { return MethodTypeSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "([Lsun.reflect.generics.tree.FormalTypeParameter;[Lsun.reflect.generics.tree.TypeSignature;Lsun.reflect.generics.tree.ReturnType;[Lsun.reflect.generics.tree.FieldTypeSignature;)Lsun.reflect.generics.tree.MethodTypeSignature;", arg0, arg1, arg2, arg3)); }

    ReturnType getReturnType() { return ReturnType(*javaClass->invokeMethod<jobject>(this->object, "getReturnType", "()Lsun.reflect.generics.tree.ReturnType;", )); }

    void accept(Visitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.Visitor;)V", arg0)); }

};


/**
 * Classpath: [Lsun.reflect.generics.tree.FormalTypeParameter;
 */
class FormalTypeParameter_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.FormalTypeParameter;";
public:
    STATICINITIALIZE;

    FormalTypeParameter_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Lsun.reflect.generics.tree.TypeSignature;
 */
class TypeSignature_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.TypeSignature;";
public:
    STATICINITIALIZE;

    TypeSignature_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.reflect.generics.tree.ReturnType
 * Package name: sun.reflect.generics.tree
 */
class ReturnType : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ReturnType";
public:
    STATICINITIALIZE;

    ReturnType(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.reflect.generics.visitor.Visitor
 * Package name: sun.reflect.generics.visitor
 */
class Visitor : public JavaObject {
protected:
    const inline static char *className = "sun.reflect.generics.visitor.Visitor";
public:
    STATICINITIALIZE;

    Visitor(jobject object) : JavaObject(object) {}

    void visitMethodTypeSignature(MethodTypeSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitMethodTypeSignature", "(Lsun.reflect.generics.tree.MethodTypeSignature;)V", arg0)); }

    void visitClassSignature(ClassSignature arg0) { (*javaClass->invokeMethod<void>(this->object, "visitClassSignature", "(Lsun.reflect.generics.tree.ClassSignature;)V", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.tree.ClassSignature
 * Package name: sun.reflect.generics.tree
 */
class ClassSignature : public Object {
protected:
    const inline static char *className = "sun.reflect.generics.tree.ClassSignature";
public:
    STATICINITIALIZE;

    ClassSignature(jobject object) : JavaObject(object) {}

    ClassTypeSignature getSuperclass() { return ClassTypeSignature(*javaClass->invokeMethod<jobject>(this->object, "getSuperclass", "()Lsun.reflect.generics.tree.ClassTypeSignature;", )); }

    static ClassSignature make(FormalTypeParameter_interface arg0, ClassTypeSignature arg1, ClassTypeSignature_interface arg2) { return ClassSignature(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "([Lsun.reflect.generics.tree.FormalTypeParameter;Lsun.reflect.generics.tree.ClassTypeSignature;[Lsun.reflect.generics.tree.ClassTypeSignature;)Lsun.reflect.generics.tree.ClassSignature;", arg0, arg1, arg2)); }

    void accept(Visitor arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Lsun.reflect.generics.visitor.Visitor;)V", arg0)); }

};


/**
 * Classpath: [Lsun.reflect.generics.tree.ClassTypeSignature;
 */
class ClassTypeSignature_interface : public Object {
protected:
    const inline static char *className = "[Lsun.reflect.generics.tree.ClassTypeSignature;";
public:
    STATICINITIALIZE;

    ClassTypeSignature_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.reflect.generics.repository.GenericDeclRepository
 * Package name: sun.reflect.generics.repository
 */
class GenericDeclRepository : public AbstractRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.GenericDeclRepository";
public:
    STATICINITIALIZE;

    GenericDeclRepository(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.reflect.ConstructorAccessor
 * Package name: jdk.internal.reflect
 */
class ConstructorAccessor : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.reflect.ConstructorAccessor";
public:
    STATICINITIALIZE;

    ConstructorAccessor(jobject object) : JavaObject(object) {}

    Object newInstance(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "newInstance", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.lang.reflect.Executable
 * Package name: java.lang.reflect
 */
class Executable : public AccessibleObject {
protected:
    const inline static char *className = "java.lang.reflect.Executable";
public:
    STATICINITIALIZE;

    Executable(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    ConstructorRepository getGenericInfo() { return ConstructorRepository(*javaClass->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun.reflect.generics.repository.ConstructorRepository;", )); }

    Map declaredAnnotations() { return Map(*javaClass->invokeMethod<jobject>(this->object, "declaredAnnotations", "()Ljava.util.Map;", )); }

    String toGenericString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava.lang.String;", )); }

    static String typeVarBounds(TypeVariable arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "typeVarBounds", "(Ljava.lang.reflect.TypeVariable;)Ljava.lang.String;", arg0)); }

    bool isSynthetic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSynthetic", "()Z", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    bool hasRealParameterData() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasRealParameterData", "()Z", )); }

    bool isVarArgs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVarArgs", "()Z", )); }

    int getParameterCount() { return int(*javaClass->invokeMethod<int>(this->object, "getParameterCount", "()I", )); }

    bool equalParamTypes(Class_interface arg0, Class_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equalParamTypes", "([Ljava.lang.Class;[Ljava.lang.Class;)Z", arg0, arg1)); }

    String sharedToString(int arg0, bool arg1, Class_interface arg2, Class_interface arg3) { return String(*javaClass->invokeMethod<jobject>(this->object, "sharedToString", "(IZ[Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.String;", arg0, arg1, arg2, arg3)); }

    String sharedToGenericString(int arg0, bool arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "sharedToGenericString", "(IZ)Ljava.lang.String;", arg0, arg1)); }

    AnnotatedType getAnnotatedReturnType0(Type arg0) { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedReturnType0", "(Ljava.lang.reflect.Type;)Ljava.lang.reflect.AnnotatedType;", arg0)); }

    bool hasGenericInformation() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasGenericInformation", "()Z", )); }

    void specificToStringHeader(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "specificToStringHeader", "(Ljava.lang.StringBuilder;)V", arg0)); }

    void specificToGenericStringHeader(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "specificToGenericStringHeader", "(Ljava.lang.StringBuilder;)V", arg0)); }

    AnnotatedType getAnnotatedReturnType() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedReturnType", "()Ljava.lang.reflect.AnnotatedType;", )); }

    bool handleParameterNumberMismatch(int arg0, Class_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleParameterNumberMismatch", "(I[Ljava.lang.Class;)Z", arg0, arg1)); }

    void printModifiersIfNonzero(StringBuilder arg0, int arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "printModifiersIfNonzero", "(Ljava.lang.StringBuilder;IZ)V", arg0, arg1, arg2)); }

    void verifyParameters(Parameter_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "verifyParameters", "([Ljava.lang.reflect.Parameter;)V", arg0)); }

    Type parameterize(Class arg0) { return Type(*javaClass->invokeMethod<jobject>(this->object, "parameterize", "(Ljava.lang.Class;)Ljava.lang.reflect.Type;", arg0)); }

    AnnotatedType getAnnotatedReceiverType() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedReceiverType", "()Ljava.lang.reflect.AnnotatedType;", )); }

};


/**
 * Classpath: [Ljava.lang.reflect.Parameter;
 */
class Parameter_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.Parameter;";
public:
    STATICINITIALIZE;

    Parameter_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.reflect.Method
 * Package name: java.lang.reflect
 */
class Method : public Executable {
protected:
    const inline static char *className = "java.lang.reflect.Method";
public:
    STATICINITIALIZE;

    Method(jobject object) : JavaObject(object) {}

    Object invoke(Object arg0, Object_interface arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invoke", "(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    ConstructorRepository getGenericInfo() { return ConstructorRepository(*javaClass->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun.reflect.generics.repository.ConstructorRepository;", )); }

    MethodRepository getGenericInfo() { return MethodRepository(*javaClass->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun.reflect.generics.repository.MethodRepository;", )); }

    GenericsFactory getFactory() { return GenericsFactory(*javaClass->invokeMethod<jobject>(this->object, "getFactory", "()Lsun.reflect.generics.factory.GenericsFactory;", )); }

    Class getReturnType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getReturnType", "()Ljava.lang.Class;", )); }

    String toGenericString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava.lang.String;", )); }

    bool isSynthetic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSynthetic", "()Z", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    void setAccessible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }

    void checkCanSetAccessible(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava.lang.Class;)V", arg0)); }

    String toShortString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toShortString", "()Ljava.lang.String;", )); }

    AccessibleObject getRoot() { return AccessibleObject(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.lang.reflect.AccessibleObject;", )); }

    Method getRoot() { return Method(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.lang.reflect.Method;", )); }

    String getGenericSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "getGenericSignature", "()Ljava.lang.String;", )); }

    Method copy() { return Method(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Ljava.lang.reflect.Method;", )); }

    bool isVarArgs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVarArgs", "()Z", )); }

    int getParameterCount() { return int(*javaClass->invokeMethod<int>(this->object, "getParameterCount", "()I", )); }

    bool isDefault() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDefault", "()Z", )); }

    String toShortSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "toShortSignature", "()Ljava.lang.String;", )); }

    Type getGenericReturnType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getGenericReturnType", "()Ljava.lang.reflect.Type;", )); }

    MethodAccessor acquireMethodAccessor() { return MethodAccessor(*javaClass->invokeMethod<jobject>(this->object, "acquireMethodAccessor", "()Ljdk.internal.reflect.MethodAccessor;", )); }

    MethodAccessor getMethodAccessor() { return MethodAccessor(*javaClass->invokeMethod<jobject>(this->object, "getMethodAccessor", "()Ljdk.internal.reflect.MethodAccessor;", )); }

    void setMethodAccessor(MethodAccessor arg0) { (*javaClass->invokeMethod<void>(this->object, "setMethodAccessor", "(Ljdk.internal.reflect.MethodAccessor;)V", arg0)); }

    Method leafCopy() { return Method(*javaClass->invokeMethod<jobject>(this->object, "leafCopy", "()Ljava.lang.reflect.Method;", )); }

    bool hasGenericInformation() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasGenericInformation", "()Z", )); }

    void specificToStringHeader(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "specificToStringHeader", "(Ljava.lang.StringBuilder;)V", arg0)); }

    void specificToGenericStringHeader(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "specificToGenericStringHeader", "(Ljava.lang.StringBuilder;)V", arg0)); }

    bool isBridge() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBridge", "()Z", )); }

    Object getDefaultValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDefaultValue", "()Ljava.lang.Object;", )); }

    AnnotatedType getAnnotatedReturnType() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedReturnType", "()Ljava.lang.reflect.AnnotatedType;", )); }

    bool handleParameterNumberMismatch(int arg0, Class_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleParameterNumberMismatch", "(I[Ljava.lang.Class;)Z", arg0, arg1)); }

};


/**
 * Classpath: jdk.internal.reflect.MethodAccessor
 * Package name: jdk.internal.reflect
 */
class MethodAccessor : public JavaObject {
protected:
    const inline static char *className = "jdk.internal.reflect.MethodAccessor";
public:
    STATICINITIALIZE;

    MethodAccessor(jobject object) : JavaObject(object) {}

    Object invoke(Object arg0, Object_interface arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invoke", "(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

};


/**
 * Classpath: jdk.internal.module.ServicesCatalog$ServiceProvider
 * Enclosing class: jdk.internal.module.ServicesCatalog
 * Package name: jdk.internal.module
 */
class ServicesCatalog_ServiceProvider : public Object {
protected:
    const inline static char *className = "jdk.internal.module.ServicesCatalog$ServiceProvider";
public:
    STATICINITIALIZE;

    ServicesCatalog_ServiceProvider(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Module module() { return Module(*javaClass->invokeMethod<jobject>(this->object, "module", "()Ljava.lang.Module;", )); }

    String providerName() { return String(*javaClass->invokeMethod<jobject>(this->object, "providerName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.util.ServiceLoader$Provider
 * Enclosing class: java.util.ServiceLoader
 * Package name: java.util
 */
class ServiceLoader_Provider : public JavaObject {
protected:
    const inline static char *className = "java.util.ServiceLoader$Provider";
public:
    STATICINITIALIZE;

    ServiceLoader_Provider(jobject object) : JavaObject(object) {}

    Object get() { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "()Ljava.lang.Object;", )); }

    Class type() { return Class(*javaClass->invokeMethod<jobject>(this->object, "type", "()Ljava.lang.Class;", )); }

};


/**
 * Classpath: java.util.ResourceBundle$Control
 * Enclosing class: java.util.ResourceBundle
 * Package name: java.util
 */
class ResourceBundle_Control : public Object {
protected:
    const inline static char *className = "java.util.ResourceBundle$Control";
public:
    STATICINITIALIZE;

    ResourceBundle_Control(jobject object) : JavaObject(object) {}

    String toBundleName(String arg0, Locale arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "toBundleName", "(Ljava.lang.String;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1)); }

    ResourceBundle newBundle0(String arg0, String arg1, ClassLoader arg2, bool arg3) { return ResourceBundle(*javaClass->invokeMethod<jobject>(this->object, "newBundle0", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.ClassLoader;Z)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3)); }

    String toResourceName0(String arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "toResourceName0", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    String toResourceName(String arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "toResourceName", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    static ResourceBundle_Control getNoFallbackControl(List arg0) { return ResourceBundle_Control(*javaClass->invokeStaticMethod<jobject>(this->object, "getNoFallbackControl", "(Ljava.util.List;)Ljava.util.ResourceBundle$Control;", arg0)); }

    static Void lambda_newBundle0_0(Constructor arg0) { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$newBundle0$0", "(Ljava.lang.reflect.Constructor;)Ljava.lang.Void;", arg0)); }

    static ResourceBundle_Control getControl(List arg0) { return ResourceBundle_Control(*javaClass->invokeStaticMethod<jobject>(this->object, "getControl", "(Ljava.util.List;)Ljava.util.ResourceBundle$Control;", arg0)); }

    List getFormats(String arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getFormats", "(Ljava.lang.String;)Ljava.util.List;", arg0)); }

    List getCandidateLocales(String arg0, Locale arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getCandidateLocales", "(Ljava.lang.String;Ljava.util.Locale;)Ljava.util.List;", arg0, arg1)); }

    Locale getFallbackLocale(String arg0, Locale arg1) { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getFallbackLocale", "(Ljava.lang.String;Ljava.util.Locale;)Ljava.util.Locale;", arg0, arg1)); }

    ResourceBundle newBundle(String arg0, Locale arg1, String arg2, ClassLoader arg3, bool arg4) { return ResourceBundle(*javaClass->invokeMethod<jobject>(this->object, "newBundle", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.String;Ljava.lang.ClassLoader;Z)Ljava.util.ResourceBundle;", arg0, arg1, arg2, arg3, arg4)); }

    bool needsReload(String arg0, Locale arg1, String arg2, ClassLoader arg3, ResourceBundle arg4, long arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "needsReload", "(Ljava.lang.String;Ljava.util.Locale;Ljava.lang.String;Ljava.lang.ClassLoader;Ljava.util.ResourceBundle;J)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    long getTimeToLive(String arg0, Locale arg1) { return long(*javaClass->invokeMethod<long>(this->object, "getTimeToLive", "(Ljava.lang.String;Ljava.util.Locale;)J", arg0, arg1)); }

};


/**
 * Classpath: java.util.Calendar
 * Package name: java.util
 */
class Calendar : public Object {
protected:
    const inline static char *className = "java.util.Calendar";
public:
    STATICINITIALIZE;

    Calendar(jobject object) : JavaObject(object) {}

    void setTimeInMillis(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setTimeInMillis", "(J)V", arg0)); }

    Date getTime() { return Date(*javaClass->invokeMethod<jobject>(this->object, "getTime", "()Ljava.util.Date;", )); }

    void add(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(II)V", arg0, arg1)); }

    int get(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(I)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    int compareTo(Calendar arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.util.Calendar;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(J)I", arg0)); }

    void clear(int arg0) { (*javaClass->invokeMethod<void>(this->object, "clear", "(I)V", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    static Calendar getInstance() { return Calendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "()Ljava.util.Calendar;", )); }

    static Calendar getInstance(TimeZone arg0, Locale arg1) { return Calendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.util.TimeZone;Ljava.util.Locale;)Ljava.util.Calendar;", arg0, arg1)); }

    static Calendar getInstance(TimeZone arg0) { return Calendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.util.TimeZone;)Ljava.util.Calendar;", arg0)); }

    static Calendar getInstance(Locale arg0) { return Calendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.util.Locale;)Ljava.util.Calendar;", arg0)); }

    void set(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "set", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void set(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(II)V", arg0, arg1)); }

    void set(int arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "set", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void set(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "set", "(III)V", arg0, arg1, arg2)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool isSet(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSet", "(I)Z", arg0)); }

    Instant toInstant() { return Instant(*javaClass->invokeMethod<jobject>(this->object, "toInstant", "()Ljava.time.Instant;", )); }

    void setTime(Date arg0) { (*javaClass->invokeMethod<void>(this->object, "setTime", "(Ljava.util.Date;)V", arg0)); }

    bool before(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "before", "(Ljava.lang.Object;)Z", arg0)); }

    bool after(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "after", "(Ljava.lang.Object;)Z", arg0)); }

    void setWeekCountData(Locale arg0) { (*javaClass->invokeMethod<void>(this->object, "setWeekCountData", "(Ljava.util.Locale;)V", arg0)); }

    static TimeZone defaultTimeZone(Locale arg0) { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "defaultTimeZone", "(Ljava.util.Locale;)Ljava.util.TimeZone;", arg0)); }

    static Calendar createCalendar(TimeZone arg0, Locale arg1) { return Calendar(*javaClass->invokeStaticMethod<jobject>(this->object, "createCalendar", "(Ljava.util.TimeZone;Ljava.util.Locale;)Ljava.util.Calendar;", arg0, arg1)); }

    long getTimeInMillis() { return long(*javaClass->invokeMethod<long>(this->object, "getTimeInMillis", "()J", )); }

    void updateTime() { (*javaClass->invokeMethod<void>(this->object, "updateTime", "()V", )); }

    void computeFields() { (*javaClass->invokeMethod<void>(this->object, "computeFields", "()V", )); }

    int internalGet(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "internalGet", "(I)I", arg0)); }

    void internalSet(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "internalSet", "(II)V", arg0, arg1)); }

    void adjustStamp() { (*javaClass->invokeMethod<void>(this->object, "adjustStamp", "()V", )); }

    bool checkDisplayNameParams(int arg0, int arg1, int arg2, int arg3, Locale arg4, int arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkDisplayNameParams", "(IIIILjava.util.Locale;I)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool isStandaloneStyle(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStandaloneStyle", "(I)Z", arg0)); }

    bool isNarrowFormatStyle(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNarrowFormatStyle", "(I)Z", arg0)); }

    int toStandaloneStyle(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "toStandaloneStyle", "(I)I", arg0)); }

    int getBaseStyle(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getBaseStyle", "(I)I", arg0)); }

    Map getDisplayNamesImpl(int arg0, int arg1, Locale arg2) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getDisplayNamesImpl", "(IILjava.util.Locale;)Ljava.util.Map;", arg0, arg1, arg2)); }

    static bool isFieldSet(int arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isFieldSet", "(II)Z", arg0, arg1)); }

    static int aggregateStamp(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "aggregateStamp", "(II)I", arg0, arg1)); }

    static long getMillisOf(Calendar arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "getMillisOf", "(Ljava.util.Calendar;)J", arg0)); }

    TimeZone getTimeZone() { return TimeZone(*javaClass->invokeMethod<jobject>(this->object, "getTimeZone", "()Ljava.util.TimeZone;", )); }

    void roll(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "roll", "(II)V", arg0, arg1)); }

    void roll(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "roll", "(IZ)V", arg0, arg1)); }

    void invalidateWeekFields() { (*javaClass->invokeMethod<void>(this->object, "invalidateWeekFields", "()V", )); }

    int getGreatestMinimum(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getGreatestMinimum", "(I)I", arg0)); }

    int getMinimum(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMinimum", "(I)I", arg0)); }

    void setLenient(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLenient", "(Z)V", arg0)); }

    int getLeastMaximum(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getLeastMaximum", "(I)I", arg0)); }

    int getMaximum(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMaximum", "(I)I", arg0)); }

    static void appendValue(StringBuilder arg0, String arg1, bool arg2, long arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "appendValue", "(Ljava.lang.StringBuilder;Ljava.lang.String;ZJ)V", arg0, arg1, arg2, arg3)); }

    void computeTime() { (*javaClass->invokeMethod<void>(this->object, "computeTime", "()V", )); }

    Map getDisplayNames(int arg0, int arg1, Locale arg2) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getDisplayNames", "(IILjava.util.Locale;)Ljava.util.Map;", arg0, arg1, arg2)); }

    bool isExternallySet(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isExternallySet", "(I)Z", arg0)); }

    int getSetStateFields() { return int(*javaClass->invokeMethod<int>(this->object, "getSetStateFields", "()I", )); }

    void setFieldsComputed(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setFieldsComputed", "(I)V", arg0)); }

    void setFieldsNormalized(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setFieldsNormalized", "(I)V", arg0)); }

    bool isPartiallyNormalized() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPartiallyNormalized", "()Z", )); }

    bool isFullyNormalized() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFullyNormalized", "()Z", )); }

    void setUnnormalized() { (*javaClass->invokeMethod<void>(this->object, "setUnnormalized", "()V", )); }

    int selectFields() { return int(*javaClass->invokeMethod<int>(this->object, "selectFields", "()I", )); }

    bool isNarrowStyle(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNarrowStyle", "(I)Z", arg0)); }

    static Set getAvailableCalendarTypes() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getAvailableCalendarTypes", "()Ljava.util.Set;", )); }

    void setTimeZone(TimeZone arg0) { (*javaClass->invokeMethod<void>(this->object, "setTimeZone", "(Ljava.util.TimeZone;)V", arg0)); }

    TimeZone getZone() { return TimeZone(*javaClass->invokeMethod<jobject>(this->object, "getZone", "()Ljava.util.TimeZone;", )); }

    void setZoneShared(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setZoneShared", "(Z)V", arg0)); }

    bool isLenient() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLenient", "()Z", )); }

    void setFirstDayOfWeek(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setFirstDayOfWeek", "(I)V", arg0)); }

    int getFirstDayOfWeek() { return int(*javaClass->invokeMethod<int>(this->object, "getFirstDayOfWeek", "()I", )); }

    void setMinimalDaysInFirstWeek(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinimalDaysInFirstWeek", "(I)V", arg0)); }

    int getMinimalDaysInFirstWeek() { return int(*javaClass->invokeMethod<int>(this->object, "getMinimalDaysInFirstWeek", "()I", )); }

    bool isWeekDateSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWeekDateSupported", "()Z", )); }

    int getWeekYear() { return int(*javaClass->invokeMethod<int>(this->object, "getWeekYear", "()I", )); }

    void setWeekDate(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setWeekDate", "(III)V", arg0, arg1, arg2)); }

    int getWeeksInWeekYear() { return int(*javaClass->invokeMethod<int>(this->object, "getWeeksInWeekYear", "()I", )); }

    int getActualMinimum(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getActualMinimum", "(I)I", arg0)); }

    int getActualMaximum(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getActualMaximum", "(I)I", arg0)); }

    static String getFieldName(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getFieldName", "(I)Ljava.lang.String;", arg0)); }

    String getCalendarType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCalendarType", "()Ljava.lang.String;", )); }

    String getDisplayName(int arg0, int arg1, Locale arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(IILjava.util.Locale;)Ljava.lang.String;", arg0, arg1, arg2)); }

    void complete() { (*javaClass->invokeMethod<void>(this->object, "complete", "()V", )); }

};


/**
 * Classpath: java.util.Date
 * Package name: java.util
 */
class Date : public Object {
protected:
    const inline static char *className = "java.util.Date";
public:
    STATICINITIALIZE;

    Date(jobject object) : JavaObject(object) {}

    long getTime() { return long(*javaClass->invokeMethod<long>(this->object, "getTime", "()J", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    int compareTo(Date arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.util.Date;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static Date from(Instant arg0) { return Date(*javaClass->invokeStaticMethod<jobject>(this->object, "from", "(Ljava.time.Instant;)Ljava.util.Date;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    BaseCalendar_Date normalize() { return BaseCalendar_Date(*javaClass->invokeMethod<jobject>(this->object, "normalize", "()Lsun.util.calendar.BaseCalendar$Date;", )); }

    BaseCalendar_Date normalize(BaseCalendar_Date arg0) { return BaseCalendar_Date(*javaClass->invokeMethod<jobject>(this->object, "normalize", "(Lsun.util.calendar.BaseCalendar$Date;)Lsun.util.calendar.BaseCalendar$Date;", arg0)); }

    int getSeconds() { return int(*javaClass->invokeMethod<int>(this->object, "getSeconds", "()I", )); }

    Instant toInstant() { return Instant(*javaClass->invokeMethod<jobject>(this->object, "toInstant", "()Ljava.time.Instant;", )); }

    static long UTC(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return long(*javaClass->invokeStaticMethod<long>(this->object, "UTC", "(IIIIII)J", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setTime", "(J)V", arg0)); }

    static BaseCalendar getCalendarSystem(int arg0) { return BaseCalendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getCalendarSystem", "(I)Lsun.util.calendar.BaseCalendar;", arg0)); }

    static BaseCalendar getCalendarSystem(BaseCalendar_Date arg0) { return BaseCalendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getCalendarSystem", "(Lsun.util.calendar.BaseCalendar$Date;)Lsun.util.calendar.BaseCalendar;", arg0)); }

    static BaseCalendar getCalendarSystem(long arg0) { return BaseCalendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getCalendarSystem", "(J)Lsun.util.calendar.BaseCalendar;", arg0)); }

    long getTimeImpl() { return long(*javaClass->invokeMethod<long>(this->object, "getTimeImpl", "()J", )); }

    BaseCalendar_Date getCalendarDate() { return BaseCalendar_Date(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun.util.calendar.BaseCalendar$Date;", )); }

    void setDate(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDate", "(I)V", arg0)); }

    void setMonth(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMonth", "(I)V", arg0)); }

    int getHours() { return int(*javaClass->invokeMethod<int>(this->object, "getHours", "()I", )); }

    void setHours(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setHours", "(I)V", arg0)); }

    int getMinutes() { return int(*javaClass->invokeMethod<int>(this->object, "getMinutes", "()I", )); }

    void setMinutes(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinutes", "(I)V", arg0)); }

    void setSeconds(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSeconds", "(I)V", arg0)); }

    static StringBuilder convertToAbbr(StringBuilder arg0, String arg1) { return StringBuilder(*javaClass->invokeStaticMethod<jobject>(this->object, "convertToAbbr", "(Ljava.lang.StringBuilder;Ljava.lang.String;)Ljava.lang.StringBuilder;", arg0, arg1)); }

    static BaseCalendar getJulianCalendar() { return BaseCalendar(*javaClass->invokeStaticMethod<jobject>(this->object, "getJulianCalendar", "()Lsun.util.calendar.BaseCalendar;", )); }

    void setYear(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setYear", "(I)V", arg0)); }

    int getDay() { return int(*javaClass->invokeMethod<int>(this->object, "getDay", "()I", )); }

    String toLocaleString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toLocaleString", "()Ljava.lang.String;", )); }

    String toGMTString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toGMTString", "()Ljava.lang.String;", )); }

    int getTimezoneOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getTimezoneOffset", "()I", )); }

    bool before(Date arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "before", "(Ljava.util.Date;)Z", arg0)); }

    bool after(Date arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "after", "(Ljava.util.Date;)Z", arg0)); }

    static long getMillisOf(Date arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "getMillisOf", "(Ljava.util.Date;)J", arg0)); }

    int getDate() { return int(*javaClass->invokeMethod<int>(this->object, "getDate", "()I", )); }

    int getMonth() { return int(*javaClass->invokeMethod<int>(this->object, "getMonth", "()I", )); }

    static long parse(String arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parse", "(Ljava.lang.String;)J", arg0)); }

    int getYear() { return int(*javaClass->invokeMethod<int>(this->object, "getYear", "()I", )); }

};


/**
 * Classpath: sun.util.calendar.CalendarDate
 * Package name: sun.util.calendar
 */
class CalendarDate : public Object {
protected:
    const inline static char *className = "sun.util.calendar.CalendarDate";
public:
    STATICINITIALIZE;

    CalendarDate(jobject object) : JavaObject(object) {}

    void setLocale(Locale arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocale", "(Ljava.util.Locale;)V", arg0)); }

    bool isLeapYear() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "()Z", )); }

    Era getEra() { return Era(*javaClass->invokeMethod<jobject>(this->object, "getEra", "()Lsun.util.calendar.Era;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    int getSeconds() { return int(*javaClass->invokeMethod<int>(this->object, "getSeconds", "()I", )); }

    CalendarDate setTimeOfDay(int arg0, int arg1, int arg2, int arg3) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setTimeOfDay", "(IIII)Lsun.util.calendar.CalendarDate;", arg0, arg1, arg2, arg3)); }

    void setTimeOfDay(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setTimeOfDay", "(J)V", arg0)); }

    CalendarDate setDate(int arg0, int arg1, int arg2) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setDate", "(III)Lsun.util.calendar.CalendarDate;", arg0, arg1, arg2)); }

    CalendarDate setMonth(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setMonth", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate setDayOfMonth(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setDayOfMonth", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    int getHours() { return int(*javaClass->invokeMethod<int>(this->object, "getHours", "()I", )); }

    CalendarDate setHours(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setHours", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    int getMinutes() { return int(*javaClass->invokeMethod<int>(this->object, "getMinutes", "()I", )); }

    CalendarDate setMinutes(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setMinutes", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate setSeconds(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setSeconds", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    bool isDaylightTime() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDaylightTime", "()Z", )); }

    int getZoneOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getZoneOffset", "()I", )); }

    CalendarDate setZone(TimeZone arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setZone", "(Ljava.util.TimeZone;)Lsun.util.calendar.CalendarDate;", arg0)); }

    int getMillis() { return int(*javaClass->invokeMethod<int>(this->object, "getMillis", "()I", )); }

    CalendarDate setYear(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setYear", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate addYear(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addYear", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate addMonth(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addMonth", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate addDayOfMonth(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addDayOfMonth", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate setMillis(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setMillis", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate addHours(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addHours", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate addMinutes(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addMinutes", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate addSeconds(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addSeconds", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate addMillis(int arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addMillis", "(I)Lsun.util.calendar.CalendarDate;", arg0)); }

    bool isStandardTime() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStandardTime", "()Z", )); }

    CalendarDate setEra(Era arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setEra", "(Lsun.util.calendar.Era;)Lsun.util.calendar.CalendarDate;", arg0)); }

    void setLeapYear(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLeapYear", "(Z)V", arg0)); }

    long getTimeOfDay() { return long(*javaClass->invokeMethod<long>(this->object, "getTimeOfDay", "()J", )); }

    CalendarDate addDate(int arg0, int arg1, int arg2) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addDate", "(III)Lsun.util.calendar.CalendarDate;", arg0, arg1, arg2)); }

    CalendarDate addTimeOfDay(int arg0, int arg1, int arg2, int arg3) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "addTimeOfDay", "(IIII)Lsun.util.calendar.CalendarDate;", arg0, arg1, arg2, arg3)); }

    void setStandardTime(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setStandardTime", "(Z)V", arg0)); }

    bool isSameDate(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSameDate", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    void setDayOfWeek(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDayOfWeek", "(I)V", arg0)); }

    void setNormalized(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setNormalized", "(Z)V", arg0)); }

    void setZoneOffset(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setZoneOffset", "(I)V", arg0)); }

    int getDaylightSaving() { return int(*javaClass->invokeMethod<int>(this->object, "getDaylightSaving", "()I", )); }

    void setDaylightSaving(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDaylightSaving", "(I)V", arg0)); }

    TimeZone getZone() { return TimeZone(*javaClass->invokeMethod<jobject>(this->object, "getZone", "()Ljava.util.TimeZone;", )); }

    int getMonth() { return int(*javaClass->invokeMethod<int>(this->object, "getMonth", "()I", )); }

    int getDayOfWeek() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfWeek", "()I", )); }

    bool isNormalized() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNormalized", "()Z", )); }

    int getYear() { return int(*javaClass->invokeMethod<int>(this->object, "getYear", "()I", )); }

    int getDayOfMonth() { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfMonth", "()I", )); }

};


/**
 * Classpath: java.util.TimeZone
 * Package name: java.util
 */
class TimeZone : public Object {
protected:
    const inline static char *className = "java.util.TimeZone";
public:
    STATICINITIALIZE;

    TimeZone(jobject object) : JavaObject(object) {}

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    static TimeZone getDefault() { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefault", "()Ljava.util.TimeZone;", )); }

    int getOffset(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return int(*javaClass->invokeMethod<int>(this->object, "getOffset", "(IIIIII)I", arg0, arg1, arg2, arg3, arg4, arg5)); }

    int getOffset(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getOffset", "(J)I", arg0)); }

    int getOffsets(long arg0, arr_I arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getOffsets", "(J[I)I", arg0, arg1)); }

    bool inDaylightTime(Date arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "inDaylightTime", "(Ljava.util.Date;)Z", arg0)); }

    int getDSTSavings() { return int(*javaClass->invokeMethod<int>(this->object, "getDSTSavings", "()I", )); }

    bool useDaylightTime() { return bool(*javaClass->invokeMethod<boolean>(this->object, "useDaylightTime", "()Z", )); }

    ZoneId toZoneId0() { return ZoneId(*javaClass->invokeMethod<jobject>(this->object, "toZoneId0", "()Ljava.time.ZoneId;", )); }

    static TimeZone parseCustomTimeZone(String arg0) { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "parseCustomTimeZone", "(Ljava.lang.String;)Ljava.util.TimeZone;", arg0)); }

    static TimeZone setDefaultZone() { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "setDefaultZone", "()Ljava.util.TimeZone;", )); }

    static String getSystemTimeZoneID(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getSystemTimeZoneID", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static String getSystemGMTOffsetID() { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getSystemGMTOffsetID", "()Ljava.lang.String;", )); }

    void setID(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setID", "(Ljava.lang.String;)V", arg0)); }

    void setRawOffset(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setRawOffset", "(I)V", arg0)); }

    bool observesDaylightTime() { return bool(*javaClass->invokeMethod<boolean>(this->object, "observesDaylightTime", "()Z", )); }

    static TimeZone getDefaultRef() { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultRef", "()Ljava.util.TimeZone;", )); }

    static TimeZone getTimeZone(String arg0) { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "getTimeZone", "(Ljava.lang.String;)Ljava.util.TimeZone;", arg0)); }

    static TimeZone getTimeZone(String arg0, bool arg1) { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "getTimeZone", "(Ljava.lang.String;Z)Ljava.util.TimeZone;", arg0, arg1)); }

    static TimeZone getTimeZone(ZoneId arg0) { return TimeZone(*javaClass->invokeStaticMethod<jobject>(this->object, "getTimeZone", "(Ljava.time.ZoneId;)Ljava.util.TimeZone;", arg0)); }

    int getRawOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getRawOffset", "()I", )); }

    bool hasSameRules(TimeZone arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasSameRules", "(Ljava.util.TimeZone;)Z", arg0)); }

    ZoneId toZoneId() { return ZoneId(*javaClass->invokeMethod<jobject>(this->object, "toZoneId", "()Ljava.time.ZoneId;", )); }

    String getDisplayName(bool arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(ZI)Ljava.lang.String;", arg0, arg1)); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

    String getDisplayName(bool arg0, int arg1, Locale arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(ZILjava.util.Locale;)Ljava.lang.String;", arg0, arg1, arg2)); }

    String getDisplayName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    static void setDefault(TimeZone arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefault", "(Ljava.util.TimeZone;)V", arg0)); }

    String getID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getID", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: [Lsun.util.calendar.Era;
 */
class Era_interface : public Object {
protected:
    const inline static char *className = "[Lsun.util.calendar.Era;";
public:
    STATICINITIALIZE;

    Era_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.util.calendar.CalendarSystem
 * Package name: sun.util.calendar
 */
class CalendarSystem : public Object {
protected:
    const inline static char *className = "sun.util.calendar.CalendarSystem";
public:
    STATICINITIALIZE;

    CalendarSystem(jobject object) : JavaObject(object) {}

    long getTime(CalendarDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getTime", "(Lsun.util.calendar.CalendarDate;)J", arg0)); }

    Era getEra(String arg0) { return Era(*javaClass->invokeMethod<jobject>(this->object, "getEra", "(Ljava.lang.String;)Lsun.util.calendar.Era;", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    static CalendarSystem forName(String arg0) { return CalendarSystem(*javaClass->invokeStaticMethod<jobject>(this->object, "forName", "(Ljava.lang.String;)Lsun.util.calendar.CalendarSystem;", arg0)); }

    bool validate(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "validate", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    bool normalize(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "normalize", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    CalendarDate newCalendarDate(TimeZone arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "newCalendarDate", "(Ljava.util.TimeZone;)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate newCalendarDate() { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "newCalendarDate", "()Lsun.util.calendar.CalendarDate;", )); }

    CalendarDate setTimeOfDay(CalendarDate arg0, int arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setTimeOfDay", "(Lsun.util.calendar.CalendarDate;I)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

    CalendarDate getCalendarDate() { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun.util.calendar.CalendarDate;", )); }

    CalendarDate getCalendarDate(long arg0, CalendarDate arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

    CalendarDate getCalendarDate(long arg0, TimeZone arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLjava.util.TimeZone;)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

    CalendarDate getCalendarDate(long arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(J)Lsun.util.calendar.CalendarDate;", arg0)); }

    static Gregorian getGregorianCalendar() { return Gregorian(*javaClass->invokeStaticMethod<jobject>(this->object, "getGregorianCalendar", "()Lsun.util.calendar.Gregorian;", )); }

    void setEra(CalendarDate arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "setEra", "(Lsun.util.calendar.CalendarDate;Ljava.lang.String;)V", arg0, arg1)); }

    int getMonthLength(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMonthLength", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

    int getYearLength(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getYearLength", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

    int getYearLengthInMonths(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getYearLengthInMonths", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

    int getWeekLength() { return int(*javaClass->invokeMethod<int>(this->object, "getWeekLength", "()I", )); }

    CalendarDate getNthDayOfWeek(int arg0, int arg1, CalendarDate arg2) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getNthDayOfWeek", "(IILsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;", arg0, arg1, arg2)); }

    static void initNames() { (*javaClass->invokeStaticMethod<void>(this->object, "initNames", "()V", )); }

};


/**
 * Classpath: sun.util.resources.OpenListResourceBundle
 * Package name: sun.util.resources
 */
class OpenListResourceBundle : public ResourceBundle {
protected:
    const inline static char *className = "sun.util.resources.OpenListResourceBundle";
public:
    STATICINITIALIZE;

    OpenListResourceBundle(jobject object) : JavaObject(object) {}

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    Set createSet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "createSet", "()Ljava.util.Set;", )); }

    void loadLookupTablesIfNecessary() { (*javaClass->invokeMethod<void>(this->object, "loadLookupTablesIfNecessary", "()V", )); }

    void loadLookup() { (*javaClass->invokeMethod<void>(this->object, "loadLookup", "()V", )); }

    Object handleGetObject(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "handleGetObject", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Set handleKeySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "handleKeySet", "()Ljava.util.Set;", )); }

    Map createMap(int arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "createMap", "(I)Ljava.util.Map;", arg0)); }

    Enumeration getKeys() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getKeys", "()Ljava.util.Enumeration;", )); }

};


/**
 * Classpath: java.io.FilterOutputStream
 * Package name: java.io
 */
class FilterOutputStream : public OutputStream {
protected:
    const inline static char *className = "java.io.FilterOutputStream";
public:
    STATICINITIALIZE;

    FilterOutputStream(jobject object) : JavaObject(object) {}

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void write(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }

    void write(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

};


/**
 * Classpath: java.io.Writer
 * Package name: java.io
 */
class Writer : public Object {
protected:
    const inline static char *className = "java.io.Writer";
public:
    STATICINITIALIZE;

    Writer(jobject object) : JavaObject(object) {}

    Writer append(CharSequence arg0, int arg1, int arg2) { return Writer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.io.Writer;", arg0, arg1, arg2)); }

    Writer append(char arg0) { return Writer(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.io.Writer;", arg0)); }

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    Writer append(CharSequence arg0) { return Writer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.io.Writer;", arg0)); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void write(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void write(String arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.lang.String;)V", arg0)); }

    void write(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([CII)V", arg0, arg1, arg2)); }

    void write(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([C)V", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    static Writer nullWriter() { return Writer(*javaClass->invokeStaticMethod<jobject>(this->object, "nullWriter", "()Ljava.io.Writer;", )); }

};


/**
 * Classpath: java.lang.Throwable$PrintStreamOrWriter
 * Enclosing class: java.lang.Throwable
 * Package name: java.lang
 */
class Throwable_PrintStreamOrWriter : public Object {
protected:
    const inline static char *className = "java.lang.Throwable$PrintStreamOrWriter";
public:
    STATICINITIALIZE;

    Throwable_PrintStreamOrWriter(jobject object) : JavaObject(object) {}

    void println(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Ljava.lang.Object;)V", arg0)); }

    Object lock() { return Object(*javaClass->invokeMethod<jobject>(this->object, "lock", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: [Ljava.lang.StackTraceElement;
 */
class StackTraceElement_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.StackTraceElement;";
public:
    STATICINITIALIZE;

    StackTraceElement_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.io.Externalizable
 * Package name: java.io
 */
class Externalizable : public JavaObject {
protected:
    const inline static char *className = "java.io.Externalizable";
public:
    STATICINITIALIZE;

    Externalizable(jobject object) : JavaObject(object) {}

    void readExternal(ObjectInput arg0) { (*javaClass->invokeMethod<void>(this->object, "readExternal", "(Ljava.io.ObjectInput;)V", arg0)); }

    void writeExternal(ObjectOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.ObjectOutput;)V", arg0)); }

};


/**
 * Classpath: java.lang.ReflectiveOperationException
 * Package name: java.lang
 */
class ReflectiveOperationException : public Exception {
protected:
    const inline static char *className = "java.lang.ReflectiveOperationException";
public:
    STATICINITIALIZE;

    ReflectiveOperationException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.io.ObjectStreamField;
 */
class ObjectStreamField_interface : public Object {
protected:
    const inline static char *className = "[Ljava.io.ObjectStreamField;";
public:
    STATICINITIALIZE;

    ObjectStreamField_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.io.ObjectStreamClass$FieldReflector
 * Enclosing class: java.io.ObjectStreamClass
 * Package name: java.io
 */
class ObjectStreamClass_FieldReflector : public Object {
protected:
    const inline static char *className = "java.io.ObjectStreamClass$FieldReflector";
public:
    STATICINITIALIZE;

    ObjectStreamClass_FieldReflector(jobject object) : JavaObject(object) {}

    void getPrimFieldValues(Object arg0, arr_B arg1) { (*javaClass->invokeMethod<void>(this->object, "getPrimFieldValues", "(Ljava.lang.Object;[B)V", arg0, arg1)); }

    void getObjFieldValues(Object arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "getObjFieldValues", "(Ljava.lang.Object;[Ljava.lang.Object;)V", arg0, arg1)); }

    void setPrimFieldValues(Object arg0, arr_B arg1) { (*javaClass->invokeMethod<void>(this->object, "setPrimFieldValues", "(Ljava.lang.Object;[B)V", arg0, arg1)); }

    void checkObjectFieldValueTypes(Object arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "checkObjectFieldValueTypes", "(Ljava.lang.Object;[Ljava.lang.Object;)V", arg0, arg1)); }

    void setObjFieldValues(Object arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "setObjFieldValues", "(Ljava.lang.Object;[Ljava.lang.Object;)V", arg0, arg1)); }

    void setObjFieldValues(Object arg0, Object_interface arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "setObjFieldValues", "(Ljava.lang.Object;[Ljava.lang.Object;Z)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.io.ObjectInputStream$GetField
 * Enclosing class: java.io.ObjectInputStream
 * Package name: java.io
 */
class ObjectInputStream_GetField : public Object {
protected:
    const inline static char *className = "java.io.ObjectInputStream$GetField";
public:
    STATICINITIALIZE;

    ObjectInputStream_GetField(jobject object) : JavaObject(object) {}

    long get(String arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "get", "(Ljava.lang.String;J)J", arg0, arg1)); }

    int get(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "get", "(Ljava.lang.String;I)I", arg0, arg1)); }

    short get(String arg0, short arg1) { return short(*javaClass->invokeMethod<short>(this->object, "get", "(Ljava.lang.String;S)S", arg0, arg1)); }

    float get(String arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "get", "(Ljava.lang.String;F)F", arg0, arg1)); }

    double get(String arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "get", "(Ljava.lang.String;D)D", arg0, arg1)); }

    Object get(String arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool get(String arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "get", "(Ljava.lang.String;Z)Z", arg0, arg1)); }

    byte get(String arg0, byte arg1) { return byte(*javaClass->invokeMethod<byte>(this->object, "get", "(Ljava.lang.String;B)B", arg0, arg1)); }

    char get(String arg0, char arg1) { return char(*javaClass->invokeMethod<char>(this->object, "get", "(Ljava.lang.String;C)C", arg0, arg1)); }

    ObjectStreamClass getObjectStreamClass() { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "getObjectStreamClass", "()Ljava.io.ObjectStreamClass;", )); }

    bool defaulted(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "defaulted", "(Ljava.lang.String;)Z", arg0)); }

};


/**
 * Classpath: java.io.ObjectInputValidation
 * Package name: java.io
 */
class ObjectInputValidation : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectInputValidation";
public:
    STATICINITIALIZE;

    ObjectInputValidation(jobject object) : JavaObject(object) {}

    void validateObject() { (*javaClass->invokeMethod<void>(this->object, "validateObject", "()V", )); }

};


/**
 * Classpath: java.io.ObjectInputFilter
 * Package name: java.io
 */
class ObjectInputFilter : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectInputFilter";
public:
    STATICINITIALIZE;

    ObjectInputFilter(jobject object) : JavaObject(object) {}

    static ObjectInputFilter merge(ObjectInputFilter arg0, ObjectInputFilter arg1) { return ObjectInputFilter(*javaClass->invokeStaticMethod<jobject>(this->object, "merge", "(Ljava.io.ObjectInputFilter;Ljava.io.ObjectInputFilter;)Ljava.io.ObjectInputFilter;", arg0, arg1)); }

    static ObjectInputFilter allowFilter(Predicate arg0, ObjectInputFilter_Status arg1) { return ObjectInputFilter(*javaClass->invokeStaticMethod<jobject>(this->object, "allowFilter", "(Ljava.util.function.Predicate;Ljava.io.ObjectInputFilter$Status;)Ljava.io.ObjectInputFilter;", arg0, arg1)); }

    static ObjectInputFilter rejectFilter(Predicate arg0, ObjectInputFilter_Status arg1) { return ObjectInputFilter(*javaClass->invokeStaticMethod<jobject>(this->object, "rejectFilter", "(Ljava.util.function.Predicate;Ljava.io.ObjectInputFilter$Status;)Ljava.io.ObjectInputFilter;", arg0, arg1)); }

    static ObjectInputFilter rejectUndecidedClass(ObjectInputFilter arg0) { return ObjectInputFilter(*javaClass->invokeStaticMethod<jobject>(this->object, "rejectUndecidedClass", "(Ljava.io.ObjectInputFilter;)Ljava.io.ObjectInputFilter;", arg0)); }

    ObjectInputFilter_Status checkInput(ObjectInputFilter_FilterInfo arg0) { return ObjectInputFilter_Status(*javaClass->invokeMethod<jobject>(this->object, "checkInput", "(Ljava.io.ObjectInputFilter$FilterInfo;)Ljava.io.ObjectInputFilter$Status;", arg0)); }

};


/**
 * Classpath: java.io.ObjectInputFilter$Status
 * Enclosing class: java.io.ObjectInputFilter
 * Package name: java.io
 */
class ObjectInputFilter_Status : public Enum {
protected:
    const inline static char *className = "java.io.ObjectInputFilter$Status";
public:
    STATICINITIALIZE;

    ObjectInputFilter_Status(jobject object) : JavaObject(object) {}

    static ObjectInputFilter_Status valueOf(String arg0) { return ObjectInputFilter_Status(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.io.ObjectInputFilter$Status;", arg0)); }

};


/**
 * Classpath: java.io.ObjectInputFilter$FilterInfo
 * Enclosing class: java.io.ObjectInputFilter
 * Package name: java.io
 */
class ObjectInputFilter_FilterInfo : public JavaObject {
protected:
    const inline static char *className = "java.io.ObjectInputFilter$FilterInfo";
public:
    STATICINITIALIZE;

    ObjectInputFilter_FilterInfo(jobject object) : JavaObject(object) {}

    long depth() { return long(*javaClass->invokeMethod<long>(this->object, "depth", "()J", )); }

    long arrayLength() { return long(*javaClass->invokeMethod<long>(this->object, "arrayLength", "()J", )); }

    Class serialClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "serialClass", "()Ljava.lang.Class;", )); }

    long references() { return long(*javaClass->invokeMethod<long>(this->object, "references", "()J", )); }

    long streamBytes() { return long(*javaClass->invokeMethod<long>(this->object, "streamBytes", "()J", )); }

};


/**
 * Classpath: [Ljava.lang.invoke.TypeDescriptor$OfField;
 */
class TypeDescriptor_OfField_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.invoke.TypeDescriptor$OfField;";
public:
    STATICINITIALIZE;

    TypeDescriptor_OfField_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.invoke.TypeDescriptor$OfMethod
 * Enclosing class: java.lang.invoke.TypeDescriptor
 * Package name: java.lang.invoke
 */
class TypeDescriptor_OfMethod : public JavaObject {
protected:
    const inline static char *className = "java.lang.invoke.TypeDescriptor$OfMethod";
public:
    STATICINITIALIZE;

    TypeDescriptor_OfMethod(jobject object) : JavaObject(object) {}

    TypeDescriptor_OfField returnType() { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "returnType", "()Ljava.lang.invoke.TypeDescriptor$OfField;", )); }

    TypeDescriptor_OfField parameterType(int arg0) { return TypeDescriptor_OfField(*javaClass->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava.lang.invoke.TypeDescriptor$OfField;", arg0)); }

    TypeDescriptor_OfMethod insertParameterTypes(int arg0, TypeDescriptor_OfField_interface arg1) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "insertParameterTypes", "(I[Ljava.lang.invoke.TypeDescriptor$OfField;)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0, arg1)); }

    TypeDescriptor_OfMethod changeReturnType(TypeDescriptor_OfField arg0) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "changeReturnType", "(Ljava.lang.invoke.TypeDescriptor$OfField;)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0)); }

    TypeDescriptor_OfMethod dropParameterTypes(int arg0, int arg1) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "dropParameterTypes", "(II)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0, arg1)); }

    int parameterCount() { return int(*javaClass->invokeMethod<int>(this->object, "parameterCount", "()I", )); }

    List parameterList() { return List(*javaClass->invokeMethod<jobject>(this->object, "parameterList", "()Ljava.util.List;", )); }

    TypeDescriptor_OfMethod changeParameterType(int arg0, TypeDescriptor_OfField arg1) { return TypeDescriptor_OfMethod(*javaClass->invokeMethod<jobject>(this->object, "changeParameterType", "(ILjava.lang.invoke.TypeDescriptor$OfField;)Ljava.lang.invoke.TypeDescriptor$OfMethod;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.invoke.MethodTypeForm
 * Package name: java.lang.invoke
 */
class MethodTypeForm : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodTypeForm";
public:
    STATICINITIALIZE;

    MethodTypeForm(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    MethodType basicType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "basicType", "()Ljava.lang.invoke.MethodType;", )); }

    LambdaForm cachedLambdaForm(int arg0) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "cachedLambdaForm", "(I)Ljava.lang.invoke.LambdaForm;", arg0)); }

    LambdaForm setCachedLambdaForm(int arg0, LambdaForm arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "setCachedLambdaForm", "(ILjava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    int parameterCount() { return int(*javaClass->invokeMethod<int>(this->object, "parameterCount", "()I", )); }

    static MethodTypeForm findForm(MethodType arg0) { return MethodTypeForm(*javaClass->invokeStaticMethod<jobject>(this->object, "findForm", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodTypeForm;", arg0)); }

    int parameterSlotCount() { return int(*javaClass->invokeMethod<int>(this->object, "parameterSlotCount", "()I", )); }

    bool hasPrimitives() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPrimitives", "()Z", )); }

    MethodType erasedType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "erasedType", "()Ljava.lang.invoke.MethodType;", )); }

    static Class canonicalize(Class arg0, int arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalize", "(Ljava.lang.Class;I)Ljava.lang.Class;", arg0, arg1)); }

    static MethodType canonicalize(MethodType arg0, int arg1) { return MethodType(*javaClass->invokeStaticMethod<jobject>(this->object, "canonicalize", "(Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.MethodType;", arg0, arg1)); }

    MethodHandle cachedMethodHandle(int arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "cachedMethodHandle", "(I)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle setCachedMethodHandle(int arg0, MethodHandle arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "setCachedMethodHandle", "(ILjava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.invoke.LambdaForm
 * Package name: java.lang.invoke
 */
class LambdaForm : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm";
public:
    STATICINITIALIZE;

    LambdaForm(jobject object) : JavaObject(object) {}

    LambdaForm_BasicType returnType() { return LambdaForm_BasicType(*javaClass->invokeMethod<jobject>(this->object, "returnType", "()Ljava.lang.invoke.LambdaForm$BasicType;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(LambdaForm arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.LambdaForm;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    bool contains(LambdaForm_Name arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.invoke.LambdaForm$Name;)Z", arg0)); }

    static LambdaForm_NamedFunction identity(LambdaForm_BasicType arg0) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "identity", "(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0)); }

    LambdaForm_BasicType parameterType(int arg0) { return LambdaForm_BasicType(*javaClass->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava.lang.invoke.LambdaForm$BasicType;", arg0)); }

    LambdaForm_Name parameter(int arg0) { return LambdaForm_Name(*javaClass->invokeMethod<jobject>(this->object, "parameter", "(I)Ljava.lang.invoke.LambdaForm$Name;", arg0)); }

    MethodType methodType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "methodType", "()Ljava.lang.invoke.MethodType;", )); }

    void compileToBytecode() { (*javaClass->invokeMethod<void>(this->object, "compileToBytecode", "()V", )); }

    static bool debugNames() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "debugNames", "()Z", )); }

    static void associateWithDebugName(LambdaForm arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "associateWithDebugName", "(Ljava.lang.invoke.LambdaForm;Ljava.lang.String;)V", arg0, arg1)); }

    LambdaForm uncustomize() { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "uncustomize", "()Ljava.lang.invoke.LambdaForm;", )); }

    void prepare() { (*javaClass->invokeMethod<void>(this->object, "prepare", "()V", )); }

    LambdaFormEditor editor() { return LambdaFormEditor(*javaClass->invokeMethod<jobject>(this->object, "editor", "()Ljava.lang.invoke.LambdaFormEditor;", )); }

    LambdaForm customize(MethodHandle arg0) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "customize", "(Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    static bool namesOK(int arg0, LambdaForm_Name_interface arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "namesOK", "(I[Ljava.lang.invoke.LambdaForm$Name;)Z", arg0, arg1)); }

    int arity() { return int(*javaClass->invokeMethod<int>(this->object, "arity", "()I", )); }

    static int fixResult(int arg0, LambdaForm_Name_interface arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "fixResult", "(I[Ljava.lang.invoke.LambdaForm$Name;)I", arg0, arg1)); }

    int normalize() { return int(*javaClass->invokeMethod<int>(this->object, "normalize", "()I", )); }

    bool nameRefsAreLegal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "nameRefsAreLegal", "()Z", )); }

    String basicTypeSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "basicTypeSignature", "()Ljava.lang.String;", )); }

    static String basicTypeSignature(MethodType arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "basicTypeSignature", "(Ljava.lang.invoke.MethodType;)Ljava.lang.String;", arg0)); }

    static bool isValidSignature(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isValidSignature", "(Ljava.lang.String;)Z", arg0)); }

    static LambdaForm_NamedFunction constantZero(LambdaForm_BasicType arg0) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "constantZero", "(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0)); }

    String generateDebugName() { return String(*javaClass->invokeMethod<jobject>(this->object, "generateDebugName", "()Ljava.lang.String;", )); }

    static LambdaForm_Name internArgument(LambdaForm_Name arg0) { return LambdaForm_Name(*javaClass->invokeStaticMethod<jobject>(this->object, "internArgument", "(Ljava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaForm$Name;", arg0)); }

    int lastUseIndex(LambdaForm_Name arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastUseIndex", "(Ljava.lang.invoke.LambdaForm$Name;)I", arg0)); }

    bool isMatchingIdiom(int arg0, String arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMatchingIdiom", "(ILjava.lang.String;I)Z", arg0, arg1, arg2)); }

    bool forceInterpretation() { return bool(*javaClass->invokeMethod<boolean>(this->object, "forceInterpretation", "()Z", )); }

    static void traceInterpreter(String arg0, Object arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "traceInterpreter", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    static void traceInterpreter(String arg0, Object arg1, Object_interface arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "traceInterpreter", "(Ljava.lang.String;Ljava.lang.Object;[Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    static PerfCounter failedCompilationCounter() { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "failedCompilationCounter", "()Ljdk.internal.perf.PerfCounter;", )); }

    static int signatureArity(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "signatureArity", "(Ljava.lang.String;)I", arg0)); }

    static bool valueMatches(LambdaForm_BasicType arg0, Class arg1, Object arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "valueMatches", "(Ljava.lang.invoke.LambdaForm$BasicType;Ljava.lang.Class;Ljava.lang.Object;)Z", arg0, arg1, arg2)); }

    static bool checkInt(Class arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkInt", "(Ljava.lang.Class;Ljava.lang.Object;)Z", arg0, arg1)); }

    static bool checkRef(Class arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkRef", "(Ljava.lang.Class;Ljava.lang.Object;)Z", arg0, arg1)); }

    Object interpretWithArgumentsTracing(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "interpretWithArgumentsTracing", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    void checkInvocationCounter() { (*javaClass->invokeMethod<void>(this->object, "checkInvocationCounter", "()V", )); }

    bool arityCheck(Object_interface arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "arityCheck", "([Ljava.lang.Object;)Z", arg0)); }

    Object interpretName(LambdaForm_Name arg0, Object_interface arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "interpretName", "(Ljava.lang.invoke.LambdaForm$Name;[Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool resultCheck(Object_interface arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "resultCheck", "([Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    static bool argumentTypesMatch(String arg0, Object_interface arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "argumentTypesMatch", "(Ljava.lang.String;[Ljava.lang.Object;)Z", arg0, arg1)); }

    String lambdaName() { return String(*javaClass->invokeMethod<jobject>(this->object, "lambdaName", "()Ljava.lang.String;", )); }

    int useCount(LambdaForm_Name arg0) { return int(*javaClass->invokeMethod<int>(this->object, "useCount", "(Ljava.lang.invoke.LambdaForm$Name;)I", arg0)); }

    static LambdaForm_Name argument(int arg0, LambdaForm_BasicType arg1) { return LambdaForm_Name(*javaClass->invokeStaticMethod<jobject>(this->object, "argument", "(ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm$Name;", arg0, arg1)); }

    static void createFormsFor(LambdaForm_BasicType arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "createFormsFor", "(Ljava.lang.invoke.LambdaForm$BasicType;)V", arg0)); }

    Object parameterConstraint(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "parameterConstraint", "(I)Ljava.lang.Object;", arg0)); }

    int expressionCount() { return int(*javaClass->invokeMethod<int>(this->object, "expressionCount", "()I", )); }

    bool isSelectAlternative(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelectAlternative", "(I)Z", arg0)); }

    bool isGuardWithCatch(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isGuardWithCatch", "(I)Z", arg0)); }

    bool isTryFinally(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTryFinally", "(I)Z", arg0)); }

    bool isTableSwitch(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTableSwitch", "(I)Z", arg0)); }

    bool isLoop(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLoop", "(I)Z", arg0)); }

    Object interpretWithArguments(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "interpretWithArguments", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static String shortenSignature(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "shortenSignature", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static LambdaForm identityForm(LambdaForm_BasicType arg0) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "identityForm", "(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    static LambdaForm zeroForm(LambdaForm_BasicType arg0) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "zeroForm", "(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    static int identity_I(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "identity_I", "(I)I", arg0)); }

    static long identity_J(long arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "identity_J", "(J)J", arg0)); }

    static float identity_F(float arg0) { return float(*javaClass->invokeStaticMethod<float>(this->object, "identity_F", "(F)F", arg0)); }

    static double identity_D(double arg0) { return double(*javaClass->invokeStaticMethod<double>(this->object, "identity_D", "(D)D", arg0)); }

    static Object identity_L(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "identity_L", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static void identity_V() { (*javaClass->invokeStaticMethod<void>(this->object, "identity_V", "()V", )); }

    static int zero_I() { return int(*javaClass->invokeStaticMethod<int>(this->object, "zero_I", "()I", )); }

    static long zero_J() { return long(*javaClass->invokeStaticMethod<long>(this->object, "zero_J", "()J", )); }

    static float zero_F() { return float(*javaClass->invokeStaticMethod<float>(this->object, "zero_F", "()F", )); }

    static double zero_D() { return double(*javaClass->invokeStaticMethod<double>(this->object, "zero_D", "()D", )); }

    static Object zero_L() { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "zero_L", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.lang.invoke.LambdaForm$BasicType
 * Enclosing class: java.lang.invoke.LambdaForm
 * Package name: java.lang.invoke
 */
class LambdaForm_BasicType : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$BasicType";
public:
    STATICINITIALIZE;

    LambdaForm_BasicType(jobject object) : JavaObject(object) {}

    static LambdaForm_BasicType basicType(char arg0) { return LambdaForm_BasicType(*javaClass->invokeStaticMethod<jobject>(this->object, "basicType", "(C)Ljava.lang.invoke.LambdaForm$BasicType;", arg0)); }

    static LambdaForm_BasicType basicType(byte arg0) { return LambdaForm_BasicType(*javaClass->invokeStaticMethod<jobject>(this->object, "basicType", "(B)Ljava.lang.invoke.LambdaForm$BasicType;", arg0)); }

    static LambdaForm_BasicType basicType(Class arg0) { return LambdaForm_BasicType(*javaClass->invokeStaticMethod<jobject>(this->object, "basicType", "(Ljava.lang.Class;)Ljava.lang.invoke.LambdaForm$BasicType;", arg0)); }

    static LambdaForm_BasicType basicType(Wrapper arg0) { return LambdaForm_BasicType(*javaClass->invokeStaticMethod<jobject>(this->object, "basicType", "(Lsun.invoke.util.Wrapper;)Ljava.lang.invoke.LambdaForm$BasicType;", arg0)); }

    static LambdaForm_BasicType valueOf(String arg0) { return LambdaForm_BasicType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.invoke.LambdaForm$BasicType;", arg0)); }

    static char basicTypeChar(Class arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "basicTypeChar", "(Ljava.lang.Class;)C", arg0)); }

    char basicTypeChar() { return char(*javaClass->invokeMethod<char>(this->object, "basicTypeChar", "()C", )); }

    static bool isArgBasicTypeChar(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isArgBasicTypeChar", "(C)Z", arg0)); }

    static bool isBasicTypeChar(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isBasicTypeChar", "(C)Z", arg0)); }

    static bool checkBasicType() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkBasicType", "()Z", )); }

    Class basicTypeClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "basicTypeClass", "()Ljava.lang.Class;", )); }

    Wrapper basicTypeWrapper() { return Wrapper(*javaClass->invokeMethod<jobject>(this->object, "basicTypeWrapper", "()Lsun.invoke.util.Wrapper;", )); }

    int basicTypeSlots() { return int(*javaClass->invokeMethod<int>(this->object, "basicTypeSlots", "()I", )); }

};


/**
 * Classpath: sun.invoke.util.Wrapper
 * Package name: sun.invoke.util
 */
class Wrapper : public Enum {
protected:
    const inline static char *className = "sun.invoke.util.Wrapper";
public:
    STATICINITIALIZE;

    Wrapper(jobject object) : JavaObject(object) {}

    Object cast(Object arg0, Class arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "cast", "(Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1)); }

    Object convert(Object arg0, Class arg1, bool arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "convert", "(Ljava.lang.Object;Ljava.lang.Class;Z)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Object convert(Object arg0, Class arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "convert", "(Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1)); }

    static Wrapper valueOf(String arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lsun.invoke.util.Wrapper;", arg0)); }

    Object wrap(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "wrap", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object wrap(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "wrap", "(I)Ljava.lang.Object;", arg0)); }

    static Wrapper forPrimitiveType(Class arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "forPrimitiveType", "(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;", arg0)); }

    static Wrapper forPrimitiveType(char arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "forPrimitiveType", "(C)Lsun.invoke.util.Wrapper;", arg0)); }

    String basicTypeString() { return String(*javaClass->invokeMethod<jobject>(this->object, "basicTypeString", "()Ljava.lang.String;", )); }

    Class arrayType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "arrayType", "()Ljava.lang.Class;", )); }

    Class primitiveType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "primitiveType", "()Ljava.lang.Class;", )); }

    static RuntimeException newIllegalArgumentException(String arg0) { return RuntimeException(*javaClass->invokeStaticMethod<jobject>(this->object, "newIllegalArgumentException", "(Ljava.lang.String;)Ljava.lang.RuntimeException;", arg0)); }

    static RuntimeException newIllegalArgumentException(String arg0, Object arg1) { return RuntimeException(*javaClass->invokeStaticMethod<jobject>(this->object, "newIllegalArgumentException", "(Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.RuntimeException;", arg0, arg1)); }

    static Wrapper forBasicType(char arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "forBasicType", "(C)Lsun.invoke.util.Wrapper;", arg0)); }

    static Wrapper forBasicType(Class arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "forBasicType", "(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;", arg0)); }

    static char basicTypeChar(Class arg0) { return char(*javaClass->invokeStaticMethod<char>(this->object, "basicTypeChar", "(Ljava.lang.Class;)C", arg0)); }

    char basicTypeChar() { return char(*javaClass->invokeMethod<char>(this->object, "basicTypeChar", "()C", )); }

    bool isSubwordOrInt() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSubwordOrInt", "()Z", )); }

    Object zero() { return Object(*javaClass->invokeMethod<jobject>(this->object, "zero", "()Ljava.lang.Object;", )); }

    Object zero(Class arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "zero", "(Ljava.lang.Class;)Ljava.lang.Object;", arg0)); }

    bool isConvertibleFrom(Wrapper arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConvertibleFrom", "(Lsun.invoke.util.Wrapper;)Z", arg0)); }

    Class wrapperType(Class arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "wrapperType", "(Ljava.lang.Class;)Ljava.lang.Class;", arg0)); }

    Class wrapperType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "wrapperType", "()Ljava.lang.Class;", )); }

    static bool isWrapperType(Class arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isWrapperType", "(Ljava.lang.Class;)Z", arg0)); }

    static Wrapper forWrapperType(Class arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "forWrapperType", "(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;", arg0)); }

    bool isNumeric() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNumeric", "()Z", )); }

    bool isDoubleWord() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDoubleWord", "()Z", )); }

    static Class asWrapperType(Class arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "asWrapperType", "(Ljava.lang.Class;)Ljava.lang.Class;", arg0)); }

    String wrapperSimpleName() { return String(*javaClass->invokeMethod<jobject>(this->object, "wrapperSimpleName", "()Ljava.lang.String;", )); }

    String primitiveSimpleName() { return String(*javaClass->invokeMethod<jobject>(this->object, "primitiveSimpleName", "()Ljava.lang.String;", )); }

    bool isIntegral() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isIntegral", "()Z", )); }

    bool isSingleWord() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSingleWord", "()Z", )); }

    bool isOther() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOther", "()Z", )); }

    bool isFloating() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFloating", "()Z", )); }

    bool isSigned() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSigned", "()Z", )); }

    static Wrapper findPrimitiveType(Class arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "findPrimitiveType", "(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;", arg0)); }

    static int hashPrim(Class arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashPrim", "(Ljava.lang.Class;)I", arg0)); }

    static Wrapper findWrapperType(Class arg0) { return Wrapper(*javaClass->invokeStaticMethod<jobject>(this->object, "findWrapperType", "(Ljava.lang.Class;)Lsun.invoke.util.Wrapper;", arg0)); }

    static Class asPrimitiveType(Class arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "asPrimitiveType", "(Ljava.lang.Class;)Ljava.lang.Class;", arg0)); }

    static int hashWrap(Class arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashWrap", "(Ljava.lang.Class;)I", arg0)); }

    static int hashChar(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashChar", "(C)I", arg0)); }

    static Class forceType(Class arg0, Class arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "forceType", "(Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.Class;", arg0, arg1)); }

    static ClassCastException newClassCastException(Class arg0, Class arg1) { return ClassCastException(*javaClass->invokeStaticMethod<jobject>(this->object, "newClassCastException", "(Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.ClassCastException;", arg0, arg1)); }

    static Number numberValue(Object arg0) { return Number(*javaClass->invokeStaticMethod<jobject>(this->object, "numberValue", "(Ljava.lang.Object;)Ljava.lang.Number;", arg0)); }

    static bool boolValue(byte arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "boolValue", "(B)Z", arg0)); }

    static bool checkConvertibleFrom() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkConvertibleFrom", "()Z", )); }

    String detailString() { return String(*javaClass->invokeMethod<jobject>(this->object, "detailString", "()Ljava.lang.String;", )); }

    int bitWidth() { return int(*javaClass->invokeMethod<int>(this->object, "bitWidth", "()I", )); }

    int stackSlots() { return int(*javaClass->invokeMethod<int>(this->object, "stackSlots", "()I", )); }

    bool isUnsigned() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUnsigned", "()Z", )); }

    static bool isPrimitiveType(Class arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isPrimitiveType", "(Ljava.lang.Class;)Z", arg0)); }

    Object makeArray(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "makeArray", "(I)Ljava.lang.Object;", arg0)); }

    void copyArrayUnboxing(Object_interface arg0, int arg1, Object arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "copyArrayUnboxing", "([Ljava.lang.Object;ILjava.lang.Object;II)V", arg0, arg1, arg2, arg3, arg4)); }

    void copyArrayBoxing(Object arg0, int arg1, Object_interface arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "copyArrayBoxing", "(Ljava.lang.Object;I[Ljava.lang.Object;II)V", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: java.lang.invoke.LambdaForm$Name
 * Enclosing class: java.lang.invoke.LambdaForm
 * Package name: java.lang.invoke
 */
class LambdaForm_Name : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$Name";
public:
    STATICINITIALIZE;

    LambdaForm_Name(jobject object) : JavaObject(object) {}

    int index() { return int(*javaClass->invokeMethod<int>(this->object, "index", "()I", )); }

    LambdaForm_BasicType type() { return LambdaForm_BasicType(*javaClass->invokeMethod<jobject>(this->object, "type", "()Ljava.lang.invoke.LambdaForm$BasicType;", )); }

    bool equals(LambdaForm_Name arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.LambdaForm$Name;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool refersTo(Class arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "refersTo", "(Ljava.lang.Class;Ljava.lang.String;)Z", arg0, arg1)); }

    String debugString() { return String(*javaClass->invokeMethod<jobject>(this->object, "debugString", "()Ljava.lang.String;", )); }

    LambdaForm_Name newIndex(int arg0) { return LambdaForm_Name(*javaClass->invokeMethod<jobject>(this->object, "newIndex", "(I)Ljava.lang.invoke.LambdaForm$Name;", arg0)); }

    bool isParam() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isParam", "()Z", )); }

    bool initIndex(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "initIndex", "(I)Z", arg0)); }

    LambdaForm_Name cloneWithIndex(int arg0) { return LambdaForm_Name(*javaClass->invokeMethod<jobject>(this->object, "cloneWithIndex", "(I)Ljava.lang.invoke.LambdaForm$Name;", arg0)); }

    LambdaForm_Name replaceNames(LambdaForm_Name_interface arg0, LambdaForm_Name_interface arg1, int arg2, int arg3) { return LambdaForm_Name(*javaClass->invokeMethod<jobject>(this->object, "replaceNames", "([Ljava.lang.invoke.LambdaForm$Name;[Ljava.lang.invoke.LambdaForm$Name;II)Ljava.lang.invoke.LambdaForm$Name;", arg0, arg1, arg2, arg3)); }

    void internArguments() { (*javaClass->invokeMethod<void>(this->object, "internArguments", "()V", )); }

    bool isInvokeBasic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvokeBasic", "()Z", )); }

    int lastUseIndex(LambdaForm_Name arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastUseIndex", "(Ljava.lang.invoke.LambdaForm$Name;)I", arg0)); }

    bool isConstantZero() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConstantZero", "()Z", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    String exprString() { return String(*javaClass->invokeMethod<jobject>(this->object, "exprString", "()Ljava.lang.String;", )); }

    int useCount(LambdaForm_Name arg0) { return int(*javaClass->invokeMethod<int>(this->object, "useCount", "(Ljava.lang.invoke.LambdaForm$Name;)I", arg0)); }

    static bool typesMatch(LambdaForm_BasicType arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "typesMatch", "(Ljava.lang.invoke.LambdaForm$BasicType;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool typesMatch(LambdaForm_NamedFunction arg0, Object_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "typesMatch", "(Ljava.lang.invoke.LambdaForm$NamedFunction;[Ljava.lang.Object;)Z", arg0, arg1)); }

    char typeChar() { return char(*javaClass->invokeMethod<char>(this->object, "typeChar", "()C", )); }

    LambdaForm_Name replaceName(LambdaForm_Name arg0, LambdaForm_Name arg1) { return LambdaForm_Name(*javaClass->invokeMethod<jobject>(this->object, "replaceName", "(Ljava.lang.invoke.LambdaForm$Name;Ljava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaForm$Name;", arg0, arg1)); }

    bool isLinkerMethodInvoke() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLinkerMethodInvoke", "()Z", )); }

    LambdaForm_Name withConstraint(Object arg0) { return LambdaForm_Name(*javaClass->invokeMethod<jobject>(this->object, "withConstraint", "(Ljava.lang.Object;)Ljava.lang.invoke.LambdaForm$Name;", arg0)); }

};


/**
 * Classpath: [Ljava.lang.invoke.LambdaForm$Name;
 */
class LambdaForm_Name_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.invoke.LambdaForm$Name;";
public:
    STATICINITIALIZE;

    LambdaForm_Name_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.invoke.LambdaForm$NamedFunction
 * Enclosing class: java.lang.invoke.LambdaForm
 * Package name: java.lang.invoke
 */
class LambdaForm_NamedFunction : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$NamedFunction";
public:
    STATICINITIALIZE;

    LambdaForm_NamedFunction(jobject object) : JavaObject(object) {}

    LambdaForm_BasicType returnType() { return LambdaForm_BasicType(*javaClass->invokeMethod<jobject>(this->object, "returnType", "()Ljava.lang.invoke.LambdaForm$BasicType;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void resolve() { (*javaClass->invokeMethod<void>(this->object, "resolve", "()V", )); }

    LambdaForm_BasicType parameterType(int arg0) { return LambdaForm_BasicType(*javaClass->invokeMethod<jobject>(this->object, "parameterType", "(I)Ljava.lang.invoke.LambdaForm$BasicType;", arg0)); }

    MemberName member() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "member", "()Ljava.lang.invoke.MemberName;", )); }

    MethodType methodType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "methodType", "()Ljava.lang.invoke.MethodType;", )); }

    Object invokeWithArguments(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeWithArguments", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    MethodHandleImpl_Intrinsic intrinsicName() { return MethodHandleImpl_Intrinsic(*javaClass->invokeMethod<jobject>(this->object, "intrinsicName", "()Ljava.lang.invoke.MethodHandleImpl$Intrinsic;", )); }

    Object intrinsicData() { return Object(*javaClass->invokeMethod<jobject>(this->object, "intrinsicData", "()Ljava.lang.Object;", )); }

    int arity() { return int(*javaClass->invokeMethod<int>(this->object, "arity", "()I", )); }

    static bool isInvokeBasic(MemberName arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isInvokeBasic", "(Ljava.lang.invoke.MemberName;)Z", arg0)); }

    bool isConstantZero() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConstantZero", "()Z", )); }

    bool isIdentity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isIdentity", "()Z", )); }

    MethodHandle invoker() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "invoker", "()Ljava.lang.invoke.MethodHandle;", )); }

    MethodHandle resolvedHandle() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "resolvedHandle", "()Ljava.lang.invoke.MethodHandle;", )); }

    Object invokeWithArgumentsTracing(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "invokeWithArgumentsTracing", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static MethodHandle computeInvoker(MethodTypeForm arg0) { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "computeInvoker", "(Ljava.lang.invoke.MethodTypeForm;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    bool assertMemberIsConsistent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "assertMemberIsConsistent", "()Z", )); }

    Class memberDeclaringClassOrNull() { return Class(*javaClass->invokeMethod<jobject>(this->object, "memberDeclaringClassOrNull", "()Ljava.lang.Class;", )); }

};


/**
 * Classpath: java.lang.invoke.MemberName
 * Package name: java.lang.invoke
 */
class MemberName : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MemberName";
public:
    STATICINITIALIZE;

    MemberName(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    static String getName(Object arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getName", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(MemberName arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.MemberName;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    MemberName clone() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.invoke.MemberName;", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    ClassLoader getClassLoader() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava.lang.ClassLoader;", )); }

    bool isMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMethod", "()Z", )); }

    static MemberName_Factory getFactory() { return MemberName_Factory(*javaClass->invokeStaticMethod<jobject>(this->object, "getFactory", "()Ljava.lang.invoke.MemberName$Factory;", )); }

    Class getReturnType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getReturnType", "()Ljava.lang.Class;", )); }

    bool isConstructor() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConstructor", "()Z", )); }

    bool isStatic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStatic", "()Z", )); }

    bool isSynthetic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSynthetic", "()Z", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    void init(Class arg0, String arg1, Object arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "init", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Object;I)V", arg0, arg1, arg2, arg3)); }

    bool isPublic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPublic", "()Z", )); }

    String message() { return String(*javaClass->invokeMethod<jobject>(this->object, "message", "()Ljava.lang.String;", )); }

    bool refersTo(Class arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "refersTo", "(Ljava.lang.Class;Ljava.lang.String;)Z", arg0, arg1)); }

    bool isProtected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isProtected", "()Z", )); }

    Object getType() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Ljava.lang.Object;", )); }

    bool isBridge() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBridge", "()Z", )); }

    String getSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSignature", "()Ljava.lang.String;", )); }

    bool isFinal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFinal", "()Z", )); }

    bool isResolved() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isResolved", "()Z", )); }

    byte getReferenceKind() { return byte(*javaClass->invokeMethod<byte>(this->object, "getReferenceKind", "()B", )); }

    bool isAbstract() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAbstract", "()Z", )); }

    MethodType getMethodType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "getMethodType", "()Ljava.lang.invoke.MethodType;", )); }

    MethodType getMethodOrFieldType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "getMethodOrFieldType", "()Ljava.lang.invoke.MethodType;", )); }

    bool isField() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isField", "()Z", )); }

    MemberName asSpecial() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "asSpecial", "()Ljava.lang.invoke.MemberName;", )); }

    MemberName asConstructor() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "asConstructor", "()Ljava.lang.invoke.MemberName;", )); }

    bool isInvocable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvocable", "()Z", )); }

    MethodType getInvocationType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "getInvocationType", "()Ljava.lang.invoke.MethodType;", )); }

    bool isMethodHandleInvoke() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMethodHandleInvoke", "()Z", )); }

    Class getFieldType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getFieldType", "()Ljava.lang.Class;", )); }

    bool isVolatile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVolatile", "()Z", )); }

    bool isGetter() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isGetter", "()Z", )); }

    bool isVarargs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVarargs", "()Z", )); }

    IllegalAccessException makeAccessException(String arg0, Object arg1) { return IllegalAccessException(*javaClass->invokeMethod<jobject>(this->object, "makeAccessException", "(Ljava.lang.String;Ljava.lang.Object;)Ljava.lang.IllegalAccessException;", arg0, arg1)); }

    ReflectiveOperationException makeAccessException() { return ReflectiveOperationException(*javaClass->invokeMethod<jobject>(this->object, "makeAccessException", "()Ljava.lang.ReflectiveOperationException;", )); }

    void expandFromVM() { (*javaClass->invokeMethod<void>(this->object, "expandFromVM", "()V", )); }

    bool isSetter() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSetter", "()Z", )); }

    bool isType() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isType", "()Z", )); }

    bool staticIsConsistent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "staticIsConsistent", "()Z", )); }

    bool isObjectPublicMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isObjectPublicMethod", "()Z", )); }

    bool testFlags(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "testFlags", "(II)Z", arg0, arg1)); }

    static bool isMethodHandleInvokeName(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMethodHandleInvokeName", "(Ljava.lang.String;)Z", arg0)); }

    static bool isVarHandleMethodInvokeName(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isVarHandleMethodInvokeName", "(Ljava.lang.String;)Z", arg0)); }

    bool isPrivate() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPrivate", "()Z", )); }

    bool isNative() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNative", "()Z", )); }

    bool testAllFlags(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "testAllFlags", "(I)Z", arg0)); }

    bool testAnyFlags(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "testAnyFlags", "(I)Z", arg0)); }

    static int flagsMods(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "flagsMods", "(IIB)I", arg0, arg1, arg2)); }

    bool isVarHandleMethodInvoke() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVarHandleMethodInvoke", "()Z", )); }

    MemberName changeReferenceKind(byte arg0, byte arg1) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "changeReferenceKind", "(BB)Ljava.lang.invoke.MemberName;", arg0, arg1)); }

    bool referenceKindIsConsistentWith(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "referenceKindIsConsistentWith", "(I)Z", arg0)); }

    void initResolved(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "initResolved", "(Z)V", arg0)); }

    static MemberName makeMethodHandleInvoke(String arg0, MethodType arg1) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "makeMethodHandleInvoke", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0, arg1)); }

    static MemberName makeMethodHandleInvoke(String arg0, MethodType arg1, int arg2) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "makeMethodHandleInvoke", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2)); }

    static MemberName makeVarHandleMethodInvoke(String arg0, MethodType arg1) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "makeVarHandleMethodInvoke", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0, arg1)); }

    static MemberName makeVarHandleMethodInvoke(String arg0, MethodType arg1, int arg2) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "makeVarHandleMethodInvoke", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2)); }

    String getMethodDescriptor() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMethodDescriptor", "()Ljava.lang.String;", )); }

    bool referenceKindIsConsistent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "referenceKindIsConsistent", "()Z", )); }

    bool vminfoIsConsistent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "vminfoIsConsistent", "()Z", )); }

    bool canBeStaticallyBound() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeStaticallyBound", "()Z", )); }

    bool isFieldOrMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFieldOrMethod", "()Z", )); }

    bool isPackage() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPackage", "()Z", )); }

    bool isCallerSensitive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCallerSensitive", "()Z", )); }

    bool isTrustedFinalField() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTrustedFinalField", "()Z", )); }

    bool isAccessibleFrom(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessibleFrom", "(Ljava.lang.Class;)Z", arg0)); }

    MemberName asNormalOriginal() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "asNormalOriginal", "()Ljava.lang.invoke.MemberName;", )); }

    MemberName asSetter() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "asSetter", "()Ljava.lang.invoke.MemberName;", )); }

    MemberName getDefinition() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "getDefinition", "()Ljava.lang.invoke.MemberName;", )); }

    bool hasReceiverTypeDispatch() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasReceiverTypeDispatch", "()Z", )); }

    void checkForTypeAlias(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "checkForTypeAlias", "(Ljava.lang.Class;)V", arg0)); }

};


/**
 * Classpath: java.lang.invoke.MemberName$Factory
 * Enclosing class: java.lang.invoke.MemberName
 * Package name: java.lang.invoke
 */
class MemberName_Factory : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MemberName$Factory";
public:
    STATICINITIALIZE;

    MemberName_Factory(jobject object) : JavaObject(object) {}

    List getFields(Class arg0, bool arg1, Class arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getFields", "(Ljava.lang.Class;ZLjava.lang.Class;)Ljava.util.List;", arg0, arg1, arg2)); }

    List getFields(Class arg0, bool arg1, String arg2, Class arg3, Class arg4) { return List(*javaClass->invokeMethod<jobject>(this->object, "getFields", "(Ljava.lang.Class;ZLjava.lang.String;Ljava.lang.Class;Ljava.lang.Class;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4)); }

    List getMethods(Class arg0, bool arg1, Class arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getMethods", "(Ljava.lang.Class;ZLjava.lang.Class;)Ljava.util.List;", arg0, arg1, arg2)); }

    List getMethods(Class arg0, bool arg1, String arg2, MethodType arg3, Class arg4) { return List(*javaClass->invokeMethod<jobject>(this->object, "getMethods", "(Ljava.lang.Class;ZLjava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.Class;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4)); }

    List getConstructors(Class arg0, Class arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getConstructors", "(Ljava.lang.Class;Ljava.lang.Class;)Ljava.util.List;", arg0, arg1)); }

    MemberName resolve(byte arg0, MemberName arg1, Class arg2, int arg3, bool arg4) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolve", "(BLjava.lang.invoke.MemberName;Ljava.lang.Class;IZ)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2, arg3, arg4)); }

    MemberName resolveOrNull(byte arg0, MemberName arg1, Class arg2, int arg3) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveOrNull", "(BLjava.lang.invoke.MemberName;Ljava.lang.Class;I)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2, arg3)); }

    MemberName resolveOrFail(byte arg0, MemberName arg1, Class arg2, int arg3, Class arg4) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveOrFail", "(BLjava.lang.invoke.MemberName;Ljava.lang.Class;ILjava.lang.Class;)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2, arg3, arg4)); }

    List getMembers(Class arg0, String arg1, Object arg2, int arg3, Class arg4) { return List(*javaClass->invokeMethod<jobject>(this->object, "getMembers", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Object;ILjava.lang.Class;)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4)); }

    List getNestedTypes(Class arg0, bool arg1, Class arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getNestedTypes", "(Ljava.lang.Class;ZLjava.lang.Class;)Ljava.util.List;", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.lang.IllegalAccessException
 * Package name: java.lang
 */
class IllegalAccessException : public ReflectiveOperationException {
protected:
    const inline static char *className = "java.lang.IllegalAccessException";
public:
    STATICINITIALIZE;

    IllegalAccessException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.invoke.MethodHandleImpl$Intrinsic
 * Enclosing class: java.lang.invoke.MethodHandleImpl
 * Package name: java.lang.invoke
 */
class MethodHandleImpl_Intrinsic : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandleImpl$Intrinsic";
public:
    STATICINITIALIZE;

    MethodHandleImpl_Intrinsic(jobject object) : JavaObject(object) {}

    static MethodHandleImpl_Intrinsic valueOf(String arg0) { return MethodHandleImpl_Intrinsic(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.invoke.MethodHandleImpl$Intrinsic;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.LambdaFormEditor
 * Package name: java.lang.invoke
 */
class LambdaFormEditor : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormEditor";
public:
    STATICINITIALIZE;

    LambdaFormEditor(jobject object) : JavaObject(object) {}

    LambdaFormBuffer buffer() { return LambdaFormBuffer(*javaClass->invokeMethod<jobject>(this->object, "buffer", "()Ljava.lang.invoke.LambdaFormBuffer;", )); }

    LambdaForm spreadArgumentsForm(int arg0, Class arg1, int arg2) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "spreadArgumentsForm", "(ILjava.lang.Class;I)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2)); }

    LambdaForm collectArgumentsForm(int arg0, MethodType arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "collectArgumentsForm", "(ILjava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    BoundMethodHandle bindArgumentL(BoundMethodHandle arg0, int arg1, Object arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentL", "(Ljava.lang.invoke.BoundMethodHandle;ILjava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    static LambdaFormEditor lambdaFormEditor(LambdaForm arg0) { return LambdaFormEditor(*javaClass->invokeStaticMethod<jobject>(this->object, "lambdaFormEditor", "(Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaFormEditor;", arg0)); }

    LambdaForm dupArgumentForm(int arg0, int arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "dupArgumentForm", "(II)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    LambdaForm addArgumentForm(int arg0, LambdaForm_BasicType arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "addArgumentForm", "(ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    LambdaForm permuteArgumentsForm(int arg0, arr_I arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "permuteArgumentsForm", "(I[I)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    BoundMethodHandle bindArgumentI(BoundMethodHandle arg0, int arg1, int arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentI", "(Ljava.lang.invoke.BoundMethodHandle;II)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    BoundMethodHandle bindArgumentJ(BoundMethodHandle arg0, int arg1, long arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentJ", "(Ljava.lang.invoke.BoundMethodHandle;IJ)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    BoundMethodHandle bindArgumentF(BoundMethodHandle arg0, int arg1, float arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentF", "(Ljava.lang.invoke.BoundMethodHandle;IF)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    BoundMethodHandle bindArgumentD(BoundMethodHandle arg0, int arg1, double arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentD", "(Ljava.lang.invoke.BoundMethodHandle;ID)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    LambdaForm filterReturnForm(LambdaForm_BasicType arg0, bool arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "filterReturnForm", "(Ljava.lang.invoke.LambdaForm$BasicType;Z)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    LambdaForm filterRepeatedArgumentForm(LambdaForm_BasicType arg0, arr_I arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "filterRepeatedArgumentForm", "(Ljava.lang.invoke.LambdaForm$BasicType;[I)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    LambdaForm filterArgumentForm(int arg0, LambdaForm_BasicType arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "filterArgumentForm", "(ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    LambdaForm collectReturnValueForm(MethodType arg0) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "collectReturnValueForm", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    LambdaForm foldArgumentsForm(int arg0, bool arg1, MethodType arg2) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "foldArgumentsForm", "(IZLjava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2)); }

    LambdaForm foldArgumentsForm(int arg0, bool arg1, MethodType arg2, arr_I arg3) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "foldArgumentsForm", "(IZLjava.lang.invoke.MethodType;[I)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2, arg3)); }

    LambdaForm filterArgumentsForm(int arg0, MethodType arg1, arr_I arg2) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "filterArgumentsForm", "(ILjava.lang.invoke.MethodType;[I)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2)); }

    BoundMethodHandle_SpeciesData newSpeciesData(LambdaForm_BasicType arg0) { return BoundMethodHandle_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "newSpeciesData", "(Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", arg0)); }

    BoundMethodHandle_SpeciesData oldSpeciesData() { return BoundMethodHandle_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "oldSpeciesData", "()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", )); }

    MethodType bindArgumentType(BoundMethodHandle arg0, int arg1, LambdaForm_BasicType arg2) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentType", "(Ljava.lang.invoke.BoundMethodHandle;ILjava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    LambdaForm bindArgumentForm(int arg0) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentForm", "(I)Ljava.lang.invoke.LambdaForm;", arg0)); }

    LambdaForm getInCache(LambdaFormEditor_TransformKey arg0) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "getInCache", "(Ljava.lang.invoke.LambdaFormEditor$TransformKey;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    LambdaForm putInCache(LambdaFormEditor_TransformKey arg0, LambdaForm arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "putInCache", "(Ljava.lang.invoke.LambdaFormEditor$TransformKey;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    LambdaForm makeArgumentCombinationForm(int arg0, MethodType arg1, bool arg2, bool arg3) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "makeArgumentCombinationForm", "(ILjava.lang.invoke.MethodType;ZZ)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2, arg3)); }

    LambdaForm makeArgumentCombinationForm(int arg0, MethodType arg1, arr_I arg2, bool arg3, bool arg4) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "makeArgumentCombinationForm", "(ILjava.lang.invoke.MethodType;[IZZ)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2, arg3, arg4)); }

    bool formParametersMatch(LambdaForm arg0, LambdaForm_BasicType arg1, arr_I arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "formParametersMatch", "(Ljava.lang.invoke.LambdaForm;Ljava.lang.invoke.LambdaForm$BasicType;[I)Z", arg0, arg1, arg2)); }

    LambdaForm makeRepeatedFilterForm(MethodType arg0, arr_I arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "makeRepeatedFilterForm", "(Ljava.lang.invoke.MethodType;[I)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    static bool permutedTypesMatch(arr_I arg0, LambdaForm_BasicType_interface arg1, LambdaForm_Name_interface arg2, int arg3) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "permutedTypesMatch", "([I[Ljava.lang.invoke.LambdaForm$BasicType;[Ljava.lang.invoke.LambdaForm$Name;I)Z", arg0, arg1, arg2, arg3)); }

    LambdaForm noteLoopLocalTypesForm(int arg0, LambdaForm_BasicType_interface arg1) { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "noteLoopLocalTypesForm", "(I[Ljava.lang.invoke.LambdaForm$BasicType;)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.invoke.LambdaFormBuffer
 * Package name: java.lang.invoke
 */
class LambdaFormBuffer : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormBuffer";
public:
    STATICINITIALIZE;

    LambdaFormBuffer(jobject object) : JavaObject(object) {}

    LambdaForm_Name name(int arg0) { return LambdaForm_Name(*javaClass->invokeMethod<jobject>(this->object, "name", "(I)Ljava.lang.invoke.LambdaForm$Name;", arg0)); }

    static int indexOf(LambdaForm_Name arg0, LambdaForm_Name_interface arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "indexOf", "(Ljava.lang.invoke.LambdaForm$Name;[Ljava.lang.invoke.LambdaForm$Name;)I", arg0, arg1)); }

    static int indexOf(LambdaForm_NamedFunction arg0, List arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "indexOf", "(Ljava.lang.invoke.LambdaForm$NamedFunction;Ljava.util.List;)I", arg0, arg1)); }

    int lastIndexOf(LambdaForm_Name arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.invoke.LambdaForm$Name;)I", arg0)); }

    void replaceName(int arg0, LambdaForm_Name arg1) { (*javaClass->invokeMethod<void>(this->object, "replaceName", "(ILjava.lang.invoke.LambdaForm$Name;)V", arg0, arg1)); }

    LambdaForm lambdaForm() { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "lambdaForm", "()Ljava.lang.invoke.LambdaForm;", )); }

    void startEdit() { (*javaClass->invokeMethod<void>(this->object, "startEdit", "()V", )); }

    LambdaFormBuffer replaceFunctions(List arg0, List arg1, Object_interface arg2) { return LambdaFormBuffer(*javaClass->invokeMethod<jobject>(this->object, "replaceFunctions", "(Ljava.util.List;Ljava.util.List;[Ljava.lang.Object;)Ljava.lang.invoke.LambdaFormBuffer;", arg0, arg1, arg2)); }

    LambdaFormBuffer renameParameter(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*javaClass->invokeMethod<jobject>(this->object, "renameParameter", "(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;", arg0, arg1)); }

    LambdaFormBuffer replaceParameterByNewExpression(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*javaClass->invokeMethod<jobject>(this->object, "replaceParameterByNewExpression", "(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;", arg0, arg1)); }

    LambdaFormBuffer insertParameter(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*javaClass->invokeMethod<jobject>(this->object, "insertParameter", "(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;", arg0, arg1)); }

    LambdaForm endEdit() { return LambdaForm(*javaClass->invokeMethod<jobject>(this->object, "endEdit", "()Ljava.lang.invoke.LambdaForm;", )); }

    LambdaFormBuffer replaceParameterByCopy(int arg0, int arg1) { return LambdaFormBuffer(*javaClass->invokeMethod<jobject>(this->object, "replaceParameterByCopy", "(II)Ljava.lang.invoke.LambdaFormBuffer;", arg0, arg1)); }

    LambdaFormBuffer insertExpression(int arg0, LambdaForm_Name arg1) { return LambdaFormBuffer(*javaClass->invokeMethod<jobject>(this->object, "insertExpression", "(ILjava.lang.invoke.LambdaForm$Name;)Ljava.lang.invoke.LambdaFormBuffer;", arg0, arg1)); }

    void setResult(LambdaForm_Name arg0) { (*javaClass->invokeMethod<void>(this->object, "setResult", "(Ljava.lang.invoke.LambdaForm$Name;)V", arg0)); }

    void changeName(int arg0, LambdaForm_Name arg1) { (*javaClass->invokeMethod<void>(this->object, "changeName", "(ILjava.lang.invoke.LambdaForm$Name;)V", arg0, arg1)); }

    void setNames(LambdaForm_Name_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setNames", "([Ljava.lang.invoke.LambdaForm$Name;)V", arg0)); }

    bool inTrans() { return bool(*javaClass->invokeMethod<boolean>(this->object, "inTrans", "()Z", )); }

    int resultIndex() { return int(*javaClass->invokeMethod<int>(this->object, "resultIndex", "()I", )); }

    int ownedCount() { return int(*javaClass->invokeMethod<int>(this->object, "ownedCount", "()I", )); }

    bool verifyArity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "verifyArity", "()Z", )); }

    bool verifyFirstChange() { return bool(*javaClass->invokeMethod<boolean>(this->object, "verifyFirstChange", "()Z", )); }

    void growNames(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "growNames", "(II)V", arg0, arg1)); }

    void clearDuplicatesAndNulls() { (*javaClass->invokeMethod<void>(this->object, "clearDuplicatesAndNulls", "()V", )); }

    void noteDuplicate(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "noteDuplicate", "(II)V", arg0, arg1)); }

    void insertName(int arg0, LambdaForm_Name arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "insertName", "(ILjava.lang.invoke.LambdaForm$Name;Z)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.lang.invoke.BoundMethodHandle
 * Package name: java.lang.invoke
 */
class BoundMethodHandle : public MethodHandle {
protected:
    const inline static char *className = "java.lang.invoke.BoundMethodHandle";
public:
    STATICINITIALIZE;

    BoundMethodHandle(jobject object) : JavaObject(object) {}

    Object arg(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "arg", "(I)Ljava.lang.Object;", arg0)); }

    static BoundMethodHandle makeReinvoker(MethodHandle arg0) { return BoundMethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "makeReinvoker", "(Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.BoundMethodHandle;", arg0)); }

    Object internalProperties() { return Object(*javaClass->invokeMethod<jobject>(this->object, "internalProperties", "()Ljava.lang.Object;", )); }

    BoundMethodHandle rebind() { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "rebind", "()Ljava.lang.invoke.BoundMethodHandle;", )); }

    BoundMethodHandle copyWith(MethodType arg0, LambdaForm arg1) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWith", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1)); }

    MethodHandle copyWith(MethodType arg0, LambdaForm arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWith", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    LambdaFormEditor editor() { return LambdaFormEditor(*javaClass->invokeMethod<jobject>(this->object, "editor", "()Ljava.lang.invoke.LambdaFormEditor;", )); }

    BoundMethodHandle copyWithExtendL(MethodType arg0, LambdaForm arg1, Object arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWithExtendL", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;Ljava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    BoundMethodHandle bindArgumentL(int arg0, Object arg1) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentL", "(ILjava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1)); }

    String internalValues() { return String(*javaClass->invokeMethod<jobject>(this->object, "internalValues", "()Ljava.lang.String;", )); }

    Object internalValues() { return Object(*javaClass->invokeMethod<jobject>(this->object, "internalValues", "()Ljava.lang.Object;", )); }

    BoundMethodHandle bindArgumentI(int arg0, int arg1) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentI", "(II)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1)); }

    BoundMethodHandle bindArgumentJ(int arg0, long arg1) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentJ", "(IJ)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1)); }

    BoundMethodHandle bindArgumentF(int arg0, float arg1) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentF", "(IF)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1)); }

    BoundMethodHandle bindArgumentD(int arg0, double arg1) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "bindArgumentD", "(ID)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1)); }

    BoundMethodHandle_SpeciesData speciesData() { return BoundMethodHandle_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "speciesData", "()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", )); }

    static BoundMethodHandle_SpeciesData speciesDataFor(LambdaForm arg0) { return BoundMethodHandle_SpeciesData(*javaClass->invokeStaticMethod<jobject>(this->object, "speciesDataFor", "(Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", arg0)); }

    bool tooComplex() { return bool(*javaClass->invokeMethod<boolean>(this->object, "tooComplex", "()Z", )); }

    int fieldCount() { return int(*javaClass->invokeMethod<int>(this->object, "fieldCount", "()I", )); }

    BoundMethodHandle copyWithExtendI(MethodType arg0, LambdaForm arg1, int arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWithExtendI", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;I)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    BoundMethodHandle copyWithExtendJ(MethodType arg0, LambdaForm arg1, long arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWithExtendJ", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;J)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    BoundMethodHandle copyWithExtendF(MethodType arg0, LambdaForm arg1, float arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWithExtendF", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;F)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    BoundMethodHandle copyWithExtendD(MethodType arg0, LambdaForm arg1, double arg2) { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWithExtendD", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;D)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    static BoundMethodHandle_SpeciesData speciesData_LL() { return BoundMethodHandle_SpeciesData(*javaClass->invokeStaticMethod<jobject>(this->object, "speciesData_LL", "()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", )); }

    static BoundMethodHandle_SpeciesData speciesData_LLLL() { return BoundMethodHandle_SpeciesData(*javaClass->invokeStaticMethod<jobject>(this->object, "speciesData_LLLL", "()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", )); }

    static BoundMethodHandle_SpeciesData speciesData_LLL() { return BoundMethodHandle_SpeciesData(*javaClass->invokeStaticMethod<jobject>(this->object, "speciesData_LLL", "()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", )); }

    static BoundMethodHandle_SpeciesData speciesData_LLLLL() { return BoundMethodHandle_SpeciesData(*javaClass->invokeStaticMethod<jobject>(this->object, "speciesData_LLLLL", "()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", )); }

    static BoundMethodHandle_SpeciesData speciesData_L() { return BoundMethodHandle_SpeciesData(*javaClass->invokeStaticMethod<jobject>(this->object, "speciesData_L", "()Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", )); }

    static BoundMethodHandle bindSingle(MethodType arg0, LambdaForm arg1, Object arg2) { return BoundMethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "bindSingle", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;Ljava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2)); }

    static BoundMethodHandle bindSingle(MethodType arg0, LambdaForm arg1, LambdaForm_BasicType arg2, Object arg3) { return BoundMethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "bindSingle", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;Ljava.lang.invoke.LambdaForm$BasicType;Ljava.lang.Object;)Ljava.lang.invoke.BoundMethodHandle;", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.lang.invoke.ClassSpecializer$SpeciesData
 * Enclosing class: java.lang.invoke.ClassSpecializer
 * Package name: java.lang.invoke
 */
class ClassSpecializer_SpeciesData : public Object {
protected:
    const inline static char *className = "java.lang.invoke.ClassSpecializer$SpeciesData";
public:
    STATICINITIALIZE;

    ClassSpecializer_SpeciesData(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    MethodHandle factory() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "factory", "()Ljava.lang.invoke.MethodHandle;", )); }

    Object key() { return Object(*javaClass->invokeMethod<jobject>(this->object, "key", "()Ljava.lang.Object;", )); }

    bool isResolved() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isResolved", "()Z", )); }

    MethodHandle getter(int arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getter", "(I)Ljava.lang.invoke.MethodHandle;", arg0)); }

    int fieldCount() { return int(*javaClass->invokeMethod<int>(this->object, "fieldCount", "()I", )); }

    List fieldTypes() { return List(*javaClass->invokeMethod<jobject>(this->object, "fieldTypes", "()Ljava.util.List;", )); }

    String deriveTypeString() { return String(*javaClass->invokeMethod<jobject>(this->object, "deriveTypeString", "()Ljava.lang.String;", )); }

    List deriveFieldTypes(Object arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "deriveFieldTypes", "(Ljava.lang.Object;)Ljava.util.List;", arg0)); }

    ClassSpecializer outer() { return ClassSpecializer(*javaClass->invokeMethod<jobject>(this->object, "outer", "()Ljava.lang.invoke.ClassSpecializer;", )); }

    String deriveClassName() { return String(*javaClass->invokeMethod<jobject>(this->object, "deriveClassName", "()Ljava.lang.String;", )); }

    MethodHandle deriveTransformHelper(MemberName arg0, int arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "deriveTransformHelper", "(Ljava.lang.invoke.MemberName;I)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    List deriveTransformHelperArguments(MemberName arg0, int arg1, List arg2, List arg3) { return List(*javaClass->invokeMethod<jobject>(this->object, "deriveTransformHelperArguments", "(Ljava.lang.invoke.MemberName;ILjava.util.List;Ljava.util.List;)Ljava.util.List;", arg0, arg1, arg2, arg3)); }

    Class speciesCode() { return Class(*javaClass->invokeMethod<jobject>(this->object, "speciesCode", "()Ljava.lang.Class;", )); }

    List getters() { return List(*javaClass->invokeMethod<jobject>(this->object, "getters", "()Ljava.util.List;", )); }

    MethodType transformHelperType(int arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "transformHelperType", "(I)Ljava.lang.invoke.MethodType;", arg0)); }

    List getterFunctions() { return List(*javaClass->invokeMethod<jobject>(this->object, "getterFunctions", "()Ljava.util.List;", )); }

    MethodHandle transformHelper(int arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "transformHelper", "(I)Ljava.lang.invoke.MethodHandle;", arg0)); }

    Class deriveSuperClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "deriveSuperClass", "()Ljava.lang.Class;", )); }

    LambdaForm_NamedFunction getterFunction(int arg0) { return LambdaForm_NamedFunction(*javaClass->invokeMethod<jobject>(this->object, "getterFunction", "(I)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.ClassSpecializer
 * Package name: java.lang.invoke
 */
class ClassSpecializer : public Object {
protected:
    const inline static char *className = "java.lang.invoke.ClassSpecializer";
public:
    STATICINITIALIZE;

    ClassSpecializer(jobject object) : JavaObject(object) {}

    static String className(Class arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "className", "(Ljava.lang.Class;)Ljava.lang.String;", arg0)); }

    ClassSpecializer_Factory factory() { return ClassSpecializer_Factory(*javaClass->invokeMethod<jobject>(this->object, "factory", "()Ljava.lang.invoke.ClassSpecializer$Factory;", )); }

    Class keyType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "keyType", "()Ljava.lang.Class;", )); }

    ClassSpecializer_SpeciesData topSpecies() { return ClassSpecializer_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "topSpecies", "()Ljava.lang.invoke.ClassSpecializer$SpeciesData;", )); }

    ClassSpecializer_SpeciesData findSpecies(Object arg0) { return ClassSpecializer_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "findSpecies", "(Ljava.lang.Object;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;", arg0)); }

    ClassSpecializer_Factory makeFactory() { return ClassSpecializer_Factory(*javaClass->invokeMethod<jobject>(this->object, "makeFactory", "()Ljava.lang.invoke.ClassSpecializer$Factory;", )); }

    Object topSpeciesKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "topSpeciesKey", "()Ljava.lang.Object;", )); }

    ClassSpecializer_SpeciesData newSpeciesData(Object arg0) { return ClassSpecializer_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "newSpeciesData", "(Ljava.lang.Object;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;", arg0)); }

    Class topClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "topClass", "()Ljava.lang.Class;", )); }

    Class metaType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "metaType", "()Ljava.lang.Class;", )); }

    MethodType baseConstructorType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "baseConstructorType", "()Ljava.lang.invoke.MethodType;", )); }

    List transformMethods() { return List(*javaClass->invokeMethod<jobject>(this->object, "transformMethods", "()Ljava.util.List;", )); }

    static RuntimeException newIAE(String arg0, Throwable arg1) { return RuntimeException(*javaClass->invokeStaticMethod<jobject>(this->object, "newIAE", "(Ljava.lang.String;Ljava.lang.Throwable;)Ljava.lang.RuntimeException;", arg0, arg1)); }

    static String classBCName(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "classBCName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static String classBCName(Class arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "classBCName", "(Ljava.lang.Class;)Ljava.lang.String;", arg0)); }

    static String classSig(Class arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "classSig", "(Ljava.lang.Class;)Ljava.lang.String;", arg0)); }

    static String classSig(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "classSig", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static Constructor reflectConstructor(Class arg0, Class_interface arg1) { return Constructor(*javaClass->invokeStaticMethod<jobject>(this->object, "reflectConstructor", "(Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0, arg1)); }

    static Field reflectField(Class arg0, String arg1) { return Field(*javaClass->invokeStaticMethod<jobject>(this->object, "reflectField", "(Ljava.lang.Class;Ljava.lang.String;)Ljava.lang.reflect.Field;", arg0, arg1)); }

    static String methodSig(MethodType arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "methodSig", "(Ljava.lang.invoke.MethodType;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.ClassSpecializer$Factory
 * Enclosing class: java.lang.invoke.ClassSpecializer
 * Package name: java.lang.invoke
 */
class ClassSpecializer_Factory : public Object {
protected:
    const inline static char *className = "java.lang.invoke.ClassSpecializer$Factory";
public:
    STATICINITIALIZE;

    ClassSpecializer_Factory(jobject object) : JavaObject(object) {}

    MethodHandle findGetter(Class arg0, List arg1, int arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findGetter", "(Ljava.lang.Class;Ljava.util.List;I)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    ClassSpecializer_SpeciesData loadSpecies(ClassSpecializer_SpeciesData arg0) { return ClassSpecializer_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "loadSpecies", "(Ljava.lang.invoke.ClassSpecializer$SpeciesData;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;", arg0)); }

    String chooseFieldName(Class arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "chooseFieldName", "(Ljava.lang.Class;I)Ljava.lang.String;", arg0, arg1)); }

    void linkSpeciesDataToCode(ClassSpecializer_SpeciesData arg0, Class arg1) { (*javaClass->invokeMethod<void>(this->object, "linkSpeciesDataToCode", "(Ljava.lang.invoke.ClassSpecializer$SpeciesData;Ljava.lang.Class;)V", arg0, arg1)); }

    void linkCodeToSpeciesData(Class arg0, ClassSpecializer_SpeciesData arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "linkCodeToSpeciesData", "(Ljava.lang.Class;Ljava.lang.invoke.ClassSpecializer$SpeciesData;Z)V", arg0, arg1, arg2)); }

    Class generateConcreteSpeciesCode(String arg0, ClassSpecializer_SpeciesData arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "generateConcreteSpeciesCode", "(Ljava.lang.String;Ljava.lang.invoke.ClassSpecializer$SpeciesData;)Ljava.lang.Class;", arg0, arg1)); }

    ClassSpecializer_SpeciesData loadSpeciesDataFromCode(Class arg0) { return ClassSpecializer_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "loadSpeciesDataFromCode", "(Ljava.lang.Class;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;", arg0)); }

    void emitIntConstant(int arg0, MethodVisitor arg1) { (*javaClass->invokeMethod<void>(this->object, "emitIntConstant", "(ILjdk.internal.org.objectweb.asm.MethodVisitor;)V", arg0, arg1)); }

    MethodHandle findFactory(Class arg0, List arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findFactory", "(Ljava.lang.Class;Ljava.util.List;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    List findFactories(Class arg0, List arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "findFactories", "(Ljava.lang.Class;Ljava.util.List;)Ljava.util.List;", arg0, arg1)); }

    List findGetters(Class arg0, List arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "findGetters", "(Ljava.lang.Class;Ljava.util.List;)Ljava.util.List;", arg0, arg1)); }

    List makeNominalGetters(List arg0, List arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "makeNominalGetters", "(Ljava.util.List;Ljava.util.List;)Ljava.util.List;", arg0, arg1)); }

    ClassSpecializer_SpeciesData readSpeciesDataFromCode(Class arg0) { return ClassSpecializer_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "readSpeciesDataFromCode", "(Ljava.lang.Class;)Ljava.lang.invoke.ClassSpecializer$SpeciesData;", arg0)); }

    int typeLoadOp(char arg0) { return int(*javaClass->invokeMethod<int>(this->object, "typeLoadOp", "(C)I", arg0)); }

    Field reflectSDField(Class arg0) { return Field(*javaClass->invokeMethod<jobject>(this->object, "reflectSDField", "(Ljava.lang.Class;)Ljava.lang.reflect.Field;", arg0)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.MethodVisitor
 * Package name: jdk.internal.org.objectweb.asm
 */
class MethodVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.MethodVisitor";
public:
    STATICINITIALIZE;

    MethodVisitor(jobject object) : JavaObject(object) {}

    void visitFrame(int arg0, int arg1, Object_interface arg2, int arg3, Object_interface arg4) { (*javaClass->invokeMethod<void>(this->object, "visitFrame", "(II[Ljava.lang.Object;I[Ljava.lang.Object;)V", arg0, arg1, arg2, arg3, arg4)); }

    void visitMaxs(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "visitMaxs", "(II)V", arg0, arg1)); }

    void visitEnd() { (*javaClass->invokeMethod<void>(this->object, "visitEnd", "()V", )); }

    void visitCode() { (*javaClass->invokeMethod<void>(this->object, "visitCode", "()V", )); }

    void visitLdcInsn(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "visitLdcInsn", "(Ljava.lang.Object;)V", arg0)); }

    void visitMethodInsn(int arg0, String arg1, String arg2, String arg3) { (*javaClass->invokeMethod<void>(this->object, "visitMethodInsn", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3)); }

    void visitMethodInsn(int arg0, String arg1, String arg2, String arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "visitMethodInsn", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)V", arg0, arg1, arg2, arg3, arg4)); }

    void visitTypeInsn(int arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "visitTypeInsn", "(ILjava.lang.String;)V", arg0, arg1)); }

    void visitVarInsn(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "visitVarInsn", "(II)V", arg0, arg1)); }

    void visitFieldInsn(int arg0, String arg1, String arg2, String arg3) { (*javaClass->invokeMethod<void>(this->object, "visitFieldInsn", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3)); }

    void visitInsn(int arg0) { (*javaClass->invokeMethod<void>(this->object, "visitInsn", "(I)V", arg0)); }

    void visitIntInsn(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "visitIntInsn", "(II)V", arg0, arg1)); }

    AnnotationVisitor visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1)); }

    void visitJumpInsn(int arg0, Label arg1) { (*javaClass->invokeMethod<void>(this->object, "visitJumpInsn", "(ILjdk.internal.org.objectweb.asm.Label;)V", arg0, arg1)); }

    void visitLabel(Label arg0) { (*javaClass->invokeMethod<void>(this->object, "visitLabel", "(Ljdk.internal.org.objectweb.asm.Label;)V", arg0)); }

    void visitTryCatchBlock(Label arg0, Label arg1, Label arg2, String arg3) { (*javaClass->invokeMethod<void>(this->object, "visitTryCatchBlock", "(Ljdk.internal.org.objectweb.asm.Label;Ljdk.internal.org.objectweb.asm.Label;Ljdk.internal.org.objectweb.asm.Label;Ljava.lang.String;)V", arg0, arg1, arg2, arg3)); }

    void visitTableSwitchInsn(int arg0, int arg1, Label arg2, Label_interface arg3) { (*javaClass->invokeMethod<void>(this->object, "visitTableSwitchInsn", "(IILjdk.internal.org.objectweb.asm.Label;[Ljdk.internal.org.objectweb.asm.Label;)V", arg0, arg1, arg2, arg3)); }

    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3)); }

    void visitAttribute(Attribute arg0) { (*javaClass->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk.internal.org.objectweb.asm.Attribute;)V", arg0)); }

    void visitParameter(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "visitParameter", "(Ljava.lang.String;I)V", arg0, arg1)); }

    AnnotationVisitor visitAnnotationDefault() { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitAnnotationDefault", "()Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", )); }

    void visitAnnotableParameterCount(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "visitAnnotableParameterCount", "(IZ)V", arg0, arg1)); }

    AnnotationVisitor visitParameterAnnotation(int arg0, String arg1, bool arg2) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitParameterAnnotation", "(ILjava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2)); }

    void visitInvokeDynamicInsn(String arg0, String arg1, Handle arg2, Object_interface arg3) { (*javaClass->invokeMethod<void>(this->object, "visitInvokeDynamicInsn", "(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)V", arg0, arg1, arg2, arg3)); }

    void visitIincInsn(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "visitIincInsn", "(II)V", arg0, arg1)); }

    void visitLookupSwitchInsn(Label arg0, arr_I arg1, Label_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "visitLookupSwitchInsn", "(Ljdk.internal.org.objectweb.asm.Label;[I[Ljdk.internal.org.objectweb.asm.Label;)V", arg0, arg1, arg2)); }

    void visitMultiANewArrayInsn(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "visitMultiANewArrayInsn", "(Ljava.lang.String;I)V", arg0, arg1)); }

    AnnotationVisitor visitInsnAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitInsnAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3)); }

    AnnotationVisitor visitTryCatchAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitTryCatchAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3)); }

    void visitLocalVariable(String arg0, String arg1, String arg2, Label arg3, Label arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "visitLocalVariable", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Label;Ljdk.internal.org.objectweb.asm.Label;I)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    AnnotationVisitor visitLocalVariableAnnotation(int arg0, TypePath arg1, Label_interface arg2, Label_interface arg3, arr_I arg4, String arg5, bool arg6) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitLocalVariableAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;[Ljdk.internal.org.objectweb.asm.Label;[Ljdk.internal.org.objectweb.asm.Label;[ILjava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void visitLineNumber(int arg0, Label arg1) { (*javaClass->invokeMethod<void>(this->object, "visitLineNumber", "(ILjdk.internal.org.objectweb.asm.Label;)V", arg0, arg1)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.AnnotationVisitor
 * Package name: jdk.internal.org.objectweb.asm
 */
class AnnotationVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.AnnotationVisitor";
public:
    STATICINITIALIZE;

    AnnotationVisitor(jobject object) : JavaObject(object) {}

    void visit(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "visit", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    void visitEnd() { (*javaClass->invokeMethod<void>(this->object, "visitEnd", "()V", )); }

    AnnotationVisitor visitAnnotation(String arg0, String arg1) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1)); }

    void visitEnum(String arg0, String arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "visitEnum", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    AnnotationVisitor visitArray(String arg0) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitArray", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.Label
 * Package name: jdk.internal.org.objectweb.asm
 */
class Label : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Label";
public:
    STATICINITIALIZE;

    Label(jobject object) : JavaObject(object) {}

    void put(ByteVector arg0, int arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljdk.internal.org.objectweb.asm.ByteVector;IZ)V", arg0, arg1, arg2)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool resolve(arr_B arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "resolve", "([BI)Z", arg0, arg1)); }

    void accept(MethodVisitor arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljdk.internal.org.objectweb.asm.MethodVisitor;Z)V", arg0, arg1)); }

    int getOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getOffset", "()I", )); }

    Label getCanonicalInstance() { return Label(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalInstance", "()Ljdk.internal.org.objectweb.asm.Label;", )); }

    void markSubroutine(short arg0) { (*javaClass->invokeMethod<void>(this->object, "markSubroutine", "(S)V", arg0)); }

    void addSubroutineRetSuccessors(Label arg0) { (*javaClass->invokeMethod<void>(this->object, "addSubroutineRetSuccessors", "(Ljdk.internal.org.objectweb.asm.Label;)V", arg0)); }

    void addForwardReference(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "addForwardReference", "(III)V", arg0, arg1, arg2)); }

    Label pushSuccessors(Label arg0) { return Label(*javaClass->invokeMethod<jobject>(this->object, "pushSuccessors", "(Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Label;", arg0)); }

    void addLineNumber(int arg0) { (*javaClass->invokeMethod<void>(this->object, "addLineNumber", "(I)V", arg0)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.ByteVector
 * Package name: jdk.internal.org.objectweb.asm
 */
class ByteVector : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ByteVector";
public:
    STATICINITIALIZE;

    ByteVector(jobject object) : JavaObject(object) {}

    ByteVector putByte(int arg0) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "putByte", "(I)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0)); }

    ByteVector putShort(int arg0) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "putShort", "(I)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0)); }

    ByteVector putInt(int arg0) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "putInt", "(I)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0)); }

    ByteVector putLong(long arg0) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "putLong", "(J)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0)); }

    ByteVector encodeUtf8(String arg0, int arg1, int arg2) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "encodeUtf8", "(Ljava.lang.String;II)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0, arg1, arg2)); }

    ByteVector putByteArray(arr_B arg0, int arg1, int arg2) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "putByteArray", "([BII)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0, arg1, arg2)); }

    ByteVector put122(int arg0, int arg1, int arg2) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "put122", "(III)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0, arg1, arg2)); }

    ByteVector putUTF8(String arg0) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "putUTF8", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0)); }

    ByteVector put112(int arg0, int arg1, int arg2) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "put112", "(III)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0, arg1, arg2)); }

    ByteVector put12(int arg0, int arg1) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "put12", "(II)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0, arg1)); }

    void enlarge(int arg0) { (*javaClass->invokeMethod<void>(this->object, "enlarge", "(I)V", arg0)); }

    ByteVector put11(int arg0, int arg1) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "put11", "(II)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0, arg1)); }

};


/**
 * Classpath: [Ljdk.internal.org.objectweb.asm.Label;
 */
class Label_interface : public Object {
protected:
    const inline static char *className = "[Ljdk.internal.org.objectweb.asm.Label;";
public:
    STATICINITIALIZE;

    Label_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.TypePath
 * Package name: jdk.internal.org.objectweb.asm
 */
class TypePath : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.TypePath";
public:
    STATICINITIALIZE;

    TypePath(jobject object) : JavaObject(object) {}

    static TypePath fromString(String arg0) { return TypePath(*javaClass->invokeStaticMethod<jobject>(this->object, "fromString", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.TypePath;", arg0)); }

    static void put(TypePath arg0, ByteVector arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "put", "(Ljdk.internal.org.objectweb.asm.TypePath;Ljdk.internal.org.objectweb.asm.ByteVector;)V", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int getLength() { return int(*javaClass->invokeMethod<int>(this->object, "getLength", "()I", )); }

    int getStep(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getStep", "(I)I", arg0)); }

    int getStepArgument(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getStepArgument", "(I)I", arg0)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.Attribute
 * Package name: jdk.internal.org.objectweb.asm
 */
class Attribute : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Attribute";
public:
    STATICINITIALIZE;

    Attribute(jobject object) : JavaObject(object) {}

    ByteVector write(ClassWriter arg0, arr_B arg1, int arg2, int arg3, int arg4) { return ByteVector(*javaClass->invokeMethod<jobject>(this->object, "write", "(Ljdk.internal.org.objectweb.asm.ClassWriter;[BIII)Ljdk.internal.org.objectweb.asm.ByteVector;", arg0, arg1, arg2, arg3, arg4)); }

    Attribute read(ClassReader arg0, int arg1, int arg2, arr_C arg3, int arg4, Label_interface arg5) { return Attribute(*javaClass->invokeMethod<jobject>(this->object, "read", "(Ljdk.internal.org.objectweb.asm.ClassReader;II[CI[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Attribute;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    int getAttributeCount() { return int(*javaClass->invokeMethod<int>(this->object, "getAttributeCount", "()I", )); }

    int computeAttributesSize(SymbolTable arg0) { return int(*javaClass->invokeMethod<int>(this->object, "computeAttributesSize", "(Ljdk.internal.org.objectweb.asm.SymbolTable;)I", arg0)); }

    static int computeAttributesSize(SymbolTable arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "computeAttributesSize", "(Ljdk.internal.org.objectweb.asm.SymbolTable;II)I", arg0, arg1, arg2)); }

    int computeAttributesSize(SymbolTable arg0, arr_B arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeMethod<int>(this->object, "computeAttributesSize", "(Ljdk.internal.org.objectweb.asm.SymbolTable;[BIII)I", arg0, arg1, arg2, arg3, arg4)); }

    void putAttributes(SymbolTable arg0, arr_B arg1, int arg2, int arg3, int arg4, ByteVector arg5) { (*javaClass->invokeMethod<void>(this->object, "putAttributes", "(Ljdk.internal.org.objectweb.asm.SymbolTable;[BIIILjdk.internal.org.objectweb.asm.ByteVector;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void putAttributes(SymbolTable arg0, ByteVector arg1) { (*javaClass->invokeMethod<void>(this->object, "putAttributes", "(Ljdk.internal.org.objectweb.asm.SymbolTable;Ljdk.internal.org.objectweb.asm.ByteVector;)V", arg0, arg1)); }

    static void putAttributes(SymbolTable arg0, int arg1, int arg2, ByteVector arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "putAttributes", "(Ljdk.internal.org.objectweb.asm.SymbolTable;IILjdk.internal.org.objectweb.asm.ByteVector;)V", arg0, arg1, arg2, arg3)); }

    bool isCodeAttribute() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCodeAttribute", "()Z", )); }

    bool isUnknown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUnknown", "()Z", )); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.FieldVisitor
 * Package name: jdk.internal.org.objectweb.asm
 */
class FieldVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.FieldVisitor";
public:
    STATICINITIALIZE;

    FieldVisitor(jobject object) : JavaObject(object) {}

    void visitEnd() { (*javaClass->invokeMethod<void>(this->object, "visitEnd", "()V", )); }

    AnnotationVisitor visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1)); }

    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3)); }

    void visitAttribute(Attribute arg0) { (*javaClass->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk.internal.org.objectweb.asm.Attribute;)V", arg0)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.ModuleVisitor
 * Package name: jdk.internal.org.objectweb.asm
 */
class ModuleVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ModuleVisitor";
public:
    STATICINITIALIZE;

    ModuleVisitor(jobject object) : JavaObject(object) {}

    void visitEnd() { (*javaClass->invokeMethod<void>(this->object, "visitEnd", "()V", )); }

    void visitMainClass(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitMainClass", "(Ljava.lang.String;)V", arg0)); }

    void visitPackage(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitPackage", "(Ljava.lang.String;)V", arg0)); }

    void visitRequire(String arg0, int arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "visitRequire", "(Ljava.lang.String;ILjava.lang.String;)V", arg0, arg1, arg2)); }

    void visitExport(String arg0, int arg1, String_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "visitExport", "(Ljava.lang.String;I[Ljava.lang.String;)V", arg0, arg1, arg2)); }

    void visitOpen(String arg0, int arg1, String_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "visitOpen", "(Ljava.lang.String;I[Ljava.lang.String;)V", arg0, arg1, arg2)); }

    void visitUse(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitUse", "(Ljava.lang.String;)V", arg0)); }

    void visitProvide(String arg0, String_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "visitProvide", "(Ljava.lang.String;[Ljava.lang.String;)V", arg0, arg1)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.RecordComponentVisitor
 * Package name: jdk.internal.org.objectweb.asm
 */
class RecordComponentVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.RecordComponentVisitor";
public:
    STATICINITIALIZE;

    RecordComponentVisitor(jobject object) : JavaObject(object) {}

    void visitEnd() { (*javaClass->invokeMethod<void>(this->object, "visitEnd", "()V", )); }

    AnnotationVisitor visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1)); }

    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3)); }

    void visitAttribute(Attribute arg0) { (*javaClass->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk.internal.org.objectweb.asm.Attribute;)V", arg0)); }

    RecordComponentVisitor getDelegate() { return RecordComponentVisitor(*javaClass->invokeMethod<jobject>(this->object, "getDelegate", "()Ljdk.internal.org.objectweb.asm.RecordComponentVisitor;", )); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.Handle
 * Package name: jdk.internal.org.objectweb.asm
 */
class Handle : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Handle";
public:
    STATICINITIALIZE;

    Handle(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isInterface() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInterface", "()Z", )); }

    int getTag() { return int(*javaClass->invokeMethod<int>(this->object, "getTag", "()I", )); }

    String getDesc() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDesc", "()Ljava.lang.String;", )); }

    String getOwner() { return String(*javaClass->invokeMethod<jobject>(this->object, "getOwner", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.ClassVisitor
 * Package name: jdk.internal.org.objectweb.asm
 */
class ClassVisitor : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ClassVisitor";
public:
    STATICINITIALIZE;

    ClassVisitor(jobject object) : JavaObject(object) {}

    void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String_interface arg5) { (*javaClass->invokeMethod<void>(this->object, "visit", "(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void visitSource(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "visitSource", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String_interface arg4) { return MethodVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitMethod", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.MethodVisitor;", arg0, arg1, arg2, arg3, arg4)); }

    void visitEnd() { (*javaClass->invokeMethod<void>(this->object, "visitEnd", "()V", )); }

    FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) { return FieldVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitField", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.FieldVisitor;", arg0, arg1, arg2, arg3, arg4)); }

    AnnotationVisitor visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1)); }

    ModuleVisitor visitModule(String arg0, int arg1, String arg2) { return ModuleVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitModule", "(Ljava.lang.String;ILjava.lang.String;)Ljdk.internal.org.objectweb.asm.ModuleVisitor;", arg0, arg1, arg2)); }

    void visitNestHost(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitNestHost", "(Ljava.lang.String;)V", arg0)); }

    void visitOuterClass(String arg0, String arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "visitOuterClass", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3)); }

    void visitAttribute(Attribute arg0) { (*javaClass->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk.internal.org.objectweb.asm.Attribute;)V", arg0)); }

    void visitNestMember(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitNestMember", "(Ljava.lang.String;)V", arg0)); }

    void visitPermittedSubclassExperimental(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitPermittedSubclassExperimental", "(Ljava.lang.String;)V", arg0)); }

    void visitInnerClass(String arg0, String arg1, String arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "visitInnerClass", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;I)V", arg0, arg1, arg2, arg3)); }

    RecordComponentVisitor visitRecordComponent(String arg0, String arg1, String arg2) { return RecordComponentVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitRecordComponent", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.RecordComponentVisitor;", arg0, arg1, arg2)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.ClassReader
 * Package name: jdk.internal.org.objectweb.asm
 */
class ClassReader : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ClassReader";
public:
    STATICINITIALIZE;

    ClassReader(jobject object) : JavaObject(object) {}

    void accept(ClassVisitor arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljdk.internal.org.objectweb.asm.ClassVisitor;I)V", arg0, arg1)); }

    void accept(ClassVisitor arg0, Attribute_interface arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljdk.internal.org.objectweb.asm.ClassVisitor;[Ljdk.internal.org.objectweb.asm.Attribute;I)V", arg0, arg1, arg2)); }

    int readInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "readInt", "(I)I", arg0)); }

    String getClassName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getClassName", "()Ljava.lang.String;", )); }

    int getItem(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getItem", "(I)I", arg0)); }

    int getItemCount() { return int(*javaClass->invokeMethod<int>(this->object, "getItemCount", "()I", )); }

    int getMaxStringLength() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxStringLength", "()I", )); }

    int readUnsignedShort(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedShort", "(I)I", arg0)); }

    String readClass(int arg0, arr_C arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "readClass", "(I[C)Ljava.lang.String;", arg0, arg1)); }

    String readUTF8(int arg0, arr_C arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "readUTF8", "(I[C)Ljava.lang.String;", arg0, arg1)); }

    long readLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "readLong", "(I)J", arg0)); }

    String readUtf(int arg0, int arg1, arr_C arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "readUtf", "(II[C)Ljava.lang.String;", arg0, arg1, arg2)); }

    String readUtf(int arg0, arr_C arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "readUtf", "(I[C)Ljava.lang.String;", arg0, arg1)); }

    int readByte(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "readByte", "(I)I", arg0)); }

    int getFirstAttributeOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getFirstAttributeOffset", "()I", )); }

    Object readConst(int arg0, arr_C arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "readConst", "(I[C)Ljava.lang.Object;", arg0, arg1)); }

    void readModuleAttributes(ClassVisitor arg0, Context arg1, int arg2, int arg3, String arg4) { (*javaClass->invokeMethod<void>(this->object, "readModuleAttributes", "(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;IILjava.lang.String;)V", arg0, arg1, arg2, arg3, arg4)); }

    int readElementValues(AnnotationVisitor arg0, int arg1, bool arg2, arr_C arg3) { return int(*javaClass->invokeMethod<int>(this->object, "readElementValues", "(Ljdk.internal.org.objectweb.asm.AnnotationVisitor;IZ[C)I", arg0, arg1, arg2, arg3)); }

    int readTypeAnnotationTarget(Context arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "readTypeAnnotationTarget", "(Ljdk.internal.org.objectweb.asm.Context;I)I", arg0, arg1)); }

    int readRecordComponent(ClassVisitor arg0, Context arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "readRecordComponent", "(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;I)I", arg0, arg1, arg2)); }

    int readField(ClassVisitor arg0, Context arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "readField", "(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;I)I", arg0, arg1, arg2)); }

    int readMethod(ClassVisitor arg0, Context arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "readMethod", "(Ljdk.internal.org.objectweb.asm.ClassVisitor;Ljdk.internal.org.objectweb.asm.Context;I)I", arg0, arg1, arg2)); }

    String readModule(int arg0, arr_C arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "readModule", "(I[C)Ljava.lang.String;", arg0, arg1)); }

    String readPackage(int arg0, arr_C arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "readPackage", "(I[C)Ljava.lang.String;", arg0, arg1)); }

    int readElementValue(AnnotationVisitor arg0, int arg1, String arg2, arr_C arg3) { return int(*javaClass->invokeMethod<int>(this->object, "readElementValue", "(Ljdk.internal.org.objectweb.asm.AnnotationVisitor;ILjava.lang.String;[C)I", arg0, arg1, arg2, arg3)); }

    void readParameterAnnotations(MethodVisitor arg0, Context arg1, int arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "readParameterAnnotations", "(Ljdk.internal.org.objectweb.asm.MethodVisitor;Ljdk.internal.org.objectweb.asm.Context;IZ)V", arg0, arg1, arg2, arg3)); }

    void readCode(MethodVisitor arg0, Context arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "readCode", "(Ljdk.internal.org.objectweb.asm.MethodVisitor;Ljdk.internal.org.objectweb.asm.Context;I)V", arg0, arg1, arg2)); }

    Label createLabel(int arg0, Label_interface arg1) { return Label(*javaClass->invokeMethod<jobject>(this->object, "createLabel", "(I[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Label;", arg0, arg1)); }

    void createDebugLabel(int arg0, Label_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "createDebugLabel", "(I[Ljdk.internal.org.objectweb.asm.Label;)V", arg0, arg1)); }

    void computeImplicitFrame(Context arg0) { (*javaClass->invokeMethod<void>(this->object, "computeImplicitFrame", "(Ljdk.internal.org.objectweb.asm.Context;)V", arg0)); }

    int getTypeAnnotationBytecodeOffset(arr_I arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getTypeAnnotationBytecodeOffset", "([II)I", arg0, arg1)); }

    int readStackMapFrame(int arg0, bool arg1, bool arg2, Context arg3) { return int(*javaClass->invokeMethod<int>(this->object, "readStackMapFrame", "(IZZLjdk.internal.org.objectweb.asm.Context;)I", arg0, arg1, arg2, arg3)); }

    Label readLabel(int arg0, Label_interface arg1) { return Label(*javaClass->invokeMethod<jobject>(this->object, "readLabel", "(I[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Label;", arg0, arg1)); }

    int readVerificationTypeInfo(int arg0, Object_interface arg1, int arg2, arr_C arg3, Label_interface arg4) { return int(*javaClass->invokeMethod<int>(this->object, "readVerificationTypeInfo", "(I[Ljava.lang.Object;I[C[Ljdk.internal.org.objectweb.asm.Label;)I", arg0, arg1, arg2, arg3, arg4)); }

    String readStringish(int arg0, arr_C arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "readStringish", "(I[C)Ljava.lang.String;", arg0, arg1)); }

    ConstantDynamic readConstantDynamic(int arg0, arr_C arg1) { return ConstantDynamic(*javaClass->invokeMethod<jobject>(this->object, "readConstantDynamic", "(I[C)Ljdk.internal.org.objectweb.asm.ConstantDynamic;", arg0, arg1)); }

    int getAccess() { return int(*javaClass->invokeMethod<int>(this->object, "getAccess", "()I", )); }

    String getSuperName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSuperName", "()Ljava.lang.String;", )); }

    short readShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "readShort", "(I)S", arg0)); }

    Attribute readAttribute(Attribute_interface arg0, String arg1, int arg2, int arg3, arr_C arg4, int arg5, Label_interface arg6) { return Attribute(*javaClass->invokeMethod<jobject>(this->object, "readAttribute", "([Ljdk.internal.org.objectweb.asm.Attribute;Ljava.lang.String;II[CI[Ljdk.internal.org.objectweb.asm.Label;)Ljdk.internal.org.objectweb.asm.Attribute;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

};


/**
 * Classpath: [Ljdk.internal.org.objectweb.asm.Attribute;
 */
class Attribute_interface : public Object {
protected:
    const inline static char *className = "[Ljdk.internal.org.objectweb.asm.Attribute;";
public:
    STATICINITIALIZE;

    Attribute_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.Context
 * Package name: jdk.internal.org.objectweb.asm
 */
class Context : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Context";
public:
    STATICINITIALIZE;

    Context(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.ConstantDynamic
 * Package name: jdk.internal.org.objectweb.asm
 */
class ConstantDynamic : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ConstantDynamic";
public:
    STATICINITIALIZE;

    ConstantDynamic(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    String getDescriptor() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDescriptor", "()Ljava.lang.String;", )); }

    int getSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSize", "()I", )); }

    Handle getBootstrapMethod() { return Handle(*javaClass->invokeMethod<jobject>(this->object, "getBootstrapMethod", "()Ljdk.internal.org.objectweb.asm.Handle;", )); }

    int getBootstrapMethodArgumentCount() { return int(*javaClass->invokeMethod<int>(this->object, "getBootstrapMethodArgumentCount", "()I", )); }

    Object getBootstrapMethodArgument(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getBootstrapMethodArgument", "(I)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.SymbolTable
 * Package name: jdk.internal.org.objectweb.asm
 */
class SymbolTable : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.SymbolTable";
public:
    STATICINITIALIZE;

    SymbolTable(jobject object) : JavaObject(object) {}

    void add(SymbolTable_Entry arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;)V", arg0)); }

    SymbolTable_Entry get(int arg0) { return SymbolTable_Entry(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;", arg0)); }

    SymbolTable_Entry put(SymbolTable_Entry arg0) { return SymbolTable_Entry(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;)Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;", arg0)); }

    static int hash(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(II)I", arg0, arg1)); }

    static int hash(int arg0, String arg1, String arg2, String arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;I)I", arg0, arg1, arg2, arg3, arg4)); }

    static int hash(int arg0, String arg1, String arg2, String arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)I", arg0, arg1, arg2, arg3)); }

    static int hash(int arg0, String arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(ILjava.lang.String;)I", arg0, arg1)); }

    static int hash(int arg0, String arg1, String arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(ILjava.lang.String;Ljava.lang.String;)I", arg0, arg1, arg2)); }

    static int hash(int arg0, String arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(ILjava.lang.String;I)I", arg0, arg1, arg2)); }

    static int hash(int arg0, String arg1, String arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(ILjava.lang.String;Ljava.lang.String;I)I", arg0, arg1, arg2, arg3)); }

    static int hash(int arg0, long arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hash", "(IJ)I", arg0, arg1)); }

    Symbol getType(int arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "getType", "(I)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    String getClassName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getClassName", "()Ljava.lang.String;", )); }

    int setMajorVersionAndClassName(int arg0, String arg1) { return int(*javaClass->invokeMethod<int>(this->object, "setMajorVersionAndClassName", "(ILjava.lang.String;)I", arg0, arg1)); }

    int addConstantUtf8(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "addConstantUtf8", "(Ljava.lang.String;)I", arg0)); }

    void addConstantUtf8(int arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "addConstantUtf8", "(ILjava.lang.String;)V", arg0, arg1)); }

    Symbol addConstantClass(String arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantClass", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addConstantModule(String arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantModule", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    void addConstantNameAndType(int arg0, String arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "addConstantNameAndType", "(ILjava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    int addConstantNameAndType(String arg0, String arg1) { return int(*javaClass->invokeMethod<int>(this->object, "addConstantNameAndType", "(Ljava.lang.String;Ljava.lang.String;)I", arg0, arg1)); }

    int computeBootstrapMethodsSize() { return int(*javaClass->invokeMethod<int>(this->object, "computeBootstrapMethodsSize", "()I", )); }

    int getConstantPoolLength() { return int(*javaClass->invokeMethod<int>(this->object, "getConstantPoolLength", "()I", )); }

    int getConstantPoolCount() { return int(*javaClass->invokeMethod<int>(this->object, "getConstantPoolCount", "()I", )); }

    void putConstantPool(ByteVector arg0) { (*javaClass->invokeMethod<void>(this->object, "putConstantPool", "(Ljdk.internal.org.objectweb.asm.ByteVector;)V", arg0)); }

    void putBootstrapMethods(ByteVector arg0) { (*javaClass->invokeMethod<void>(this->object, "putBootstrapMethods", "(Ljdk.internal.org.objectweb.asm.ByteVector;)V", arg0)); }

    Symbol addConstant(Object arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstant", "(Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addConstantMethodType(String arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantMethodType", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addConstantPackage(String arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantPackage", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    void addConstantMethodHandle(int arg0, int arg1, String arg2, String arg3, String arg4) { (*javaClass->invokeMethod<void>(this->object, "addConstantMethodHandle", "(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4)); }

    Symbol addConstantMethodHandle(int arg0, String arg1, String arg2, String arg3, bool arg4) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantMethodHandle", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1, arg2, arg3, arg4)); }

    Symbol addConstantDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantDynamic", "(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1, arg2, arg3)); }

    Symbol addConstantInvokeDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantInvokeDynamic", "(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1, arg2, arg3)); }

    Symbol addConstantFieldref(String arg0, String arg1, String arg2) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantFieldref", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1, arg2)); }

    Symbol addConstantMethodref(String arg0, String arg1, String arg2, bool arg3) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantMethodref", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1, arg2, arg3)); }

    SymbolTable_Entry addConstantMemberReference(int arg0, String arg1, String arg2, String arg3) { return SymbolTable_Entry(*javaClass->invokeMethod<jobject>(this->object, "addConstantMemberReference", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;", arg0, arg1, arg2, arg3)); }

    void addConstantMemberReference(int arg0, int arg1, String arg2, String arg3, String arg4) { (*javaClass->invokeMethod<void>(this->object, "addConstantMemberReference", "(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4)); }

    Symbol addConstantIntegerOrFloat(int arg0, int arg1) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantIntegerOrFloat", "(II)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1)); }

    void addConstantIntegerOrFloat(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "addConstantIntegerOrFloat", "(III)V", arg0, arg1, arg2)); }

    Symbol addConstantLongOrDouble(int arg0, long arg1) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantLongOrDouble", "(IJ)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1)); }

    void addConstantLongOrDouble(int arg0, int arg1, long arg2) { (*javaClass->invokeMethod<void>(this->object, "addConstantLongOrDouble", "(IIJ)V", arg0, arg1, arg2)); }

    void addConstantDynamicOrInvokeDynamicReference(int arg0, int arg1, String arg2, String arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "addConstantDynamicOrInvokeDynamicReference", "(IILjava.lang.String;Ljava.lang.String;I)V", arg0, arg1, arg2, arg3, arg4)); }

    Symbol addConstantDynamicOrInvokeDynamicReference(int arg0, String arg1, String arg2, int arg3) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantDynamicOrInvokeDynamicReference", "(ILjava.lang.String;Ljava.lang.String;I)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1, arg2, arg3)); }

    void addConstantUtf8Reference(int arg0, int arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "addConstantUtf8Reference", "(IILjava.lang.String;)V", arg0, arg1, arg2)); }

    Symbol addConstantUtf8Reference(int arg0, String arg1) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantUtf8Reference", "(ILjava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1)); }

    void copyBootstrapMethods(ClassReader arg0, arr_C arg1) { (*javaClass->invokeMethod<void>(this->object, "copyBootstrapMethods", "(Ljdk.internal.org.objectweb.asm.ClassReader;[C)V", arg0, arg1)); }

    Symbol addConstantInteger(int arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantInteger", "(I)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addConstantFloat(float arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantFloat", "(F)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addConstantLong(long arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantLong", "(J)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addConstantDouble(double arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantDouble", "(D)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addConstantString(String arg0) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addConstantString", "(Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0)); }

    Symbol addBootstrapMethod(Handle arg0, Object_interface arg1) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addBootstrapMethod", "(Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1)); }

    Symbol addBootstrapMethod(int arg0, int arg1, int arg2) { return Symbol(*javaClass->invokeMethod<jobject>(this->object, "addBootstrapMethod", "(III)Ljdk.internal.org.objectweb.asm.Symbol;", arg0, arg1, arg2)); }

    int addTypeInternal(SymbolTable_Entry arg0) { return int(*javaClass->invokeMethod<int>(this->object, "addTypeInternal", "(Ljdk.internal.org.objectweb.asm.SymbolTable$Entry;)I", arg0)); }

    int addType(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "addType", "(Ljava.lang.String;)I", arg0)); }

    ClassReader getSource() { return ClassReader(*javaClass->invokeMethod<jobject>(this->object, "getSource", "()Ljdk.internal.org.objectweb.asm.ClassReader;", )); }

    int getMajorVersion() { return int(*javaClass->invokeMethod<int>(this->object, "getMajorVersion", "()I", )); }

    int addUninitializedType(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "addUninitializedType", "(Ljava.lang.String;I)I", arg0, arg1)); }

    int addMergedType(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "addMergedType", "(II)I", arg0, arg1)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.Symbol
 * Package name: jdk.internal.org.objectweb.asm
 */
class Symbol : public Object {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.Symbol";
public:
    STATICINITIALIZE;

    Symbol(jobject object) : JavaObject(object) {}

    int getArgumentsAndReturnSizes() { return int(*javaClass->invokeMethod<int>(this->object, "getArgumentsAndReturnSizes", "()I", )); }

};


/**
 * Classpath: java.lang.invoke.LambdaFormEditor$TransformKey
 * Enclosing class: java.lang.invoke.LambdaFormEditor
 * Package name: java.lang.invoke
 */
class LambdaFormEditor_TransformKey : public Object {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormEditor$TransformKey";
public:
    STATICINITIALIZE;

    LambdaFormEditor_TransformKey(jobject object) : JavaObject(object) {}

    bool equals(LambdaFormEditor_Transform arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.LambdaFormEditor$Transform;)Z", arg0)); }

    bool equals(LambdaFormEditor_TransformKey arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.LambdaFormEditor$TransformKey;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static LambdaFormEditor_TransformKey of(byte arg0, int arg1) { return LambdaFormEditor_TransformKey(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(BI)Ljava.lang.invoke.LambdaFormEditor$TransformKey;", arg0, arg1)); }

    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, int arg2) { return LambdaFormEditor_TransformKey(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(BII)Ljava.lang.invoke.LambdaFormEditor$TransformKey;", arg0, arg1, arg2)); }

    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, int arg2, int arg3) { return LambdaFormEditor_TransformKey(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(BIII)Ljava.lang.invoke.LambdaFormEditor$TransformKey;", arg0, arg1, arg2, arg3)); }

    static LambdaFormEditor_TransformKey of(byte arg0, arr_I arg1) { return LambdaFormEditor_TransformKey(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(B[I)Ljava.lang.invoke.LambdaFormEditor$TransformKey;", arg0, arg1)); }

    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, arr_I arg2) { return LambdaFormEditor_TransformKey(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(BI[I)Ljava.lang.invoke.LambdaFormEditor$TransformKey;", arg0, arg1, arg2)); }

    static LambdaFormEditor_TransformKey of(byte arg0, int arg1, int arg2, arr_B arg3) { return LambdaFormEditor_TransformKey(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(BII[B)Ljava.lang.invoke.LambdaFormEditor$TransformKey;", arg0, arg1, arg2, arg3)); }

    LambdaFormEditor_Transform withResult(LambdaForm arg0) { return LambdaFormEditor_Transform(*javaClass->invokeMethod<jobject>(this->object, "withResult", "(Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.LambdaFormEditor$Transform;", arg0)); }

    static long packedBytes(int arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "packedBytes", "(II)J", arg0, arg1)); }

    static long packedBytes(int arg0, int arg1, int arg2, int arg3) { return long(*javaClass->invokeStaticMethod<long>(this->object, "packedBytes", "(IIII)J", arg0, arg1, arg2, arg3)); }

    static long packedBytes(arr_B arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "packedBytes", "([B)J", arg0)); }

    static long packedBytes(int arg0, int arg1, int arg2) { return long(*javaClass->invokeStaticMethod<long>(this->object, "packedBytes", "(III)J", arg0, arg1, arg2)); }

    static byte bval(int arg0) { return byte(*javaClass->invokeStaticMethod<byte>(this->object, "bval", "(I)B", arg0)); }

    static bool inRange(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "inRange", "(I)Z", arg0)); }

    static LambdaFormEditor_TransformKey ofBothArrays(byte arg0, arr_I arg1, arr_B arg2) { return LambdaFormEditor_TransformKey(*javaClass->invokeStaticMethod<jobject>(this->object, "ofBothArrays", "(B[I[B)Ljava.lang.invoke.LambdaFormEditor$TransformKey;", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.lang.ref.SoftReference
 * Package name: java.lang.ref
 */
class SoftReference : public Reference {
protected:
    const inline static char *className = "java.lang.ref.SoftReference";
public:
    STATICINITIALIZE;

    SoftReference(jobject object) : JavaObject(object) {}

    Object get() { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: [Ljava.lang.invoke.LambdaForm$BasicType;
 */
class LambdaForm_BasicType_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.invoke.LambdaForm$BasicType;";
public:
    STATICINITIALIZE;

    LambdaForm_BasicType_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.perf.PerfCounter
 * Package name: jdk.internal.perf
 */
class PerfCounter : public Object {
protected:
    const inline static char *className = "jdk.internal.perf.PerfCounter";
public:
    STATICINITIALIZE;

    PerfCounter(jobject object) : JavaObject(object) {}

    void add(long arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(J)V", arg0)); }

    long get() { return long(*javaClass->invokeMethod<long>(this->object, "get", "()J", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static PerfCounter getParentDelegationTime() { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "getParentDelegationTime", "()Ljdk.internal.perf.PerfCounter;", )); }

    void addTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "addTime", "(J)V", arg0)); }

    static PerfCounter getFindClassTime() { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "getFindClassTime", "()Ljdk.internal.perf.PerfCounter;", )); }

    void addElapsedTimeFrom(long arg0) { (*javaClass->invokeMethod<void>(this->object, "addElapsedTimeFrom", "(J)V", arg0)); }

    static PerfCounter getFindClasses() { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "getFindClasses", "()Ljdk.internal.perf.PerfCounter;", )); }

    void increment() { (*javaClass->invokeMethod<void>(this->object, "increment", "()V", )); }

    void set(long arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(J)V", arg0)); }

    static PerfCounter newPerfCounter(String arg0) { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "newPerfCounter", "(Ljava.lang.String;)Ljdk.internal.perf.PerfCounter;", arg0)); }

    static PerfCounter getZipFileOpenTime() { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "getZipFileOpenTime", "()Ljdk.internal.perf.PerfCounter;", )); }

    static PerfCounter getZipFileCount() { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "getZipFileCount", "()Ljdk.internal.perf.PerfCounter;", )); }

    static PerfCounter newConstantPerfCounter(String arg0) { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "newConstantPerfCounter", "(Ljava.lang.String;)Ljdk.internal.perf.PerfCounter;", arg0)); }

    static PerfCounter getReadClassBytesTime() { return PerfCounter(*javaClass->invokeStaticMethod<jobject>(this->object, "getReadClassBytesTime", "()Ljdk.internal.perf.PerfCounter;", )); }

};


/**
 * Classpath: java.lang.invoke.Invokers
 * Package name: java.lang.invoke
 */
class Invokers : public Object {
protected:
    const inline static char *className = "java.lang.invoke.Invokers";
public:
    STATICINITIALIZE;

    Invokers(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static LambdaForm_NamedFunction getFunction(byte arg0) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "getFunction", "(B)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0)); }

    static LambdaForm_NamedFunction createFunction(byte arg0) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "createFunction", "(B)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0)); }

    static LambdaForm_NamedFunction getNamedFunction(String arg0, MethodType arg1) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "getNamedFunction", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0, arg1)); }

    MethodHandle spreadInvoker(int arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "spreadInvoker", "(I)Ljava.lang.invoke.MethodHandle;", arg0)); }

    static void maybeCustomize(MethodHandle arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "maybeCustomize", "(Ljava.lang.invoke.MethodHandle;)V", arg0)); }

    static MemberName linkToTargetMethod(MethodType arg0) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "linkToTargetMethod", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0)); }

    static MemberName linkToCallSiteMethod(MethodType arg0) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "linkToCallSiteMethod", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0)); }

    static MemberName methodHandleInvokeLinkerMethod(String arg0, MethodType arg1, Object_interface arg2) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "methodHandleInvokeLinkerMethod", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;[Ljava.lang.Object;)Ljava.lang.invoke.MemberName;", arg0, arg1, arg2)); }

    static MemberName varHandleInvokeLinkerMethod(MethodType arg0) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "varHandleInvokeLinkerMethod", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0)); }

    MethodHandle exactInvoker() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "exactInvoker", "()Ljava.lang.invoke.MethodHandle;", )); }

    MethodHandle genericInvoker() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "genericInvoker", "()Ljava.lang.invoke.MethodHandle;", )); }

    MethodHandle varHandleMethodExactInvoker(VarHandle_AccessMode arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "varHandleMethodExactInvoker", "(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle varHandleMethodInvoker(VarHandle_AccessMode arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "varHandleMethodInvoker", "(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle basicInvoker() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "basicInvoker", "()Ljava.lang.invoke.MethodHandle;", )); }

    static MemberName invokeBasicMethod(MethodType arg0) { return MemberName(*javaClass->invokeStaticMethod<jobject>(this->object, "invokeBasicMethod", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MemberName;", arg0)); }

    MethodHandle cachedInvoker(int arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "cachedInvoker", "(I)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle makeExactOrGeneralInvoker(bool arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "makeExactOrGeneralInvoker", "(Z)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle setCachedInvoker(int arg0, MethodHandle arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "setCachedInvoker", "(ILjava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    bool checkInvoker(MethodHandle arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkInvoker", "(Ljava.lang.invoke.MethodHandle;)Z", arg0)); }

    MethodHandle cachedVHInvoker(bool arg0, VarHandle_AccessMode arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "cachedVHInvoker", "(ZLjava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle makeVarHandleMethodInvoker(VarHandle_AccessMode arg0, bool arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "makeVarHandleMethodInvoker", "(Ljava.lang.invoke.VarHandle$AccessMode;Z)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle setCachedVHInvoker(bool arg0, VarHandle_AccessMode arg1, MethodHandle arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "setCachedVHInvoker", "(ZLjava.lang.invoke.VarHandle$AccessMode;Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    static LambdaForm invokeHandleForm(MethodType arg0, bool arg1, int arg2) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "invokeHandleForm", "(Ljava.lang.invoke.MethodType;ZI)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2)); }

    void maybeCompileToBytecode(MethodHandle arg0) { (*javaClass->invokeMethod<void>(this->object, "maybeCompileToBytecode", "(Ljava.lang.invoke.MethodHandle;)V", arg0)); }

    static LambdaForm varHandleMethodInvokerHandleForm(MethodType arg0, bool arg1) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "varHandleMethodInvokerHandleForm", "(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    bool checkVarHandleInvoker(MethodHandle arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkVarHandleInvoker", "(Ljava.lang.invoke.MethodHandle;)Z", arg0)); }

    static Class impliedRestargType(MethodType arg0, int arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "impliedRestargType", "(Ljava.lang.invoke.MethodType;I)Ljava.lang.Class;", arg0, arg1)); }

    static LambdaForm varHandleMethodGenericLinkerHandleForm(MethodType arg0) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "varHandleMethodGenericLinkerHandleForm", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    static WrongMethodTypeException newWrongMethodTypeException(MethodType arg0, MethodType arg1) { return WrongMethodTypeException(*javaClass->invokeStaticMethod<jobject>(this->object, "newWrongMethodTypeException", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.WrongMethodTypeException;", arg0, arg1)); }

    static LambdaForm callSiteForm(MethodType arg0, bool arg1) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "callSiteForm", "(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    static void checkExactType(MethodHandle arg0, MethodType arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkExactType", "(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;)V", arg0, arg1)); }

    static MethodHandle checkGenericType(MethodHandle arg0, MethodType arg1) { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "checkGenericType", "(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    static MethodHandle getCallSiteTarget(CallSite arg0) { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "getCallSiteTarget", "(Ljava.lang.invoke.CallSite;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    static void checkCustomized(MethodHandle arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "checkCustomized", "(Ljava.lang.invoke.MethodHandle;)V", arg0)); }

    static MethodHandle checkVarHandleGenericType(VarHandle arg0, VarHandle_AccessDescriptor arg1) { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "checkVarHandleGenericType", "(Ljava.lang.invoke.VarHandle;Ljava.lang.invoke.VarHandle$AccessDescriptor;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    static MethodHandle checkVarHandleExactType(VarHandle arg0, VarHandle_AccessDescriptor arg1) { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "checkVarHandleExactType", "(Ljava.lang.invoke.VarHandle;Ljava.lang.invoke.VarHandle$AccessDescriptor;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    static VarHandle directVarHandleTarget(VarHandle arg0) { return VarHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "directVarHandleTarget", "(Ljava.lang.invoke.VarHandle;)Ljava.lang.invoke.VarHandle;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.VarHandle$AccessMode
 * Enclosing class: java.lang.invoke.VarHandle
 * Package name: java.lang.invoke
 */
class VarHandle_AccessMode : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$AccessMode";
public:
    STATICINITIALIZE;

    VarHandle_AccessMode(jobject object) : JavaObject(object) {}

    String methodName() { return String(*javaClass->invokeMethod<jobject>(this->object, "methodName", "()Ljava.lang.String;", )); }

    static VarHandle_AccessMode valueOf(String arg0) { return VarHandle_AccessMode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.invoke.VarHandle$AccessMode;", arg0)); }

    static VarHandle_AccessMode valueFromMethodName(String arg0) { return VarHandle_AccessMode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueFromMethodName", "(Ljava.lang.String;)Ljava.lang.invoke.VarHandle$AccessMode;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.CallSite
 * Package name: java.lang.invoke
 */
class CallSite : public Object {
protected:
    const inline static char *className = "java.lang.invoke.CallSite";
public:
    STATICINITIALIZE;

    CallSite(jobject object) : JavaObject(object) {}

    void setTargetNormal(MethodHandle arg0) { (*javaClass->invokeMethod<void>(this->object, "setTargetNormal", "(Ljava.lang.invoke.MethodHandle;)V", arg0)); }

    void setTargetVolatile(MethodHandle arg0) { (*javaClass->invokeMethod<void>(this->object, "setTargetVolatile", "(Ljava.lang.invoke.MethodHandle;)V", arg0)); }

    MethodType type() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "type", "()Ljava.lang.invoke.MethodType;", )); }

    static CallSite makeSite(MethodHandle arg0, String arg1, MethodType arg2, Object arg3, Class arg4) { return CallSite(*javaClass->invokeStaticMethod<jobject>(this->object, "makeSite", "(Ljava.lang.invoke.MethodHandle;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.invoke.CallSite;", arg0, arg1, arg2, arg3, arg4)); }

    MethodHandle dynamicInvoker() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "dynamicInvoker", "()Ljava.lang.invoke.MethodHandle;", )); }

    MethodHandle makeUninitializedCallSite(MethodType arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "makeUninitializedCallSite", "(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    static WrongMethodTypeException wrongTargetType(MethodHandle arg0, MethodType arg1) { return WrongMethodTypeException(*javaClass->invokeStaticMethod<jobject>(this->object, "wrongTargetType", "(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.WrongMethodTypeException;", arg0, arg1)); }

    static MethodHandle getTargetHandle() { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "getTargetHandle", "()Ljava.lang.invoke.MethodHandle;", )); }

    MethodHandle getTarget() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getTarget", "()Ljava.lang.invoke.MethodHandle;", )); }

    static Object uninitializedCallSite(Object_interface arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "uninitializedCallSite", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static MethodHandle uninitializedCallSiteHandle() { return MethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "uninitializedCallSiteHandle", "()Ljava.lang.invoke.MethodHandle;", )); }

    void checkTargetChange(MethodHandle arg0) { (*javaClass->invokeMethod<void>(this->object, "checkTargetChange", "(Ljava.lang.invoke.MethodHandle;)V", arg0)); }

    static long getTargetOffset() { return long(*javaClass->invokeStaticMethod<long>(this->object, "getTargetOffset", "()J", )); }

    void setTarget(MethodHandle arg0) { (*javaClass->invokeMethod<void>(this->object, "setTarget", "(Ljava.lang.invoke.MethodHandle;)V", arg0)); }

    MethodHandle makeDynamicInvoker() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "makeDynamicInvoker", "()Ljava.lang.invoke.MethodHandle;", )); }

    MethodHandle getTargetVolatile() { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getTargetVolatile", "()Ljava.lang.invoke.MethodHandle;", )); }

};


/**
 * Classpath: java.lang.invoke.VarHandle
 * Package name: java.lang.invoke
 */
class VarHandle : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle";
public:
    STATICINITIALIZE;

    VarHandle(jobject object) : JavaObject(object) {}

    Object get(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    VarHandle target() { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "target", "()Ljava.lang.invoke.VarHandle;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static void fullFence() { (*javaClass->invokeStaticMethod<void>(this->object, "fullFence", "()V", )); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    void set(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "([Ljava.lang.Object;)V", arg0)); }

    Class varType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "varType", "()Ljava.lang.Class;", )); }

    List coordinateTypes() { return List(*javaClass->invokeMethod<jobject>(this->object, "coordinateTypes", "()Ljava.util.List;", )); }

    MethodType accessModeType(VarHandle_AccessMode arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "accessModeType", "(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodType;", arg0)); }

    MethodType accessModeType(int arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "accessModeType", "(I)Ljava.lang.invoke.MethodType;", arg0)); }

    void throwWrongMethodTypeException(VarHandle_AccessDescriptor arg0) { (*javaClass->invokeMethod<void>(this->object, "throwWrongMethodTypeException", "(Ljava.lang.invoke.VarHandle$AccessDescriptor;)V", arg0)); }

    VarHandle_TypesAndInvokers getTypesAndInvokers() { return VarHandle_TypesAndInvokers(*javaClass->invokeMethod<jobject>(this->object, "getTypesAndInvokers", "()Ljava.lang.invoke.VarHandle$TypesAndInvokers;", )); }

    MethodType accessModeTypeUncached(VarHandle_AccessType arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "accessModeTypeUncached", "(Ljava.lang.invoke.VarHandle$AccessType;)Ljava.lang.invoke.MethodType;", arg0)); }

    MethodType accessModeTypeUncached(int arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "accessModeTypeUncached", "(I)Ljava.lang.invoke.MethodType;", arg0)); }

    bool isAccessModeSupported(VarHandle_AccessMode arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessModeSupported", "(Ljava.lang.invoke.VarHandle$AccessMode;)Z", arg0)); }

    MethodHandle getMethodHandle(int arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getMethodHandle", "(I)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle getMethodHandleUncached(int arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getMethodHandleUncached", "(I)Ljava.lang.invoke.MethodHandle;", arg0)); }

    static void loadLoadFence() { (*javaClass->invokeStaticMethod<void>(this->object, "loadLoadFence", "()V", )); }

    static void storeStoreFence() { (*javaClass->invokeStaticMethod<void>(this->object, "storeStoreFence", "()V", )); }

    RuntimeException unsupported() { return RuntimeException(*javaClass->invokeMethod<jobject>(this->object, "unsupported", "()Ljava.lang.RuntimeException;", )); }

    VarHandle asDirect() { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "asDirect", "()Ljava.lang.invoke.VarHandle;", )); }

    bool hasInvokeExactBehavior() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasInvokeExactBehavior", "()Z", )); }

    Object getVolatile(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getVolatile", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    void setVolatile(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setVolatile", "([Ljava.lang.Object;)V", arg0)); }

    Object getOpaque(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOpaque", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    void setOpaque(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpaque", "([Ljava.lang.Object;)V", arg0)); }

    Object getAcquire(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAcquire", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    void setRelease(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setRelease", "([Ljava.lang.Object;)V", arg0)); }

    bool compareAndSet(Object_interface arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "compareAndSet", "([Ljava.lang.Object;)Z", arg0)); }

    Object compareAndExchange(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compareAndExchange", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object compareAndExchangeAcquire(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compareAndExchangeAcquire", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object compareAndExchangeRelease(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compareAndExchangeRelease", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool weakCompareAndSetPlain(Object_interface arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSetPlain", "([Ljava.lang.Object;)Z", arg0)); }

    bool weakCompareAndSet(Object_interface arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSet", "([Ljava.lang.Object;)Z", arg0)); }

    bool weakCompareAndSetAcquire(Object_interface arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSetAcquire", "([Ljava.lang.Object;)Z", arg0)); }

    bool weakCompareAndSetRelease(Object_interface arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSetRelease", "([Ljava.lang.Object;)Z", arg0)); }

    Object getAndSet(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndSet", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndSetAcquire(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndSetAcquire", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndSetRelease(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndSetRelease", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndAdd(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndAdd", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndAddAcquire(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndAddAcquire", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndAddRelease(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndAddRelease", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseOr(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseOr", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseOrAcquire(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseOrAcquire", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseOrRelease(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseOrRelease", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseAnd(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseAnd", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseAndAcquire(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseAndAcquire", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseAndRelease(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseAndRelease", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseXor(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseXor", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseXorAcquire(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseXorAcquire", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object getAndBitwiseXorRelease(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAndBitwiseXorRelease", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    VarHandle withInvokeExactBehavior() { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "withInvokeExactBehavior", "()Ljava.lang.invoke.VarHandle;", )); }

    VarHandle withInvokeBehavior() { return VarHandle(*javaClass->invokeMethod<jobject>(this->object, "withInvokeBehavior", "()Ljava.lang.invoke.VarHandle;", )); }

    void checkExactAccessMode(VarHandle_AccessDescriptor arg0) { (*javaClass->invokeMethod<void>(this->object, "checkExactAccessMode", "(Ljava.lang.invoke.VarHandle$AccessDescriptor;)V", arg0)); }

    MethodHandle toMethodHandle(VarHandle_AccessMode arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "toMethodHandle", "(Ljava.lang.invoke.VarHandle$AccessMode;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    void updateVarForm(VarForm arg0) { (*javaClass->invokeMethod<void>(this->object, "updateVarForm", "(Ljava.lang.invoke.VarForm;)V", arg0)); }

    static void acquireFence() { (*javaClass->invokeStaticMethod<void>(this->object, "acquireFence", "()V", )); }

    static void releaseFence() { (*javaClass->invokeStaticMethod<void>(this->object, "releaseFence", "()V", )); }

};


/**
 * Classpath: java.lang.invoke.VarHandle$AccessDescriptor
 * Enclosing class: java.lang.invoke.VarHandle
 * Package name: java.lang.invoke
 */
class VarHandle_AccessDescriptor : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$AccessDescriptor";
public:
    STATICINITIALIZE;

    VarHandle_AccessDescriptor(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.invoke.VarHandle$TypesAndInvokers
 * Enclosing class: java.lang.invoke.VarHandle
 * Package name: java.lang.invoke
 */
class VarHandle_TypesAndInvokers : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$TypesAndInvokers";
public:
    STATICINITIALIZE;

    VarHandle_TypesAndInvokers(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.invoke.VarHandle$AccessType
 * Enclosing class: java.lang.invoke.VarHandle
 * Package name: java.lang.invoke
 */
class VarHandle_AccessType : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.VarHandle$AccessType";
public:
    STATICINITIALIZE;

    VarHandle_AccessType(jobject object) : JavaObject(object) {}

    static VarHandle_AccessType valueOf(String arg0) { return VarHandle_AccessType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.invoke.VarHandle$AccessType;", arg0)); }

    MethodType accessModeType(Class arg0, Class arg1, Class_interface arg2) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "accessModeType", "(Ljava.lang.Class;Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;", arg0, arg1, arg2)); }

    static int fillParameters(Class_interface arg0, Class arg1, Class_interface arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "fillParameters", "([Ljava.lang.Class;Ljava.lang.Class;[Ljava.lang.Class;)I", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.lang.invoke.VarForm
 * Package name: java.lang.invoke
 */
class VarForm : public Object {
protected:
    const inline static char *className = "java.lang.invoke.VarForm";
public:
    STATICINITIALIZE;

    VarForm(jobject object) : JavaObject(object) {}

    MethodType getMethodType(int arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "getMethodType", "(I)Ljava.lang.invoke.MethodType;", arg0)); }

    MemberName getMemberNameOrNull(int arg0) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "getMemberNameOrNull", "(I)Ljava.lang.invoke.MemberName;", arg0)); }

    MemberName getMemberName(int arg0) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "getMemberName", "(I)Ljava.lang.invoke.MemberName;", arg0)); }

    void initMethodTypes(Class arg0, Class_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "initMethodTypes", "(Ljava.lang.Class;[Ljava.lang.Class;)V", arg0, arg1)); }

    MemberName resolveMemberName(int arg0) { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "resolveMemberName", "(I)Ljava.lang.invoke.MemberName;", arg0)); }

    MethodType getMethodType_V(int arg0) { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "getMethodType_V", "(I)Ljava.lang.invoke.MethodType;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.MethodHandleInfo
 * Package name: java.lang.invoke
 */
class MethodHandleInfo : public JavaObject {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandleInfo";
public:
    STATICINITIALIZE;

    MethodHandleInfo(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    static String toString(int arg0, Class arg1, String arg2, MethodType arg3) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(ILjava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.String;", arg0, arg1, arg2, arg3)); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    bool isVarArgs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVarArgs", "()Z", )); }

    int getReferenceKind() { return int(*javaClass->invokeMethod<int>(this->object, "getReferenceKind", "()I", )); }

    MethodType getMethodType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "getMethodType", "()Ljava.lang.invoke.MethodType;", )); }

    Member reflectAs(Class arg0, MethodHandles_Lookup arg1) { return Member(*javaClass->invokeMethod<jobject>(this->object, "reflectAs", "(Ljava.lang.Class;Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.reflect.Member;", arg0, arg1)); }

    static String referenceKindToString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "referenceKindToString", "(I)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.lang.reflect.Member
 * Package name: java.lang.reflect
 */
class Member : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.Member";
public:
    STATICINITIALIZE;

    Member(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    bool isSynthetic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSynthetic", "()Z", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

};


/**
 * Classpath: java.lang.invoke.MethodHandles$Lookup$ClassDefiner
 * Enclosing class: java.lang.invoke.MethodHandles$Lookup
 * Package name: java.lang.invoke
 */
class MethodHandles_Lookup_ClassDefiner : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandles$Lookup$ClassDefiner";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup_ClassDefiner(jobject object) : JavaObject(object) {}

    String className() { return String(*javaClass->invokeMethod<jobject>(this->object, "className", "()Ljava.lang.String;", )); }

    Class defineClass(bool arg0, Object arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(ZLjava.lang.Object;)Ljava.lang.Class;", arg0, arg1)); }

    Class defineClass(bool arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(Z)Ljava.lang.Class;", arg0)); }

    MethodHandles_Lookup defineClassAsLookup(bool arg0, Object arg1) { return MethodHandles_Lookup(*javaClass->invokeMethod<jobject>(this->object, "defineClassAsLookup", "(ZLjava.lang.Object;)Ljava.lang.invoke.MethodHandles$Lookup;", arg0, arg1)); }

    MethodHandles_Lookup defineClassAsLookup(bool arg0) { return MethodHandles_Lookup(*javaClass->invokeMethod<jobject>(this->object, "defineClassAsLookup", "(Z)Ljava.lang.invoke.MethodHandles$Lookup;", arg0)); }

    bool isNestmate() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNestmate", "()Z", )); }

};


/**
 * Classpath: java.lang.invoke.MethodHandles$Lookup$ClassFile
 * Enclosing class: java.lang.invoke.MethodHandles$Lookup
 * Package name: java.lang.invoke
 */
class MethodHandles_Lookup_ClassFile : public Object {
protected:
    const inline static char *className = "java.lang.invoke.MethodHandles$Lookup$ClassFile";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup_ClassFile(jobject object) : JavaObject(object) {}

    static MethodHandles_Lookup_ClassFile newInstance(arr_B arg0, String arg1) { return MethodHandles_Lookup_ClassFile(*javaClass->invokeStaticMethod<jobject>(this->object, "newInstance", "([BLjava.lang.String;)Ljava.lang.invoke.MethodHandles$Lookup$ClassFile;", arg0, arg1)); }

    static int readInt(arr_B arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "readInt", "([BI)I", arg0, arg1)); }

    static int readUnsignedShort(arr_B arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "readUnsignedShort", "([BI)I", arg0, arg1)); }

    static MethodHandles_Lookup_ClassFile newInstanceNoCheck(String arg0, arr_B arg1) { return MethodHandles_Lookup_ClassFile(*javaClass->invokeStaticMethod<jobject>(this->object, "newInstanceNoCheck", "(Ljava.lang.String;[B)Ljava.lang.invoke.MethodHandles$Lookup$ClassFile;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.invoke.DirectMethodHandle
 * Package name: java.lang.invoke
 */
class DirectMethodHandle : public MethodHandle {
protected:
    const inline static char *className = "java.lang.invoke.DirectMethodHandle";
public:
    STATICINITIALIZE;

    DirectMethodHandle(jobject object) : JavaObject(object) {}

    static Object allocateInstance(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "allocateInstance", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static DirectMethodHandle make(byte arg0, Class arg1, MemberName arg2, Class arg3) { return DirectMethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(BLjava.lang.Class;Ljava.lang.invoke.MemberName;Ljava.lang.Class;)Ljava.lang.invoke.DirectMethodHandle;", arg0, arg1, arg2, arg3)); }

    static DirectMethodHandle make(Class arg0, MemberName arg1) { return DirectMethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.Class;Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.DirectMethodHandle;", arg0, arg1)); }

    static DirectMethodHandle make(MemberName arg0) { return DirectMethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.DirectMethodHandle;", arg0)); }

    static long fieldOffset(Object arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "fieldOffset", "(Ljava.lang.Object;)J", arg0)); }

    static LambdaForm preparedLambdaForm(MemberName arg0, bool arg1) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "preparedLambdaForm", "(Ljava.lang.invoke.MemberName;Z)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    static LambdaForm preparedLambdaForm(MethodType arg0, int arg1) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "preparedLambdaForm", "(Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    static LambdaForm preparedLambdaForm(MemberName arg0) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "preparedLambdaForm", "(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    static LambdaForm preparedFieldLambdaForm(MemberName arg0) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "preparedFieldLambdaForm", "(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.LambdaForm;", arg0)); }

    static LambdaForm preparedFieldLambdaForm(byte arg0, bool arg1, Class arg2) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "preparedFieldLambdaForm", "(BZLjava.lang.Class;)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2)); }

    static DirectMethodHandle makeAllocator(MemberName arg0) { return DirectMethodHandle(*javaClass->invokeStaticMethod<jobject>(this->object, "makeAllocator", "(Ljava.lang.invoke.MemberName;)Ljava.lang.invoke.DirectMethodHandle;", arg0)); }

    MemberName internalMemberName() { return MemberName(*javaClass->invokeMethod<jobject>(this->object, "internalMemberName", "()Ljava.lang.invoke.MemberName;", )); }

    static Object internalMemberName(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "internalMemberName", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static bool shouldBeInitialized(MemberName arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "shouldBeInitialized", "(Ljava.lang.invoke.MemberName;)Z", arg0)); }

    static void maybeCompile(LambdaForm arg0, MemberName arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "maybeCompile", "(Ljava.lang.invoke.LambdaForm;Ljava.lang.invoke.MemberName;)V", arg0, arg1)); }

    static LambdaForm makePreparedLambdaForm(MethodType arg0, int arg1) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "makePreparedLambdaForm", "(Ljava.lang.invoke.MethodType;I)Ljava.lang.invoke.LambdaForm;", arg0, arg1)); }

    static LambdaForm_NamedFunction getFunction(byte arg0) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "getFunction", "(B)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0)); }

    static Object findDirectMethodHandle(LambdaForm_Name arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "findDirectMethodHandle", "(Ljava.lang.invoke.LambdaForm$Name;)Ljava.lang.Object;", arg0)); }

    static void ensureInitialized(Object arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "ensureInitialized", "(Ljava.lang.Object;)V", arg0)); }

    void ensureInitialized() { (*javaClass->invokeMethod<void>(this->object, "ensureInitialized", "()V", )); }

    static bool checkInitialized(MemberName arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "checkInitialized", "(Ljava.lang.invoke.MemberName;)Z", arg0)); }

    static Object staticBase(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "staticBase", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static long staticOffset(Object arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "staticOffset", "(Ljava.lang.Object;)J", arg0)); }

    Object checkCast(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "checkCast", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object checkCast(Object arg0, Object arg1) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "checkCast", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    static int ftypeKind(Class arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "ftypeKind", "(Ljava.lang.Class;)I", arg0)); }

    static int afIndex(byte arg0, bool arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "afIndex", "(BZI)I", arg0, arg1, arg2)); }

    static LambdaForm makePreparedFieldLambdaForm(byte arg0, bool arg1, int arg2) { return LambdaForm(*javaClass->invokeStaticMethod<jobject>(this->object, "makePreparedFieldLambdaForm", "(BZI)Ljava.lang.invoke.LambdaForm;", arg0, arg1, arg2)); }

    static LambdaForm_Kind getFieldKind(bool arg0, bool arg1, Wrapper arg2) { return LambdaForm_Kind(*javaClass->invokeStaticMethod<jobject>(this->object, "getFieldKind", "(ZZLsun.invoke.util.Wrapper;)Ljava.lang.invoke.LambdaForm$Kind;", arg0, arg1, arg2)); }

    static LambdaForm_NamedFunction createFunction(byte arg0) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "createFunction", "(B)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0)); }

    static LambdaForm_NamedFunction getNamedFunction(String arg0, MethodType arg1) { return LambdaForm_NamedFunction(*javaClass->invokeStaticMethod<jobject>(this->object, "getNamedFunction", "(Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.LambdaForm$NamedFunction;", arg0, arg1)); }

    static Object internalMemberNameEnsureInit(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "internalMemberNameEnsureInit", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object checkBase(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "checkBase", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    static Object constructorMethod(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "constructorMethod", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object checkReceiver(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "checkReceiver", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object internalProperties() { return Object(*javaClass->invokeMethod<jobject>(this->object, "internalProperties", "()Ljava.lang.Object;", )); }

    String internalProperties() { return String(*javaClass->invokeMethod<jobject>(this->object, "internalProperties", "()Ljava.lang.String;", )); }

    BoundMethodHandle rebind() { return BoundMethodHandle(*javaClass->invokeMethod<jobject>(this->object, "rebind", "()Ljava.lang.invoke.BoundMethodHandle;", )); }

    MethodHandle copyWith(MethodType arg0, LambdaForm arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "copyWith", "(Ljava.lang.invoke.MethodType;Ljava.lang.invoke.LambdaForm;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    MethodHandle viewAsType(MethodType arg0, bool arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "viewAsType", "(Ljava.lang.invoke.MethodType;Z)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    bool isCrackable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCrackable", "()Z", )); }

    static Object nullCheck(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "nullCheck", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.lang.invoke.LambdaForm$Kind
 * Enclosing class: java.lang.invoke.LambdaForm
 * Package name: java.lang.invoke
 */
class LambdaForm_Kind : public Enum {
protected:
    const inline static char *className = "java.lang.invoke.LambdaForm$Kind";
public:
    STATICINITIALIZE;

    LambdaForm_Kind(jobject object) : JavaObject(object) {}

    static LambdaForm_Kind valueOf(String arg0) { return LambdaForm_Kind(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.invoke.LambdaForm$Kind;", arg0)); }

};


/**
 * Classpath: [Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;
 */
class MethodHandles_Lookup_ClassOption_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.invoke.MethodHandles$Lookup$ClassOption;";
public:
    STATICINITIALIZE;

    MethodHandles_Lookup_ClassOption_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.util.function.DoubleUnaryOperator
 * Package name: java.util.function
 */
class DoubleUnaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleUnaryOperator";
public:
    STATICINITIALIZE;

    DoubleUnaryOperator(jobject object) : JavaObject(object) {}

    static DoubleUnaryOperator identity() { return DoubleUnaryOperator(*javaClass->invokeStaticMethod<jobject>(this->object, "identity", "()Ljava.util.function.DoubleUnaryOperator;", )); }

    double applyAsDouble(double arg0) { return double(*javaClass->invokeMethod<double>(this->object, "applyAsDouble", "(D)D", arg0)); }

    DoubleUnaryOperator compose(DoubleUnaryOperator arg0) { return DoubleUnaryOperator(*javaClass->invokeMethod<jobject>(this->object, "compose", "(Ljava.util.function.DoubleUnaryOperator;)Ljava.util.function.DoubleUnaryOperator;", arg0)); }

    DoubleUnaryOperator andThen(DoubleUnaryOperator arg0) { return DoubleUnaryOperator(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.DoubleUnaryOperator;)Ljava.util.function.DoubleUnaryOperator;", arg0)); }

    static double lambda_identity_2(double arg0) { return double(*javaClass->invokeStaticMethod<double>(this->object, "lambda$identity$2", "(D)D", arg0)); }

    double lambda_andThen_1(DoubleUnaryOperator arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "lambda$andThen$1", "(Ljava.util.function.DoubleUnaryOperator;D)D", arg0, arg1)); }

    double lambda_compose_0(DoubleUnaryOperator arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "lambda$compose$0", "(Ljava.util.function.DoubleUnaryOperator;D)D", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.ObjDoubleConsumer
 * Package name: java.util.function
 */
class ObjDoubleConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ObjDoubleConsumer";
public:
    STATICINITIALIZE;

    ObjDoubleConsumer(jobject object) : JavaObject(object) {}

    void accept(Object arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljava.lang.Object;D)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.stream.DoubleStream$Builder
 * Enclosing class: java.util.stream.DoubleStream
 * Package name: java.util.stream
 */
class DoubleStream_Builder : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.DoubleStream$Builder";
public:
    STATICINITIALIZE;

    DoubleStream_Builder(jobject object) : JavaObject(object) {}

    DoubleStream_Builder add(double arg0) { return DoubleStream_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(D)Ljava.util.stream.DoubleStream$Builder;", arg0)); }

    void accept(double arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(D)V", arg0)); }

    DoubleStream build() { return DoubleStream(*javaClass->invokeMethod<jobject>(this->object, "build", "()Ljava.util.stream.DoubleStream;", )); }

};


/**
 * Classpath: java.util.Spliterator$OfDouble
 * Enclosing class: java.util.Spliterator
 * Package name: java.util
 */
class Spliterator_OfDouble : public JavaObject {
protected:
    const inline static char *className = "java.util.Spliterator$OfDouble";
public:
    STATICINITIALIZE;

    Spliterator_OfDouble(jobject object) : JavaObject(object) {}

    void forEachRemaining(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.lang.Object;)V", arg0)); }

    void forEachRemaining(DoubleConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.DoubleConsumer;)V", arg0)); }

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    bool tryAdvance(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.lang.Object;)Z", arg0)); }

    bool tryAdvance(Consumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.util.function.Consumer;)Z", arg0)); }

    bool tryAdvance(DoubleConsumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryAdvance", "(Ljava.util.function.DoubleConsumer;)Z", arg0)); }

    Spliterator_OfPrimitive trySplit() { return Spliterator_OfPrimitive(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator$OfPrimitive;", )); }

    Spliterator trySplit() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator;", )); }

    Spliterator_OfDouble trySplit() { return Spliterator_OfDouble(*javaClass->invokeMethod<jobject>(this->object, "trySplit", "()Ljava.util.Spliterator$OfDouble;", )); }

};


/**
 * Classpath: java.util.function.DoublePredicate
 * Package name: java.util.function
 */
class DoublePredicate : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoublePredicate";
public:
    STATICINITIALIZE;

    DoublePredicate(jobject object) : JavaObject(object) {}

    bool test(double arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "test", "(D)Z", arg0)); }

    DoublePredicate negate() { return DoublePredicate(*javaClass->invokeMethod<jobject>(this->object, "negate", "()Ljava.util.function.DoublePredicate;", )); }

    DoublePredicate and(DoublePredicate arg0) { return DoublePredicate(*javaClass->invokeMethod<jobject>(this->object, "and", "(Ljava.util.function.DoublePredicate;)Ljava.util.function.DoublePredicate;", arg0)); }

    bool lambda_or_2(DoublePredicate arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$or$2", "(Ljava.util.function.DoublePredicate;D)Z", arg0, arg1)); }

    bool lambda_negate_1(double arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$negate$1", "(D)Z", arg0)); }

    bool lambda_and_0(DoublePredicate arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$and$0", "(Ljava.util.function.DoublePredicate;D)Z", arg0, arg1)); }

    DoublePredicate or(DoublePredicate arg0) { return DoublePredicate(*javaClass->invokeMethod<jobject>(this->object, "or", "(Ljava.util.function.DoublePredicate;)Ljava.util.function.DoublePredicate;", arg0)); }

};


/**
 * Classpath: java.util.function.DoubleFunction
 * Package name: java.util.function
 */
class DoubleFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleFunction";
public:
    STATICINITIALIZE;

    DoubleFunction(jobject object) : JavaObject(object) {}

    Object apply(double arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "apply", "(D)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.DoubleSummaryStatistics
 * Package name: java.util
 */
class DoubleSummaryStatistics : public Object {
protected:
    const inline static char *className = "java.util.DoubleSummaryStatistics";
public:
    STATICINITIALIZE;

    DoubleSummaryStatistics(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void accept(double arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(D)V", arg0)); }

    void combine(DoubleSummaryStatistics arg0) { (*javaClass->invokeMethod<void>(this->object, "combine", "(Ljava.util.DoubleSummaryStatistics;)V", arg0)); }

    long getCount() { return long(*javaClass->invokeMethod<long>(this->object, "getCount", "()J", )); }

    double getSum() { return double(*javaClass->invokeMethod<double>(this->object, "getSum", "()D", )); }

    double getMin() { return double(*javaClass->invokeMethod<double>(this->object, "getMin", "()D", )); }

    double getAverage() { return double(*javaClass->invokeMethod<double>(this->object, "getAverage", "()D", )); }

    double getMax() { return double(*javaClass->invokeMethod<double>(this->object, "getMax", "()D", )); }

    void sumWithCompensation(double arg0) { (*javaClass->invokeMethod<void>(this->object, "sumWithCompensation", "(D)V", arg0)); }

};


/**
 * Classpath: java.util.function.DoubleSupplier
 * Package name: java.util.function
 */
class DoubleSupplier : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleSupplier";
public:
    STATICINITIALIZE;

    DoubleSupplier(jobject object) : JavaObject(object) {}

    double getAsDouble() { return double(*javaClass->invokeMethod<double>(this->object, "getAsDouble", "()D", )); }

};


/**
 * Classpath: java.util.function.DoubleToIntFunction
 * Package name: java.util.function
 */
class DoubleToIntFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleToIntFunction";
public:
    STATICINITIALIZE;

    DoubleToIntFunction(jobject object) : JavaObject(object) {}

    int applyAsInt(double arg0) { return int(*javaClass->invokeMethod<int>(this->object, "applyAsInt", "(D)I", arg0)); }

};


/**
 * Classpath: java.util.function.DoubleToLongFunction
 * Package name: java.util.function
 */
class DoubleToLongFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.DoubleToLongFunction";
public:
    STATICINITIALIZE;

    DoubleToLongFunction(jobject object) : JavaObject(object) {}

    long applyAsLong(double arg0) { return long(*javaClass->invokeMethod<long>(this->object, "applyAsLong", "(D)J", arg0)); }

};


/**
 * Classpath: java.util.stream.DoubleStream$DoubleMapMultiConsumer
 * Enclosing class: java.util.stream.DoubleStream
 * Package name: java.util.stream
 */
class DoubleStream_DoubleMapMultiConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.DoubleStream$DoubleMapMultiConsumer";
public:
    STATICINITIALIZE;

    DoubleStream_DoubleMapMultiConsumer(jobject object) : JavaObject(object) {}

    void accept(double arg0, DoubleConsumer arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(DLjava.util.function.DoubleConsumer;)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.OptionalInt
 * Package name: java.util
 */
class OptionalInt : public Object {
protected:
    const inline static char *className = "java.util.OptionalInt";
public:
    STATICINITIALIZE;

    OptionalInt(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    IntStream stream() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "stream", "()Ljava.util.stream.IntStream;", )); }

    static OptionalInt of(int arg0) { return OptionalInt(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(I)Ljava.util.OptionalInt;", arg0)); }

    static OptionalInt empty() { return OptionalInt(*javaClass->invokeStaticMethod<jobject>(this->object, "empty", "()Ljava.util.OptionalInt;", )); }

    bool isPresent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPresent", "()Z", )); }

    int orElse(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "orElse", "(I)I", arg0)); }

    int orElseThrow(Supplier arg0) { return int(*javaClass->invokeMethod<int>(this->object, "orElseThrow", "(Ljava.util.function.Supplier;)I", arg0)); }

    int orElseThrow() { return int(*javaClass->invokeMethod<int>(this->object, "orElseThrow", "()I", )); }

    int getAsInt() { return int(*javaClass->invokeMethod<int>(this->object, "getAsInt", "()I", )); }

    void ifPresent(IntConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "ifPresent", "(Ljava.util.function.IntConsumer;)V", arg0)); }

    void ifPresentOrElse(IntConsumer arg0, Runnable arg1) { (*javaClass->invokeMethod<void>(this->object, "ifPresentOrElse", "(Ljava.util.function.IntConsumer;Ljava.lang.Runnable;)V", arg0, arg1)); }

    int orElseGet(IntSupplier arg0) { return int(*javaClass->invokeMethod<int>(this->object, "orElseGet", "(Ljava.util.function.IntSupplier;)I", arg0)); }

};


/**
 * Classpath: java.util.function.IntSupplier
 * Package name: java.util.function
 */
class IntSupplier : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntSupplier";
public:
    STATICINITIALIZE;

    IntSupplier(jobject object) : JavaObject(object) {}

    int getAsInt() { return int(*javaClass->invokeMethod<int>(this->object, "getAsInt", "()I", )); }

};


/**
 * Classpath: java.util.PrimitiveIterator$OfInt
 * Enclosing class: java.util.PrimitiveIterator
 * Package name: java.util
 */
class PrimitiveIterator_OfInt : public JavaObject {
protected:
    const inline static char *className = "java.util.PrimitiveIterator$OfInt";
public:
    STATICINITIALIZE;

    PrimitiveIterator_OfInt(jobject object) : JavaObject(object) {}

    void forEachRemaining(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.lang.Object;)V", arg0)); }

    void forEachRemaining(IntConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.IntConsumer;)V", arg0)); }

    void forEachRemaining(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachRemaining", "(Ljava.util.function.Consumer;)V", arg0)); }

    Object next() { return Object(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Object;", )); }

    Integer next() { return Integer(*javaClass->invokeMethod<jobject>(this->object, "next", "()Ljava.lang.Integer;", )); }

    int nextInt() { return int(*javaClass->invokeMethod<int>(this->object, "nextInt", "()I", )); }

};


/**
 * Classpath: java.util.function.IntUnaryOperator
 * Package name: java.util.function
 */
class IntUnaryOperator : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntUnaryOperator";
public:
    STATICINITIALIZE;

    IntUnaryOperator(jobject object) : JavaObject(object) {}

    static IntUnaryOperator identity() { return IntUnaryOperator(*javaClass->invokeStaticMethod<jobject>(this->object, "identity", "()Ljava.util.function.IntUnaryOperator;", )); }

    int applyAsInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "applyAsInt", "(I)I", arg0)); }

    IntUnaryOperator compose(IntUnaryOperator arg0) { return IntUnaryOperator(*javaClass->invokeMethod<jobject>(this->object, "compose", "(Ljava.util.function.IntUnaryOperator;)Ljava.util.function.IntUnaryOperator;", arg0)); }

    IntUnaryOperator andThen(IntUnaryOperator arg0) { return IntUnaryOperator(*javaClass->invokeMethod<jobject>(this->object, "andThen", "(Ljava.util.function.IntUnaryOperator;)Ljava.util.function.IntUnaryOperator;", arg0)); }

    static int lambda_identity_2(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lambda$identity$2", "(I)I", arg0)); }

    int lambda_andThen_1(IntUnaryOperator arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lambda$andThen$1", "(Ljava.util.function.IntUnaryOperator;I)I", arg0, arg1)); }

    int lambda_compose_0(IntUnaryOperator arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lambda$compose$0", "(Ljava.util.function.IntUnaryOperator;I)I", arg0, arg1)); }

};


/**
 * Classpath: java.util.function.ObjIntConsumer
 * Package name: java.util.function
 */
class ObjIntConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.function.ObjIntConsumer";
public:
    STATICINITIALIZE;

    ObjIntConsumer(jobject object) : JavaObject(object) {}

    void accept(Object arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(Ljava.lang.Object;I)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.stream.IntStream$Builder
 * Enclosing class: java.util.stream.IntStream
 * Package name: java.util.stream
 */
class IntStream_Builder : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.IntStream$Builder";
public:
    STATICINITIALIZE;

    IntStream_Builder(jobject object) : JavaObject(object) {}

    IntStream_Builder add(int arg0) { return IntStream_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(I)Ljava.util.stream.IntStream$Builder;", arg0)); }

    void accept(int arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(I)V", arg0)); }

    IntStream build() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "build", "()Ljava.util.stream.IntStream;", )); }

};


/**
 * Classpath: java.util.function.IntPredicate
 * Package name: java.util.function
 */
class IntPredicate : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntPredicate";
public:
    STATICINITIALIZE;

    IntPredicate(jobject object) : JavaObject(object) {}

    bool test(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "test", "(I)Z", arg0)); }

    IntPredicate negate() { return IntPredicate(*javaClass->invokeMethod<jobject>(this->object, "negate", "()Ljava.util.function.IntPredicate;", )); }

    IntPredicate and(IntPredicate arg0) { return IntPredicate(*javaClass->invokeMethod<jobject>(this->object, "and", "(Ljava.util.function.IntPredicate;)Ljava.util.function.IntPredicate;", arg0)); }

    bool lambda_or_2(IntPredicate arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$or$2", "(Ljava.util.function.IntPredicate;I)Z", arg0, arg1)); }

    bool lambda_negate_1(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$negate$1", "(I)Z", arg0)); }

    bool lambda_and_0(IntPredicate arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lambda$and$0", "(Ljava.util.function.IntPredicate;I)Z", arg0, arg1)); }

    IntPredicate or(IntPredicate arg0) { return IntPredicate(*javaClass->invokeMethod<jobject>(this->object, "or", "(Ljava.util.function.IntPredicate;)Ljava.util.function.IntPredicate;", arg0)); }

};


/**
 * Classpath: java.util.function.IntFunction
 * Package name: java.util.function
 */
class IntFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntFunction";
public:
    STATICINITIALIZE;

    IntFunction(jobject object) : JavaObject(object) {}

    Object apply(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "apply", "(I)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.util.IntSummaryStatistics
 * Package name: java.util
 */
class IntSummaryStatistics : public Object {
protected:
    const inline static char *className = "java.util.IntSummaryStatistics";
public:
    STATICINITIALIZE;

    IntSummaryStatistics(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void accept(int arg0) { (*javaClass->invokeMethod<void>(this->object, "accept", "(I)V", arg0)); }

    void combine(IntSummaryStatistics arg0) { (*javaClass->invokeMethod<void>(this->object, "combine", "(Ljava.util.IntSummaryStatistics;)V", arg0)); }

    long getCount() { return long(*javaClass->invokeMethod<long>(this->object, "getCount", "()J", )); }

    long getSum() { return long(*javaClass->invokeMethod<long>(this->object, "getSum", "()J", )); }

    int getMin() { return int(*javaClass->invokeMethod<int>(this->object, "getMin", "()I", )); }

    double getAverage() { return double(*javaClass->invokeMethod<double>(this->object, "getAverage", "()D", )); }

    int getMax() { return int(*javaClass->invokeMethod<int>(this->object, "getMax", "()I", )); }

};


/**
 * Classpath: java.util.function.IntToLongFunction
 * Package name: java.util.function
 */
class IntToLongFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntToLongFunction";
public:
    STATICINITIALIZE;

    IntToLongFunction(jobject object) : JavaObject(object) {}

    long applyAsLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "applyAsLong", "(I)J", arg0)); }

};


/**
 * Classpath: java.util.function.IntToDoubleFunction
 * Package name: java.util.function
 */
class IntToDoubleFunction : public JavaObject {
protected:
    const inline static char *className = "java.util.function.IntToDoubleFunction";
public:
    STATICINITIALIZE;

    IntToDoubleFunction(jobject object) : JavaObject(object) {}

    double applyAsDouble(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "applyAsDouble", "(I)D", arg0)); }

};


/**
 * Classpath: java.util.stream.IntStream$IntMapMultiConsumer
 * Enclosing class: java.util.stream.IntStream
 * Package name: java.util.stream
 */
class IntStream_IntMapMultiConsumer : public JavaObject {
protected:
    const inline static char *className = "java.util.stream.IntStream$IntMapMultiConsumer";
public:
    STATICINITIALIZE;

    IntStream_IntMapMultiConsumer(jobject object) : JavaObject(object) {}

    void accept(int arg0, IntConsumer arg1) { (*javaClass->invokeMethod<void>(this->object, "accept", "(ILjava.util.function.IntConsumer;)V", arg0, arg1)); }

};


/**
 * Classpath: jdk.internal.reflect.ReflectionFactory
 * Package name: jdk.internal.reflect
 */
class ReflectionFactory : public Object {
protected:
    const inline static char *className = "jdk.internal.reflect.ReflectionFactory";
public:
    STATICINITIALIZE;

    ReflectionFactory(jobject object) : JavaObject(object) {}

    static ReflectionFactory getReflectionFactory() { return ReflectionFactory(*javaClass->invokeStaticMethod<jobject>(this->object, "getReflectionFactory", "()Ljdk.internal.reflect.ReflectionFactory;", )); }

    Constructor copyConstructor(Constructor arg0) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "copyConstructor", "(Ljava.lang.reflect.Constructor;)Ljava.lang.reflect.Constructor;", arg0)); }

    Object newInstance(Constructor arg0, Object_interface arg1, Class arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "newInstance", "(Ljava.lang.reflect.Constructor;[Ljava.lang.Object;Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Method copyMethod(Method arg0) { return Method(*javaClass->invokeMethod<jobject>(this->object, "copyMethod", "(Ljava.lang.reflect.Method;)Ljava.lang.reflect.Method;", arg0)); }

    Field copyField(Field arg0) { return Field(*javaClass->invokeMethod<jobject>(this->object, "copyField", "(Ljava.lang.reflect.Field;)Ljava.lang.reflect.Field;", arg0)); }

    FieldAccessor newFieldAccessor(Field arg0, bool arg1) { return FieldAccessor(*javaClass->invokeMethod<jobject>(this->object, "newFieldAccessor", "(Ljava.lang.reflect.Field;Z)Ljdk.internal.reflect.FieldAccessor;", arg0, arg1)); }

    MethodAccessor newMethodAccessor(Method arg0) { return MethodAccessor(*javaClass->invokeMethod<jobject>(this->object, "newMethodAccessor", "(Ljava.lang.reflect.Method;)Ljdk.internal.reflect.MethodAccessor;", arg0)); }

    ConstructorAccessor getConstructorAccessor(Constructor arg0) { return ConstructorAccessor(*javaClass->invokeMethod<jobject>(this->object, "getConstructorAccessor", "(Ljava.lang.reflect.Constructor;)Ljdk.internal.reflect.ConstructorAccessor;", arg0)); }

    ConstructorAccessor newConstructorAccessor(Constructor arg0) { return ConstructorAccessor(*javaClass->invokeMethod<jobject>(this->object, "newConstructorAccessor", "(Ljava.lang.reflect.Constructor;)Ljdk.internal.reflect.ConstructorAccessor;", arg0)); }

    void setConstructorAccessor(Constructor arg0, ConstructorAccessor arg1) { (*javaClass->invokeMethod<void>(this->object, "setConstructorAccessor", "(Ljava.lang.reflect.Constructor;Ljdk.internal.reflect.ConstructorAccessor;)V", arg0, arg1)); }

    static int inflationThreshold() { return int(*javaClass->invokeStaticMethod<int>(this->object, "inflationThreshold", "()I", )); }

    Constructor generateConstructor(Class arg0, Constructor arg1) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "generateConstructor", "(Ljava.lang.Class;Ljava.lang.reflect.Constructor;)Ljava.lang.reflect.Constructor;", arg0, arg1)); }

    Constructor newConstructor(Class arg0, Class_interface arg1, Class_interface arg2, int arg3, int arg4, String arg5, arr_B arg6, arr_B arg7) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "newConstructor", "(Ljava.lang.Class;[Ljava.lang.Class;[Ljava.lang.Class;IILjava.lang.String;[B[B)Ljava.lang.reflect.Constructor;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    Method leafCopyMethod(Method arg0) { return Method(*javaClass->invokeMethod<jobject>(this->object, "leafCopyMethod", "(Ljava.lang.reflect.Method;)Ljava.lang.reflect.Method;", arg0)); }

    static void checkInitted() { (*javaClass->invokeStaticMethod<void>(this->object, "checkInitted", "()V", )); }

    static Method findMethodForReflection(Method arg0) { return Method(*javaClass->invokeStaticMethod<jobject>(this->object, "findMethodForReflection", "(Ljava.lang.reflect.Method;)Ljava.lang.reflect.Method;", arg0)); }

    static bool packageEquals(Class arg0, Class arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "packageEquals", "(Ljava.lang.Class;Ljava.lang.Class;)Z", arg0, arg1)); }

    bool superHasAccessibleConstructor(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "superHasAccessibleConstructor", "(Ljava.lang.Class;)Z", arg0)); }

    MethodHandle findReadWriteObjectForSerialization(Class arg0, String arg1, Class arg2) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "findReadWriteObjectForSerialization", "(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0, arg1, arg2)); }

    MethodHandle getReplaceResolveForSerialization(Class arg0, String arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "getReplaceResolveForSerialization", "(Ljava.lang.Class;Ljava.lang.String;)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    Constructor newConstructorForExternalization(Class arg0) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "newConstructorForExternalization", "(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0)); }

    Constructor newConstructorForSerialization(Class arg0) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "newConstructorForSerialization", "(Ljava.lang.Class;)Ljava.lang.reflect.Constructor;", arg0)); }

    Constructor newConstructorForSerialization(Class arg0, Constructor arg1) { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "newConstructorForSerialization", "(Ljava.lang.Class;Ljava.lang.reflect.Constructor;)Ljava.lang.reflect.Constructor;", arg0, arg1)); }

    MethodHandle readObjectForSerialization(Class arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "readObjectForSerialization", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle readObjectNoDataForSerialization(Class arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "readObjectNoDataForSerialization", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle writeObjectForSerialization(Class arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "writeObjectForSerialization", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle writeReplaceForSerialization(Class arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "writeReplaceForSerialization", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    MethodHandle readResolveForSerialization(Class arg0) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "readResolveForSerialization", "(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;", arg0)); }

    bool hasStaticInitializerForSerialization(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasStaticInitializerForSerialization", "(Ljava.lang.Class;)Z", arg0)); }

    Constructor newOptionalDataExceptionForSerialization() { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "newOptionalDataExceptionForSerialization", "()Ljava.lang.reflect.Constructor;", )); }

};


/**
 * Classpath: sun.reflect.generics.repository.ClassRepository
 * Package name: sun.reflect.generics.repository
 */
class ClassRepository : public GenericDeclRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.ClassRepository";
public:
    STATICINITIALIZE;

    ClassRepository(jobject object) : JavaObject(object) {}

    Type getSuperclass() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getSuperclass", "()Ljava.lang.reflect.Type;", )); }

    static ClassRepository make(String arg0, GenericsFactory arg1) { return ClassRepository(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.ClassRepository;", arg0, arg1)); }

    Type computeSuperclass() { return Type(*javaClass->invokeMethod<jobject>(this->object, "computeSuperclass", "()Ljava.lang.reflect.Type;", )); }

    ClassSignature parse(String arg0) { return ClassSignature(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Lsun.reflect.generics.tree.ClassSignature;", arg0)); }

    Tree parse(String arg0) { return Tree(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Lsun.reflect.generics.tree.Tree;", arg0)); }

};


/**
 * Classpath: java.lang.Class$ReflectionData
 * Enclosing class: java.lang.Class
 * Package name: java.lang
 */
class Class_ReflectionData : public Object {
protected:
    const inline static char *className = "java.lang.Class$ReflectionData";
public:
    STATICINITIALIZE;

    Class_ReflectionData(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.Class$EnclosingMethodInfo
 * Enclosing class: java.lang.Class
 * Package name: java.lang
 */
class Class_EnclosingMethodInfo : public Object {
protected:
    const inline static char *className = "java.lang.Class$EnclosingMethodInfo";
public:
    STATICINITIALIZE;

    Class_EnclosingMethodInfo(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool isMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMethod", "()Z", )); }

    String getDescriptor() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDescriptor", "()Ljava.lang.String;", )); }

    Class getEnclosingClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getEnclosingClass", "()Ljava.lang.Class;", )); }

    bool isConstructor() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConstructor", "()Z", )); }

    static void validate(Object_interface arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "validate", "([Ljava.lang.Object;)V", arg0)); }

    bool isPartial() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPartial", "()Z", )); }

};


/**
 * Classpath: [Ljava.lang.reflect.Field;
 */
class Field_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.Field;";
public:
    STATICINITIALIZE;

    Field_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.lang.reflect.Method;
 */
class Method_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.reflect.Method;";
public:
    STATICINITIALIZE;

    Method_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.PublicMethods$MethodList
 * Enclosing class: java.lang.PublicMethods
 * Package name: java.lang
 */
class PublicMethods_MethodList : public Object {
protected:
    const inline static char *className = "java.lang.PublicMethods$MethodList";
public:
    STATICINITIALIZE;

    PublicMethods_MethodList(jobject object) : JavaObject(object) {}

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    static PublicMethods_MethodList merge(PublicMethods_MethodList arg0, Method arg1) { return PublicMethods_MethodList(*javaClass->invokeStaticMethod<jobject>(this->object, "merge", "(Ljava.lang.PublicMethods$MethodList;Ljava.lang.reflect.Method;)Ljava.lang.PublicMethods$MethodList;", arg0, arg1)); }

    static PublicMethods_MethodList merge(PublicMethods_MethodList arg0, PublicMethods_MethodList arg1) { return PublicMethods_MethodList(*javaClass->invokeStaticMethod<jobject>(this->object, "merge", "(Ljava.lang.PublicMethods$MethodList;Ljava.lang.PublicMethods$MethodList;)Ljava.lang.PublicMethods$MethodList;", arg0, arg1)); }

    Method getMostSpecific() { return Method(*javaClass->invokeMethod<jobject>(this->object, "getMostSpecific", "()Ljava.lang.reflect.Method;", )); }

    static PublicMethods_MethodList filter(Method_interface arg0, String arg1, Class_interface arg2, bool arg3) { return PublicMethods_MethodList(*javaClass->invokeStaticMethod<jobject>(this->object, "filter", "([Ljava.lang.reflect.Method;Ljava.lang.String;[Ljava.lang.Class;Z)Ljava.lang.PublicMethods$MethodList;", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.lang.Class$AnnotationData
 * Enclosing class: java.lang.Class
 * Package name: java.lang
 */
class Class_AnnotationData : public Object {
protected:
    const inline static char *className = "java.lang.Class$AnnotationData";
public:
    STATICINITIALIZE;

    Class_AnnotationData(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.reflect.ConstantPool
 * Package name: jdk.internal.reflect
 */
class ConstantPool : public Object {
protected:
    const inline static char *className = "jdk.internal.reflect.ConstantPool";
public:
    STATICINITIALIZE;

    ConstantPool(jobject object) : JavaObject(object) {}

    int getSize0(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getSize0", "(Ljava.lang.Object;)I", arg0)); }

    Class getClassAt0(Object arg0, int arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "getClassAt0", "(Ljava.lang.Object;I)Ljava.lang.Class;", arg0, arg1)); }

    Class getClassAtIfLoaded0(Object arg0, int arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "getClassAtIfLoaded0", "(Ljava.lang.Object;I)Ljava.lang.Class;", arg0, arg1)); }

    int getClassRefIndexAt0(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getClassRefIndexAt0", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    Member getMethodAt0(Object arg0, int arg1) { return Member(*javaClass->invokeMethod<jobject>(this->object, "getMethodAt0", "(Ljava.lang.Object;I)Ljava.lang.reflect.Member;", arg0, arg1)); }

    Member getMethodAtIfLoaded0(Object arg0, int arg1) { return Member(*javaClass->invokeMethod<jobject>(this->object, "getMethodAtIfLoaded0", "(Ljava.lang.Object;I)Ljava.lang.reflect.Member;", arg0, arg1)); }

    Field getFieldAt0(Object arg0, int arg1) { return Field(*javaClass->invokeMethod<jobject>(this->object, "getFieldAt0", "(Ljava.lang.Object;I)Ljava.lang.reflect.Field;", arg0, arg1)); }

    Field getFieldAtIfLoaded0(Object arg0, int arg1) { return Field(*javaClass->invokeMethod<jobject>(this->object, "getFieldAtIfLoaded0", "(Ljava.lang.Object;I)Ljava.lang.reflect.Field;", arg0, arg1)); }

    int getNameAndTypeRefIndexAt0(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getNameAndTypeRefIndexAt0", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    int getIntAt0(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getIntAt0", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    long getLongAt0(Object arg0, int arg1) { return long(*javaClass->invokeMethod<long>(this->object, "getLongAt0", "(Ljava.lang.Object;I)J", arg0, arg1)); }

    float getFloatAt0(Object arg0, int arg1) { return float(*javaClass->invokeMethod<float>(this->object, "getFloatAt0", "(Ljava.lang.Object;I)F", arg0, arg1)); }

    double getDoubleAt0(Object arg0, int arg1) { return double(*javaClass->invokeMethod<double>(this->object, "getDoubleAt0", "(Ljava.lang.Object;I)D", arg0, arg1)); }

    String getStringAt0(Object arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getStringAt0", "(Ljava.lang.Object;I)Ljava.lang.String;", arg0, arg1)); }

    String getUTF8At0(Object arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getUTF8At0", "(Ljava.lang.Object;I)Ljava.lang.String;", arg0, arg1)); }

    byte getTagAt0(Object arg0, int arg1) { return byte(*javaClass->invokeMethod<byte>(this->object, "getTagAt0", "(Ljava.lang.Object;I)B", arg0, arg1)); }

    int getSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSize", "()I", )); }

    Class getClassAt(int arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "getClassAt", "(I)Ljava.lang.Class;", arg0)); }

    Class getClassAtIfLoaded(int arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "getClassAtIfLoaded", "(I)Ljava.lang.Class;", arg0)); }

    int getClassRefIndexAt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getClassRefIndexAt", "(I)I", arg0)); }

    Member getMethodAt(int arg0) { return Member(*javaClass->invokeMethod<jobject>(this->object, "getMethodAt", "(I)Ljava.lang.reflect.Member;", arg0)); }

    Member getMethodAtIfLoaded(int arg0) { return Member(*javaClass->invokeMethod<jobject>(this->object, "getMethodAtIfLoaded", "(I)Ljava.lang.reflect.Member;", arg0)); }

    Field getFieldAt(int arg0) { return Field(*javaClass->invokeMethod<jobject>(this->object, "getFieldAt", "(I)Ljava.lang.reflect.Field;", arg0)); }

    Field getFieldAtIfLoaded(int arg0) { return Field(*javaClass->invokeMethod<jobject>(this->object, "getFieldAtIfLoaded", "(I)Ljava.lang.reflect.Field;", arg0)); }

    int getNameAndTypeRefIndexAt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getNameAndTypeRefIndexAt", "(I)I", arg0)); }

    int getIntAt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getIntAt", "(I)I", arg0)); }

    long getLongAt(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLongAt", "(I)J", arg0)); }

    float getFloatAt(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloatAt", "(I)F", arg0)); }

    double getDoubleAt(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDoubleAt", "(I)D", arg0)); }

    String getStringAt(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getStringAt", "(I)Ljava.lang.String;", arg0)); }

    String getUTF8At(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getUTF8At", "(I)Ljava.lang.String;", arg0)); }

    ConstantPool_Tag getTagAt(int arg0) { return ConstantPool_Tag(*javaClass->invokeMethod<jobject>(this->object, "getTagAt", "(I)Ljdk.internal.reflect.ConstantPool$Tag;", arg0)); }

};


/**
 * Classpath: jdk.internal.reflect.ConstantPool$Tag
 * Enclosing class: jdk.internal.reflect.ConstantPool
 * Package name: jdk.internal.reflect
 */
class ConstantPool_Tag : public Enum {
protected:
    const inline static char *className = "jdk.internal.reflect.ConstantPool$Tag";
public:
    STATICINITIALIZE;

    ConstantPool_Tag(jobject object) : JavaObject(object) {}

    static ConstantPool_Tag valueOf(String arg0) { return ConstantPool_Tag(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljdk.internal.reflect.ConstantPool$Tag;", arg0)); }

    static ConstantPool_Tag valueOf(byte arg0) { return ConstantPool_Tag(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(B)Ljdk.internal.reflect.ConstantPool$Tag;", arg0)); }

};


/**
 * Classpath: sun.reflect.annotation.AnnotationType
 * Package name: sun.reflect.annotation
 */
class AnnotationType : public Object {
protected:
    const inline static char *className = "sun.reflect.annotation.AnnotationType";
public:
    STATICINITIALIZE;

    AnnotationType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static AnnotationType getInstance(Class arg0) { return AnnotationType(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.lang.Class;)Lsun.reflect.annotation.AnnotationType;", arg0)); }

    bool isInherited() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInherited", "()Z", )); }

    Map members() { return Map(*javaClass->invokeMethod<jobject>(this->object, "members", "()Ljava.util.Map;", )); }

    static Class invocationHandlerReturnType(Class arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "invocationHandlerReturnType", "(Ljava.lang.Class;)Ljava.lang.Class;", arg0)); }

    RetentionPolicy retention() { return RetentionPolicy(*javaClass->invokeMethod<jobject>(this->object, "retention", "()Ljava.lang.annotation.RetentionPolicy;", )); }

    Map memberTypes() { return Map(*javaClass->invokeMethod<jobject>(this->object, "memberTypes", "()Ljava.util.Map;", )); }

    Map memberDefaults() { return Map(*javaClass->invokeMethod<jobject>(this->object, "memberDefaults", "()Ljava.util.Map;", )); }

};


/**
 * Classpath: java.lang.annotation.RetentionPolicy
 * Package name: java.lang.annotation
 */
class RetentionPolicy : public Enum {
protected:
    const inline static char *className = "java.lang.annotation.RetentionPolicy";
public:
    STATICINITIALIZE;

    RetentionPolicy(jobject object) : JavaObject(object) {}

    static RetentionPolicy valueOf(String arg0) { return RetentionPolicy(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.annotation.RetentionPolicy;", arg0)); }

};


/**
 * Classpath: [Ljava.lang.CharSequence;
 */
class CharSequence_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.CharSequence;";
public:
    STATICINITIALIZE;

    CharSequence_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: com.google.common.collect.Multimap
 * Package name: com.google.common.collect
 */
class Multimap : public JavaObject {
protected:
    const inline static char *className = "com.google.common.collect.Multimap";
public:
    STATICINITIALIZE;

    Multimap(jobject object) : JavaObject(object) {}

    bool containsEntry(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsEntry", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Collection replaceValues(Object arg0, Iterable arg1) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Ljava.util.Collection;", arg0, arg1)); }

    Map asMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "asMap", "()Ljava.util.Map;", )); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Collection get(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

    bool put(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool putAll(Object arg0, Iterable arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Ljava.lang.Object;Ljava.lang.Iterable;)Z", arg0, arg1)); }

    bool putAll(Multimap arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Lcom.google.common.collect.Multimap;)Z", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Multiset keys() { return Multiset(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Lcom.google.common.collect.Multiset;", )); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Collection entries() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Ljava.util.Collection;", )); }

    Collection removeAll(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

};


/**
 * Classpath: com.google.common.collect.Multiset
 * Package name: com.google.common.collect
 */
class Multiset : public JavaObject {
protected:
    const inline static char *className = "com.google.common.collect.Multiset";
public:
    STATICINITIALIZE;

    Multiset(jobject object) : JavaObject(object) {}

    bool setCount(Object arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setCount", "(Ljava.lang.Object;II)Z", arg0, arg1, arg2)); }

    int setCount(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "setCount", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    Set elementSet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "elementSet", "()Ljava.util.Set;", )); }

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    int add(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "add", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    int remove(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "remove", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    int count(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "count", "(Ljava.lang.Object;)I", arg0)); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ForwardingObject
 * Package name: com.google.common.collect
 */
class ForwardingObject : public Object {
protected:
    const inline static char *className = "com.google.common.collect.ForwardingObject";
public:
    STATICINITIALIZE;

    ForwardingObject(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Object delegate() { return Object(*javaClass->invokeMethod<jobject>(this->object, "delegate", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.util.UUID
 * Package name: java.util
 */
class UUID : public Object {
protected:
    const inline static char *className = "java.util.UUID";
public:
    STATICINITIALIZE;

    UUID(jobject object) : JavaObject(object) {}

    long getMostSignificantBits() { return long(*javaClass->invokeMethod<long>(this->object, "getMostSignificantBits", "()J", )); }

    long getLeastSignificantBits() { return long(*javaClass->invokeMethod<long>(this->object, "getLeastSignificantBits", "()J", )); }

    static UUID nameUUIDFromBytes(arr_B arg0) { return UUID(*javaClass->invokeStaticMethod<jobject>(this->object, "nameUUIDFromBytes", "([B)Ljava.util.UUID;", arg0)); }

    static UUID fromString(String arg0) { return UUID(*javaClass->invokeStaticMethod<jobject>(this->object, "fromString", "(Ljava.lang.String;)Ljava.util.UUID;", arg0)); }

    static UUID randomUUID() { return UUID(*javaClass->invokeStaticMethod<jobject>(this->object, "randomUUID", "()Ljava.util.UUID;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int version() { return int(*javaClass->invokeMethod<int>(this->object, "version", "()I", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(UUID arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.util.UUID;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    long timestamp() { return long(*javaClass->invokeMethod<long>(this->object, "timestamp", "()J", )); }

    long node() { return long(*javaClass->invokeMethod<long>(this->object, "node", "()J", )); }

    static long parse4Nibbles(String arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "parse4Nibbles", "(Ljava.lang.String;I)J", arg0, arg1)); }

    static UUID fromString1(String arg0) { return UUID(*javaClass->invokeStaticMethod<jobject>(this->object, "fromString1", "(Ljava.lang.String;)Ljava.util.UUID;", arg0)); }

    int clockSequence() { return int(*javaClass->invokeMethod<int>(this->object, "clockSequence", "()I", )); }

    int variant() { return int(*javaClass->invokeMethod<int>(this->object, "variant", "()I", )); }

};


/**
 * Classpath: net.minecraft.client.resources.SkinManager$SkinAvailableCallback
 * Enclosing class: net.minecraft.client.resources.SkinManager
 * Package name: net.minecraft.client.resources
 */
class SkinManager_SkinAvailableCallback : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.SkinManager$SkinAvailableCallback";
public:
    STATICINITIALIZE;

    SkinManager_SkinAvailableCallback(jobject object) : JavaObject(object) {}

    void skinAvailable(MinecraftProfileTexture_Type arg0, ResourceLocation arg1, MinecraftProfileTexture arg2) { (*javaClass->invokeMethod<void>(this->object, "skinAvailable", "(Lcom.mojang.authlib.minecraft.MinecraftProfileTexture$Type;Lnet.minecraft.util.ResourceLocation;Lcom.mojang.authlib.minecraft.MinecraftProfileTexture;)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: com.mojang.authlib.minecraft.MinecraftProfileTexture$Type
 * Enclosing class: com.mojang.authlib.minecraft.MinecraftProfileTexture
 * Package name: com.mojang.authlib.minecraft
 */
class MinecraftProfileTexture_Type : public Enum {
protected:
    const inline static char *className = "com.mojang.authlib.minecraft.MinecraftProfileTexture$Type";
public:
    STATICINITIALIZE;

    MinecraftProfileTexture_Type(jobject object) : JavaObject(object) {}

    static MinecraftProfileTexture_Type valueOf(String arg0) { return MinecraftProfileTexture_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lcom.mojang.authlib.minecraft.MinecraftProfileTexture$Type;", arg0)); }

};


/**
 * Classpath: net.minecraft.util.ResourceLocation
 * Package name: net.minecraft.util
 */
class ResourceLocation : public Object {
protected:
    const inline static char *className = "net.minecraft.util.ResourceLocation";
public:
    STATICINITIALIZE;

    ResourceLocation(jobject object) : JavaObject(object) {}

    String getResourceDomain() { return String(*javaClass->invokeMethod<jobject>(this->object, "getResourceDomain", "()Ljava.lang.String;", )); }

    String getResourcePath() { return String(*javaClass->invokeMethod<jobject>(this->object, "getResourcePath", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: com.mojang.authlib.minecraft.MinecraftProfileTexture
 * Package name: com.mojang.authlib.minecraft
 */
class MinecraftProfileTexture : public Object {
protected:
    const inline static char *className = "com.mojang.authlib.minecraft.MinecraftProfileTexture";
public:
    STATICINITIALIZE;

    MinecraftProfileTexture(jobject object) : JavaObject(object) {}

    String getMetadata(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getMetadata", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String getHash() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHash", "()Ljava.lang.String;", )); }

    String getUrl() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUrl", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.entity.Entity
 * Package name: net.minecraft.entity
 */
class Entity : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.Entity";
public:
    STATICINITIALIZE;

    Entity(jobject object) : JavaObject(object) {}

    void setEntityBoundingBox(AxisAlignedBB arg0) { (*javaClass->invokeMethod<void>(this->object, "setEntityBoundingBox", "(Lnet.minecraft.util.AxisAlignedBB;)V", arg0)); }

    void travelToDimension(int arg0) { (*javaClass->invokeMethod<void>(this->object, "travelToDimension", "(I)V", arg0)); }

    void spawnRunningParticles() { (*javaClass->invokeMethod<void>(this->object, "spawnRunningParticles", "()V", )); }

    void setOnFireFromLava() { (*javaClass->invokeMethod<void>(this->object, "setOnFireFromLava", "()V", )); }

    bool isLiquidPresentInAABB(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLiquidPresentInAABB", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    void resetPositionToBB() { (*javaClass->invokeMethod<void>(this->object, "resetPositionToBB", "()V", )); }

    void playStepSound(BlockPos arg0, Block arg1) { (*javaClass->invokeMethod<void>(this->object, "playStepSound", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V", arg0, arg1)); }

    void doBlockCollisions() { (*javaClass->invokeMethod<void>(this->object, "doBlockCollisions", "()V", )); }

    void addEntityCrashInfo(CrashReportCategory arg0) { (*javaClass->invokeMethod<void>(this->object, "addEntityCrashInfo", "(Lnet.minecraft.crash.CrashReportCategory;)V", arg0)); }

    void dealFireDamage(int arg0) { (*javaClass->invokeMethod<void>(this->object, "dealFireDamage", "(I)V", arg0)); }

    AxisAlignedBB getCollisionBoundingBox() { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "getCollisionBoundingBox", "()Lnet.minecraft.util.AxisAlignedBB;", )); }

    void createRunningParticles() { (*javaClass->invokeMethod<void>(this->object, "createRunningParticles", "()V", )); }

    int getBrightnessForRender(float arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getBrightnessForRender", "(F)I", arg0)); }

    float getBrightness(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getBrightness", "(F)F", arg0)); }

    void setPositionAndRotation(double arg0, double arg1, double arg2, float arg3, float arg4) { (*javaClass->invokeMethod<void>(this->object, "setPositionAndRotation", "(DDDFF)V", arg0, arg1, arg2, arg3, arg4)); }

    void moveToBlockPosAndAngles(BlockPos arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "moveToBlockPosAndAngles", "(Lnet.minecraft.util.BlockPos;FF)V", arg0, arg1, arg2)); }

    float getDistanceToEntity(Entity arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getDistanceToEntity", "(Lnet.minecraft.entity.Entity;)F", arg0)); }

    double getDistanceSq(BlockPos arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDistanceSq", "(Lnet.minecraft.util.BlockPos;)D", arg0)); }

    double getDistanceSq(double arg0, double arg1, double arg2) { return double(*javaClass->invokeMethod<double>(this->object, "getDistanceSq", "(DDD)D", arg0, arg1, arg2)); }

    double getDistanceSqToCenter(BlockPos arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDistanceSqToCenter", "(Lnet.minecraft.util.BlockPos;)D", arg0)); }

    double getDistance(double arg0, double arg1, double arg2) { return double(*javaClass->invokeMethod<double>(this->object, "getDistance", "(DDD)D", arg0, arg1, arg2)); }

    double getDistanceSqToEntity(Entity arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDistanceSqToEntity", "(Lnet.minecraft.entity.Entity;)D", arg0)); }

    Vec3 getPositionEyes(float arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getPositionEyes", "(F)Lnet.minecraft.util.Vec3;", arg0)); }

    bool isInRangeToRender3d(double arg0, double arg1, double arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInRangeToRender3d", "(DDD)Z", arg0, arg1, arg2)); }

    bool isInRangeToRenderDist(double arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInRangeToRenderDist", "(D)Z", arg0)); }

    bool writeMountToNBT(NBTTagCompound arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "writeMountToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)Z", arg0)); }

    String getEntityString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getEntityString", "()Ljava.lang.String;", )); }

    bool writeToNBTOptional(NBTTagCompound arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "writeToNBTOptional", "(Lnet.minecraft.nbt.NBTTagCompound;)Z", arg0)); }

    NBTTagList newDoubleNBTList(arr_D arg0) { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "newDoubleNBTList", "([D)Lnet.minecraft.nbt.NBTTagList;", arg0)); }

    NBTTagList newFloatNBTList(arr_F arg0) { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "newFloatNBTList", "([F)Lnet.minecraft.nbt.NBTTagList;", arg0)); }

    String getCustomNameTag() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCustomNameTag", "()Ljava.lang.String;", )); }

    bool getAlwaysRenderNameTag() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAlwaysRenderNameTag", "()Z", )); }

    void setCustomNameTag(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setCustomNameTag", "(Ljava.lang.String;)V", arg0)); }

    void setAlwaysRenderNameTag(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAlwaysRenderNameTag", "(Z)V", arg0)); }

    bool shouldSetPosAfterLoading() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldSetPosAfterLoading", "()Z", )); }

    void onChunkLoad() { (*javaClass->invokeMethod<void>(this->object, "onChunkLoad", "()V", )); }

    EntityItem dropItemWithOffset(Item arg0, int arg1, float arg2) { return EntityItem(*javaClass->invokeMethod<jobject>(this->object, "dropItemWithOffset", "(Lnet.minecraft.item.Item;IF)Lnet.minecraft.entity.item.EntityItem;", arg0, arg1, arg2)); }

    EntityItem entityDropItem(ItemStack arg0, float arg1) { return EntityItem(*javaClass->invokeMethod<jobject>(this->object, "entityDropItem", "(Lnet.minecraft.item.ItemStack;F)Lnet.minecraft.entity.item.EntityItem;", arg0, arg1)); }

    AxisAlignedBB getCollisionBox(Entity arg0) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "getCollisionBox", "(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.AxisAlignedBB;", arg0)); }

    void updateRiderPosition() { (*javaClass->invokeMethod<void>(this->object, "updateRiderPosition", "()V", )); }

    double getMountedYOffset() { return double(*javaClass->invokeMethod<double>(this->object, "getMountedYOffset", "()D", )); }

    float getCollisionBorderSize() { return float(*javaClass->invokeMethod<float>(this->object, "getCollisionBorderSize", "()F", )); }

    void func_181015_d(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181015_d", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    void setVelocity(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setVelocity", "(DDD)V", arg0, arg1, arg2)); }

    void onStruckByLightning(EntityLightningBolt arg0) { (*javaClass->invokeMethod<void>(this->object, "onStruckByLightning", "(Lnet.minecraft.entity.effect.EntityLightningBolt;)V", arg0)); }

    bool pushOutOfBlocks(double arg0, double arg1, double arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "pushOutOfBlocks", "(DDD)Z", arg0, arg1, arg2)); }

    bool hasCustomName() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasCustomName", "()Z", )); }

    bool isEntityEqual(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEntityEqual", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void copyLocationAndAnglesFrom(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "copyLocationAndAnglesFrom", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void copyDataFromOld(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "copyDataFromOld", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    float getExplosionResistance(Explosion arg0, World arg1, BlockPos arg2, IBlockState arg3) { return float(*javaClass->invokeMethod<float>(this->object, "getExplosionResistance", "(Lnet.minecraft.world.Explosion;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)F", arg0, arg1, arg2, arg3)); }

    bool verifyExplosion(Explosion arg0, World arg1, BlockPos arg2, IBlockState arg3, float arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "verifyExplosion", "(Lnet.minecraft.world.Explosion;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;F)Z", arg0, arg1, arg2, arg3, arg4)); }

    int getMaxFallHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxFallHeight", "()I", )); }

    Vec3 func_181014_aG() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "func_181014_aG", "()Lnet.minecraft.util.Vec3;", )); }

    EnumFacing func_181012_aH() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "func_181012_aH", "()Lnet.minecraft.util.EnumFacing;", )); }

    bool canRenderOnFire() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRenderOnFire", "()Z", )); }

    void onDataWatcherUpdate(int arg0) { (*javaClass->invokeMethod<void>(this->object, "onDataWatcherUpdate", "(I)V", arg0)); }

    EnumFacing getHorizontalFacing() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "getHorizontalFacing", "()Lnet.minecraft.util.EnumFacing;", )); }

    bool isSpectatedByPlayer(EntityPlayerMP arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSpectatedByPlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)Z", arg0)); }

    void setOutsideBorder(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setOutsideBorder", "(Z)V", arg0)); }

    void addChatMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    bool canCommandSenderUseCommand(int arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCommandSenderUseCommand", "(ILjava.lang.String;)Z", arg0, arg1)); }

    Vec3 getPositionVector() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getPositionVector", "()Lnet.minecraft.util.Vec3;", )); }

    World getEntityWorld() { return World(*javaClass->invokeMethod<jobject>(this->object, "getEntityWorld", "()Lnet.minecraft.world.World;", )); }

    Entity getCommandSenderEntity() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getCommandSenderEntity", "()Lnet.minecraft.entity.Entity;", )); }

    void setCommandStat(CommandResultStats_Type arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setCommandStat", "(Lnet.minecraft.command.CommandResultStats$Type;I)V", arg0, arg1)); }

    CommandResultStats getCommandStats() { return CommandResultStats(*javaClass->invokeMethod<jobject>(this->object, "getCommandStats", "()Lnet.minecraft.command.CommandResultStats;", )); }

    void func_174817_o(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "func_174817_o", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    NBTTagCompound getNBTTagCompound() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getNBTTagCompound", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    void clientUpdateEntityNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "clientUpdateEntityNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool isImmuneToExplosions() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isImmuneToExplosions", "()Z", )); }

    void applyEnchantments(EntityLivingBase arg0, Entity arg1) { (*javaClass->invokeMethod<void>(this->object, "applyEnchantments", "(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.Entity;)V", arg0, arg1)); }

    void setLocationAndAngles(double arg0, double arg1, double arg2, float arg3, float arg4) { (*javaClass->invokeMethod<void>(this->object, "setLocationAndAngles", "(DDDFF)V", arg0, arg1, arg2, arg3, arg4)); }

    bool isEntityAlive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEntityAlive", "()Z", )); }

    void setPosition(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setPosition", "(DDD)V", arg0, arg1, arg2)); }

    int getMaxInPortalTime() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxInPortalTime", "()I", )); }

    String getSwimSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSwimSound", "()Ljava.lang.String;", )); }

    String getSplashSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSplashSound", "()Ljava.lang.String;", )); }

    int getPortalCooldown() { return int(*javaClass->invokeMethod<int>(this->object, "getPortalCooldown", "()I", )); }

    float getEyeHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getEyeHeight", "()F", )); }

    void handleStatusUpdate(byte arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }

    void updateRidden() { (*javaClass->invokeMethod<void>(this->object, "updateRidden", "()V", )); }

    void mountEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "mountEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void setSneaking(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSneaking", "(Z)V", arg0)); }

    bool isSprinting() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSprinting", "()Z", )); }

    AxisAlignedBB getEntityBoundingBox() { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "getEntityBoundingBox", "()Lnet.minecraft.util.AxisAlignedBB;", )); }

    void onCollideWithPlayer(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "onCollideWithPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void addToPlayerScore(Entity arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addToPlayerScore", "(Lnet.minecraft.entity.Entity;I)V", arg0, arg1)); }

    bool isInsideOfMaterial(Material arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInsideOfMaterial", "(Lnet.minecraft.block.material.Material;)Z", arg0)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    bool isEntityInvulnerable(DamageSource arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEntityInvulnerable", "(Lnet.minecraft.util.DamageSource;)Z", arg0)); }

    void onKillCommand() { (*javaClass->invokeMethod<void>(this->object, "onKillCommand", "()V", )); }

    void updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3) { (*javaClass->invokeMethod<void>(this->object, "updateFallState", "(DZLnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;)V", arg0, arg1, arg2, arg3)); }

    bool handleWaterMovement() { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleWaterMovement", "()Z", )); }

    void onEntityUpdate() { (*javaClass->invokeMethod<void>(this->object, "onEntityUpdate", "()V", )); }

    bool isImmuneToFire() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isImmuneToFire", "()Z", )); }

    void setInvisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setInvisible", "(Z)V", arg0)); }

    void setBeenAttacked() { (*javaClass->invokeMethod<void>(this->object, "setBeenAttacked", "()V", )); }

    void performHurtAnimation() { (*javaClass->invokeMethod<void>(this->object, "performHurtAnimation", "()V", )); }

    void setPositionAndUpdate(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setPositionAndUpdate", "(DDD)V", arg0, arg1, arg2)); }

    bool isOffsetPositionInLiquid(double arg0, double arg1, double arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOffsetPositionInLiquid", "(DDD)Z", arg0, arg1, arg2)); }

    bool isOutsideBorder() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOutsideBorder", "()Z", )); }

    void setRotation(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setRotation", "(FF)V", arg0, arg1)); }

    void applyEntityCollision(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "applyEntityCollision", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6) { (*javaClass->invokeMethod<void>(this->object, "setPositionAndRotation2", "(DDDFFIZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    Vec3 getVectorForRotation(float arg0, float arg1) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getVectorForRotation", "(FF)Lnet.minecraft.util.Vec3;", arg0, arg1)); }

    bool canBeCollidedWith() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeCollidedWith", "()Z", )); }

    bool canBePushed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBePushed", "()Z", )); }

    float getRotationYawHead() { return float(*javaClass->invokeMethod<float>(this->object, "getRotationYawHead", "()F", )); }

    void setRotationYawHead(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setRotationYawHead", "(F)V", arg0)); }

    void func_181013_g(float arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181013_g", "(F)V", arg0)); }

    void resetHeight() { (*javaClass->invokeMethod<void>(this->object, "resetHeight", "()V", )); }

    void onKillEntity(EntityLivingBase arg0) { (*javaClass->invokeMethod<void>(this->object, "onKillEntity", "(Lnet.minecraft.entity.EntityLivingBase;)V", arg0)); }

    bool canTriggerWalking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canTriggerWalking", "()Z", )); }

    void setCurrentItemOrArmor(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    bool isInvisibleToPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvisibleToPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    bool isInvisible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvisible", "()Z", )); }

    bool isPushedByWater() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPushedByWater", "()Z", )); }

    HoverEvent getHoverEvent() { return HoverEvent(*javaClass->invokeMethod<jobject>(this->object, "getHoverEvent", "()Lnet.minecraft.event.HoverEvent;", )); }

    bool sendCommandFeedback() { return bool(*javaClass->invokeMethod<boolean>(this->object, "sendCommandFeedback", "()Z", )); }

    bool replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replaceItemInInventory", "(ILnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    bool isEntityInsideOpaqueBlock() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEntityInsideOpaqueBlock", "()Z", )); }

    void preparePlayerToSpawn() { (*javaClass->invokeMethod<void>(this->object, "preparePlayerToSpawn", "()V", )); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

    DataWatcher getDataWatcher() { return DataWatcher(*javaClass->invokeMethod<jobject>(this->object, "getDataWatcher", "()Lnet.minecraft.entity.DataWatcher;", )); }

    void setEntityId(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setEntityId", "(I)V", arg0)); }

    UUID getUniqueID() { return UUID(*javaClass->invokeMethod<jobject>(this->object, "getUniqueID", "()Ljava.util.UUID;", )); }

    bool interactFirst(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interactFirst", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    bool canAttackWithItem() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAttackWithItem", "()Z", )); }

    bool hitByEntity(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hitByEntity", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void addVelocity(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "addVelocity", "(DDD)V", arg0, arg1, arg2)); }

    void setSprinting(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSprinting", "(Z)V", arg0)); }

    int getAir() { return int(*javaClass->invokeMethod<int>(this->object, "getAir", "()I", )); }

    void setAir(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setAir", "(I)V", arg0)); }

    bool isWet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWet", "()Z", )); }

    void kill() { (*javaClass->invokeMethod<void>(this->object, "kill", "()V", )); }

    bool isInLava() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInLava", "()Z", )); }

    void moveFlying(float arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "moveFlying", "(FFF)V", arg0, arg1, arg2)); }

    void moveEntity(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "moveEntity", "(DDD)V", arg0, arg1, arg2)); }

    void setAngles(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setAngles", "(FF)V", arg0, arg1)); }

    void setFlag(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setFlag", "(IZ)V", arg0, arg1)); }

    bool isSilent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSilent", "()Z", )); }

    void setSilent(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSilent", "(Z)V", arg0)); }

    void setWorld(World arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorld", "(Lnet.minecraft.world.World;)V", arg0)); }

    MovingObjectPosition rayTrace(double arg0, float arg1) { return MovingObjectPosition(*javaClass->invokeMethod<jobject>(this->object, "rayTrace", "(DF)Lnet.minecraft.util.MovingObjectPosition;", arg0, arg1)); }

    bool getFlag(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getFlag", "(I)Z", arg0)); }

    bool isEating() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEating", "()Z", )); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void setEating(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEating", "(Z)V", arg0)); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    bool isBurning() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBurning", "()Z", )); }

    void extinguish() { (*javaClass->invokeMethod<void>(this->object, "extinguish", "()V", )); }

    void playSound(String arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "playSound", "(Ljava.lang.String;FF)V", arg0, arg1, arg2)); }

    bool isSneaking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSneaking", "()Z", )); }

    void setSize(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(FF)V", arg0, arg1)); }

    EntityItem dropItem(Item arg0, int arg1) { return EntityItem(*javaClass->invokeMethod<jobject>(this->object, "dropItem", "(Lnet.minecraft.item.Item;I)Lnet.minecraft.entity.item.EntityItem;", arg0, arg1)); }

    void writeToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    double getYOffset() { return double(*javaClass->invokeMethod<double>(this->object, "getYOffset", "()D", )); }

    bool isInWater() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInWater", "()Z", )); }

    void setFire(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setFire", "(I)V", arg0)); }

    void setDead() { (*javaClass->invokeMethod<void>(this->object, "setDead", "()V", )); }

    bool isRiding() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRiding", "()Z", )); }

    bool interactAt(EntityPlayer arg0, Vec3 arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interactAt", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.Vec3;)Z", arg0, arg1)); }

    void fall(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }

    void setInWeb() { (*javaClass->invokeMethod<void>(this->object, "setInWeb", "()V", )); }

    Vec3 getLookVec() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getLookVec", "()Lnet.minecraft.util.Vec3;", )); }

    Vec3 getLook(float arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getLook", "(F)Lnet.minecraft.util.Vec3;", arg0)); }

    bool getAlwaysRenderNameTagForRender() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAlwaysRenderNameTagForRender", "()Z", )); }

    bool doesEntityNotTriggerPressurePlate() { return bool(*javaClass->invokeMethod<boolean>(this->object, "doesEntityNotTriggerPressurePlate", "()Z", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.util.AxisAlignedBB
 * Package name: net.minecraft.util
 */
class AxisAlignedBB : public Object {
protected:
    const inline static char *className = "net.minecraft.util.AxisAlignedBB";
public:
    STATICINITIALIZE;

    AxisAlignedBB(jobject object) : JavaObject(object) {}

    double calculateYOffset(AxisAlignedBB arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "calculateYOffset", "(Lnet.minecraft.util.AxisAlignedBB;D)D", arg0, arg1)); }

    double calculateXOffset(AxisAlignedBB arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "calculateXOffset", "(Lnet.minecraft.util.AxisAlignedBB;D)D", arg0, arg1)); }

    double calculateZOffset(AxisAlignedBB arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "calculateZOffset", "(Lnet.minecraft.util.AxisAlignedBB;D)D", arg0, arg1)); }

    double getAverageEdgeLength() { return double(*javaClass->invokeMethod<double>(this->object, "getAverageEdgeLength", "()D", )); }

    bool intersectsWith(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsWith", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    bool isVecInside(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInside", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    MovingObjectPosition calculateIntercept(Vec3 arg0, Vec3 arg1) { return MovingObjectPosition(*javaClass->invokeMethod<jobject>(this->object, "calculateIntercept", "(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.MovingObjectPosition;", arg0, arg1)); }

    bool func_181656_b() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181656_b", "()Z", )); }

    bool isVecInYZ(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInYZ", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    bool isVecInXZ(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInXZ", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    bool isVecInXY(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInXY", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    AxisAlignedBB addCoord(double arg0, double arg1, double arg2) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "addCoord", "(DDD)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1, arg2)); }

    AxisAlignedBB contract(double arg0, double arg1, double arg2) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "contract", "(DDD)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1, arg2)); }

    AxisAlignedBB union(AxisAlignedBB arg0) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "union", "(Lnet.minecraft.util.AxisAlignedBB;)Lnet.minecraft.util.AxisAlignedBB;", arg0)); }

    static AxisAlignedBB fromBounds(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return AxisAlignedBB(*javaClass->invokeStaticMethod<jobject>(this->object, "fromBounds", "(DDDDDD)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    AxisAlignedBB offset(double arg0, double arg1, double arg2) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "offset", "(DDD)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1, arg2)); }

    AxisAlignedBB expand(double arg0, double arg1, double arg2) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "expand", "(DDD)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.util.Vec3
 * Package name: net.minecraft.util
 */
class Vec3 : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Vec3";
public:
    STATICINITIALIZE;

    Vec3(jobject object) : JavaObject(object) {}

    double lengthVector() { return double(*javaClass->invokeMethod<double>(this->object, "lengthVector", "()D", )); }

    Vec3 rotatePitch(float arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "rotatePitch", "(F)Lnet.minecraft.util.Vec3;", arg0)); }

    Vec3 subtractReverse(Vec3 arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "subtractReverse", "(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;", arg0)); }

    Vec3 getIntermediateWithXValue(Vec3 arg0, double arg1) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getIntermediateWithXValue", "(Lnet.minecraft.util.Vec3;D)Lnet.minecraft.util.Vec3;", arg0, arg1)); }

    Vec3 getIntermediateWithYValue(Vec3 arg0, double arg1) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getIntermediateWithYValue", "(Lnet.minecraft.util.Vec3;D)Lnet.minecraft.util.Vec3;", arg0, arg1)); }

    Vec3 getIntermediateWithZValue(Vec3 arg0, double arg1) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getIntermediateWithZValue", "(Lnet.minecraft.util.Vec3;D)Lnet.minecraft.util.Vec3;", arg0, arg1)); }

    double squareDistanceTo(Vec3 arg0) { return double(*javaClass->invokeMethod<double>(this->object, "squareDistanceTo", "(Lnet.minecraft.util.Vec3;)D", arg0)); }

    Vec3 crossProduct(Vec3 arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "crossProduct", "(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;", arg0)); }

    double dotProduct(Vec3 arg0) { return double(*javaClass->invokeMethod<double>(this->object, "dotProduct", "(Lnet.minecraft.util.Vec3;)D", arg0)); }

    double distanceTo(Vec3 arg0) { return double(*javaClass->invokeMethod<double>(this->object, "distanceTo", "(Lnet.minecraft.util.Vec3;)D", arg0)); }

    Vec3 rotateYaw(float arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "rotateYaw", "(F)Lnet.minecraft.util.Vec3;", arg0)); }

    Vec3 addVector(double arg0, double arg1, double arg2) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "addVector", "(DDD)Lnet.minecraft.util.Vec3;", arg0, arg1, arg2)); }

    Vec3 add(Vec3 arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "add", "(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Vec3 normalize() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "normalize", "()Lnet.minecraft.util.Vec3;", )); }

    Vec3 subtract(double arg0, double arg1, double arg2) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "subtract", "(DDD)Lnet.minecraft.util.Vec3;", arg0, arg1, arg2)); }

    Vec3 subtract(Vec3 arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "subtract", "(Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;", arg0)); }

};


/**
 * Classpath: net.minecraft.util.MovingObjectPosition
 * Package name: net.minecraft.util
 */
class MovingObjectPosition : public Object {
protected:
    const inline static char *className = "net.minecraft.util.MovingObjectPosition";
public:
    STATICINITIALIZE;

    MovingObjectPosition(jobject object) : JavaObject(object) {}

    BlockPos getBlockPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getBlockPos", "()Lnet.minecraft.util.BlockPos;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.util.Vec3i
 * Package name: net.minecraft.util
 */
class Vec3i : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Vec3i";
public:
    STATICINITIALIZE;

    Vec3i(jobject object) : JavaObject(object) {}

    double distanceSqToCenter(double arg0, double arg1, double arg2) { return double(*javaClass->invokeMethod<double>(this->object, "distanceSqToCenter", "(DDD)D", arg0, arg1, arg2)); }

    Vec3i crossProduct(Vec3i arg0) { return Vec3i(*javaClass->invokeMethod<jobject>(this->object, "crossProduct", "(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.Vec3i;", arg0)); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    int getZ() { return int(*javaClass->invokeMethod<int>(this->object, "getZ", "()I", )); }

    double distanceSq(Vec3i arg0) { return double(*javaClass->invokeMethod<double>(this->object, "distanceSq", "(Lnet.minecraft.util.Vec3i;)D", arg0)); }

    double distanceSq(double arg0, double arg1, double arg2) { return double(*javaClass->invokeMethod<double>(this->object, "distanceSq", "(DDD)D", arg0, arg1, arg2)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Vec3i arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lnet.minecraft.util.Vec3i;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

};


/**
 * Classpath: net.minecraft.util.EnumFacing
 * Package name: net.minecraft.util
 */
class EnumFacing : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing";
public:
    STATICINITIALIZE;

    EnumFacing(jobject object) : JavaObject(object) {}

    int getHorizontalIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getHorizontalIndex", "()I", )); }

    Vec3i getDirectionVec() { return Vec3i(*javaClass->invokeMethod<jobject>(this->object, "getDirectionVec", "()Lnet.minecraft.util.Vec3i;", )); }

    EnumFacing_AxisDirection getAxisDirection() { return EnumFacing_AxisDirection(*javaClass->invokeMethod<jobject>(this->object, "getAxisDirection", "()Lnet.minecraft.util.EnumFacing$AxisDirection;", )); }

    static EnumFacing getHorizontal(int arg0) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "getHorizontal", "(I)Lnet.minecraft.util.EnumFacing;", arg0)); }

    int getFrontOffsetX() { return int(*javaClass->invokeMethod<int>(this->object, "getFrontOffsetX", "()I", )); }

    int getFrontOffsetY() { return int(*javaClass->invokeMethod<int>(this->object, "getFrontOffsetY", "()I", )); }

    int getFrontOffsetZ() { return int(*javaClass->invokeMethod<int>(this->object, "getFrontOffsetZ", "()I", )); }

    EnumFacing rotateAround(EnumFacing_Axis arg0) { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "rotateAround", "(Lnet.minecraft.util.EnumFacing$Axis;)Lnet.minecraft.util.EnumFacing;", arg0)); }

    static EnumFacing getFacingFromVector(float arg0, float arg1, float arg2) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "getFacingFromVector", "(FFF)Lnet.minecraft.util.EnumFacing;", arg0, arg1, arg2)); }

    static EnumFacing func_181076_a(EnumFacing_AxisDirection arg0, EnumFacing_Axis arg1) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "func_181076_a", "(Lnet.minecraft.util.EnumFacing$AxisDirection;Lnet.minecraft.util.EnumFacing$Axis;)Lnet.minecraft.util.EnumFacing;", arg0, arg1)); }

    EnumFacing getOpposite() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "getOpposite", "()Lnet.minecraft.util.EnumFacing;", )); }

    String getName2() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName2", "()Ljava.lang.String;", )); }

    static EnumFacing getFront(int arg0) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "getFront", "(I)Lnet.minecraft.util.EnumFacing;", arg0)); }

    EnumFacing rotateX() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "rotateX", "()Lnet.minecraft.util.EnumFacing;", )); }

    EnumFacing rotateZ() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "rotateZ", "()Lnet.minecraft.util.EnumFacing;", )); }

    EnumFacing rotateYCCW() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "rotateYCCW", "()Lnet.minecraft.util.EnumFacing;", )); }

    static EnumFacing byName(String arg0) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "byName", "(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing;", arg0)); }

    static EnumFacing fromAngle(double arg0) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "fromAngle", "(D)Lnet.minecraft.util.EnumFacing;", arg0)); }

    EnumFacing_Axis getAxis() { return EnumFacing_Axis(*javaClass->invokeMethod<jobject>(this->object, "getAxis", "()Lnet.minecraft.util.EnumFacing$Axis;", )); }

    EnumFacing rotateY() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "rotateY", "()Lnet.minecraft.util.EnumFacing;", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static EnumFacing valueOf(String arg0) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing;", arg0)); }

    int getIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getIndex", "()I", )); }

    static EnumFacing random(Random arg0) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "random", "(Ljava.util.Random;)Lnet.minecraft.util.EnumFacing;", arg0)); }

};


/**
 * Classpath: net.minecraft.util.EnumFacing$AxisDirection
 * Enclosing class: net.minecraft.util.EnumFacing
 * Package name: net.minecraft.util
 */
class EnumFacing_AxisDirection : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing$AxisDirection";
public:
    STATICINITIALIZE;

    EnumFacing_AxisDirection(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static EnumFacing_AxisDirection valueOf(String arg0) { return EnumFacing_AxisDirection(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$AxisDirection;", arg0)); }

    int getOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getOffset", "()I", )); }

};


/**
 * Classpath: net.minecraft.util.EnumFacing$Axis
 * Enclosing class: net.minecraft.util.EnumFacing
 * Package name: net.minecraft.util
 */
class EnumFacing_Axis : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing$Axis";
public:
    STATICINITIALIZE;

    EnumFacing_Axis(jobject object) : JavaObject(object) {}

    bool isHorizontal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHorizontal", "()Z", )); }

    bool isVertical() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVertical", "()Z", )); }

    EnumFacing_Plane getPlane() { return EnumFacing_Plane(*javaClass->invokeMethod<jobject>(this->object, "getPlane", "()Lnet.minecraft.util.EnumFacing$Plane;", )); }

    String getName2() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName2", "()Ljava.lang.String;", )); }

    static EnumFacing_Axis byName(String arg0) { return EnumFacing_Axis(*javaClass->invokeStaticMethod<jobject>(this->object, "byName", "(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$Axis;", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static EnumFacing_Axis valueOf(String arg0) { return EnumFacing_Axis(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$Axis;", arg0)); }

    bool apply(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "apply", "(Ljava.lang.Object;)Z", arg0)); }

    bool apply(EnumFacing arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "apply", "(Lnet.minecraft.util.EnumFacing;)Z", arg0)); }

};


/**
 * Classpath: net.minecraft.util.EnumFacing$Plane
 * Enclosing class: net.minecraft.util.EnumFacing
 * Package name: net.minecraft.util
 */
class EnumFacing_Plane : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumFacing$Plane";
public:
    STATICINITIALIZE;

    EnumFacing_Plane(jobject object) : JavaObject(object) {}

    static EnumFacing_Plane valueOf(String arg0) { return EnumFacing_Plane(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.EnumFacing$Plane;", arg0)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool apply(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "apply", "(Ljava.lang.Object;)Z", arg0)); }

    bool apply(EnumFacing arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "apply", "(Lnet.minecraft.util.EnumFacing;)Z", arg0)); }

    EnumFacing random(Random arg0) { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "random", "(Ljava.util.Random;)Lnet.minecraft.util.EnumFacing;", arg0)); }

};


/**
 * Classpath: net.minecraft.block.Block
 * Package name: net.minecraft.block
 */
class Block : public Object {
protected:
    const inline static char *className = "net.minecraft.block.Block";
public:
    STATICINITIALIZE;

    Block(jobject object) : JavaObject(object) {}

    static int getIdFromBlock(Block arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getIdFromBlock", "(Lnet.minecraft.block.Block;)I", arg0)); }

    static IBlockState getStateById(int arg0) { return IBlockState(*javaClass->invokeStaticMethod<jobject>(this->object, "getStateById", "(I)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    void randomDisplayTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (*javaClass->invokeMethod<void>(this->object, "randomDisplayTick", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V", arg0, arg1, arg2, arg3)); }

    IBlockState getActualState(IBlockState arg0, IBlockAccess arg1, BlockPos arg2) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getActualState", "(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.state.IBlockState;", arg0, arg1, arg2)); }

    static void registerBlock(int arg0, String arg1, Block arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "registerBlock", "(ILjava.lang.String;Lnet.minecraft.block.Block;)V", arg0, arg1, arg2)); }

    static void registerBlock(int arg0, ResourceLocation arg1, Block arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "registerBlock", "(ILnet.minecraft.util.ResourceLocation;Lnet.minecraft.block.Block;)V", arg0, arg1, arg2)); }

    void onEntityCollidedWithBlock(World arg0, BlockPos arg1, Entity arg2) { (*javaClass->invokeMethod<void>(this->object, "onEntityCollidedWithBlock", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.Entity;)V", arg0, arg1, arg2)); }

    void onEntityCollidedWithBlock(World arg0, BlockPos arg1, IBlockState arg2, Entity arg3) { (*javaClass->invokeMethod<void>(this->object, "onEntityCollidedWithBlock", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.Entity;)V", arg0, arg1, arg2, arg3)); }

    void onFallenUpon(World arg0, BlockPos arg1, Entity arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "onFallenUpon", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.Entity;F)V", arg0, arg1, arg2, arg3)); }

    AxisAlignedBB getCollisionBoundingBox(World arg0, BlockPos arg1, IBlockState arg2) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "getCollisionBoundingBox", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1, arg2)); }

    int getRenderType() { return int(*javaClass->invokeMethod<int>(this->object, "getRenderType", "()I", )); }

    int getMetaFromState(IBlockState arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMetaFromState", "(Lnet.minecraft.block.state.IBlockState;)I", arg0)); }

    bool isVisuallyOpaque() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVisuallyOpaque", "()Z", )); }

    float getExplosionResistance(Entity arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getExplosionResistance", "(Lnet.minecraft.entity.Entity;)F", arg0)); }

    int getLightOpacity() { return int(*javaClass->invokeMethod<int>(this->object, "getLightOpacity", "()I", )); }

    int getLightValue() { return int(*javaClass->invokeMethod<int>(this->object, "getLightValue", "()I", )); }

    bool hasComparatorInputOverride() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasComparatorInputOverride", "()Z", )); }

    IBlockState getDefaultState() { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getDefaultState", "()Lnet.minecraft.block.state.IBlockState;", )); }

    void dropBlockAsItem(World arg0, BlockPos arg1, IBlockState arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "dropBlockAsItem", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;I)V", arg0, arg1, arg2, arg3)); }

    void onNeighborBlockChange(World arg0, BlockPos arg1, IBlockState arg2, Block arg3) { (*javaClass->invokeMethod<void>(this->object, "onNeighborBlockChange", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.block.Block;)V", arg0, arg1, arg2, arg3)); }

    bool getUseNeighborBrightness() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getUseNeighborBrightness", "()Z", )); }

    bool canCollideCheck(IBlockState arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCollideCheck", "(Lnet.minecraft.block.state.IBlockState;Z)Z", arg0, arg1)); }

    MovingObjectPosition collisionRayTrace(World arg0, BlockPos arg1, Vec3 arg2, Vec3 arg3) { return MovingObjectPosition(*javaClass->invokeMethod<jobject>(this->object, "collisionRayTrace", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.MovingObjectPosition;", arg0, arg1, arg2, arg3)); }

    void addCollisionBoxesToList(World arg0, BlockPos arg1, IBlockState arg2, AxisAlignedBB arg3, List arg4, Entity arg5) { (*javaClass->invokeMethod<void>(this->object, "addCollisionBoxesToList", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.AxisAlignedBB;Ljava.util.List;Lnet.minecraft.entity.Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Vec3 modifyAcceleration(World arg0, BlockPos arg1, Entity arg2, Vec3 arg3) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "modifyAcceleration", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.Entity;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.Vec3;", arg0, arg1, arg2, arg3)); }

    bool isBlockNormalCube() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockNormalCube", "()Z", )); }

    bool canPlaceBlockAt(World arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPlaceBlockAt", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    bool isReplaceable(World arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReplaceable", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    int getStrongPower(IBlockAccess arg0, BlockPos arg1, IBlockState arg2, EnumFacing arg3) { return int(*javaClass->invokeMethod<int>(this->object, "getStrongPower", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.EnumFacing;)I", arg0, arg1, arg2, arg3)); }

    int getWeakPower(IBlockAccess arg0, BlockPos arg1, IBlockState arg2, EnumFacing arg3) { return int(*javaClass->invokeMethod<int>(this->object, "getWeakPower", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.EnumFacing;)I", arg0, arg1, arg2, arg3)); }

    bool onBlockEventReceived(World arg0, BlockPos arg1, IBlockState arg2, int arg3, int arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "onBlockEventReceived", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;II)Z", arg0, arg1, arg2, arg3, arg4)); }

    EnumWorldBlockLayer getBlockLayer() { return EnumWorldBlockLayer(*javaClass->invokeMethod<jobject>(this->object, "getBlockLayer", "()Lnet.minecraft.util.EnumWorldBlockLayer;", )); }

    static Block getBlockFromName(String arg0) { return Block(*javaClass->invokeStaticMethod<jobject>(this->object, "getBlockFromName", "(Ljava.lang.String;)Lnet.minecraft.block.Block;", arg0)); }

    String getLocalizedName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLocalizedName", "()Ljava.lang.String;", )); }

    static Block getBlockById(int arg0) { return Block(*javaClass->invokeStaticMethod<jobject>(this->object, "getBlockById", "(I)Lnet.minecraft.block.Block;", arg0)); }

    IBlockState getStateFromMeta(int arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getStateFromMeta", "(I)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    bool isFullBlock() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFullBlock", "()Z", )); }

    bool isTranslucent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTranslucent", "()Z", )); }

    MapColor getMapColor(IBlockState arg0) { return MapColor(*javaClass->invokeMethod<jobject>(this->object, "getMapColor", "(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.block.material.MapColor;", arg0)); }

    void setBlockBounds(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "setBlockBounds", "(FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool isOpaqueCube() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpaqueCube", "()Z", )); }

    BlockState createBlockState() { return BlockState(*javaClass->invokeMethod<jobject>(this->object, "createBlockState", "()Lnet.minecraft.block.state.BlockState;", )); }

    void setDefaultState(IBlockState arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultState", "(Lnet.minecraft.block.state.IBlockState;)V", arg0)); }

    Block setStepSound(Block_SoundType arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setStepSound", "(Lnet.minecraft.block.Block$SoundType;)Lnet.minecraft.block.Block;", arg0)); }

    Block setLightOpacity(int arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setLightOpacity", "(I)Lnet.minecraft.block.Block;", arg0)); }

    Block setLightLevel(float arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setLightLevel", "(F)Lnet.minecraft.block.Block;", arg0)); }

    Block setResistance(float arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setResistance", "(F)Lnet.minecraft.block.Block;", arg0)); }

    bool canProvidePower() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canProvidePower", "()Z", )); }

    Block setHardness(float arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setHardness", "(F)Lnet.minecraft.block.Block;", arg0)); }

    Block setBlockUnbreakable() { return Block(*javaClass->invokeMethod<jobject>(this->object, "setBlockUnbreakable", "()Lnet.minecraft.block.Block;", )); }

    float getBlockHardness(World arg0, BlockPos arg1) { return float(*javaClass->invokeMethod<float>(this->object, "getBlockHardness", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)F", arg0, arg1)); }

    Block setTickRandomly(bool arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setTickRandomly", "(Z)Lnet.minecraft.block.Block;", arg0)); }

    bool hasTileEntity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasTileEntity", "()Z", )); }

    int getMixedBrightnessForBlock(IBlockAccess arg0, BlockPos arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getMixedBrightnessForBlock", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)I", arg0, arg1)); }

    bool shouldSideBeRendered(IBlockAccess arg0, BlockPos arg1, EnumFacing arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldSideBeRendered", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z", arg0, arg1, arg2)); }

    bool isBlockSolid(IBlockAccess arg0, BlockPos arg1, EnumFacing arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockSolid", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z", arg0, arg1, arg2)); }

    AxisAlignedBB getSelectedBoundingBox(World arg0, BlockPos arg1) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "getSelectedBoundingBox", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1)); }

    bool isCollidable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCollidable", "()Z", )); }

    void onBlockDestroyedByPlayer(World arg0, BlockPos arg1, IBlockState arg2) { (*javaClass->invokeMethod<void>(this->object, "onBlockDestroyedByPlayer", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V", arg0, arg1, arg2)); }

    void onBlockAdded(World arg0, BlockPos arg1, IBlockState arg2) { (*javaClass->invokeMethod<void>(this->object, "onBlockAdded", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V", arg0, arg1, arg2)); }

    int quantityDropped(Random arg0) { return int(*javaClass->invokeMethod<int>(this->object, "quantityDropped", "(Ljava.util.Random;)I", arg0)); }

    Item getItemDropped(IBlockState arg0, Random arg1, int arg2) { return Item(*javaClass->invokeMethod<jobject>(this->object, "getItemDropped", "(Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;I)Lnet.minecraft.item.Item;", arg0, arg1, arg2)); }

    void dropBlockAsItemWithChance(World arg0, BlockPos arg1, IBlockState arg2, float arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "dropBlockAsItemWithChance", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;FI)V", arg0, arg1, arg2, arg3, arg4)); }

    int quantityDroppedWithBonus(int arg0, Random arg1) { return int(*javaClass->invokeMethod<int>(this->object, "quantityDroppedWithBonus", "(ILjava.util.Random;)I", arg0, arg1)); }

    int damageDropped(IBlockState arg0) { return int(*javaClass->invokeMethod<int>(this->object, "damageDropped", "(Lnet.minecraft.block.state.IBlockState;)I", arg0)); }

    static void spawnAsEntity(World arg0, BlockPos arg1, ItemStack arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "spawnAsEntity", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.item.ItemStack;)V", arg0, arg1, arg2)); }

    void dropXpOnBlockBreak(World arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "dropXpOnBlockBreak", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    void setBlockBoundsBasedOnState(IBlockAccess arg0, BlockPos arg1) { (*javaClass->invokeMethod<void>(this->object, "setBlockBoundsBasedOnState", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)V", arg0, arg1)); }

    bool isVecInsideYZBounds(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInsideYZBounds", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    bool isVecInsideXZBounds(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInsideXZBounds", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    bool isVecInsideXYBounds(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInsideXYBounds", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    bool canPlaceBlockOnSide(World arg0, BlockPos arg1, EnumFacing arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPlaceBlockOnSide", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z", arg0, arg1, arg2)); }

    bool onBlockActivated(World arg0, BlockPos arg1, IBlockState arg2, EntityPlayer arg3, EnumFacing arg4, float arg5, float arg6, float arg7) { return bool(*javaClass->invokeMethod<boolean>(this->object, "onBlockActivated", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.EnumFacing;FFF)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    IBlockState onBlockPlaced(World arg0, BlockPos arg1, EnumFacing arg2, float arg3, float arg4, float arg5, int arg6, EntityLivingBase arg7) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "onBlockPlaced", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;FFFILnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.block.state.IBlockState;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    void onBlockClicked(World arg0, BlockPos arg1, EntityPlayer arg2) { (*javaClass->invokeMethod<void>(this->object, "onBlockClicked", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.player.EntityPlayer;)V", arg0, arg1, arg2)); }

    double getBlockBoundsMinX() { return double(*javaClass->invokeMethod<double>(this->object, "getBlockBoundsMinX", "()D", )); }

    double getBlockBoundsMaxX() { return double(*javaClass->invokeMethod<double>(this->object, "getBlockBoundsMaxX", "()D", )); }

    double getBlockBoundsMinY() { return double(*javaClass->invokeMethod<double>(this->object, "getBlockBoundsMinY", "()D", )); }

    double getBlockBoundsMaxY() { return double(*javaClass->invokeMethod<double>(this->object, "getBlockBoundsMaxY", "()D", )); }

    double getBlockBoundsMinZ() { return double(*javaClass->invokeMethod<double>(this->object, "getBlockBoundsMinZ", "()D", )); }

    double getBlockBoundsMaxZ() { return double(*javaClass->invokeMethod<double>(this->object, "getBlockBoundsMaxZ", "()D", )); }

    int getBlockColor() { return int(*javaClass->invokeMethod<int>(this->object, "getBlockColor", "()I", )); }

    int getRenderColor(IBlockState arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRenderColor", "(Lnet.minecraft.block.state.IBlockState;)I", arg0)); }

    int colorMultiplier(IBlockAccess arg0, BlockPos arg1) { return int(*javaClass->invokeMethod<int>(this->object, "colorMultiplier", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)I", arg0, arg1)); }

    int colorMultiplier(IBlockAccess arg0, BlockPos arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "colorMultiplier", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;I)I", arg0, arg1, arg2)); }

    void harvestBlock(World arg0, EntityPlayer arg1, BlockPos arg2, IBlockState arg3, TileEntity arg4) { (*javaClass->invokeMethod<void>(this->object, "harvestBlock", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.tileentity.TileEntity;)V", arg0, arg1, arg2, arg3, arg4)); }

    bool canSilkHarvest() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSilkHarvest", "()Z", )); }

    ItemStack createStackedBlock(IBlockState arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "createStackedBlock", "(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.item.ItemStack;", arg0)); }

    void onBlockPlacedBy(World arg0, BlockPos arg1, IBlockState arg2, EntityLivingBase arg3, ItemStack arg4) { (*javaClass->invokeMethod<void>(this->object, "onBlockPlacedBy", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.item.ItemStack;)V", arg0, arg1, arg2, arg3, arg4)); }

    bool getEnableStats() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getEnableStats", "()Z", )); }

    Block disableStats() { return Block(*javaClass->invokeMethod<jobject>(this->object, "disableStats", "()Lnet.minecraft.block.Block;", )); }

    int getMobilityFlag() { return int(*javaClass->invokeMethod<int>(this->object, "getMobilityFlag", "()I", )); }

    void getSubBlocks(Item arg0, CreativeTabs arg1, List arg2) { (*javaClass->invokeMethod<void>(this->object, "getSubBlocks", "(Lnet.minecraft.item.Item;Lnet.minecraft.creativetab.CreativeTabs;Ljava.util.List;)V", arg0, arg1, arg2)); }

    CreativeTabs getCreativeTabToDisplayOn() { return CreativeTabs(*javaClass->invokeMethod<jobject>(this->object, "getCreativeTabToDisplayOn", "()Lnet.minecraft.creativetab.CreativeTabs;", )); }

    void onBlockHarvested(World arg0, BlockPos arg1, IBlockState arg2, EntityPlayer arg3) { (*javaClass->invokeMethod<void>(this->object, "onBlockHarvested", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.entity.player.EntityPlayer;)V", arg0, arg1, arg2, arg3)); }

    bool canDropFromExplosion(Explosion arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDropFromExplosion", "(Lnet.minecraft.world.Explosion;)Z", arg0)); }

    bool isAssociatedBlock(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAssociatedBlock", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    int getComparatorInputOverride(World arg0, BlockPos arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getComparatorInputOverride", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)I", arg0, arg1)); }

    IBlockState getStateForEntityRender(IBlockState arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getStateForEntityRender", "(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    Block_EnumOffsetType getOffsetType() { return Block_EnumOffsetType(*javaClass->invokeMethod<jobject>(this->object, "getOffsetType", "()Lnet.minecraft.block.Block$EnumOffsetType;", )); }

    static void registerBlocks() { (*javaClass->invokeStaticMethod<void>(this->object, "registerBlocks", "()V", )); }

    void fillWithRain(World arg0, BlockPos arg1) { (*javaClass->invokeMethod<void>(this->object, "fillWithRain", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)V", arg0, arg1)); }

    bool getTickRandomly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getTickRandomly", "()Z", )); }

    bool requiresUpdates() { return bool(*javaClass->invokeMethod<boolean>(this->object, "requiresUpdates", "()Z", )); }

    bool isNormalCube() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNormalCube", "()Z", )); }

    Block setUnlocalizedName(String arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setUnlocalizedName", "(Ljava.lang.String;)Lnet.minecraft.block.Block;", arg0)); }

    String getUnlocalizedName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava.lang.String;", )); }

    Block setCreativeTab(CreativeTabs arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "setCreativeTab", "(Lnet.minecraft.creativetab.CreativeTabs;)Lnet.minecraft.block.Block;", arg0)); }

    BlockState getBlockState() { return BlockState(*javaClass->invokeMethod<jobject>(this->object, "getBlockState", "()Lnet.minecraft.block.state.BlockState;", )); }

    Material getMaterial() { return Material(*javaClass->invokeMethod<jobject>(this->object, "getMaterial", "()Lnet.minecraft.block.material.Material;", )); }

    bool isFlowerPot() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlowerPot", "()Z", )); }

    static Block getBlockFromItem(Item arg0) { return Block(*javaClass->invokeStaticMethod<jobject>(this->object, "getBlockFromItem", "(Lnet.minecraft.item.Item;)Lnet.minecraft.block.Block;", arg0)); }

    int getDamageValue(World arg0, BlockPos arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getDamageValue", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)I", arg0, arg1)); }

    bool func_181623_g() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181623_g", "()Z", )); }

    bool isPassable(IBlockAccess arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPassable", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    int tickRate(World arg0) { return int(*javaClass->invokeMethod<int>(this->object, "tickRate", "(Lnet.minecraft.world.World;)I", arg0)); }

    void breakBlock(World arg0, BlockPos arg1, IBlockState arg2) { (*javaClass->invokeMethod<void>(this->object, "breakBlock", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V", arg0, arg1, arg2)); }

    void randomTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (*javaClass->invokeMethod<void>(this->object, "randomTick", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V", arg0, arg1, arg2, arg3)); }

    static bool isEqualTo(Block arg0, Block arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isEqualTo", "(Lnet.minecraft.block.Block;Lnet.minecraft.block.Block;)Z", arg0, arg1)); }

    static int getStateId(IBlockState arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getStateId", "(Lnet.minecraft.block.state.IBlockState;)I", arg0)); }

    void onLanded(World arg0, Entity arg1) { (*javaClass->invokeMethod<void>(this->object, "onLanded", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.Entity;)V", arg0, arg1)); }

    void updateTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (*javaClass->invokeMethod<void>(this->object, "updateTick", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V", arg0, arg1, arg2, arg3)); }

    bool isFullCube() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFullCube", "()Z", )); }

    bool canReplace(World arg0, BlockPos arg1, EnumFacing arg2, ItemStack arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canReplace", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1, arg2, arg3)); }

    float getPlayerRelativeBlockHardness(EntityPlayer arg0, World arg1, BlockPos arg2) { return float(*javaClass->invokeMethod<float>(this->object, "getPlayerRelativeBlockHardness", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)F", arg0, arg1, arg2)); }

    void onBlockDestroyedByExplosion(World arg0, BlockPos arg1, Explosion arg2) { (*javaClass->invokeMethod<void>(this->object, "onBlockDestroyedByExplosion", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.Explosion;)V", arg0, arg1, arg2)); }

    void setBlockBoundsForItemRender() { (*javaClass->invokeMethod<void>(this->object, "setBlockBoundsForItemRender", "()V", )); }

    float getAmbientOcclusionLightValue() { return float(*javaClass->invokeMethod<float>(this->object, "getAmbientOcclusionLightValue", "()F", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Item getItem(World arg0, BlockPos arg1) { return Item(*javaClass->invokeMethod<jobject>(this->object, "getItem", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.item.Item;", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.block.state.IBlockState
 * Package name: net.minecraft.block.state
 */
class IBlockState : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.block.state.IBlockState";
public:
    STATICINITIALIZE;

    IBlockState(jobject object) : JavaObject(object) {}

    Collection getPropertyNames() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getPropertyNames", "()Ljava.util.Collection;", )); }

    IBlockState cycleProperty(IProperty arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "cycleProperty", "(Lnet.minecraft.block.properties.IProperty;)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    IBlockState withProperty(IProperty arg0, Comparable arg1) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "withProperty", "(Lnet.minecraft.block.properties.IProperty;Ljava.lang.Comparable;)Lnet.minecraft.block.state.IBlockState;", arg0, arg1)); }

    Block getBlock() { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "()Lnet.minecraft.block.Block;", )); }

    Comparable getValue(IProperty arg0) { return Comparable(*javaClass->invokeMethod<jobject>(this->object, "getValue", "(Lnet.minecraft.block.properties.IProperty;)Ljava.lang.Comparable;", arg0)); }

    ImmutableMap getProperties() { return ImmutableMap(*javaClass->invokeMethod<jobject>(this->object, "getProperties", "()Lcom.google.common.collect.ImmutableMap;", )); }

};


/**
 * Classpath: net.minecraft.block.properties.IProperty
 * Package name: net.minecraft.block.properties
 */
class IProperty : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.block.properties.IProperty";
public:
    STATICINITIALIZE;

    IProperty(jobject object) : JavaObject(object) {}

    Collection getAllowedValues() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getAllowedValues", "()Ljava.util.Collection;", )); }

    Class getValueClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getValueClass", "()Ljava.lang.Class;", )); }

    String getName(Comparable arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "(Ljava.lang.Comparable;)Ljava.lang.String;", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.lang.Comparable
 * Package name: java.lang
 */
class Comparable : public JavaObject {
protected:
    const inline static char *className = "java.lang.Comparable";
public:
    STATICINITIALIZE;

    Comparable(jobject object) : JavaObject(object) {}

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMap
 * Package name: com.google.common.collect
 */
class ImmutableMap : public Object {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMap";
public:
    STATICINITIALIZE;

    ImmutableMap(jobject object) : JavaObject(object) {}

    static void checkNoConflict(bool arg0, String arg1, Map_Entry arg2, Map_Entry arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "checkNoConflict", "(ZLjava.lang.String;Ljava.util.Map$Entry;Ljava.util.Map$Entry;)V", arg0, arg1, arg2, arg3)); }

    static ImmutableMap copyOfEnumMapUnsafe(Map arg0) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOfEnumMapUnsafe", "(Ljava.util.Map;)Lcom.google.common.collect.ImmutableMap;", arg0)); }

    static ImmutableMap copyOfEnumMap(Map arg0) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOfEnumMap", "(Ljava.util.Map;)Lcom.google.common.collect.ImmutableMap;", arg0)); }

    ImmutableSet createEntrySet() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "createEntrySet", "()Lcom.google.common.collect.ImmutableSet;", )); }

    ImmutableSet createKeySet() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "createKeySet", "()Lcom.google.common.collect.ImmutableSet;", )); }

    ImmutableSetMultimap createMultimapView() { return ImmutableSetMultimap(*javaClass->invokeMethod<jobject>(this->object, "createMultimapView", "()Lcom.google.common.collect.ImmutableSetMultimap;", )); }

    bool isPartialView() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPartialView", "()Z", )); }

    static ImmutableMapEntry_TerminalEntry entryOf(Object arg0, Object arg1) { return ImmutableMapEntry_TerminalEntry(*javaClass->invokeStaticMethod<jobject>(this->object, "entryOf", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMapEntry$TerminalEntry;", arg0, arg1)); }

    ImmutableSetMultimap asMultimap() { return ImmutableSetMultimap(*javaClass->invokeMethod<jobject>(this->object, "asMultimap", "()Lcom.google.common.collect.ImmutableSetMultimap;", )); }

    ImmutableMap viewMapValuesAsSingletonSets() { return ImmutableMap(*javaClass->invokeMethod<jobject>(this->object, "viewMapValuesAsSingletonSets", "()Lcom.google.common.collect.ImmutableMap;", )); }

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    ImmutableCollection values() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ImmutableMap copyOf(Map arg0) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Map;)Lcom.google.common.collect.ImmutableMap;", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    static ImmutableMap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMap;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static ImmutableMap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMap;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static ImmutableMap of(Object arg0, Object arg1, Object arg2, Object arg3) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMap;", arg0, arg1, arg2, arg3)); }

    static ImmutableMap of(Object arg0, Object arg1) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMap;", arg0, arg1)); }

    static ImmutableMap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMap;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static ImmutableMap of() { return ImmutableMap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Lcom.google.common.collect.ImmutableMap;", )); }

    static ImmutableMap_Builder builder() { return ImmutableMap_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Lcom.google.common.collect.ImmutableMap$Builder;", )); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    ImmutableSet entrySet() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Lcom.google.common.collect.ImmutableSet;", )); }

    void putAll(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "putAll", "(Ljava.util.Map;)V", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    ImmutableSet keySet() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Lcom.google.common.collect.ImmutableSet;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: [Ljava.lang.Enum;
 */
class Enum_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Enum;";
public:
    STATICINITIALIZE;

    Enum_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.util.AbstractCollection
 * Package name: java.util
 */
class AbstractCollection : public Object {
protected:
    const inline static char *className = "java.util.AbstractCollection";
public:
    STATICINITIALIZE;

    AbstractCollection(jobject object) : JavaObject(object) {}

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

};


/**
 * Classpath: com.google.common.collect.UnmodifiableIterator
 * Package name: com.google.common.collect
 */
class UnmodifiableIterator : public Object {
protected:
    const inline static char *className = "com.google.common.collect.UnmodifiableIterator";
public:
    STATICINITIALIZE;

    UnmodifiableIterator(jobject object) : JavaObject(object) {}

    void remove() { (*javaClass->invokeMethod<void>(this->object, "remove", "()V", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableCollection$Builder
 * Enclosing class: com.google.common.collect.ImmutableCollection
 * Package name: com.google.common.collect
 */
class ImmutableCollection_Builder : public Object {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableCollection$Builder";
public:
    STATICINITIALIZE;

    ImmutableCollection_Builder(jobject object) : JavaObject(object) {}

    static int expandedCapacity(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "expandedCapacity", "(II)I", arg0, arg1)); }

    ImmutableCollection_Builder add(Object_interface arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder add(Object arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterator arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterable arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection build() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableCollection;", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableCollection
 * Package name: com.google.common.collect
 */
class ImmutableCollection : public AbstractCollection {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableCollection";
public:
    STATICINITIALIZE;

    ImmutableCollection(jobject object) : JavaObject(object) {}

    ImmutableList createAsList() { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "createAsList", "()Lcom.google.common.collect.ImmutableList;", )); }

    int copyIntoArray(Object_interface arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "copyIntoArray", "([Ljava.lang.Object;I)I", arg0, arg1)); }

    bool isPartialView() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPartialView", "()Z", )); }

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    UnmodifiableIterator iterator() { return UnmodifiableIterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Lcom.google.common.collect.UnmodifiableIterator;", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    ImmutableList asList() { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "asList", "()Lcom.google.common.collect.ImmutableList;", )); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableList
 * Package name: com.google.common.collect
 */
class ImmutableList : public ImmutableCollection {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableList";
public:
    STATICINITIALIZE;

    ImmutableList(jobject object) : JavaObject(object) {}

    int copyIntoArray(Object_interface arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "copyIntoArray", "([Ljava.lang.Object;I)I", arg0, arg1)); }

    static ImmutableList asImmutableList(Object_interface arg0) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "asImmutableList", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0)); }

    static ImmutableList asImmutableList(Object_interface arg0, int arg1) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "asImmutableList", "([Ljava.lang.Object;I)Lcom.google.common.collect.ImmutableList;", arg0, arg1)); }

    ImmutableList subListUnchecked(int arg0, int arg1) { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "subListUnchecked", "(II)Lcom.google.common.collect.ImmutableList;", arg0, arg1)); }

    static ImmutableList construct(Object_interface arg0) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "construct", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0)); }

    void add(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(ILjava.lang.Object;)V", arg0, arg1)); }

    Object remove(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(I)Ljava.lang.Object;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ImmutableList copyOf(Collection arg0) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Collection;)Lcom.google.common.collect.ImmutableList;", arg0)); }

    static ImmutableList copyOf(Iterable arg0) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableList;", arg0)); }

    static ImmutableList copyOf(Iterator arg0) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableList;", arg0)); }

    static ImmutableList copyOf(Object_interface arg0) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0)); }

    int indexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.Object;)I", arg0)); }

    int lastIndexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.Object;)I", arg0)); }

    List subList(int arg0, int arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "subList", "(II)Ljava.util.List;", arg0, arg1)); }

    ImmutableList subList(int arg0, int arg1) { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "subList", "(II)Lcom.google.common.collect.ImmutableList;", arg0, arg1)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    UnmodifiableIterator iterator() { return UnmodifiableIterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Lcom.google.common.collect.UnmodifiableIterator;", )); }

    static ImmutableList of() { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Lcom.google.common.collect.ImmutableList;", )); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static ImmutableList of(Object arg0) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0)); }

    static ImmutableList of(Object arg0, Object arg1) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object_interface arg12) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    static ImmutableList of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return ImmutableList(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static ImmutableList_Builder builder() { return ImmutableList_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Lcom.google.common.collect.ImmutableList$Builder;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    bool addAll(int arg0, Collection arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(ILjava.util.Collection;)Z", arg0, arg1)); }

    Object set(int arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "set", "(ILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    ImmutableList asList() { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "asList", "()Lcom.google.common.collect.ImmutableList;", )); }

    ImmutableList reverse() { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "reverse", "()Lcom.google.common.collect.ImmutableList;", )); }

    ListIterator listIterator(int arg0) { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "(I)Ljava.util.ListIterator;", arg0)); }

    UnmodifiableListIterator listIterator(int arg0) { return UnmodifiableListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "(I)Lcom.google.common.collect.UnmodifiableListIterator;", arg0)); }

    ListIterator listIterator() { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "()Ljava.util.ListIterator;", )); }

    UnmodifiableListIterator listIterator() { return UnmodifiableListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "()Lcom.google.common.collect.UnmodifiableListIterator;", )); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder
 * Enclosing class: com.google.common.collect.ImmutableCollection
 * Package name: com.google.common.collect
 */
class ImmutableCollection_ArrayBasedBuilder : public ImmutableCollection_Builder {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder";
public:
    STATICINITIALIZE;

    ImmutableCollection_ArrayBasedBuilder(jobject object) : JavaObject(object) {}

    ImmutableCollection_Builder add(Object arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder add(Object_interface arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_ArrayBasedBuilder add(Object arg0) { return ImmutableCollection_ArrayBasedBuilder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$ArrayBasedBuilder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterable arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

};


/**
 * Classpath: com.google.common.collect.UnmodifiableListIterator
 * Package name: com.google.common.collect
 */
class UnmodifiableListIterator : public UnmodifiableIterator {
protected:
    const inline static char *className = "com.google.common.collect.UnmodifiableListIterator";
public:
    STATICINITIALIZE;

    UnmodifiableListIterator(jobject object) : JavaObject(object) {}

    void add(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.Object;)V", arg0)); }

    void set(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMultiset
 * Package name: com.google.common.collect
 */
class ImmutableMultiset : public ImmutableCollection {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMultiset";
public:
    STATICINITIALIZE;

    ImmutableMultiset(jobject object) : JavaObject(object) {}

    int copyIntoArray(Object_interface arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "copyIntoArray", "([Ljava.lang.Object;I)I", arg0, arg1)); }

    static ImmutableMultiset copyOfInternal(Multiset arg0) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOfInternal", "(Lcom.google.common.collect.Multiset;)Lcom.google.common.collect.ImmutableMultiset;", arg0)); }

    static ImmutableMultiset copyOfInternal(Object_interface arg0) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOfInternal", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0)); }

    static ImmutableMultiset copyFromEntries(Collection arg0) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "copyFromEntries", "(Ljava.util.Collection;)Lcom.google.common.collect.ImmutableMultiset;", arg0)); }

    ImmutableSet createEntrySet() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "createEntrySet", "()Lcom.google.common.collect.ImmutableSet;", )); }

    int setCount(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "setCount", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    bool setCount(Object arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setCount", "(Ljava.lang.Object;II)Z", arg0, arg1, arg2)); }

    int add(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "add", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    int remove(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "remove", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ImmutableMultiset copyOf(Iterable arg0) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableMultiset;", arg0)); }

    static ImmutableMultiset copyOf(Object_interface arg0) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0)); }

    static ImmutableMultiset copyOf(Iterator arg0) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableMultiset;", arg0)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    UnmodifiableIterator iterator() { return UnmodifiableIterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Lcom.google.common.collect.UnmodifiableIterator;", )); }

    static ImmutableMultiset of(Object arg0, Object arg1, Object arg2, Object arg3) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0, arg1, arg2, arg3)); }

    static ImmutableMultiset of(Object arg0, Object arg1, Object arg2) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0, arg1, arg2)); }

    static ImmutableMultiset of(Object arg0, Object arg1) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0, arg1)); }

    static ImmutableMultiset of(Object arg0) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0)); }

    static ImmutableMultiset of() { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Lcom.google.common.collect.ImmutableMultiset;", )); }

    static ImmutableMultiset of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object_interface arg6) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static ImmutableMultiset of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { return ImmutableMultiset(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset;", arg0, arg1, arg2, arg3, arg4)); }

    static ImmutableMultiset_Builder builder() { return ImmutableMultiset_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Lcom.google.common.collect.ImmutableMultiset$Builder;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    ImmutableSet entrySet() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Lcom.google.common.collect.ImmutableSet;", )); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    Multiset_Entry getEntry(int arg0) { return Multiset_Entry(*javaClass->invokeMethod<jobject>(this->object, "getEntry", "(I)Lcom.google.common.collect.Multiset$Entry;", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMultiset$Builder
 * Enclosing class: com.google.common.collect.ImmutableMultiset
 * Package name: com.google.common.collect
 */
class ImmutableMultiset_Builder : public ImmutableCollection_Builder {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMultiset$Builder";
public:
    STATICINITIALIZE;

    ImmutableMultiset_Builder(jobject object) : JavaObject(object) {}

    ImmutableMultiset_Builder setCount(Object arg0, int arg1) { return ImmutableMultiset_Builder(*javaClass->invokeMethod<jobject>(this->object, "setCount", "(Ljava.lang.Object;I)Lcom.google.common.collect.ImmutableMultiset$Builder;", arg0, arg1)); }

    ImmutableMultiset_Builder addCopies(Object arg0, int arg1) { return ImmutableMultiset_Builder(*javaClass->invokeMethod<jobject>(this->object, "addCopies", "(Ljava.lang.Object;I)Lcom.google.common.collect.ImmutableMultiset$Builder;", arg0, arg1)); }

    ImmutableCollection_Builder add(Object_interface arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder add(Object arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableMultiset_Builder add(Object arg0) { return ImmutableMultiset_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset$Builder;", arg0)); }

    ImmutableMultiset_Builder add(Object_interface arg0) { return ImmutableMultiset_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultiset$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterable arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterator arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableMultiset_Builder addAll(Iterator arg0) { return ImmutableMultiset_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableMultiset$Builder;", arg0)); }

    ImmutableMultiset_Builder addAll(Iterable arg0) { return ImmutableMultiset_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableMultiset$Builder;", arg0)); }

    ImmutableMultiset build() { return ImmutableMultiset(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableMultiset;", )); }

    ImmutableCollection build() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableCollection;", )); }

};


/**
 * Classpath: com.google.common.collect.Multiset$Entry
 * Enclosing class: com.google.common.collect.Multiset
 * Package name: com.google.common.collect
 */
class Multiset_Entry : public JavaObject {
protected:
    const inline static char *className = "com.google.common.collect.Multiset$Entry";
public:
    STATICINITIALIZE;

    Multiset_Entry(jobject object) : JavaObject(object) {}

    Object getElement() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getElement", "()Ljava.lang.Object;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getCount() { return int(*javaClass->invokeMethod<int>(this->object, "getCount", "()I", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMultimap$Builder
 * Enclosing class: com.google.common.collect.ImmutableMultimap
 * Package name: com.google.common.collect
 */
class ImmutableMultimap_Builder : public Object {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMultimap$Builder";
public:
    STATICINITIALIZE;

    ImmutableMultimap_Builder(jobject object) : JavaObject(object) {}

    ImmutableMultimap_Builder orderKeysBy(Comparator arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "orderKeysBy", "(Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder orderValuesBy(Comparator arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "orderValuesBy", "(Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder put(Map_Entry arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.util.Map$Entry;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder put(Object arg0, Object arg1) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0, arg1)); }

    ImmutableMultimap_Builder putAll(Multimap arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Lcom.google.common.collect.Multimap;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder putAll(Object arg0, Object_interface arg1) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Ljava.lang.Object;[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0, arg1)); }

    ImmutableMultimap_Builder putAll(Object arg0, Iterable arg1) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Ljava.lang.Object;Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0, arg1)); }

    ImmutableMultimap build() { return ImmutableMultimap(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableMultimap;", )); }

};


/**
 * Classpath: com.google.common.collect.AbstractMultimap
 * Package name: com.google.common.collect
 */
class AbstractMultimap : public Object {
protected:
    const inline static char *className = "com.google.common.collect.AbstractMultimap";
public:
    STATICINITIALIZE;

    AbstractMultimap(jobject object) : JavaObject(object) {}

    Iterator valueIterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "valueIterator", "()Ljava.util.Iterator;", )); }

    Map createAsMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "createAsMap", "()Ljava.util.Map;", )); }

    Collection createEntries() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "createEntries", "()Ljava.util.Collection;", )); }

    Iterator entryIterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "entryIterator", "()Ljava.util.Iterator;", )); }

    Collection createValues() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "createValues", "()Ljava.util.Collection;", )); }

    Set createKeySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "createKeySet", "()Ljava.util.Set;", )); }

    bool containsEntry(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsEntry", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Collection replaceValues(Object arg0, Iterable arg1) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Ljava.util.Collection;", arg0, arg1)); }

    Multiset createKeys() { return Multiset(*javaClass->invokeMethod<jobject>(this->object, "createKeys", "()Lcom.google.common.collect.Multiset;", )); }

    Map asMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "asMap", "()Ljava.util.Map;", )); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool put(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    bool putAll(Multimap arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Lcom.google.common.collect.Multimap;)Z", arg0)); }

    bool putAll(Object arg0, Iterable arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Ljava.lang.Object;Ljava.lang.Iterable;)Z", arg0, arg1)); }

    Multiset keys() { return Multiset(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Lcom.google.common.collect.Multiset;", )); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Collection entries() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Ljava.util.Collection;", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableSetMultimap$Builder
 * Enclosing class: com.google.common.collect.ImmutableSetMultimap
 * Package name: com.google.common.collect
 */
class ImmutableSetMultimap_Builder : public ImmutableMultimap_Builder {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableSetMultimap$Builder";
public:
    STATICINITIALIZE;

    ImmutableSetMultimap_Builder(jobject object) : JavaObject(object) {}

    ImmutableMultimap_Builder orderKeysBy(Comparator arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "orderKeysBy", "(Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableSetMultimap_Builder orderKeysBy(Comparator arg0) { return ImmutableSetMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "orderKeysBy", "(Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableSetMultimap$Builder;", arg0)); }

    ImmutableSetMultimap_Builder orderValuesBy(Comparator arg0) { return ImmutableSetMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "orderValuesBy", "(Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableSetMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder orderValuesBy(Comparator arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "orderValuesBy", "(Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder put(Map_Entry arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.util.Map$Entry;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder put(Object arg0, Object arg1) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0, arg1)); }

    ImmutableSetMultimap_Builder put(Map_Entry arg0) { return ImmutableSetMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.util.Map$Entry;)Lcom.google.common.collect.ImmutableSetMultimap$Builder;", arg0)); }

    ImmutableSetMultimap_Builder put(Object arg0, Object arg1) { return ImmutableSetMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSetMultimap$Builder;", arg0, arg1)); }

    ImmutableMultimap_Builder putAll(Object arg0, Object_interface arg1) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Ljava.lang.Object;[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0, arg1)); }

    ImmutableMultimap_Builder putAll(Multimap arg0) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Lcom.google.common.collect.Multimap;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0)); }

    ImmutableMultimap_Builder putAll(Object arg0, Iterable arg1) { return ImmutableMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Ljava.lang.Object;Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableMultimap$Builder;", arg0, arg1)); }

    ImmutableSetMultimap_Builder putAll(Multimap arg0) { return ImmutableSetMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Lcom.google.common.collect.Multimap;)Lcom.google.common.collect.ImmutableSetMultimap$Builder;", arg0)); }

    ImmutableSetMultimap_Builder putAll(Object arg0, Object_interface arg1) { return ImmutableSetMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Ljava.lang.Object;[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSetMultimap$Builder;", arg0, arg1)); }

    ImmutableSetMultimap_Builder putAll(Object arg0, Iterable arg1) { return ImmutableSetMultimap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Ljava.lang.Object;Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableSetMultimap$Builder;", arg0, arg1)); }

    ImmutableMultimap build() { return ImmutableMultimap(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableMultimap;", )); }

    ImmutableSetMultimap build() { return ImmutableSetMultimap(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableSetMultimap;", )); }

};


/**
 * Classpath: com.google.common.collect.AbstractMapEntry
 * Package name: com.google.common.collect
 */
class AbstractMapEntry : public Object {
protected:
    const inline static char *className = "com.google.common.collect.AbstractMapEntry";
public:
    STATICINITIALIZE;

    AbstractMapEntry(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object getValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.Object;", )); }

    Object getKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getKey", "()Ljava.lang.Object;", )); }

    Object setValue(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "setValue", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMap$Builder
 * Enclosing class: com.google.common.collect.ImmutableMap
 * Package name: com.google.common.collect
 */
class ImmutableMap_Builder : public Object {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMap$Builder";
public:
    STATICINITIALIZE;

    ImmutableMap_Builder(jobject object) : JavaObject(object) {}

    ImmutableMap_Builder put(Object arg0, Object arg1) { return ImmutableMap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMap$Builder;", arg0, arg1)); }

    ImmutableMap_Builder put(Map_Entry arg0) { return ImmutableMap_Builder(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.util.Map$Entry;)Lcom.google.common.collect.ImmutableMap$Builder;", arg0)); }

    ImmutableMap_Builder putAll(Map arg0) { return ImmutableMap_Builder(*javaClass->invokeMethod<jobject>(this->object, "putAll", "(Ljava.util.Map;)Lcom.google.common.collect.ImmutableMap$Builder;", arg0)); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    ImmutableMap build() { return ImmutableMap(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableMap;", )); }

};


/**
 * Classpath: net.minecraft.world.World
 * Package name: net.minecraft.world
 */
class World : public Object {
protected:
    const inline static char *className = "net.minecraft.world.World";
public:
    STATICINITIALIZE;

    World(jobject object) : JavaObject(object) {}

    List getCollidingBoundingBoxes(Entity arg0, AxisAlignedBB arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getCollidingBoundingBoxes", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;", arg0, arg1)); }

    bool isAnyLiquid(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnyLiquid", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    bool isFlammableWithin(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlammableWithin", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    bool isAreaLoaded(BlockPos arg0, BlockPos arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAreaLoaded", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;Z)Z", arg0, arg1, arg2)); }

    bool isAreaLoaded(StructureBoundingBox arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAreaLoaded", "(Lnet.minecraft.world.gen.structure.StructureBoundingBox;)Z", arg0)); }

    bool isAreaLoaded(BlockPos arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAreaLoaded", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    bool isAreaLoaded(BlockPos arg0, int arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAreaLoaded", "(Lnet.minecraft.util.BlockPos;IZ)Z", arg0, arg1, arg2)); }

    bool isAreaLoaded(BlockPos arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAreaLoaded", "(Lnet.minecraft.util.BlockPos;I)Z", arg0, arg1)); }

    bool isAreaLoaded(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, bool arg6) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAreaLoaded", "(IIIIIIZ)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    bool isAreaLoaded(StructureBoundingBox arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAreaLoaded", "(Lnet.minecraft.world.gen.structure.StructureBoundingBox;Z)Z", arg0, arg1)); }

    bool canLightningStrike(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canLightningStrike", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool handleMaterialAcceleration(AxisAlignedBB arg0, Material arg1, Entity arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleMaterialAcceleration", "(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.block.material.Material;Lnet.minecraft.entity.Entity;)Z", arg0, arg1, arg2)); }

    bool isMaterialInBB(AxisAlignedBB arg0, Material arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMaterialInBB", "(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.block.material.Material;)Z", arg0, arg1)); }

    int getCombinedLight(BlockPos arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getCombinedLight", "(Lnet.minecraft.util.BlockPos;I)I", arg0, arg1)); }

    float getLightBrightness(BlockPos arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getLightBrightness", "(Lnet.minecraft.util.BlockPos;)F", arg0)); }

    bool isBlockFullCube(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockFullCube", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    WorldInfo getWorldInfo() { return WorldInfo(*javaClass->invokeMethod<jobject>(this->object, "getWorldInfo", "()Lnet.minecraft.world.storage.WorldInfo;", )); }

    BlockPos getTopSolidOrLiquidBlock(BlockPos arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getTopSolidOrLiquidBlock", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;", arg0)); }

    BiomeGenBase getBiomeGenForCoords(BlockPos arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "getBiomeGenForCoords", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    WorldChunkManager getWorldChunkManager() { return WorldChunkManager(*javaClass->invokeMethod<jobject>(this->object, "getWorldChunkManager", "()Lnet.minecraft.world.biome.WorldChunkManager;", )); }

    IChunkProvider createChunkProvider() { return IChunkProvider(*javaClass->invokeMethod<jobject>(this->object, "createChunkProvider", "()Lnet.minecraft.world.chunk.IChunkProvider;", )); }

    Block getGroundAboveSeaLevel(BlockPos arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "getGroundAboveSeaLevel", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.Block;", arg0)); }

    int func_181545_F() { return int(*javaClass->invokeMethod<int>(this->object, "func_181545_F", "()I", )); }

    bool isChunkLoaded(int arg0, int arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isChunkLoaded", "(IIZ)Z", arg0, arg1, arg2)); }

    Chunk getChunkFromChunkCoords(int arg0, int arg1) { return Chunk(*javaClass->invokeMethod<jobject>(this->object, "getChunkFromChunkCoords", "(II)Lnet.minecraft.world.chunk.Chunk;", arg0, arg1)); }

    void markBlockForUpdate(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "markBlockForUpdate", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    bool setBlockToAir(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setBlockToAir", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool destroyBlock(BlockPos arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "destroyBlock", "(Lnet.minecraft.util.BlockPos;Z)Z", arg0, arg1)); }

    void markBlocksDirtyVertical(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "markBlocksDirtyVertical", "(IIII)V", arg0, arg1, arg2, arg3)); }

    bool checkLightFor(EnumSkyBlock arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkLightFor", "(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    void notifyBlockOfStateChange(BlockPos arg0, Block arg1) { (*javaClass->invokeMethod<void>(this->object, "notifyBlockOfStateChange", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V", arg0, arg1)); }

    bool isBlockTickPending(BlockPos arg0, Block arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockTickPending", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)Z", arg0, arg1)); }

    bool canBlockSeeSky(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBlockSeeSky", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    int getLightFromNeighbors(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getLightFromNeighbors", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    int getChunksLowestHorizon(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getChunksLowestHorizon", "(II)I", arg0, arg1)); }

    int getLightFromNeighborsFor(EnumSkyBlock arg0, BlockPos arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getLightFromNeighborsFor", "(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)I", arg0, arg1)); }

    int getLightFor(EnumSkyBlock arg0, BlockPos arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getLightFor", "(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)I", arg0, arg1)); }

    void setLightFor(EnumSkyBlock arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setLightFor", "(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    void notifyLightSet(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "notifyLightSet", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    void playSoundEffect(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "playSoundEffect", "(DDDLjava.lang.String;FF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool addWeatherEffect(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addWeatherEffect", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void onEntityAdded(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityAdded", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onEntityRemoved(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityRemoved", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void addWorldAccess(IWorldAccess arg0) { (*javaClass->invokeMethod<void>(this->object, "addWorldAccess", "(Lnet.minecraft.world.IWorldAccess;)V", arg0)); }

    void removeWorldAccess(IWorldAccess arg0) { (*javaClass->invokeMethod<void>(this->object, "removeWorldAccess", "(Lnet.minecraft.world.IWorldAccess;)V", arg0)); }

    bool isInsideBorder(WorldBorder arg0, Entity arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInsideBorder", "(Lnet.minecraft.world.border.WorldBorder;Lnet.minecraft.entity.Entity;)Z", arg0, arg1)); }

    float getCelestialAngle(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getCelestialAngle", "(F)F", arg0)); }

    float getRainStrength(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getRainStrength", "(F)F", arg0)); }

    float getThunderStrength(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getThunderStrength", "(F)F", arg0)); }

    float getSunBrightness(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getSunBrightness", "(F)F", arg0)); }

    Vec3 getSkyColor(Entity arg0, float arg1) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getSkyColor", "(Lnet.minecraft.entity.Entity;F)Lnet.minecraft.util.Vec3;", arg0, arg1)); }

    long getWorldTime() { return long(*javaClass->invokeMethod<long>(this->object, "getWorldTime", "()J", )); }

    int getMoonPhase() { return int(*javaClass->invokeMethod<int>(this->object, "getMoonPhase", "()I", )); }

    float getCurrentMoonPhaseFactor() { return float(*javaClass->invokeMethod<float>(this->object, "getCurrentMoonPhaseFactor", "()F", )); }

    float getCelestialAngleRadians(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getCelestialAngleRadians", "(F)F", arg0)); }

    Vec3 getCloudColour(float arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getCloudColour", "(F)Lnet.minecraft.util.Vec3;", arg0)); }

    Vec3 getFogColor(float arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getFogColor", "(F)Lnet.minecraft.util.Vec3;", arg0)); }

    BlockPos getPrecipitationHeight(BlockPos arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPrecipitationHeight", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;", arg0)); }

    float getStarBrightness(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getStarBrightness", "(F)F", arg0)); }

    void scheduleUpdate(BlockPos arg0, Block arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "scheduleUpdate", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;I)V", arg0, arg1, arg2)); }

    void updateBlockTick(BlockPos arg0, Block arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "updateBlockTick", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V", arg0, arg1, arg2, arg3)); }

    void scheduleBlockUpdate(BlockPos arg0, Block arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "scheduleBlockUpdate", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V", arg0, arg1, arg2, arg3)); }

    void updateEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "updateEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void removeTileEntity(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "removeTileEntity", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    bool addTileEntity(TileEntity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addTileEntity", "(Lnet.minecraft.tileentity.TileEntity;)Z", arg0)); }

    void addTileEntities(Collection arg0) { (*javaClass->invokeMethod<void>(this->object, "addTileEntities", "(Ljava.util.Collection;)V", arg0)); }

    bool checkNoEntityCollision(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkNoEntityCollision", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    bool checkNoEntityCollision(AxisAlignedBB arg0, Entity arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkNoEntityCollision", "(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.entity.Entity;)Z", arg0, arg1)); }

    bool checkBlockCollision(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkBlockCollision", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    bool isAABBInMaterial(AxisAlignedBB arg0, Material arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAABBInMaterial", "(Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.block.material.Material;)Z", arg0, arg1)); }

    Explosion createExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5) { return Explosion(*javaClass->invokeMethod<jobject>(this->object, "createExplosion", "(Lnet.minecraft.entity.Entity;DDDFZ)Lnet.minecraft.world.Explosion;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Explosion newExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5, bool arg6) { return Explosion(*javaClass->invokeMethod<jobject>(this->object, "newExplosion", "(Lnet.minecraft.entity.Entity;DDDFZZ)Lnet.minecraft.world.Explosion;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    float getBlockDensity(Vec3 arg0, AxisAlignedBB arg1) { return float(*javaClass->invokeMethod<float>(this->object, "getBlockDensity", "(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.AxisAlignedBB;)F", arg0, arg1)); }

    bool extinguishFire(EntityPlayer arg0, BlockPos arg1, EnumFacing arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "extinguishFire", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z", arg0, arg1, arg2)); }

    void playAuxSFXAtEntity(EntityPlayer arg0, int arg1, BlockPos arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "playAuxSFXAtEntity", "(Lnet.minecraft.entity.player.EntityPlayer;ILnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2, arg3)); }

    String getDebugLoadedEntities() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDebugLoadedEntities", "()Ljava.lang.String;", )); }

    String getProviderName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getProviderName", "()Ljava.lang.String;", )); }

    void setTileEntity(BlockPos arg0, TileEntity arg1) { (*javaClass->invokeMethod<void>(this->object, "setTileEntity", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.tileentity.TileEntity;)V", arg0, arg1)); }

    void markTileEntityForRemoval(TileEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "markTileEntityForRemoval", "(Lnet.minecraft.tileentity.TileEntity;)V", arg0)); }

    bool isBlockNormalCube(BlockPos arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockNormalCube", "(Lnet.minecraft.util.BlockPos;Z)Z", arg0, arg1)); }

    void calculateInitialSkylight() { (*javaClass->invokeMethod<void>(this->object, "calculateInitialSkylight", "()V", )); }

    void updateWeather() { (*javaClass->invokeMethod<void>(this->object, "updateWeather", "()V", )); }

    void calculateInitialWeather() { (*javaClass->invokeMethod<void>(this->object, "calculateInitialWeather", "()V", )); }

    bool isThundering() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isThundering", "()Z", )); }

    int getRenderDistanceChunks() { return int(*javaClass->invokeMethod<int>(this->object, "getRenderDistanceChunks", "()I", )); }

    void playMoodSoundAndCheckLight(int arg0, int arg1, Chunk arg2) { (*javaClass->invokeMethod<void>(this->object, "playMoodSoundAndCheckLight", "(IILnet.minecraft.world.chunk.Chunk;)V", arg0, arg1, arg2)); }

    EntityPlayer getClosestPlayer(double arg0, double arg1, double arg2, double arg3) { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getClosestPlayer", "(DDDD)Lnet.minecraft.entity.player.EntityPlayer;", arg0, arg1, arg2, arg3)); }

    void updateBlocks() { (*javaClass->invokeMethod<void>(this->object, "updateBlocks", "()V", )); }

    void forceBlockUpdateTick(Block arg0, BlockPos arg1, Random arg2) { (*javaClass->invokeMethod<void>(this->object, "forceBlockUpdateTick", "(Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Ljava.util.Random;)V", arg0, arg1, arg2)); }

    bool canBlockFreezeWater(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBlockFreezeWater", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool canBlockFreeze(BlockPos arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBlockFreeze", "(Lnet.minecraft.util.BlockPos;Z)Z", arg0, arg1)); }

    bool canBlockFreezeNoWater(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBlockFreezeNoWater", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    int getRawLight(BlockPos arg0, EnumSkyBlock arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getRawLight", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.EnumSkyBlock;)I", arg0, arg1)); }

    bool tickUpdates(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tickUpdates", "(Z)Z", arg0)); }

    List getPendingBlockUpdates(Chunk arg0, bool arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getPendingBlockUpdates", "(Lnet.minecraft.world.chunk.Chunk;Z)Ljava.util.List;", arg0, arg1)); }

    List func_175712_a(StructureBoundingBox arg0, bool arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "func_175712_a", "(Lnet.minecraft.world.gen.structure.StructureBoundingBox;Z)Ljava.util.List;", arg0, arg1)); }

    List getEntities(Class arg0, Predicate arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getEntities", "(Ljava.lang.Class;Lcom.google.common.base.Predicate;)Ljava.util.List;", arg0, arg1)); }

    Entity getEntityByID(int arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntityByID", "(I)Lnet.minecraft.entity.Entity;", arg0)); }

    List getLoadedEntityList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getLoadedEntityList", "()Ljava.util.List;", )); }

    void markChunkDirty(BlockPos arg0, TileEntity arg1) { (*javaClass->invokeMethod<void>(this->object, "markChunkDirty", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.tileentity.TileEntity;)V", arg0, arg1)); }

    int countEntities(Class arg0) { return int(*javaClass->invokeMethod<int>(this->object, "countEntities", "(Ljava.lang.Class;)I", arg0)); }

    void loadEntities(Collection arg0) { (*javaClass->invokeMethod<void>(this->object, "loadEntities", "(Ljava.util.Collection;)V", arg0)); }

    void unloadEntities(Collection arg0) { (*javaClass->invokeMethod<void>(this->object, "unloadEntities", "(Ljava.util.Collection;)V", arg0)); }

    bool canBlockBePlaced(Block arg0, BlockPos arg1, bool arg2, EnumFacing arg3, Entity arg4, ItemStack arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBlockBePlaced", "(Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;ZLnet.minecraft.util.EnumFacing;Lnet.minecraft.entity.Entity;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void func_181544_b(int arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181544_b", "(I)V", arg0)); }

    int getStrongPower(BlockPos arg0, EnumFacing arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getStrongPower", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)I", arg0, arg1)); }

    int getStrongPower(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getStrongPower", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    WorldType getWorldType() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "getWorldType", "()Lnet.minecraft.world.WorldType;", )); }

    bool isSidePowered(BlockPos arg0, EnumFacing arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSidePowered", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)Z", arg0, arg1)); }

    int getRedstonePower(BlockPos arg0, EnumFacing arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getRedstonePower", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)I", arg0, arg1)); }

    bool isBlockPowered(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockPowered", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    EntityPlayer getClosestPlayerToEntity(Entity arg0, double arg1) { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getClosestPlayerToEntity", "(Lnet.minecraft.entity.Entity;D)Lnet.minecraft.entity.player.EntityPlayer;", arg0, arg1)); }

    bool isAnyPlayerWithinRangeAt(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnyPlayerWithinRangeAt", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    EntityPlayer getPlayerEntityByName(String arg0) { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getPlayerEntityByName", "(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayer;", arg0)); }

    EntityPlayer getPlayerEntityByUUID(UUID arg0) { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getPlayerEntityByUUID", "(Ljava.util.UUID;)Lnet.minecraft.entity.player.EntityPlayer;", arg0)); }

    void checkSessionLock() { (*javaClass->invokeMethod<void>(this->object, "checkSessionLock", "()V", )); }

    void setTotalWorldTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setTotalWorldTime", "(J)V", arg0)); }

    long getTotalWorldTime() { return long(*javaClass->invokeMethod<long>(this->object, "getTotalWorldTime", "()J", )); }

    void setWorldTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldTime", "(J)V", arg0)); }

    bool isBlockModifiable(EntityPlayer arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockModifiable", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    IChunkProvider getChunkProvider() { return IChunkProvider(*javaClass->invokeMethod<jobject>(this->object, "getChunkProvider", "()Lnet.minecraft.world.chunk.IChunkProvider;", )); }

    void addBlockEvent(BlockPos arg0, Block arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "addBlockEvent", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V", arg0, arg1, arg2, arg3)); }

    ISaveHandler getSaveHandler() { return ISaveHandler(*javaClass->invokeMethod<jobject>(this->object, "getSaveHandler", "()Lnet.minecraft.world.storage.ISaveHandler;", )); }

    void setThunderStrength(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setThunderStrength", "(F)V", arg0)); }

    void setRainStrength(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setRainStrength", "(F)V", arg0)); }

    bool isBlockinHighHumidity(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockinHighHumidity", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    MapStorage getMapStorage() { return MapStorage(*javaClass->invokeMethod<jobject>(this->object, "getMapStorage", "()Lnet.minecraft.world.storage.MapStorage;", )); }

    void setItemData(String arg0, WorldSavedData arg1) { (*javaClass->invokeMethod<void>(this->object, "setItemData", "(Ljava.lang.String;Lnet.minecraft.world.WorldSavedData;)V", arg0, arg1)); }

    WorldSavedData loadItemData(Class arg0, String arg1) { return WorldSavedData(*javaClass->invokeMethod<jobject>(this->object, "loadItemData", "(Ljava.lang.Class;Ljava.lang.String;)Lnet.minecraft.world.WorldSavedData;", arg0, arg1)); }

    int getUniqueDataId(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUniqueDataId", "(Ljava.lang.String;)I", arg0)); }

    void playBroadcastSound(int arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "playBroadcastSound", "(ILnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    int getActualHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getActualHeight", "()I", )); }

    Random setRandomSeed(int arg0, int arg1, int arg2) { return Random(*javaClass->invokeMethod<jobject>(this->object, "setRandomSeed", "(III)Ljava.util.Random;", arg0, arg1, arg2)); }

    BlockPos getStrongholdPos(String arg0, BlockPos arg1) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getStrongholdPos", "(Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;", arg0, arg1)); }

    bool extendedLevelsInChunkCache() { return bool(*javaClass->invokeMethod<boolean>(this->object, "extendedLevelsInChunkCache", "()Z", )); }

    void sendBlockBreakProgress(int arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "sendBlockBreakProgress", "(ILnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    Calendar getCurrentDate() { return Calendar(*javaClass->invokeMethod<jobject>(this->object, "getCurrentDate", "()Ljava.util.Calendar;", )); }

    void makeFireworks(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, NBTTagCompound arg6) { (*javaClass->invokeMethod<void>(this->object, "makeFireworks", "(DDDDDDLnet.minecraft.nbt.NBTTagCompound;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    DifficultyInstance getDifficultyForLocation(BlockPos arg0) { return DifficultyInstance(*javaClass->invokeMethod<jobject>(this->object, "getDifficultyForLocation", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.DifficultyInstance;", arg0)); }

    int getSkylightSubtracted() { return int(*javaClass->invokeMethod<int>(this->object, "getSkylightSubtracted", "()I", )); }

    void setSkylightSubtracted(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSkylightSubtracted", "(I)V", arg0)); }

    bool isFindingSpawnPoint() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFindingSpawnPoint", "()Z", )); }

    VillageCollection getVillageCollection() { return VillageCollection(*javaClass->invokeMethod<jobject>(this->object, "getVillageCollection", "()Lnet.minecraft.village.VillageCollection;", )); }

    bool isSpawnChunk(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSpawnChunk", "(II)Z", arg0, arg1)); }

    BlockPos getSpawnPoint() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getSpawnPoint", "()Lnet.minecraft.util.BlockPos;", )); }

    void playSoundToNearExcept(EntityPlayer arg0, String arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "playSoundToNearExcept", "(Lnet.minecraft.entity.player.EntityPlayer;Ljava.lang.String;FF)V", arg0, arg1, arg2, arg3)); }

    void spawnParticle(EnumParticleTypes arg0, bool arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, arr_I arg8) { (*javaClass->invokeMethod<void>(this->object, "spawnParticle", "(Lnet.minecraft.util.EnumParticleTypes;ZDDDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    void spawnParticle(EnumParticleTypes arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, arr_I arg7) { (*javaClass->invokeMethod<void>(this->object, "spawnParticle", "(Lnet.minecraft.util.EnumParticleTypes;DDDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    void spawnParticle(int arg0, bool arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, arr_I arg8) { (*javaClass->invokeMethod<void>(this->object, "spawnParticle", "(IZDDDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    GameRules getGameRules() { return GameRules(*javaClass->invokeMethod<jobject>(this->object, "getGameRules", "()Lnet.minecraft.world.GameRules;", )); }

    WorldBorder getWorldBorder() { return WorldBorder(*javaClass->invokeMethod<jobject>(this->object, "getWorldBorder", "()Lnet.minecraft.world.border.WorldBorder;", )); }

    void setEntityState(Entity arg0, byte arg1) { (*javaClass->invokeMethod<void>(this->object, "setEntityState", "(Lnet.minecraft.entity.Entity;B)V", arg0, arg1)); }

    List func_147461_a(AxisAlignedBB arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "func_147461_a", "(Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;", arg0)); }

    Chunk getChunkFromBlockCoords(BlockPos arg0) { return Chunk(*javaClass->invokeMethod<jobject>(this->object, "getChunkFromBlockCoords", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.chunk.Chunk;", arg0)); }

    List getEntitiesInAABBexcluding(Entity arg0, AxisAlignedBB arg1, Predicate arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getEntitiesInAABBexcluding", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;Lcom.google.common.base.Predicate;)Ljava.util.List;", arg0, arg1, arg2)); }

    MovingObjectPosition rayTraceBlocks(Vec3 arg0, Vec3 arg1) { return MovingObjectPosition(*javaClass->invokeMethod<jobject>(this->object, "rayTraceBlocks", "(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;)Lnet.minecraft.util.MovingObjectPosition;", arg0, arg1)); }

    MovingObjectPosition rayTraceBlocks(Vec3 arg0, Vec3 arg1, bool arg2) { return MovingObjectPosition(*javaClass->invokeMethod<jobject>(this->object, "rayTraceBlocks", "(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;Z)Lnet.minecraft.util.MovingObjectPosition;", arg0, arg1, arg2)); }

    MovingObjectPosition rayTraceBlocks(Vec3 arg0, Vec3 arg1, bool arg2, bool arg3, bool arg4) { return MovingObjectPosition(*javaClass->invokeMethod<jobject>(this->object, "rayTraceBlocks", "(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;ZZZ)Lnet.minecraft.util.MovingObjectPosition;", arg0, arg1, arg2, arg3, arg4)); }

    void playSoundAtEntity(Entity arg0, String arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "playSoundAtEntity", "(Lnet.minecraft.entity.Entity;Ljava.lang.String;FF)V", arg0, arg1, arg2, arg3)); }

    Scoreboard getScoreboard() { return Scoreboard(*javaClass->invokeMethod<jobject>(this->object, "getScoreboard", "()Lnet.minecraft.scoreboard.Scoreboard;", )); }

    IBlockState getBlockState(BlockPos arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getBlockState", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    void joinEntityInSurroundings(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "joinEntityInSurroundings", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    int getLastLightningBolt() { return int(*javaClass->invokeMethod<int>(this->object, "getLastLightningBolt", "()I", )); }

    void setLastLightningBolt(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLastLightningBolt", "(I)V", arg0)); }

    void updateEntities() { (*javaClass->invokeMethod<void>(this->object, "updateEntities", "()V", )); }

    EnumDifficulty getDifficulty() { return EnumDifficulty(*javaClass->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet.minecraft.world.EnumDifficulty;", )); }

    void setAllowedSpawnTypes(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setAllowedSpawnTypes", "(ZZ)V", arg0, arg1)); }

    CrashReportCategory addWorldInfoToCrashReport(CrashReport arg0) { return CrashReportCategory(*javaClass->invokeMethod<jobject>(this->object, "addWorldInfoToCrashReport", "(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReportCategory;", arg0)); }

    bool spawnEntityInWorld(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "spawnEntityInWorld", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void setInitialSpawnLocation() { (*javaClass->invokeMethod<void>(this->object, "setInitialSpawnLocation", "()V", )); }

    void removeEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "removeEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    TileEntity getTileEntity(BlockPos arg0) { return TileEntity(*javaClass->invokeMethod<jobject>(this->object, "getTileEntity", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.tileentity.TileEntity;", arg0)); }

    List getEntitiesWithinAABB(Class arg0, AxisAlignedBB arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getEntitiesWithinAABB", "(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;", arg0, arg1)); }

    List getEntitiesWithinAABB(Class arg0, AxisAlignedBB arg1, Predicate arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getEntitiesWithinAABB", "(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;Lcom.google.common.base.Predicate;)Ljava.util.List;", arg0, arg1, arg2)); }

    bool isBlockLoaded(BlockPos arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockLoaded", "(Lnet.minecraft.util.BlockPos;Z)Z", arg0, arg1)); }

    bool isBlockLoaded(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockLoaded", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool setBlockState(BlockPos arg0, IBlockState arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setBlockState", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;I)Z", arg0, arg1, arg2)); }

    bool setBlockState(BlockPos arg0, IBlockState arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setBlockState", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Z", arg0, arg1)); }

    void setSpawnPoint(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpawnPoint", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    bool isDaytime() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDaytime", "()Z", )); }

    void playSound(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5, bool arg6) { (*javaClass->invokeMethod<void>(this->object, "playSound", "(DDDLjava.lang.String;FFZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    BlockPos getHeight(BlockPos arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getHeight", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;", arg0)); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

    bool isAirBlock(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAirBlock", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool checkLight(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkLight", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    void playAuxSFX(int arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "playAuxSFX", "(ILnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    bool canSeeSky(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSeeSky", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    int getLight(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getLight", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    int getLight(BlockPos arg0, bool arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getLight", "(Lnet.minecraft.util.BlockPos;Z)I", arg0, arg1)); }

    void playRecord(BlockPos arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "playRecord", "(Lnet.minecraft.util.BlockPos;Ljava.lang.String;)V", arg0, arg1)); }

    bool isRaining() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRaining", "()Z", )); }

    bool isWater(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWater", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool canSnowAt(BlockPos arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSnowAt", "(Lnet.minecraft.util.BlockPos;Z)Z", arg0, arg1)); }

    List getPlayers(Class arg0, Predicate arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getPlayers", "(Ljava.lang.Class;Lcom.google.common.base.Predicate;)Ljava.util.List;", arg0, arg1)); }

    double getHorizon() { return double(*javaClass->invokeMethod<double>(this->object, "getHorizon", "()D", )); }

    bool isValid(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValid", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    void setActivePlayerChunksAndCheckLight() { (*javaClass->invokeMethod<void>(this->object, "setActivePlayerChunksAndCheckLight", "()V", )); }

    void sendQuittingDisconnectingPacket() { (*javaClass->invokeMethod<void>(this->object, "sendQuittingDisconnectingPacket", "()V", )); }

    Entity findNearestEntityWithinAABB(Class arg0, AxisAlignedBB arg1, Entity arg2) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "findNearestEntityWithinAABB", "(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;Lnet.minecraft.entity.Entity;)Lnet.minecraft.entity.Entity;", arg0, arg1, arg2)); }

    int isBlockIndirectlyGettingPowered(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "isBlockIndirectlyGettingPowered", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    List getEntitiesWithinAABBExcludingEntity(Entity arg0, AxisAlignedBB arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getEntitiesWithinAABBExcludingEntity", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;)Ljava.util.List;", arg0, arg1)); }

    static bool doesBlockHaveSolidTopSurface(IBlockAccess arg0, BlockPos arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "doesBlockHaveSolidTopSurface", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    void notifyNeighborsRespectDebug(BlockPos arg0, Block arg1) { (*javaClass->invokeMethod<void>(this->object, "notifyNeighborsRespectDebug", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V", arg0, arg1)); }

    void updateComparatorOutputLevel(BlockPos arg0, Block arg1) { (*javaClass->invokeMethod<void>(this->object, "updateComparatorOutputLevel", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V", arg0, arg1)); }

    void notifyNeighborsOfStateChange(BlockPos arg0, Block arg1) { (*javaClass->invokeMethod<void>(this->object, "notifyNeighborsOfStateChange", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V", arg0, arg1)); }

    void markBlockRangeForRenderUpdate(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "markBlockRangeForRenderUpdate", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void markBlockRangeForRenderUpdate(BlockPos arg0, BlockPos arg1) { (*javaClass->invokeMethod<void>(this->object, "markBlockRangeForRenderUpdate", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)V", arg0, arg1)); }

    void notifyNeighborsOfStateExcept(BlockPos arg0, Block arg1, EnumFacing arg2) { (*javaClass->invokeMethod<void>(this->object, "notifyNeighborsOfStateExcept", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;Lnet.minecraft.util.EnumFacing;)V", arg0, arg1, arg2)); }

    void removePlayerEntityDangerously(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "removePlayerEntityDangerously", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    int calculateSkylightSubtracted(float arg0) { return int(*javaClass->invokeMethod<int>(this->object, "calculateSkylightSubtracted", "(F)I", arg0)); }

    void updateEntityWithOptionalForce(Entity arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "updateEntityWithOptionalForce", "(Lnet.minecraft.entity.Entity;Z)V", arg0, arg1)); }

    void updateAllPlayersSleepingFlag() { (*javaClass->invokeMethod<void>(this->object, "updateAllPlayersSleepingFlag", "()V", )); }

    void initialize(WorldSettings arg0) { (*javaClass->invokeMethod<void>(this->object, "initialize", "(Lnet.minecraft.world.WorldSettings;)V", arg0)); }

    World init() { return World(*javaClass->invokeMethod<jobject>(this->object, "init", "()Lnet.minecraft.world.World;", )); }

    long getSeed() { return long(*javaClass->invokeMethod<long>(this->object, "getSeed", "()J", )); }

};


/**
 * Classpath: net.minecraft.world.gen.structure.StructureBoundingBox
 * Package name: net.minecraft.world.gen.structure
 */
class StructureBoundingBox : public Object {
protected:
    const inline static char *className = "net.minecraft.world.gen.structure.StructureBoundingBox";
public:
    STATICINITIALIZE;

    StructureBoundingBox(jobject object) : JavaObject(object) {}

    bool intersectsWith(StructureBoundingBox arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsWith", "(Lnet.minecraft.world.gen.structure.StructureBoundingBox;)Z", arg0)); }

    bool intersectsWith(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsWith", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    bool isVecInside(Vec3i arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVecInside", "(Lnet.minecraft.util.Vec3i;)Z", arg0)); }

    static StructureBoundingBox getNewBoundingBox() { return StructureBoundingBox(*javaClass->invokeStaticMethod<jobject>(this->object, "getNewBoundingBox", "()Lnet.minecraft.world.gen.structure.StructureBoundingBox;", )); }

    static StructureBoundingBox func_175899_a(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return StructureBoundingBox(*javaClass->invokeStaticMethod<jobject>(this->object, "func_175899_a", "(IIIIII)Lnet.minecraft.world.gen.structure.StructureBoundingBox;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Vec3i func_175896_b() { return Vec3i(*javaClass->invokeMethod<jobject>(this->object, "func_175896_b", "()Lnet.minecraft.util.Vec3i;", )); }

    NBTTagIntArray toNBTTagIntArray() { return NBTTagIntArray(*javaClass->invokeMethod<jobject>(this->object, "toNBTTagIntArray", "()Lnet.minecraft.nbt.NBTTagIntArray;", )); }

    void expandTo(StructureBoundingBox arg0) { (*javaClass->invokeMethod<void>(this->object, "expandTo", "(Lnet.minecraft.world.gen.structure.StructureBoundingBox;)V", arg0)); }

    int getXSize() { return int(*javaClass->invokeMethod<int>(this->object, "getXSize", "()I", )); }

    int getYSize() { return int(*javaClass->invokeMethod<int>(this->object, "getYSize", "()I", )); }

    int getZSize() { return int(*javaClass->invokeMethod<int>(this->object, "getZSize", "()I", )); }

    Vec3i getCenter() { return Vec3i(*javaClass->invokeMethod<jobject>(this->object, "getCenter", "()Lnet.minecraft.util.Vec3i;", )); }

    static StructureBoundingBox getComponentToAddBoundingBox(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, EnumFacing arg9) { return StructureBoundingBox(*javaClass->invokeStaticMethod<jobject>(this->object, "getComponentToAddBoundingBox", "(IIIIIIIIILnet.minecraft.util.EnumFacing;)Lnet.minecraft.world.gen.structure.StructureBoundingBox;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void offset(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "offset", "(III)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.nbt.NBTSizeTracker
 * Package name: net.minecraft.nbt
 */
class NBTSizeTracker : public Object {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTSizeTracker";
public:
    STATICINITIALIZE;

    NBTSizeTracker(jobject object) : JavaObject(object) {}

    void read(long arg0) { (*javaClass->invokeMethod<void>(this->object, "read", "(J)V", arg0)); }

};


/**
 * Classpath: net.minecraft.nbt.NBTBase
 * Package name: net.minecraft.nbt
 */
class NBTBase : public Object {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTBase";
public:
    STATICINITIALIZE;

    NBTBase(jobject object) : JavaObject(object) {}

    static NBTBase createNewByType(byte arg0) { return NBTBase(*javaClass->invokeStaticMethod<jobject>(this->object, "createNewByType", "(B)Lnet.minecraft.nbt.NBTBase;", arg0)); }

    bool hasNoTags() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNoTags", "()Z", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void write(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.io.DataOutput;)V", arg0)); }

    void read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (*javaClass->invokeMethod<void>(this->object, "read", "(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V", arg0, arg1, arg2)); }

    byte getId() { return byte(*javaClass->invokeMethod<byte>(this->object, "getId", "()B", )); }

    NBTBase copy() { return NBTBase(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lnet.minecraft.nbt.NBTBase;", )); }

    String getString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.block.material.Material
 * Package name: net.minecraft.block.material
 */
class Material : public Object {
protected:
    const inline static char *className = "net.minecraft.block.material.Material";
public:
    STATICINITIALIZE;

    Material(jobject object) : JavaObject(object) {}

    bool blocksMovement() { return bool(*javaClass->invokeMethod<boolean>(this->object, "blocksMovement", "()Z", )); }

    bool isReplaceable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReplaceable", "()Z", )); }

    bool blocksLight() { return bool(*javaClass->invokeMethod<boolean>(this->object, "blocksLight", "()Z", )); }

    MapColor getMaterialMapColor() { return MapColor(*javaClass->invokeMethod<jobject>(this->object, "getMaterialMapColor", "()Lnet.minecraft.block.material.MapColor;", )); }

    int getMaterialMobility() { return int(*javaClass->invokeMethod<int>(this->object, "getMaterialMobility", "()I", )); }

    Material setRequiresTool() { return Material(*javaClass->invokeMethod<jobject>(this->object, "setRequiresTool", "()Lnet.minecraft.block.material.Material;", )); }

    Material setImmovableMobility() { return Material(*javaClass->invokeMethod<jobject>(this->object, "setImmovableMobility", "()Lnet.minecraft.block.material.Material;", )); }

    Material setNoPushMobility() { return Material(*javaClass->invokeMethod<jobject>(this->object, "setNoPushMobility", "()Lnet.minecraft.block.material.Material;", )); }

    Material setTranslucent() { return Material(*javaClass->invokeMethod<jobject>(this->object, "setTranslucent", "()Lnet.minecraft.block.material.Material;", )); }

    Material setReplaceable() { return Material(*javaClass->invokeMethod<jobject>(this->object, "setReplaceable", "()Lnet.minecraft.block.material.Material;", )); }

    Material setAdventureModeExempt() { return Material(*javaClass->invokeMethod<jobject>(this->object, "setAdventureModeExempt", "()Lnet.minecraft.block.material.Material;", )); }

    bool isToolNotRequired() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isToolNotRequired", "()Z", )); }

    bool isSolid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSolid", "()Z", )); }

    Material setBurning() { return Material(*javaClass->invokeMethod<jobject>(this->object, "setBurning", "()Lnet.minecraft.block.material.Material;", )); }

    bool getCanBurn() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanBurn", "()Z", )); }

    bool isLiquid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLiquid", "()Z", )); }

    bool isOpaque() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpaque", "()Z", )); }

};


/**
 * Classpath: net.minecraft.block.material.MapColor
 * Package name: net.minecraft.block.material
 */
class MapColor : public Object {
protected:
    const inline static char *className = "net.minecraft.block.material.MapColor";
public:
    STATICINITIALIZE;

    MapColor(jobject object) : JavaObject(object) {}

    int func_151643_b(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "func_151643_b", "(I)I", arg0)); }

};


/**
 * Classpath: net.minecraft.world.storage.WorldInfo
 * Package name: net.minecraft.world.storage
 */
class WorldInfo : public Object {
protected:
    const inline static char *className = "net.minecraft.world.storage.WorldInfo";
public:
    STATICINITIALIZE;

    WorldInfo(jobject object) : JavaObject(object) {}

    bool isHardcoreModeEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHardcoreModeEnabled", "()Z", )); }

    String getWorldName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getWorldName", "()Ljava.lang.String;", )); }

    NBTTagCompound getNBTTagCompound() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getNBTTagCompound", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    void setServerInitialized(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setServerInitialized", "(Z)V", arg0)); }

    WorldType getTerrainType() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "getTerrainType", "()Lnet.minecraft.world.WorldType;", )); }

    long getWorldTime() { return long(*javaClass->invokeMethod<long>(this->object, "getWorldTime", "()J", )); }

    bool isThundering() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isThundering", "()Z", )); }

    int getCleanWeatherTime() { return int(*javaClass->invokeMethod<int>(this->object, "getCleanWeatherTime", "()I", )); }

    void setCleanWeatherTime(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setCleanWeatherTime", "(I)V", arg0)); }

    void setThunderTime(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setThunderTime", "(I)V", arg0)); }

    void setRainTime(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setRainTime", "(I)V", arg0)); }

    int getThunderTime() { return int(*javaClass->invokeMethod<int>(this->object, "getThunderTime", "()I", )); }

    void setThundering(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setThundering", "(Z)V", arg0)); }

    int getRainTime() { return int(*javaClass->invokeMethod<int>(this->object, "getRainTime", "()I", )); }

    void setWorldTotalTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldTotalTime", "(J)V", arg0)); }

    long getWorldTotalTime() { return long(*javaClass->invokeMethod<long>(this->object, "getWorldTotalTime", "()J", )); }

    void setWorldTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldTime", "(J)V", arg0)); }

    GameRules getGameRulesInstance() { return GameRules(*javaClass->invokeMethod<jobject>(this->object, "getGameRulesInstance", "()Lnet.minecraft.world.GameRules;", )); }

    void addToCrashReport(CrashReportCategory arg0) { (*javaClass->invokeMethod<void>(this->object, "addToCrashReport", "(Lnet.minecraft.crash.CrashReportCategory;)V", arg0)); }

    void setDifficulty(EnumDifficulty arg0) { (*javaClass->invokeMethod<void>(this->object, "setDifficulty", "(Lnet.minecraft.world.EnumDifficulty;)V", arg0)); }

    bool isDifficultyLocked() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDifficultyLocked", "()Z", )); }

    void setDifficultyLocked(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDifficultyLocked", "(Z)V", arg0)); }

    bool isMapFeaturesEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMapFeaturesEnabled", "()Z", )); }

    void setWorldName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldName", "(Ljava.lang.String;)V", arg0)); }

    bool areCommandsAllowed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "areCommandsAllowed", "()Z", )); }

    void populateFromWorldSettings(WorldSettings arg0) { (*javaClass->invokeMethod<void>(this->object, "populateFromWorldSettings", "(Lnet.minecraft.world.WorldSettings;)V", arg0)); }

    void updateTagCompound(NBTTagCompound arg0, NBTTagCompound arg1) { (*javaClass->invokeMethod<void>(this->object, "updateTagCompound", "(Lnet.minecraft.nbt.NBTTagCompound;Lnet.minecraft.nbt.NBTTagCompound;)V", arg0, arg1)); }

    NBTTagCompound cloneNBTCompound(NBTTagCompound arg0) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "cloneNBTCompound", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.nbt.NBTTagCompound;", arg0)); }

    long getSizeOnDisk() { return long(*javaClass->invokeMethod<long>(this->object, "getSizeOnDisk", "()J", )); }

    NBTTagCompound getPlayerNBTTagCompound() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getPlayerNBTTagCompound", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    int getSaveVersion() { return int(*javaClass->invokeMethod<int>(this->object, "getSaveVersion", "()I", )); }

    void setSaveVersion(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSaveVersion", "(I)V", arg0)); }

    long getLastTimePlayed() { return long(*javaClass->invokeMethod<long>(this->object, "getLastTimePlayed", "()J", )); }

    void setTerrainType(WorldType arg0) { (*javaClass->invokeMethod<void>(this->object, "setTerrainType", "(Lnet.minecraft.world.WorldType;)V", arg0)); }

    String getGeneratorOptions() { return String(*javaClass->invokeMethod<jobject>(this->object, "getGeneratorOptions", "()Ljava.lang.String;", )); }

    void getBorderCenterX(double arg0) { (*javaClass->invokeMethod<void>(this->object, "getBorderCenterX", "(D)V", arg0)); }

    double getBorderCenterX() { return double(*javaClass->invokeMethod<double>(this->object, "getBorderCenterX", "()D", )); }

    void getBorderCenterZ(double arg0) { (*javaClass->invokeMethod<void>(this->object, "getBorderCenterZ", "(D)V", arg0)); }

    double getBorderCenterZ() { return double(*javaClass->invokeMethod<double>(this->object, "getBorderCenterZ", "()D", )); }

    double getBorderDamagePerBlock() { return double(*javaClass->invokeMethod<double>(this->object, "getBorderDamagePerBlock", "()D", )); }

    double getBorderSafeZone() { return double(*javaClass->invokeMethod<double>(this->object, "getBorderSafeZone", "()D", )); }

    int getBorderWarningDistance() { return int(*javaClass->invokeMethod<int>(this->object, "getBorderWarningDistance", "()I", )); }

    int getBorderWarningTime() { return int(*javaClass->invokeMethod<int>(this->object, "getBorderWarningTime", "()I", )); }

    long getBorderLerpTime() { return long(*javaClass->invokeMethod<long>(this->object, "getBorderLerpTime", "()J", )); }

    double getBorderSize() { return double(*javaClass->invokeMethod<double>(this->object, "getBorderSize", "()D", )); }

    double getBorderLerpTarget() { return double(*javaClass->invokeMethod<double>(this->object, "getBorderLerpTarget", "()D", )); }

    bool isInitialized() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInitialized", "()Z", )); }

    void setMapFeaturesEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setMapFeaturesEnabled", "(Z)V", arg0)); }

    void setAllowCommands(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAllowCommands", "(Z)V", arg0)); }

    void setHardcore(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHardcore", "(Z)V", arg0)); }

    void setBorderSize(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderSize", "(D)V", arg0)); }

    void setBorderSafeZone(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderSafeZone", "(D)V", arg0)); }

    void setBorderDamagePerBlock(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderDamagePerBlock", "(D)V", arg0)); }

    void setBorderWarningDistance(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderWarningDistance", "(I)V", arg0)); }

    void setBorderWarningTime(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderWarningTime", "(I)V", arg0)); }

    void setBorderLerpTarget(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderLerpTarget", "(D)V", arg0)); }

    void setBorderLerpTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderLerpTime", "(J)V", arg0)); }

    WorldSettings_GameType getGameType() { return WorldSettings_GameType(*javaClass->invokeMethod<jobject>(this->object, "getGameType", "()Lnet.minecraft.world.WorldSettings$GameType;", )); }

    void setGameType(WorldSettings_GameType arg0) { (*javaClass->invokeMethod<void>(this->object, "setGameType", "(Lnet.minecraft.world.WorldSettings$GameType;)V", arg0)); }

    EnumDifficulty getDifficulty() { return EnumDifficulty(*javaClass->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet.minecraft.world.EnumDifficulty;", )); }

    void setSpawnY(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpawnY", "(I)V", arg0)); }

    void setSpawnX(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpawnX", "(I)V", arg0)); }

    void setSpawnZ(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpawnZ", "(I)V", arg0)); }

    void setSpawn(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpawn", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    bool isRaining() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRaining", "()Z", )); }

    void setRaining(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRaining", "(Z)V", arg0)); }

    int getSpawnX() { return int(*javaClass->invokeMethod<int>(this->object, "getSpawnX", "()I", )); }

    int getSpawnY() { return int(*javaClass->invokeMethod<int>(this->object, "getSpawnY", "()I", )); }

    int getSpawnZ() { return int(*javaClass->invokeMethod<int>(this->object, "getSpawnZ", "()I", )); }

    long getSeed() { return long(*javaClass->invokeMethod<long>(this->object, "getSeed", "()J", )); }

};


/**
 * Classpath: net.minecraft.nbt.NBTTagCompound
 * Package name: net.minecraft.nbt
 */
class NBTTagCompound : public NBTBase {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTTagCompound";
public:
    STATICINITIALIZE;

    NBTTagCompound(jobject object) : JavaObject(object) {}

    CrashReport createCrashReport(String arg0, int arg1, ClassCastException arg2) { return CrashReport(*javaClass->invokeMethod<jobject>(this->object, "createCrashReport", "(Ljava.lang.String;ILjava.lang.ClassCastException;)Lnet.minecraft.crash.CrashReport;", arg0, arg1, arg2)); }

    void setByteArray(String arg0, arr_B arg1) { (*javaClass->invokeMethod<void>(this->object, "setByteArray", "(Ljava.lang.String;[B)V", arg0, arg1)); }

    void setIntArray(String arg0, arr_I arg1) { (*javaClass->invokeMethod<void>(this->object, "setIntArray", "(Ljava.lang.String;[I)V", arg0, arg1)); }

    NBTTagCompound getCompoundTag(String arg0) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getCompoundTag", "(Ljava.lang.String;)Lnet.minecraft.nbt.NBTTagCompound;", arg0)); }

    NBTTagList getTagList(String arg0, int arg1) { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "getTagList", "(Ljava.lang.String;I)Lnet.minecraft.nbt.NBTTagList;", arg0, arg1)); }

    static NBTBase readNBT(byte arg0, String arg1, DataInput arg2, int arg3, NBTSizeTracker arg4) { return NBTBase(*javaClass->invokeStaticMethod<jobject>(this->object, "readNBT", "(BLjava.lang.String;Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)Lnet.minecraft.nbt.NBTBase;", arg0, arg1, arg2, arg3, arg4)); }

    void setInteger(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setInteger", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void setString(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "setString", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    bool hasKey(String arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasKey", "(Ljava.lang.String;I)Z", arg0, arg1)); }

    bool hasKey(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasKey", "(Ljava.lang.String;)Z", arg0)); }

    void setTag(String arg0, NBTBase arg1) { (*javaClass->invokeMethod<void>(this->object, "setTag", "(Ljava.lang.String;Lnet.minecraft.nbt.NBTBase;)V", arg0, arg1)); }

    void removeTag(String arg0) { (*javaClass->invokeMethod<void>(this->object, "removeTag", "(Ljava.lang.String;)V", arg0)); }

    bool hasNoTags() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNoTags", "()Z", )); }

    static void writeEntry(String arg0, NBTBase arg1, DataOutput arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "writeEntry", "(Ljava.lang.String;Lnet.minecraft.nbt.NBTBase;Ljava.io.DataOutput;)V", arg0, arg1, arg2)); }

    static String readKey(DataInput arg0, NBTSizeTracker arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "readKey", "(Ljava.io.DataInput;Lnet.minecraft.nbt.NBTSizeTracker;)Ljava.lang.String;", arg0, arg1)); }

    static byte readType(DataInput arg0, NBTSizeTracker arg1) { return byte(*javaClass->invokeStaticMethod<byte>(this->object, "readType", "(Ljava.io.DataInput;Lnet.minecraft.nbt.NBTSizeTracker;)B", arg0, arg1)); }

    Set getKeySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getKeySet", "()Ljava.util.Set;", )); }

    byte getTagId(String arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getTagId", "(Ljava.lang.String;)B", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool getBoolean(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(Ljava.lang.String;)Z", arg0)); }

    byte getByte(String arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(Ljava.lang.String;)B", arg0)); }

    short getShort(String arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(Ljava.lang.String;)S", arg0)); }

    long getLong(String arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.lang.String;)J", arg0)); }

    float getFloat(String arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(Ljava.lang.String;)F", arg0)); }

    double getDouble(String arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(Ljava.lang.String;)D", arg0)); }

    void merge(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "merge", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void write(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.io.DataOutput;)V", arg0)); }

    void read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (*javaClass->invokeMethod<void>(this->object, "read", "(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V", arg0, arg1, arg2)); }

    byte getId() { return byte(*javaClass->invokeMethod<byte>(this->object, "getId", "()B", )); }

    void setBoolean(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setBoolean", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void setByte(String arg0, byte arg1) { (*javaClass->invokeMethod<void>(this->object, "setByte", "(Ljava.lang.String;B)V", arg0, arg1)); }

    void setShort(String arg0, short arg1) { (*javaClass->invokeMethod<void>(this->object, "setShort", "(Ljava.lang.String;S)V", arg0, arg1)); }

    void setLong(String arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "setLong", "(Ljava.lang.String;J)V", arg0, arg1)); }

    void setFloat(String arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setFloat", "(Ljava.lang.String;F)V", arg0, arg1)); }

    void setDouble(String arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setDouble", "(Ljava.lang.String;D)V", arg0, arg1)); }

    NBTBase copy() { return NBTBase(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lnet.minecraft.nbt.NBTBase;", )); }

    int getInteger(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInteger", "(Ljava.lang.String;)I", arg0)); }

    NBTBase getTag(String arg0) { return NBTBase(*javaClass->invokeMethod<jobject>(this->object, "getTag", "(Ljava.lang.String;)Lnet.minecraft.nbt.NBTBase;", arg0)); }

    String getString(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: net.minecraft.crash.CrashReport
 * Package name: net.minecraft.crash
 */
class CrashReport : public Object {
protected:
    const inline static char *className = "net.minecraft.crash.CrashReport";
public:
    STATICINITIALIZE;

    CrashReport(jobject object) : JavaObject(object) {}

    Throwable getCrashCause() { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "getCrashCause", "()Ljava.lang.Throwable;", )); }

    CrashReportCategory makeCategoryDepth(String arg0, int arg1) { return CrashReportCategory(*javaClass->invokeMethod<jobject>(this->object, "makeCategoryDepth", "(Ljava.lang.String;I)Lnet.minecraft.crash.CrashReportCategory;", arg0, arg1)); }

    void populateEnvironment() { (*javaClass->invokeMethod<void>(this->object, "populateEnvironment", "()V", )); }

    void getSectionsInStringBuilder(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "getSectionsInStringBuilder", "(Ljava.lang.StringBuilder;)V", arg0)); }

    String getCauseStackTraceOrString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCauseStackTraceOrString", "()Ljava.lang.String;", )); }

    static String getWittyComment() { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getWittyComment", "()Ljava.lang.String;", )); }

    CrashReportCategory getCategory() { return CrashReportCategory(*javaClass->invokeMethod<jobject>(this->object, "getCategory", "()Lnet.minecraft.crash.CrashReportCategory;", )); }

    static CrashReport makeCrashReport(Throwable arg0, String arg1) { return CrashReport(*javaClass->invokeStaticMethod<jobject>(this->object, "makeCrashReport", "(Ljava.lang.Throwable;Ljava.lang.String;)Lnet.minecraft.crash.CrashReport;", arg0, arg1)); }

    CrashReportCategory makeCategory(String arg0) { return CrashReportCategory(*javaClass->invokeMethod<jobject>(this->object, "makeCategory", "(Ljava.lang.String;)Lnet.minecraft.crash.CrashReportCategory;", arg0)); }

    String getCompleteReport() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCompleteReport", "()Ljava.lang.String;", )); }

    bool saveToFile(File arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "saveToFile", "(Ljava.io.File;)Z", arg0)); }

    File getFile() { return File(*javaClass->invokeMethod<jobject>(this->object, "getFile", "()Ljava.io.File;", )); }

    String getDescription() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDescription", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.crash.CrashReportCategory
 * Package name: net.minecraft.crash
 */
class CrashReportCategory : public Object {
protected:
    const inline static char *className = "net.minecraft.crash.CrashReportCategory";
public:
    STATICINITIALIZE;

    CrashReportCategory(jobject object) : JavaObject(object) {}

    static void addBlockInfo(CrashReportCategory arg0, BlockPos arg1, Block arg2, int arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "addBlockInfo", "(Lnet.minecraft.crash.CrashReportCategory;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;I)V", arg0, arg1, arg2, arg3)); }

    static void addBlockInfo(CrashReportCategory arg0, BlockPos arg1, IBlockState arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "addBlockInfo", "(Lnet.minecraft.crash.CrashReportCategory;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V", arg0, arg1, arg2)); }

    static String getCoordinateInfo(double arg0, double arg1, double arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getCoordinateInfo", "(DDD)Ljava.lang.String;", arg0, arg1, arg2)); }

    static String getCoordinateInfo(BlockPos arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getCoordinateInfo", "(Lnet.minecraft.util.BlockPos;)Ljava.lang.String;", arg0)); }

    void addCrashSectionThrowable(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "addCrashSectionThrowable", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void appendToStringBuilder(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "appendToStringBuilder", "(Ljava.lang.StringBuilder;)V", arg0)); }

    int getPrunedStackTrace(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getPrunedStackTrace", "(I)I", arg0)); }

    void addCrashSectionCallable(String arg0, Callable arg1) { (*javaClass->invokeMethod<void>(this->object, "addCrashSectionCallable", "(Ljava.lang.String;Ljava.util.concurrent.Callable;)V", arg0, arg1)); }

    void addCrashSection(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "addCrashSection", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    bool firstTwoElementsOfStackTraceMatch(StackTraceElement arg0, StackTraceElement arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "firstTwoElementsOfStackTraceMatch", "(Ljava.lang.StackTraceElement;Ljava.lang.StackTraceElement;)Z", arg0, arg1)); }

    void trimStackTraceEntriesFromBottom(int arg0) { (*javaClass->invokeMethod<void>(this->object, "trimStackTraceEntriesFromBottom", "(I)V", arg0)); }

};


/**
 * Classpath: java.lang.StackTraceElement
 * Package name: java.lang
 */
class StackTraceElement : public Object {
protected:
    const inline static char *className = "java.lang.StackTraceElement";
public:
    STATICINITIALIZE;

    StackTraceElement(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static StackTraceElement of(StackFrameInfo arg0) { return StackTraceElement(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.StackFrameInfo;)Ljava.lang.StackTraceElement;", arg0)); }

    bool dropClassLoaderName() { return bool(*javaClass->invokeMethod<boolean>(this->object, "dropClassLoaderName", "()Z", )); }

    bool dropModuleVersion() { return bool(*javaClass->invokeMethod<boolean>(this->object, "dropModuleVersion", "()Z", )); }

    bool isNativeMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNativeMethod", "()Z", )); }

    static bool isHashedInJavaBase(Module arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isHashedInJavaBase", "(Ljava.lang.Module;)Z", arg0)); }

    static void initStackTraceElements(StackTraceElement_interface arg0, Throwable arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "initStackTraceElements", "([Ljava.lang.StackTraceElement;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void computeFormat() { (*javaClass->invokeMethod<void>(this->object, "computeFormat", "()V", )); }

    static void initStackTraceElement(StackTraceElement arg0, StackFrameInfo arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "initStackTraceElement", "(Ljava.lang.StackTraceElement;Ljava.lang.StackFrameInfo;)V", arg0, arg1)); }

    String getFileName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFileName", "()Ljava.lang.String;", )); }

    int getLineNumber() { return int(*javaClass->invokeMethod<int>(this->object, "getLineNumber", "()I", )); }

    String getModuleName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getModuleName", "()Ljava.lang.String;", )); }

    String getModuleVersion() { return String(*javaClass->invokeMethod<jobject>(this->object, "getModuleVersion", "()Ljava.lang.String;", )); }

    String getClassLoaderName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getClassLoaderName", "()Ljava.lang.String;", )); }

    String getClassName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getClassName", "()Ljava.lang.String;", )); }

    String getMethodName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMethodName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.lang.StackFrameInfo
 * Package name: java.lang
 */
class StackFrameInfo : public Object {
protected:
    const inline static char *className = "java.lang.StackFrameInfo";
public:
    STATICINITIALIZE;

    StackFrameInfo(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String getDescriptor() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDescriptor", "()Ljava.lang.String;", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    Class declaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "declaringClass", "()Ljava.lang.Class;", )); }

    MethodType getMethodType() { return MethodType(*javaClass->invokeMethod<jobject>(this->object, "getMethodType", "()Ljava.lang.invoke.MethodType;", )); }

    bool isNativeMethod() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNativeMethod", "()Z", )); }

    String getFileName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFileName", "()Ljava.lang.String;", )); }

    int getLineNumber() { return int(*javaClass->invokeMethod<int>(this->object, "getLineNumber", "()I", )); }

    String getClassName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getClassName", "()Ljava.lang.String;", )); }

    String getMethodName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMethodName", "()Ljava.lang.String;", )); }

    void ensureRetainClassRefEnabled() { (*javaClass->invokeMethod<void>(this->object, "ensureRetainClassRefEnabled", "()V", )); }

    StackTraceElement toStackTraceElement() { return StackTraceElement(*javaClass->invokeMethod<jobject>(this->object, "toStackTraceElement", "()Ljava.lang.StackTraceElement;", )); }

    int getByteCodeIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getByteCodeIndex", "()I", )); }

};


/**
 * Classpath: net.minecraft.nbt.NBTTagList
 * Package name: net.minecraft.nbt
 */
class NBTTagList : public NBTBase {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTTagList";
public:
    STATICINITIALIZE;

    NBTTagList(jobject object) : JavaObject(object) {}

    String getStringTagAt(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getStringTagAt", "(I)Ljava.lang.String;", arg0)); }

    NBTTagCompound getCompoundTagAt(int arg0) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getCompoundTagAt", "(I)Lnet.minecraft.nbt.NBTTagCompound;", arg0)); }

    int tagCount() { return int(*javaClass->invokeMethod<int>(this->object, "tagCount", "()I", )); }

    void appendTag(NBTBase arg0) { (*javaClass->invokeMethod<void>(this->object, "appendTag", "(Lnet.minecraft.nbt.NBTBase;)V", arg0)); }

    int getTagType() { return int(*javaClass->invokeMethod<int>(this->object, "getTagType", "()I", )); }

    NBTBase removeTag(int arg0) { return NBTBase(*javaClass->invokeMethod<jobject>(this->object, "removeTag", "(I)Lnet.minecraft.nbt.NBTBase;", arg0)); }

    bool hasNoTags() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNoTags", "()Z", )); }

    NBTBase get(int arg0) { return NBTBase(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Lnet.minecraft.nbt.NBTBase;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void set(int arg0, NBTBase arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(ILnet.minecraft.nbt.NBTBase;)V", arg0, arg1)); }

    void write(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.io.DataOutput;)V", arg0)); }

    void read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (*javaClass->invokeMethod<void>(this->object, "read", "(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V", arg0, arg1, arg2)); }

    byte getId() { return byte(*javaClass->invokeMethod<byte>(this->object, "getId", "()B", )); }

    NBTBase copy() { return NBTBase(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lnet.minecraft.nbt.NBTBase;", )); }

    float getFloatAt(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloatAt", "(I)F", arg0)); }

    double getDoubleAt(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDoubleAt", "(I)D", arg0)); }

};


/**
 * Classpath: net.minecraft.world.WorldType
 * Package name: net.minecraft.world
 */
class WorldType : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldType";
public:
    STATICINITIALIZE;

    WorldType(jobject object) : JavaObject(object) {}

    static WorldType parseWorldType(String arg0) { return WorldType(*javaClass->invokeStaticMethod<jobject>(this->object, "parseWorldType", "(Ljava.lang.String;)Lnet.minecraft.world.WorldType;", arg0)); }

    bool isVersioned() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVersioned", "()Z", )); }

    WorldType setVersioned() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "setVersioned", "()Lnet.minecraft.world.WorldType;", )); }

    WorldType setNotificationData() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "setNotificationData", "()Lnet.minecraft.world.WorldType;", )); }

    WorldType setCanBeCreated(bool arg0) { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "setCanBeCreated", "(Z)Lnet.minecraft.world.WorldType;", arg0)); }

    String getTranslateName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTranslateName", "()Ljava.lang.String;", )); }

    String func_151359_c() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_151359_c", "()Ljava.lang.String;", )); }

    bool getCanBeCreated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanBeCreated", "()Z", )); }

    int getWorldTypeID() { return int(*javaClass->invokeMethod<int>(this->object, "getWorldTypeID", "()I", )); }

    bool showWorldInfoNotice() { return bool(*javaClass->invokeMethod<boolean>(this->object, "showWorldInfoNotice", "()Z", )); }

    String getWorldTypeName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getWorldTypeName", "()Ljava.lang.String;", )); }

    int getGeneratorVersion() { return int(*javaClass->invokeMethod<int>(this->object, "getGeneratorVersion", "()I", )); }

    WorldType getWorldTypeForGeneratorVersion(int arg0) { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "getWorldTypeForGeneratorVersion", "(I)Lnet.minecraft.world.WorldType;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.GameRules
 * Package name: net.minecraft.world
 */
class GameRules : public Object {
protected:
    const inline static char *className = "net.minecraft.world.GameRules";
public:
    STATICINITIALIZE;

    GameRules(jobject object) : JavaObject(object) {}

    void setOrCreateGameRule(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "setOrCreateGameRule", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void addGameRule(String arg0, String arg1, GameRules_ValueType arg2) { (*javaClass->invokeMethod<void>(this->object, "addGameRule", "(Ljava.lang.String;Ljava.lang.String;Lnet.minecraft.world.GameRules$ValueType;)V", arg0, arg1, arg2)); }

    bool areSameType(String arg0, GameRules_ValueType arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "areSameType", "(Ljava.lang.String;Lnet.minecraft.world.GameRules$ValueType;)Z", arg0, arg1)); }

    bool hasRule(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasRule", "(Ljava.lang.String;)Z", arg0)); }

    NBTTagCompound writeToNBT() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "writeToNBT", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    bool getBoolean(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(Ljava.lang.String;)Z", arg0)); }

    int getInt(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(Ljava.lang.String;)I", arg0)); }

    String getString(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.GameRules$ValueType
 * Enclosing class: net.minecraft.world.GameRules
 * Package name: net.minecraft.world
 */
class GameRules_ValueType : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.GameRules$ValueType";
public:
    STATICINITIALIZE;

    GameRules_ValueType(jobject object) : JavaObject(object) {}

    static GameRules_ValueType valueOf(String arg0) { return GameRules_ValueType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.world.GameRules$ValueType;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.EnumDifficulty
 * Package name: net.minecraft.world
 */
class EnumDifficulty : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.EnumDifficulty";
public:
    STATICINITIALIZE;

    EnumDifficulty(jobject object) : JavaObject(object) {}

    static EnumDifficulty getDifficultyEnum(int arg0) { return EnumDifficulty(*javaClass->invokeStaticMethod<jobject>(this->object, "getDifficultyEnum", "(I)Lnet.minecraft.world.EnumDifficulty;", arg0)); }

    int getDifficultyId() { return int(*javaClass->invokeMethod<int>(this->object, "getDifficultyId", "()I", )); }

    String getDifficultyResourceKey() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDifficultyResourceKey", "()Ljava.lang.String;", )); }

    static EnumDifficulty valueOf(String arg0) { return EnumDifficulty(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.world.EnumDifficulty;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.WorldSettings
 * Package name: net.minecraft.world
 */
class WorldSettings : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldSettings";
public:
    STATICINITIALIZE;

    WorldSettings(jobject object) : JavaObject(object) {}

    String getWorldName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getWorldName", "()Ljava.lang.String;", )); }

    WorldType getTerrainType() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "getTerrainType", "()Lnet.minecraft.world.WorldType;", )); }

    bool isMapFeaturesEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMapFeaturesEnabled", "()Z", )); }

    WorldSettings enableBonusChest() { return WorldSettings(*javaClass->invokeMethod<jobject>(this->object, "enableBonusChest", "()Lnet.minecraft.world.WorldSettings;", )); }

    WorldSettings enableCommands() { return WorldSettings(*javaClass->invokeMethod<jobject>(this->object, "enableCommands", "()Lnet.minecraft.world.WorldSettings;", )); }

    WorldSettings setWorldName(String arg0) { return WorldSettings(*javaClass->invokeMethod<jobject>(this->object, "setWorldName", "(Ljava.lang.String;)Lnet.minecraft.world.WorldSettings;", arg0)); }

    bool isBonusChestEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBonusChestEnabled", "()Z", )); }

    bool getHardcoreEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHardcoreEnabled", "()Z", )); }

    bool areCommandsAllowed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "areCommandsAllowed", "()Z", )); }

    static WorldSettings_GameType getGameTypeById(int arg0) { return WorldSettings_GameType(*javaClass->invokeStaticMethod<jobject>(this->object, "getGameTypeById", "(I)Lnet.minecraft.world.WorldSettings$GameType;", arg0)); }

    WorldSettings_GameType getGameType() { return WorldSettings_GameType(*javaClass->invokeMethod<jobject>(this->object, "getGameType", "()Lnet.minecraft.world.WorldSettings$GameType;", )); }

    long getSeed() { return long(*javaClass->invokeMethod<long>(this->object, "getSeed", "()J", )); }

};


/**
 * Classpath: net.minecraft.world.WorldSettings$GameType
 * Enclosing class: net.minecraft.world.WorldSettings
 * Package name: net.minecraft.world
 */
class WorldSettings_GameType : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.WorldSettings$GameType";
public:
    STATICINITIALIZE;

    WorldSettings_GameType(jobject object) : JavaObject(object) {}

    bool isAdventure() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAdventure", "()Z", )); }

    bool isSurvivalOrAdventure() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSurvivalOrAdventure", "()Z", )); }

    bool isCreative() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCreative", "()Z", )); }

    static WorldSettings_GameType getByID(int arg0) { return WorldSettings_GameType(*javaClass->invokeStaticMethod<jobject>(this->object, "getByID", "(I)Lnet.minecraft.world.WorldSettings$GameType;", arg0)); }

    void configurePlayerCapabilities(PlayerCapabilities arg0) { (*javaClass->invokeMethod<void>(this->object, "configurePlayerCapabilities", "(Lnet.minecraft.entity.player.PlayerCapabilities;)V", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    static WorldSettings_GameType valueOf(String arg0) { return WorldSettings_GameType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.world.WorldSettings$GameType;", arg0)); }

    static WorldSettings_GameType getByName(String arg0) { return WorldSettings_GameType(*javaClass->invokeStaticMethod<jobject>(this->object, "getByName", "(Ljava.lang.String;)Lnet.minecraft.world.WorldSettings$GameType;", arg0)); }

    int getID() { return int(*javaClass->invokeMethod<int>(this->object, "getID", "()I", )); }

};


/**
 * Classpath: net.minecraft.entity.player.PlayerCapabilities
 * Package name: net.minecraft.entity.player
 */
class PlayerCapabilities : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.player.PlayerCapabilities";
public:
    STATICINITIALIZE;

    PlayerCapabilities(jobject object) : JavaObject(object) {}

    float getWalkSpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getWalkSpeed", "()F", )); }

    void readCapabilitiesFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readCapabilitiesFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeCapabilitiesToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeCapabilitiesToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void setPlayerWalkSpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayerWalkSpeed", "(F)V", arg0)); }

    float getFlySpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getFlySpeed", "()F", )); }

    void setFlySpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setFlySpeed", "(F)V", arg0)); }

};


/**
 * Classpath: net.minecraft.world.biome.BiomeGenBase
 * Package name: net.minecraft.world.biome
 */
class BiomeGenBase : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase";
public:
    STATICINITIALIZE;

    BiomeGenBase(jobject object) : JavaObject(object) {}

    float getFloatTemperature(BlockPos arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloatTemperature", "(Lnet.minecraft.util.BlockPos;)F", arg0)); }

    int getSkyColorByTemp(float arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getSkyColorByTemp", "(F)I", arg0)); }

    bool getEnableSnow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getEnableSnow", "()Z", )); }

    bool canSpawnLightningBolt() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSpawnLightningBolt", "()Z", )); }

    bool isHighHumidity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHighHumidity", "()Z", )); }

    int getGrassColorAtPos(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getGrassColorAtPos", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    BiomeGenBase setBiomeName(String arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "setBiomeName", "(Ljava.lang.String;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    BiomeGenBase setDisableRain() { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "setDisableRain", "()Lnet.minecraft.world.biome.BiomeGenBase;", )); }

    BiomeGenBase setTemperatureRainfall(float arg0, float arg1) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "setTemperatureRainfall", "(FF)Lnet.minecraft.world.biome.BiomeGenBase;", arg0, arg1)); }

    BiomeGenBase setFillerBlockMetadata(int arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "setFillerBlockMetadata", "(I)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    BiomeGenBase setEnableSnow() { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "setEnableSnow", "()Lnet.minecraft.world.biome.BiomeGenBase;", )); }

    BiomeGenBase func_150563_c(int arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "func_150563_c", "(I)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    BiomeGenBase createMutation() { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "createMutation", "()Lnet.minecraft.world.biome.BiomeGenBase;", )); }

    BiomeGenBase createMutatedBiome(int arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "createMutatedBiome", "(I)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    BiomeDecorator createBiomeDecorator() { return BiomeDecorator(*javaClass->invokeMethod<jobject>(this->object, "createBiomeDecorator", "()Lnet.minecraft.world.biome.BiomeDecorator;", )); }

    WorldGenAbstractTree genBigTreeChance(Random arg0) { return WorldGenAbstractTree(*javaClass->invokeMethod<jobject>(this->object, "genBigTreeChance", "(Ljava.util.Random;)Lnet.minecraft.world.gen.feature.WorldGenAbstractTree;", arg0)); }

    WorldGenerator getRandomWorldGenForGrass(Random arg0) { return WorldGenerator(*javaClass->invokeMethod<jobject>(this->object, "getRandomWorldGenForGrass", "(Ljava.util.Random;)Lnet.minecraft.world.gen.feature.WorldGenerator;", arg0)); }

    BlockFlower_EnumFlowerType pickRandomFlower(Random arg0, BlockPos arg1) { return BlockFlower_EnumFlowerType(*javaClass->invokeMethod<jobject>(this->object, "pickRandomFlower", "(Ljava.util.Random;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.BlockFlower$EnumFlowerType;", arg0, arg1)); }

    BiomeGenBase func_150557_a(int arg0, bool arg1) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "func_150557_a", "(IZ)Lnet.minecraft.world.biome.BiomeGenBase;", arg0, arg1)); }

    List getSpawnableList(EnumCreatureType arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getSpawnableList", "(Lnet.minecraft.entity.EnumCreatureType;)Ljava.util.List;", arg0)); }

    bool isSnowyBiome() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSnowyBiome", "()Z", )); }

    float getSpawningChance() { return float(*javaClass->invokeMethod<float>(this->object, "getSpawningChance", "()F", )); }

    int getIntRainfall() { return int(*javaClass->invokeMethod<int>(this->object, "getIntRainfall", "()I", )); }

    float getFloatRainfall() { return float(*javaClass->invokeMethod<float>(this->object, "getFloatRainfall", "()F", )); }

    int getFoliageColorAtPos(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getFoliageColorAtPos", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    void genTerrainBlocks(World arg0, Random arg1, ChunkPrimer arg2, int arg3, int arg4, double arg5) { (*javaClass->invokeMethod<void>(this->object, "genTerrainBlocks", "(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.world.chunk.ChunkPrimer;IID)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void generateBiomeTerrain(World arg0, Random arg1, ChunkPrimer arg2, int arg3, int arg4, double arg5) { (*javaClass->invokeMethod<void>(this->object, "generateBiomeTerrain", "(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.world.chunk.ChunkPrimer;IID)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Class getBiomeClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getBiomeClass", "()Ljava.lang.Class;", )); }

    BiomeGenBase_TempCategory getTempCategory() { return BiomeGenBase_TempCategory(*javaClass->invokeMethod<jobject>(this->object, "getTempCategory", "()Lnet.minecraft.world.biome.BiomeGenBase$TempCategory;", )); }

    static BiomeGenBase getBiomeFromBiomeList(int arg0, BiomeGenBase arg1) { return BiomeGenBase(*javaClass->invokeStaticMethod<jobject>(this->object, "getBiomeFromBiomeList", "(ILnet.minecraft.world.biome.BiomeGenBase;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0, arg1)); }

    bool isEqualTo(BiomeGenBase arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqualTo", "(Lnet.minecraft.world.biome.BiomeGenBase;)Z", arg0)); }

    BiomeGenBase setHeight(BiomeGenBase_Height arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "setHeight", "(Lnet.minecraft.world.biome.BiomeGenBase$Height;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    void decorate(World arg0, Random arg1, BlockPos arg2) { (*javaClass->invokeMethod<void>(this->object, "decorate", "(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.util.BlockPos;)V", arg0, arg1, arg2)); }

    static BiomeGenBase getBiome(int arg0) { return BiomeGenBase(*javaClass->invokeStaticMethod<jobject>(this->object, "getBiome", "(I)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    BiomeGenBase setColor(int arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "setColor", "(I)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.biome.BiomeDecorator
 * Package name: net.minecraft.world.biome
 */
class BiomeDecorator : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeDecorator";
public:
    STATICINITIALIZE;

    BiomeDecorator(jobject object) : JavaObject(object) {}

    void genDecorations(BiomeGenBase arg0) { (*javaClass->invokeMethod<void>(this->object, "genDecorations", "(Lnet.minecraft.world.biome.BiomeGenBase;)V", arg0)); }

    void generateOres() { (*javaClass->invokeMethod<void>(this->object, "generateOres", "()V", )); }

    void genStandardOre1(int arg0, WorldGenerator arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "genStandardOre1", "(ILnet.minecraft.world.gen.feature.WorldGenerator;II)V", arg0, arg1, arg2, arg3)); }

    void genStandardOre2(int arg0, WorldGenerator arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "genStandardOre2", "(ILnet.minecraft.world.gen.feature.WorldGenerator;II)V", arg0, arg1, arg2, arg3)); }

    void decorate(World arg0, Random arg1, BiomeGenBase arg2, BlockPos arg3) { (*javaClass->invokeMethod<void>(this->object, "decorate", "(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.world.biome.BiomeGenBase;Lnet.minecraft.util.BlockPos;)V", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: net.minecraft.world.gen.feature.WorldGenerator
 * Package name: net.minecraft.world.gen.feature
 */
class WorldGenerator : public Object {
protected:
    const inline static char *className = "net.minecraft.world.gen.feature.WorldGenerator";
public:
    STATICINITIALIZE;

    WorldGenerator(jobject object) : JavaObject(object) {}

    void func_175904_e() { (*javaClass->invokeMethod<void>(this->object, "func_175904_e", "()V", )); }

    void setBlockAndNotifyAdequately(World arg0, BlockPos arg1, IBlockState arg2) { (*javaClass->invokeMethod<void>(this->object, "setBlockAndNotifyAdequately", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V", arg0, arg1, arg2)); }

    bool generate(World arg0, Random arg1, BlockPos arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "generate", "(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.world.gen.feature.WorldGenAbstractTree
 * Package name: net.minecraft.world.gen.feature
 */
class WorldGenAbstractTree : public WorldGenerator {
protected:
    const inline static char *className = "net.minecraft.world.gen.feature.WorldGenAbstractTree";
public:
    STATICINITIALIZE;

    WorldGenAbstractTree(jobject object) : JavaObject(object) {}

    bool func_150523_a(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_150523_a", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    void func_180711_a(World arg0, Random arg1, BlockPos arg2) { (*javaClass->invokeMethod<void>(this->object, "func_180711_a", "(Lnet.minecraft.world.World;Ljava.util.Random;Lnet.minecraft.util.BlockPos;)V", arg0, arg1, arg2)); }

    void func_175921_a(World arg0, BlockPos arg1) { (*javaClass->invokeMethod<void>(this->object, "func_175921_a", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.block.BlockFlower$EnumFlowerType
 * Enclosing class: net.minecraft.block.BlockFlower
 * Package name: net.minecraft.block
 */
class BlockFlower_EnumFlowerType : public Enum {
protected:
    const inline static char *className = "net.minecraft.block.BlockFlower$EnumFlowerType";
public:
    STATICINITIALIZE;

    BlockFlower_EnumFlowerType(jobject object) : JavaObject(object) {}

    BlockFlower_EnumFlowerColor getBlockType() { return BlockFlower_EnumFlowerColor(*javaClass->invokeMethod<jobject>(this->object, "getBlockType", "()Lnet.minecraft.block.BlockFlower$EnumFlowerColor;", )); }

    String getUnlocalizedName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava.lang.String;", )); }

    int getMeta() { return int(*javaClass->invokeMethod<int>(this->object, "getMeta", "()I", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static BlockFlower_EnumFlowerType valueOf(String arg0) { return BlockFlower_EnumFlowerType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.block.BlockFlower$EnumFlowerType;", arg0)); }

    static BlockFlower_EnumFlowerType getType(BlockFlower_EnumFlowerColor arg0, int arg1) { return BlockFlower_EnumFlowerType(*javaClass->invokeStaticMethod<jobject>(this->object, "getType", "(Lnet.minecraft.block.BlockFlower$EnumFlowerColor;I)Lnet.minecraft.block.BlockFlower$EnumFlowerType;", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.block.BlockFlower$EnumFlowerColor
 * Enclosing class: net.minecraft.block.BlockFlower
 * Package name: net.minecraft.block
 */
class BlockFlower_EnumFlowerColor : public Enum {
protected:
    const inline static char *className = "net.minecraft.block.BlockFlower$EnumFlowerColor";
public:
    STATICINITIALIZE;

    BlockFlower_EnumFlowerColor(jobject object) : JavaObject(object) {}

    BlockFlower getBlock() { return BlockFlower(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "()Lnet.minecraft.block.BlockFlower;", )); }

    static BlockFlower_EnumFlowerColor valueOf(String arg0) { return BlockFlower_EnumFlowerColor(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.block.BlockFlower$EnumFlowerColor;", arg0)); }

};


/**
 * Classpath: net.minecraft.block.state.BlockState
 * Package name: net.minecraft.block.state
 */
class BlockState : public Object {
protected:
    const inline static char *className = "net.minecraft.block.state.BlockState";
public:
    STATICINITIALIZE;

    BlockState(jobject object) : JavaObject(object) {}

    IBlockState getBaseState() { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getBaseState", "()Lnet.minecraft.block.state.IBlockState;", )); }

    ImmutableList getValidStates() { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "getValidStates", "()Lcom.google.common.collect.ImmutableList;", )); }

    List getAllowedValues() { return List(*javaClass->invokeMethod<jobject>(this->object, "getAllowedValues", "()Ljava.util.List;", )); }

    Block getBlock() { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "()Lnet.minecraft.block.Block;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Collection getProperties() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getProperties", "()Ljava.util.Collection;", )); }

};


/**
 * Classpath: net.minecraft.item.Item
 * Package name: net.minecraft.item
 */
class Item : public Object {
protected:
    const inline static char *className = "net.minecraft.item.Item";
public:
    STATICINITIALIZE;

    Item(jobject object) : JavaObject(object) {}

    static void registerItem(int arg0, ResourceLocation arg1, Item arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "registerItem", "(ILnet.minecraft.util.ResourceLocation;Lnet.minecraft.item.Item;)V", arg0, arg1, arg2)); }

    static void registerItem(int arg0, String arg1, Item arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "registerItem", "(ILjava.lang.String;Lnet.minecraft.item.Item;)V", arg0, arg1, arg2)); }

    int getMaxItemUseDuration(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMaxItemUseDuration", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    void onPlayerStoppedUsing(ItemStack arg0, World arg1, EntityPlayer arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "onPlayerStoppedUsing", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;I)V", arg0, arg1, arg2, arg3)); }

    EnumAction getItemUseAction(ItemStack arg0) { return EnumAction(*javaClass->invokeMethod<jobject>(this->object, "getItemUseAction", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.EnumAction;", arg0)); }

    ItemStack onItemUseFinish(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "onItemUseFinish", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;", arg0, arg1, arg2)); }

    static int getIdFromItem(Item arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getIdFromItem", "(Lnet.minecraft.item.Item;)I", arg0)); }

    float getStrVsBlock(ItemStack arg0, Block arg1) { return float(*javaClass->invokeMethod<float>(this->object, "getStrVsBlock", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.block.Block;)F", arg0, arg1)); }

    bool canHarvestBlock(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canHarvestBlock", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    static Item getItemById(int arg0) { return Item(*javaClass->invokeStaticMethod<jobject>(this->object, "getItemById", "(I)Lnet.minecraft.item.Item;", arg0)); }

    static Item getItemFromBlock(Block arg0) { return Item(*javaClass->invokeStaticMethod<jobject>(this->object, "getItemFromBlock", "(Lnet.minecraft.block.Block;)Lnet.minecraft.item.Item;", arg0)); }

    static Item getByNameOrId(String arg0) { return Item(*javaClass->invokeStaticMethod<jobject>(this->object, "getByNameOrId", "(Ljava.lang.String;)Lnet.minecraft.item.Item;", arg0)); }

    bool updateItemStackNBT(NBTTagCompound arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "updateItemStackNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)Z", arg0)); }

    Item setMaxStackSize(int arg0) { return Item(*javaClass->invokeMethod<jobject>(this->object, "setMaxStackSize", "(I)Lnet.minecraft.item.Item;", arg0)); }

    ItemStack onItemRightClick(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "onItemRightClick", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;", arg0, arg1, arg2)); }

    int getItemStackLimit() { return int(*javaClass->invokeMethod<int>(this->object, "getItemStackLimit", "()I", )); }

    Item setHasSubtypes(bool arg0) { return Item(*javaClass->invokeMethod<jobject>(this->object, "setHasSubtypes", "(Z)Lnet.minecraft.item.Item;", arg0)); }

    int getMaxDamage() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxDamage", "()I", )); }

    Item setMaxDamage(int arg0) { return Item(*javaClass->invokeMethod<jobject>(this->object, "setMaxDamage", "(I)Lnet.minecraft.item.Item;", arg0)); }

    bool isDamageable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDamageable", "()Z", )); }

    bool onBlockDestroyed(ItemStack arg0, World arg1, Block arg2, BlockPos arg3, EntityLivingBase arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "onBlockDestroyed", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.EntityLivingBase;)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool itemInteractionForEntity(ItemStack arg0, EntityPlayer arg1, EntityLivingBase arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "itemInteractionForEntity", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.entity.EntityLivingBase;)Z", arg0, arg1, arg2)); }

    Item setUnlocalizedName(String arg0) { return Item(*javaClass->invokeMethod<jobject>(this->object, "setUnlocalizedName", "(Ljava.lang.String;)Lnet.minecraft.item.Item;", arg0)); }

    String getUnlocalizedName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava.lang.String;", )); }

    String getUnlocalizedName(ItemStack arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnlocalizedName", "(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;", arg0)); }

    Item setContainerItem(Item arg0) { return Item(*javaClass->invokeMethod<jobject>(this->object, "setContainerItem", "(Lnet.minecraft.item.Item;)Lnet.minecraft.item.Item;", arg0)); }

    bool getShareTag() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getShareTag", "()Z", )); }

    Item getContainerItem() { return Item(*javaClass->invokeMethod<jobject>(this->object, "getContainerItem", "()Lnet.minecraft.item.Item;", )); }

    bool hasContainerItem() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasContainerItem", "()Z", )); }

    int getColorFromItemStack(ItemStack arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getColorFromItemStack", "(Lnet.minecraft.item.ItemStack;I)I", arg0, arg1)); }

    Item setPotionEffect(String arg0) { return Item(*javaClass->invokeMethod<jobject>(this->object, "setPotionEffect", "(Ljava.lang.String;)Lnet.minecraft.item.Item;", arg0)); }

    String getPotionEffect(ItemStack arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getPotionEffect", "(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;", arg0)); }

    bool isPotionIngredient(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPotionIngredient", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    void addInformation(ItemStack arg0, EntityPlayer arg1, List arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "addInformation", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.player.EntityPlayer;Ljava.util.List;Z)V", arg0, arg1, arg2, arg3)); }

    String getItemStackDisplayName(ItemStack arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getItemStackDisplayName", "(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;", arg0)); }

    int getItemEnchantability() { return int(*javaClass->invokeMethod<int>(this->object, "getItemEnchantability", "()I", )); }

    void getSubItems(Item arg0, CreativeTabs arg1, List arg2) { (*javaClass->invokeMethod<void>(this->object, "getSubItems", "(Lnet.minecraft.item.Item;Lnet.minecraft.creativetab.CreativeTabs;Ljava.util.List;)V", arg0, arg1, arg2)); }

    CreativeTabs getCreativeTab() { return CreativeTabs(*javaClass->invokeMethod<jobject>(this->object, "getCreativeTab", "()Lnet.minecraft.creativetab.CreativeTabs;", )); }

    Item setCreativeTab(CreativeTabs arg0) { return Item(*javaClass->invokeMethod<jobject>(this->object, "setCreativeTab", "(Lnet.minecraft.creativetab.CreativeTabs;)Lnet.minecraft.item.Item;", arg0)); }

    bool canItemEditBlocks() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canItemEditBlocks", "()Z", )); }

    bool getIsRepairable(ItemStack arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsRepairable", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    Multimap getItemAttributeModifiers() { return Multimap(*javaClass->invokeMethod<jobject>(this->object, "getItemAttributeModifiers", "()Lcom.google.common.collect.Multimap;", )); }

    static void registerItems() { (*javaClass->invokeStaticMethod<void>(this->object, "registerItems", "()V", )); }

    static void registerItemBlock(Block arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "registerItemBlock", "(Lnet.minecraft.block.Block;)V", arg0)); }

    static void registerItemBlock(Block arg0, Item arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "registerItemBlock", "(Lnet.minecraft.block.Block;Lnet.minecraft.item.Item;)V", arg0, arg1)); }

    bool getHasSubtypes() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHasSubtypes", "()Z", )); }

    int getMetadata(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMetadata", "(I)I", arg0)); }

    EnumRarity getRarity(ItemStack arg0) { return EnumRarity(*javaClass->invokeMethod<jobject>(this->object, "getRarity", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.EnumRarity;", arg0)); }

    void onUpdate(ItemStack arg0, World arg1, Entity arg2, int arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.Entity;IZ)V", arg0, arg1, arg2, arg3, arg4)); }

    bool hitEntity(ItemStack arg0, EntityLivingBase arg1, EntityLivingBase arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hitEntity", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.EntityLivingBase;)Z", arg0, arg1, arg2)); }

    bool onItemUse(ItemStack arg0, EntityPlayer arg1, World arg2, BlockPos arg3, EnumFacing arg4, float arg5, float arg6, float arg7) { return bool(*javaClass->invokeMethod<boolean>(this->object, "onItemUse", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;FFF)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    Item setFull3D() { return Item(*javaClass->invokeMethod<jobject>(this->object, "setFull3D", "()Lnet.minecraft.item.Item;", )); }

    bool isFull3D() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFull3D", "()Z", )); }

    void onCreated(ItemStack arg0, World arg1, EntityPlayer arg2) { (*javaClass->invokeMethod<void>(this->object, "onCreated", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)V", arg0, arg1, arg2)); }

    bool isMap() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMap", "()Z", )); }

    bool hasEffect(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasEffect", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    bool isItemTool(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemTool", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    bool shouldRotateAroundWhenRendering() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldRotateAroundWhenRendering", "()Z", )); }

    String getUnlocalizedNameInefficiently(ItemStack arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnlocalizedNameInefficiently", "(Lnet.minecraft.item.ItemStack;)Ljava.lang.String;", arg0)); }

    MovingObjectPosition getMovingObjectPositionFromPlayer(World arg0, EntityPlayer arg1, bool arg2) { return MovingObjectPosition(*javaClass->invokeMethod<jobject>(this->object, "getMovingObjectPositionFromPlayer", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;Z)Lnet.minecraft.util.MovingObjectPosition;", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.item.ItemStack
 * Package name: net.minecraft.item
 */
class ItemStack : public Object {
protected:
    const inline static char *className = "net.minecraft.item.ItemStack";
public:
    STATICINITIALIZE;

    ItemStack(jobject object) : JavaObject(object) {}

    IChatComponent getChatComponent() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getChatComponent", "()Lnet.minecraft.util.IChatComponent;", )); }

    bool isItemDamaged() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemDamaged", "()Z", )); }

    int getItemDamage() { return int(*javaClass->invokeMethod<int>(this->object, "getItemDamage", "()I", )); }

    static ItemStack loadItemStackFromNBT(NBTTagCompound arg0) { return ItemStack(*javaClass->invokeStaticMethod<jobject>(this->object, "loadItemStackFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.item.ItemStack;", arg0)); }

    int getMaxItemUseDuration() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxItemUseDuration", "()I", )); }

    void onPlayerStoppedUsing(World arg0, EntityPlayer arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "onPlayerStoppedUsing", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;I)V", arg0, arg1, arg2)); }

    EnumAction getItemUseAction() { return EnumAction(*javaClass->invokeMethod<jobject>(this->object, "getItemUseAction", "()Lnet.minecraft.item.EnumAction;", )); }

    ItemStack onItemUseFinish(World arg0, EntityPlayer arg1) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "onItemUseFinish", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;", arg0, arg1)); }

    float getStrVsBlock(Block arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getStrVsBlock", "(Lnet.minecraft.block.Block;)F", arg0)); }

    bool canHarvestBlock(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canHarvestBlock", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    Multimap getAttributeModifiers() { return Multimap(*javaClass->invokeMethod<jobject>(this->object, "getAttributeModifiers", "()Lcom.google.common.collect.Multimap;", )); }

    static bool areItemStacksEqual(ItemStack arg0, ItemStack arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "areItemStacksEqual", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    bool getIsItemStackEqual(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsItemStackEqual", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    ItemStack useItemRightClick(World arg0, EntityPlayer arg1) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "useItemRightClick", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;", arg0, arg1)); }

    bool isStackable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStackable", "()Z", )); }

    bool isItemStackDamageable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemStackDamageable", "()Z", )); }

    bool hasTagCompound() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasTagCompound", "()Z", )); }

    void setItemDamage(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setItemDamage", "(I)V", arg0)); }

    bool attemptDamageItem(int arg0, Random arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attemptDamageItem", "(ILjava.util.Random;)Z", arg0, arg1)); }

    static bool areItemStackTagsEqual(ItemStack arg0, ItemStack arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "areItemStackTagsEqual", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    bool isItemStackEqual(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemStackEqual", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    static bool areItemsEqual(ItemStack arg0, ItemStack arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "areItemsEqual", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    bool isItemEqual(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemEqual", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    static ItemStack copyItemStack(ItemStack arg0) { return ItemStack(*javaClass->invokeStaticMethod<jobject>(this->object, "copyItemStack", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.ItemStack;", arg0)); }

    void updateAnimation(World arg0, Entity arg1, int arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "updateAnimation", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.Entity;IZ)V", arg0, arg1, arg2, arg3)); }

    NBTTagCompound getSubCompound(String arg0, bool arg1) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getSubCompound", "(Ljava.lang.String;Z)Lnet.minecraft.nbt.NBTTagCompound;", arg0, arg1)); }

    NBTTagList getEnchantmentTagList() { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "getEnchantmentTagList", "()Lnet.minecraft.nbt.NBTTagList;", )); }

    ItemStack setStackDisplayName(String arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "setStackDisplayName", "(Ljava.lang.String;)Lnet.minecraft.item.ItemStack;", arg0)); }

    void clearCustomName() { (*javaClass->invokeMethod<void>(this->object, "clearCustomName", "()V", )); }

    bool isItemEnchantable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemEnchantable", "()Z", )); }

    void addEnchantment(Enchantment arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addEnchantment", "(Lnet.minecraft.enchantment.Enchantment;I)V", arg0, arg1)); }

    bool isOnItemFrame() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOnItemFrame", "()Z", )); }

    void setItemFrame(EntityItemFrame arg0) { (*javaClass->invokeMethod<void>(this->object, "setItemFrame", "(Lnet.minecraft.entity.item.EntityItemFrame;)V", arg0)); }

    EntityItemFrame getItemFrame() { return EntityItemFrame(*javaClass->invokeMethod<jobject>(this->object, "getItemFrame", "()Lnet.minecraft.entity.item.EntityItemFrame;", )); }

    int getRepairCost() { return int(*javaClass->invokeMethod<int>(this->object, "getRepairCost", "()I", )); }

    void setRepairCost(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setRepairCost", "(I)V", arg0)); }

    int getMaxStackSize() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxStackSize", "()I", )); }

    bool canEditBlocks() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEditBlocks", "()Z", )); }

    bool hasDisplayName() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasDisplayName", "()Z", )); }

    int getMaxDamage() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxDamage", "()I", )); }

    void onBlockDestroyed(World arg0, Block arg1, BlockPos arg2, EntityPlayer arg3) { (*javaClass->invokeMethod<void>(this->object, "onBlockDestroyed", "(Lnet.minecraft.world.World;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.player.EntityPlayer;)V", arg0, arg1, arg2, arg3)); }

    String getUnlocalizedName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnlocalizedName", "()Ljava.lang.String;", )); }

    bool isItemEnchanted() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemEnchanted", "()Z", )); }

    bool getHasSubtypes() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHasSubtypes", "()Z", )); }

    int getMetadata() { return int(*javaClass->invokeMethod<int>(this->object, "getMetadata", "()I", )); }

    void setTagCompound(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "setTagCompound", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool interactWithEntity(EntityPlayer arg0, EntityLivingBase arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interactWithEntity", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.entity.EntityLivingBase;)Z", arg0, arg1)); }

    NBTTagCompound getTagCompound() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getTagCompound", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    void damageItem(int arg0, EntityLivingBase arg1) { (*javaClass->invokeMethod<void>(this->object, "damageItem", "(ILnet.minecraft.entity.EntityLivingBase;)V", arg0, arg1)); }

    List getTooltip(EntityPlayer arg0, bool arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getTooltip", "(Lnet.minecraft.entity.player.EntityPlayer;Z)Ljava.util.List;", arg0, arg1)); }

    EnumRarity getRarity() { return EnumRarity(*javaClass->invokeMethod<jobject>(this->object, "getRarity", "()Lnet.minecraft.item.EnumRarity;", )); }

    NBTTagCompound writeToNBT(NBTTagCompound arg0) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.nbt.NBTTagCompound;", arg0)); }

    void setTagInfo(String arg0, NBTBase arg1) { (*javaClass->invokeMethod<void>(this->object, "setTagInfo", "(Ljava.lang.String;Lnet.minecraft.nbt.NBTBase;)V", arg0, arg1)); }

    void hitEntity(EntityLivingBase arg0, EntityPlayer arg1) { (*javaClass->invokeMethod<void>(this->object, "hitEntity", "(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.player.EntityPlayer;)V", arg0, arg1)); }

    bool onItemUse(EntityPlayer arg0, World arg1, BlockPos arg2, EnumFacing arg3, float arg4, float arg5, float arg6) { return bool(*javaClass->invokeMethod<boolean>(this->object, "onItemUse", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;FFF)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    bool hasEffect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasEffect", "()Z", )); }

    ItemStack splitStack(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "splitStack", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void onCrafting(World arg0, EntityPlayer arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "onCrafting", "(Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;I)V", arg0, arg1, arg2)); }

    void setItem(Item arg0) { (*javaClass->invokeMethod<void>(this->object, "setItem", "(Lnet.minecraft.item.Item;)V", arg0)); }

    bool canDestroy(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDestroy", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    bool canPlaceOn(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPlaceOn", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    ItemStack copy() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lnet.minecraft.item.ItemStack;", )); }

    Item getItem() { return Item(*javaClass->invokeMethod<jobject>(this->object, "getItem", "()Lnet.minecraft.item.Item;", )); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.util.IChatComponent
 * Package name: net.minecraft.util
 */
class IChatComponent : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.util.IChatComponent";
public:
    STATICINITIALIZE;

    IChatComponent(jobject object) : JavaObject(object) {}

    ChatStyle getChatStyle() { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "getChatStyle", "()Lnet.minecraft.util.ChatStyle;", )); }

    String getUnformattedText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnformattedText", "()Ljava.lang.String;", )); }

    String getFormattedText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFormattedText", "()Ljava.lang.String;", )); }

    IChatComponent setChatStyle(ChatStyle arg0) { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "setChatStyle", "(Lnet.minecraft.util.ChatStyle;)Lnet.minecraft.util.IChatComponent;", arg0)); }

    IChatComponent appendSibling(IChatComponent arg0) { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "appendSibling", "(Lnet.minecraft.util.IChatComponent;)Lnet.minecraft.util.IChatComponent;", arg0)); }

    String getUnformattedTextForChat() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUnformattedTextForChat", "()Ljava.lang.String;", )); }

    List getSiblings() { return List(*javaClass->invokeMethod<jobject>(this->object, "getSiblings", "()Ljava.util.List;", )); }

    IChatComponent appendText(String arg0) { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "appendText", "(Ljava.lang.String;)Lnet.minecraft.util.IChatComponent;", arg0)); }

    IChatComponent createCopy() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "createCopy", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.util.ChatStyle
 * Package name: net.minecraft.util
 */
class ChatStyle : public Object {
protected:
    const inline static char *className = "net.minecraft.util.ChatStyle";
public:
    STATICINITIALIZE;

    ChatStyle(jobject object) : JavaObject(object) {}

    HoverEvent getChatHoverEvent() { return HoverEvent(*javaClass->invokeMethod<jobject>(this->object, "getChatHoverEvent", "()Lnet.minecraft.event.HoverEvent;", )); }

    ClickEvent getChatClickEvent() { return ClickEvent(*javaClass->invokeMethod<jobject>(this->object, "getChatClickEvent", "()Lnet.minecraft.event.ClickEvent;", )); }

    String getInsertion() { return String(*javaClass->invokeMethod<jobject>(this->object, "getInsertion", "()Ljava.lang.String;", )); }

    bool getStrikethrough() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getStrikethrough", "()Z", )); }

    bool getUnderlined() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getUnderlined", "()Z", )); }

    bool getObfuscated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getObfuscated", "()Z", )); }

    ChatStyle setStrikethrough(Boolean arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setStrikethrough", "(Ljava.lang.Boolean;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    ChatStyle setUnderlined(Boolean arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setUnderlined", "(Ljava.lang.Boolean;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    ChatStyle setObfuscated(Boolean arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setObfuscated", "(Ljava.lang.Boolean;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    ChatStyle setParentStyle(ChatStyle arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setParentStyle", "(Lnet.minecraft.util.ChatStyle;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    String getFormattingCode() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFormattingCode", "()Ljava.lang.String;", )); }

    ChatStyle createShallowCopy() { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "createShallowCopy", "()Lnet.minecraft.util.ChatStyle;", )); }

    ChatStyle createDeepCopy() { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "createDeepCopy", "()Lnet.minecraft.util.ChatStyle;", )); }

    ChatStyle setChatClickEvent(ClickEvent arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setChatClickEvent", "(Lnet.minecraft.event.ClickEvent;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    ChatStyle setChatHoverEvent(HoverEvent arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setChatHoverEvent", "(Lnet.minecraft.event.HoverEvent;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    ChatStyle setInsertion(String arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setInsertion", "(Ljava.lang.String;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    EnumChatFormatting getColor() { return EnumChatFormatting(*javaClass->invokeMethod<jobject>(this->object, "getColor", "()Lnet.minecraft.util.EnumChatFormatting;", )); }

    bool getBold() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBold", "()Z", )); }

    bool getItalic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getItalic", "()Z", )); }

    ChatStyle setBold(Boolean arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setBold", "(Ljava.lang.Boolean;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    ChatStyle setItalic(Boolean arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setItalic", "(Ljava.lang.Boolean;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    ChatStyle setColor(EnumChatFormatting arg0) { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "setColor", "(Lnet.minecraft.util.EnumChatFormatting;)Lnet.minecraft.util.ChatStyle;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    ChatStyle getParent() { return ChatStyle(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Lnet.minecraft.util.ChatStyle;", )); }

};


/**
 * Classpath: net.minecraft.event.HoverEvent
 * Package name: net.minecraft.event
 */
class HoverEvent : public Object {
protected:
    const inline static char *className = "net.minecraft.event.HoverEvent";
public:
    STATICINITIALIZE;

    HoverEvent(jobject object) : JavaObject(object) {}

    HoverEvent_Action getAction() { return HoverEvent_Action(*javaClass->invokeMethod<jobject>(this->object, "getAction", "()Lnet.minecraft.event.HoverEvent$Action;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    IChatComponent getValue() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.event.HoverEvent$Action
 * Enclosing class: net.minecraft.event.HoverEvent
 * Package name: net.minecraft.event
 */
class HoverEvent_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.event.HoverEvent$Action";
public:
    STATICINITIALIZE;

    HoverEvent_Action(jobject object) : JavaObject(object) {}

    bool shouldAllowInChat() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldAllowInChat", "()Z", )); }

    static HoverEvent_Action getValueByCanonicalName(String arg0) { return HoverEvent_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "getValueByCanonicalName", "(Ljava.lang.String;)Lnet.minecraft.event.HoverEvent$Action;", arg0)); }

    static HoverEvent_Action valueOf(String arg0) { return HoverEvent_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.event.HoverEvent$Action;", arg0)); }

    String getCanonicalName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.event.ClickEvent
 * Package name: net.minecraft.event
 */
class ClickEvent : public Object {
protected:
    const inline static char *className = "net.minecraft.event.ClickEvent";
public:
    STATICINITIALIZE;

    ClickEvent(jobject object) : JavaObject(object) {}

    ClickEvent_Action getAction() { return ClickEvent_Action(*javaClass->invokeMethod<jobject>(this->object, "getAction", "()Lnet.minecraft.event.ClickEvent$Action;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    String getValue() { return String(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.event.ClickEvent$Action
 * Enclosing class: net.minecraft.event.ClickEvent
 * Package name: net.minecraft.event
 */
class ClickEvent_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.event.ClickEvent$Action";
public:
    STATICINITIALIZE;

    ClickEvent_Action(jobject object) : JavaObject(object) {}

    bool shouldAllowInChat() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldAllowInChat", "()Z", )); }

    static ClickEvent_Action getValueByCanonicalName(String arg0) { return ClickEvent_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "getValueByCanonicalName", "(Ljava.lang.String;)Lnet.minecraft.event.ClickEvent$Action;", arg0)); }

    static ClickEvent_Action valueOf(String arg0) { return ClickEvent_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.event.ClickEvent$Action;", arg0)); }

    String getCanonicalName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCanonicalName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.util.EnumChatFormatting
 * Package name: net.minecraft.util
 */
class EnumChatFormatting : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumChatFormatting";
public:
    STATICINITIALIZE;

    EnumChatFormatting(jobject object) : JavaObject(object) {}

    int getColorIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getColorIndex", "()I", )); }

    static EnumChatFormatting func_175744_a(int arg0) { return EnumChatFormatting(*javaClass->invokeStaticMethod<jobject>(this->object, "func_175744_a", "(I)Lnet.minecraft.util.EnumChatFormatting;", arg0)); }

    static String func_175745_c(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "func_175745_c", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    bool isFancyStyling() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFancyStyling", "()Z", )); }

    static Collection getValidValues(bool arg0, bool arg1) { return Collection(*javaClass->invokeStaticMethod<jobject>(this->object, "getValidValues", "(ZZ)Ljava.util.Collection;", arg0, arg1)); }

    String getFriendlyName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFriendlyName", "()Ljava.lang.String;", )); }

    static EnumChatFormatting getValueByName(String arg0) { return EnumChatFormatting(*javaClass->invokeStaticMethod<jobject>(this->object, "getValueByName", "(Ljava.lang.String;)Lnet.minecraft.util.EnumChatFormatting;", arg0)); }

    bool isColor() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isColor", "()Z", )); }

    static String getTextWithoutFormattingCodes(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getTextWithoutFormattingCodes", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static EnumChatFormatting valueOf(String arg0) { return EnumChatFormatting(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.EnumChatFormatting;", arg0)); }

};


/**
 * Classpath: net.minecraft.stats.StatBase
 * Package name: net.minecraft.stats
 */
class StatBase : public Object {
protected:
    const inline static char *className = "net.minecraft.stats.StatBase";
public:
    STATICINITIALIZE;

    StatBase(jobject object) : JavaObject(object) {}

    IChatComponent getStatName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getStatName", "()Lnet.minecraft.util.IChatComponent;", )); }

    bool isAchievement() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAchievement", "()Z", )); }

    IScoreObjectiveCriteria func_150952_k() { return IScoreObjectiveCriteria(*javaClass->invokeMethod<jobject>(this->object, "func_150952_k", "()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;", )); }

    StatBase initIndependentStat() { return StatBase(*javaClass->invokeMethod<jobject>(this->object, "initIndependentStat", "()Lnet.minecraft.stats.StatBase;", )); }

    StatBase registerStat() { return StatBase(*javaClass->invokeMethod<jobject>(this->object, "registerStat", "()Lnet.minecraft.stats.StatBase;", )); }

    IChatComponent func_150955_j() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "func_150955_j", "()Lnet.minecraft.util.IChatComponent;", )); }

    Class func_150954_l() { return Class(*javaClass->invokeMethod<jobject>(this->object, "func_150954_l", "()Ljava.lang.Class;", )); }

    StatBase func_150953_b(Class arg0) { return StatBase(*javaClass->invokeMethod<jobject>(this->object, "func_150953_b", "(Ljava.lang.Class;)Lnet.minecraft.stats.StatBase;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    String format(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "format", "(I)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: net.minecraft.scoreboard.IScoreObjectiveCriteria
 * Package name: net.minecraft.scoreboard
 */
class IScoreObjectiveCriteria : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.scoreboard.IScoreObjectiveCriteria";
public:
    STATICINITIALIZE;

    IScoreObjectiveCriteria(jobject object) : JavaObject(object) {}

    IScoreObjectiveCriteria_EnumRenderType getRenderType() { return IScoreObjectiveCriteria_EnumRenderType(*javaClass->invokeMethod<jobject>(this->object, "getRenderType", "()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;", )); }

    int func_96635_a(List arg0) { return int(*javaClass->invokeMethod<int>(this->object, "func_96635_a", "(Ljava.util.List;)I", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool isReadOnly() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadOnly", "()Z", )); }

};


/**
 * Classpath: net.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType
 * Enclosing class: net.minecraft.scoreboard.IScoreObjectiveCriteria
 * Package name: net.minecraft.scoreboard
 */
class IScoreObjectiveCriteria_EnumRenderType : public Enum {
protected:
    const inline static char *className = "net.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType";
public:
    STATICINITIALIZE;

    IScoreObjectiveCriteria_EnumRenderType(jobject object) : JavaObject(object) {}

    String func_178796_a() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_178796_a", "()Ljava.lang.String;", )); }

    static IScoreObjectiveCriteria_EnumRenderType func_178795_a(String arg0) { return IScoreObjectiveCriteria_EnumRenderType(*javaClass->invokeStaticMethod<jobject>(this->object, "func_178795_a", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;", arg0)); }

    static IScoreObjectiveCriteria_EnumRenderType valueOf(String arg0) { return IScoreObjectiveCriteria_EnumRenderType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;", arg0)); }

};


/**
 * Classpath: net.minecraft.scoreboard.Scoreboard
 * Package name: net.minecraft.scoreboard
 */
class Scoreboard : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Scoreboard";
public:
    STATICINITIALIZE;

    Scoreboard(jobject object) : JavaObject(object) {}

    Collection getObjectivesFromCriteria(IScoreObjectiveCriteria arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getObjectivesFromCriteria", "(Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;)Ljava.util.Collection;", arg0)); }

    Score getValueFromObjective(String arg0, ScoreObjective arg1) { return Score(*javaClass->invokeMethod<jobject>(this->object, "getValueFromObjective", "(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)Lnet.minecraft.scoreboard.Score;", arg0, arg1)); }

    ScorePlayerTeam getPlayersTeam(String arg0) { return ScorePlayerTeam(*javaClass->invokeMethod<jobject>(this->object, "getPlayersTeam", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScorePlayerTeam;", arg0)); }

    ScoreObjective addScoreObjective(String arg0, IScoreObjectiveCriteria arg1) { return ScoreObjective(*javaClass->invokeMethod<jobject>(this->object, "addScoreObjective", "(Ljava.lang.String;Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;)Lnet.minecraft.scoreboard.ScoreObjective;", arg0, arg1)); }

    ScoreObjective getObjective(String arg0) { return ScoreObjective(*javaClass->invokeMethod<jobject>(this->object, "getObjective", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScoreObjective;", arg0)); }

    void removeObjective(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "removeObjective", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    void removeObjectiveFromEntity(String arg0, ScoreObjective arg1) { (*javaClass->invokeMethod<void>(this->object, "removeObjectiveFromEntity", "(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0, arg1)); }

    void setObjectiveInDisplaySlot(int arg0, ScoreObjective arg1) { (*javaClass->invokeMethod<void>(this->object, "setObjectiveInDisplaySlot", "(ILnet.minecraft.scoreboard.ScoreObjective;)V", arg0, arg1)); }

    bool addPlayerToTeam(String arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addPlayerToTeam", "(Ljava.lang.String;Ljava.lang.String;)Z", arg0, arg1)); }

    void removePlayerFromTeam(String arg0, ScorePlayerTeam arg1) { (*javaClass->invokeMethod<void>(this->object, "removePlayerFromTeam", "(Ljava.lang.String;Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0, arg1)); }

    bool entityHasObjective(String arg0, ScoreObjective arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "entityHasObjective", "(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)Z", arg0, arg1)); }

    void onScoreObjectiveAdded(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "onScoreObjectiveAdded", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    Collection getSortedScores(ScoreObjective arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getSortedScores", "(Lnet.minecraft.scoreboard.ScoreObjective;)Ljava.util.Collection;", arg0)); }

    Collection getScoreObjectives() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getScoreObjectives", "()Ljava.util.Collection;", )); }

    Collection getObjectiveNames() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getObjectiveNames", "()Ljava.util.Collection;", )); }

    void func_96516_a(String arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96516_a", "(Ljava.lang.String;)V", arg0)); }

    void func_178820_a(String arg0, ScoreObjective arg1) { (*javaClass->invokeMethod<void>(this->object, "func_178820_a", "(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0, arg1)); }

    Map getObjectivesForEntity(String arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getObjectivesForEntity", "(Ljava.lang.String;)Ljava.util.Map;", arg0)); }

    ScoreObjective getObjectiveInDisplaySlot(int arg0) { return ScoreObjective(*javaClass->invokeMethod<jobject>(this->object, "getObjectiveInDisplaySlot", "(I)Lnet.minecraft.scoreboard.ScoreObjective;", arg0)); }

    void func_96533_c(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96533_c", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    void broadcastTeamCreated(ScorePlayerTeam arg0) { (*javaClass->invokeMethod<void>(this->object, "broadcastTeamCreated", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0)); }

    void func_96513_c(ScorePlayerTeam arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96513_c", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0)); }

    bool removePlayerFromTeams(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removePlayerFromTeams", "(Ljava.lang.String;)Z", arg0)); }

    Collection getTeamNames() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getTeamNames", "()Ljava.util.Collection;", )); }

    void func_96532_b(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96532_b", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    void func_96536_a(Score arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96536_a", "(Lnet.minecraft.scoreboard.Score;)V", arg0)); }

    void sendTeamUpdate(ScorePlayerTeam arg0) { (*javaClass->invokeMethod<void>(this->object, "sendTeamUpdate", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0)); }

    static String getObjectiveDisplaySlot(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getObjectiveDisplaySlot", "(I)Ljava.lang.String;", arg0)); }

    void func_181140_a(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181140_a", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    Collection getScores() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getScores", "()Ljava.util.Collection;", )); }

    Collection getTeams() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getTeams", "()Ljava.util.Collection;", )); }

    ScorePlayerTeam getTeam(String arg0) { return ScorePlayerTeam(*javaClass->invokeMethod<jobject>(this->object, "getTeam", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScorePlayerTeam;", arg0)); }

    ScorePlayerTeam createTeam(String arg0) { return ScorePlayerTeam(*javaClass->invokeMethod<jobject>(this->object, "createTeam", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.ScorePlayerTeam;", arg0)); }

    void removeTeam(ScorePlayerTeam arg0) { (*javaClass->invokeMethod<void>(this->object, "removeTeam", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0)); }

    static int getObjectiveDisplaySlotNumber(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getObjectiveDisplaySlotNumber", "(Ljava.lang.String;)I", arg0)); }

};


/**
 * Classpath: net.minecraft.scoreboard.ScoreObjective
 * Package name: net.minecraft.scoreboard
 */
class ScoreObjective : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ScoreObjective";
public:
    STATICINITIALIZE;

    ScoreObjective(jobject object) : JavaObject(object) {}

    IScoreObjectiveCriteria_EnumRenderType getRenderType() { return IScoreObjectiveCriteria_EnumRenderType(*javaClass->invokeMethod<jobject>(this->object, "getRenderType", "()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;", )); }

    void setDisplayName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisplayName", "(Ljava.lang.String;)V", arg0)); }

    void setRenderType(IScoreObjectiveCriteria_EnumRenderType arg0) { (*javaClass->invokeMethod<void>(this->object, "setRenderType", "(Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;)V", arg0)); }

    IScoreObjectiveCriteria getCriteria() { return IScoreObjectiveCriteria(*javaClass->invokeMethod<jobject>(this->object, "getCriteria", "()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria;", )); }

    Scoreboard getScoreboard() { return Scoreboard(*javaClass->invokeMethod<jobject>(this->object, "getScoreboard", "()Lnet.minecraft.scoreboard.Scoreboard;", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.scoreboard.Score
 * Package name: net.minecraft.scoreboard
 */
class Score : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Score";
public:
    STATICINITIALIZE;

    Score(jobject object) : JavaObject(object) {}

    int getScorePoints() { return int(*javaClass->invokeMethod<int>(this->object, "getScorePoints", "()I", )); }

    void decreaseScore(int arg0) { (*javaClass->invokeMethod<void>(this->object, "decreaseScore", "(I)V", arg0)); }

    Scoreboard getScoreScoreboard() { return Scoreboard(*javaClass->invokeMethod<jobject>(this->object, "getScoreScoreboard", "()Lnet.minecraft.scoreboard.Scoreboard;", )); }

    void func_96648_a() { (*javaClass->invokeMethod<void>(this->object, "func_96648_a", "()V", )); }

    void func_96651_a(List arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96651_a", "(Ljava.util.List;)V", arg0)); }

    void increseScore(int arg0) { (*javaClass->invokeMethod<void>(this->object, "increseScore", "(I)V", arg0)); }

    ScoreObjective getObjective() { return ScoreObjective(*javaClass->invokeMethod<jobject>(this->object, "getObjective", "()Lnet.minecraft.scoreboard.ScoreObjective;", )); }

    String getPlayerName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPlayerName", "()Ljava.lang.String;", )); }

    void setScorePoints(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setScorePoints", "(I)V", arg0)); }

    void setLocked(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocked", "(Z)V", arg0)); }

    bool isLocked() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLocked", "()Z", )); }

};


/**
 * Classpath: net.minecraft.scoreboard.Team$EnumVisible
 * Enclosing class: net.minecraft.scoreboard.Team
 * Package name: net.minecraft.scoreboard
 */
class Team_EnumVisible : public Enum {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Team$EnumVisible";
public:
    STATICINITIALIZE;

    Team_EnumVisible(jobject object) : JavaObject(object) {}

    static Team_EnumVisible func_178824_a(String arg0) { return Team_EnumVisible(*javaClass->invokeStaticMethod<jobject>(this->object, "func_178824_a", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.Team$EnumVisible;", arg0)); }

    static Team_EnumVisible valueOf(String arg0) { return Team_EnumVisible(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.scoreboard.Team$EnumVisible;", arg0)); }

};


/**
 * Classpath: net.minecraft.scoreboard.Team
 * Package name: net.minecraft.scoreboard
 */
class Team : public Object {
protected:
    const inline static char *className = "net.minecraft.scoreboard.Team";
public:
    STATICINITIALIZE;

    Team(jobject object) : JavaObject(object) {}

    bool getAllowFriendlyFire() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAllowFriendlyFire", "()Z", )); }

    Team_EnumVisible getDeathMessageVisibility() { return Team_EnumVisible(*javaClass->invokeMethod<jobject>(this->object, "getDeathMessageVisibility", "()Lnet.minecraft.scoreboard.Team$EnumVisible;", )); }

    Team_EnumVisible getNameTagVisibility() { return Team_EnumVisible(*javaClass->invokeMethod<jobject>(this->object, "getNameTagVisibility", "()Lnet.minecraft.scoreboard.Team$EnumVisible;", )); }

    String getRegisteredName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRegisteredName", "()Ljava.lang.String;", )); }

    Collection getMembershipCollection() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getMembershipCollection", "()Ljava.util.Collection;", )); }

    String formatString(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "formatString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    bool isSameTeam(Team arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSameTeam", "(Lnet.minecraft.scoreboard.Team;)Z", arg0)); }

    bool getSeeFriendlyInvisiblesEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getSeeFriendlyInvisiblesEnabled", "()Z", )); }

};


/**
 * Classpath: net.minecraft.entity.item.EntityItem
 * Package name: net.minecraft.entity.item
 */
class EntityItem : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.item.EntityItem";
public:
    STATICINITIALIZE;

    EntityItem(jobject object) : JavaObject(object) {}

    void travelToDimension(int arg0) { (*javaClass->invokeMethod<void>(this->object, "travelToDimension", "(I)V", arg0)); }

    void dealFireDamage(int arg0) { (*javaClass->invokeMethod<void>(this->object, "dealFireDamage", "(I)V", arg0)); }

    void setDefaultPickupDelay() { (*javaClass->invokeMethod<void>(this->object, "setDefaultPickupDelay", "()V", )); }

    void onCollideWithPlayer(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "onCollideWithPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void setPickupDelay(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPickupDelay", "(I)V", arg0)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    bool handleWaterMovement() { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleWaterMovement", "()Z", )); }

    void setEntityItemStack(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "setEntityItemStack", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    ItemStack getEntityItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getEntityItem", "()Lnet.minecraft.item.ItemStack;", )); }

    void searchForOtherItemsNearby() { (*javaClass->invokeMethod<void>(this->object, "searchForOtherItemsNearby", "()V", )); }

    bool combineItems(EntityItem arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "combineItems", "(Lnet.minecraft.entity.item.EntityItem;)Z", arg0)); }

    void setNoPickupDelay() { (*javaClass->invokeMethod<void>(this->object, "setNoPickupDelay", "()V", )); }

    void setInfinitePickupDelay() { (*javaClass->invokeMethod<void>(this->object, "setInfinitePickupDelay", "()V", )); }

    bool cannotPickup() { return bool(*javaClass->invokeMethod<boolean>(this->object, "cannotPickup", "()Z", )); }

    void setNoDespawn() { (*javaClass->invokeMethod<void>(this->object, "setNoDespawn", "()V", )); }

    void func_174870_v() { (*javaClass->invokeMethod<void>(this->object, "func_174870_v", "()V", )); }

    bool canTriggerWalking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canTriggerWalking", "()Z", )); }

    bool canAttackWithItem() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAttackWithItem", "()Z", )); }

    String getThrower() { return String(*javaClass->invokeMethod<jobject>(this->object, "getThrower", "()Ljava.lang.String;", )); }

    void setThrower(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setThrower", "(Ljava.lang.String;)V", arg0)); }

    int getAge() { return int(*javaClass->invokeMethod<int>(this->object, "getAge", "()I", )); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void setAgeToCreativeDespawnTime() { (*javaClass->invokeMethod<void>(this->object, "setAgeToCreativeDespawnTime", "()V", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String getOwner() { return String(*javaClass->invokeMethod<jobject>(this->object, "getOwner", "()Ljava.lang.String;", )); }

    void setOwner(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setOwner", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.util.DamageSource
 * Package name: net.minecraft.util
 */
class DamageSource : public Object {
protected:
    const inline static char *className = "net.minecraft.util.DamageSource";
public:
    STATICINITIALIZE;

    DamageSource(jobject object) : JavaObject(object) {}

    bool isCreativePlayer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCreativePlayer", "()Z", )); }

    bool canHarmInCreative() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canHarmInCreative", "()Z", )); }

    bool isDifficultyScaled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDifficultyScaled", "()Z", )); }

    bool isUnblockable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUnblockable", "()Z", )); }

    float getHungerDamage() { return float(*javaClass->invokeMethod<float>(this->object, "getHungerDamage", "()F", )); }

    bool isFireDamage() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFireDamage", "()Z", )); }

    bool isDamageAbsolute() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDamageAbsolute", "()Z", )); }

    IChatComponent getDeathMessage(EntityLivingBase arg0) { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDeathMessage", "(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.util.IChatComponent;", arg0)); }

    static DamageSource setExplosionSource(Explosion arg0) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "setExplosionSource", "(Lnet.minecraft.world.Explosion;)Lnet.minecraft.util.DamageSource;", arg0)); }

    bool isExplosion() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isExplosion", "()Z", )); }

    DamageSource setFireDamage() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setFireDamage", "()Lnet.minecraft.util.DamageSource;", )); }

    DamageSource setDamageBypassesArmor() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setDamageBypassesArmor", "()Lnet.minecraft.util.DamageSource;", )); }

    DamageSource setDamageIsAbsolute() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setDamageIsAbsolute", "()Lnet.minecraft.util.DamageSource;", )); }

    DamageSource setMagicDamage() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setMagicDamage", "()Lnet.minecraft.util.DamageSource;", )); }

    static DamageSource causeMobDamage(EntityLivingBase arg0) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "causeMobDamage", "(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.util.DamageSource;", arg0)); }

    static DamageSource causeArrowDamage(EntityArrow arg0, Entity arg1) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "causeArrowDamage", "(Lnet.minecraft.entity.projectile.EntityArrow;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;", arg0, arg1)); }

    DamageSource setProjectile() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setProjectile", "()Lnet.minecraft.util.DamageSource;", )); }

    static DamageSource causeFireballDamage(EntityFireball arg0, Entity arg1) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "causeFireballDamage", "(Lnet.minecraft.entity.projectile.EntityFireball;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;", arg0, arg1)); }

    static DamageSource causeThrownDamage(Entity arg0, Entity arg1) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "causeThrownDamage", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;", arg0, arg1)); }

    static DamageSource causeIndirectMagicDamage(Entity arg0, Entity arg1) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "causeIndirectMagicDamage", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;", arg0, arg1)); }

    static DamageSource causeThornsDamage(Entity arg0) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "causeThornsDamage", "(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.DamageSource;", arg0)); }

    DamageSource setDifficultyScaled() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setDifficultyScaled", "()Lnet.minecraft.util.DamageSource;", )); }

    DamageSource setExplosion() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setExplosion", "()Lnet.minecraft.util.DamageSource;", )); }

    bool isProjectile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isProjectile", "()Z", )); }

    Entity getSourceOfDamage() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getSourceOfDamage", "()Lnet.minecraft.entity.Entity;", )); }

    String getDamageType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDamageType", "()Ljava.lang.String;", )); }

    bool isMagicDamage() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMagicDamage", "()Z", )); }

    static DamageSource causePlayerDamage(EntityPlayer arg0) { return DamageSource(*javaClass->invokeStaticMethod<jobject>(this->object, "causePlayerDamage", "(Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.util.DamageSource;", arg0)); }

    Entity getEntity() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntity", "()Lnet.minecraft.entity.Entity;", )); }

    DamageSource setDamageAllowedInCreativeMode() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "setDamageAllowedInCreativeMode", "()Lnet.minecraft.util.DamageSource;", )); }

};


/**
 * Classpath: net.minecraft.entity.EntityLivingBase
 * Package name: net.minecraft.entity
 */
class EntityLivingBase : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.EntityLivingBase";
public:
    STATICINITIALIZE;

    EntityLivingBase(jobject object) : JavaObject(object) {}

    void applyEntityAttributes() { (*javaClass->invokeMethod<void>(this->object, "applyEntityAttributes", "()V", )); }

    BaseAttributeMap getAttributeMap() { return BaseAttributeMap(*javaClass->invokeMethod<jobject>(this->object, "getAttributeMap", "()Lnet.minecraft.entity.ai.attributes.BaseAttributeMap;", )); }

    IAttributeInstance getEntityAttribute(IAttribute arg0) { return IAttributeInstance(*javaClass->invokeMethod<jobject>(this->object, "getEntityAttribute", "(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;", arg0)); }

    bool isEntityAlive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEntityAlive", "()Z", )); }

    void handleStatusUpdate(byte arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }

    bool isMovementBlocked() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMovementBlocked", "()Z", )); }

    void updateRidden() { (*javaClass->invokeMethod<void>(this->object, "updateRidden", "()V", )); }

    void mountEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "mountEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    float getMaxHealth() { return float(*javaClass->invokeMethod<float>(this->object, "getMaxHealth", "()F", )); }

    void updateEntityActionState() { (*javaClass->invokeMethod<void>(this->object, "updateEntityActionState", "()V", )); }

    void updateArmSwingProgress() { (*javaClass->invokeMethod<void>(this->object, "updateArmSwingProgress", "()V", )); }

    void onLivingUpdate() { (*javaClass->invokeMethod<void>(this->object, "onLivingUpdate", "()V", )); }

    void setAIMoveSpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setAIMoveSpeed", "(F)V", arg0)); }

    String getHurtSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHurtSound", "()Ljava.lang.String;", )); }

    String getDeathSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDeathSound", "()Ljava.lang.String;", )); }

    bool isPotionActive(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPotionActive", "(I)Z", arg0)); }

    bool isPotionActive(Potion arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPotionActive", "(Lnet.minecraft.potion.Potion;)Z", arg0)); }

    PotionEffect getActivePotionEffect(Potion arg0) { return PotionEffect(*javaClass->invokeMethod<jobject>(this->object, "getActivePotionEffect", "(Lnet.minecraft.potion.Potion;)Lnet.minecraft.potion.PotionEffect;", arg0)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    void damageArmor(float arg0) { (*javaClass->invokeMethod<void>(this->object, "damageArmor", "(F)V", arg0)); }

    int getTotalArmorValue() { return int(*javaClass->invokeMethod<int>(this->object, "getTotalArmorValue", "()I", )); }

    void damageEntity(DamageSource arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "damageEntity", "(Lnet.minecraft.util.DamageSource;F)V", arg0, arg1)); }

    float applyArmorCalculations(DamageSource arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "applyArmorCalculations", "(Lnet.minecraft.util.DamageSource;F)F", arg0, arg1)); }

    float getAbsorptionAmount() { return float(*javaClass->invokeMethod<float>(this->object, "getAbsorptionAmount", "()F", )); }

    void setAbsorptionAmount(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setAbsorptionAmount", "(F)V", arg0)); }

    CombatTracker getCombatTracker() { return CombatTracker(*javaClass->invokeMethod<jobject>(this->object, "getCombatTracker", "()Lnet.minecraft.util.CombatTracker;", )); }

    void onKillCommand() { (*javaClass->invokeMethod<void>(this->object, "onKillCommand", "()V", )); }

    void updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3) { (*javaClass->invokeMethod<void>(this->object, "updateFallState", "(DZLnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;)V", arg0, arg1, arg2, arg3)); }

    bool canBreatheUnderwater() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBreatheUnderwater", "()Z", )); }

    void onEntityUpdate() { (*javaClass->invokeMethod<void>(this->object, "onEntityUpdate", "()V", )); }

    int decreaseAirSupply(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "decreaseAirSupply", "(I)I", arg0)); }

    void onDeathUpdate() { (*javaClass->invokeMethod<void>(this->object, "onDeathUpdate", "()V", )); }

    void setRevengeTarget(EntityLivingBase arg0) { (*javaClass->invokeMethod<void>(this->object, "setRevengeTarget", "(Lnet.minecraft.entity.EntityLivingBase;)V", arg0)); }

    void updatePotionEffects() { (*javaClass->invokeMethod<void>(this->object, "updatePotionEffects", "()V", )); }

    bool canDropLoot() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDropLoot", "()Z", )); }

    EntityLivingBase getAITarget() { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "getAITarget", "()Lnet.minecraft.entity.EntityLivingBase;", )); }

    int getRevengeTimer() { return int(*javaClass->invokeMethod<int>(this->object, "getRevengeTimer", "()I", )); }

    EntityLivingBase getLastAttacker() { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "getLastAttacker", "()Lnet.minecraft.entity.EntityLivingBase;", )); }

    int getLastAttackerTime() { return int(*javaClass->invokeMethod<int>(this->object, "getLastAttackerTime", "()I", )); }

    void onFinishedPotionEffect(PotionEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "onFinishedPotionEffect", "(Lnet.minecraft.potion.PotionEffect;)V", arg0)); }

    void onChangedPotionEffect(PotionEffect arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "onChangedPotionEffect", "(Lnet.minecraft.potion.PotionEffect;Z)V", arg0, arg1)); }

    void updatePotionMetadata() { (*javaClass->invokeMethod<void>(this->object, "updatePotionMetadata", "()V", )); }

    void resetPotionEffectMetadata() { (*javaClass->invokeMethod<void>(this->object, "resetPotionEffectMetadata", "()V", )); }

    void clearActivePotions() { (*javaClass->invokeMethod<void>(this->object, "clearActivePotions", "()V", )); }

    Collection getActivePotionEffects() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getActivePotionEffects", "()Ljava.util.Collection;", )); }

    void addPotionEffect(PotionEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "addPotionEffect", "(Lnet.minecraft.potion.PotionEffect;)V", arg0)); }

    bool isPotionApplicable(PotionEffect arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPotionApplicable", "(Lnet.minecraft.potion.PotionEffect;)Z", arg0)); }

    void onNewPotionEffect(PotionEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "onNewPotionEffect", "(Lnet.minecraft.potion.PotionEffect;)V", arg0)); }

    bool isEntityUndead() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEntityUndead", "()Z", )); }

    void removePotionEffectClient(int arg0) { (*javaClass->invokeMethod<void>(this->object, "removePotionEffectClient", "(I)V", arg0)); }

    void removePotionEffect(int arg0) { (*javaClass->invokeMethod<void>(this->object, "removePotionEffect", "(I)V", arg0)); }

    void setBeenAttacked() { (*javaClass->invokeMethod<void>(this->object, "setBeenAttacked", "()V", )); }

    float getSoundVolume() { return float(*javaClass->invokeMethod<float>(this->object, "getSoundVolume", "()F", )); }

    float getSoundPitch() { return float(*javaClass->invokeMethod<float>(this->object, "getSoundPitch", "()F", )); }

    void renderBrokenItemStack(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "renderBrokenItemStack", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    EntityLivingBase func_94060_bK() { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "func_94060_bK", "()Lnet.minecraft.entity.EntityLivingBase;", )); }

    void dropFewItems(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "dropFewItems", "(ZI)V", arg0, arg1)); }

    void dropEquipment(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "dropEquipment", "(ZI)V", arg0, arg1)); }

    void addRandomDrop() { (*javaClass->invokeMethod<void>(this->object, "addRandomDrop", "()V", )); }

    void performHurtAnimation() { (*javaClass->invokeMethod<void>(this->object, "performHurtAnimation", "()V", )); }

    int getArrowCountInEntity() { return int(*javaClass->invokeMethod<int>(this->object, "getArrowCountInEntity", "()I", )); }

    void setArrowCountInEntity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setArrowCountInEntity", "(I)V", arg0)); }

    int getArmSwingAnimationEnd() { return int(*javaClass->invokeMethod<int>(this->object, "getArmSwingAnimationEnd", "()I", )); }

    void dismountEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "dismountEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    float getJumpUpwardsMotion() { return float(*javaClass->invokeMethod<float>(this->object, "getJumpUpwardsMotion", "()F", )); }

    void updateAITick() { (*javaClass->invokeMethod<void>(this->object, "updateAITick", "()V", )); }

    void handleJumpLava() { (*javaClass->invokeMethod<void>(this->object, "handleJumpLava", "()V", )); }

    bool isServerWorld() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isServerWorld", "()Z", )); }

    bool attackEntityAsMob(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityAsMob", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    float func_110146_f(float arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "func_110146_f", "(FF)F", arg0, arg1)); }

    void collideWithNearbyEntities() { (*javaClass->invokeMethod<void>(this->object, "collideWithNearbyEntities", "()V", )); }

    void collideWithEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "collideWithEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6) { (*javaClass->invokeMethod<void>(this->object, "setPositionAndRotation2", "(DDDFFIZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void onItemPickup(Entity arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "onItemPickup", "(Lnet.minecraft.entity.Entity;I)V", arg0, arg1)); }

    bool canEntityBeSeen(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEntityBeSeen", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    float getSwingProgress(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getSwingProgress", "(F)F", arg0)); }

    bool canBeCollidedWith() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeCollidedWith", "()Z", )); }

    bool canBePushed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBePushed", "()Z", )); }

    float getRotationYawHead() { return float(*javaClass->invokeMethod<float>(this->object, "getRotationYawHead", "()F", )); }

    void setRotationYawHead(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setRotationYawHead", "(F)V", arg0)); }

    void func_181013_g(float arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181013_g", "(F)V", arg0)); }

    bool isOnSameTeam(EntityLivingBase arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOnSameTeam", "(Lnet.minecraft.entity.EntityLivingBase;)Z", arg0)); }

    void sendEnterCombat() { (*javaClass->invokeMethod<void>(this->object, "sendEnterCombat", "()V", )); }

    void sendEndCombat() { (*javaClass->invokeMethod<void>(this->object, "sendEndCombat", "()V", )); }

    void markPotionsDirty() { (*javaClass->invokeMethod<void>(this->object, "markPotionsDirty", "()V", )); }

    void moveEntityWithHeading(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "moveEntityWithHeading", "(FF)V", arg0, arg1)); }

    float getAIMoveSpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getAIMoveSpeed", "()F", )); }

    String getFallSoundString(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getFallSoundString", "(I)Ljava.lang.String;", arg0)); }

    ItemStack getCurrentArmor(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getCurrentArmor", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    int getExperiencePoints(EntityPlayer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet.minecraft.entity.player.EntityPlayer;)I", arg0)); }

    ItemStack getEquipmentInSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getEquipmentInSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void setCurrentItemOrArmor(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    bool isPlayerSleeping() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlayerSleeping", "()Z", )); }

    ItemStack getHeldItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getHeldItem", "()Lnet.minecraft.item.ItemStack;", )); }

    EnumCreatureAttribute getCreatureAttribute() { return EnumCreatureAttribute(*javaClass->invokeMethod<jobject>(this->object, "getCreatureAttribute", "()Lnet.minecraft.entity.EnumCreatureAttribute;", )); }

    void setSprinting(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSprinting", "(Z)V", arg0)); }

    void setLastAttacker(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "setLastAttacker", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    Team getTeam() { return Team(*javaClass->invokeMethod<jobject>(this->object, "getTeam", "()Lnet.minecraft.scoreboard.Team;", )); }

    bool isChild() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isChild", "()Z", )); }

    Random getRNG() { return Random(*javaClass->invokeMethod<jobject>(this->object, "getRNG", "()Ljava.util.Random;", )); }

    int getAge() { return int(*javaClass->invokeMethod<int>(this->object, "getAge", "()I", )); }

    void knockBack(Entity arg0, float arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "knockBack", "(Lnet.minecraft.entity.Entity;FDD)V", arg0, arg1, arg2, arg3)); }

    void kill() { (*javaClass->invokeMethod<void>(this->object, "kill", "()V", )); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void setHealth(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setHealth", "(F)V", arg0)); }

    void heal(float arg0) { (*javaClass->invokeMethod<void>(this->object, "heal", "(F)V", arg0)); }

    void onDeath(DamageSource arg0) { (*javaClass->invokeMethod<void>(this->object, "onDeath", "(Lnet.minecraft.util.DamageSource;)V", arg0)); }

    float getHealth() { return float(*javaClass->invokeMethod<float>(this->object, "getHealth", "()F", )); }

    void swingItem() { (*javaClass->invokeMethod<void>(this->object, "swingItem", "()V", )); }

    bool isOnLadder() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOnLadder", "()Z", )); }

    void fall(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }

    bool isPlayer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlayer", "()Z", )); }

    void setJumping(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setJumping", "(Z)V", arg0)); }

    Vec3 getLookVec() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getLookVec", "()Lnet.minecraft.util.Vec3;", )); }

    Vec3 getLook(float arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getLook", "(F)Lnet.minecraft.util.Vec3;", arg0)); }

    bool isOnTeam(Team arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOnTeam", "(Lnet.minecraft.scoreboard.Team;)Z", arg0)); }

    bool getAlwaysRenderNameTagForRender() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAlwaysRenderNameTagForRender", "()Z", )); }

    float applyPotionDamageCalculations(DamageSource arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "applyPotionDamageCalculations", "(Lnet.minecraft.util.DamageSource;F)F", arg0, arg1)); }

    void jump() { (*javaClass->invokeMethod<void>(this->object, "jump", "()V", )); }

};


/**
 * Classpath: net.minecraft.entity.ai.attributes.BaseAttributeMap
 * Package name: net.minecraft.entity.ai.attributes
 */
class BaseAttributeMap : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.BaseAttributeMap";
public:
    STATICINITIALIZE;

    BaseAttributeMap(jobject object) : JavaObject(object) {}

    IAttributeInstance registerAttribute(IAttribute arg0) { return IAttributeInstance(*javaClass->invokeMethod<jobject>(this->object, "registerAttribute", "(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;", arg0)); }

    void removeAttributeModifiers(Multimap arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAttributeModifiers", "(Lcom.google.common.collect.Multimap;)V", arg0)); }

    void applyAttributeModifiers(Multimap arg0) { (*javaClass->invokeMethod<void>(this->object, "applyAttributeModifiers", "(Lcom.google.common.collect.Multimap;)V", arg0)); }

    IAttributeInstance getAttributeInstance(IAttribute arg0) { return IAttributeInstance(*javaClass->invokeMethod<jobject>(this->object, "getAttributeInstance", "(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;", arg0)); }

    IAttributeInstance getAttributeInstanceByName(String arg0) { return IAttributeInstance(*javaClass->invokeMethod<jobject>(this->object, "getAttributeInstanceByName", "(Ljava.lang.String;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;", arg0)); }

    IAttributeInstance func_180376_c(IAttribute arg0) { return IAttributeInstance(*javaClass->invokeMethod<jobject>(this->object, "func_180376_c", "(Lnet.minecraft.entity.ai.attributes.IAttribute;)Lnet.minecraft.entity.ai.attributes.IAttributeInstance;", arg0)); }

    Collection getAllAttributes() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getAllAttributes", "()Ljava.util.Collection;", )); }

    void func_180794_a(IAttributeInstance arg0) { (*javaClass->invokeMethod<void>(this->object, "func_180794_a", "(Lnet.minecraft.entity.ai.attributes.IAttributeInstance;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.ai.attributes.IAttribute
 * Package name: net.minecraft.entity.ai.attributes
 */
class IAttribute : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.IAttribute";
public:
    STATICINITIALIZE;

    IAttribute(jobject object) : JavaObject(object) {}

    IAttribute func_180372_d() { return IAttribute(*javaClass->invokeMethod<jobject>(this->object, "func_180372_d", "()Lnet.minecraft.entity.ai.attributes.IAttribute;", )); }

    bool getShouldWatch() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getShouldWatch", "()Z", )); }

    double clampValue(double arg0) { return double(*javaClass->invokeMethod<double>(this->object, "clampValue", "(D)D", arg0)); }

    String getAttributeUnlocalizedName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAttributeUnlocalizedName", "()Ljava.lang.String;", )); }

    double getDefaultValue() { return double(*javaClass->invokeMethod<double>(this->object, "getDefaultValue", "()D", )); }

};


/**
 * Classpath: net.minecraft.entity.ai.attributes.IAttributeInstance
 * Package name: net.minecraft.entity.ai.attributes
 */
class IAttributeInstance : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.IAttributeInstance";
public:
    STATICINITIALIZE;

    IAttributeInstance(jobject object) : JavaObject(object) {}

    double getBaseValue() { return double(*javaClass->invokeMethod<double>(this->object, "getBaseValue", "()D", )); }

    void setBaseValue(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setBaseValue", "(D)V", arg0)); }

    double getAttributeValue() { return double(*javaClass->invokeMethod<double>(this->object, "getAttributeValue", "()D", )); }

    AttributeModifier getModifier(UUID arg0) { return AttributeModifier(*javaClass->invokeMethod<jobject>(this->object, "getModifier", "(Ljava.util.UUID;)Lnet.minecraft.entity.ai.attributes.AttributeModifier;", arg0)); }

    void removeModifier(AttributeModifier arg0) { (*javaClass->invokeMethod<void>(this->object, "removeModifier", "(Lnet.minecraft.entity.ai.attributes.AttributeModifier;)V", arg0)); }

    void applyModifier(AttributeModifier arg0) { (*javaClass->invokeMethod<void>(this->object, "applyModifier", "(Lnet.minecraft.entity.ai.attributes.AttributeModifier;)V", arg0)); }

    void removeAllModifiers() { (*javaClass->invokeMethod<void>(this->object, "removeAllModifiers", "()V", )); }

    Collection getModifiersByOperation(int arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getModifiersByOperation", "(I)Ljava.util.Collection;", arg0)); }

    Collection func_111122_c() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "func_111122_c", "()Ljava.util.Collection;", )); }

    bool hasModifier(AttributeModifier arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasModifier", "(Lnet.minecraft.entity.ai.attributes.AttributeModifier;)Z", arg0)); }

    IAttribute getAttribute() { return IAttribute(*javaClass->invokeMethod<jobject>(this->object, "getAttribute", "()Lnet.minecraft.entity.ai.attributes.IAttribute;", )); }

};


/**
 * Classpath: net.minecraft.entity.ai.attributes.AttributeModifier
 * Package name: net.minecraft.entity.ai.attributes
 */
class AttributeModifier : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.attributes.AttributeModifier";
public:
    STATICINITIALIZE;

    AttributeModifier(jobject object) : JavaObject(object) {}

    int getOperation() { return int(*javaClass->invokeMethod<int>(this->object, "getOperation", "()I", )); }

    bool isSaved() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSaved", "()Z", )); }

    AttributeModifier setSaved(bool arg0) { return AttributeModifier(*javaClass->invokeMethod<jobject>(this->object, "setSaved", "(Z)Lnet.minecraft.entity.ai.attributes.AttributeModifier;", arg0)); }

    double getAmount() { return double(*javaClass->invokeMethod<double>(this->object, "getAmount", "()D", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    UUID getID() { return UUID(*javaClass->invokeMethod<jobject>(this->object, "getID", "()Ljava.util.UUID;", )); }

};


/**
 * Classpath: net.minecraft.potion.Potion
 * Package name: net.minecraft.potion
 */
class Potion : public Object {
protected:
    const inline static char *className = "net.minecraft.potion.Potion";
public:
    STATICINITIALIZE;

    Potion(jobject object) : JavaObject(object) {}

    bool hasStatusIcon() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasStatusIcon", "()Z", )); }

    int getStatusIconIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getStatusIconIndex", "()I", )); }

    static String getDurationString(PotionEffect arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getDurationString", "(Lnet.minecraft.potion.PotionEffect;)Ljava.lang.String;", arg0)); }

    bool isBadEffect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBadEffect", "()Z", )); }

    Potion setPotionName(String arg0) { return Potion(*javaClass->invokeMethod<jobject>(this->object, "setPotionName", "(Ljava.lang.String;)Lnet.minecraft.potion.Potion;", arg0)); }

    Potion setIconIndex(int arg0, int arg1) { return Potion(*javaClass->invokeMethod<jobject>(this->object, "setIconIndex", "(II)Lnet.minecraft.potion.Potion;", arg0, arg1)); }

    Potion setEffectiveness(double arg0) { return Potion(*javaClass->invokeMethod<jobject>(this->object, "setEffectiveness", "(D)Lnet.minecraft.potion.Potion;", arg0)); }

    static Set func_181168_c() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "func_181168_c", "()Ljava.util.Set;", )); }

    void performEffect(EntityLivingBase arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "performEffect", "(Lnet.minecraft.entity.EntityLivingBase;I)V", arg0, arg1)); }

    void affectEntity(Entity arg0, Entity arg1, EntityLivingBase arg2, int arg3, double arg4) { (*javaClass->invokeMethod<void>(this->object, "affectEntity", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.EntityLivingBase;ID)V", arg0, arg1, arg2, arg3, arg4)); }

    double getEffectiveness() { return double(*javaClass->invokeMethod<double>(this->object, "getEffectiveness", "()D", )); }

    int getLiquidColor() { return int(*javaClass->invokeMethod<int>(this->object, "getLiquidColor", "()I", )); }

    Map getAttributeModifierMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getAttributeModifierMap", "()Ljava.util.Map;", )); }

    double getAttributeModifierAmount(int arg0, AttributeModifier arg1) { return double(*javaClass->invokeMethod<double>(this->object, "getAttributeModifierAmount", "(ILnet.minecraft.entity.ai.attributes.AttributeModifier;)D", arg0, arg1)); }

    bool isInstant() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInstant", "()Z", )); }

    bool isReady(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReady", "(II)Z", arg0, arg1)); }

    bool isUsable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUsable", "()Z", )); }

    void applyAttributesModifiersToEntity(EntityLivingBase arg0, BaseAttributeMap arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "applyAttributesModifiersToEntity", "(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.ai.attributes.BaseAttributeMap;I)V", arg0, arg1, arg2)); }

    void removeAttributesModifiersFromEntity(EntityLivingBase arg0, BaseAttributeMap arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "removeAttributesModifiersFromEntity", "(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.ai.attributes.BaseAttributeMap;I)V", arg0, arg1, arg2)); }

    Potion registerPotionAttributeModifier(IAttribute arg0, String arg1, double arg2, int arg3) { return Potion(*javaClass->invokeMethod<jobject>(this->object, "registerPotionAttributeModifier", "(Lnet.minecraft.entity.ai.attributes.IAttribute;Ljava.lang.String;DI)Lnet.minecraft.potion.Potion;", arg0, arg1, arg2, arg3)); }

    static Potion getPotionFromResourceLocation(String arg0) { return Potion(*javaClass->invokeStaticMethod<jobject>(this->object, "getPotionFromResourceLocation", "(Ljava.lang.String;)Lnet.minecraft.potion.Potion;", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    int getId() { return int(*javaClass->invokeMethod<int>(this->object, "getId", "()I", )); }

};


/**
 * Classpath: net.minecraft.potion.PotionEffect
 * Package name: net.minecraft.potion
 */
class PotionEffect : public Object {
protected:
    const inline static char *className = "net.minecraft.potion.PotionEffect";
public:
    STATICINITIALIZE;

    PotionEffect(jobject object) : JavaObject(object) {}

    int getAmplifier() { return int(*javaClass->invokeMethod<int>(this->object, "getAmplifier", "()I", )); }

    int getPotionID() { return int(*javaClass->invokeMethod<int>(this->object, "getPotionID", "()I", )); }

    int getDuration() { return int(*javaClass->invokeMethod<int>(this->object, "getDuration", "()I", )); }

    void setPotionDurationMax(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setPotionDurationMax", "(Z)V", arg0)); }

    void performEffect(EntityLivingBase arg0) { (*javaClass->invokeMethod<void>(this->object, "performEffect", "(Lnet.minecraft.entity.EntityLivingBase;)V", arg0)); }

    bool getIsPotionDurationMax() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsPotionDurationMax", "()Z", )); }

    void setSplashPotion(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSplashPotion", "(Z)V", arg0)); }

    bool getIsAmbient() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsAmbient", "()Z", )); }

    bool getIsShowParticles() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsShowParticles", "()Z", )); }

    int deincrementDuration() { return int(*javaClass->invokeMethod<int>(this->object, "deincrementDuration", "()I", )); }

    String getEffectName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getEffectName", "()Ljava.lang.String;", )); }

    bool onUpdate(EntityLivingBase arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "onUpdate", "(Lnet.minecraft.entity.EntityLivingBase;)Z", arg0)); }

    NBTTagCompound writeCustomPotionEffectToNBT(NBTTagCompound arg0) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "writeCustomPotionEffectToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.nbt.NBTTagCompound;", arg0)); }

    static PotionEffect readCustomPotionEffectFromNBT(NBTTagCompound arg0) { return PotionEffect(*javaClass->invokeStaticMethod<jobject>(this->object, "readCustomPotionEffectFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.potion.PotionEffect;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void combine(PotionEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "combine", "(Lnet.minecraft.potion.PotionEffect;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.util.CombatTracker
 * Package name: net.minecraft.util
 */
class CombatTracker : public Object {
protected:
    const inline static char *className = "net.minecraft.util.CombatTracker";
public:
    STATICINITIALIZE;

    CombatTracker(jobject object) : JavaObject(object) {}

    void func_94545_a() { (*javaClass->invokeMethod<void>(this->object, "func_94545_a", "()V", )); }

    void func_94542_g() { (*javaClass->invokeMethod<void>(this->object, "func_94542_g", "()V", )); }

    CombatEntry func_94544_f() { return CombatEntry(*javaClass->invokeMethod<jobject>(this->object, "func_94544_f", "()Lnet.minecraft.util.CombatEntry;", )); }

    String func_94548_b(CombatEntry arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "func_94548_b", "(Lnet.minecraft.util.CombatEntry;)Ljava.lang.String;", arg0)); }

    int func_180134_f() { return int(*javaClass->invokeMethod<int>(this->object, "func_180134_f", "()I", )); }

    void trackDamage(DamageSource arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "trackDamage", "(Lnet.minecraft.util.DamageSource;FF)V", arg0, arg1, arg2)); }

    EntityLivingBase func_94550_c() { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "func_94550_c", "()Lnet.minecraft.entity.EntityLivingBase;", )); }

    IChatComponent getDeathMessage() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDeathMessage", "()Lnet.minecraft.util.IChatComponent;", )); }

    EntityLivingBase getFighter() { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "getFighter", "()Lnet.minecraft.entity.EntityLivingBase;", )); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

};


/**
 * Classpath: net.minecraft.util.CombatEntry
 * Package name: net.minecraft.util
 */
class CombatEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.util.CombatEntry";
public:
    STATICINITIALIZE;

    CombatEntry(jobject object) : JavaObject(object) {}

    bool isLivingDamageSrc() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLivingDamageSrc", "()Z", )); }

    IChatComponent getDamageSrcDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDamageSrcDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

    DamageSource getDamageSrc() { return DamageSource(*javaClass->invokeMethod<jobject>(this->object, "getDamageSrc", "()Lnet.minecraft.util.DamageSource;", )); }

    float func_94563_c() { return float(*javaClass->invokeMethod<float>(this->object, "func_94563_c", "()F", )); }

    String func_94562_g() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_94562_g", "()Ljava.lang.String;", )); }

    float getDamageAmount() { return float(*javaClass->invokeMethod<float>(this->object, "getDamageAmount", "()F", )); }

};


/**
 * Classpath: net.minecraft.entity.EnumCreatureAttribute
 * Package name: net.minecraft.entity
 */
class EnumCreatureAttribute : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.EnumCreatureAttribute";
public:
    STATICINITIALIZE;

    EnumCreatureAttribute(jobject object) : JavaObject(object) {}

    static EnumCreatureAttribute valueOf(String arg0) { return EnumCreatureAttribute(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.entity.EnumCreatureAttribute;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.Explosion
 * Package name: net.minecraft.world
 */
class Explosion : public Object {
protected:
    const inline static char *className = "net.minecraft.world.Explosion";
public:
    STATICINITIALIZE;

    Explosion(jobject object) : JavaObject(object) {}

    void doExplosionA() { (*javaClass->invokeMethod<void>(this->object, "doExplosionA", "()V", )); }

    void doExplosionB(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "doExplosionB", "(Z)V", arg0)); }

    List getAffectedBlockPositions() { return List(*javaClass->invokeMethod<jobject>(this->object, "getAffectedBlockPositions", "()Ljava.util.List;", )); }

    EntityLivingBase getExplosivePlacedBy() { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "getExplosivePlacedBy", "()Lnet.minecraft.entity.EntityLivingBase;", )); }

    void func_180342_d() { (*javaClass->invokeMethod<void>(this->object, "func_180342_d", "()V", )); }

    Map getPlayerKnockbackMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getPlayerKnockbackMap", "()Ljava.util.Map;", )); }

};


/**
 * Classpath: net.minecraft.entity.projectile.EntityArrow
 * Package name: net.minecraft.entity.projectile
 */
class EntityArrow : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.projectile.EntityArrow";
public:
    STATICINITIALIZE;

    EntityArrow(jobject object) : JavaObject(object) {}

    void setVelocity(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setVelocity", "(DDD)V", arg0, arg1, arg2)); }

    float getEyeHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getEyeHeight", "()F", )); }

    void onCollideWithPlayer(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "onCollideWithPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void setThrowableHeading(double arg0, double arg1, double arg2, float arg3, float arg4) { (*javaClass->invokeMethod<void>(this->object, "setThrowableHeading", "(DDDFF)V", arg0, arg1, arg2, arg3, arg4)); }

    bool getIsCritical() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsCritical", "()Z", )); }

    void setIsCritical(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setIsCritical", "(Z)V", arg0)); }

    void setKnockbackStrength(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setKnockbackStrength", "(I)V", arg0)); }

    void setPositionAndRotation2(double arg0, double arg1, double arg2, float arg3, float arg4, int arg5, bool arg6) { (*javaClass->invokeMethod<void>(this->object, "setPositionAndRotation2", "(DDDFFIZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    bool canTriggerWalking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canTriggerWalking", "()Z", )); }

    bool canAttackWithItem() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAttackWithItem", "()Z", )); }

    void setDamage(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setDamage", "(D)V", arg0)); }

    double getDamage() { return double(*javaClass->invokeMethod<double>(this->object, "getDamage", "()D", )); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

};


/**
 * Classpath: net.minecraft.entity.projectile.EntityFireball
 * Package name: net.minecraft.entity.projectile
 */
class EntityFireball : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.projectile.EntityFireball";
public:
    STATICINITIALIZE;

    EntityFireball(jobject object) : JavaObject(object) {}

    int getBrightnessForRender(float arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getBrightnessForRender", "(F)I", arg0)); }

    float getBrightness(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getBrightness", "(F)F", arg0)); }

    bool isInRangeToRenderDist(double arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInRangeToRenderDist", "(D)Z", arg0)); }

    float getCollisionBorderSize() { return float(*javaClass->invokeMethod<float>(this->object, "getCollisionBorderSize", "()F", )); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    float getMotionFactor() { return float(*javaClass->invokeMethod<float>(this->object, "getMotionFactor", "()F", )); }

    bool canBeCollidedWith() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeCollidedWith", "()Z", )); }

    void onImpact(MovingObjectPosition arg0) { (*javaClass->invokeMethod<void>(this->object, "onImpact", "(Lnet.minecraft.util.MovingObjectPosition;)V", arg0)); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

};


/**
 * Classpath: net.minecraft.network.Packet
 * Package name: net.minecraft.network
 */
class Packet : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.network.Packet";
public:
    STATICINITIALIZE;

    Packet(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

};


/**
 * Classpath: io.netty.buffer.ByteBuf
 * Package name: io.netty.buffer
 */
class ByteBuf : public Object {
protected:
    const inline static char *className = "io.netty.buffer.ByteBuf";
public:
    STATICINITIALIZE;

    ByteBuf(jobject object) : JavaObject(object) {}

    int readerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "readerIndex", "()I", )); }

    ByteBuf readerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int maxCapacity() { return int(*javaClass->invokeMethod<int>(this->object, "maxCapacity", "()I", )); }

    int writerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "writerIndex", "()I", )); }

    ByteBuf writerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "readableBytes", "()I", )); }

    int writableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "writableBytes", "()I", )); }

    int maxWritableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "maxWritableBytes", "()I", )); }

    ByteBuf markReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf markWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardSomeReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf ensureWritable(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int ensureWritable(int arg0, bool arg1) { return int(*javaClass->invokeMethod<int>(this->object, "ensureWritable", "(IZ)I", arg0, arg1)); }

    short getUnsignedByte(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getUnsignedByte", "(I)S", arg0)); }

    int getUnsignedShort(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedShort", "(I)I", arg0)); }

    int getUnsignedMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedMedium", "(I)I", arg0)); }

    long getUnsignedInt(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getUnsignedInt", "(I)J", arg0)); }

    int readUnsignedMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedMedium", "()I", )); }

    long readUnsignedInt() { return long(*javaClass->invokeMethod<long>(this->object, "readUnsignedInt", "()J", )); }

    ByteBuf writeMedium(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int bytesBefore(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IIB)I", arg0, arg1, arg2)); }

    int bytesBefore(byte arg0) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(B)I", arg0)); }

    int bytesBefore(int arg0, byte arg1) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IB)I", arg0, arg1)); }

    int forEachByte(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int forEachByte(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByteDesc(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int nioBufferCount() { return int(*javaClass->invokeMethod<int>(this->object, "nioBufferCount", "()I", )); }

    ByteBuffer internalNioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "internalNioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    bool hasMemoryAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasMemoryAddress", "()Z", )); }

    long memoryAddress() { return long(*javaClass->invokeMethod<long>(this->object, "memoryAddress", "()J", )); }

    ByteBufAllocator alloc() { return ByteBufAllocator(*javaClass->invokeMethod<jobject>(this->object, "alloc", "()Lio.netty.buffer.ByteBufAllocator;", )); }

    int getMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMedium", "(I)I", arg0)); }

    ByteBuf setMedium(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int setBytes(int arg0, ScatteringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1, arg2)); }

    int setBytes(int arg0, InputStream arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.io.InputStream;I)I", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf setBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setZero(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setZero", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int readMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readMedium", "()I", )); }

    ByteBuf readSlice(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readSlice", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeZero(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuffer nioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer nioBuffer() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuf retain(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf retain() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.buffer.ByteBuf;", )); }

    ReferenceCounted retain() { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.util.ReferenceCounted;", )); }

    ReferenceCounted retain(int arg0) { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.util.ReferenceCounted;", arg0)); }

    ByteBuf writeByte(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf setIndex(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString(Charset arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(Ljava.nio.charset.Charset;)Ljava.lang.String;", arg0)); }

    String toString(int arg0, int arg1, Charset arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(IILjava.nio.charset.Charset;)Ljava.lang.String;", arg0, arg1, arg2)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ByteBuf arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lio.netty.buffer.ByteBuf;)I", arg0)); }

    int indexOf(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(IIB)I", arg0, arg1, arg2)); }

    bool getBoolean(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(I)Z", arg0)); }

    byte getByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(I)B", arg0)); }

    short getShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }

    char getChar(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }

    int getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }

    long getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }

    float getFloat(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }

    double getDouble(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }

    ByteBuf clear() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf getBytes(int arg0, OutputStream arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf getBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int getBytes(int arg0, GatheringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getBytes", "(ILjava.nio.channels.GatheringByteChannel;I)I", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf getBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    ByteBuf writeInt(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readInt() { return int(*javaClass->invokeMethod<int>(this->object, "readInt", "()I", )); }

    ByteBuf setBoolean(int arg0, bool arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setByte(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setByte", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setChar(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setChar", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setShort(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setShort", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setInt(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setInt", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setLong(int arg0, long arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setFloat(int arg0, float arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setDouble(int arg0, double arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf copy() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf copy(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf unwrap() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "unwrap", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf capacity(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "capacity", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    ByteBuf slice(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf slice() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf duplicate() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf order(ByteOrder arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "order", "(Ljava.nio.ByteOrder;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int readUnsignedShort() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedShort", "()I", )); }

    long readLong() { return long(*javaClass->invokeMethod<long>(this->object, "readLong", "()J", )); }

    byte readByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "readByte", "()B", )); }

    ByteBuf writeChar(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    char readChar() { return char(*javaClass->invokeMethod<char>(this->object, "readChar", "()C", )); }

    ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf readBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readBytes(GatheringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "readBytes", "(Ljava.nio.channels.GatheringByteChannel;I)I", arg0, arg1)); }

    ByteBuf readBytes(OutputStream arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf readBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    int writeBytes(ScatteringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1)); }

    ByteBuf writeBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf writeBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    int writeBytes(InputStream arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.io.InputStream;I)I", arg0, arg1)); }

    short readShort() { return short(*javaClass->invokeMethod<short>(this->object, "readShort", "()S", )); }

    ByteBuf writeFloat(float arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio.netty.buffer.ByteBuf;", arg0)); }

    float readFloat() { return float(*javaClass->invokeMethod<float>(this->object, "readFloat", "()F", )); }

    bool isReadable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "(I)Z", arg0)); }

    bool isReadable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "()Z", )); }

    bool isWritable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "()Z", )); }

    bool isWritable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "(I)Z", arg0)); }

    ByteBuf writeLong(long arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf skipBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    bool readBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "readBoolean", "()Z", )); }

    short readUnsignedByte() { return short(*javaClass->invokeMethod<short>(this->object, "readUnsignedByte", "()S", )); }

    double readDouble() { return double(*javaClass->invokeMethod<double>(this->object, "readDouble", "()D", )); }

    ByteBuf writeBoolean(bool arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeShort(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeDouble(double arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio.netty.buffer.ByteBuf;", arg0)); }

};


/**
 * Classpath: io.netty.buffer.ByteBufProcessor
 * Package name: io.netty.buffer
 */
class ByteBufProcessor : public JavaObject {
protected:
    const inline static char *className = "io.netty.buffer.ByteBufProcessor";
public:
    STATICINITIALIZE;

    ByteBufProcessor(jobject object) : JavaObject(object) {}

    bool process(byte arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "process", "(B)Z", arg0)); }

};


/**
 * Classpath: io.netty.buffer.ByteBufAllocator
 * Package name: io.netty.buffer
 */
class ByteBufAllocator : public JavaObject {
protected:
    const inline static char *className = "io.netty.buffer.ByteBufAllocator";
public:
    STATICINITIALIZE;

    ByteBufAllocator(jobject object) : JavaObject(object) {}

    CompositeByteBuf compositeBuffer(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "compositeBuffer", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf compositeBuffer() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "compositeBuffer", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    CompositeByteBuf compositeHeapBuffer() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "compositeHeapBuffer", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    CompositeByteBuf compositeHeapBuffer(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "compositeHeapBuffer", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf compositeDirectBuffer() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "compositeDirectBuffer", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    CompositeByteBuf compositeDirectBuffer(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "compositeDirectBuffer", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    bool isDirectBufferPooled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirectBufferPooled", "()Z", )); }

    ByteBuf ioBuffer(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ioBuffer", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf ioBuffer(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ioBuffer", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf ioBuffer() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ioBuffer", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf heapBuffer() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "heapBuffer", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf heapBuffer(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "heapBuffer", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf heapBuffer(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "heapBuffer", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf buffer(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "buffer", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf buffer() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "buffer", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf buffer(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "buffer", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf directBuffer(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "directBuffer", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf directBuffer(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "directBuffer", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf directBuffer() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "directBuffer", "()Lio.netty.buffer.ByteBuf;", )); }

};


/**
 * Classpath: [Lio.netty.buffer.ByteBuf;
 */
class ByteBuf_interface : public Object {
protected:
    const inline static char *className = "[Lio.netty.buffer.ByteBuf;";
public:
    STATICINITIALIZE;

    ByteBuf_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: io.netty.buffer.CompositeByteBuf$Component
 * Enclosing class: io.netty.buffer.CompositeByteBuf
 * Package name: io.netty.buffer
 */
class CompositeByteBuf_Component : public Object {
protected:
    const inline static char *className = "io.netty.buffer.CompositeByteBuf$Component";
public:
    STATICINITIALIZE;

    CompositeByteBuf_Component(jobject object) : JavaObject(object) {}

    void freeIfNecessary() { (*javaClass->invokeMethod<void>(this->object, "freeIfNecessary", "()V", )); }

};


/**
 * Classpath: java.nio.channels.ScatteringByteChannel
 * Package name: java.nio.channels
 */
class ScatteringByteChannel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.ScatteringByteChannel";
public:
    STATICINITIALIZE;

    ScatteringByteChannel(jobject object) : JavaObject(object) {}

    long read(ByteBuffer_interface arg0, int arg1, int arg2) { return long(*javaClass->invokeMethod<long>(this->object, "read", "([Ljava.nio.ByteBuffer;II)J", arg0, arg1, arg2)); }

    long read(ByteBuffer_interface arg0) { return long(*javaClass->invokeMethod<long>(this->object, "read", "([Ljava.nio.ByteBuffer;)J", arg0)); }

};


/**
 * Classpath: io.netty.util.ReferenceCounted
 * Package name: io.netty.util
 */
class ReferenceCounted : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.ReferenceCounted";
public:
    STATICINITIALIZE;

    ReferenceCounted(jobject object) : JavaObject(object) {}

    ReferenceCounted retain(int arg0) { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.util.ReferenceCounted;", arg0)); }

    ReferenceCounted retain() { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.util.ReferenceCounted;", )); }

    int refCnt() { return int(*javaClass->invokeMethod<int>(this->object, "refCnt", "()I", )); }

    bool release() { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "()Z", )); }

    bool release(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "(I)Z", arg0)); }

};


/**
 * Classpath: java.nio.channels.GatheringByteChannel
 * Package name: java.nio.channels
 */
class GatheringByteChannel : public JavaObject {
protected:
    const inline static char *className = "java.nio.channels.GatheringByteChannel";
public:
    STATICINITIALIZE;

    GatheringByteChannel(jobject object) : JavaObject(object) {}

    long write(ByteBuffer_interface arg0, int arg1, int arg2) { return long(*javaClass->invokeMethod<long>(this->object, "write", "([Ljava.nio.ByteBuffer;II)J", arg0, arg1, arg2)); }

    long write(ByteBuffer_interface arg0) { return long(*javaClass->invokeMethod<long>(this->object, "write", "([Ljava.nio.ByteBuffer;)J", arg0)); }

};


/**
 * Classpath: io.netty.buffer.AbstractByteBuf
 * Package name: io.netty.buffer
 */
class AbstractByteBuf : public ByteBuf {
protected:
    const inline static char *className = "io.netty.buffer.AbstractByteBuf";
public:
    STATICINITIALIZE;

    AbstractByteBuf(jobject object) : JavaObject(object) {}

    ByteBuf readerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "readerIndex", "()I", )); }

    void maxCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "maxCapacity", "(I)V", arg0)); }

    int maxCapacity() { return int(*javaClass->invokeMethod<int>(this->object, "maxCapacity", "()I", )); }

    ByteBuf writerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int writerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "writerIndex", "()I", )); }

    int readableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "readableBytes", "()I", )); }

    int writableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "writableBytes", "()I", )); }

    int maxWritableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "maxWritableBytes", "()I", )); }

    ByteBuf markReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf markWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardSomeReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    int ensureWritable(int arg0, bool arg1) { return int(*javaClass->invokeMethod<int>(this->object, "ensureWritable", "(IZ)I", arg0, arg1)); }

    ByteBuf ensureWritable(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    short getUnsignedByte(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getUnsignedByte", "(I)S", arg0)); }

    int getUnsignedShort(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedShort", "(I)I", arg0)); }

    int getUnsignedMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedMedium", "(I)I", arg0)); }

    long getUnsignedInt(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getUnsignedInt", "(I)J", arg0)); }

    int readUnsignedMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedMedium", "()I", )); }

    long readUnsignedInt() { return long(*javaClass->invokeMethod<long>(this->object, "readUnsignedInt", "()J", )); }

    ByteBuf writeMedium(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int bytesBefore(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IIB)I", arg0, arg1, arg2)); }

    int bytesBefore(int arg0, byte arg1) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IB)I", arg0, arg1)); }

    int bytesBefore(byte arg0) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(B)I", arg0)); }

    int forEachByte(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByte(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByteDesc(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int calculateNewCapacity(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "calculateNewCapacity", "(I)I", arg0)); }

    SwappedByteBuf newSwappedByteBuf() { return SwappedByteBuf(*javaClass->invokeMethod<jobject>(this->object, "newSwappedByteBuf", "()Lio.netty.buffer.SwappedByteBuf;", )); }

    int forEachByteAsc0(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteAsc0", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByteDesc0(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc0", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    void checkReadableBytes(int arg0) { (*javaClass->invokeMethod<void>(this->object, "checkReadableBytes", "(I)V", arg0)); }

    int _getUnsignedMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "_getUnsignedMedium", "(I)I", arg0)); }

    void ensureAccessible() { (*javaClass->invokeMethod<void>(this->object, "ensureAccessible", "()V", )); }

    void checkDstIndex(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "checkDstIndex", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void checkSrcIndex(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "checkSrcIndex", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void adjustMarkers(int arg0) { (*javaClass->invokeMethod<void>(this->object, "adjustMarkers", "(I)V", arg0)); }

    byte _getByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "_getByte", "(I)B", arg0)); }

    short _getShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "_getShort", "(I)S", arg0)); }

    int _getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "_getInt", "(I)I", arg0)); }

    long _getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "_getLong", "(I)J", arg0)); }

    void _setByte(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setByte", "(II)V", arg0, arg1)); }

    void _setShort(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setShort", "(II)V", arg0, arg1)); }

    void _setMedium(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setMedium", "(II)V", arg0, arg1)); }

    void _setInt(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setInt", "(II)V", arg0, arg1)); }

    void _setLong(int arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "_setLong", "(IJ)V", arg0, arg1)); }

    int getMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMedium", "(I)I", arg0)); }

    ByteBuf setMedium(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setZero(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setZero", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int readMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readMedium", "()I", )); }

    ByteBuf readSlice(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readSlice", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeZero(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuffer nioBuffer() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuf writeByte(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf setIndex(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString(int arg0, int arg1, Charset arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(IILjava.nio.charset.Charset;)Ljava.lang.String;", arg0, arg1, arg2)); }

    String toString(Charset arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(Ljava.nio.charset.Charset;)Ljava.lang.String;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ByteBuf arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lio.netty.buffer.ByteBuf;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int indexOf(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(IIB)I", arg0, arg1, arg2)); }

    void checkIndex(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "checkIndex", "(II)V", arg0, arg1)); }

    void checkIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "checkIndex", "(I)V", arg0)); }

    bool getBoolean(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(I)Z", arg0)); }

    byte getByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(I)B", arg0)); }

    short getShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }

    char getChar(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }

    int getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }

    long getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }

    float getFloat(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }

    double getDouble(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }

    ByteBuf clear() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf writeInt(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readInt() { return int(*javaClass->invokeMethod<int>(this->object, "readInt", "()I", )); }

    ByteBuf setBoolean(int arg0, bool arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setByte(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setByte", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setChar(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setChar", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setShort(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setShort", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setInt(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setInt", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setLong(int arg0, long arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setFloat(int arg0, float arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setDouble(int arg0, double arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf copy() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf slice() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf slice(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf duplicate() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf order(ByteOrder arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "order", "(Ljava.nio.ByteOrder;)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readUnsignedShort() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedShort", "()I", )); }

    long readLong() { return long(*javaClass->invokeMethod<long>(this->object, "readLong", "()J", )); }

    byte readByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "readByte", "()B", )); }

    ByteBuf writeChar(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    char readChar() { return char(*javaClass->invokeMethod<char>(this->object, "readChar", "()C", )); }

    ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf readBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readBytes(GatheringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "readBytes", "(Ljava.nio.channels.GatheringByteChannel;I)I", arg0, arg1)); }

    ByteBuf readBytes(OutputStream arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf writeBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    int writeBytes(ScatteringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1)); }

    int writeBytes(InputStream arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.io.InputStream;I)I", arg0, arg1)); }

    ByteBuf writeBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    short readShort() { return short(*javaClass->invokeMethod<short>(this->object, "readShort", "()S", )); }

    ByteBuf writeFloat(float arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio.netty.buffer.ByteBuf;", arg0)); }

    float readFloat() { return float(*javaClass->invokeMethod<float>(this->object, "readFloat", "()F", )); }

    bool isReadable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "(I)Z", arg0)); }

    bool isReadable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "()Z", )); }

    bool isWritable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "()Z", )); }

    bool isWritable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "(I)Z", arg0)); }

    ByteBuf writeLong(long arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf skipBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    bool readBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "readBoolean", "()Z", )); }

    short readUnsignedByte() { return short(*javaClass->invokeMethod<short>(this->object, "readUnsignedByte", "()S", )); }

    double readDouble() { return double(*javaClass->invokeMethod<double>(this->object, "readDouble", "()D", )); }

    ByteBuf writeBoolean(bool arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeShort(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeDouble(double arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio.netty.buffer.ByteBuf;", arg0)); }

};


/**
 * Classpath: io.netty.buffer.SwappedByteBuf
 * Package name: io.netty.buffer
 */
class SwappedByteBuf : public ByteBuf {
protected:
    const inline static char *className = "io.netty.buffer.SwappedByteBuf";
public:
    STATICINITIALIZE;

    SwappedByteBuf(jobject object) : JavaObject(object) {}

    int readerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "readerIndex", "()I", )); }

    ByteBuf readerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int maxCapacity() { return int(*javaClass->invokeMethod<int>(this->object, "maxCapacity", "()I", )); }

    int writerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "writerIndex", "()I", )); }

    ByteBuf writerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "readableBytes", "()I", )); }

    int writableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "writableBytes", "()I", )); }

    int maxWritableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "maxWritableBytes", "()I", )); }

    ByteBuf markReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf markWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardSomeReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    int ensureWritable(int arg0, bool arg1) { return int(*javaClass->invokeMethod<int>(this->object, "ensureWritable", "(IZ)I", arg0, arg1)); }

    ByteBuf ensureWritable(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    short getUnsignedByte(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getUnsignedByte", "(I)S", arg0)); }

    int getUnsignedShort(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedShort", "(I)I", arg0)); }

    int getUnsignedMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedMedium", "(I)I", arg0)); }

    long getUnsignedInt(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getUnsignedInt", "(I)J", arg0)); }

    int readUnsignedMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedMedium", "()I", )); }

    long readUnsignedInt() { return long(*javaClass->invokeMethod<long>(this->object, "readUnsignedInt", "()J", )); }

    ByteBuf writeMedium(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int bytesBefore(int arg0, byte arg1) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IB)I", arg0, arg1)); }

    int bytesBefore(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IIB)I", arg0, arg1, arg2)); }

    int bytesBefore(byte arg0) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(B)I", arg0)); }

    int forEachByte(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByte(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByteDesc(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int nioBufferCount() { return int(*javaClass->invokeMethod<int>(this->object, "nioBufferCount", "()I", )); }

    ByteBuffer internalNioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "internalNioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    bool hasMemoryAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasMemoryAddress", "()Z", )); }

    long memoryAddress() { return long(*javaClass->invokeMethod<long>(this->object, "memoryAddress", "()J", )); }

    ByteBufAllocator alloc() { return ByteBufAllocator(*javaClass->invokeMethod<jobject>(this->object, "alloc", "()Lio.netty.buffer.ByteBufAllocator;", )); }

    int getMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMedium", "(I)I", arg0)); }

    ByteBuf setMedium(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    int setBytes(int arg0, ScatteringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1, arg2)); }

    int setBytes(int arg0, InputStream arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.io.InputStream;I)I", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf setZero(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setZero", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int readMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readMedium", "()I", )); }

    ByteBuf readSlice(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readSlice", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeZero(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuffer nioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer nioBuffer() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuf retain() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.buffer.ByteBuf;", )); }

    ReferenceCounted retain(int arg0) { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.util.ReferenceCounted;", arg0)); }

    ReferenceCounted retain() { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.util.ReferenceCounted;", )); }

    ByteBuf retain(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int refCnt() { return int(*javaClass->invokeMethod<int>(this->object, "refCnt", "()I", )); }

    ByteBuf writeByte(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf setIndex(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString(Charset arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(Ljava.nio.charset.Charset;)Ljava.lang.String;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String toString(int arg0, int arg1, Charset arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(IILjava.nio.charset.Charset;)Ljava.lang.String;", arg0, arg1, arg2)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ByteBuf arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lio.netty.buffer.ByteBuf;)I", arg0)); }

    int indexOf(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(IIB)I", arg0, arg1, arg2)); }

    bool getBoolean(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(I)Z", arg0)); }

    byte getByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(I)B", arg0)); }

    short getShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }

    char getChar(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }

    int getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }

    long getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }

    float getFloat(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }

    double getDouble(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }

    ByteBuf clear() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf getBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf getBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    int getBytes(int arg0, GatheringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getBytes", "(ILjava.nio.channels.GatheringByteChannel;I)I", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, OutputStream arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    ByteBuf writeInt(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readInt() { return int(*javaClass->invokeMethod<int>(this->object, "readInt", "()I", )); }

    ByteBuf setBoolean(int arg0, bool arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setByte(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setByte", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setChar(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setChar", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setShort(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setShort", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setInt(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setInt", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setLong(int arg0, long arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setFloat(int arg0, float arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setDouble(int arg0, double arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf copy() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf copy(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf unwrap() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "unwrap", "()Lio.netty.buffer.ByteBuf;", )); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    ByteBuf capacity(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "capacity", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    bool release(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "(I)Z", arg0)); }

    bool release() { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "()Z", )); }

    ByteBuf slice() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf slice(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf duplicate() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf order(ByteOrder arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "order", "(Ljava.nio.ByteOrder;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int readUnsignedShort() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedShort", "()I", )); }

    long readLong() { return long(*javaClass->invokeMethod<long>(this->object, "readLong", "()J", )); }

    byte readByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "readByte", "()B", )); }

    ByteBuf writeChar(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    char readChar() { return char(*javaClass->invokeMethod<char>(this->object, "readChar", "()C", )); }

    ByteBuf readBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(OutputStream arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int readBytes(GatheringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "readBytes", "(Ljava.nio.channels.GatheringByteChannel;I)I", arg0, arg1)); }

    ByteBuf readBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf readBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf readBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    int writeBytes(InputStream arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.io.InputStream;I)I", arg0, arg1)); }

    int writeBytes(ScatteringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf writeBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    short readShort() { return short(*javaClass->invokeMethod<short>(this->object, "readShort", "()S", )); }

    ByteBuf writeFloat(float arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio.netty.buffer.ByteBuf;", arg0)); }

    float readFloat() { return float(*javaClass->invokeMethod<float>(this->object, "readFloat", "()F", )); }

    bool isReadable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "(I)Z", arg0)); }

    bool isReadable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "()Z", )); }

    bool isWritable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "()Z", )); }

    bool isWritable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "(I)Z", arg0)); }

    ByteBuf writeLong(long arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf skipBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    bool readBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "readBoolean", "()Z", )); }

    short readUnsignedByte() { return short(*javaClass->invokeMethod<short>(this->object, "readUnsignedByte", "()S", )); }

    double readDouble() { return double(*javaClass->invokeMethod<double>(this->object, "readDouble", "()D", )); }

    ByteBuf writeBoolean(bool arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeShort(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeDouble(double arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio.netty.buffer.ByteBuf;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.INetHandler
 * Package name: net.minecraft.network
 */
class INetHandler : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.network.INetHandler";
public:
    STATICINITIALIZE;

    INetHandler(jobject object) : JavaObject(object) {}

    void onDisconnect(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "onDisconnect", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.command.CommandResultStats
 * Package name: net.minecraft.command
 */
class CommandResultStats : public Object {
protected:
    const inline static char *className = "net.minecraft.command.CommandResultStats";
public:
    STATICINITIALIZE;

    CommandResultStats(jobject object) : JavaObject(object) {}

    void writeStatsToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeStatsToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void readStatsFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readStatsFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void func_179672_a(ICommandSender arg0, CommandResultStats_Type arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "func_179672_a", "(Lnet.minecraft.command.ICommandSender;Lnet.minecraft.command.CommandResultStats$Type;I)V", arg0, arg1, arg2)); }

    void func_179671_a(CommandResultStats arg0) { (*javaClass->invokeMethod<void>(this->object, "func_179671_a", "(Lnet.minecraft.command.CommandResultStats;)V", arg0)); }

    static void func_179667_a(CommandResultStats arg0, CommandResultStats_Type arg1, String arg2, String arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "func_179667_a", "(Lnet.minecraft.command.CommandResultStats;Lnet.minecraft.command.CommandResultStats$Type;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3)); }

    static void func_179669_a(CommandResultStats arg0, CommandResultStats_Type arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "func_179669_a", "(Lnet.minecraft.command.CommandResultStats;Lnet.minecraft.command.CommandResultStats$Type;)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.command.ICommandSender
 * Package name: net.minecraft.command
 */
class ICommandSender : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.command.ICommandSender";
public:
    STATICINITIALIZE;

    ICommandSender(jobject object) : JavaObject(object) {}

    void addChatMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    bool canCommandSenderUseCommand(int arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCommandSenderUseCommand", "(ILjava.lang.String;)Z", arg0, arg1)); }

    Vec3 getPositionVector() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getPositionVector", "()Lnet.minecraft.util.Vec3;", )); }

    World getEntityWorld() { return World(*javaClass->invokeMethod<jobject>(this->object, "getEntityWorld", "()Lnet.minecraft.world.World;", )); }

    Entity getCommandSenderEntity() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getCommandSenderEntity", "()Lnet.minecraft.entity.Entity;", )); }

    void setCommandStat(CommandResultStats_Type arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setCommandStat", "(Lnet.minecraft.command.CommandResultStats$Type;I)V", arg0, arg1)); }

    bool sendCommandFeedback() { return bool(*javaClass->invokeMethod<boolean>(this->object, "sendCommandFeedback", "()Z", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.command.CommandResultStats$Type
 * Enclosing class: net.minecraft.command.CommandResultStats
 * Package name: net.minecraft.command
 */
class CommandResultStats_Type : public Enum {
protected:
    const inline static char *className = "net.minecraft.command.CommandResultStats$Type";
public:
    STATICINITIALIZE;

    CommandResultStats_Type(jobject object) : JavaObject(object) {}

    static CommandResultStats_Type getTypeByName(String arg0) { return CommandResultStats_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "getTypeByName", "(Ljava.lang.String;)Lnet.minecraft.command.CommandResultStats$Type;", arg0)); }

    int getTypeID() { return int(*javaClass->invokeMethod<int>(this->object, "getTypeID", "()I", )); }

    static CommandResultStats_Type valueOf(String arg0) { return CommandResultStats_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.command.CommandResultStats$Type;", arg0)); }

    String getTypeName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTypeName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.tileentity.TileEntity
 * Package name: net.minecraft.tileentity
 */
class TileEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.tileentity.TileEntity";
public:
    STATICINITIALIZE;

    TileEntity(jobject object) : JavaObject(object) {}

    double getDistanceSq(double arg0, double arg1, double arg2) { return double(*javaClass->invokeMethod<double>(this->object, "getDistanceSq", "(DDD)D", arg0, arg1, arg2)); }

    bool hasWorldObj() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasWorldObj", "()Z", )); }

    void addInfoToCrashReport(CrashReportCategory arg0) { (*javaClass->invokeMethod<void>(this->object, "addInfoToCrashReport", "(Lnet.minecraft.crash.CrashReportCategory;)V", arg0)); }

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void setWorldObj(World arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldObj", "(Lnet.minecraft.world.World;)V", arg0)); }

    Block getBlockType() { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlockType", "()Lnet.minecraft.block.Block;", )); }

    static TileEntity createAndLoadEntity(NBTTagCompound arg0) { return TileEntity(*javaClass->invokeStaticMethod<jobject>(this->object, "createAndLoadEntity", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.tileentity.TileEntity;", arg0)); }

    int getBlockMetadata() { return int(*javaClass->invokeMethod<int>(this->object, "getBlockMetadata", "()I", )); }

    Packet getDescriptionPacket() { return Packet(*javaClass->invokeMethod<jobject>(this->object, "getDescriptionPacket", "()Lnet.minecraft.network.Packet;", )); }

    bool receiveClientEvent(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "receiveClientEvent", "(II)Z", arg0, arg1)); }

    void updateContainingBlockInfo() { (*javaClass->invokeMethod<void>(this->object, "updateContainingBlockInfo", "()V", )); }

    bool func_183000_F() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_183000_F", "()Z", )); }

    void writeToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void markDirty() { (*javaClass->invokeMethod<void>(this->object, "markDirty", "()V", )); }

    BlockPos getPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPos", "()Lnet.minecraft.util.BlockPos;", )); }

    void setPos(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "setPos", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    void invalidate() { (*javaClass->invokeMethod<void>(this->object, "invalidate", "()V", )); }

    World getWorld() { return World(*javaClass->invokeMethod<jobject>(this->object, "getWorld", "()Lnet.minecraft.world.World;", )); }

    double getMaxRenderDistanceSquared() { return double(*javaClass->invokeMethod<double>(this->object, "getMaxRenderDistanceSquared", "()D", )); }

    void validate() { (*javaClass->invokeMethod<void>(this->object, "validate", "()V", )); }

    static void addMapping(Class arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "addMapping", "(Ljava.lang.Class;Ljava.lang.String;)V", arg0, arg1)); }

    bool isInvalid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvalid", "()Z", )); }

};


/**
 * Classpath: net.minecraft.command.server.CommandBlockLogic
 * Package name: net.minecraft.command.server
 */
class CommandBlockLogic : public Object {
protected:
    const inline static char *className = "net.minecraft.command.server.CommandBlockLogic";
public:
    STATICINITIALIZE;

    CommandBlockLogic(jobject object) : JavaObject(object) {}

    void addChatMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    bool canCommandSenderUseCommand(int arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCommandSenderUseCommand", "(ILjava.lang.String;)Z", arg0, arg1)); }

    void setCommandStat(CommandResultStats_Type arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setCommandStat", "(Lnet.minecraft.command.CommandResultStats$Type;I)V", arg0, arg1)); }

    int getSuccessCount() { return int(*javaClass->invokeMethod<int>(this->object, "getSuccessCount", "()I", )); }

    IChatComponent getLastOutput() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getLastOutput", "()Lnet.minecraft.util.IChatComponent;", )); }

    void writeDataToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeDataToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void readDataFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readDataFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void updateCommand() { (*javaClass->invokeMethod<void>(this->object, "updateCommand", "()V", )); }

    int func_145751_f() { return int(*javaClass->invokeMethod<int>(this->object, "func_145751_f", "()I", )); }

    void func_145757_a(ByteBuf arg0) { (*javaClass->invokeMethod<void>(this->object, "func_145757_a", "(Lio.netty.buffer.ByteBuf;)V", arg0)); }

    void setLastOutput(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "setLastOutput", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    void setTrackOutput(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setTrackOutput", "(Z)V", arg0)); }

    bool shouldTrackOutput() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldTrackOutput", "()Z", )); }

    bool tryOpenEditCommandBlock(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryOpenEditCommandBlock", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    CommandResultStats getCommandResultStats() { return CommandResultStats(*javaClass->invokeMethod<jobject>(this->object, "getCommandResultStats", "()Lnet.minecraft.command.CommandResultStats;", )); }

    bool sendCommandFeedback() { return bool(*javaClass->invokeMethod<boolean>(this->object, "sendCommandFeedback", "()Z", )); }

    void setCommand(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setCommand", "(Ljava.lang.String;)V", arg0)); }

    String getCommand() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCommand", "()Ljava.lang.String;", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void trigger(World arg0) { (*javaClass->invokeMethod<void>(this->object, "trigger", "(Lnet.minecraft.world.World;)V", arg0)); }

    void setName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setName", "(Ljava.lang.String;)V", arg0)); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.entity.IMerchant
 * Package name: net.minecraft.entity
 */
class IMerchant : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.IMerchant";
public:
    STATICINITIALIZE;

    IMerchant(jobject object) : JavaObject(object) {}

    void setCustomer(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "setCustomer", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    EntityPlayer getCustomer() { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getCustomer", "()Lnet.minecraft.entity.player.EntityPlayer;", )); }

    void verifySellingItem(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "verifySellingItem", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void useRecipe(MerchantRecipe arg0) { (*javaClass->invokeMethod<void>(this->object, "useRecipe", "(Lnet.minecraft.village.MerchantRecipe;)V", arg0)); }

    MerchantRecipeList getRecipes(EntityPlayer arg0) { return MerchantRecipeList(*javaClass->invokeMethod<jobject>(this->object, "getRecipes", "(Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.village.MerchantRecipeList;", arg0)); }

    void setRecipes(MerchantRecipeList arg0) { (*javaClass->invokeMethod<void>(this->object, "setRecipes", "(Lnet.minecraft.village.MerchantRecipeList;)V", arg0)); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.village.MerchantRecipe
 * Package name: net.minecraft.village
 */
class MerchantRecipe : public Object {
protected:
    const inline static char *className = "net.minecraft.village.MerchantRecipe";
public:
    STATICINITIALIZE;

    MerchantRecipe(jobject object) : JavaObject(object) {}

    void readFromTags(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromTags", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    ItemStack getItemToBuy() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getItemToBuy", "()Lnet.minecraft.item.ItemStack;", )); }

    ItemStack getSecondItemToBuy() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getSecondItemToBuy", "()Lnet.minecraft.item.ItemStack;", )); }

    bool hasSecondItemToBuy() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasSecondItemToBuy", "()Z", )); }

    ItemStack getItemToSell() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getItemToSell", "()Lnet.minecraft.item.ItemStack;", )); }

    int getToolUses() { return int(*javaClass->invokeMethod<int>(this->object, "getToolUses", "()I", )); }

    int getMaxTradeUses() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxTradeUses", "()I", )); }

    void incrementToolUses() { (*javaClass->invokeMethod<void>(this->object, "incrementToolUses", "()V", )); }

    void increaseMaxTradeUses(int arg0) { (*javaClass->invokeMethod<void>(this->object, "increaseMaxTradeUses", "(I)V", arg0)); }

    bool isRecipeDisabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRecipeDisabled", "()Z", )); }

    void compensateToolUses() { (*javaClass->invokeMethod<void>(this->object, "compensateToolUses", "()V", )); }

    bool getRewardsExp() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getRewardsExp", "()Z", )); }

    NBTTagCompound writeToTags() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "writeToTags", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

};


/**
 * Classpath: java.util.AbstractList
 * Package name: java.util
 */
class AbstractList : public AbstractCollection {
protected:
    const inline static char *className = "java.util.AbstractList";
public:
    STATICINITIALIZE;

    AbstractList(jobject object) : JavaObject(object) {}

    void add(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(ILjava.lang.Object;)V", arg0, arg1)); }

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    Object remove(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(I)Ljava.lang.Object;", arg0)); }

    Object get(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Ljava.lang.Object;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int indexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.Object;)I", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int lastIndexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.Object;)I", arg0)); }

    List subList(int arg0, int arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "subList", "(II)Ljava.util.List;", arg0, arg1)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool addAll(int arg0, Collection arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(ILjava.util.Collection;)Z", arg0, arg1)); }

    Object set(int arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "set", "(ILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void rangeCheckForAdd(int arg0) { (*javaClass->invokeMethod<void>(this->object, "rangeCheckForAdd", "(I)V", arg0)); }

    String outOfBoundsMsg(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "outOfBoundsMsg", "(I)Ljava.lang.String;", arg0)); }

    static void subListRangeCheck(int arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "subListRangeCheck", "(III)V", arg0, arg1, arg2)); }

    void removeRange(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "removeRange", "(II)V", arg0, arg1)); }

    ListIterator listIterator() { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "()Ljava.util.ListIterator;", )); }

    ListIterator listIterator(int arg0) { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "(I)Ljava.util.ListIterator;", arg0)); }

};


/**
 * Classpath: net.minecraft.util.FoodStats
 * Package name: net.minecraft.util
 */
class FoodStats : public Object {
protected:
    const inline static char *className = "net.minecraft.util.FoodStats";
public:
    STATICINITIALIZE;

    FoodStats(jobject object) : JavaObject(object) {}

    int getFoodLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getFoodLevel", "()I", )); }

    void setFoodLevel(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setFoodLevel", "(I)V", arg0)); }

    void addExhaustion(float arg0) { (*javaClass->invokeMethod<void>(this->object, "addExhaustion", "(F)V", arg0)); }

    float getSaturationLevel() { return float(*javaClass->invokeMethod<float>(this->object, "getSaturationLevel", "()F", )); }

    void setFoodSaturationLevel(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setFoodSaturationLevel", "(F)V", arg0)); }

    int getPrevFoodLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getPrevFoodLevel", "()I", )); }

    void addStats(int arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "addStats", "(IF)V", arg0, arg1)); }

    void addStats(ItemFood arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "addStats", "(Lnet.minecraft.item.ItemFood;Lnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    void readNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void onUpdate(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    bool needFood() { return bool(*javaClass->invokeMethod<boolean>(this->object, "needFood", "()Z", )); }

};


/**
 * Classpath: net.minecraft.item.ItemFood
 * Package name: net.minecraft.item
 */
class ItemFood : public Item {
protected:
    const inline static char *className = "net.minecraft.item.ItemFood";
public:
    STATICINITIALIZE;

    ItemFood(jobject object) : JavaObject(object) {}

    ItemFood setAlwaysEdible() { return ItemFood(*javaClass->invokeMethod<jobject>(this->object, "setAlwaysEdible", "()Lnet.minecraft.item.ItemFood;", )); }

    int getMaxItemUseDuration(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMaxItemUseDuration", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    EnumAction getItemUseAction(ItemStack arg0) { return EnumAction(*javaClass->invokeMethod<jobject>(this->object, "getItemUseAction", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.EnumAction;", arg0)); }

    ItemStack onItemUseFinish(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "onItemUseFinish", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;", arg0, arg1, arg2)); }

    bool isWolfsFavoriteMeat() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWolfsFavoriteMeat", "()Z", )); }

    void onFoodEaten(ItemStack arg0, World arg1, EntityPlayer arg2) { (*javaClass->invokeMethod<void>(this->object, "onFoodEaten", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)V", arg0, arg1, arg2)); }

    int getHealAmount(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getHealAmount", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    float getSaturationModifier(ItemStack arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getSaturationModifier", "(Lnet.minecraft.item.ItemStack;)F", arg0)); }

    ItemStack onItemRightClick(ItemStack arg0, World arg1, EntityPlayer arg2) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "onItemRightClick", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;", arg0, arg1, arg2)); }

    ItemFood setPotionEffect(int arg0, int arg1, int arg2, float arg3) { return ItemFood(*javaClass->invokeMethod<jobject>(this->object, "setPotionEffect", "(IIIF)Lnet.minecraft.item.ItemFood;", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: net.minecraft.item.EnumAction
 * Package name: net.minecraft.item
 */
class EnumAction : public Enum {
protected:
    const inline static char *className = "net.minecraft.item.EnumAction";
public:
    STATICINITIALIZE;

    EnumAction(jobject object) : JavaObject(object) {}

    static EnumAction valueOf(String arg0) { return EnumAction(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.item.EnumAction;", arg0)); }

};


/**
 * Classpath: net.minecraft.tileentity.TileEntityEnderChest
 * Package name: net.minecraft.tileentity
 */
class TileEntityEnderChest : public TileEntity {
protected:
    const inline static char *className = "net.minecraft.tileentity.TileEntityEnderChest";
public:
    STATICINITIALIZE;

    TileEntityEnderChest(jobject object) : JavaObject(object) {}

    bool receiveClientEvent(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "receiveClientEvent", "(II)Z", arg0, arg1)); }

    bool canBeUsed(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeUsed", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void openChest() { (*javaClass->invokeMethod<void>(this->object, "openChest", "()V", )); }

    void closeChest() { (*javaClass->invokeMethod<void>(this->object, "closeChest", "()V", )); }

    void invalidate() { (*javaClass->invokeMethod<void>(this->object, "invalidate", "()V", )); }

    void update() { (*javaClass->invokeMethod<void>(this->object, "update", "()V", )); }

};


/**
 * Classpath: net.minecraft.inventory.InventoryBasic
 * Package name: net.minecraft.inventory
 */
class InventoryBasic : public Object {
protected:
    const inline static char *className = "net.minecraft.inventory.InventoryBasic";
public:
    STATICINITIALIZE;

    InventoryBasic(jobject object) : JavaObject(object) {}

    bool hasCustomName() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasCustomName", "()Z", )); }

    ItemStack decrStackSize(int arg0, int arg1) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "decrStackSize", "(II)Lnet.minecraft.item.ItemStack;", arg0, arg1)); }

    int getFieldCount() { return int(*javaClass->invokeMethod<int>(this->object, "getFieldCount", "()I", )); }

    bool isUseableByPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUseableByPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void closeInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "closeInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    int getInventoryStackLimit() { return int(*javaClass->invokeMethod<int>(this->object, "getInventoryStackLimit", "()I", )); }

    ItemStack removeStackFromSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "removeStackFromSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void setCustomName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setCustomName", "(Ljava.lang.String;)V", arg0)); }

    void func_110134_a(IInvBasic arg0) { (*javaClass->invokeMethod<void>(this->object, "func_110134_a", "(Lnet.minecraft.inventory.IInvBasic;)V", arg0)); }

    void func_110132_b(IInvBasic arg0) { (*javaClass->invokeMethod<void>(this->object, "func_110132_b", "(Lnet.minecraft.inventory.IInvBasic;)V", arg0)); }

    ItemStack func_174894_a(ItemStack arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "func_174894_a", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.item.ItemStack;", arg0)); }

    bool isItemValidForSlot(int arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemValidForSlot", "(ILnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    int getSizeInventory() { return int(*javaClass->invokeMethod<int>(this->object, "getSizeInventory", "()I", )); }

    void setInventorySlotContents(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "setInventorySlotContents", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    ItemStack getStackInSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getStackInSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void openInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "openInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void setField(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setField", "(II)V", arg0, arg1)); }

    void markDirty() { (*javaClass->invokeMethod<void>(this->object, "markDirty", "()V", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int getField(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getField", "(I)I", arg0)); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.inventory.IInvBasic
 * Package name: net.minecraft.inventory
 */
class IInvBasic : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.inventory.IInvBasic";
public:
    STATICINITIALIZE;

    IInvBasic(jobject object) : JavaObject(object) {}

    void onInventoryChanged(InventoryBasic arg0) { (*javaClass->invokeMethod<void>(this->object, "onInventoryChanged", "(Lnet.minecraft.inventory.InventoryBasic;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.inventory.IInventory
 * Package name: net.minecraft.inventory
 */
class IInventory : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.inventory.IInventory";
public:
    STATICINITIALIZE;

    IInventory(jobject object) : JavaObject(object) {}

    ItemStack decrStackSize(int arg0, int arg1) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "decrStackSize", "(II)Lnet.minecraft.item.ItemStack;", arg0, arg1)); }

    int getFieldCount() { return int(*javaClass->invokeMethod<int>(this->object, "getFieldCount", "()I", )); }

    bool isUseableByPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUseableByPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void closeInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "closeInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    int getInventoryStackLimit() { return int(*javaClass->invokeMethod<int>(this->object, "getInventoryStackLimit", "()I", )); }

    ItemStack removeStackFromSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "removeStackFromSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    bool isItemValidForSlot(int arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemValidForSlot", "(ILnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    int getSizeInventory() { return int(*javaClass->invokeMethod<int>(this->object, "getSizeInventory", "()I", )); }

    void setInventorySlotContents(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "setInventorySlotContents", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    ItemStack getStackInSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getStackInSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void openInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "openInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void setField(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setField", "(II)V", arg0, arg1)); }

    void markDirty() { (*javaClass->invokeMethod<void>(this->object, "markDirty", "()V", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int getField(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getField", "(I)I", arg0)); }

};


/**
 * Classpath: net.minecraft.inventory.AnimalChest
 * Package name: net.minecraft.inventory
 */
class AnimalChest : public InventoryBasic {
protected:
    const inline static char *className = "net.minecraft.inventory.AnimalChest";
public:
    STATICINITIALIZE;

    AnimalChest(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.entity.EntityLiving
 * Package name: net.minecraft.entity
 */
class EntityLiving : public EntityLivingBase {
protected:
    const inline static char *className = "net.minecraft.entity.EntityLiving";
public:
    STATICINITIALIZE;

    EntityLiving(jobject object) : JavaObject(object) {}

    bool allowLeashing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "allowLeashing", "()Z", )); }

    bool getCanSpawnHere() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanSpawnHere", "()Z", )); }

    Item getDropItem() { return Item(*javaClass->invokeMethod<jobject>(this->object, "getDropItem", "()Lnet.minecraft.item.Item;", )); }

    String getLivingSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLivingSound", "()Ljava.lang.String;", )); }

    int getMaxSpawnedInChunk() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxSpawnedInChunk", "()I", )); }

    int getTalkInterval() { return int(*javaClass->invokeMethod<int>(this->object, "getTalkInterval", "()I", )); }

    IEntityLivingData onInitialSpawn(DifficultyInstance arg0, IEntityLivingData arg1) { return IEntityLivingData(*javaClass->invokeMethod<jobject>(this->object, "onInitialSpawn", "(Lnet.minecraft.world.DifficultyInstance;Lnet.minecraft.entity.IEntityLivingData;)Lnet.minecraft.entity.IEntityLivingData;", arg0, arg1)); }

    void updateAITasks() { (*javaClass->invokeMethod<void>(this->object, "updateAITasks", "()V", )); }

    int getMaxFallHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxFallHeight", "()I", )); }

    bool isNoDespawnRequired() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNoDespawnRequired", "()Z", )); }

    void applyEntityAttributes() { (*javaClass->invokeMethod<void>(this->object, "applyEntityAttributes", "()V", )); }

    void handleStatusUpdate(byte arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }

    void updateEntityActionState() { (*javaClass->invokeMethod<void>(this->object, "updateEntityActionState", "()V", )); }

    void onLivingUpdate() { (*javaClass->invokeMethod<void>(this->object, "onLivingUpdate", "()V", )); }

    void setAIMoveSpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setAIMoveSpeed", "(F)V", arg0)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void onEntityUpdate() { (*javaClass->invokeMethod<void>(this->object, "onEntityUpdate", "()V", )); }

    void dropFewItems(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "dropFewItems", "(ZI)V", arg0, arg1)); }

    void dropEquipment(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "dropEquipment", "(ZI)V", arg0, arg1)); }

    bool isServerWorld() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isServerWorld", "()Z", )); }

    void setLeashedToEntity(Entity arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setLeashedToEntity", "(Lnet.minecraft.entity.Entity;Z)V", arg0, arg1)); }

    void clearLeashed(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "clearLeashed", "(ZZ)V", arg0, arg1)); }

    void updateLeashedState() { (*javaClass->invokeMethod<void>(this->object, "updateLeashedState", "()V", )); }

    Entity getLeashedToEntity() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getLeashedToEntity", "()Lnet.minecraft.entity.Entity;", )); }

    void updateEquipmentIfNeeded(EntityItem arg0) { (*javaClass->invokeMethod<void>(this->object, "updateEquipmentIfNeeded", "(Lnet.minecraft.entity.item.EntityItem;)V", arg0)); }

    bool func_175448_a(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_175448_a", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    void despawnEntity() { (*javaClass->invokeMethod<void>(this->object, "despawnEntity", "()V", )); }

    int getVerticalFaceSpeed() { return int(*javaClass->invokeMethod<int>(this->object, "getVerticalFaceSpeed", "()I", )); }

    float updateRotation(float arg0, float arg1, float arg2) { return float(*javaClass->invokeMethod<float>(this->object, "updateRotation", "(FFF)F", arg0, arg1, arg2)); }

    bool isNotColliding() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNotColliding", "()Z", )); }

    float getRenderSizeModifier() { return float(*javaClass->invokeMethod<float>(this->object, "getRenderSizeModifier", "()F", )); }

    static Item getArmorItemForSlot(int arg0, int arg1) { return Item(*javaClass->invokeStaticMethod<jobject>(this->object, "getArmorItemForSlot", "(II)Lnet.minecraft.item.Item;", arg0, arg1)); }

    bool canBeSteered() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeSteered", "()Z", )); }

    void enablePersistence() { (*javaClass->invokeMethod<void>(this->object, "enablePersistence", "()V", )); }

    void setEquipmentDropChance(int arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setEquipmentDropChance", "(IF)V", arg0, arg1)); }

    void recreateLeash() { (*javaClass->invokeMethod<void>(this->object, "recreateLeash", "()V", )); }

    bool canPickUpLoot() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPickUpLoot", "()Z", )); }

    PathNavigate getNewNavigator(World arg0) { return PathNavigate(*javaClass->invokeMethod<jobject>(this->object, "getNewNavigator", "(Lnet.minecraft.world.World;)Lnet.minecraft.pathfinding.PathNavigate;", arg0)); }

    EntityLookHelper getLookHelper() { return EntityLookHelper(*javaClass->invokeMethod<jobject>(this->object, "getLookHelper", "()Lnet.minecraft.entity.ai.EntityLookHelper;", )); }

    EntityMoveHelper getMoveHelper() { return EntityMoveHelper(*javaClass->invokeMethod<jobject>(this->object, "getMoveHelper", "()Lnet.minecraft.entity.ai.EntityMoveHelper;", )); }

    EntityJumpHelper getJumpHelper() { return EntityJumpHelper(*javaClass->invokeMethod<jobject>(this->object, "getJumpHelper", "()Lnet.minecraft.entity.ai.EntityJumpHelper;", )); }

    EntitySenses getEntitySenses() { return EntitySenses(*javaClass->invokeMethod<jobject>(this->object, "getEntitySenses", "()Lnet.minecraft.entity.ai.EntitySenses;", )); }

    EntityLivingBase getAttackTarget() { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "getAttackTarget", "()Lnet.minecraft.entity.EntityLivingBase;", )); }

    void setAttackTarget(EntityLivingBase arg0) { (*javaClass->invokeMethod<void>(this->object, "setAttackTarget", "(Lnet.minecraft.entity.EntityLivingBase;)V", arg0)); }

    bool canAttackClass(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAttackClass", "(Ljava.lang.Class;)Z", arg0)); }

    void eatGrassBonus() { (*javaClass->invokeMethod<void>(this->object, "eatGrassBonus", "()V", )); }

    void playLivingSound() { (*javaClass->invokeMethod<void>(this->object, "playLivingSound", "()V", )); }

    void spawnExplosionParticle() { (*javaClass->invokeMethod<void>(this->object, "spawnExplosionParticle", "()V", )); }

    bool isAIDisabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAIDisabled", "()Z", )); }

    void setCanPickUpLoot(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCanPickUpLoot", "(Z)V", arg0)); }

    void setMoveForward(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setMoveForward", "(F)V", arg0)); }

    PathNavigate getNavigator() { return PathNavigate(*javaClass->invokeMethod<jobject>(this->object, "getNavigator", "()Lnet.minecraft.pathfinding.PathNavigate;", )); }

    float func_110146_f(float arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "func_110146_f", "(FF)F", arg0, arg1)); }

    ItemStack getCurrentArmor(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getCurrentArmor", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    int getExperiencePoints(EntityPlayer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet.minecraft.entity.player.EntityPlayer;)I", arg0)); }

    ItemStack getEquipmentInSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getEquipmentInSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void setCurrentItemOrArmor(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    bool replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replaceItemInInventory", "(ILnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    static int getArmorPosition(ItemStack arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getArmorPosition", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    bool interactFirst(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interactFirst", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    ItemStack getHeldItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getHeldItem", "()Lnet.minecraft.item.ItemStack;", )); }

    void faceEntity(Entity arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "faceEntity", "(Lnet.minecraft.entity.Entity;FF)V", arg0, arg1, arg2)); }

    bool getLeashed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getLeashed", "()Z", )); }

    void setNoAI(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setNoAI", "(Z)V", arg0)); }

    bool interact(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interact", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    bool canDespawn() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDespawn", "()Z", )); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void setEquipmentBasedOnDifficulty(DifficultyInstance arg0) { (*javaClass->invokeMethod<void>(this->object, "setEquipmentBasedOnDifficulty", "(Lnet.minecraft.world.DifficultyInstance;)V", arg0)); }

    void setEnchantmentBasedOnDifficulty(DifficultyInstance arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnchantmentBasedOnDifficulty", "(Lnet.minecraft.world.DifficultyInstance;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.world.DifficultyInstance
 * Package name: net.minecraft.world
 */
class DifficultyInstance : public Object {
protected:
    const inline static char *className = "net.minecraft.world.DifficultyInstance";
public:
    STATICINITIALIZE;

    DifficultyInstance(jobject object) : JavaObject(object) {}

    float getAdditionalDifficulty() { return float(*javaClass->invokeMethod<float>(this->object, "getAdditionalDifficulty", "()F", )); }

    float calculateAdditionalDifficulty(EnumDifficulty arg0, long arg1, long arg2, float arg3) { return float(*javaClass->invokeMethod<float>(this->object, "calculateAdditionalDifficulty", "(Lnet.minecraft.world.EnumDifficulty;JJF)F", arg0, arg1, arg2, arg3)); }

    float getClampedAdditionalDifficulty() { return float(*javaClass->invokeMethod<float>(this->object, "getClampedAdditionalDifficulty", "()F", )); }

};


/**
 * Classpath: net.minecraft.entity.IEntityLivingData
 * Package name: net.minecraft.entity
 */
class IEntityLivingData : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.entity.IEntityLivingData";
public:
    STATICINITIALIZE;

    IEntityLivingData(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.pathfinding.PathNavigate
 * Package name: net.minecraft.pathfinding
 */
class PathNavigate : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathNavigate";
public:
    STATICINITIALIZE;

    PathNavigate(jobject object) : JavaObject(object) {}

    PathEntity getPathToEntityLiving(Entity arg0) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "getPathToEntityLiving", "(Lnet.minecraft.entity.Entity;)Lnet.minecraft.pathfinding.PathEntity;", arg0)); }

    PathFinder getPathFinder() { return PathFinder(*javaClass->invokeMethod<jobject>(this->object, "getPathFinder", "()Lnet.minecraft.pathfinding.PathFinder;", )); }

    float getPathSearchRange() { return float(*javaClass->invokeMethod<float>(this->object, "getPathSearchRange", "()F", )); }

    PathEntity getPathToXYZ(double arg0, double arg1, double arg2) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "getPathToXYZ", "(DDD)Lnet.minecraft.pathfinding.PathEntity;", arg0, arg1, arg2)); }

    PathEntity getPathToPos(BlockPos arg0) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "getPathToPos", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.pathfinding.PathEntity;", arg0)); }

    bool canNavigate() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canNavigate", "()Z", )); }

    bool tryMoveToXYZ(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryMoveToXYZ", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    void setHeightRequirement(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setHeightRequirement", "(F)V", arg0)); }

    void removeSunnyPath() { (*javaClass->invokeMethod<void>(this->object, "removeSunnyPath", "()V", )); }

    Vec3 getEntityPosition() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getEntityPosition", "()Lnet.minecraft.util.Vec3;", )); }

    bool isDirectPathBetweenPoints(Vec3 arg0, Vec3 arg1, int arg2, int arg3, int arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirectPathBetweenPoints", "(Lnet.minecraft.util.Vec3;Lnet.minecraft.util.Vec3;III)Z", arg0, arg1, arg2, arg3, arg4)); }

    void checkForStuck(Vec3 arg0) { (*javaClass->invokeMethod<void>(this->object, "checkForStuck", "(Lnet.minecraft.util.Vec3;)V", arg0)); }

    void clearPathEntity() { (*javaClass->invokeMethod<void>(this->object, "clearPathEntity", "()V", )); }

    bool tryMoveToEntityLiving(Entity arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryMoveToEntityLiving", "(Lnet.minecraft.entity.Entity;D)Z", arg0, arg1)); }

    void onUpdateNavigation() { (*javaClass->invokeMethod<void>(this->object, "onUpdateNavigation", "()V", )); }

    void setSpeed(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpeed", "(D)V", arg0)); }

    bool setPath(PathEntity arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setPath", "(Lnet.minecraft.pathfinding.PathEntity;D)Z", arg0, arg1)); }

    void pathFollow() { (*javaClass->invokeMethod<void>(this->object, "pathFollow", "()V", )); }

    bool isInLiquid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInLiquid", "()Z", )); }

    bool noPath() { return bool(*javaClass->invokeMethod<boolean>(this->object, "noPath", "()Z", )); }

    PathEntity getPath() { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "getPath", "()Lnet.minecraft.pathfinding.PathEntity;", )); }

};


/**
 * Classpath: net.minecraft.pathfinding.PathEntity
 * Package name: net.minecraft.pathfinding
 */
class PathEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathEntity";
public:
    STATICINITIALIZE;

    PathEntity(jobject object) : JavaObject(object) {}

    void setCurrentPathLength(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setCurrentPathLength", "(I)V", arg0)); }

    void incrementPathIndex() { (*javaClass->invokeMethod<void>(this->object, "incrementPathIndex", "()V", )); }

    PathPoint getFinalPathPoint() { return PathPoint(*javaClass->invokeMethod<jobject>(this->object, "getFinalPathPoint", "()Lnet.minecraft.pathfinding.PathPoint;", )); }

    bool isDestinationSame(Vec3 arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDestinationSame", "(Lnet.minecraft.util.Vec3;)Z", arg0)); }

    int getCurrentPathLength() { return int(*javaClass->invokeMethod<int>(this->object, "getCurrentPathLength", "()I", )); }

    int getCurrentPathIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getCurrentPathIndex", "()I", )); }

    Vec3 getVectorFromIndex(Entity arg0, int arg1) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getVectorFromIndex", "(Lnet.minecraft.entity.Entity;I)Lnet.minecraft.util.Vec3;", arg0, arg1)); }

    void setCurrentPathIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setCurrentPathIndex", "(I)V", arg0)); }

    PathPoint getPathPointFromIndex(int arg0) { return PathPoint(*javaClass->invokeMethod<jobject>(this->object, "getPathPointFromIndex", "(I)Lnet.minecraft.pathfinding.PathPoint;", arg0)); }

    bool isSamePath(PathEntity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSamePath", "(Lnet.minecraft.pathfinding.PathEntity;)Z", arg0)); }

    bool isFinished() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFinished", "()Z", )); }

    Vec3 getPosition(Entity arg0) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.Vec3;", arg0)); }

};


/**
 * Classpath: net.minecraft.pathfinding.PathPoint
 * Package name: net.minecraft.pathfinding
 */
class PathPoint : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathPoint";
public:
    STATICINITIALIZE;

    PathPoint(jobject object) : JavaObject(object) {}

    float distanceToSquared(PathPoint arg0) { return float(*javaClass->invokeMethod<float>(this->object, "distanceToSquared", "(Lnet.minecraft.pathfinding.PathPoint;)F", arg0)); }

    static int makeHash(int arg0, int arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "makeHash", "(III)I", arg0, arg1, arg2)); }

    bool isAssigned() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAssigned", "()Z", )); }

    float distanceTo(PathPoint arg0) { return float(*javaClass->invokeMethod<float>(this->object, "distanceTo", "(Lnet.minecraft.pathfinding.PathPoint;)F", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: net.minecraft.pathfinding.PathFinder
 * Package name: net.minecraft.pathfinding
 */
class PathFinder : public Object {
protected:
    const inline static char *className = "net.minecraft.pathfinding.PathFinder";
public:
    STATICINITIALIZE;

    PathFinder(jobject object) : JavaObject(object) {}

    PathEntity createEntityPathTo(IBlockAccess arg0, Entity arg1, BlockPos arg2, float arg3) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "createEntityPathTo", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.entity.Entity;Lnet.minecraft.util.BlockPos;F)Lnet.minecraft.pathfinding.PathEntity;", arg0, arg1, arg2, arg3)); }

    PathEntity createEntityPathTo(IBlockAccess arg0, Entity arg1, Entity arg2, float arg3) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "createEntityPathTo", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;F)Lnet.minecraft.pathfinding.PathEntity;", arg0, arg1, arg2, arg3)); }

    PathEntity createEntityPathTo(IBlockAccess arg0, Entity arg1, double arg2, double arg3, double arg4, float arg5) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "createEntityPathTo", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.entity.Entity;DDDF)Lnet.minecraft.pathfinding.PathEntity;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    PathEntity createEntityPath(PathPoint arg0, PathPoint arg1) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "createEntityPath", "(Lnet.minecraft.pathfinding.PathPoint;Lnet.minecraft.pathfinding.PathPoint;)Lnet.minecraft.pathfinding.PathEntity;", arg0, arg1)); }

    PathEntity addToPath(Entity arg0, PathPoint arg1, PathPoint arg2, float arg3) { return PathEntity(*javaClass->invokeMethod<jobject>(this->object, "addToPath", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.pathfinding.PathPoint;Lnet.minecraft.pathfinding.PathPoint;F)Lnet.minecraft.pathfinding.PathEntity;", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: net.minecraft.world.IBlockAccess
 * Package name: net.minecraft.world
 */
class IBlockAccess : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.IBlockAccess";
public:
    STATICINITIALIZE;

    IBlockAccess(jobject object) : JavaObject(object) {}

    int getCombinedLight(BlockPos arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getCombinedLight", "(Lnet.minecraft.util.BlockPos;I)I", arg0, arg1)); }

    BiomeGenBase getBiomeGenForCoords(BlockPos arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "getBiomeGenForCoords", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    int getStrongPower(BlockPos arg0, EnumFacing arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getStrongPower", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;)I", arg0, arg1)); }

    WorldType getWorldType() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "getWorldType", "()Lnet.minecraft.world.WorldType;", )); }

    bool extendedLevelsInChunkCache() { return bool(*javaClass->invokeMethod<boolean>(this->object, "extendedLevelsInChunkCache", "()Z", )); }

    IBlockState getBlockState(BlockPos arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getBlockState", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    TileEntity getTileEntity(BlockPos arg0) { return TileEntity(*javaClass->invokeMethod<jobject>(this->object, "getTileEntity", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.tileentity.TileEntity;", arg0)); }

    bool isAirBlock(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAirBlock", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.ai.EntityLookHelper
 * Package name: net.minecraft.entity.ai
 */
class EntityLookHelper : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntityLookHelper";
public:
    STATICINITIALIZE;

    EntityLookHelper(jobject object) : JavaObject(object) {}

    bool getIsLooking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsLooking", "()Z", )); }

    double getLookPosX() { return double(*javaClass->invokeMethod<double>(this->object, "getLookPosX", "()D", )); }

    double getLookPosY() { return double(*javaClass->invokeMethod<double>(this->object, "getLookPosY", "()D", )); }

    double getLookPosZ() { return double(*javaClass->invokeMethod<double>(this->object, "getLookPosZ", "()D", )); }

    void onUpdateLook() { (*javaClass->invokeMethod<void>(this->object, "onUpdateLook", "()V", )); }

    float updateRotation(float arg0, float arg1, float arg2) { return float(*javaClass->invokeMethod<float>(this->object, "updateRotation", "(FFF)F", arg0, arg1, arg2)); }

    void setLookPosition(double arg0, double arg1, double arg2, float arg3, float arg4) { (*javaClass->invokeMethod<void>(this->object, "setLookPosition", "(DDDFF)V", arg0, arg1, arg2, arg3, arg4)); }

    void setLookPositionWithEntity(Entity arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "setLookPositionWithEntity", "(Lnet.minecraft.entity.Entity;FF)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.entity.ai.EntityMoveHelper
 * Package name: net.minecraft.entity.ai
 */
class EntityMoveHelper : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntityMoveHelper";
public:
    STATICINITIALIZE;

    EntityMoveHelper(jobject object) : JavaObject(object) {}

    void onUpdateMoveHelper() { (*javaClass->invokeMethod<void>(this->object, "onUpdateMoveHelper", "()V", )); }

    void setMoveTo(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setMoveTo", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    bool isUpdating() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUpdating", "()Z", )); }

    double getSpeed() { return double(*javaClass->invokeMethod<double>(this->object, "getSpeed", "()D", )); }

    float limitAngle(float arg0, float arg1, float arg2) { return float(*javaClass->invokeMethod<float>(this->object, "limitAngle", "(FFF)F", arg0, arg1, arg2)); }

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    double getZ() { return double(*javaClass->invokeMethod<double>(this->object, "getZ", "()D", )); }

};


/**
 * Classpath: net.minecraft.entity.ai.EntityJumpHelper
 * Package name: net.minecraft.entity.ai
 */
class EntityJumpHelper : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntityJumpHelper";
public:
    STATICINITIALIZE;

    EntityJumpHelper(jobject object) : JavaObject(object) {}

    void doJump() { (*javaClass->invokeMethod<void>(this->object, "doJump", "()V", )); }

    void setJumping() { (*javaClass->invokeMethod<void>(this->object, "setJumping", "()V", )); }

};


/**
 * Classpath: net.minecraft.entity.ai.EntitySenses
 * Package name: net.minecraft.entity.ai
 */
class EntitySenses : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.ai.EntitySenses";
public:
    STATICINITIALIZE;

    EntitySenses(jobject object) : JavaObject(object) {}

    void clearSensingCache() { (*javaClass->invokeMethod<void>(this->object, "clearSensingCache", "()V", )); }

    bool canSee(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSee", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

};


/**
 * Classpath: net.minecraft.world.IInteractionObject
 * Package name: net.minecraft.world
 */
class IInteractionObject : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.IInteractionObject";
public:
    STATICINITIALIZE;

    IInteractionObject(jobject object) : JavaObject(object) {}

    Container createContainer(InventoryPlayer arg0, EntityPlayer arg1) { return Container(*javaClass->invokeMethod<jobject>(this->object, "createContainer", "(Lnet.minecraft.entity.player.InventoryPlayer;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.inventory.Container;", arg0, arg1)); }

    String getGuiID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getGuiID", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.entity.player.InventoryPlayer
 * Package name: net.minecraft.entity.player
 */
class InventoryPlayer : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.player.InventoryPlayer";
public:
    STATICINITIALIZE;

    InventoryPlayer(jobject object) : JavaObject(object) {}

    static int getHotbarSize() { return int(*javaClass->invokeStaticMethod<int>(this->object, "getHotbarSize", "()I", )); }

    bool hasCustomName() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasCustomName", "()Z", )); }

    void decrementAnimations() { (*javaClass->invokeMethod<void>(this->object, "decrementAnimations", "()V", )); }

    void dropAllItems() { (*javaClass->invokeMethod<void>(this->object, "dropAllItems", "()V", )); }

    ItemStack decrStackSize(int arg0, int arg1) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "decrStackSize", "(II)Lnet.minecraft.item.ItemStack;", arg0, arg1)); }

    float getStrVsBlock(Block arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getStrVsBlock", "(Lnet.minecraft.block.Block;)F", arg0)); }

    bool canHeldItemHarvest(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canHeldItemHarvest", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    void readFromNBT(NBTTagList arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagList;)V", arg0)); }

    void damageArmor(float arg0) { (*javaClass->invokeMethod<void>(this->object, "damageArmor", "(F)V", arg0)); }

    int getTotalArmorValue() { return int(*javaClass->invokeMethod<int>(this->object, "getTotalArmorValue", "()I", )); }

    int getFieldCount() { return int(*javaClass->invokeMethod<int>(this->object, "getFieldCount", "()I", )); }

    bool isUseableByPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUseableByPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void closeInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "closeInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    bool addItemStackToInventory(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addItemStackToInventory", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    int storeItemStack(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "storeItemStack", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    int clearMatchingItems(Item arg0, int arg1, int arg2, NBTTagCompound arg3) { return int(*javaClass->invokeMethod<int>(this->object, "clearMatchingItems", "(Lnet.minecraft.item.Item;IILnet.minecraft.nbt.NBTTagCompound;)I", arg0, arg1, arg2, arg3)); }

    int storePartialItemStack(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "storePartialItemStack", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    bool consumeInventoryItem(Item arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "consumeInventoryItem", "(Lnet.minecraft.item.Item;)Z", arg0)); }

    bool hasItemStack(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasItemStack", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    int getFirstEmptyStack() { return int(*javaClass->invokeMethod<int>(this->object, "getFirstEmptyStack", "()I", )); }

    int getInventoryStackLimit() { return int(*javaClass->invokeMethod<int>(this->object, "getInventoryStackLimit", "()I", )); }

    ItemStack removeStackFromSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "removeStackFromSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    bool isItemValidForSlot(int arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemValidForSlot", "(ILnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    void setItemStack(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "setItemStack", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    ItemStack getItemStack() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getItemStack", "()Lnet.minecraft.item.ItemStack;", )); }

    ItemStack armorItemInSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "armorItemInSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void copyInventory(InventoryPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "copyInventory", "(Lnet.minecraft.entity.player.InventoryPlayer;)V", arg0)); }

    int getSizeInventory() { return int(*javaClass->invokeMethod<int>(this->object, "getSizeInventory", "()I", )); }

    ItemStack getCurrentItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getCurrentItem", "()Lnet.minecraft.item.ItemStack;", )); }

    void changeCurrentItem(int arg0) { (*javaClass->invokeMethod<void>(this->object, "changeCurrentItem", "(I)V", arg0)); }

    void setCurrentItem(Item arg0, int arg1, bool arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "setCurrentItem", "(Lnet.minecraft.item.Item;IZZ)V", arg0, arg1, arg2, arg3)); }

    void setInventorySlotContents(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "setInventorySlotContents", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    ItemStack getStackInSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getStackInSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void openInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "openInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    bool hasItem(Item arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasItem", "(Lnet.minecraft.item.Item;)Z", arg0)); }

    void setField(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setField", "(II)V", arg0, arg1)); }

    NBTTagList writeToNBT(NBTTagList arg0) { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagList;)Lnet.minecraft.nbt.NBTTagList;", arg0)); }

    void markDirty() { (*javaClass->invokeMethod<void>(this->object, "markDirty", "()V", )); }

    int getInventorySlotContainItem(Item arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInventorySlotContainItem", "(Lnet.minecraft.item.Item;)I", arg0)); }

    int getInventorySlotContainItemAndDamage(Item arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getInventorySlotContainItemAndDamage", "(Lnet.minecraft.item.Item;I)I", arg0, arg1)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int getField(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getField", "(I)I", arg0)); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.inventory.Container
 * Package name: net.minecraft.inventory
 */
class Container : public Object {
protected:
    const inline static char *className = "net.minecraft.inventory.Container";
public:
    STATICINITIALIZE;

    Container(jobject object) : JavaObject(object) {}

    bool canInteractWith(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canInteractWith", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void onCraftGuiOpened(ICrafting arg0) { (*javaClass->invokeMethod<void>(this->object, "onCraftGuiOpened", "(Lnet.minecraft.inventory.ICrafting;)V", arg0)); }

    void detectAndSendChanges() { (*javaClass->invokeMethod<void>(this->object, "detectAndSendChanges", "()V", )); }

    void putStackInSlot(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "putStackInSlot", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    void putStacksInSlots(ItemStack_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "putStacksInSlots", "([Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void updateProgressBar(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "updateProgressBar", "(II)V", arg0, arg1)); }

    Slot addSlotToContainer(Slot arg0) { return Slot(*javaClass->invokeMethod<jobject>(this->object, "addSlotToContainer", "(Lnet.minecraft.inventory.Slot;)Lnet.minecraft.inventory.Slot;", arg0)); }

    void removeCraftingFromCrafters(ICrafting arg0) { (*javaClass->invokeMethod<void>(this->object, "removeCraftingFromCrafters", "(Lnet.minecraft.inventory.ICrafting;)V", arg0)); }

    bool enchantItem(EntityPlayer arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "enchantItem", "(Lnet.minecraft.entity.player.EntityPlayer;I)Z", arg0, arg1)); }

    Slot getSlotFromInventory(IInventory arg0, int arg1) { return Slot(*javaClass->invokeMethod<jobject>(this->object, "getSlotFromInventory", "(Lnet.minecraft.inventory.IInventory;I)Lnet.minecraft.inventory.Slot;", arg0, arg1)); }

    ItemStack transferStackInSlot(EntityPlayer arg0, int arg1) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "transferStackInSlot", "(Lnet.minecraft.entity.player.EntityPlayer;I)Lnet.minecraft.item.ItemStack;", arg0, arg1)); }

    static int getDragEvent(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getDragEvent", "(I)I", arg0)); }

    static int extractDragMode(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "extractDragMode", "(I)I", arg0)); }

    static bool isValidDragMode(int arg0, EntityPlayer arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isValidDragMode", "(ILnet.minecraft.entity.player.EntityPlayer;)Z", arg0, arg1)); }

    void retrySlotClick(int arg0, int arg1, bool arg2, EntityPlayer arg3) { (*javaClass->invokeMethod<void>(this->object, "retrySlotClick", "(IIZLnet.minecraft.entity.player.EntityPlayer;)V", arg0, arg1, arg2, arg3)); }

    void onCraftMatrixChanged(IInventory arg0) { (*javaClass->invokeMethod<void>(this->object, "onCraftMatrixChanged", "(Lnet.minecraft.inventory.IInventory;)V", arg0)); }

    short getNextTransactionID(InventoryPlayer arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getNextTransactionID", "(Lnet.minecraft.entity.player.InventoryPlayer;)S", arg0)); }

    bool getCanCraft(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanCraft", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void setCanCraft(EntityPlayer arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setCanCraft", "(Lnet.minecraft.entity.player.EntityPlayer;Z)V", arg0, arg1)); }

    bool mergeItemStack(ItemStack arg0, int arg1, int arg2, bool arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mergeItemStack", "(Lnet.minecraft.item.ItemStack;IIZ)Z", arg0, arg1, arg2, arg3)); }

    static int calcRedstoneFromInventory(IInventory arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "calcRedstoneFromInventory", "(Lnet.minecraft.inventory.IInventory;)I", arg0)); }

    static int calcRedstone(TileEntity arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "calcRedstone", "(Lnet.minecraft.tileentity.TileEntity;)I", arg0)); }

    static bool canAddItemToSlot(Slot arg0, ItemStack arg1, bool arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "canAddItemToSlot", "(Lnet.minecraft.inventory.Slot;Lnet.minecraft.item.ItemStack;Z)Z", arg0, arg1, arg2)); }

    bool canDragIntoSlot(Slot arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDragIntoSlot", "(Lnet.minecraft.inventory.Slot;)Z", arg0)); }

    static void computeStackSize(Set arg0, int arg1, ItemStack arg2, int arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "computeStackSize", "(Ljava.util.Set;ILnet.minecraft.item.ItemStack;I)V", arg0, arg1, arg2, arg3)); }

    bool canMergeSlot(ItemStack arg0, Slot arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canMergeSlot", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.inventory.Slot;)Z", arg0, arg1)); }

    static int func_94534_d(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "func_94534_d", "(II)I", arg0, arg1)); }

    List getInventory() { return List(*javaClass->invokeMethod<jobject>(this->object, "getInventory", "()Ljava.util.List;", )); }

    void onContainerClosed(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "onContainerClosed", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    ItemStack slotClick(int arg0, int arg1, int arg2, EntityPlayer arg3) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "slotClick", "(IIILnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.item.ItemStack;", arg0, arg1, arg2, arg3)); }

    void resetDrag() { (*javaClass->invokeMethod<void>(this->object, "resetDrag", "()V", )); }

    Slot getSlot(int arg0) { return Slot(*javaClass->invokeMethod<jobject>(this->object, "getSlot", "(I)Lnet.minecraft.inventory.Slot;", arg0)); }

};


/**
 * Classpath: net.minecraft.inventory.ICrafting
 * Package name: net.minecraft.inventory
 */
class ICrafting : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.inventory.ICrafting";
public:
    STATICINITIALIZE;

    ICrafting(jobject object) : JavaObject(object) {}

    void sendSlotContents(Container arg0, int arg1, ItemStack arg2) { (*javaClass->invokeMethod<void>(this->object, "sendSlotContents", "(Lnet.minecraft.inventory.Container;ILnet.minecraft.item.ItemStack;)V", arg0, arg1, arg2)); }

    void updateCraftingInventory(Container arg0, List arg1) { (*javaClass->invokeMethod<void>(this->object, "updateCraftingInventory", "(Lnet.minecraft.inventory.Container;Ljava.util.List;)V", arg0, arg1)); }

    void sendProgressBarUpdate(Container arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "sendProgressBarUpdate", "(Lnet.minecraft.inventory.Container;II)V", arg0, arg1, arg2)); }

    void func_175173_a(Container arg0, IInventory arg1) { (*javaClass->invokeMethod<void>(this->object, "func_175173_a", "(Lnet.minecraft.inventory.Container;Lnet.minecraft.inventory.IInventory;)V", arg0, arg1)); }

};


/**
 * Classpath: [Lnet.minecraft.item.ItemStack;
 */
class ItemStack_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.item.ItemStack;";
public:
    STATICINITIALIZE;

    ItemStack_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.inventory.Slot
 * Package name: net.minecraft.inventory
 */
class Slot : public Object {
protected:
    const inline static char *className = "net.minecraft.inventory.Slot";
public:
    STATICINITIALIZE;

    Slot(jobject object) : JavaObject(object) {}

    int getSlotStackLimit() { return int(*javaClass->invokeMethod<int>(this->object, "getSlotStackLimit", "()I", )); }

    ItemStack decrStackSize(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "decrStackSize", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void onPickupFromSlot(EntityPlayer arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "onPickupFromSlot", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    void onSlotChanged() { (*javaClass->invokeMethod<void>(this->object, "onSlotChanged", "()V", )); }

    void onSlotChange(ItemStack arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "onSlotChange", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    bool canBeHovered() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeHovered", "()Z", )); }

    bool getHasStack() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHasStack", "()Z", )); }

    String getSlotTexture() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSlotTexture", "()Ljava.lang.String;", )); }

    bool isItemValid(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemValid", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    bool canTakeStack(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canTakeStack", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    int getItemStackLimit(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getItemStackLimit", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    bool isHere(IInventory arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHere", "(Lnet.minecraft.inventory.IInventory;I)Z", arg0, arg1)); }

    void putStack(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "putStack", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void onCrafting(ItemStack arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "onCrafting", "(Lnet.minecraft.item.ItemStack;I)V", arg0, arg1)); }

    void onCrafting(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "onCrafting", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    ItemStack getStack() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getStack", "()Lnet.minecraft.item.ItemStack;", )); }

};


/**
 * Classpath: net.minecraft.entity.player.EntityPlayer$EnumStatus
 * Enclosing class: net.minecraft.entity.player.EntityPlayer
 * Package name: net.minecraft.entity.player
 */
class EntityPlayer_EnumStatus : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayer$EnumStatus";
public:
    STATICINITIALIZE;

    EntityPlayer_EnumStatus(jobject object) : JavaObject(object) {}

    static EntityPlayer_EnumStatus valueOf(String arg0) { return EntityPlayer_EnumStatus(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayer$EnumStatus;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.LockCode
 * Package name: net.minecraft.world
 */
class LockCode : public Object {
protected:
    const inline static char *className = "net.minecraft.world.LockCode";
public:
    STATICINITIALIZE;

    LockCode(jobject object) : JavaObject(object) {}

    static LockCode fromNBT(NBTTagCompound arg0) { return LockCode(*javaClass->invokeStaticMethod<jobject>(this->object, "fromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.world.LockCode;", arg0)); }

    void toNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "toNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    String getLock() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLock", "()Ljava.lang.String;", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

};


/**
 * Classpath: net.minecraft.entity.player.EnumPlayerModelParts
 * Package name: net.minecraft.entity.player
 */
class EnumPlayerModelParts : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.player.EnumPlayerModelParts";
public:
    STATICINITIALIZE;

    EnumPlayerModelParts(jobject object) : JavaObject(object) {}

    String getPartName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPartName", "()Ljava.lang.String;", )); }

    IChatComponent func_179326_d() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "func_179326_d", "()Lnet.minecraft.util.IChatComponent;", )); }

    int getPartMask() { return int(*javaClass->invokeMethod<int>(this->object, "getPartMask", "()I", )); }

    int getPartId() { return int(*javaClass->invokeMethod<int>(this->object, "getPartId", "()I", )); }

    static EnumPlayerModelParts valueOf(String arg0) { return EnumPlayerModelParts(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.entity.player.EnumPlayerModelParts;", arg0)); }

};


/**
 * Classpath: net.minecraft.enchantment.Enchantment
 * Package name: net.minecraft.enchantment
 */
class Enchantment : public Object {
protected:
    const inline static char *className = "net.minecraft.enchantment.Enchantment";
public:
    STATICINITIALIZE;

    Enchantment(jobject object) : JavaObject(object) {}

    static Enchantment getEnchantmentById(int arg0) { return Enchantment(*javaClass->invokeStaticMethod<jobject>(this->object, "getEnchantmentById", "(I)Lnet.minecraft.enchantment.Enchantment;", arg0)); }

    String getTranslatedName(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getTranslatedName", "(I)Ljava.lang.String;", arg0)); }

    void onEntityDamaged(EntityLivingBase arg0, Entity arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "onEntityDamaged", "(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.Entity;I)V", arg0, arg1, arg2)); }

    int getMaxLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxLevel", "()I", )); }

    static Enchantment getEnchantmentByLocation(String arg0) { return Enchantment(*javaClass->invokeStaticMethod<jobject>(this->object, "getEnchantmentByLocation", "(Ljava.lang.String;)Lnet.minecraft.enchantment.Enchantment;", arg0)); }

    static Set func_181077_c() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "func_181077_c", "()Ljava.util.Set;", )); }

    int getMinLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getMinLevel", "()I", )); }

    int getMinEnchantability(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMinEnchantability", "(I)I", arg0)); }

    int getMaxEnchantability(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMaxEnchantability", "(I)I", arg0)); }

    int calcModifierDamage(int arg0, DamageSource arg1) { return int(*javaClass->invokeMethod<int>(this->object, "calcModifierDamage", "(ILnet.minecraft.util.DamageSource;)I", arg0, arg1)); }

    float calcDamageByCreature(int arg0, EnumCreatureAttribute arg1) { return float(*javaClass->invokeMethod<float>(this->object, "calcDamageByCreature", "(ILnet.minecraft.entity.EnumCreatureAttribute;)F", arg0, arg1)); }

    bool canApplyTogether(Enchantment arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canApplyTogether", "(Lnet.minecraft.enchantment.Enchantment;)Z", arg0)); }

    bool canApply(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canApply", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    void onUserHurt(EntityLivingBase arg0, Entity arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "onUserHurt", "(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.entity.Entity;I)V", arg0, arg1, arg2)); }

    int getWeight() { return int(*javaClass->invokeMethod<int>(this->object, "getWeight", "()I", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    Enchantment setName(String arg0) { return Enchantment(*javaClass->invokeMethod<jobject>(this->object, "setName", "(Ljava.lang.String;)Lnet.minecraft.enchantment.Enchantment;", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.EntityHanging
 * Package name: net.minecraft.entity
 */
class EntityHanging : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.EntityHanging";
public:
    STATICINITIALIZE;

    EntityHanging(jobject object) : JavaObject(object) {}

    bool shouldSetPosAfterLoading() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldSetPosAfterLoading", "()Z", )); }

    EnumFacing getHorizontalFacing() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "getHorizontalFacing", "()Lnet.minecraft.util.EnumFacing;", )); }

    void setPosition(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setPosition", "(DDD)V", arg0, arg1, arg2)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    void updateBoundingBox() { (*javaClass->invokeMethod<void>(this->object, "updateBoundingBox", "()V", )); }

    double func_174858_a(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "func_174858_a", "(I)D", arg0)); }

    bool onValidSurface() { return bool(*javaClass->invokeMethod<boolean>(this->object, "onValidSurface", "()Z", )); }

    BlockPos getHangingPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getHangingPosition", "()Lnet.minecraft.util.BlockPos;", )); }

    int getWidthPixels() { return int(*javaClass->invokeMethod<int>(this->object, "getWidthPixels", "()I", )); }

    int getHeightPixels() { return int(*javaClass->invokeMethod<int>(this->object, "getHeightPixels", "()I", )); }

    bool canBeCollidedWith() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeCollidedWith", "()Z", )); }

    bool hitByEntity(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hitByEntity", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void addVelocity(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "addVelocity", "(DDD)V", arg0, arg1, arg2)); }

    void onBroken(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onBroken", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void moveEntity(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "moveEntity", "(DDD)V", arg0, arg1, arg2)); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void updateFacingWithBoundingBox(EnumFacing arg0) { (*javaClass->invokeMethod<void>(this->object, "updateFacingWithBoundingBox", "(Lnet.minecraft.util.EnumFacing;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.item.EnumRarity
 * Package name: net.minecraft.item
 */
class EnumRarity : public Enum {
protected:
    const inline static char *className = "net.minecraft.item.EnumRarity";
public:
    STATICINITIALIZE;

    EnumRarity(jobject object) : JavaObject(object) {}

    static EnumRarity valueOf(String arg0) { return EnumRarity(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.item.EnumRarity;", arg0)); }

};


/**
 * Classpath: net.minecraft.creativetab.CreativeTabs
 * Package name: net.minecraft.creativetab
 */
class CreativeTabs : public Object {
protected:
    const inline static char *className = "net.minecraft.creativetab.CreativeTabs";
public:
    STATICINITIALIZE;

    CreativeTabs(jobject object) : JavaObject(object) {}

    int getTabIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getTabIndex", "()I", )); }

    CreativeTabs setBackgroundImageName(String arg0) { return CreativeTabs(*javaClass->invokeMethod<jobject>(this->object, "setBackgroundImageName", "(Ljava.lang.String;)Lnet.minecraft.creativetab.CreativeTabs;", arg0)); }

    CreativeTabs setNoScrollbar() { return CreativeTabs(*javaClass->invokeMethod<jobject>(this->object, "setNoScrollbar", "()Lnet.minecraft.creativetab.CreativeTabs;", )); }

    String getTabLabel() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTabLabel", "()Ljava.lang.String;", )); }

    String getTranslatedTabLabel() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTranslatedTabLabel", "()Ljava.lang.String;", )); }

    ItemStack getIconItemStack() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getIconItemStack", "()Lnet.minecraft.item.ItemStack;", )); }

    Item getTabIconItem() { return Item(*javaClass->invokeMethod<jobject>(this->object, "getTabIconItem", "()Lnet.minecraft.item.Item;", )); }

    int getIconItemDamage() { return int(*javaClass->invokeMethod<int>(this->object, "getIconItemDamage", "()I", )); }

    String getBackgroundImageName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getBackgroundImageName", "()Ljava.lang.String;", )); }

    bool drawInForegroundOfTab() { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawInForegroundOfTab", "()Z", )); }

    bool shouldHidePlayerInventory() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldHidePlayerInventory", "()Z", )); }

    int getTabColumn() { return int(*javaClass->invokeMethod<int>(this->object, "getTabColumn", "()I", )); }

    bool isTabInFirstRow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTabInFirstRow", "()Z", )); }

    bool hasRelevantEnchantmentType(EnumEnchantmentType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasRelevantEnchantmentType", "(Lnet.minecraft.enchantment.EnumEnchantmentType;)Z", arg0)); }

    void displayAllReleventItems(List arg0) { (*javaClass->invokeMethod<void>(this->object, "displayAllReleventItems", "(Ljava.util.List;)V", arg0)); }

    void addEnchantmentBooksToList(List arg0, EnumEnchantmentType_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "addEnchantmentBooksToList", "(Ljava.util.List;[Lnet.minecraft.enchantment.EnumEnchantmentType;)V", arg0, arg1)); }

    CreativeTabs setNoTitle() { return CreativeTabs(*javaClass->invokeMethod<jobject>(this->object, "setNoTitle", "()Lnet.minecraft.creativetab.CreativeTabs;", )); }

    CreativeTabs setRelevantEnchantmentTypes(EnumEnchantmentType_interface arg0) { return CreativeTabs(*javaClass->invokeMethod<jobject>(this->object, "setRelevantEnchantmentTypes", "([Lnet.minecraft.enchantment.EnumEnchantmentType;)Lnet.minecraft.creativetab.CreativeTabs;", arg0)); }

};


/**
 * Classpath: net.minecraft.enchantment.EnumEnchantmentType
 * Package name: net.minecraft.enchantment
 */
class EnumEnchantmentType : public Enum {
protected:
    const inline static char *className = "net.minecraft.enchantment.EnumEnchantmentType";
public:
    STATICINITIALIZE;

    EnumEnchantmentType(jobject object) : JavaObject(object) {}

    bool canEnchantItem(Item arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEnchantItem", "(Lnet.minecraft.item.Item;)Z", arg0)); }

    static EnumEnchantmentType valueOf(String arg0) { return EnumEnchantmentType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.enchantment.EnumEnchantmentType;", arg0)); }

};


/**
 * Classpath: [Lnet.minecraft.enchantment.EnumEnchantmentType;
 */
class EnumEnchantmentType_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.enchantment.EnumEnchantmentType;";
public:
    STATICINITIALIZE;

    EnumEnchantmentType_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.block.Block$EnumOffsetType
 * Enclosing class: net.minecraft.block.Block
 * Package name: net.minecraft.block
 */
class Block_EnumOffsetType : public Enum {
protected:
    const inline static char *className = "net.minecraft.block.Block$EnumOffsetType";
public:
    STATICINITIALIZE;

    Block_EnumOffsetType(jobject object) : JavaObject(object) {}

    static Block_EnumOffsetType valueOf(String arg0) { return Block_EnumOffsetType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.block.Block$EnumOffsetType;", arg0)); }

};


/**
 * Classpath: net.minecraft.block.BlockBush
 * Package name: net.minecraft.block
 */
class BlockBush : public Block {
protected:
    const inline static char *className = "net.minecraft.block.BlockBush";
public:
    STATICINITIALIZE;

    BlockBush(jobject object) : JavaObject(object) {}

    AxisAlignedBB getCollisionBoundingBox(World arg0, BlockPos arg1, IBlockState arg2) { return AxisAlignedBB(*javaClass->invokeMethod<jobject>(this->object, "getCollisionBoundingBox", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.util.AxisAlignedBB;", arg0, arg1, arg2)); }

    void onNeighborBlockChange(World arg0, BlockPos arg1, IBlockState arg2, Block arg3) { (*javaClass->invokeMethod<void>(this->object, "onNeighborBlockChange", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.block.Block;)V", arg0, arg1, arg2, arg3)); }

    bool canPlaceBlockAt(World arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPlaceBlockAt", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    bool canPlaceBlockOn(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPlaceBlockOn", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    EnumWorldBlockLayer getBlockLayer() { return EnumWorldBlockLayer(*javaClass->invokeMethod<jobject>(this->object, "getBlockLayer", "()Lnet.minecraft.util.EnumWorldBlockLayer;", )); }

    bool isOpaqueCube() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpaqueCube", "()Z", )); }

    void checkAndDropBlock(World arg0, BlockPos arg1, IBlockState arg2) { (*javaClass->invokeMethod<void>(this->object, "checkAndDropBlock", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)V", arg0, arg1, arg2)); }

    bool canBlockStay(World arg0, BlockPos arg1, IBlockState arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBlockStay", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Z", arg0, arg1, arg2)); }

    void updateTick(World arg0, BlockPos arg1, IBlockState arg2, Random arg3) { (*javaClass->invokeMethod<void>(this->object, "updateTick", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;Ljava.util.Random;)V", arg0, arg1, arg2, arg3)); }

    bool isFullCube() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFullCube", "()Z", )); }

};


/**
 * Classpath: net.minecraft.util.EnumWorldBlockLayer
 * Package name: net.minecraft.util
 */
class EnumWorldBlockLayer : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumWorldBlockLayer";
public:
    STATICINITIALIZE;

    EnumWorldBlockLayer(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static EnumWorldBlockLayer valueOf(String arg0) { return EnumWorldBlockLayer(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.EnumWorldBlockLayer;", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.EnumCreatureType
 * Package name: net.minecraft.entity
 */
class EnumCreatureType : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.EnumCreatureType";
public:
    STATICINITIALIZE;

    EnumCreatureType(jobject object) : JavaObject(object) {}

    Class getCreatureClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getCreatureClass", "()Ljava.lang.Class;", )); }

    int getMaxNumberOfCreature() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxNumberOfCreature", "()I", )); }

    bool getPeacefulCreature() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getPeacefulCreature", "()Z", )); }

    bool getAnimal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAnimal", "()Z", )); }

    static EnumCreatureType valueOf(String arg0) { return EnumCreatureType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.entity.EnumCreatureType;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.chunk.ChunkPrimer
 * Package name: net.minecraft.world.chunk
 */
class ChunkPrimer : public Object {
protected:
    const inline static char *className = "net.minecraft.world.chunk.ChunkPrimer";
public:
    STATICINITIALIZE;

    ChunkPrimer(jobject object) : JavaObject(object) {}

    IBlockState getBlockState(int arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getBlockState", "(I)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    IBlockState getBlockState(int arg0, int arg1, int arg2) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getBlockState", "(III)Lnet.minecraft.block.state.IBlockState;", arg0, arg1, arg2)); }

    void setBlockState(int arg0, int arg1, int arg2, IBlockState arg3) { (*javaClass->invokeMethod<void>(this->object, "setBlockState", "(IIILnet.minecraft.block.state.IBlockState;)V", arg0, arg1, arg2, arg3)); }

    void setBlockState(int arg0, IBlockState arg1) { (*javaClass->invokeMethod<void>(this->object, "setBlockState", "(ILnet.minecraft.block.state.IBlockState;)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.world.biome.BiomeGenBase$TempCategory
 * Enclosing class: net.minecraft.world.biome.BiomeGenBase
 * Package name: net.minecraft.world.biome
 */
class BiomeGenBase_TempCategory : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase$TempCategory";
public:
    STATICINITIALIZE;

    BiomeGenBase_TempCategory(jobject object) : JavaObject(object) {}

    static BiomeGenBase_TempCategory valueOf(String arg0) { return BiomeGenBase_TempCategory(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.world.biome.BiomeGenBase$TempCategory;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.biome.BiomeGenBase$Height
 * Enclosing class: net.minecraft.world.biome.BiomeGenBase
 * Package name: net.minecraft.world.biome
 */
class BiomeGenBase_Height : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase$Height";
public:
    STATICINITIALIZE;

    BiomeGenBase_Height(jobject object) : JavaObject(object) {}

    BiomeGenBase_Height attenuate() { return BiomeGenBase_Height(*javaClass->invokeMethod<jobject>(this->object, "attenuate", "()Lnet.minecraft.world.biome.BiomeGenBase$Height;", )); }

};


/**
 * Classpath: net.minecraft.world.biome.WorldChunkManager
 * Package name: net.minecraft.world.biome
 */
class WorldChunkManager : public Object {
protected:
    const inline static char *className = "net.minecraft.world.biome.WorldChunkManager";
public:
    STATICINITIALIZE;

    WorldChunkManager(jobject object) : JavaObject(object) {}

    BiomeGenBase getBiomeGenerator(BlockPos arg0, BiomeGenBase arg1) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "getBiomeGenerator", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.biome.BiomeGenBase;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0, arg1)); }

    BiomeGenBase getBiomeGenerator(BlockPos arg0) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "getBiomeGenerator", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0)); }

    float getTemperatureAtHeight(float arg0, int arg1) { return float(*javaClass->invokeMethod<float>(this->object, "getTemperatureAtHeight", "(FI)F", arg0, arg1)); }

    bool areBiomesViable(int arg0, int arg1, int arg2, List arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "areBiomesViable", "(IIILjava.util.List;)Z", arg0, arg1, arg2, arg3)); }

    void cleanupCache() { (*javaClass->invokeMethod<void>(this->object, "cleanupCache", "()V", )); }

    List getBiomesToSpawnIn() { return List(*javaClass->invokeMethod<jobject>(this->object, "getBiomesToSpawnIn", "()Ljava.util.List;", )); }

    BlockPos findBiomePosition(int arg0, int arg1, int arg2, List arg3, Random arg4) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "findBiomePosition", "(IIILjava.util.List;Ljava.util.Random;)Lnet.minecraft.util.BlockPos;", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: net.minecraft.world.chunk.IChunkProvider
 * Package name: net.minecraft.world.chunk
 */
class IChunkProvider : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.chunk.IChunkProvider";
public:
    STATICINITIALIZE;

    IChunkProvider(jobject object) : JavaObject(object) {}

    bool chunkExists(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "chunkExists", "(II)Z", arg0, arg1)); }

    Chunk provideChunk(BlockPos arg0) { return Chunk(*javaClass->invokeMethod<jobject>(this->object, "provideChunk", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.chunk.Chunk;", arg0)); }

    Chunk provideChunk(int arg0, int arg1) { return Chunk(*javaClass->invokeMethod<jobject>(this->object, "provideChunk", "(II)Lnet.minecraft.world.chunk.Chunk;", arg0, arg1)); }

    BlockPos getStrongholdGen(World arg0, String arg1, BlockPos arg2) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getStrongholdGen", "(Lnet.minecraft.world.World;Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;", arg0, arg1, arg2)); }

    bool unloadQueuedChunks() { return bool(*javaClass->invokeMethod<boolean>(this->object, "unloadQueuedChunks", "()Z", )); }

    bool func_177460_a(IChunkProvider arg0, Chunk arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_177460_a", "(Lnet.minecraft.world.chunk.IChunkProvider;Lnet.minecraft.world.chunk.Chunk;II)Z", arg0, arg1, arg2, arg3)); }

    void recreateStructures(Chunk arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "recreateStructures", "(Lnet.minecraft.world.chunk.Chunk;II)V", arg0, arg1, arg2)); }

    List getPossibleCreatures(EnumCreatureType arg0, BlockPos arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getPossibleCreatures", "(Lnet.minecraft.entity.EnumCreatureType;Lnet.minecraft.util.BlockPos;)Ljava.util.List;", arg0, arg1)); }

    void saveExtraData() { (*javaClass->invokeMethod<void>(this->object, "saveExtraData", "()V", )); }

    int getLoadedChunkCount() { return int(*javaClass->invokeMethod<int>(this->object, "getLoadedChunkCount", "()I", )); }

    bool canSave() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSave", "()Z", )); }

    bool saveChunks(bool arg0, IProgressUpdate arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "saveChunks", "(ZLnet.minecraft.util.IProgressUpdate;)Z", arg0, arg1)); }

    void populate(IChunkProvider arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "populate", "(Lnet.minecraft.world.chunk.IChunkProvider;II)V", arg0, arg1, arg2)); }

    String makeString() { return String(*javaClass->invokeMethod<jobject>(this->object, "makeString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.world.chunk.Chunk
 * Package name: net.minecraft.world.chunk
 */
class Chunk : public Object {
protected:
    const inline static char *className = "net.minecraft.world.chunk.Chunk";
public:
    STATICINITIALIZE;

    Chunk(jobject object) : JavaObject(object) {}

    void onChunkLoad() { (*javaClass->invokeMethod<void>(this->object, "onChunkLoad", "()V", )); }

    bool isPopulated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPopulated", "()Z", )); }

    int getLightSubtracted(BlockPos arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getLightSubtracted", "(Lnet.minecraft.util.BlockPos;I)I", arg0, arg1)); }

    int getHeightValue(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getHeightValue", "(II)I", arg0, arg1)); }

    int getLowestHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getLowestHeight", "()I", )); }

    int getLightFor(EnumSkyBlock arg0, BlockPos arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getLightFor", "(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;)I", arg0, arg1)); }

    void setLightFor(EnumSkyBlock arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setLightFor", "(Lnet.minecraft.world.EnumSkyBlock;Lnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    BlockPos getPrecipitationHeight(BlockPos arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPrecipitationHeight", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;", arg0)); }

    int getTopFilledSegment() { return int(*javaClass->invokeMethod<int>(this->object, "getTopFilledSegment", "()I", )); }

    void removeTileEntity(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "removeTileEntity", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    void addTileEntity(TileEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "addTileEntity", "(Lnet.minecraft.tileentity.TileEntity;)V", arg0)); }

    void addTileEntity(BlockPos arg0, TileEntity arg1) { (*javaClass->invokeMethod<void>(this->object, "addTileEntity", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.tileentity.TileEntity;)V", arg0, arg1)); }

    void removeEntityAtIndex(Entity arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "removeEntityAtIndex", "(Lnet.minecraft.entity.Entity;I)V", arg0, arg1)); }

    void enqueueRelightChecks() { (*javaClass->invokeMethod<void>(this->object, "enqueueRelightChecks", "()V", )); }

    void setChunkModified() { (*javaClass->invokeMethod<void>(this->object, "setChunkModified", "()V", )); }

    long getInhabitedTime() { return long(*javaClass->invokeMethod<long>(this->object, "getInhabitedTime", "()J", )); }

    void resetRelightChecks() { (*javaClass->invokeMethod<void>(this->object, "resetRelightChecks", "()V", )); }

    int getBlockMetadata(int arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getBlockMetadata", "(III)I", arg0, arg1, arg2)); }

    int getBlockMetadata(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getBlockMetadata", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    TileEntity createNewTileEntity(BlockPos arg0) { return TileEntity(*javaClass->invokeMethod<jobject>(this->object, "createNewTileEntity", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.tileentity.TileEntity;", arg0)); }

    bool isTerrainPopulated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTerrainPopulated", "()Z", )); }

    bool isLightPopulated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLightPopulated", "()Z", )); }

    bool isAtLocation(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAtLocation", "(II)Z", arg0, arg1)); }

    void generateHeightMap() { (*javaClass->invokeMethod<void>(this->object, "generateHeightMap", "()V", )); }

    void generateSkylightMap() { (*javaClass->invokeMethod<void>(this->object, "generateSkylightMap", "()V", )); }

    int getBlockLightOpacity(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getBlockLightOpacity", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    int getBlockLightOpacity(int arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getBlockLightOpacity", "(III)I", arg0, arg1, arg2)); }

    void propagateSkylightOcclusion(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "propagateSkylightOcclusion", "(II)V", arg0, arg1)); }

    void recheckGaps(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "recheckGaps", "(Z)V", arg0)); }

    void relightBlock(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "relightBlock", "(III)V", arg0, arg1, arg2)); }

    void onChunkUnload() { (*javaClass->invokeMethod<void>(this->object, "onChunkUnload", "()V", )); }

    void func_150804_b(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "func_150804_b", "(Z)V", arg0)); }

    ChunkCoordIntPair getChunkCoordIntPair() { return ChunkCoordIntPair(*javaClass->invokeMethod<jobject>(this->object, "getChunkCoordIntPair", "()Lnet.minecraft.world.ChunkCoordIntPair;", )); }

    bool needsSaving(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "needsSaving", "(Z)Z", arg0)); }

    Random getRandomWithSeed(long arg0) { return Random(*javaClass->invokeMethod<jobject>(this->object, "getRandomWithSeed", "(J)Ljava.util.Random;", arg0)); }

    void populateChunk(IChunkProvider arg0, IChunkProvider arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "populateChunk", "(Lnet.minecraft.world.chunk.IChunkProvider;Lnet.minecraft.world.chunk.IChunkProvider;II)V", arg0, arg1, arg2, arg3)); }

    void func_150809_p() { (*javaClass->invokeMethod<void>(this->object, "func_150809_p", "()V", )); }

    bool getAreLevelsEmpty(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAreLevelsEmpty", "(II)Z", arg0, arg1)); }

    void setStorageArrays(ExtendedBlockStorage_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setStorageArrays", "([Lnet.minecraft.world.chunk.storage.ExtendedBlockStorage;)V", arg0)); }

    void setBiomeArray(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "setBiomeArray", "([B)V", arg0)); }

    bool func_150811_f(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_150811_f", "(II)Z", arg0, arg1)); }

    void func_180700_a(EnumFacing arg0) { (*javaClass->invokeMethod<void>(this->object, "func_180700_a", "(Lnet.minecraft.util.EnumFacing;)V", arg0)); }

    void func_177441_y() { (*javaClass->invokeMethod<void>(this->object, "func_177441_y", "()V", )); }

    void setChunkLoaded(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setChunkLoaded", "(Z)V", arg0)); }

    void setHeightMap(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "setHeightMap", "([I)V", arg0)); }

    Map getTileEntityMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getTileEntityMap", "()Ljava.util.Map;", )); }

    void setTerrainPopulated(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setTerrainPopulated", "(Z)V", arg0)); }

    void setLightPopulated(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLightPopulated", "(Z)V", arg0)); }

    void setModified(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setModified", "(Z)V", arg0)); }

    void setHasEntities(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHasEntities", "(Z)V", arg0)); }

    void setLastSaveTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setLastSaveTime", "(J)V", arg0)); }

    void setInhabitedTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setInhabitedTime", "(J)V", arg0)); }

    IBlockState getBlockState(BlockPos arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getBlockState", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    void removeEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "removeEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    TileEntity getTileEntity(BlockPos arg0, Chunk_EnumCreateEntityType arg1) { return TileEntity(*javaClass->invokeMethod<jobject>(this->object, "getTileEntity", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.chunk.Chunk$EnumCreateEntityType;)Lnet.minecraft.tileentity.TileEntity;", arg0, arg1)); }

    IBlockState setBlockState(BlockPos arg0, IBlockState arg1) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "setBlockState", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.block.state.IBlockState;", arg0, arg1)); }

    Block getBlock0(int arg0, int arg1, int arg2) { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlock0", "(III)Lnet.minecraft.block.Block;", arg0, arg1, arg2)); }

    int getHeight(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    Block getBlock(int arg0, int arg1, int arg2) { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "(III)Lnet.minecraft.block.Block;", arg0, arg1, arg2)); }

    Block getBlock(BlockPos arg0) { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.block.Block;", arg0)); }

    void fillChunk(arr_B arg0, int arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "fillChunk", "([BIZ)V", arg0, arg1, arg2)); }

    BiomeGenBase getBiome(BlockPos arg0, WorldChunkManager arg1) { return BiomeGenBase(*javaClass->invokeMethod<jobject>(this->object, "getBiome", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.biome.WorldChunkManager;)Lnet.minecraft.world.biome.BiomeGenBase;", arg0, arg1)); }

    bool canSeeSky(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSeeSky", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    void addEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "addEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    World getWorld() { return World(*javaClass->invokeMethod<jobject>(this->object, "getWorld", "()Lnet.minecraft.world.World;", )); }

    void getEntitiesWithinAABBForEntity(Entity arg0, AxisAlignedBB arg1, List arg2, Predicate arg3) { (*javaClass->invokeMethod<void>(this->object, "getEntitiesWithinAABBForEntity", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.util.AxisAlignedBB;Ljava.util.List;Lcom.google.common.base.Predicate;)V", arg0, arg1, arg2, arg3)); }

    void getEntitiesOfTypeWithinAAAB(Class arg0, AxisAlignedBB arg1, List arg2, Predicate arg3) { (*javaClass->invokeMethod<void>(this->object, "getEntitiesOfTypeWithinAAAB", "(Ljava.lang.Class;Lnet.minecraft.util.AxisAlignedBB;Ljava.util.List;Lcom.google.common.base.Predicate;)V", arg0, arg1, arg2, arg3)); }

    void checkSkylightNeighborHeight(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "checkSkylightNeighborHeight", "(III)V", arg0, arg1, arg2)); }

    void updateSkylightNeighborHeight(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "updateSkylightNeighborHeight", "(IIII)V", arg0, arg1, arg2, arg3)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    bool isLoaded() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLoaded", "()Z", )); }

};


/**
 * Classpath: net.minecraft.world.EnumSkyBlock
 * Package name: net.minecraft.world
 */
class EnumSkyBlock : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.EnumSkyBlock";
public:
    STATICINITIALIZE;

    EnumSkyBlock(jobject object) : JavaObject(object) {}

    static EnumSkyBlock valueOf(String arg0) { return EnumSkyBlock(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.world.EnumSkyBlock;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.ChunkCoordIntPair
 * Package name: net.minecraft.world
 */
class ChunkCoordIntPair : public Object {
protected:
    const inline static char *className = "net.minecraft.world.ChunkCoordIntPair";
public:
    STATICINITIALIZE;

    ChunkCoordIntPair(jobject object) : JavaObject(object) {}

    static long chunkXZ2Int(int arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "chunkXZ2Int", "(II)J", arg0, arg1)); }

    int getCenterXPos() { return int(*javaClass->invokeMethod<int>(this->object, "getCenterXPos", "()I", )); }

    int getCenterZPosition() { return int(*javaClass->invokeMethod<int>(this->object, "getCenterZPosition", "()I", )); }

    BlockPos getCenterBlock(int arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getCenterBlock", "(I)Lnet.minecraft.util.BlockPos;", arg0)); }

    int getXEnd() { return int(*javaClass->invokeMethod<int>(this->object, "getXEnd", "()I", )); }

    int getXStart() { return int(*javaClass->invokeMethod<int>(this->object, "getXStart", "()I", )); }

    int getZEnd() { return int(*javaClass->invokeMethod<int>(this->object, "getZEnd", "()I", )); }

    int getZStart() { return int(*javaClass->invokeMethod<int>(this->object, "getZStart", "()I", )); }

    BlockPos getBlock(int arg0, int arg1, int arg2) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "(III)Lnet.minecraft.util.BlockPos;", arg0, arg1, arg2)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: [Lnet.minecraft.world.chunk.storage.ExtendedBlockStorage;
 */
class ExtendedBlockStorage_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.world.chunk.storage.ExtendedBlockStorage;";
public:
    STATICINITIALIZE;

    ExtendedBlockStorage_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.world.chunk.Chunk$EnumCreateEntityType
 * Enclosing class: net.minecraft.world.chunk.Chunk
 * Package name: net.minecraft.world.chunk
 */
class Chunk_EnumCreateEntityType : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.chunk.Chunk$EnumCreateEntityType";
public:
    STATICINITIALIZE;

    Chunk_EnumCreateEntityType(jobject object) : JavaObject(object) {}

    static Chunk_EnumCreateEntityType valueOf(String arg0) { return Chunk_EnumCreateEntityType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.world.chunk.Chunk$EnumCreateEntityType;", arg0)); }

};


/**
 * Classpath: net.minecraft.util.IProgressUpdate
 * Package name: net.minecraft.util
 */
class IProgressUpdate : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.util.IProgressUpdate";
public:
    STATICINITIALIZE;

    IProgressUpdate(jobject object) : JavaObject(object) {}

    void setLoadingProgress(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLoadingProgress", "(I)V", arg0)); }

    void setDoneWorking() { (*javaClass->invokeMethod<void>(this->object, "setDoneWorking", "()V", )); }

    void displaySavingString(String arg0) { (*javaClass->invokeMethod<void>(this->object, "displaySavingString", "(Ljava.lang.String;)V", arg0)); }

    void displayLoadingString(String arg0) { (*javaClass->invokeMethod<void>(this->object, "displayLoadingString", "(Ljava.lang.String;)V", arg0)); }

    void resetProgressAndMessage(String arg0) { (*javaClass->invokeMethod<void>(this->object, "resetProgressAndMessage", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.world.IWorldAccess
 * Package name: net.minecraft.world
 */
class IWorldAccess : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.IWorldAccess";
public:
    STATICINITIALIZE;

    IWorldAccess(jobject object) : JavaObject(object) {}

    void markBlockForUpdate(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "markBlockForUpdate", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    void notifyLightSet(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "notifyLightSet", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    void onEntityAdded(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityAdded", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onEntityRemoved(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityRemoved", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void broadcastSound(int arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "broadcastSound", "(ILnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    void sendBlockBreakProgress(int arg0, BlockPos arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "sendBlockBreakProgress", "(ILnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2)); }

    void playSoundToNearExcept(EntityPlayer arg0, String arg1, double arg2, double arg3, double arg4, float arg5, float arg6) { (*javaClass->invokeMethod<void>(this->object, "playSoundToNearExcept", "(Lnet.minecraft.entity.player.EntityPlayer;Ljava.lang.String;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void spawnParticle(int arg0, bool arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, arr_I arg8) { (*javaClass->invokeMethod<void>(this->object, "spawnParticle", "(IZDDDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    void playSound(String arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "playSound", "(Ljava.lang.String;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void playAuxSFX(EntityPlayer arg0, int arg1, BlockPos arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "playAuxSFX", "(Lnet.minecraft.entity.player.EntityPlayer;ILnet.minecraft.util.BlockPos;I)V", arg0, arg1, arg2, arg3)); }

    void playRecord(String arg0, BlockPos arg1) { (*javaClass->invokeMethod<void>(this->object, "playRecord", "(Ljava.lang.String;Lnet.minecraft.util.BlockPos;)V", arg0, arg1)); }

    void markBlockRangeForRenderUpdate(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "markBlockRangeForRenderUpdate", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

};


/**
 * Classpath: net.minecraft.world.border.WorldBorder
 * Package name: net.minecraft.world.border
 */
class WorldBorder : public Object {
protected:
    const inline static char *className = "net.minecraft.world.border.WorldBorder";
public:
    STATICINITIALIZE;

    WorldBorder(jobject object) : JavaObject(object) {}

    void addListener(IBorderListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addListener", "(Lnet.minecraft.world.border.IBorderListener;)V", arg0)); }

    double getClosestDistance(Entity arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getClosestDistance", "(Lnet.minecraft.entity.Entity;)D", arg0)); }

    double getClosestDistance(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "getClosestDistance", "(DD)D", arg0, arg1)); }

    double getDamageBuffer() { return double(*javaClass->invokeMethod<double>(this->object, "getDamageBuffer", "()D", )); }

    double getDamageAmount() { return double(*javaClass->invokeMethod<double>(this->object, "getDamageAmount", "()D", )); }

    void setDamageAmount(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setDamageAmount", "(D)V", arg0)); }

    void setDamageBuffer(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setDamageBuffer", "(D)V", arg0)); }

    void setWarningDistance(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setWarningDistance", "(I)V", arg0)); }

    void setWarningTime(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setWarningTime", "(I)V", arg0)); }

    void setTransition(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransition", "(D)V", arg0)); }

    void setTransition(double arg0, double arg1, long arg2) { (*javaClass->invokeMethod<void>(this->object, "setTransition", "(DDJ)V", arg0, arg1, arg2)); }

    double getDiameter() { return double(*javaClass->invokeMethod<double>(this->object, "getDiameter", "()D", )); }

    int getWarningDistance() { return int(*javaClass->invokeMethod<int>(this->object, "getWarningDistance", "()I", )); }

    int getWarningTime() { return int(*javaClass->invokeMethod<int>(this->object, "getWarningTime", "()I", )); }

    double getTargetSize() { return double(*javaClass->invokeMethod<double>(this->object, "getTargetSize", "()D", )); }

    long getTimeUntilTarget() { return long(*javaClass->invokeMethod<long>(this->object, "getTimeUntilTarget", "()J", )); }

    List getListeners() { return List(*javaClass->invokeMethod<jobject>(this->object, "getListeners", "()Ljava.util.List;", )); }

    double getResizeSpeed() { return double(*javaClass->invokeMethod<double>(this->object, "getResizeSpeed", "()D", )); }

    void setCenter(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setCenter", "(DD)V", arg0, arg1)); }

    EnumBorderStatus getStatus() { return EnumBorderStatus(*javaClass->invokeMethod<jobject>(this->object, "getStatus", "()Lnet.minecraft.world.border.EnumBorderStatus;", )); }

    double minX() { return double(*javaClass->invokeMethod<double>(this->object, "minX", "()D", )); }

    double minZ() { return double(*javaClass->invokeMethod<double>(this->object, "minZ", "()D", )); }

    double maxX() { return double(*javaClass->invokeMethod<double>(this->object, "maxX", "()D", )); }

    double maxZ() { return double(*javaClass->invokeMethod<double>(this->object, "maxZ", "()D", )); }

    void setSize(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(I)V", arg0)); }

    double getCenterX() { return double(*javaClass->invokeMethod<double>(this->object, "getCenterX", "()D", )); }

    double getCenterZ() { return double(*javaClass->invokeMethod<double>(this->object, "getCenterZ", "()D", )); }

    bool contains(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool contains(ChunkCoordIntPair arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Lnet.minecraft.world.ChunkCoordIntPair;)Z", arg0)); }

    bool contains(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    int getSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSize", "()I", )); }

};


/**
 * Classpath: net.minecraft.world.border.IBorderListener
 * Package name: net.minecraft.world.border
 */
class IBorderListener : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.border.IBorderListener";
public:
    STATICINITIALIZE;

    IBorderListener(jobject object) : JavaObject(object) {}

    void onCenterChanged(WorldBorder arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "onCenterChanged", "(Lnet.minecraft.world.border.WorldBorder;DD)V", arg0, arg1, arg2)); }

    void onSizeChanged(WorldBorder arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "onSizeChanged", "(Lnet.minecraft.world.border.WorldBorder;D)V", arg0, arg1)); }

    void onTransitionStarted(WorldBorder arg0, double arg1, double arg2, long arg3) { (*javaClass->invokeMethod<void>(this->object, "onTransitionStarted", "(Lnet.minecraft.world.border.WorldBorder;DDJ)V", arg0, arg1, arg2, arg3)); }

    void onDamageBufferChanged(WorldBorder arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "onDamageBufferChanged", "(Lnet.minecraft.world.border.WorldBorder;D)V", arg0, arg1)); }

    void onDamageAmountChanged(WorldBorder arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "onDamageAmountChanged", "(Lnet.minecraft.world.border.WorldBorder;D)V", arg0, arg1)); }

    void onWarningTimeChanged(WorldBorder arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "onWarningTimeChanged", "(Lnet.minecraft.world.border.WorldBorder;I)V", arg0, arg1)); }

    void onWarningDistanceChanged(WorldBorder arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "onWarningDistanceChanged", "(Lnet.minecraft.world.border.WorldBorder;I)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.world.border.EnumBorderStatus
 * Package name: net.minecraft.world.border
 */
class EnumBorderStatus : public Enum {
protected:
    const inline static char *className = "net.minecraft.world.border.EnumBorderStatus";
public:
    STATICINITIALIZE;

    EnumBorderStatus(jobject object) : JavaObject(object) {}

    static EnumBorderStatus valueOf(String arg0) { return EnumBorderStatus(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.world.border.EnumBorderStatus;", arg0)); }

    int getID() { return int(*javaClass->invokeMethod<int>(this->object, "getID", "()I", )); }

};


/**
 * Classpath: net.minecraft.world.storage.ISaveHandler
 * Package name: net.minecraft.world.storage
 */
class ISaveHandler : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.storage.ISaveHandler";
public:
    STATICINITIALIZE;

    ISaveHandler(jobject object) : JavaObject(object) {}

    void checkSessionLock() { (*javaClass->invokeMethod<void>(this->object, "checkSessionLock", "()V", )); }

    IChunkLoader getChunkLoader(WorldProvider arg0) { return IChunkLoader(*javaClass->invokeMethod<jobject>(this->object, "getChunkLoader", "(Lnet.minecraft.world.WorldProvider;)Lnet.minecraft.world.chunk.storage.IChunkLoader;", arg0)); }

    void saveWorldInfoWithPlayer(WorldInfo arg0, NBTTagCompound arg1) { (*javaClass->invokeMethod<void>(this->object, "saveWorldInfoWithPlayer", "(Lnet.minecraft.world.storage.WorldInfo;Lnet.minecraft.nbt.NBTTagCompound;)V", arg0, arg1)); }

    IPlayerFileData getPlayerNBTManager() { return IPlayerFileData(*javaClass->invokeMethod<jobject>(this->object, "getPlayerNBTManager", "()Lnet.minecraft.world.storage.IPlayerFileData;", )); }

    File getMapFileFromName(String arg0) { return File(*javaClass->invokeMethod<jobject>(this->object, "getMapFileFromName", "(Ljava.lang.String;)Ljava.io.File;", arg0)); }

    WorldInfo loadWorldInfo() { return WorldInfo(*javaClass->invokeMethod<jobject>(this->object, "loadWorldInfo", "()Lnet.minecraft.world.storage.WorldInfo;", )); }

    void saveWorldInfo(WorldInfo arg0) { (*javaClass->invokeMethod<void>(this->object, "saveWorldInfo", "(Lnet.minecraft.world.storage.WorldInfo;)V", arg0)); }

    File getWorldDirectory() { return File(*javaClass->invokeMethod<jobject>(this->object, "getWorldDirectory", "()Ljava.io.File;", )); }

    String getWorldDirectoryName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getWorldDirectoryName", "()Ljava.lang.String;", )); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

};


/**
 * Classpath: net.minecraft.world.WorldProvider
 * Package name: net.minecraft.world
 */
class WorldProvider : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldProvider";
public:
    STATICINITIALIZE;

    WorldProvider(jobject object) : JavaObject(object) {}

    void registerWorldChunkManager() { (*javaClass->invokeMethod<void>(this->object, "registerWorldChunkManager", "()V", )); }

    float getCloudHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getCloudHeight", "()F", )); }

    bool isSkyColored() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSkyColored", "()Z", )); }

    double getVoidFogYFactor() { return double(*javaClass->invokeMethod<double>(this->object, "getVoidFogYFactor", "()D", )); }

    bool doesXZShowFog(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "doesXZShowFog", "(II)Z", arg0, arg1)); }

    int getDimensionId() { return int(*javaClass->invokeMethod<int>(this->object, "getDimensionId", "()I", )); }

    WorldChunkManager getWorldChunkManager() { return WorldChunkManager(*javaClass->invokeMethod<jobject>(this->object, "getWorldChunkManager", "()Lnet.minecraft.world.biome.WorldChunkManager;", )); }

    bool getHasNoSky() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHasNoSky", "()Z", )); }

    float calculateCelestialAngle(long arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "calculateCelestialAngle", "(JF)F", arg0, arg1)); }

    int getMoonPhase(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMoonPhase", "(J)I", arg0)); }

    Vec3 getFogColor(float arg0, float arg1) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getFogColor", "(FF)Lnet.minecraft.util.Vec3;", arg0, arg1)); }

    static WorldProvider getProviderForDimension(int arg0) { return WorldProvider(*javaClass->invokeStaticMethod<jobject>(this->object, "getProviderForDimension", "(I)Lnet.minecraft.world.WorldProvider;", arg0)); }

    void registerWorld(World arg0) { (*javaClass->invokeMethod<void>(this->object, "registerWorld", "(Lnet.minecraft.world.World;)V", arg0)); }

    WorldBorder getWorldBorder() { return WorldBorder(*javaClass->invokeMethod<jobject>(this->object, "getWorldBorder", "()Lnet.minecraft.world.border.WorldBorder;", )); }

    bool doesWaterVaporize() { return bool(*javaClass->invokeMethod<boolean>(this->object, "doesWaterVaporize", "()Z", )); }

    IChunkProvider createChunkGenerator() { return IChunkProvider(*javaClass->invokeMethod<jobject>(this->object, "createChunkGenerator", "()Lnet.minecraft.world.chunk.IChunkProvider;", )); }

    bool canRespawnHere() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRespawnHere", "()Z", )); }

    int getAverageGroundLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getAverageGroundLevel", "()I", )); }

    bool canCoordinateBeSpawn(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCoordinateBeSpawn", "(II)Z", arg0, arg1)); }

    BlockPos getSpawnCoordinate() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getSpawnCoordinate", "()Lnet.minecraft.util.BlockPos;", )); }

    String getInternalNameSuffix() { return String(*javaClass->invokeMethod<jobject>(this->object, "getInternalNameSuffix", "()Ljava.lang.String;", )); }

    bool isSurfaceWorld() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSurfaceWorld", "()Z", )); }

    String getDimensionName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDimensionName", "()Ljava.lang.String;", )); }

    void generateLightBrightnessTable() { (*javaClass->invokeMethod<void>(this->object, "generateLightBrightnessTable", "()V", )); }

};


/**
 * Classpath: net.minecraft.world.chunk.storage.IChunkLoader
 * Package name: net.minecraft.world.chunk.storage
 */
class IChunkLoader : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.chunk.storage.IChunkLoader";
public:
    STATICINITIALIZE;

    IChunkLoader(jobject object) : JavaObject(object) {}

    void saveExtraChunkData(World arg0, Chunk arg1) { (*javaClass->invokeMethod<void>(this->object, "saveExtraChunkData", "(Lnet.minecraft.world.World;Lnet.minecraft.world.chunk.Chunk;)V", arg0, arg1)); }

    void saveExtraData() { (*javaClass->invokeMethod<void>(this->object, "saveExtraData", "()V", )); }

    void saveChunk(World arg0, Chunk arg1) { (*javaClass->invokeMethod<void>(this->object, "saveChunk", "(Lnet.minecraft.world.World;Lnet.minecraft.world.chunk.Chunk;)V", arg0, arg1)); }

    void chunkTick() { (*javaClass->invokeMethod<void>(this->object, "chunkTick", "()V", )); }

    Chunk loadChunk(World arg0, int arg1, int arg2) { return Chunk(*javaClass->invokeMethod<jobject>(this->object, "loadChunk", "(Lnet.minecraft.world.World;II)Lnet.minecraft.world.chunk.Chunk;", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.world.storage.IPlayerFileData
 * Package name: net.minecraft.world.storage
 */
class IPlayerFileData : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.storage.IPlayerFileData";
public:
    STATICINITIALIZE;

    IPlayerFileData(jobject object) : JavaObject(object) {}

    void writePlayerData(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePlayerData", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    NBTTagCompound readPlayerData(EntityPlayer arg0) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "readPlayerData", "(Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.nbt.NBTTagCompound;", arg0)); }

};


/**
 * Classpath: net.minecraft.world.storage.MapStorage
 * Package name: net.minecraft.world.storage
 */
class MapStorage : public Object {
protected:
    const inline static char *className = "net.minecraft.world.storage.MapStorage";
public:
    STATICINITIALIZE;

    MapStorage(jobject object) : JavaObject(object) {}

    int getUniqueDataId(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUniqueDataId", "(Ljava.lang.String;)I", arg0)); }

    void saveAllData() { (*javaClass->invokeMethod<void>(this->object, "saveAllData", "()V", )); }

    void loadIdCounts() { (*javaClass->invokeMethod<void>(this->object, "loadIdCounts", "()V", )); }

    void saveData(WorldSavedData arg0) { (*javaClass->invokeMethod<void>(this->object, "saveData", "(Lnet.minecraft.world.WorldSavedData;)V", arg0)); }

    void setData(String arg0, WorldSavedData arg1) { (*javaClass->invokeMethod<void>(this->object, "setData", "(Ljava.lang.String;Lnet.minecraft.world.WorldSavedData;)V", arg0, arg1)); }

    WorldSavedData loadData(Class arg0, String arg1) { return WorldSavedData(*javaClass->invokeMethod<jobject>(this->object, "loadData", "(Ljava.lang.Class;Ljava.lang.String;)Lnet.minecraft.world.WorldSavedData;", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.world.WorldSavedData
 * Package name: net.minecraft.world
 */
class WorldSavedData : public Object {
protected:
    const inline static char *className = "net.minecraft.world.WorldSavedData";
public:
    STATICINITIALIZE;

    WorldSavedData(jobject object) : JavaObject(object) {}

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void setDirty(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDirty", "(Z)V", arg0)); }

    void writeToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void markDirty() { (*javaClass->invokeMethod<void>(this->object, "markDirty", "()V", )); }

    bool isDirty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirty", "()Z", )); }

};


/**
 * Classpath: net.minecraft.village.VillageCollection
 * Package name: net.minecraft.village
 */
class VillageCollection : public WorldSavedData {
protected:
    const inline static char *className = "net.minecraft.village.VillageCollection";
public:
    STATICINITIALIZE;

    VillageCollection(jobject object) : JavaObject(object) {}

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    static String fileNameForProvider(WorldProvider arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "fileNameForProvider", "(Lnet.minecraft.world.WorldProvider;)Ljava.lang.String;", arg0)); }

    void setWorldsForAll(World arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldsForAll", "(Lnet.minecraft.world.World;)V", arg0)); }

    void addToVillagerPositionList(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "addToVillagerPositionList", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    bool positionInList(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "positionInList", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    void removeAnnihilatedVillages() { (*javaClass->invokeMethod<void>(this->object, "removeAnnihilatedVillages", "()V", )); }

    void dropOldestVillagerPosition() { (*javaClass->invokeMethod<void>(this->object, "dropOldestVillagerPosition", "()V", )); }

    List getVillageList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getVillageList", "()Ljava.util.List;", )); }

    Village getNearestVillage(BlockPos arg0, int arg1) { return Village(*javaClass->invokeMethod<jobject>(this->object, "getNearestVillage", "(Lnet.minecraft.util.BlockPos;I)Lnet.minecraft.village.Village;", arg0, arg1)); }

    void addDoorsAround(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "addDoorsAround", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    VillageDoorInfo checkDoorExistence(BlockPos arg0) { return VillageDoorInfo(*javaClass->invokeMethod<jobject>(this->object, "checkDoorExistence", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;", arg0)); }

    void addToNewDoorsList(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "addToNewDoorsList", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    int countBlocksCanSeeSky(BlockPos arg0, EnumFacing arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "countBlocksCanSeeSky", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;I)I", arg0, arg1, arg2)); }

    bool isWoodDoor(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWoodDoor", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

    void writeToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void addNewDoorsToVillageOrCreateVillage() { (*javaClass->invokeMethod<void>(this->object, "addNewDoorsToVillageOrCreateVillage", "()V", )); }

};


/**
 * Classpath: net.minecraft.village.Village
 * Package name: net.minecraft.village
 */
class Village : public Object {
protected:
    const inline static char *className = "net.minecraft.village.Village";
public:
    STATICINITIALIZE;

    Village(jobject object) : JavaObject(object) {}

    void removeDeadAndOldAgressors() { (*javaClass->invokeMethod<void>(this->object, "removeDeadAndOldAgressors", "()V", )); }

    void updateNumVillagers() { (*javaClass->invokeMethod<void>(this->object, "updateNumVillagers", "()V", )); }

    void updateNumIronGolems() { (*javaClass->invokeMethod<void>(this->object, "updateNumIronGolems", "()V", )); }

    Vec3 func_179862_a(BlockPos arg0, int arg1, int arg2, int arg3) { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "func_179862_a", "(Lnet.minecraft.util.BlockPos;III)Lnet.minecraft.util.Vec3;", arg0, arg1, arg2, arg3)); }

    bool func_179866_a(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_179866_a", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool func_179861_a(BlockPos arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_179861_a", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    int getNumVillageDoors() { return int(*javaClass->invokeMethod<int>(this->object, "getNumVillageDoors", "()I", )); }

    int getNumVillagers() { return int(*javaClass->invokeMethod<int>(this->object, "getNumVillagers", "()I", )); }

    List getVillageDoorInfoList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getVillageDoorInfoList", "()Ljava.util.List;", )); }

    VillageDoorInfo getNearestDoor(BlockPos arg0) { return VillageDoorInfo(*javaClass->invokeMethod<jobject>(this->object, "getNearestDoor", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;", arg0)); }

    VillageDoorInfo getDoorInfo(BlockPos arg0) { return VillageDoorInfo(*javaClass->invokeMethod<jobject>(this->object, "getDoorInfo", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;", arg0)); }

    void addOrRenewAgressor(EntityLivingBase arg0) { (*javaClass->invokeMethod<void>(this->object, "addOrRenewAgressor", "(Lnet.minecraft.entity.EntityLivingBase;)V", arg0)); }

    EntityPlayer getNearestTargetPlayer(EntityLivingBase arg0) { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getNearestTargetPlayer", "(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.entity.player.EntityPlayer;", arg0)); }

    bool isPlayerReputationTooLow(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlayerReputationTooLow", "(Ljava.lang.String;)Z", arg0)); }

    int getReputationForPlayer(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getReputationForPlayer", "(Ljava.lang.String;)I", arg0)); }

    int setReputationForPlayer(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "setReputationForPlayer", "(Ljava.lang.String;I)I", arg0, arg1)); }

    void endMatingSeason() { (*javaClass->invokeMethod<void>(this->object, "endMatingSeason", "()V", )); }

    bool isMatingSeason() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMatingSeason", "()Z", )); }

    void setDefaultPlayerReputation(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultPlayerReputation", "(I)V", arg0)); }

    bool isAnnihilated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnnihilated", "()Z", )); }

    int getVillageRadius() { return int(*javaClass->invokeMethod<int>(this->object, "getVillageRadius", "()I", )); }

    void addVillageDoorInfo(VillageDoorInfo arg0) { (*javaClass->invokeMethod<void>(this->object, "addVillageDoorInfo", "(Lnet.minecraft.village.VillageDoorInfo;)V", arg0)); }

    VillageDoorInfo getExistedDoor(BlockPos arg0) { return VillageDoorInfo(*javaClass->invokeMethod<jobject>(this->object, "getExistedDoor", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.village.VillageDoorInfo;", arg0)); }

    void readVillageDataFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readVillageDataFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeVillageDataToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeVillageDataToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool isWoodDoor(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWoodDoor", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    BlockPos getCenter() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getCenter", "()Lnet.minecraft.util.BlockPos;", )); }

    void setWorld(World arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorld", "(Lnet.minecraft.world.World;)V", arg0)); }

    void tick(int arg0) { (*javaClass->invokeMethod<void>(this->object, "tick", "(I)V", arg0)); }

    void removeDeadAndOutOfRangeDoors() { (*javaClass->invokeMethod<void>(this->object, "removeDeadAndOutOfRangeDoors", "()V", )); }

    int getTicksSinceLastDoorAdding() { return int(*javaClass->invokeMethod<int>(this->object, "getTicksSinceLastDoorAdding", "()I", )); }

    void updateVillageRadiusAndCenter() { (*javaClass->invokeMethod<void>(this->object, "updateVillageRadiusAndCenter", "()V", )); }

    EntityLivingBase findNearestVillageAggressor(EntityLivingBase arg0) { return EntityLivingBase(*javaClass->invokeMethod<jobject>(this->object, "findNearestVillageAggressor", "(Lnet.minecraft.entity.EntityLivingBase;)Lnet.minecraft.entity.EntityLivingBase;", arg0)); }

};


/**
 * Classpath: net.minecraft.village.VillageDoorInfo
 * Package name: net.minecraft.village
 */
class VillageDoorInfo : public Object {
protected:
    const inline static char *className = "net.minecraft.village.VillageDoorInfo";
public:
    STATICINITIALIZE;

    VillageDoorInfo(jobject object) : JavaObject(object) {}

    static EnumFacing getFaceDirection(int arg0, int arg1) { return EnumFacing(*javaClass->invokeStaticMethod<jobject>(this->object, "getFaceDirection", "(II)Lnet.minecraft.util.EnumFacing;", arg0, arg1)); }

    int getDistanceSquared(int arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getDistanceSquared", "(III)I", arg0, arg1, arg2)); }

    int getDistanceToInsideBlockSq(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getDistanceToInsideBlockSq", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    bool func_179850_c(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_179850_c", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    BlockPos getInsideBlockPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getInsideBlockPos", "()Lnet.minecraft.util.BlockPos;", )); }

    int getDistanceToDoorBlockSq(BlockPos arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getDistanceToDoorBlockSq", "(Lnet.minecraft.util.BlockPos;)I", arg0)); }

    int getInsidePosY() { return int(*javaClass->invokeMethod<int>(this->object, "getInsidePosY", "()I", )); }

    int getInsideOffsetX() { return int(*javaClass->invokeMethod<int>(this->object, "getInsideOffsetX", "()I", )); }

    int getInsideOffsetZ() { return int(*javaClass->invokeMethod<int>(this->object, "getInsideOffsetZ", "()I", )); }

    BlockPos getDoorBlockPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getDoorBlockPos", "()Lnet.minecraft.util.BlockPos;", )); }

    void func_179849_a(int arg0) { (*javaClass->invokeMethod<void>(this->object, "func_179849_a", "(I)V", arg0)); }

    void incrementDoorOpeningRestrictionCounter() { (*javaClass->invokeMethod<void>(this->object, "incrementDoorOpeningRestrictionCounter", "()V", )); }

    bool getIsDetachedFromVillageFlag() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsDetachedFromVillageFlag", "()Z", )); }

    int getDoorOpeningRestrictionCounter() { return int(*javaClass->invokeMethod<int>(this->object, "getDoorOpeningRestrictionCounter", "()I", )); }

    void resetDoorOpeningRestrictionCounter() { (*javaClass->invokeMethod<void>(this->object, "resetDoorOpeningRestrictionCounter", "()V", )); }

    void setIsDetachedFromVillageFlag(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setIsDetachedFromVillageFlag", "(Z)V", arg0)); }

};


/**
 * Classpath: net.minecraft.util.EnumParticleTypes
 * Package name: net.minecraft.util
 */
class EnumParticleTypes : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.EnumParticleTypes";
public:
    STATICINITIALIZE;

    EnumParticleTypes(jobject object) : JavaObject(object) {}

    int getParticleID() { return int(*javaClass->invokeMethod<int>(this->object, "getParticleID", "()I", )); }

    bool getShouldIgnoreRange() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getShouldIgnoreRange", "()Z", )); }

    String getParticleName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getParticleName", "()Ljava.lang.String;", )); }

    int getArgumentCount() { return int(*javaClass->invokeMethod<int>(this->object, "getArgumentCount", "()I", )); }

    bool hasArguments() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArguments", "()Z", )); }

    static EnumParticleTypes getParticleFromId(int arg0) { return EnumParticleTypes(*javaClass->invokeStaticMethod<jobject>(this->object, "getParticleFromId", "(I)Lnet.minecraft.util.EnumParticleTypes;", arg0)); }

    static EnumParticleTypes valueOf(String arg0) { return EnumParticleTypes(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.EnumParticleTypes;", arg0)); }

};


/**
 * Classpath: net.minecraft.block.Block$SoundType
 * Enclosing class: net.minecraft.block.Block
 * Package name: net.minecraft.block
 */
class Block_SoundType : public Object {
protected:
    const inline static char *className = "net.minecraft.block.Block$SoundType";
public:
    STATICINITIALIZE;

    Block_SoundType(jobject object) : JavaObject(object) {}

    String getStepSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getStepSound", "()Ljava.lang.String;", )); }

    String getBreakSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getBreakSound", "()Ljava.lang.String;", )); }

    String getPlaceSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPlaceSound", "()Ljava.lang.String;", )); }

    float getFrequency() { return float(*javaClass->invokeMethod<float>(this->object, "getFrequency", "()F", )); }

    float getVolume() { return float(*javaClass->invokeMethod<float>(this->object, "getVolume", "()F", )); }

};


/**
 * Classpath: net.minecraft.entity.effect.EntityWeatherEffect
 * Package name: net.minecraft.entity.effect
 */
class EntityWeatherEffect : public Entity {
protected:
    const inline static char *className = "net.minecraft.entity.effect.EntityWeatherEffect";
public:
    STATICINITIALIZE;

    EntityWeatherEffect(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.world.WorldServer
 * Package name: net.minecraft.world
 */
class WorldServer : public World {
protected:
    const inline static char *className = "net.minecraft.world.WorldServer";
public:
    STATICINITIALIZE;

    WorldServer(jobject object) : JavaObject(object) {}

    MinecraftServer getMinecraftServer() { return MinecraftServer(*javaClass->invokeMethod<jobject>(this->object, "getMinecraftServer", "()Lnet.minecraft.server.MinecraftServer;", )); }

    void resetUpdateEntityTick() { (*javaClass->invokeMethod<void>(this->object, "resetUpdateEntityTick", "()V", )); }

    IChunkProvider createChunkProvider() { return IChunkProvider(*javaClass->invokeMethod<jobject>(this->object, "createChunkProvider", "()Lnet.minecraft.world.chunk.IChunkProvider;", )); }

    bool isBlockTickPending(BlockPos arg0, Block arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockTickPending", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)Z", arg0, arg1)); }

    bool addWeatherEffect(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addWeatherEffect", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void onEntityAdded(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityAdded", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onEntityRemoved(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityRemoved", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void scheduleUpdate(BlockPos arg0, Block arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "scheduleUpdate", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;I)V", arg0, arg1, arg2)); }

    void updateBlockTick(BlockPos arg0, Block arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "updateBlockTick", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V", arg0, arg1, arg2, arg3)); }

    void scheduleBlockUpdate(BlockPos arg0, Block arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "scheduleBlockUpdate", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V", arg0, arg1, arg2, arg3)); }

    Explosion newExplosion(Entity arg0, double arg1, double arg2, double arg3, float arg4, bool arg5, bool arg6) { return Explosion(*javaClass->invokeMethod<jobject>(this->object, "newExplosion", "(Lnet.minecraft.entity.Entity;DDDFZZ)Lnet.minecraft.world.Explosion;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void updateWeather() { (*javaClass->invokeMethod<void>(this->object, "updateWeather", "()V", )); }

    int getRenderDistanceChunks() { return int(*javaClass->invokeMethod<int>(this->object, "getRenderDistanceChunks", "()I", )); }

    void updateBlocks() { (*javaClass->invokeMethod<void>(this->object, "updateBlocks", "()V", )); }

    bool tickUpdates(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tickUpdates", "(Z)Z", arg0)); }

    List getPendingBlockUpdates(Chunk arg0, bool arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "getPendingBlockUpdates", "(Lnet.minecraft.world.chunk.Chunk;Z)Ljava.util.List;", arg0, arg1)); }

    List func_175712_a(StructureBoundingBox arg0, bool arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "func_175712_a", "(Lnet.minecraft.world.gen.structure.StructureBoundingBox;Z)Ljava.util.List;", arg0, arg1)); }

    bool isBlockModifiable(EntityPlayer arg0, BlockPos arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockModifiable", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1)); }

    void addBlockEvent(BlockPos arg0, Block arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "addBlockEvent", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;II)V", arg0, arg1, arg2, arg3)); }

    void spawnParticle(EnumParticleTypes arg0, double arg1, double arg2, double arg3, int arg4, double arg5, double arg6, double arg7, double arg8, arr_I arg9) { (*javaClass->invokeMethod<void>(this->object, "spawnParticle", "(Lnet.minecraft.util.EnumParticleTypes;DDDIDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    void spawnParticle(EnumParticleTypes arg0, bool arg1, double arg2, double arg3, double arg4, int arg5, double arg6, double arg7, double arg8, double arg9, arr_I arg10) { (*javaClass->invokeMethod<void>(this->object, "spawnParticle", "(Lnet.minecraft.util.EnumParticleTypes;ZDDDIDDDD[I)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }

    void setEntityState(Entity arg0, byte arg1) { (*javaClass->invokeMethod<void>(this->object, "setEntityState", "(Lnet.minecraft.entity.Entity;B)V", arg0, arg1)); }

    EntityTracker getEntityTracker() { return EntityTracker(*javaClass->invokeMethod<jobject>(this->object, "getEntityTracker", "()Lnet.minecraft.entity.EntityTracker;", )); }

    Entity getEntityFromUuid(UUID arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntityFromUuid", "(Ljava.util.UUID;)Lnet.minecraft.entity.Entity;", arg0)); }

    void wakeAllPlayers() { (*javaClass->invokeMethod<void>(this->object, "wakeAllPlayers", "()V", )); }

    void sendQueuedBlockEvents() { (*javaClass->invokeMethod<void>(this->object, "sendQueuedBlockEvents", "()V", )); }

    BiomeGenBase_SpawnListEntry getSpawnListEntryForTypeAt(EnumCreatureType arg0, BlockPos arg1) { return BiomeGenBase_SpawnListEntry(*javaClass->invokeMethod<jobject>(this->object, "getSpawnListEntryForTypeAt", "(Lnet.minecraft.entity.EnumCreatureType;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.world.biome.BiomeGenBase$SpawnListEntry;", arg0, arg1)); }

    bool canCreatureTypeSpawnHere(EnumCreatureType arg0, BiomeGenBase_SpawnListEntry arg1, BlockPos arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCreatureTypeSpawnHere", "(Lnet.minecraft.entity.EnumCreatureType;Lnet.minecraft.world.biome.BiomeGenBase$SpawnListEntry;Lnet.minecraft.util.BlockPos;)Z", arg0, arg1, arg2)); }

    void resetRainAndThunder() { (*javaClass->invokeMethod<void>(this->object, "resetRainAndThunder", "()V", )); }

    BlockPos adjustPosToNearbyEntity(BlockPos arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "adjustPosToNearbyEntity", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.util.BlockPos;", arg0)); }

    List getTileEntitiesIn(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return List(*javaClass->invokeMethod<jobject>(this->object, "getTileEntitiesIn", "(IIIIII)Ljava.util.List;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void createSpawnPosition(WorldSettings arg0) { (*javaClass->invokeMethod<void>(this->object, "createSpawnPosition", "(Lnet.minecraft.world.WorldSettings;)V", arg0)); }

    void setDebugWorldSettings() { (*javaClass->invokeMethod<void>(this->object, "setDebugWorldSettings", "()V", )); }

    void createBonusChest() { (*javaClass->invokeMethod<void>(this->object, "createBonusChest", "()V", )); }

    BlockPos getSpawnCoordinate() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getSpawnCoordinate", "()Lnet.minecraft.util.BlockPos;", )); }

    void saveChunkData() { (*javaClass->invokeMethod<void>(this->object, "saveChunkData", "()V", )); }

    bool fireBlockEvent(BlockEventData arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "fireBlockEvent", "(Lnet.minecraft.block.BlockEventData;)Z", arg0)); }

    PlayerManager getPlayerManager() { return PlayerManager(*javaClass->invokeMethod<jobject>(this->object, "getPlayerManager", "()Lnet.minecraft.server.management.PlayerManager;", )); }

    Teleporter getDefaultTeleporter() { return Teleporter(*javaClass->invokeMethod<jobject>(this->object, "getDefaultTeleporter", "()Lnet.minecraft.world.Teleporter;", )); }

    void updateEntities() { (*javaClass->invokeMethod<void>(this->object, "updateEntities", "()V", )); }

    void setInitialSpawnLocation() { (*javaClass->invokeMethod<void>(this->object, "setInitialSpawnLocation", "()V", )); }

    ListenableFuture addScheduledTask(Runnable arg0) { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "addScheduledTask", "(Ljava.lang.Runnable;)Lcom.google.common.util.concurrent.ListenableFuture;", arg0)); }

    bool canSpawnAnimals() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSpawnAnimals", "()Z", )); }

    bool canSpawnNPCs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSpawnNPCs", "()Z", )); }

    void saveAllChunks(bool arg0, IProgressUpdate arg1) { (*javaClass->invokeMethod<void>(this->object, "saveAllChunks", "(ZLnet.minecraft.util.IProgressUpdate;)V", arg0, arg1)); }

    bool areAllPlayersAsleep() { return bool(*javaClass->invokeMethod<boolean>(this->object, "areAllPlayersAsleep", "()Z", )); }

    void saveLevel() { (*javaClass->invokeMethod<void>(this->object, "saveLevel", "()V", )); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

    bool isCallingFromMinecraftThread() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCallingFromMinecraftThread", "()Z", )); }

    void updateEntityWithOptionalForce(Entity arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "updateEntityWithOptionalForce", "(Lnet.minecraft.entity.Entity;Z)V", arg0, arg1)); }

    void updateAllPlayersSleepingFlag() { (*javaClass->invokeMethod<void>(this->object, "updateAllPlayersSleepingFlag", "()V", )); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void initialize(WorldSettings arg0) { (*javaClass->invokeMethod<void>(this->object, "initialize", "(Lnet.minecraft.world.WorldSettings;)V", arg0)); }

    World init() { return World(*javaClass->invokeMethod<jobject>(this->object, "init", "()Lnet.minecraft.world.World;", )); }

};


/**
 * Classpath: net.minecraft.server.MinecraftServer
 * Package name: net.minecraft.server
 */
class MinecraftServer : public Object {
protected:
    const inline static char *className = "net.minecraft.server.MinecraftServer";
public:
    STATICINITIALIZE;

    MinecraftServer(jobject object) : JavaObject(object) {}

    int getMaxPlayers() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxPlayers", "()I", )); }

    bool getAllowNether() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAllowNether", "()Z", )); }

    String getWorldName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getWorldName", "()Ljava.lang.String;", )); }

    WorldServer worldServerForDimension(int arg0) { return WorldServer(*javaClass->invokeMethod<jobject>(this->object, "worldServerForDimension", "(I)Lnet.minecraft.world.WorldServer;", arg0)); }

    ServerConfigurationManager getConfigurationManager() { return ServerConfigurationManager(*javaClass->invokeMethod<jobject>(this->object, "getConfigurationManager", "()Lnet.minecraft.server.management.ServerConfigurationManager;", )); }

    void addChatMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    bool canCommandSenderUseCommand(int arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCommandSenderUseCommand", "(ILjava.lang.String;)Z", arg0, arg1)); }

    Vec3 getPositionVector() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getPositionVector", "()Lnet.minecraft.util.Vec3;", )); }

    World getEntityWorld() { return World(*javaClass->invokeMethod<jobject>(this->object, "getEntityWorld", "()Lnet.minecraft.world.World;", )); }

    Entity getCommandSenderEntity() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getCommandSenderEntity", "()Lnet.minecraft.entity.Entity;", )); }

    void setCommandStat(CommandResultStats_Type arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setCommandStat", "(Lnet.minecraft.command.CommandResultStats$Type;I)V", arg0, arg1)); }

    PlayerProfileCache getPlayerProfileCache() { return PlayerProfileCache(*javaClass->invokeMethod<jobject>(this->object, "getPlayerProfileCache", "()Lnet.minecraft.server.management.PlayerProfileCache;", )); }

    ServerStatusResponse getServerStatusResponse() { return ServerStatusResponse(*javaClass->invokeMethod<jobject>(this->object, "getServerStatusResponse", "()Lnet.minecraft.network.ServerStatusResponse;", )); }

    void refreshStatusNextTick() { (*javaClass->invokeMethod<void>(this->object, "refreshStatusNextTick", "()V", )); }

    Entity getEntityFromUuid(UUID arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntityFromUuid", "(Ljava.util.UUID;)Lnet.minecraft.entity.Entity;", arg0)); }

    int getMaxWorldSize() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxWorldSize", "()I", )); }

    ListenableFuture callFromMainThread(Callable arg0) { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "callFromMainThread", "(Ljava.util.concurrent.Callable;)Lcom.google.common.util.concurrent.ListenableFuture;", arg0)); }

    void setWorldName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldName", "(Ljava.lang.String;)V", arg0)); }

    void setServerOwner(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setServerOwner", "(Ljava.lang.String;)V", arg0)); }

    void setFolderName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setFolderName", "(Ljava.lang.String;)V", arg0)); }

    void canCreateBonusChest(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "canCreateBonusChest", "(Z)V", arg0)); }

    void setBuildLimit(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBuildLimit", "(I)V", arg0)); }

    void setConfigManager(ServerConfigurationManager arg0) { (*javaClass->invokeMethod<void>(this->object, "setConfigManager", "(Lnet.minecraft.server.management.ServerConfigurationManager;)V", arg0)); }

    ServerCommandManager createNewCommandManager() { return ServerCommandManager(*javaClass->invokeMethod<jobject>(this->object, "createNewCommandManager", "()Lnet.minecraft.command.ServerCommandManager;", )); }

    void loadAllWorlds(String arg0, String arg1, long arg2, WorldType arg3, String arg4) { (*javaClass->invokeMethod<void>(this->object, "loadAllWorlds", "(Ljava.lang.String;Ljava.lang.String;JLnet.minecraft.world.WorldType;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4)); }

    void convertMapIfNeeded(String arg0) { (*javaClass->invokeMethod<void>(this->object, "convertMapIfNeeded", "(Ljava.lang.String;)V", arg0)); }

    ISaveFormat getActiveAnvilConverter() { return ISaveFormat(*javaClass->invokeMethod<jobject>(this->object, "getActiveAnvilConverter", "()Lnet.minecraft.world.storage.ISaveFormat;", )); }

    String getFolderName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFolderName", "()Ljava.lang.String;", )); }

    void setResourcePackFromWorld(String arg0, ISaveHandler arg1) { (*javaClass->invokeMethod<void>(this->object, "setResourcePackFromWorld", "(Ljava.lang.String;Lnet.minecraft.world.storage.ISaveHandler;)V", arg0, arg1)); }

    void setDifficultyForAllWorlds(EnumDifficulty arg0) { (*javaClass->invokeMethod<void>(this->object, "setDifficultyForAllWorlds", "(Lnet.minecraft.world.EnumDifficulty;)V", arg0)); }

    void initialWorldChunkLoad() { (*javaClass->invokeMethod<void>(this->object, "initialWorldChunkLoad", "()V", )); }

    bool startServer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "startServer", "()Z", )); }

    void setOnlineMode(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setOnlineMode", "(Z)V", arg0)); }

    void setCanSpawnAnimals(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCanSpawnAnimals", "(Z)V", arg0)); }

    void setCanSpawnNPCs(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCanSpawnNPCs", "(Z)V", arg0)); }

    void setAllowPvp(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAllowPvp", "(Z)V", arg0)); }

    void setAllowFlight(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAllowFlight", "(Z)V", arg0)); }

    String getServerOwner() { return String(*javaClass->invokeMethod<jobject>(this->object, "getServerOwner", "()Ljava.lang.String;", )); }

    void saveAllWorlds(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "saveAllWorlds", "(Z)V", arg0)); }

    bool canStructuresSpawn() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canStructuresSpawn", "()Z", )); }

    bool func_181034_q() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181034_q", "()Z", )); }

    bool func_183002_r() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_183002_r", "()Z", )); }

    File getDataDirectory() { return File(*javaClass->invokeMethod<jobject>(this->object, "getDataDirectory", "()Ljava.io.File;", )); }

    bool isDedicatedServer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDedicatedServer", "()Z", )); }

    bool func_181035_ah() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181035_ah", "()Z", )); }

    CrashReport addServerInfoToCrashReport(CrashReport arg0) { return CrashReport(*javaClass->invokeMethod<jobject>(this->object, "addServerInfoToCrashReport", "(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReport;", arg0)); }

    void setInstance() { (*javaClass->invokeMethod<void>(this->object, "setInstance", "()V", )); }

    bool isCommandBlockEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCommandBlockEnabled", "()Z", )); }

    int getOpPermissionLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getOpPermissionLevel", "()I", )); }

    WorldSettings_GameType getGameType() { return WorldSettings_GameType(*javaClass->invokeMethod<jobject>(this->object, "getGameType", "()Lnet.minecraft.world.WorldSettings$GameType;", )); }

    void setGameType(WorldSettings_GameType arg0) { (*javaClass->invokeMethod<void>(this->object, "setGameType", "(Lnet.minecraft.world.WorldSettings$GameType;)V", arg0)); }

    bool sendCommandFeedback() { return bool(*javaClass->invokeMethod<boolean>(this->object, "sendCommandFeedback", "()Z", )); }

    EnumDifficulty getDifficulty() { return EnumDifficulty(*javaClass->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet.minecraft.world.EnumDifficulty;", )); }

    void startServerThread() { (*javaClass->invokeMethod<void>(this->object, "startServerThread", "()V", )); }

    String getUserMessage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUserMessage", "()Ljava.lang.String;", )); }

    bool serverIsInRunLoop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "serverIsInRunLoop", "()Z", )); }

    NetworkSystem getNetworkSystem() { return NetworkSystem(*javaClass->invokeMethod<jobject>(this->object, "getNetworkSystem", "()Lnet.minecraft.network.NetworkSystem;", )); }

    bool isAnvilFileSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnvilFileSet", "()Z", )); }

    void initiateShutdown() { (*javaClass->invokeMethod<void>(this->object, "initiateShutdown", "()V", )); }

    ListenableFuture addScheduledTask(Runnable arg0) { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "addScheduledTask", "(Ljava.lang.Runnable;)Lcom.google.common.util.concurrent.ListenableFuture;", arg0)); }

    void addServerStatsToSnooper(PlayerUsageSnooper arg0) { (*javaClass->invokeMethod<void>(this->object, "addServerStatsToSnooper", "(Lnet.minecraft.profiler.PlayerUsageSnooper;)V", arg0)); }

    PlayerUsageSnooper getPlayerUsageSnooper() { return PlayerUsageSnooper(*javaClass->invokeMethod<jobject>(this->object, "getPlayerUsageSnooper", "()Lnet.minecraft.profiler.PlayerUsageSnooper;", )); }

    void addServerTypeToSnooper(PlayerUsageSnooper arg0) { (*javaClass->invokeMethod<void>(this->object, "addServerTypeToSnooper", "(Lnet.minecraft.profiler.PlayerUsageSnooper;)V", arg0)); }

    bool isSnooperEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSnooperEnabled", "()Z", )); }

    MinecraftSessionService getMinecraftSessionService() { return MinecraftSessionService(*javaClass->invokeMethod<jobject>(this->object, "getMinecraftSessionService", "()Lcom.mojang.authlib.minecraft.MinecraftSessionService;", )); }

    void setUserMessage(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setUserMessage", "(Ljava.lang.String;)V", arg0)); }

    bool isSinglePlayer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSinglePlayer", "()Z", )); }

    void outputPercentRemaining(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "outputPercentRemaining", "(Ljava.lang.String;I)V", arg0, arg1)); }

    bool isServerRunning() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isServerRunning", "()Z", )); }

    void clearCurrentTask() { (*javaClass->invokeMethod<void>(this->object, "clearCurrentTask", "()V", )); }

    void setResourcePack(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "setResourcePack", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    void addFaviconToStatusResponse(ServerStatusResponse arg0) { (*javaClass->invokeMethod<void>(this->object, "addFaviconToStatusResponse", "(Lnet.minecraft.network.ServerStatusResponse;)V", arg0)); }

    void systemExitNow() { (*javaClass->invokeMethod<void>(this->object, "systemExitNow", "()V", )); }

    void updateTimeLightAndEntities() { (*javaClass->invokeMethod<void>(this->object, "updateTimeLightAndEntities", "()V", )); }

    int getCurrentPlayerCount() { return int(*javaClass->invokeMethod<int>(this->object, "getCurrentPlayerCount", "()I", )); }

    String getMinecraftVersion() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMinecraftVersion", "()Ljava.lang.String;", )); }

    String getServerModName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getServerModName", "()Ljava.lang.String;", )); }

    List getTabCompletions(ICommandSender arg0, String arg1, BlockPos arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getTabCompletions", "(Lnet.minecraft.command.ICommandSender;Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Ljava.util.List;", arg0, arg1, arg2)); }

    ICommandManager getCommandManager() { return ICommandManager(*javaClass->invokeMethod<jobject>(this->object, "getCommandManager", "()Lnet.minecraft.command.ICommandManager;", )); }

    bool allowSpawnMonsters() { return bool(*javaClass->invokeMethod<boolean>(this->object, "allowSpawnMonsters", "()Z", )); }

    void deleteWorldAndStopServer() { (*javaClass->invokeMethod<void>(this->object, "deleteWorldAndStopServer", "()V", )); }

    String getResourcePackUrl() { return String(*javaClass->invokeMethod<jobject>(this->object, "getResourcePackUrl", "()Ljava.lang.String;", )); }

    String getResourcePackHash() { return String(*javaClass->invokeMethod<jobject>(this->object, "getResourcePackHash", "()Ljava.lang.String;", )); }

    bool getGuiEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getGuiEnabled", "()Z", )); }

    bool isServerInOnlineMode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isServerInOnlineMode", "()Z", )); }

    bool getCanSpawnAnimals() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanSpawnAnimals", "()Z", )); }

    bool getCanSpawnNPCs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanSpawnNPCs", "()Z", )); }

    bool isPVPEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPVPEnabled", "()Z", )); }

    bool isFlightAllowed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlightAllowed", "()Z", )); }

    int getBuildLimit() { return int(*javaClass->invokeMethod<int>(this->object, "getBuildLimit", "()I", )); }

    bool isServerStopped() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isServerStopped", "()Z", )); }

    int getTickCounter() { return int(*javaClass->invokeMethod<int>(this->object, "getTickCounter", "()I", )); }

    void enableProfiling() { (*javaClass->invokeMethod<void>(this->object, "enableProfiling", "()V", )); }

    int getSpawnProtectionSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSpawnProtectionSize", "()I", )); }

    bool isBlockProtected(World arg0, BlockPos arg1, EntityPlayer arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockProtected", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0, arg1, arg2)); }

    bool getForceGamemode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getForceGamemode", "()Z", )); }

    Proxy getServerProxy() { return Proxy(*javaClass->invokeMethod<jobject>(this->object, "getServerProxy", "()Ljava.net.Proxy;", )); }

    int getMaxPlayerIdleMinutes() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxPlayerIdleMinutes", "()I", )); }

    void setPlayerIdleTimeout(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayerIdleTimeout", "(I)V", arg0)); }

    GameProfileRepository getGameProfileRepository() { return GameProfileRepository(*javaClass->invokeMethod<jobject>(this->object, "getGameProfileRepository", "()Lcom.mojang.authlib.GameProfileRepository;", )); }

    static long getCurrentTimeMillis() { return long(*javaClass->invokeStaticMethod<long>(this->object, "getCurrentTimeMillis", "()J", )); }

    void stopServer() { (*javaClass->invokeMethod<void>(this->object, "stopServer", "()V", )); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

    void logWarning(String arg0) { (*javaClass->invokeMethod<void>(this->object, "logWarning", "(Ljava.lang.String;)V", arg0)); }

    KeyPair getKeyPair() { return KeyPair(*javaClass->invokeMethod<jobject>(this->object, "getKeyPair", "()Ljava.security.KeyPair;", )); }

    void setDemo(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDemo", "(Z)V", arg0)); }

    void setKeyPair(KeyPair arg0) { (*javaClass->invokeMethod<void>(this->object, "setKeyPair", "(Ljava.security.KeyPair;)V", arg0)); }

    void setMOTD(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setMOTD", "(Ljava.lang.String;)V", arg0)); }

    bool isHardcore() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHardcore", "()Z", )); }

    void finalTick(CrashReport arg0) { (*javaClass->invokeMethod<void>(this->object, "finalTick", "(Lnet.minecraft.crash.CrashReport;)V", arg0)); }

    String shareToLAN(WorldSettings_GameType arg0, bool arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "shareToLAN", "(Lnet.minecraft.world.WorldSettings$GameType;Z)Ljava.lang.String;", arg0, arg1)); }

    String getMOTD() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMOTD", "()Ljava.lang.String;", )); }

    static MinecraftServer getServer() { return MinecraftServer(*javaClass->invokeStaticMethod<jobject>(this->object, "getServer", "()Lnet.minecraft.server.MinecraftServer;", )); }

    bool isDemo() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDemo", "()Z", )); }

    bool isCallingFromMinecraftThread() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCallingFromMinecraftThread", "()Z", )); }

    bool isAnnouncingPlayerAchievements() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnnouncingPlayerAchievements", "()Z", )); }

    int getNetworkCompressionTreshold() { return int(*javaClass->invokeMethod<int>(this->object, "getNetworkCompressionTreshold", "()I", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void run() { (*javaClass->invokeMethod<void>(this->object, "run", "()V", )); }

    File getFile(String arg0) { return File(*javaClass->invokeMethod<jobject>(this->object, "getFile", "(Ljava.lang.String;)Ljava.io.File;", arg0)); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.server.management.ServerConfigurationManager
 * Package name: net.minecraft.server.management
 */
class ServerConfigurationManager : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.ServerConfigurationManager";
public:
    STATICINITIALIZE;

    ServerConfigurationManager(jobject object) : JavaObject(object) {}

    NBTTagCompound readPlayerDataFromFile(EntityPlayerMP arg0) { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "readPlayerDataFromFile", "(Lnet.minecraft.entity.player.EntityPlayerMP;)Lnet.minecraft.nbt.NBTTagCompound;", arg0)); }

    MinecraftServer getServerInstance() { return MinecraftServer(*javaClass->invokeMethod<jobject>(this->object, "getServerInstance", "()Lnet.minecraft.server.MinecraftServer;", )); }

    void sendScoreboard(ServerScoreboard arg0, EntityPlayerMP arg1) { (*javaClass->invokeMethod<void>(this->object, "sendScoreboard", "(Lnet.minecraft.scoreboard.ServerScoreboard;Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0, arg1)); }

    void playerLoggedIn(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "playerLoggedIn", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void preparePlayer(EntityPlayerMP arg0, WorldServer arg1) { (*javaClass->invokeMethod<void>(this->object, "preparePlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.WorldServer;)V", arg0, arg1)); }

    void playerLoggedOut(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "playerLoggedOut", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    String allowUserToConnect(SocketAddress arg0, GameProfile arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "allowUserToConnect", "(Ljava.net.SocketAddress;Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;", arg0, arg1)); }

    bool func_183023_f(GameProfile arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_183023_f", "(Lcom.mojang.authlib.GameProfile;)Z", arg0)); }

    EntityPlayerMP createPlayerForUser(GameProfile arg0) { return EntityPlayerMP(*javaClass->invokeMethod<jobject>(this->object, "createPlayerForUser", "(Lcom.mojang.authlib.GameProfile;)Lnet.minecraft.entity.player.EntityPlayerMP;", arg0)); }

    EntityPlayerMP recreatePlayerEntity(EntityPlayerMP arg0, int arg1, bool arg2) { return EntityPlayerMP(*javaClass->invokeMethod<jobject>(this->object, "recreatePlayerEntity", "(Lnet.minecraft.entity.player.EntityPlayerMP;IZ)Lnet.minecraft.entity.player.EntityPlayerMP;", arg0, arg1, arg2)); }

    void syncPlayerInventory(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "syncPlayerInventory", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    EntityPlayerMP getPlayerByUsername(String arg0) { return EntityPlayerMP(*javaClass->invokeMethod<jobject>(this->object, "getPlayerByUsername", "(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayerMP;", arg0)); }

    String func_181058_b(bool arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "func_181058_b", "(Z)Ljava.lang.String;", arg0)); }

    UserListBans getBannedPlayers() { return UserListBans(*javaClass->invokeMethod<jobject>(this->object, "getBannedPlayers", "()Lnet.minecraft.server.management.UserListBans;", )); }

    BanList getBannedIPs() { return BanList(*javaClass->invokeMethod<jobject>(this->object, "getBannedIPs", "()Lnet.minecraft.server.management.BanList;", )); }

    void sendToAllNearExcept(EntityPlayer arg0, double arg1, double arg2, double arg3, double arg4, int arg5, Packet arg6) { (*javaClass->invokeMethod<void>(this->object, "sendToAllNearExcept", "(Lnet.minecraft.entity.player.EntityPlayer;DDDDILnet.minecraft.network.Packet;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void addWhitelistedPlayer(GameProfile arg0) { (*javaClass->invokeMethod<void>(this->object, "addWhitelistedPlayer", "(Lcom.mojang.authlib.GameProfile;)V", arg0)); }

    void removePlayerFromWhitelist(GameProfile arg0) { (*javaClass->invokeMethod<void>(this->object, "removePlayerFromWhitelist", "(Lcom.mojang.authlib.GameProfile;)V", arg0)); }

    UserListWhitelist getWhitelistedPlayers() { return UserListWhitelist(*javaClass->invokeMethod<jobject>(this->object, "getWhitelistedPlayers", "()Lnet.minecraft.server.management.UserListWhitelist;", )); }

    void loadWhiteList() { (*javaClass->invokeMethod<void>(this->object, "loadWhiteList", "()V", )); }

    void setWhiteListEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setWhiteListEnabled", "(Z)V", arg0)); }

    List getPlayersMatchingAddress(String arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getPlayersMatchingAddress", "(Ljava.lang.String;)Ljava.util.List;", arg0)); }

    void sendChatMsgImpl(IChatComponent arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "sendChatMsgImpl", "(Lnet.minecraft.util.IChatComponent;Z)V", arg0, arg1)); }

    EntityPlayerMP getPlayerByUUID(UUID arg0) { return EntityPlayerMP(*javaClass->invokeMethod<jobject>(this->object, "getPlayerByUUID", "(Ljava.util.UUID;)Lnet.minecraft.entity.player.EntityPlayerMP;", arg0)); }

    void writePlayerData(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "writePlayerData", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    int getEntityViewDistance() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityViewDistance", "()I", )); }

    int getMaxPlayers() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxPlayers", "()I", )); }

    void transferEntityToWorld(Entity arg0, int arg1, WorldServer arg2, WorldServer arg3) { (*javaClass->invokeMethod<void>(this->object, "transferEntityToWorld", "(Lnet.minecraft.entity.Entity;ILnet.minecraft.world.WorldServer;Lnet.minecraft.world.WorldServer;)V", arg0, arg1, arg2, arg3)); }

    StatisticsFile getPlayerStatsFile(EntityPlayer arg0) { return StatisticsFile(*javaClass->invokeMethod<jobject>(this->object, "getPlayerStatsFile", "(Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.stats.StatisticsFile;", arg0)); }

    void sendChatMsg(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "sendChatMsg", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    void transferPlayerToDimension(EntityPlayerMP arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "transferPlayerToDimension", "(Lnet.minecraft.entity.player.EntityPlayerMP;I)V", arg0, arg1)); }

    bool canSendCommands(GameProfile arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canSendCommands", "(Lcom.mojang.authlib.GameProfile;)Z", arg0)); }

    UserListOps getOppedPlayers() { return UserListOps(*javaClass->invokeMethod<jobject>(this->object, "getOppedPlayers", "()Lnet.minecraft.server.management.UserListOps;", )); }

    void setPlayerManager(WorldServer_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayerManager", "([Lnet.minecraft.world.WorldServer;)V", arg0)); }

    void saveAllPlayerData() { (*javaClass->invokeMethod<void>(this->object, "saveAllPlayerData", "()V", )); }

    int getViewDistance() { return int(*javaClass->invokeMethod<int>(this->object, "getViewDistance", "()I", )); }

    void setViewDistance(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setViewDistance", "(I)V", arg0)); }

    void setCommandsAllowedForAll(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCommandsAllowedForAll", "(Z)V", arg0)); }

    NBTTagCompound getHostPlayerData() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getHostPlayerData", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    void sendToAllNear(double arg0, double arg1, double arg2, double arg3, int arg4, Packet arg5) { (*javaClass->invokeMethod<void>(this->object, "sendToAllNear", "(DDDDILnet.minecraft.network.Packet;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void sendPacketToAllPlayers(Packet arg0) { (*javaClass->invokeMethod<void>(this->object, "sendPacketToAllPlayers", "(Lnet.minecraft.network.Packet;)V", arg0)); }

    void setGameType(WorldSettings_GameType arg0) { (*javaClass->invokeMethod<void>(this->object, "setGameType", "(Lnet.minecraft.world.WorldSettings$GameType;)V", arg0)); }

    void removeAllPlayers() { (*javaClass->invokeMethod<void>(this->object, "removeAllPlayers", "()V", )); }

    int getCurrentPlayerCount() { return int(*javaClass->invokeMethod<int>(this->object, "getCurrentPlayerCount", "()I", )); }

    List func_181057_v() { return List(*javaClass->invokeMethod<jobject>(this->object, "func_181057_v", "()Ljava.util.List;", )); }

    bool canJoin(GameProfile arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canJoin", "(Lcom.mojang.authlib.GameProfile;)Z", arg0)); }

    void addOp(GameProfile arg0) { (*javaClass->invokeMethod<void>(this->object, "addOp", "(Lcom.mojang.authlib.GameProfile;)V", arg0)); }

    void removeOp(GameProfile arg0) { (*javaClass->invokeMethod<void>(this->object, "removeOp", "(Lcom.mojang.authlib.GameProfile;)V", arg0)); }

    void onTick() { (*javaClass->invokeMethod<void>(this->object, "onTick", "()V", )); }

    void sendPacketToAllPlayersInDimension(Packet arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "sendPacketToAllPlayersInDimension", "(Lnet.minecraft.network.Packet;I)V", arg0, arg1)); }

    void serverUpdateMountedMovingPlayer(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "serverUpdateMountedMovingPlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void sendMessageToAllTeamMembers(EntityPlayer arg0, IChatComponent arg1) { (*javaClass->invokeMethod<void>(this->object, "sendMessageToAllTeamMembers", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.IChatComponent;)V", arg0, arg1)); }

    void sendMessageToTeamOrEvryPlayer(EntityPlayer arg0, IChatComponent arg1) { (*javaClass->invokeMethod<void>(this->object, "sendMessageToTeamOrEvryPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.util.IChatComponent;)V", arg0, arg1)); }

    void initializeConnectionToPlayer(NetworkManager arg0, EntityPlayerMP arg1) { (*javaClass->invokeMethod<void>(this->object, "initializeConnectionToPlayer", "(Lnet.minecraft.network.NetworkManager;Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0, arg1)); }

    void setPlayerGameTypeBasedOnOther(EntityPlayerMP arg0, EntityPlayerMP arg1, World arg2) { (*javaClass->invokeMethod<void>(this->object, "setPlayerGameTypeBasedOnOther", "(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.World;)V", arg0, arg1, arg2)); }

    void updateTimeAndWeatherForPlayer(EntityPlayerMP arg0, WorldServer arg1) { (*javaClass->invokeMethod<void>(this->object, "updateTimeAndWeatherForPlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.WorldServer;)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.scoreboard.ServerScoreboard
 * Package name: net.minecraft.scoreboard
 */
class ServerScoreboard : public Scoreboard {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ServerScoreboard";
public:
    STATICINITIALIZE;

    ServerScoreboard(jobject object) : JavaObject(object) {}

    void setObjectiveInDisplaySlot(int arg0, ScoreObjective arg1) { (*javaClass->invokeMethod<void>(this->object, "setObjectiveInDisplaySlot", "(ILnet.minecraft.scoreboard.ScoreObjective;)V", arg0, arg1)); }

    bool addPlayerToTeam(String arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addPlayerToTeam", "(Ljava.lang.String;Ljava.lang.String;)Z", arg0, arg1)); }

    void removePlayerFromTeam(String arg0, ScorePlayerTeam arg1) { (*javaClass->invokeMethod<void>(this->object, "removePlayerFromTeam", "(Ljava.lang.String;Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0, arg1)); }

    void func_96547_a(ScoreboardSaveData arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96547_a", "(Lnet.minecraft.scoreboard.ScoreboardSaveData;)V", arg0)); }

    void func_96551_b() { (*javaClass->invokeMethod<void>(this->object, "func_96551_b", "()V", )); }

    int func_96552_h(ScoreObjective arg0) { return int(*javaClass->invokeMethod<int>(this->object, "func_96552_h", "(Lnet.minecraft.scoreboard.ScoreObjective;)I", arg0)); }

    void getPlayerIterator(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "getPlayerIterator", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    void func_96549_e(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96549_e", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    List func_96550_d(ScoreObjective arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "func_96550_d", "(Lnet.minecraft.scoreboard.ScoreObjective;)Ljava.util.List;", arg0)); }

    List func_96548_f(ScoreObjective arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "func_96548_f", "(Lnet.minecraft.scoreboard.ScoreObjective;)Ljava.util.List;", arg0)); }

    void onScoreObjectiveAdded(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "onScoreObjectiveAdded", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    void func_96516_a(String arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96516_a", "(Ljava.lang.String;)V", arg0)); }

    void func_178820_a(String arg0, ScoreObjective arg1) { (*javaClass->invokeMethod<void>(this->object, "func_178820_a", "(Ljava.lang.String;Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0, arg1)); }

    void func_96533_c(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96533_c", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    void broadcastTeamCreated(ScorePlayerTeam arg0) { (*javaClass->invokeMethod<void>(this->object, "broadcastTeamCreated", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0)); }

    void func_96513_c(ScorePlayerTeam arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96513_c", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0)); }

    void func_96532_b(ScoreObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96532_b", "(Lnet.minecraft.scoreboard.ScoreObjective;)V", arg0)); }

    void func_96536_a(Score arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96536_a", "(Lnet.minecraft.scoreboard.Score;)V", arg0)); }

    void sendTeamUpdate(ScorePlayerTeam arg0) { (*javaClass->invokeMethod<void>(this->object, "sendTeamUpdate", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.scoreboard.ScoreboardSaveData
 * Package name: net.minecraft.scoreboard
 */
class ScoreboardSaveData : public WorldSavedData {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ScoreboardSaveData";
public:
    STATICINITIALIZE;

    ScoreboardSaveData(jobject object) : JavaObject(object) {}

    void readObjectives(NBTTagList arg0) { (*javaClass->invokeMethod<void>(this->object, "readObjectives", "(Lnet.minecraft.nbt.NBTTagList;)V", arg0)); }

    void readDisplayConfig(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readDisplayConfig", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void func_96502_a(ScorePlayerTeam arg0, NBTTagList arg1) { (*javaClass->invokeMethod<void>(this->object, "func_96502_a", "(Lnet.minecraft.scoreboard.ScorePlayerTeam;Lnet.minecraft.nbt.NBTTagList;)V", arg0, arg1)); }

    NBTTagList objectivesToNbt() { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "objectivesToNbt", "()Lnet.minecraft.nbt.NBTTagList;", )); }

    NBTTagList scoresToNbt() { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "scoresToNbt", "()Lnet.minecraft.nbt.NBTTagList;", )); }

    NBTTagList func_96496_a() { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "func_96496_a", "()Lnet.minecraft.nbt.NBTTagList;", )); }

    void func_96497_d(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "func_96497_d", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void setScoreboard(Scoreboard arg0) { (*javaClass->invokeMethod<void>(this->object, "setScoreboard", "(Lnet.minecraft.scoreboard.Scoreboard;)V", arg0)); }

    void readScores(NBTTagList arg0) { (*javaClass->invokeMethod<void>(this->object, "readScores", "(Lnet.minecraft.nbt.NBTTagList;)V", arg0)); }

    void readTeams(NBTTagList arg0) { (*javaClass->invokeMethod<void>(this->object, "readTeams", "(Lnet.minecraft.nbt.NBTTagList;)V", arg0)); }

    void writeToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

};


/**
 * Classpath: com.google.gson.JsonElement
 * Package name: com.google.gson
 */
class JsonElement : public Object {
protected:
    const inline static char *className = "com.google.gson.JsonElement";
public:
    STATICINITIALIZE;

    JsonElement(jobject object) : JavaObject(object) {}

    String getAsString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAsString", "()Ljava.lang.String;", )); }

    bool isJsonObject() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isJsonObject", "()Z", )); }

    JsonObject getAsJsonObject() { return JsonObject(*javaClass->invokeMethod<jobject>(this->object, "getAsJsonObject", "()Lcom.google.gson.JsonObject;", )); }

    bool isJsonPrimitive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isJsonPrimitive", "()Z", )); }

    JsonPrimitive getAsJsonPrimitive() { return JsonPrimitive(*javaClass->invokeMethod<jobject>(this->object, "getAsJsonPrimitive", "()Lcom.google.gson.JsonPrimitive;", )); }

    bool getAsBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAsBoolean", "()Z", )); }

    JsonArray getAsJsonArray() { return JsonArray(*javaClass->invokeMethod<jobject>(this->object, "getAsJsonArray", "()Lcom.google.gson.JsonArray;", )); }

    bool isJsonArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isJsonArray", "()Z", )); }

    JsonNull getAsJsonNull() { return JsonNull(*javaClass->invokeMethod<jobject>(this->object, "getAsJsonNull", "()Lcom.google.gson.JsonNull;", )); }

    Boolean getAsBooleanWrapper() { return Boolean(*javaClass->invokeMethod<jobject>(this->object, "getAsBooleanWrapper", "()Ljava.lang.Boolean;", )); }

    Number getAsNumber() { return Number(*javaClass->invokeMethod<jobject>(this->object, "getAsNumber", "()Ljava.lang.Number;", )); }

    char getAsCharacter() { return char(*javaClass->invokeMethod<char>(this->object, "getAsCharacter", "()C", )); }

    BigDecimal getAsBigDecimal() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "getAsBigDecimal", "()Ljava.math.BigDecimal;", )); }

    BigInteger getAsBigInteger() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "getAsBigInteger", "()Ljava.math.BigInteger;", )); }

    JsonElement deepCopy() { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonElement;", )); }

    bool isJsonNull() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isJsonNull", "()Z", )); }

    float getAsFloat() { return float(*javaClass->invokeMethod<float>(this->object, "getAsFloat", "()F", )); }

    byte getAsByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "getAsByte", "()B", )); }

    short getAsShort() { return short(*javaClass->invokeMethod<short>(this->object, "getAsShort", "()S", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    double getAsDouble() { return double(*javaClass->invokeMethod<double>(this->object, "getAsDouble", "()D", )); }

    int getAsInt() { return int(*javaClass->invokeMethod<int>(this->object, "getAsInt", "()I", )); }

    long getAsLong() { return long(*javaClass->invokeMethod<long>(this->object, "getAsLong", "()J", )); }

};


/**
 * Classpath: com.google.gson.JsonArray
 * Package name: com.google.gson
 */
class JsonArray : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonArray";
public:
    STATICINITIALIZE;

    JsonArray(jobject object) : JavaObject(object) {}

    String getAsString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAsString", "()Ljava.lang.String;", )); }

    bool getAsBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAsBoolean", "()Z", )); }

    Number getAsNumber() { return Number(*javaClass->invokeMethod<jobject>(this->object, "getAsNumber", "()Ljava.lang.Number;", )); }

    char getAsCharacter() { return char(*javaClass->invokeMethod<char>(this->object, "getAsCharacter", "()C", )); }

    BigDecimal getAsBigDecimal() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "getAsBigDecimal", "()Ljava.math.BigDecimal;", )); }

    BigInteger getAsBigInteger() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "getAsBigInteger", "()Ljava.math.BigInteger;", )); }

    JsonElement deepCopy() { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonElement;", )); }

    JsonArray deepCopy() { return JsonArray(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonArray;", )); }

    float getAsFloat() { return float(*javaClass->invokeMethod<float>(this->object, "getAsFloat", "()F", )); }

    byte getAsByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "getAsByte", "()B", )); }

    short getAsShort() { return short(*javaClass->invokeMethod<short>(this->object, "getAsShort", "()S", )); }

    void add(JsonElement arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Lcom.google.gson.JsonElement;)V", arg0)); }

    JsonElement get(int arg0) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Lcom.google.gson.JsonElement;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    void addAll(JsonArray arg0) { (*javaClass->invokeMethod<void>(this->object, "addAll", "(Lcom.google.gson.JsonArray;)V", arg0)); }

    double getAsDouble() { return double(*javaClass->invokeMethod<double>(this->object, "getAsDouble", "()D", )); }

    int getAsInt() { return int(*javaClass->invokeMethod<int>(this->object, "getAsInt", "()I", )); }

    long getAsLong() { return long(*javaClass->invokeMethod<long>(this->object, "getAsLong", "()J", )); }

};


/**
 * Classpath: com.google.gson.JsonNull
 * Package name: com.google.gson
 */
class JsonNull : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonNull";
public:
    STATICINITIALIZE;

    JsonNull(jobject object) : JavaObject(object) {}

    JsonElement deepCopy() { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonElement;", )); }

    JsonNull deepCopy() { return JsonNull(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonNull;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: net.minecraft.server.management.UserListEntry
 * Package name: net.minecraft.server.management
 */
class UserListEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListEntry";
public:
    STATICINITIALIZE;

    UserListEntry(jobject object) : JavaObject(object) {}

    bool hasBanExpired() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasBanExpired", "()Z", )); }

    void onSerialization(JsonObject arg0) { (*javaClass->invokeMethod<void>(this->object, "onSerialization", "(Lcom.google.gson.JsonObject;)V", arg0)); }

    Object getValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: net.minecraft.server.management.UserList
 * Package name: net.minecraft.server.management
 */
class UserList : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.UserList";
public:
    STATICINITIALIZE;

    UserList(jobject object) : JavaObject(object) {}

    UserListEntry createEntry(JsonObject arg0) { return UserListEntry(*javaClass->invokeMethod<jobject>(this->object, "createEntry", "(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;", arg0)); }

    String getObjectKey(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectKey", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    bool isLanServer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLanServer", "()Z", )); }

    void writeChanges() { (*javaClass->invokeMethod<void>(this->object, "writeChanges", "()V", )); }

    void removeExpired() { (*javaClass->invokeMethod<void>(this->object, "removeExpired", "()V", )); }

    void setLanServer(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLanServer", "(Z)V", arg0)); }

    bool hasEntry(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasEntry", "(Ljava.lang.Object;)Z", arg0)); }

    Map getValues() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getValues", "()Ljava.util.Map;", )); }

    void addEntry(UserListEntry arg0) { (*javaClass->invokeMethod<void>(this->object, "addEntry", "(Lnet.minecraft.server.management.UserListEntry;)V", arg0)); }

    UserListEntry getEntry(Object arg0) { return UserListEntry(*javaClass->invokeMethod<jobject>(this->object, "getEntry", "(Ljava.lang.Object;)Lnet.minecraft.server.management.UserListEntry;", arg0)); }

    void removeEntry(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "removeEntry", "(Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.server.management.BanList
 * Package name: net.minecraft.server.management
 */
class BanList : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.BanList";
public:
    STATICINITIALIZE;

    BanList(jobject object) : JavaObject(object) {}

    UserListEntry createEntry(JsonObject arg0) { return UserListEntry(*javaClass->invokeMethod<jobject>(this->object, "createEntry", "(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;", arg0)); }

    IPBanEntry getBanEntry(SocketAddress arg0) { return IPBanEntry(*javaClass->invokeMethod<jobject>(this->object, "getBanEntry", "(Ljava.net.SocketAddress;)Lnet.minecraft.server.management.IPBanEntry;", arg0)); }

    String addressToString(SocketAddress arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "addressToString", "(Ljava.net.SocketAddress;)Ljava.lang.String;", arg0)); }

    bool isBanned(SocketAddress arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBanned", "(Ljava.net.SocketAddress;)Z", arg0)); }

};


/**
 * Classpath: net.minecraft.server.management.BanEntry
 * Package name: net.minecraft.server.management
 */
class BanEntry : public UserListEntry {
protected:
    const inline static char *className = "net.minecraft.server.management.BanEntry";
public:
    STATICINITIALIZE;

    BanEntry(jobject object) : JavaObject(object) {}

    bool hasBanExpired() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasBanExpired", "()Z", )); }

    void onSerialization(JsonObject arg0) { (*javaClass->invokeMethod<void>(this->object, "onSerialization", "(Lcom.google.gson.JsonObject;)V", arg0)); }

    String getBanReason() { return String(*javaClass->invokeMethod<jobject>(this->object, "getBanReason", "()Ljava.lang.String;", )); }

    Date getBanEndDate() { return Date(*javaClass->invokeMethod<jobject>(this->object, "getBanEndDate", "()Ljava.util.Date;", )); }

};


/**
 * Classpath: net.minecraft.server.management.UserListWhitelist
 * Package name: net.minecraft.server.management
 */
class UserListWhitelist : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListWhitelist";
public:
    STATICINITIALIZE;

    UserListWhitelist(jobject object) : JavaObject(object) {}

    UserListEntry createEntry(JsonObject arg0) { return UserListEntry(*javaClass->invokeMethod<jobject>(this->object, "createEntry", "(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;", arg0)); }

    String getObjectKey(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectKey", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    String getObjectKey(GameProfile arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectKey", "(Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;", arg0)); }

    GameProfile func_152706_a(String arg0) { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "func_152706_a", "(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;", arg0)); }

};


/**
 * Classpath: net.minecraft.stats.StatFileWriter
 * Package name: net.minecraft.stats
 */
class StatFileWriter : public Object {
protected:
    const inline static char *className = "net.minecraft.stats.StatFileWriter";
public:
    STATICINITIALIZE;

    StatFileWriter(jobject object) : JavaObject(object) {}

    bool hasAchievementUnlocked(Achievement arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasAchievementUnlocked", "(Lnet.minecraft.stats.Achievement;)Z", arg0)); }

    IJsonSerializable func_150870_b(StatBase arg0) { return IJsonSerializable(*javaClass->invokeMethod<jobject>(this->object, "func_150870_b", "(Lnet.minecraft.stats.StatBase;)Lnet.minecraft.util.IJsonSerializable;", arg0)); }

    IJsonSerializable func_150872_a(StatBase arg0, IJsonSerializable arg1) { return IJsonSerializable(*javaClass->invokeMethod<jobject>(this->object, "func_150872_a", "(Lnet.minecraft.stats.StatBase;Lnet.minecraft.util.IJsonSerializable;)Lnet.minecraft.util.IJsonSerializable;", arg0, arg1)); }

    bool canUnlockAchievement(Achievement arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canUnlockAchievement", "(Lnet.minecraft.stats.Achievement;)Z", arg0)); }

    void increaseStat(EntityPlayer arg0, StatBase arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "increaseStat", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.stats.StatBase;I)V", arg0, arg1, arg2)); }

    void unlockAchievement(EntityPlayer arg0, StatBase arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "unlockAchievement", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.stats.StatBase;I)V", arg0, arg1, arg2)); }

    int func_150874_c(Achievement arg0) { return int(*javaClass->invokeMethod<int>(this->object, "func_150874_c", "(Lnet.minecraft.stats.Achievement;)I", arg0)); }

    int readStat(StatBase arg0) { return int(*javaClass->invokeMethod<int>(this->object, "readStat", "(Lnet.minecraft.stats.StatBase;)I", arg0)); }

};


/**
 * Classpath: net.minecraft.stats.Achievement
 * Package name: net.minecraft.stats
 */
class Achievement : public StatBase {
protected:
    const inline static char *className = "net.minecraft.stats.Achievement";
public:
    STATICINITIALIZE;

    Achievement(jobject object) : JavaObject(object) {}

    IChatComponent getStatName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getStatName", "()Lnet.minecraft.util.IChatComponent;", )); }

    bool isAchievement() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAchievement", "()Z", )); }

    Achievement initIndependentStat() { return Achievement(*javaClass->invokeMethod<jobject>(this->object, "initIndependentStat", "()Lnet.minecraft.stats.Achievement;", )); }

    StatBase initIndependentStat() { return StatBase(*javaClass->invokeMethod<jobject>(this->object, "initIndependentStat", "()Lnet.minecraft.stats.StatBase;", )); }

    Achievement registerStat() { return Achievement(*javaClass->invokeMethod<jobject>(this->object, "registerStat", "()Lnet.minecraft.stats.Achievement;", )); }

    StatBase registerStat() { return StatBase(*javaClass->invokeMethod<jobject>(this->object, "registerStat", "()Lnet.minecraft.stats.StatBase;", )); }

    StatBase func_150953_b(Class arg0) { return StatBase(*javaClass->invokeMethod<jobject>(this->object, "func_150953_b", "(Ljava.lang.Class;)Lnet.minecraft.stats.StatBase;", arg0)); }

    Achievement func_150953_b(Class arg0) { return Achievement(*javaClass->invokeMethod<jobject>(this->object, "func_150953_b", "(Ljava.lang.Class;)Lnet.minecraft.stats.Achievement;", arg0)); }

    Achievement setStatStringFormatter(IStatStringFormat arg0) { return Achievement(*javaClass->invokeMethod<jobject>(this->object, "setStatStringFormatter", "(Lnet.minecraft.stats.IStatStringFormat;)Lnet.minecraft.stats.Achievement;", arg0)); }

    Achievement setSpecial() { return Achievement(*javaClass->invokeMethod<jobject>(this->object, "setSpecial", "()Lnet.minecraft.stats.Achievement;", )); }

    bool getSpecial() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getSpecial", "()Z", )); }

    String getDescription() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDescription", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.stats.IStatStringFormat
 * Package name: net.minecraft.stats
 */
class IStatStringFormat : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.stats.IStatStringFormat";
public:
    STATICINITIALIZE;

    IStatStringFormat(jobject object) : JavaObject(object) {}

    String formatString(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "formatString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: net.minecraft.util.IJsonSerializable
 * Package name: net.minecraft.util
 */
class IJsonSerializable : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.util.IJsonSerializable";
public:
    STATICINITIALIZE;

    IJsonSerializable(jobject object) : JavaObject(object) {}

    JsonElement getSerializableElement() { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "getSerializableElement", "()Lcom.google.gson.JsonElement;", )); }

    void fromJson(JsonElement arg0) { (*javaClass->invokeMethod<void>(this->object, "fromJson", "(Lcom.google.gson.JsonElement;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.server.management.UserListOps
 * Package name: net.minecraft.server.management
 */
class UserListOps : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListOps";
public:
    STATICINITIALIZE;

    UserListOps(jobject object) : JavaObject(object) {}

    UserListEntry createEntry(JsonObject arg0) { return UserListEntry(*javaClass->invokeMethod<jobject>(this->object, "createEntry", "(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;", arg0)); }

    String getObjectKey(GameProfile arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectKey", "(Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;", arg0)); }

    String getObjectKey(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectKey", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    bool func_183026_b(GameProfile arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_183026_b", "(Lcom.mojang.authlib.GameProfile;)Z", arg0)); }

    GameProfile getGameProfileFromName(String arg0) { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getGameProfileFromName", "(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;", arg0)); }

};


/**
 * Classpath: [Lnet.minecraft.world.WorldServer;
 */
class WorldServer_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.world.WorldServer;";
public:
    STATICINITIALIZE;

    WorldServer_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: io.netty.channel.ChannelHandlerContext
 * Package name: io.netty.channel
 */
class ChannelHandlerContext : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelHandlerContext";
public:
    STATICINITIALIZE;

    ChannelHandlerContext(jobject object) : JavaObject(object) {}

    ChannelFuture writeAndFlush(Object arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "writeAndFlush", "(Ljava.lang.Object;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture writeAndFlush(Object arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "writeAndFlush", "(Ljava.lang.Object;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelHandlerContext fireChannelRead(Object arg0) { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireChannelRead", "(Ljava.lang.Object;)Lio.netty.channel.ChannelHandlerContext;", arg0)); }

    ChannelHandlerContext fireChannelRegistered() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireChannelRegistered", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelHandlerContext fireChannelUnregistered() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireChannelUnregistered", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelHandlerContext fireChannelActive() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireChannelActive", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelHandlerContext fireChannelInactive() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireChannelInactive", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelHandlerContext fireChannelReadComplete() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireChannelReadComplete", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelHandlerContext fireUserEventTriggered(Object arg0) { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireUserEventTriggered", "(Ljava.lang.Object;)Lio.netty.channel.ChannelHandlerContext;", arg0)); }

    ChannelHandlerContext fireExceptionCaught(Throwable arg0) { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireExceptionCaught", "(Ljava.lang.Throwable;)Lio.netty.channel.ChannelHandlerContext;", arg0)); }

    ChannelProgressivePromise newProgressivePromise() { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "newProgressivePromise", "()Lio.netty.channel.ChannelProgressivePromise;", )); }

    ChannelFuture newSucceededFuture() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "newSucceededFuture", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture newFailedFuture(Throwable arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "newFailedFuture", "(Ljava.lang.Throwable;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelPromise voidPromise() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "voidPromise", "()Lio.netty.channel.ChannelPromise;", )); }

    ByteBufAllocator alloc() { return ByteBufAllocator(*javaClass->invokeMethod<jobject>(this->object, "alloc", "()Lio.netty.buffer.ByteBufAllocator;", )); }

    ChannelPipeline pipeline() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "pipeline", "()Lio.netty.channel.ChannelPipeline;", )); }

    bool isRemoved() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRemoved", "()Z", )); }

    ChannelFuture disconnect() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "disconnect", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture disconnect(ChannelPromise arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "disconnect", "(Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture deregister(ChannelPromise arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "deregister", "(Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture deregister() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "deregister", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelPromise newPromise() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "newPromise", "()Lio.netty.channel.ChannelPromise;", )); }

    ChannelHandlerContext fireChannelWritabilityChanged() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "fireChannelWritabilityChanged", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    ChannelHandlerContext flush() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "flush", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelFuture write(Object arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "write", "(Ljava.lang.Object;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture write(Object arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "write", "(Ljava.lang.Object;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelHandlerContext read() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "read", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelFuture connect(SocketAddress arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture connect(SocketAddress arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture connect(SocketAddress arg0, SocketAddress arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;Ljava.net.SocketAddress;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture connect(SocketAddress arg0, SocketAddress arg1, ChannelPromise arg2) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1, arg2)); }

    ChannelHandler handler() { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "handler", "()Lio.netty.channel.ChannelHandler;", )); }

    ChannelFuture close() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "close", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture close(ChannelPromise arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "close", "(Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture bind(SocketAddress arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "bind", "(Ljava.net.SocketAddress;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture bind(SocketAddress arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "bind", "(Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    Channel channel() { return Channel(*javaClass->invokeMethod<jobject>(this->object, "channel", "()Lio.netty.channel.Channel;", )); }

    EventExecutor executor() { return EventExecutor(*javaClass->invokeMethod<jobject>(this->object, "executor", "()Lio.netty.util.concurrent.EventExecutor;", )); }

};


/**
 * Classpath: io.netty.channel.ChannelPromise
 * Package name: io.netty.channel
 */
class ChannelPromise : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelPromise";
public:
    STATICINITIALIZE;

    ChannelPromise(jobject object) : JavaObject(object) {}

    ChannelPromise syncUninterruptibly() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "syncUninterruptibly", "()Lio.netty.channel.ChannelPromise;", )); }

    ChannelPromise addListeners(GenericFutureListener_interface arg0) { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "addListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelPromise;", arg0)); }

    ChannelPromise awaitUninterruptibly() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "awaitUninterruptibly", "()Lio.netty.channel.ChannelPromise;", )); }

    ChannelPromise removeListeners(GenericFutureListener_interface arg0) { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "removeListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelPromise;", arg0)); }

    ChannelPromise removeListener(GenericFutureListener arg0) { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "removeListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelPromise;", arg0)); }

    ChannelPromise addListener(GenericFutureListener arg0) { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "addListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelPromise;", arg0)); }

    ChannelPromise setSuccess() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "setSuccess", "()Lio.netty.channel.ChannelPromise;", )); }

    ChannelPromise setSuccess(Void arg0) { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "setSuccess", "(Ljava.lang.Void;)Lio.netty.channel.ChannelPromise;", arg0)); }

    bool trySuccess() { return bool(*javaClass->invokeMethod<boolean>(this->object, "trySuccess", "()Z", )); }

    ChannelPromise setFailure(Throwable arg0) { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "setFailure", "(Ljava.lang.Throwable;)Lio.netty.channel.ChannelPromise;", arg0)); }

    ChannelPromise await() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "await", "()Lio.netty.channel.ChannelPromise;", )); }

    ChannelPromise sync() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "sync", "()Lio.netty.channel.ChannelPromise;", )); }

    Channel channel() { return Channel(*javaClass->invokeMethod<jobject>(this->object, "channel", "()Lio.netty.channel.Channel;", )); }

};


/**
 * Classpath: [Lio.netty.util.concurrent.GenericFutureListener;
 */
class GenericFutureListener_interface : public Object {
protected:
    const inline static char *className = "[Lio.netty.util.concurrent.GenericFutureListener;";
public:
    STATICINITIALIZE;

    GenericFutureListener_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: io.netty.util.concurrent.GenericFutureListener
 * Package name: io.netty.util.concurrent
 */
class GenericFutureListener : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.concurrent.GenericFutureListener";
public:
    STATICINITIALIZE;

    GenericFutureListener(jobject object) : JavaObject(object) {}

    void operationComplete(Future arg0) { (*javaClass->invokeMethod<void>(this->object, "operationComplete", "(Lio.netty.util.concurrent.Future;)V", arg0)); }

};


/**
 * Classpath: io.netty.channel.ChannelFuture
 * Package name: io.netty.channel
 */
class ChannelFuture : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelFuture";
public:
    STATICINITIALIZE;

    ChannelFuture(jobject object) : JavaObject(object) {}

    ChannelFuture syncUninterruptibly() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "syncUninterruptibly", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture addListeners(GenericFutureListener_interface arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "addListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture awaitUninterruptibly() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "awaitUninterruptibly", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture removeListeners(GenericFutureListener_interface arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "removeListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture removeListener(GenericFutureListener arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "removeListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture addListener(GenericFutureListener arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "addListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture await() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "await", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture sync() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "sync", "()Lio.netty.channel.ChannelFuture;", )); }

    Channel channel() { return Channel(*javaClass->invokeMethod<jobject>(this->object, "channel", "()Lio.netty.channel.Channel;", )); }

};


/**
 * Classpath: io.netty.channel.ChannelProgressivePromise
 * Package name: io.netty.channel
 */
class ChannelProgressivePromise : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelProgressivePromise";
public:
    STATICINITIALIZE;

    ChannelProgressivePromise(jobject object) : JavaObject(object) {}

    ChannelProgressivePromise syncUninterruptibly() { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "syncUninterruptibly", "()Lio.netty.channel.ChannelProgressivePromise;", )); }

    ChannelProgressivePromise addListeners(GenericFutureListener_interface arg0) { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "addListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelProgressivePromise;", arg0)); }

    ChannelProgressivePromise awaitUninterruptibly() { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "awaitUninterruptibly", "()Lio.netty.channel.ChannelProgressivePromise;", )); }

    ChannelProgressivePromise removeListeners(GenericFutureListener_interface arg0) { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "removeListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelProgressivePromise;", arg0)); }

    ChannelProgressivePromise setProgress(long arg0, long arg1) { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "setProgress", "(JJ)Lio.netty.channel.ChannelProgressivePromise;", arg0, arg1)); }

    ChannelProgressivePromise removeListener(GenericFutureListener arg0) { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "removeListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelProgressivePromise;", arg0)); }

    ChannelProgressivePromise addListener(GenericFutureListener arg0) { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "addListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.channel.ChannelProgressivePromise;", arg0)); }

    ChannelProgressivePromise setSuccess() { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "setSuccess", "()Lio.netty.channel.ChannelProgressivePromise;", )); }

    ChannelProgressivePromise setSuccess(Void arg0) { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "setSuccess", "(Ljava.lang.Void;)Lio.netty.channel.ChannelProgressivePromise;", arg0)); }

    ChannelProgressivePromise setFailure(Throwable arg0) { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "setFailure", "(Ljava.lang.Throwable;)Lio.netty.channel.ChannelProgressivePromise;", arg0)); }

    ChannelProgressivePromise await() { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "await", "()Lio.netty.channel.ChannelProgressivePromise;", )); }

    ChannelProgressivePromise sync() { return ChannelProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "sync", "()Lio.netty.channel.ChannelProgressivePromise;", )); }

};


/**
 * Classpath: io.netty.channel.EventLoop
 * Package name: io.netty.channel
 */
class EventLoop : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.EventLoop";
public:
    STATICINITIALIZE;

    EventLoop(jobject object) : JavaObject(object) {}

    EventLoopGroup parent() { return EventLoopGroup(*javaClass->invokeMethod<jobject>(this->object, "parent", "()Lio.netty.channel.EventLoopGroup;", )); }

};


/**
 * Classpath: io.netty.channel.EventLoopGroup
 * Package name: io.netty.channel
 */
class EventLoopGroup : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.EventLoopGroup";
public:
    STATICINITIALIZE;

    EventLoopGroup(jobject object) : JavaObject(object) {}

    EventLoop next() { return EventLoop(*javaClass->invokeMethod<jobject>(this->object, "next", "()Lio.netty.channel.EventLoop;", )); }

    ChannelFuture register(Channel arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "register", "(Lio.netty.channel.Channel;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture register(Channel arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "register", "(Lio.netty.channel.Channel;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

};


/**
 * Classpath: io.netty.channel.ChannelPipeline
 * Package name: io.netty.channel
 */
class ChannelPipeline : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelPipeline";
public:
    STATICINITIALIZE;

    ChannelPipeline(jobject object) : JavaObject(object) {}

    ChannelFuture writeAndFlush(Object arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "writeAndFlush", "(Ljava.lang.Object;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture writeAndFlush(Object arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "writeAndFlush", "(Ljava.lang.Object;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelPipeline fireChannelRead(Object arg0) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireChannelRead", "(Ljava.lang.Object;)Lio.netty.channel.ChannelPipeline;", arg0)); }

    ChannelPipeline fireChannelRegistered() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireChannelRegistered", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelPipeline fireChannelUnregistered() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireChannelUnregistered", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelPipeline fireChannelActive() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireChannelActive", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelPipeline fireChannelInactive() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireChannelInactive", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelPipeline fireChannelReadComplete() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireChannelReadComplete", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelPipeline fireUserEventTriggered(Object arg0) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireUserEventTriggered", "(Ljava.lang.Object;)Lio.netty.channel.ChannelPipeline;", arg0)); }

    ChannelPipeline fireExceptionCaught(Throwable arg0) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireExceptionCaught", "(Ljava.lang.Throwable;)Lio.netty.channel.ChannelPipeline;", arg0)); }

    ChannelHandlerContext firstContext() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "firstContext", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelHandlerContext lastContext() { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "lastContext", "()Lio.netty.channel.ChannelHandlerContext;", )); }

    ChannelPipeline addBefore(EventExecutorGroup arg0, String arg1, String arg2, ChannelHandler arg3) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addBefore", "(Lio.netty.util.concurrent.EventExecutorGroup;Ljava.lang.String;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1, arg2, arg3)); }

    ChannelPipeline addBefore(String arg0, String arg1, ChannelHandler arg2) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addBefore", "(Ljava.lang.String;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1, arg2)); }

    ChannelFuture disconnect(ChannelPromise arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "disconnect", "(Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture disconnect() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "disconnect", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture deregister(ChannelPromise arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "deregister", "(Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture deregister() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "deregister", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelPipeline addAfter(String arg0, String arg1, ChannelHandler arg2) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addAfter", "(Ljava.lang.String;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1, arg2)); }

    ChannelPipeline addAfter(EventExecutorGroup arg0, String arg1, String arg2, ChannelHandler arg3) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addAfter", "(Lio.netty.util.concurrent.EventExecutorGroup;Ljava.lang.String;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1, arg2, arg3)); }

    ChannelPipeline fireChannelWritabilityChanged() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "fireChannelWritabilityChanged", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelPipeline remove(ChannelHandler arg0) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0)); }

    ChannelHandler remove(String arg0) { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.String;)Lio.netty.channel.ChannelHandler;", arg0)); }

    ChannelHandler remove(Class arg0) { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Class;)Lio.netty.channel.ChannelHandler;", arg0)); }

    ChannelHandler get(Class arg0) { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Class;)Lio.netty.channel.ChannelHandler;", arg0)); }

    ChannelHandler get(String arg0) { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.String;)Lio.netty.channel.ChannelHandler;", arg0)); }

    ChannelHandlerContext context(Class arg0) { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "context", "(Ljava.lang.Class;)Lio.netty.channel.ChannelHandlerContext;", arg0)); }

    ChannelHandlerContext context(String arg0) { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "context", "(Ljava.lang.String;)Lio.netty.channel.ChannelHandlerContext;", arg0)); }

    ChannelHandlerContext context(ChannelHandler arg0) { return ChannelHandlerContext(*javaClass->invokeMethod<jobject>(this->object, "context", "(Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelHandlerContext;", arg0)); }

    ChannelPipeline flush() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "flush", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelPipeline replace(ChannelHandler arg0, String arg1, ChannelHandler arg2) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Lio.netty.channel.ChannelHandler;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1, arg2)); }

    ChannelHandler replace(String arg0, String arg1, ChannelHandler arg2) { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.String;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelHandler;", arg0, arg1, arg2)); }

    ChannelHandler replace(Class arg0, String arg1, ChannelHandler arg2) { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.Class;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelHandler;", arg0, arg1, arg2)); }

    ChannelHandler last() { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "last", "()Lio.netty.channel.ChannelHandler;", )); }

    Map toMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "toMap", "()Ljava.util.Map;", )); }

    ChannelHandler first() { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "first", "()Lio.netty.channel.ChannelHandler;", )); }

    ChannelFuture write(Object arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "write", "(Ljava.lang.Object;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture write(Object arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "write", "(Ljava.lang.Object;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelPipeline read() { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "read", "()Lio.netty.channel.ChannelPipeline;", )); }

    ChannelFuture connect(SocketAddress arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;)Lio.netty.channel.ChannelFuture;", arg0)); }

    ChannelFuture connect(SocketAddress arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture connect(SocketAddress arg0, SocketAddress arg1, ChannelPromise arg2) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1, arg2)); }

    ChannelFuture connect(SocketAddress arg0, SocketAddress arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "connect", "(Ljava.net.SocketAddress;Ljava.net.SocketAddress;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture close() { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "close", "()Lio.netty.channel.ChannelFuture;", )); }

    ChannelFuture close(ChannelPromise arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "close", "(Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0)); }

    List names() { return List(*javaClass->invokeMethod<jobject>(this->object, "names", "()Ljava.util.List;", )); }

    ChannelFuture bind(SocketAddress arg0, ChannelPromise arg1) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "bind", "(Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelFuture;", arg0, arg1)); }

    ChannelFuture bind(SocketAddress arg0) { return ChannelFuture(*javaClass->invokeMethod<jobject>(this->object, "bind", "(Ljava.net.SocketAddress;)Lio.netty.channel.ChannelFuture;", arg0)); }

    Channel channel() { return Channel(*javaClass->invokeMethod<jobject>(this->object, "channel", "()Lio.netty.channel.Channel;", )); }

    ChannelPipeline addFirst(EventExecutorGroup arg0, ChannelHandler_interface arg1) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addFirst", "(Lio.netty.util.concurrent.EventExecutorGroup;[Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1)); }

    ChannelPipeline addFirst(ChannelHandler_interface arg0) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addFirst", "([Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0)); }

    ChannelPipeline addFirst(EventExecutorGroup arg0, String arg1, ChannelHandler arg2) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addFirst", "(Lio.netty.util.concurrent.EventExecutorGroup;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1, arg2)); }

    ChannelPipeline addFirst(String arg0, ChannelHandler arg1) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addFirst", "(Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1)); }

    ChannelPipeline addLast(String arg0, ChannelHandler arg1) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addLast", "(Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1)); }

    ChannelPipeline addLast(EventExecutorGroup arg0, String arg1, ChannelHandler arg2) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addLast", "(Lio.netty.util.concurrent.EventExecutorGroup;Ljava.lang.String;Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1, arg2)); }

    ChannelPipeline addLast(EventExecutorGroup arg0, ChannelHandler_interface arg1) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addLast", "(Lio.netty.util.concurrent.EventExecutorGroup;[Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0, arg1)); }

    ChannelPipeline addLast(ChannelHandler_interface arg0) { return ChannelPipeline(*javaClass->invokeMethod<jobject>(this->object, "addLast", "([Lio.netty.channel.ChannelHandler;)Lio.netty.channel.ChannelPipeline;", arg0)); }

    ChannelHandler removeFirst() { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "removeFirst", "()Lio.netty.channel.ChannelHandler;", )); }

    ChannelHandler removeLast() { return ChannelHandler(*javaClass->invokeMethod<jobject>(this->object, "removeLast", "()Lio.netty.channel.ChannelHandler;", )); }

};


/**
 * Classpath: io.netty.util.concurrent.EventExecutorGroup
 * Package name: io.netty.util.concurrent
 */
class EventExecutorGroup : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.concurrent.EventExecutorGroup";
public:
    STATICINITIALIZE;

    EventExecutorGroup(jobject object) : JavaObject(object) {}

    bool isShuttingDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isShuttingDown", "()Z", )); }

    Future shutdownGracefully(long arg0, long arg1, TimeUnit arg2) { return Future(*javaClass->invokeMethod<jobject>(this->object, "shutdownGracefully", "(JJLjava.util.concurrent.TimeUnit;)Lio.netty.util.concurrent.Future;", arg0, arg1, arg2)); }

    Future shutdownGracefully() { return Future(*javaClass->invokeMethod<jobject>(this->object, "shutdownGracefully", "()Lio.netty.util.concurrent.Future;", )); }

    Future terminationFuture() { return Future(*javaClass->invokeMethod<jobject>(this->object, "terminationFuture", "()Lio.netty.util.concurrent.Future;", )); }

    ScheduledFuture scheduleAtFixedRate(Runnable arg0, long arg1, long arg2, TimeUnit arg3) { return ScheduledFuture(*javaClass->invokeMethod<jobject>(this->object, "scheduleAtFixedRate", "(Ljava.lang.Runnable;JJLjava.util.concurrent.TimeUnit;)Lio.netty.util.concurrent.ScheduledFuture;", arg0, arg1, arg2, arg3)); }

    ScheduledFuture scheduleWithFixedDelay(Runnable arg0, long arg1, long arg2, TimeUnit arg3) { return ScheduledFuture(*javaClass->invokeMethod<jobject>(this->object, "scheduleWithFixedDelay", "(Ljava.lang.Runnable;JJLjava.util.concurrent.TimeUnit;)Lio.netty.util.concurrent.ScheduledFuture;", arg0, arg1, arg2, arg3)); }

    Future submit(Runnable arg0, Object arg1) { return Future(*javaClass->invokeMethod<jobject>(this->object, "submit", "(Ljava.lang.Runnable;Ljava.lang.Object;)Lio.netty.util.concurrent.Future;", arg0, arg1)); }

    Future submit(Runnable arg0) { return Future(*javaClass->invokeMethod<jobject>(this->object, "submit", "(Ljava.lang.Runnable;)Lio.netty.util.concurrent.Future;", arg0)); }

    Future submit(Callable arg0) { return Future(*javaClass->invokeMethod<jobject>(this->object, "submit", "(Ljava.util.concurrent.Callable;)Lio.netty.util.concurrent.Future;", arg0)); }

    ScheduledFuture schedule(Runnable arg0, long arg1, TimeUnit arg2) { return ScheduledFuture(*javaClass->invokeMethod<jobject>(this->object, "schedule", "(Ljava.lang.Runnable;JLjava.util.concurrent.TimeUnit;)Lio.netty.util.concurrent.ScheduledFuture;", arg0, arg1, arg2)); }

    ScheduledFuture schedule(Callable arg0, long arg1, TimeUnit arg2) { return ScheduledFuture(*javaClass->invokeMethod<jobject>(this->object, "schedule", "(Ljava.util.concurrent.Callable;JLjava.util.concurrent.TimeUnit;)Lio.netty.util.concurrent.ScheduledFuture;", arg0, arg1, arg2)); }

    void shutdown() { (*javaClass->invokeMethod<void>(this->object, "shutdown", "()V", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    EventExecutor next() { return EventExecutor(*javaClass->invokeMethod<jobject>(this->object, "next", "()Lio.netty.util.concurrent.EventExecutor;", )); }

    List shutdownNow() { return List(*javaClass->invokeMethod<jobject>(this->object, "shutdownNow", "()Ljava.util.List;", )); }

};


/**
 * Classpath: io.netty.util.concurrent.ScheduledFuture
 * Package name: io.netty.util.concurrent
 */
class ScheduledFuture : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.concurrent.ScheduledFuture";
public:
    STATICINITIALIZE;

    ScheduledFuture(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: io.netty.util.concurrent.EventExecutor
 * Package name: io.netty.util.concurrent
 */
class EventExecutor : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.concurrent.EventExecutor";
public:
    STATICINITIALIZE;

    EventExecutor(jobject object) : JavaObject(object) {}

    bool inEventLoop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "inEventLoop", "()Z", )); }

    bool inEventLoop(Thread arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "inEventLoop", "(Ljava.lang.Thread;)Z", arg0)); }

    ProgressivePromise newProgressivePromise() { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "newProgressivePromise", "()Lio.netty.util.concurrent.ProgressivePromise;", )); }

    Future newSucceededFuture(Object arg0) { return Future(*javaClass->invokeMethod<jobject>(this->object, "newSucceededFuture", "(Ljava.lang.Object;)Lio.netty.util.concurrent.Future;", arg0)); }

    Future newFailedFuture(Throwable arg0) { return Future(*javaClass->invokeMethod<jobject>(this->object, "newFailedFuture", "(Ljava.lang.Throwable;)Lio.netty.util.concurrent.Future;", arg0)); }

    Promise newPromise() { return Promise(*javaClass->invokeMethod<jobject>(this->object, "newPromise", "()Lio.netty.util.concurrent.Promise;", )); }

    EventExecutorGroup parent() { return EventExecutorGroup(*javaClass->invokeMethod<jobject>(this->object, "parent", "()Lio.netty.util.concurrent.EventExecutorGroup;", )); }

    EventExecutor next() { return EventExecutor(*javaClass->invokeMethod<jobject>(this->object, "next", "()Lio.netty.util.concurrent.EventExecutor;", )); }

};


/**
 * Classpath: io.netty.util.concurrent.ProgressivePromise
 * Package name: io.netty.util.concurrent
 */
class ProgressivePromise : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.concurrent.ProgressivePromise";
public:
    STATICINITIALIZE;

    ProgressivePromise(jobject object) : JavaObject(object) {}

    ProgressivePromise syncUninterruptibly() { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "syncUninterruptibly", "()Lio.netty.util.concurrent.ProgressivePromise;", )); }

    ProgressivePromise addListeners(GenericFutureListener_interface arg0) { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "addListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.ProgressivePromise;", arg0)); }

    ProgressivePromise awaitUninterruptibly() { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "awaitUninterruptibly", "()Lio.netty.util.concurrent.ProgressivePromise;", )); }

    ProgressivePromise removeListeners(GenericFutureListener_interface arg0) { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "removeListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.ProgressivePromise;", arg0)); }

    ProgressivePromise setProgress(long arg0, long arg1) { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "setProgress", "(JJ)Lio.netty.util.concurrent.ProgressivePromise;", arg0, arg1)); }

    ProgressivePromise removeListener(GenericFutureListener arg0) { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "removeListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.ProgressivePromise;", arg0)); }

    bool tryProgress(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryProgress", "(JJ)Z", arg0, arg1)); }

    ProgressivePromise addListener(GenericFutureListener arg0) { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "addListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.ProgressivePromise;", arg0)); }

    ProgressivePromise setSuccess(Object arg0) { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "setSuccess", "(Ljava.lang.Object;)Lio.netty.util.concurrent.ProgressivePromise;", arg0)); }

    ProgressivePromise setFailure(Throwable arg0) { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "setFailure", "(Ljava.lang.Throwable;)Lio.netty.util.concurrent.ProgressivePromise;", arg0)); }

    ProgressivePromise await() { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "await", "()Lio.netty.util.concurrent.ProgressivePromise;", )); }

    ProgressivePromise sync() { return ProgressivePromise(*javaClass->invokeMethod<jobject>(this->object, "sync", "()Lio.netty.util.concurrent.ProgressivePromise;", )); }

};


/**
 * Classpath: io.netty.util.concurrent.Promise
 * Package name: io.netty.util.concurrent
 */
class Promise : public JavaObject {
protected:
    const inline static char *className = "io.netty.util.concurrent.Promise";
public:
    STATICINITIALIZE;

    Promise(jobject object) : JavaObject(object) {}

    Promise syncUninterruptibly() { return Promise(*javaClass->invokeMethod<jobject>(this->object, "syncUninterruptibly", "()Lio.netty.util.concurrent.Promise;", )); }

    Promise addListeners(GenericFutureListener_interface arg0) { return Promise(*javaClass->invokeMethod<jobject>(this->object, "addListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.Promise;", arg0)); }

    Promise awaitUninterruptibly() { return Promise(*javaClass->invokeMethod<jobject>(this->object, "awaitUninterruptibly", "()Lio.netty.util.concurrent.Promise;", )); }

    Promise removeListeners(GenericFutureListener_interface arg0) { return Promise(*javaClass->invokeMethod<jobject>(this->object, "removeListeners", "([Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.Promise;", arg0)); }

    Promise removeListener(GenericFutureListener arg0) { return Promise(*javaClass->invokeMethod<jobject>(this->object, "removeListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.Promise;", arg0)); }

    Promise addListener(GenericFutureListener arg0) { return Promise(*javaClass->invokeMethod<jobject>(this->object, "addListener", "(Lio.netty.util.concurrent.GenericFutureListener;)Lio.netty.util.concurrent.Promise;", arg0)); }

    bool setUncancellable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "setUncancellable", "()Z", )); }

    bool tryFailure(Throwable arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryFailure", "(Ljava.lang.Throwable;)Z", arg0)); }

    Promise setSuccess(Object arg0) { return Promise(*javaClass->invokeMethod<jobject>(this->object, "setSuccess", "(Ljava.lang.Object;)Lio.netty.util.concurrent.Promise;", arg0)); }

    bool trySuccess(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "trySuccess", "(Ljava.lang.Object;)Z", arg0)); }

    Promise setFailure(Throwable arg0) { return Promise(*javaClass->invokeMethod<jobject>(this->object, "setFailure", "(Ljava.lang.Throwable;)Lio.netty.util.concurrent.Promise;", arg0)); }

    Promise await() { return Promise(*javaClass->invokeMethod<jobject>(this->object, "await", "()Lio.netty.util.concurrent.Promise;", )); }

    Promise sync() { return Promise(*javaClass->invokeMethod<jobject>(this->object, "sync", "()Lio.netty.util.concurrent.Promise;", )); }

};


/**
 * Classpath: io.netty.channel.ChannelHandler
 * Package name: io.netty.channel
 */
class ChannelHandler : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelHandler";
public:
    STATICINITIALIZE;

    ChannelHandler(jobject object) : JavaObject(object) {}

    void handlerAdded(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "handlerAdded", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void handlerRemoved(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "handlerRemoved", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void exceptionCaught(ChannelHandlerContext arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "exceptionCaught", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Throwable;)V", arg0, arg1)); }

};


/**
 * Classpath: [Lio.netty.channel.ChannelHandler;
 */
class ChannelHandler_interface : public Object {
protected:
    const inline static char *className = "[Lio.netty.channel.ChannelHandler;";
public:
    STATICINITIALIZE;

    ChannelHandler_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: io.netty.channel.ChannelMetadata
 * Package name: io.netty.channel
 */
class ChannelMetadata : public Object {
protected:
    const inline static char *className = "io.netty.channel.ChannelMetadata";
public:
    STATICINITIALIZE;

    ChannelMetadata(jobject object) : JavaObject(object) {}

    bool hasDisconnect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasDisconnect", "()Z", )); }

};


/**
 * Classpath: io.netty.channel.Channel$Unsafe
 * Enclosing class: io.netty.channel.Channel
 * Package name: io.netty.channel
 */
class Channel_Unsafe : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.Channel$Unsafe";
public:
    STATICINITIALIZE;

    Channel_Unsafe(jobject object) : JavaObject(object) {}

    SocketAddress localAddress() { return SocketAddress(*javaClass->invokeMethod<jobject>(this->object, "localAddress", "()Ljava.net.SocketAddress;", )); }

    SocketAddress remoteAddress() { return SocketAddress(*javaClass->invokeMethod<jobject>(this->object, "remoteAddress", "()Ljava.net.SocketAddress;", )); }

    ChannelPromise voidPromise() { return ChannelPromise(*javaClass->invokeMethod<jobject>(this->object, "voidPromise", "()Lio.netty.channel.ChannelPromise;", )); }

    ChannelOutboundBuffer outboundBuffer() { return ChannelOutboundBuffer(*javaClass->invokeMethod<jobject>(this->object, "outboundBuffer", "()Lio.netty.channel.ChannelOutboundBuffer;", )); }

    void closeForcibly() { (*javaClass->invokeMethod<void>(this->object, "closeForcibly", "()V", )); }

    void beginRead() { (*javaClass->invokeMethod<void>(this->object, "beginRead", "()V", )); }

    void disconnect(ChannelPromise arg0) { (*javaClass->invokeMethod<void>(this->object, "disconnect", "(Lio.netty.channel.ChannelPromise;)V", arg0)); }

    void deregister(ChannelPromise arg0) { (*javaClass->invokeMethod<void>(this->object, "deregister", "(Lio.netty.channel.ChannelPromise;)V", arg0)); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void register(EventLoop arg0, ChannelPromise arg1) { (*javaClass->invokeMethod<void>(this->object, "register", "(Lio.netty.channel.EventLoop;Lio.netty.channel.ChannelPromise;)V", arg0, arg1)); }

    void write(Object arg0, ChannelPromise arg1) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.lang.Object;Lio.netty.channel.ChannelPromise;)V", arg0, arg1)); }

    void connect(SocketAddress arg0, SocketAddress arg1, ChannelPromise arg2) { (*javaClass->invokeMethod<void>(this->object, "connect", "(Ljava.net.SocketAddress;Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)V", arg0, arg1, arg2)); }

    void close(ChannelPromise arg0) { (*javaClass->invokeMethod<void>(this->object, "close", "(Lio.netty.channel.ChannelPromise;)V", arg0)); }

    void bind(SocketAddress arg0, ChannelPromise arg1) { (*javaClass->invokeMethod<void>(this->object, "bind", "(Ljava.net.SocketAddress;Lio.netty.channel.ChannelPromise;)V", arg0, arg1)); }

};


/**
 * Classpath: io.netty.channel.ChannelOutboundBuffer
 * Package name: io.netty.channel
 */
class ChannelOutboundBuffer : public Object {
protected:
    const inline static char *className = "io.netty.channel.ChannelOutboundBuffer";
public:
    STATICINITIALIZE;

    ChannelOutboundBuffer(jobject object) : JavaObject(object) {}

    long nioBufferSize() { return long(*javaClass->invokeMethod<long>(this->object, "nioBufferSize", "()J", )); }

    void removeBytes(long arg0) { (*javaClass->invokeMethod<void>(this->object, "removeBytes", "(J)V", arg0)); }

    static int fillBufferArray(ByteBuffer_interface arg0, ByteBuffer_interface arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "fillBufferArray", "([Ljava.nio.ByteBuffer;[Ljava.nio.ByteBuffer;I)I", arg0, arg1, arg2)); }

    void failFlushed(Throwable arg0) { (*javaClass->invokeMethod<void>(this->object, "failFlushed", "(Ljava.lang.Throwable;)V", arg0)); }

    static void safeSuccess(ChannelPromise arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "safeSuccess", "(Lio.netty.channel.ChannelPromise;)V", arg0)); }

    long totalPendingWriteBytes() { return long(*javaClass->invokeMethod<long>(this->object, "totalPendingWriteBytes", "()J", )); }

    void forEachFlushedMessage(ChannelOutboundBuffer_MessageProcessor arg0) { (*javaClass->invokeMethod<void>(this->object, "forEachFlushedMessage", "(Lio.netty.channel.ChannelOutboundBuffer$MessageProcessor;)V", arg0)); }

    bool isFlushedEntry(ChannelOutboundBuffer_Entry arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlushedEntry", "(Lio.netty.channel.ChannelOutboundBuffer$Entry;)Z", arg0)); }

    int nioBufferCount() { return int(*javaClass->invokeMethod<int>(this->object, "nioBufferCount", "()I", )); }

    void addMessage(Object arg0, int arg1, ChannelPromise arg2) { (*javaClass->invokeMethod<void>(this->object, "addMessage", "(Ljava.lang.Object;ILio.netty.channel.ChannelPromise;)V", arg0, arg1, arg2)); }

    void addFlush() { (*javaClass->invokeMethod<void>(this->object, "addFlush", "()V", )); }

    static void safeFail(ChannelPromise arg0, Throwable arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "safeFail", "(Lio.netty.channel.ChannelPromise;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void recycle() { (*javaClass->invokeMethod<void>(this->object, "recycle", "()V", )); }

    void progress(long arg0) { (*javaClass->invokeMethod<void>(this->object, "progress", "(J)V", arg0)); }

    void incrementPendingOutboundBytes(long arg0) { (*javaClass->invokeMethod<void>(this->object, "incrementPendingOutboundBytes", "(J)V", arg0)); }

    void decrementPendingOutboundBytes(long arg0) { (*javaClass->invokeMethod<void>(this->object, "decrementPendingOutboundBytes", "(J)V", arg0)); }

    bool remove(Throwable arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Throwable;)Z", arg0)); }

    bool remove() { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "()Z", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Object current() { return Object(*javaClass->invokeMethod<jobject>(this->object, "current", "()Ljava.lang.Object;", )); }

    void close(ClosedChannelException arg0) { (*javaClass->invokeMethod<void>(this->object, "close", "(Ljava.nio.channels.ClosedChannelException;)V", arg0)); }

    static long total(Object arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "total", "(Ljava.lang.Object;)J", arg0)); }

    void removeEntry(ChannelOutboundBuffer_Entry arg0) { (*javaClass->invokeMethod<void>(this->object, "removeEntry", "(Lio.netty.channel.ChannelOutboundBuffer$Entry;)V", arg0)); }

    bool isWritable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "()Z", )); }

};


/**
 * Classpath: io.netty.channel.ChannelOutboundBuffer$MessageProcessor
 * Enclosing class: io.netty.channel.ChannelOutboundBuffer
 * Package name: io.netty.channel
 */
class ChannelOutboundBuffer_MessageProcessor : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelOutboundBuffer$MessageProcessor";
public:
    STATICINITIALIZE;

    ChannelOutboundBuffer_MessageProcessor(jobject object) : JavaObject(object) {}

    bool processMessage(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "processMessage", "(Ljava.lang.Object;)Z", arg0)); }

};


/**
 * Classpath: io.netty.channel.ChannelOutboundBuffer$Entry
 * Enclosing class: io.netty.channel.ChannelOutboundBuffer
 * Package name: io.netty.channel
 */
class ChannelOutboundBuffer_Entry : public Object {
protected:
    const inline static char *className = "io.netty.channel.ChannelOutboundBuffer$Entry";
public:
    STATICINITIALIZE;

    ChannelOutboundBuffer_Entry(jobject object) : JavaObject(object) {}

    ChannelOutboundBuffer_Entry recycleAndGetNext() { return ChannelOutboundBuffer_Entry(*javaClass->invokeMethod<jobject>(this->object, "recycleAndGetNext", "()Lio.netty.channel.ChannelOutboundBuffer$Entry;", )); }

    void recycle() { (*javaClass->invokeMethod<void>(this->object, "recycle", "()V", )); }

    static ChannelOutboundBuffer_Entry newInstance(Object arg0, int arg1, long arg2, ChannelPromise arg3) { return ChannelOutboundBuffer_Entry(*javaClass->invokeStaticMethod<jobject>(this->object, "newInstance", "(Ljava.lang.Object;IJLio.netty.channel.ChannelPromise;)Lio.netty.channel.ChannelOutboundBuffer$Entry;", arg0, arg1, arg2, arg3)); }

    int cancel() { return int(*javaClass->invokeMethod<int>(this->object, "cancel", "()I", )); }

};


/**
 * Classpath: io.netty.channel.ChannelConfig
 * Package name: io.netty.channel
 */
class ChannelConfig : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.ChannelConfig";
public:
    STATICINITIALIZE;

    ChannelConfig(jobject object) : JavaObject(object) {}

    ChannelConfig setAutoRead(bool arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setAutoRead", "(Z)Lio.netty.channel.ChannelConfig;", arg0)); }

    int getConnectTimeoutMillis() { return int(*javaClass->invokeMethod<int>(this->object, "getConnectTimeoutMillis", "()I", )); }

    int getMaxMessagesPerRead() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxMessagesPerRead", "()I", )); }

    ChannelConfig setConnectTimeoutMillis(int arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setConnectTimeoutMillis", "(I)Lio.netty.channel.ChannelConfig;", arg0)); }

    int getWriteSpinCount() { return int(*javaClass->invokeMethod<int>(this->object, "getWriteSpinCount", "()I", )); }

    ChannelConfig setMaxMessagesPerRead(int arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setMaxMessagesPerRead", "(I)Lio.netty.channel.ChannelConfig;", arg0)); }

    ChannelConfig setWriteSpinCount(int arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setWriteSpinCount", "(I)Lio.netty.channel.ChannelConfig;", arg0)); }

    ByteBufAllocator getAllocator() { return ByteBufAllocator(*javaClass->invokeMethod<jobject>(this->object, "getAllocator", "()Lio.netty.buffer.ByteBufAllocator;", )); }

    ChannelConfig setAllocator(ByteBufAllocator arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setAllocator", "(Lio.netty.buffer.ByteBufAllocator;)Lio.netty.channel.ChannelConfig;", arg0)); }

    RecvByteBufAllocator getRecvByteBufAllocator() { return RecvByteBufAllocator(*javaClass->invokeMethod<jobject>(this->object, "getRecvByteBufAllocator", "()Lio.netty.channel.RecvByteBufAllocator;", )); }

    ChannelConfig setRecvByteBufAllocator(RecvByteBufAllocator arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setRecvByteBufAllocator", "(Lio.netty.channel.RecvByteBufAllocator;)Lio.netty.channel.ChannelConfig;", arg0)); }

    bool isAutoClose() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAutoClose", "()Z", )); }

    ChannelConfig setAutoClose(bool arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setAutoClose", "(Z)Lio.netty.channel.ChannelConfig;", arg0)); }

    int getWriteBufferLowWaterMark() { return int(*javaClass->invokeMethod<int>(this->object, "getWriteBufferLowWaterMark", "()I", )); }

    ChannelConfig setWriteBufferLowWaterMark(int arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setWriteBufferLowWaterMark", "(I)Lio.netty.channel.ChannelConfig;", arg0)); }

    MessageSizeEstimator getMessageSizeEstimator() { return MessageSizeEstimator(*javaClass->invokeMethod<jobject>(this->object, "getMessageSizeEstimator", "()Lio.netty.channel.MessageSizeEstimator;", )); }

    ChannelConfig setMessageSizeEstimator(MessageSizeEstimator arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setMessageSizeEstimator", "(Lio.netty.channel.MessageSizeEstimator;)Lio.netty.channel.ChannelConfig;", arg0)); }

    Map getOptions() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getOptions", "()Ljava.util.Map;", )); }

    bool setOptions(Map arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setOptions", "(Ljava.util.Map;)Z", arg0)); }

    Object getOption(ChannelOption arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOption", "(Lio.netty.channel.ChannelOption;)Ljava.lang.Object;", arg0)); }

    bool setOption(ChannelOption arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setOption", "(Lio.netty.channel.ChannelOption;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool isAutoRead() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAutoRead", "()Z", )); }

    int getWriteBufferHighWaterMark() { return int(*javaClass->invokeMethod<int>(this->object, "getWriteBufferHighWaterMark", "()I", )); }

    ChannelConfig setWriteBufferHighWaterMark(int arg0) { return ChannelConfig(*javaClass->invokeMethod<jobject>(this->object, "setWriteBufferHighWaterMark", "(I)Lio.netty.channel.ChannelConfig;", arg0)); }

};


/**
 * Classpath: io.netty.channel.RecvByteBufAllocator
 * Package name: io.netty.channel
 */
class RecvByteBufAllocator : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.RecvByteBufAllocator";
public:
    STATICINITIALIZE;

    RecvByteBufAllocator(jobject object) : JavaObject(object) {}

    RecvByteBufAllocator_Handle newHandle() { return RecvByteBufAllocator_Handle(*javaClass->invokeMethod<jobject>(this->object, "newHandle", "()Lio.netty.channel.RecvByteBufAllocator$Handle;", )); }

};


/**
 * Classpath: io.netty.channel.RecvByteBufAllocator$Handle
 * Enclosing class: io.netty.channel.RecvByteBufAllocator
 * Package name: io.netty.channel
 */
class RecvByteBufAllocator_Handle : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.RecvByteBufAllocator$Handle";
public:
    STATICINITIALIZE;

    RecvByteBufAllocator_Handle(jobject object) : JavaObject(object) {}

    void record(int arg0) { (*javaClass->invokeMethod<void>(this->object, "record", "(I)V", arg0)); }

    ByteBuf allocate(ByteBufAllocator arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "allocate", "(Lio.netty.buffer.ByteBufAllocator;)Lio.netty.buffer.ByteBuf;", arg0)); }

    int guess() { return int(*javaClass->invokeMethod<int>(this->object, "guess", "()I", )); }

};


/**
 * Classpath: io.netty.channel.MessageSizeEstimator
 * Package name: io.netty.channel
 */
class MessageSizeEstimator : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.MessageSizeEstimator";
public:
    STATICINITIALIZE;

    MessageSizeEstimator(jobject object) : JavaObject(object) {}

    MessageSizeEstimator_Handle newHandle() { return MessageSizeEstimator_Handle(*javaClass->invokeMethod<jobject>(this->object, "newHandle", "()Lio.netty.channel.MessageSizeEstimator$Handle;", )); }

};


/**
 * Classpath: io.netty.channel.MessageSizeEstimator$Handle
 * Enclosing class: io.netty.channel.MessageSizeEstimator
 * Package name: io.netty.channel
 */
class MessageSizeEstimator_Handle : public JavaObject {
protected:
    const inline static char *className = "io.netty.channel.MessageSizeEstimator$Handle";
public:
    STATICINITIALIZE;

    MessageSizeEstimator_Handle(jobject object) : JavaObject(object) {}

    int size(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "size", "(Ljava.lang.Object;)I", arg0)); }

};


/**
 * Classpath: io.netty.util.UniqueName
 * Package name: io.netty.util
 */
class UniqueName : public Object {
protected:
    const inline static char *className = "io.netty.util.UniqueName";
public:
    STATICINITIALIZE;

    UniqueName(jobject object) : JavaObject(object) {}

    void validateArgs(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "validateArgs", "([Ljava.lang.Object;)V", arg0)); }

    String name() { return String(*javaClass->invokeMethod<jobject>(this->object, "name", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(UniqueName arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lio.netty.util.UniqueName;)I", arg0)); }

    int id() { return int(*javaClass->invokeMethod<int>(this->object, "id", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.EnumConnectionState
 * Package name: net.minecraft.network
 */
class EnumConnectionState : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.EnumConnectionState";
public:
    STATICINITIALIZE;

    EnumConnectionState(jobject object) : JavaObject(object) {}

    static EnumConnectionState getFromPacket(Packet arg0) { return EnumConnectionState(*javaClass->invokeStaticMethod<jobject>(this->object, "getFromPacket", "(Lnet.minecraft.network.Packet;)Lnet.minecraft.network.EnumConnectionState;", arg0)); }

    EnumConnectionState registerPacket(EnumPacketDirection arg0, Class arg1) { return EnumConnectionState(*javaClass->invokeMethod<jobject>(this->object, "registerPacket", "(Lnet.minecraft.network.EnumPacketDirection;Ljava.lang.Class;)Lnet.minecraft.network.EnumConnectionState;", arg0, arg1)); }

    Integer getPacketId(EnumPacketDirection arg0, Packet arg1) { return Integer(*javaClass->invokeMethod<jobject>(this->object, "getPacketId", "(Lnet.minecraft.network.EnumPacketDirection;Lnet.minecraft.network.Packet;)Ljava.lang.Integer;", arg0, arg1)); }

    Packet getPacket(EnumPacketDirection arg0, int arg1) { return Packet(*javaClass->invokeMethod<jobject>(this->object, "getPacket", "(Lnet.minecraft.network.EnumPacketDirection;I)Lnet.minecraft.network.Packet;", arg0, arg1)); }

    static EnumConnectionState getById(int arg0) { return EnumConnectionState(*javaClass->invokeStaticMethod<jobject>(this->object, "getById", "(I)Lnet.minecraft.network.EnumConnectionState;", arg0)); }

    static EnumConnectionState valueOf(String arg0) { return EnumConnectionState(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.EnumConnectionState;", arg0)); }

    int getId() { return int(*javaClass->invokeMethod<int>(this->object, "getId", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.EnumPacketDirection
 * Package name: net.minecraft.network
 */
class EnumPacketDirection : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.EnumPacketDirection";
public:
    STATICINITIALIZE;

    EnumPacketDirection(jobject object) : JavaObject(object) {}

    static EnumPacketDirection valueOf(String arg0) { return EnumPacketDirection(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.EnumPacketDirection;", arg0)); }

};


/**
 * Classpath: javax.crypto.SecretKey
 * Package name: javax.crypto
 */
class SecretKey : public JavaObject {
protected:
    const inline static char *className = "javax.crypto.SecretKey";
public:
    STATICINITIALIZE;

    SecretKey(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: io.netty.channel.ChannelHandlerAdapter
 * Package name: io.netty.channel
 */
class ChannelHandlerAdapter : public Object {
protected:
    const inline static char *className = "io.netty.channel.ChannelHandlerAdapter";
public:
    STATICINITIALIZE;

    ChannelHandlerAdapter(jobject object) : JavaObject(object) {}

    void handlerAdded(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "handlerAdded", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void handlerRemoved(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "handlerRemoved", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void exceptionCaught(ChannelHandlerContext arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "exceptionCaught", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Throwable;)V", arg0, arg1)); }

    bool isSharable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSharable", "()Z", )); }

};


/**
 * Classpath: net.minecraft.server.management.PlayerProfileCache
 * Package name: net.minecraft.server.management
 */
class PlayerProfileCache : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerProfileCache";
public:
    STATICINITIALIZE;

    PlayerProfileCache(jobject object) : JavaObject(object) {}

    GameProfile getProfileByUUID(UUID arg0) { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getProfileByUUID", "(Ljava.util.UUID;)Lcom.mojang.authlib.GameProfile;", arg0)); }

    GameProfile getGameProfileForUsername(String arg0) { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getGameProfileForUsername", "(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;", arg0)); }

    List getEntriesWithLimit(int arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getEntriesWithLimit", "(I)Ljava.util.List;", arg0)); }

    static GameProfile getGameProfile(MinecraftServer arg0, String arg1) { return GameProfile(*javaClass->invokeStaticMethod<jobject>(this->object, "getGameProfile", "(Lnet.minecraft.server.MinecraftServer;Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;", arg0, arg1)); }

    PlayerProfileCache_ProfileEntry getByUUID(UUID arg0) { return PlayerProfileCache_ProfileEntry(*javaClass->invokeMethod<jobject>(this->object, "getByUUID", "(Ljava.util.UUID;)Lnet.minecraft.server.management.PlayerProfileCache$ProfileEntry;", arg0)); }

    void load() { (*javaClass->invokeMethod<void>(this->object, "load", "()V", )); }

    void save() { (*javaClass->invokeMethod<void>(this->object, "save", "()V", )); }

    void addEntry(GameProfile arg0, Date arg1) { (*javaClass->invokeMethod<void>(this->object, "addEntry", "(Lcom.mojang.authlib.GameProfile;Ljava.util.Date;)V", arg0, arg1)); }

    void addEntry(GameProfile arg0) { (*javaClass->invokeMethod<void>(this->object, "addEntry", "(Lcom.mojang.authlib.GameProfile;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.server.management.PlayerProfileCache$ProfileEntry
 * Enclosing class: net.minecraft.server.management.PlayerProfileCache
 * Package name: net.minecraft.server.management
 */
class PlayerProfileCache_ProfileEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerProfileCache$ProfileEntry";
public:
    STATICINITIALIZE;

    PlayerProfileCache_ProfileEntry(jobject object) : JavaObject(object) {}

    Date getExpirationDate() { return Date(*javaClass->invokeMethod<jobject>(this->object, "getExpirationDate", "()Ljava.util.Date;", )); }

    GameProfile getGameProfile() { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom.mojang.authlib.GameProfile;", )); }

};


/**
 * Classpath: net.minecraft.network.ServerStatusResponse
 * Package name: net.minecraft.network
 */
class ServerStatusResponse : public Object {
protected:
    const inline static char *className = "net.minecraft.network.ServerStatusResponse";
public:
    STATICINITIALIZE;

    ServerStatusResponse(jobject object) : JavaObject(object) {}

    IChatComponent getServerDescription() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getServerDescription", "()Lnet.minecraft.util.IChatComponent;", )); }

    ServerStatusResponse_MinecraftProtocolVersionIdentifier getProtocolVersionInfo() { return ServerStatusResponse_MinecraftProtocolVersionIdentifier(*javaClass->invokeMethod<jobject>(this->object, "getProtocolVersionInfo", "()Lnet.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier;", )); }

    void setServerDescription(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "setServerDescription", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    void setProtocolVersionInfo(ServerStatusResponse_MinecraftProtocolVersionIdentifier arg0) { (*javaClass->invokeMethod<void>(this->object, "setProtocolVersionInfo", "(Lnet.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier;)V", arg0)); }

    void setPlayerCountData(ServerStatusResponse_PlayerCountData arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayerCountData", "(Lnet.minecraft.network.ServerStatusResponse$PlayerCountData;)V", arg0)); }

    ServerStatusResponse_PlayerCountData getPlayerCountData() { return ServerStatusResponse_PlayerCountData(*javaClass->invokeMethod<jobject>(this->object, "getPlayerCountData", "()Lnet.minecraft.network.ServerStatusResponse$PlayerCountData;", )); }

    String getFavicon() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFavicon", "()Ljava.lang.String;", )); }

    void setFavicon(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setFavicon", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier
 * Enclosing class: net.minecraft.network.ServerStatusResponse
 * Package name: net.minecraft.network
 */
class ServerStatusResponse_MinecraftProtocolVersionIdentifier : public Object {
protected:
    const inline static char *className = "net.minecraft.network.ServerStatusResponse$MinecraftProtocolVersionIdentifier";
public:
    STATICINITIALIZE;

    ServerStatusResponse_MinecraftProtocolVersionIdentifier(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    int getProtocol() { return int(*javaClass->invokeMethod<int>(this->object, "getProtocol", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.ServerStatusResponse$PlayerCountData
 * Enclosing class: net.minecraft.network.ServerStatusResponse
 * Package name: net.minecraft.network
 */
class ServerStatusResponse_PlayerCountData : public Object {
protected:
    const inline static char *className = "net.minecraft.network.ServerStatusResponse$PlayerCountData";
public:
    STATICINITIALIZE;

    ServerStatusResponse_PlayerCountData(jobject object) : JavaObject(object) {}

    int getOnlinePlayerCount() { return int(*javaClass->invokeMethod<int>(this->object, "getOnlinePlayerCount", "()I", )); }

    int getMaxPlayers() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxPlayers", "()I", )); }

    void setPlayers(GameProfile_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayers", "([Lcom.mojang.authlib.GameProfile;)V", arg0)); }

};


/**
 * Classpath: [Lcom.mojang.authlib.GameProfile;
 */
class GameProfile_interface : public Object {
protected:
    const inline static char *className = "[Lcom.mojang.authlib.GameProfile;";
public:
    STATICINITIALIZE;

    GameProfile_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: com.google.common.util.concurrent.ListenableFuture
 * Package name: com.google.common.util.concurrent
 */
class ListenableFuture : public JavaObject {
protected:
    const inline static char *className = "com.google.common.util.concurrent.ListenableFuture";
public:
    STATICINITIALIZE;

    ListenableFuture(jobject object) : JavaObject(object) {}

    void addListener(Runnable arg0, Executor arg1) { (*javaClass->invokeMethod<void>(this->object, "addListener", "(Ljava.lang.Runnable;Ljava.util.concurrent.Executor;)V", arg0, arg1)); }

};


/**
 * Classpath: java.util.concurrent.Executor
 * Package name: java.util.concurrent
 */
class Executor : public JavaObject {
protected:
    const inline static char *className = "java.util.concurrent.Executor";
public:
    STATICINITIALIZE;

    Executor(jobject object) : JavaObject(object) {}

    void execute(Runnable arg0) { (*javaClass->invokeMethod<void>(this->object, "execute", "(Ljava.lang.Runnable;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.command.ICommand
 * Package name: net.minecraft.command
 */
class ICommand : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.command.ICommand";
public:
    STATICINITIALIZE;

    ICommand(jobject object) : JavaObject(object) {}

    String getCommandUsage(ICommandSender arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getCommandUsage", "(Lnet.minecraft.command.ICommandSender;)Ljava.lang.String;", arg0)); }

    bool canCommandSenderUseCommand(ICommandSender arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCommandSenderUseCommand", "(Lnet.minecraft.command.ICommandSender;)Z", arg0)); }

    void processCommand(ICommandSender arg0, String_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "processCommand", "(Lnet.minecraft.command.ICommandSender;[Ljava.lang.String;)V", arg0, arg1)); }

    String getCommandName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCommandName", "()Ljava.lang.String;", )); }

    List getCommandAliases() { return List(*javaClass->invokeMethod<jobject>(this->object, "getCommandAliases", "()Ljava.util.List;", )); }

    List addTabCompletionOptions(ICommandSender arg0, String_interface arg1, BlockPos arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "addTabCompletionOptions", "(Lnet.minecraft.command.ICommandSender;[Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Ljava.util.List;", arg0, arg1, arg2)); }

    bool isUsernameIndex(String_interface arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUsernameIndex", "([Ljava.lang.String;I)Z", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.command.CommandHandler
 * Package name: net.minecraft.command
 */
class CommandHandler : public Object {
protected:
    const inline static char *className = "net.minecraft.command.CommandHandler";
public:
    STATICINITIALIZE;

    CommandHandler(jobject object) : JavaObject(object) {}

    List getPossibleCommands(ICommandSender arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getPossibleCommands", "(Lnet.minecraft.command.ICommandSender;)Ljava.util.List;", arg0)); }

    Map getCommands() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getCommands", "()Ljava.util.Map;", )); }

    int executeCommand(ICommandSender arg0, String arg1) { return int(*javaClass->invokeMethod<int>(this->object, "executeCommand", "(Lnet.minecraft.command.ICommandSender;Ljava.lang.String;)I", arg0, arg1)); }

    ICommand registerCommand(ICommand arg0) { return ICommand(*javaClass->invokeMethod<jobject>(this->object, "registerCommand", "(Lnet.minecraft.command.ICommand;)Lnet.minecraft.command.ICommand;", arg0)); }

    int getUsernameIndex(ICommand arg0, String_interface arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getUsernameIndex", "(Lnet.minecraft.command.ICommand;[Ljava.lang.String;)I", arg0, arg1)); }

    List getTabCompletionOptions(ICommandSender arg0, String arg1, BlockPos arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getTabCompletionOptions", "(Lnet.minecraft.command.ICommandSender;Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Ljava.util.List;", arg0, arg1, arg2)); }

    bool tryExecute(ICommandSender arg0, String_interface arg1, ICommand arg2, String arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "tryExecute", "(Lnet.minecraft.command.ICommandSender;[Ljava.lang.String;Lnet.minecraft.command.ICommand;Ljava.lang.String;)Z", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: net.minecraft.world.storage.ISaveFormat
 * Package name: net.minecraft.world.storage
 */
class ISaveFormat : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.world.storage.ISaveFormat";
public:
    STATICINITIALIZE;

    ISaveFormat(jobject object) : JavaObject(object) {}

    bool deleteWorldDirectory(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "deleteWorldDirectory", "(Ljava.lang.String;)Z", arg0)); }

    WorldInfo getWorldInfo(String arg0) { return WorldInfo(*javaClass->invokeMethod<jobject>(this->object, "getWorldInfo", "(Ljava.lang.String;)Lnet.minecraft.world.storage.WorldInfo;", arg0)); }

    ISaveHandler getSaveLoader(String arg0, bool arg1) { return ISaveHandler(*javaClass->invokeMethod<jobject>(this->object, "getSaveLoader", "(Ljava.lang.String;Z)Lnet.minecraft.world.storage.ISaveHandler;", arg0, arg1)); }

    List getSaveList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getSaveList", "()Ljava.util.List;", )); }

    bool func_154335_d(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_154335_d", "(Ljava.lang.String;)Z", arg0)); }

    void renameWorld(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "renameWorld", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    bool func_154334_a(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_154334_a", "(Ljava.lang.String;)Z", arg0)); }

    bool isOldMapFormat(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOldMapFormat", "(Ljava.lang.String;)Z", arg0)); }

    bool convertMapFormat(String arg0, IProgressUpdate arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "convertMapFormat", "(Ljava.lang.String;Lnet.minecraft.util.IProgressUpdate;)Z", arg0, arg1)); }

    bool canLoadWorld(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canLoadWorld", "(Ljava.lang.String;)Z", arg0)); }

    void flushCache() { (*javaClass->invokeMethod<void>(this->object, "flushCache", "()V", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.network.NetworkSystem
 * Package name: net.minecraft.network
 */
class NetworkSystem : public Object {
protected:
    const inline static char *className = "net.minecraft.network.NetworkSystem";
public:
    STATICINITIALIZE;

    NetworkSystem(jobject object) : JavaObject(object) {}

    void addLanEndpoint(InetAddress arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addLanEndpoint", "(Ljava.net.InetAddress;I)V", arg0, arg1)); }

    SocketAddress addLocalEndpoint() { return SocketAddress(*javaClass->invokeMethod<jobject>(this->object, "addLocalEndpoint", "()Ljava.net.SocketAddress;", )); }

    void terminateEndpoints() { (*javaClass->invokeMethod<void>(this->object, "terminateEndpoints", "()V", )); }

    void networkTick() { (*javaClass->invokeMethod<void>(this->object, "networkTick", "()V", )); }

    MinecraftServer getServer() { return MinecraftServer(*javaClass->invokeMethod<jobject>(this->object, "getServer", "()Lnet.minecraft.server.MinecraftServer;", )); }

};


/**
 * Classpath: net.minecraft.profiler.PlayerUsageSnooper
 * Package name: net.minecraft.profiler
 */
class PlayerUsageSnooper : public Object {
protected:
    const inline static char *className = "net.minecraft.profiler.PlayerUsageSnooper";
public:
    STATICINITIALIZE;

    PlayerUsageSnooper(jobject object) : JavaObject(object) {}

    void func_152766_h() { (*javaClass->invokeMethod<void>(this->object, "func_152766_h", "()V", )); }

    void addJvmArgsToSnooper() { (*javaClass->invokeMethod<void>(this->object, "addJvmArgsToSnooper", "()V", )); }

    Map getCurrentStats() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getCurrentStats", "()Ljava.util.Map;", )); }

    void stopSnooper() { (*javaClass->invokeMethod<void>(this->object, "stopSnooper", "()V", )); }

    void addMemoryStatsToSnooper() { (*javaClass->invokeMethod<void>(this->object, "addMemoryStatsToSnooper", "()V", )); }

    bool isSnooperRunning() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSnooperRunning", "()Z", )); }

    void startSnooper() { (*javaClass->invokeMethod<void>(this->object, "startSnooper", "()V", )); }

    void addClientStat(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "addClientStat", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    String getUniqueID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUniqueID", "()Ljava.lang.String;", )); }

    void addStatToSnooper(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "addStatToSnooper", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    long getMinecraftStartTimeMillis() { return long(*javaClass->invokeMethod<long>(this->object, "getMinecraftStartTimeMillis", "()J", )); }

};


/**
 * Classpath: com.mojang.authlib.minecraft.MinecraftSessionService
 * Package name: com.mojang.authlib.minecraft
 */
class MinecraftSessionService : public JavaObject {
protected:
    const inline static char *className = "com.mojang.authlib.minecraft.MinecraftSessionService";
public:
    STATICINITIALIZE;

    MinecraftSessionService(jobject object) : JavaObject(object) {}

    GameProfile hasJoinedServer(GameProfile arg0, String arg1) { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "hasJoinedServer", "(Lcom.mojang.authlib.GameProfile;Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;", arg0, arg1)); }

    Map getTextures(GameProfile arg0, bool arg1) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getTextures", "(Lcom.mojang.authlib.GameProfile;Z)Ljava.util.Map;", arg0, arg1)); }

    GameProfile fillProfileProperties(GameProfile arg0, bool arg1) { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "fillProfileProperties", "(Lcom.mojang.authlib.GameProfile;Z)Lcom.mojang.authlib.GameProfile;", arg0, arg1)); }

    void joinServer(GameProfile arg0, String arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "joinServer", "(Lcom.mojang.authlib.GameProfile;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.command.ICommandManager
 * Package name: net.minecraft.command
 */
class ICommandManager : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.command.ICommandManager";
public:
    STATICINITIALIZE;

    ICommandManager(jobject object) : JavaObject(object) {}

    List getPossibleCommands(ICommandSender arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getPossibleCommands", "(Lnet.minecraft.command.ICommandSender;)Ljava.util.List;", arg0)); }

    Map getCommands() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getCommands", "()Ljava.util.Map;", )); }

    int executeCommand(ICommandSender arg0, String arg1) { return int(*javaClass->invokeMethod<int>(this->object, "executeCommand", "(Lnet.minecraft.command.ICommandSender;Ljava.lang.String;)I", arg0, arg1)); }

    List getTabCompletionOptions(ICommandSender arg0, String arg1, BlockPos arg2) { return List(*javaClass->invokeMethod<jobject>(this->object, "getTabCompletionOptions", "(Lnet.minecraft.command.ICommandSender;Ljava.lang.String;Lnet.minecraft.util.BlockPos;)Ljava.util.List;", arg0, arg1, arg2)); }

};


/**
 * Classpath: com.mojang.authlib.GameProfileRepository
 * Package name: com.mojang.authlib
 */
class GameProfileRepository : public JavaObject {
protected:
    const inline static char *className = "com.mojang.authlib.GameProfileRepository";
public:
    STATICINITIALIZE;

    GameProfileRepository(jobject object) : JavaObject(object) {}

    void findProfilesByNames(String_interface arg0, Agent arg1, ProfileLookupCallback arg2) { (*javaClass->invokeMethod<void>(this->object, "findProfilesByNames", "([Ljava.lang.String;Lcom.mojang.authlib.Agent;Lcom.mojang.authlib.ProfileLookupCallback;)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: com.mojang.authlib.Agent
 * Package name: com.mojang.authlib
 */
class Agent : public Object {
protected:
    const inline static char *className = "com.mojang.authlib.Agent";
public:
    STATICINITIALIZE;

    Agent(jobject object) : JavaObject(object) {}

    int getVersion() { return int(*javaClass->invokeMethod<int>(this->object, "getVersion", "()I", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: com.mojang.authlib.ProfileLookupCallback
 * Package name: com.mojang.authlib
 */
class ProfileLookupCallback : public JavaObject {
protected:
    const inline static char *className = "com.mojang.authlib.ProfileLookupCallback";
public:
    STATICINITIALIZE;

    ProfileLookupCallback(jobject object) : JavaObject(object) {}

    void onProfileLookupFailed(GameProfile arg0, Exception arg1) { (*javaClass->invokeMethod<void>(this->object, "onProfileLookupFailed", "(Lcom.mojang.authlib.GameProfile;Ljava.lang.Exception;)V", arg0, arg1)); }

    void onProfileLookupSucceeded(GameProfile arg0) { (*javaClass->invokeMethod<void>(this->object, "onProfileLookupSucceeded", "(Lcom.mojang.authlib.GameProfile;)V", arg0)); }

};


/**
 * Classpath: java.security.KeyPair
 * Package name: java.security
 */
class KeyPair : public Object {
protected:
    const inline static char *className = "java.security.KeyPair";
public:
    STATICINITIALIZE;

    KeyPair(jobject object) : JavaObject(object) {}

    PublicKey getPublic() { return PublicKey(*javaClass->invokeMethod<jobject>(this->object, "getPublic", "()Ljava.security.PublicKey;", )); }

    PrivateKey getPrivate() { return PrivateKey(*javaClass->invokeMethod<jobject>(this->object, "getPrivate", "()Ljava.security.PrivateKey;", )); }

};


/**
 * Classpath: java.security.PublicKey
 * Package name: java.security
 */
class PublicKey : public JavaObject {
protected:
    const inline static char *className = "java.security.PublicKey";
public:
    STATICINITIALIZE;

    PublicKey(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.security.PrivateKey
 * Package name: java.security
 */
class PrivateKey : public JavaObject {
protected:
    const inline static char *className = "java.security.PrivateKey";
public:
    STATICINITIALIZE;

    PrivateKey(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.entity.EntityTracker
 * Package name: net.minecraft.entity
 */
class EntityTracker : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.EntityTracker";
public:
    STATICINITIALIZE;

    EntityTracker(jobject object) : JavaObject(object) {}

    void trackEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "trackEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void trackEntity(Entity arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "trackEntity", "(Lnet.minecraft.entity.Entity;II)V", arg0, arg1, arg2)); }

    void addEntityToTracker(Entity arg0, int arg1, int arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "addEntityToTracker", "(Lnet.minecraft.entity.Entity;IIZ)V", arg0, arg1, arg2, arg3)); }

    void untrackEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "untrackEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void removePlayerFromTrackers(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "removePlayerFromTrackers", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void sendToAllTrackingEntity(Entity arg0, Packet arg1) { (*javaClass->invokeMethod<void>(this->object, "sendToAllTrackingEntity", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.network.Packet;)V", arg0, arg1)); }

    void func_85172_a(EntityPlayerMP arg0, Chunk arg1) { (*javaClass->invokeMethod<void>(this->object, "func_85172_a", "(Lnet.minecraft.entity.player.EntityPlayerMP;Lnet.minecraft.world.chunk.Chunk;)V", arg0, arg1)); }

    void func_180245_a(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "func_180245_a", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void func_151248_b(Entity arg0, Packet arg1) { (*javaClass->invokeMethod<void>(this->object, "func_151248_b", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.network.Packet;)V", arg0, arg1)); }

    void updateTrackedEntities() { (*javaClass->invokeMethod<void>(this->object, "updateTrackedEntities", "()V", )); }

};


/**
 * Classpath: net.minecraft.util.WeightedRandom$Item
 * Enclosing class: net.minecraft.util.WeightedRandom
 * Package name: net.minecraft.util
 */
class WeightedRandom_Item : public Object {
protected:
    const inline static char *className = "net.minecraft.util.WeightedRandom$Item";
public:
    STATICINITIALIZE;

    WeightedRandom_Item(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.block.BlockEventData
 * Package name: net.minecraft.block
 */
class BlockEventData : public Object {
protected:
    const inline static char *className = "net.minecraft.block.BlockEventData";
public:
    STATICINITIALIZE;

    BlockEventData(jobject object) : JavaObject(object) {}

    int getEventParameter() { return int(*javaClass->invokeMethod<int>(this->object, "getEventParameter", "()I", )); }

    int getEventID() { return int(*javaClass->invokeMethod<int>(this->object, "getEventID", "()I", )); }

    Block getBlock() { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlock", "()Lnet.minecraft.block.Block;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.server.management.PlayerManager
 * Package name: net.minecraft.server.management
 */
class PlayerManager : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerManager";
public:
    STATICINITIALIZE;

    PlayerManager(jobject object) : JavaObject(object) {}

    void markBlockForUpdate(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "markBlockForUpdate", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    void updatePlayerInstances() { (*javaClass->invokeMethod<void>(this->object, "updatePlayerInstances", "()V", )); }

    bool hasPlayerInstance(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPlayerInstance", "(II)Z", arg0, arg1)); }

    void setPlayerViewRadius(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayerViewRadius", "(I)V", arg0)); }

    WorldServer getWorldServer() { return WorldServer(*javaClass->invokeMethod<jobject>(this->object, "getWorldServer", "()Lnet.minecraft.world.WorldServer;", )); }

    PlayerManager_PlayerInstance getPlayerInstance(int arg0, int arg1, bool arg2) { return PlayerManager_PlayerInstance(*javaClass->invokeMethod<jobject>(this->object, "getPlayerInstance", "(IIZ)Lnet.minecraft.server.management.PlayerManager$PlayerInstance;", arg0, arg1, arg2)); }

    void filterChunkLoadQueue(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "filterChunkLoadQueue", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void removePlayer(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "removePlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void updateMountedMovingPlayer(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "updateMountedMovingPlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    bool isPlayerWatchingChunk(EntityPlayerMP arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlayerWatchingChunk", "(Lnet.minecraft.entity.player.EntityPlayerMP;II)Z", arg0, arg1, arg2)); }

    static int getFurthestViewableBlock(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getFurthestViewableBlock", "(I)I", arg0)); }

    void addPlayer(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "addPlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    bool overlaps(int arg0, int arg1, int arg2, int arg3, int arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "overlaps", "(IIIII)Z", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: net.minecraft.server.management.PlayerManager$PlayerInstance
 * Enclosing class: net.minecraft.server.management.PlayerManager
 * Package name: net.minecraft.server.management
 */
class PlayerManager_PlayerInstance : public Object {
protected:
    const inline static char *className = "net.minecraft.server.management.PlayerManager$PlayerInstance";
public:
    STATICINITIALIZE;

    PlayerManager_PlayerInstance(jobject object) : JavaObject(object) {}

    void increaseInhabitedTime(Chunk arg0) { (*javaClass->invokeMethod<void>(this->object, "increaseInhabitedTime", "(Lnet.minecraft.world.chunk.Chunk;)V", arg0)); }

    void processChunk() { (*javaClass->invokeMethod<void>(this->object, "processChunk", "()V", )); }

    void flagChunkForUpdate(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "flagChunkForUpdate", "(III)V", arg0, arg1, arg2)); }

    void removePlayer(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "removePlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void addPlayer(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "addPlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void sendToAllPlayersWatchingChunk(Packet arg0) { (*javaClass->invokeMethod<void>(this->object, "sendToAllPlayersWatchingChunk", "(Lnet.minecraft.network.Packet;)V", arg0)); }

    void sendTileToAllPlayersWatchingChunk(TileEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "sendTileToAllPlayersWatchingChunk", "(Lnet.minecraft.tileentity.TileEntity;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.world.Teleporter
 * Package name: net.minecraft.world
 */
class Teleporter : public Object {
protected:
    const inline static char *className = "net.minecraft.world.Teleporter";
public:
    STATICINITIALIZE;

    Teleporter(jobject object) : JavaObject(object) {}

    void placeInPortal(Entity arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "placeInPortal", "(Lnet.minecraft.entity.Entity;F)V", arg0, arg1)); }

    bool placeInExistingPortal(Entity arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "placeInExistingPortal", "(Lnet.minecraft.entity.Entity;F)Z", arg0, arg1)); }

    void removeStalePortalLocations(long arg0) { (*javaClass->invokeMethod<void>(this->object, "removeStalePortalLocations", "(J)V", arg0)); }

    bool makePortal(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "makePortal", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C15PacketClientSettings
 * Package name: net.minecraft.network.play.client
 */
class C15PacketClientSettings : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C15PacketClientSettings";
public:
    STATICINITIALIZE;

    C15PacketClientSettings(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    EntityPlayer_EnumChatVisibility getChatVisibility() { return EntityPlayer_EnumChatVisibility(*javaClass->invokeMethod<jobject>(this->object, "getChatVisibility", "()Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;", )); }

    bool isColorsEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isColorsEnabled", "()Z", )); }

    int getModelPartFlags() { return int(*javaClass->invokeMethod<int>(this->object, "getModelPartFlags", "()I", )); }

    String getLang() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLang", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.network.play.INetHandlerPlayServer
 * Package name: net.minecraft.network.play
 */
class INetHandlerPlayServer : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.network.play.INetHandlerPlayServer";
public:
    STATICINITIALIZE;

    INetHandlerPlayServer(jobject object) : JavaObject(object) {}

    void processChatMessage(C01PacketChatMessage arg0) { (*javaClass->invokeMethod<void>(this->object, "processChatMessage", "(Lnet.minecraft.network.play.client.C01PacketChatMessage;)V", arg0)); }

    void processTabComplete(C14PacketTabComplete arg0) { (*javaClass->invokeMethod<void>(this->object, "processTabComplete", "(Lnet.minecraft.network.play.client.C14PacketTabComplete;)V", arg0)); }

    void processClientStatus(C16PacketClientStatus arg0) { (*javaClass->invokeMethod<void>(this->object, "processClientStatus", "(Lnet.minecraft.network.play.client.C16PacketClientStatus;)V", arg0)); }

    void processConfirmTransaction(C0FPacketConfirmTransaction arg0) { (*javaClass->invokeMethod<void>(this->object, "processConfirmTransaction", "(Lnet.minecraft.network.play.client.C0FPacketConfirmTransaction;)V", arg0)); }

    void processEnchantItem(C11PacketEnchantItem arg0) { (*javaClass->invokeMethod<void>(this->object, "processEnchantItem", "(Lnet.minecraft.network.play.client.C11PacketEnchantItem;)V", arg0)); }

    void processClickWindow(C0EPacketClickWindow arg0) { (*javaClass->invokeMethod<void>(this->object, "processClickWindow", "(Lnet.minecraft.network.play.client.C0EPacketClickWindow;)V", arg0)); }

    void processCloseWindow(C0DPacketCloseWindow arg0) { (*javaClass->invokeMethod<void>(this->object, "processCloseWindow", "(Lnet.minecraft.network.play.client.C0DPacketCloseWindow;)V", arg0)); }

    void processVanilla250Packet(C17PacketCustomPayload arg0) { (*javaClass->invokeMethod<void>(this->object, "processVanilla250Packet", "(Lnet.minecraft.network.play.client.C17PacketCustomPayload;)V", arg0)); }

    void processUseEntity(C02PacketUseEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "processUseEntity", "(Lnet.minecraft.network.play.client.C02PacketUseEntity;)V", arg0)); }

    void processKeepAlive(C00PacketKeepAlive arg0) { (*javaClass->invokeMethod<void>(this->object, "processKeepAlive", "(Lnet.minecraft.network.play.client.C00PacketKeepAlive;)V", arg0)); }

    void processPlayer(C03PacketPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPlayer", "(Lnet.minecraft.network.play.client.C03PacketPlayer;)V", arg0)); }

    void processPlayerAbilities(C13PacketPlayerAbilities arg0) { (*javaClass->invokeMethod<void>(this->object, "processPlayerAbilities", "(Lnet.minecraft.network.play.client.C13PacketPlayerAbilities;)V", arg0)); }

    void processPlayerDigging(C07PacketPlayerDigging arg0) { (*javaClass->invokeMethod<void>(this->object, "processPlayerDigging", "(Lnet.minecraft.network.play.client.C07PacketPlayerDigging;)V", arg0)); }

    void processEntityAction(C0BPacketEntityAction arg0) { (*javaClass->invokeMethod<void>(this->object, "processEntityAction", "(Lnet.minecraft.network.play.client.C0BPacketEntityAction;)V", arg0)); }

    void processInput(C0CPacketInput arg0) { (*javaClass->invokeMethod<void>(this->object, "processInput", "(Lnet.minecraft.network.play.client.C0CPacketInput;)V", arg0)); }

    void processHeldItemChange(C09PacketHeldItemChange arg0) { (*javaClass->invokeMethod<void>(this->object, "processHeldItemChange", "(Lnet.minecraft.network.play.client.C09PacketHeldItemChange;)V", arg0)); }

    void processUpdateSign(C12PacketUpdateSign arg0) { (*javaClass->invokeMethod<void>(this->object, "processUpdateSign", "(Lnet.minecraft.network.play.client.C12PacketUpdateSign;)V", arg0)); }

    void handleSpectate(C18PacketSpectate arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpectate", "(Lnet.minecraft.network.play.client.C18PacketSpectate;)V", arg0)); }

    void handleResourcePackStatus(C19PacketResourcePackStatus arg0) { (*javaClass->invokeMethod<void>(this->object, "handleResourcePackStatus", "(Lnet.minecraft.network.play.client.C19PacketResourcePackStatus;)V", arg0)); }

    void handleAnimation(C0APacketAnimation arg0) { (*javaClass->invokeMethod<void>(this->object, "handleAnimation", "(Lnet.minecraft.network.play.client.C0APacketAnimation;)V", arg0)); }

    void processClientSettings(C15PacketClientSettings arg0) { (*javaClass->invokeMethod<void>(this->object, "processClientSettings", "(Lnet.minecraft.network.play.client.C15PacketClientSettings;)V", arg0)); }

    void processCreativeInventoryAction(C10PacketCreativeInventoryAction arg0) { (*javaClass->invokeMethod<void>(this->object, "processCreativeInventoryAction", "(Lnet.minecraft.network.play.client.C10PacketCreativeInventoryAction;)V", arg0)); }

    void processPlayerBlockPlacement(C08PacketPlayerBlockPlacement arg0) { (*javaClass->invokeMethod<void>(this->object, "processPlayerBlockPlacement", "(Lnet.minecraft.network.play.client.C08PacketPlayerBlockPlacement;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C01PacketChatMessage
 * Package name: net.minecraft.network.play.client
 */
class C01PacketChatMessage : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C01PacketChatMessage";
public:
    STATICINITIALIZE;

    C01PacketChatMessage(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    String getMessage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMessage", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C14PacketTabComplete
 * Package name: net.minecraft.network.play.client
 */
class C14PacketTabComplete : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C14PacketTabComplete";
public:
    STATICINITIALIZE;

    C14PacketTabComplete(jobject object) : JavaObject(object) {}

    BlockPos getTargetBlock() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getTargetBlock", "()Lnet.minecraft.util.BlockPos;", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    String getMessage() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMessage", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C16PacketClientStatus
 * Package name: net.minecraft.network.play.client
 */
class C16PacketClientStatus : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C16PacketClientStatus";
public:
    STATICINITIALIZE;

    C16PacketClientStatus(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    C16PacketClientStatus_EnumState getStatus() { return C16PacketClientStatus_EnumState(*javaClass->invokeMethod<jobject>(this->object, "getStatus", "()Lnet.minecraft.network.play.client.C16PacketClientStatus$EnumState;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C16PacketClientStatus$EnumState
 * Enclosing class: net.minecraft.network.play.client.C16PacketClientStatus
 * Package name: net.minecraft.network.play.client
 */
class C16PacketClientStatus_EnumState : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C16PacketClientStatus$EnumState";
public:
    STATICINITIALIZE;

    C16PacketClientStatus_EnumState(jobject object) : JavaObject(object) {}

    static C16PacketClientStatus_EnumState valueOf(String arg0) { return C16PacketClientStatus_EnumState(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.play.client.C16PacketClientStatus$EnumState;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C0FPacketConfirmTransaction
 * Package name: net.minecraft.network.play.client
 */
class C0FPacketConfirmTransaction : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C0FPacketConfirmTransaction";
public:
    STATICINITIALIZE;

    C0FPacketConfirmTransaction(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    int getWindowId() { return int(*javaClass->invokeMethod<int>(this->object, "getWindowId", "()I", )); }

    short getUid() { return short(*javaClass->invokeMethod<short>(this->object, "getUid", "()S", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C11PacketEnchantItem
 * Package name: net.minecraft.network.play.client
 */
class C11PacketEnchantItem : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C11PacketEnchantItem";
public:
    STATICINITIALIZE;

    C11PacketEnchantItem(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    int getWindowId() { return int(*javaClass->invokeMethod<int>(this->object, "getWindowId", "()I", )); }

    int getButton() { return int(*javaClass->invokeMethod<int>(this->object, "getButton", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C0EPacketClickWindow
 * Package name: net.minecraft.network.play.client
 */
class C0EPacketClickWindow : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C0EPacketClickWindow";
public:
    STATICINITIALIZE;

    C0EPacketClickWindow(jobject object) : JavaObject(object) {}

    int getUsedButton() { return int(*javaClass->invokeMethod<int>(this->object, "getUsedButton", "()I", )); }

    ItemStack getClickedItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getClickedItem", "()Lnet.minecraft.item.ItemStack;", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    int getWindowId() { return int(*javaClass->invokeMethod<int>(this->object, "getWindowId", "()I", )); }

    short getActionNumber() { return short(*javaClass->invokeMethod<short>(this->object, "getActionNumber", "()S", )); }

    int getSlotId() { return int(*javaClass->invokeMethod<int>(this->object, "getSlotId", "()I", )); }

    int getMode() { return int(*javaClass->invokeMethod<int>(this->object, "getMode", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C0DPacketCloseWindow
 * Package name: net.minecraft.network.play.client
 */
class C0DPacketCloseWindow : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C0DPacketCloseWindow";
public:
    STATICINITIALIZE;

    C0DPacketCloseWindow(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C17PacketCustomPayload
 * Package name: net.minecraft.network.play.client
 */
class C17PacketCustomPayload : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C17PacketCustomPayload";
public:
    STATICINITIALIZE;

    C17PacketCustomPayload(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    String getChannelName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getChannelName", "()Ljava.lang.String;", )); }

    PacketBuffer getBufferData() { return PacketBuffer(*javaClass->invokeMethod<jobject>(this->object, "getBufferData", "()Lnet.minecraft.network.PacketBuffer;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C02PacketUseEntity
 * Package name: net.minecraft.network.play.client
 */
class C02PacketUseEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C02PacketUseEntity";
public:
    STATICINITIALIZE;

    C02PacketUseEntity(jobject object) : JavaObject(object) {}

    Entity getEntityFromWorld(World arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntityFromWorld", "(Lnet.minecraft.world.World;)Lnet.minecraft.entity.Entity;", arg0)); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    Vec3 getHitVec() { return Vec3(*javaClass->invokeMethod<jobject>(this->object, "getHitVec", "()Lnet.minecraft.util.Vec3;", )); }

    C02PacketUseEntity_Action getAction() { return C02PacketUseEntity_Action(*javaClass->invokeMethod<jobject>(this->object, "getAction", "()Lnet.minecraft.network.play.client.C02PacketUseEntity$Action;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C02PacketUseEntity$Action
 * Enclosing class: net.minecraft.network.play.client.C02PacketUseEntity
 * Package name: net.minecraft.network.play.client
 */
class C02PacketUseEntity_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C02PacketUseEntity$Action";
public:
    STATICINITIALIZE;

    C02PacketUseEntity_Action(jobject object) : JavaObject(object) {}

    static C02PacketUseEntity_Action valueOf(String arg0) { return C02PacketUseEntity_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.play.client.C02PacketUseEntity$Action;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C00PacketKeepAlive
 * Package name: net.minecraft.network.play.client
 */
class C00PacketKeepAlive : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C00PacketKeepAlive";
public:
    STATICINITIALIZE;

    C00PacketKeepAlive(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    int getKey() { return int(*javaClass->invokeMethod<int>(this->object, "getKey", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C03PacketPlayer
 * Package name: net.minecraft.network.play.client
 */
class C03PacketPlayer : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C03PacketPlayer";
public:
    STATICINITIALIZE;

    C03PacketPlayer(jobject object) : JavaObject(object) {}

    double getPositionX() { return double(*javaClass->invokeMethod<double>(this->object, "getPositionX", "()D", )); }

    double getPositionY() { return double(*javaClass->invokeMethod<double>(this->object, "getPositionY", "()D", )); }

    double getPositionZ() { return double(*javaClass->invokeMethod<double>(this->object, "getPositionZ", "()D", )); }

    bool getRotating() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getRotating", "()Z", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    bool isOnGround() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOnGround", "()Z", )); }

    bool isMoving() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMoving", "()Z", )); }

    void setMoving(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setMoving", "(Z)V", arg0)); }

    float getPitch() { return float(*javaClass->invokeMethod<float>(this->object, "getPitch", "()F", )); }

    float getYaw() { return float(*javaClass->invokeMethod<float>(this->object, "getYaw", "()F", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C13PacketPlayerAbilities
 * Package name: net.minecraft.network.play.client
 */
class C13PacketPlayerAbilities : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C13PacketPlayerAbilities";
public:
    STATICINITIALIZE;

    C13PacketPlayerAbilities(jobject object) : JavaObject(object) {}

    void setInvulnerable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setInvulnerable", "(Z)V", arg0)); }

    void setAllowFlying(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAllowFlying", "(Z)V", arg0)); }

    void setCreativeMode(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCreativeMode", "(Z)V", arg0)); }

    void setWalkSpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setWalkSpeed", "(F)V", arg0)); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    bool isInvulnerable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvulnerable", "()Z", )); }

    bool isAllowFlying() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAllowFlying", "()Z", )); }

    void setFlySpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setFlySpeed", "(F)V", arg0)); }

    bool isCreativeMode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCreativeMode", "()Z", )); }

    void setFlying(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setFlying", "(Z)V", arg0)); }

    bool isFlying() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlying", "()Z", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C07PacketPlayerDigging
 * Package name: net.minecraft.network.play.client
 */
class C07PacketPlayerDigging : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C07PacketPlayerDigging";
public:
    STATICINITIALIZE;

    C07PacketPlayerDigging(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    C07PacketPlayerDigging_Action getStatus() { return C07PacketPlayerDigging_Action(*javaClass->invokeMethod<jobject>(this->object, "getStatus", "()Lnet.minecraft.network.play.client.C07PacketPlayerDigging$Action;", )); }

    EnumFacing getFacing() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "getFacing", "()Lnet.minecraft.util.EnumFacing;", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C07PacketPlayerDigging$Action
 * Enclosing class: net.minecraft.network.play.client.C07PacketPlayerDigging
 * Package name: net.minecraft.network.play.client
 */
class C07PacketPlayerDigging_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C07PacketPlayerDigging$Action";
public:
    STATICINITIALIZE;

    C07PacketPlayerDigging_Action(jobject object) : JavaObject(object) {}

    static C07PacketPlayerDigging_Action valueOf(String arg0) { return C07PacketPlayerDigging_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.play.client.C07PacketPlayerDigging$Action;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C0BPacketEntityAction
 * Package name: net.minecraft.network.play.client
 */
class C0BPacketEntityAction : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C0BPacketEntityAction";
public:
    STATICINITIALIZE;

    C0BPacketEntityAction(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getAuxData() { return int(*javaClass->invokeMethod<int>(this->object, "getAuxData", "()I", )); }

    C0BPacketEntityAction_Action getAction() { return C0BPacketEntityAction_Action(*javaClass->invokeMethod<jobject>(this->object, "getAction", "()Lnet.minecraft.network.play.client.C0BPacketEntityAction$Action;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C0BPacketEntityAction$Action
 * Enclosing class: net.minecraft.network.play.client.C0BPacketEntityAction
 * Package name: net.minecraft.network.play.client
 */
class C0BPacketEntityAction_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C0BPacketEntityAction$Action";
public:
    STATICINITIALIZE;

    C0BPacketEntityAction_Action(jobject object) : JavaObject(object) {}

    static C0BPacketEntityAction_Action valueOf(String arg0) { return C0BPacketEntityAction_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.play.client.C0BPacketEntityAction$Action;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C0CPacketInput
 * Package name: net.minecraft.network.play.client
 */
class C0CPacketInput : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C0CPacketInput";
public:
    STATICINITIALIZE;

    C0CPacketInput(jobject object) : JavaObject(object) {}

    float getStrafeSpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getStrafeSpeed", "()F", )); }

    float getForwardSpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getForwardSpeed", "()F", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    bool isJumping() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isJumping", "()Z", )); }

    bool isSneaking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSneaking", "()Z", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C09PacketHeldItemChange
 * Package name: net.minecraft.network.play.client
 */
class C09PacketHeldItemChange : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C09PacketHeldItemChange";
public:
    STATICINITIALIZE;

    C09PacketHeldItemChange(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getSlotId() { return int(*javaClass->invokeMethod<int>(this->object, "getSlotId", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C12PacketUpdateSign
 * Package name: net.minecraft.network.play.client
 */
class C12PacketUpdateSign : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C12PacketUpdateSign";
public:
    STATICINITIALIZE;

    C12PacketUpdateSign(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C18PacketSpectate
 * Package name: net.minecraft.network.play.client
 */
class C18PacketSpectate : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C18PacketSpectate";
public:
    STATICINITIALIZE;

    C18PacketSpectate(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    Entity getEntity(WorldServer arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntity", "(Lnet.minecraft.world.WorldServer;)Lnet.minecraft.entity.Entity;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C19PacketResourcePackStatus
 * Package name: net.minecraft.network.play.client
 */
class C19PacketResourcePackStatus : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C19PacketResourcePackStatus";
public:
    STATICINITIALIZE;

    C19PacketResourcePackStatus(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C0APacketAnimation
 * Package name: net.minecraft.network.play.client
 */
class C0APacketAnimation : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C0APacketAnimation";
public:
    STATICINITIALIZE;

    C0APacketAnimation(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.client.C10PacketCreativeInventoryAction
 * Package name: net.minecraft.network.play.client
 */
class C10PacketCreativeInventoryAction : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C10PacketCreativeInventoryAction";
public:
    STATICINITIALIZE;

    C10PacketCreativeInventoryAction(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    int getSlotId() { return int(*javaClass->invokeMethod<int>(this->object, "getSlotId", "()I", )); }

    ItemStack getStack() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getStack", "()Lnet.minecraft.item.ItemStack;", )); }

};


/**
 * Classpath: net.minecraft.network.play.client.C08PacketPlayerBlockPlacement
 * Package name: net.minecraft.network.play.client
 */
class C08PacketPlayerBlockPlacement : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.client.C08PacketPlayerBlockPlacement";
public:
    STATICINITIALIZE;

    C08PacketPlayerBlockPlacement(jobject object) : JavaObject(object) {}

    int getPlacedBlockDirection() { return int(*javaClass->invokeMethod<int>(this->object, "getPlacedBlockDirection", "()I", )); }

    float getPlacedBlockOffsetX() { return float(*javaClass->invokeMethod<float>(this->object, "getPlacedBlockOffsetX", "()F", )); }

    float getPlacedBlockOffsetY() { return float(*javaClass->invokeMethod<float>(this->object, "getPlacedBlockOffsetY", "()F", )); }

    float getPlacedBlockOffsetZ() { return float(*javaClass->invokeMethod<float>(this->object, "getPlacedBlockOffsetZ", "()F", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayServer arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayServer;)V", arg0)); }

    ItemStack getStack() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getStack", "()Lnet.minecraft.item.ItemStack;", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.entity.player.EntityPlayer$EnumChatVisibility
 * Enclosing class: net.minecraft.entity.player.EntityPlayer
 * Package name: net.minecraft.entity.player
 */
class EntityPlayer_EnumChatVisibility : public Enum {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayer$EnumChatVisibility";
public:
    STATICINITIALIZE;

    EntityPlayer_EnumChatVisibility(jobject object) : JavaObject(object) {}

    String getResourceKey() { return String(*javaClass->invokeMethod<jobject>(this->object, "getResourceKey", "()Ljava.lang.String;", )); }

    int getChatVisibility() { return int(*javaClass->invokeMethod<int>(this->object, "getChatVisibility", "()I", )); }

    static EntityPlayer_EnumChatVisibility getEnumChatVisibility(int arg0) { return EntityPlayer_EnumChatVisibility(*javaClass->invokeStaticMethod<jobject>(this->object, "getEnumChatVisibility", "(I)Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;", arg0)); }

    static EntityPlayer_EnumChatVisibility valueOf(String arg0) { return EntityPlayer_EnumChatVisibility(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.DataWatcher
 * Package name: net.minecraft.entity
 */
class DataWatcher : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.DataWatcher";
public:
    STATICINITIALIZE;

    DataWatcher(jobject object) : JavaObject(object) {}

    short getWatchableObjectShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getWatchableObjectShort", "(I)S", arg0)); }

    String getWatchableObjectString(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getWatchableObjectString", "(I)Ljava.lang.String;", arg0)); }

    int getWatchableObjectInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getWatchableObjectInt", "(I)I", arg0)); }

    void updateObject(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "updateObject", "(ILjava.lang.Object;)V", arg0, arg1)); }

    void addObjectByDataType(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addObjectByDataType", "(II)V", arg0, arg1)); }

    void setObjectWatched(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setObjectWatched", "(I)V", arg0)); }

    DataWatcher_WatchableObject getWatchedObject(int arg0) { return DataWatcher_WatchableObject(*javaClass->invokeMethod<jobject>(this->object, "getWatchedObject", "(I)Lnet.minecraft.entity.DataWatcher$WatchableObject;", arg0)); }

    bool hasObjectChanged() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasObjectChanged", "()Z", )); }

    void func_111144_e() { (*javaClass->invokeMethod<void>(this->object, "func_111144_e", "()V", )); }

    byte getWatchableObjectByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getWatchableObjectByte", "(I)B", arg0)); }

    float getWatchableObjectFloat(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getWatchableObjectFloat", "(I)F", arg0)); }

    List getAllWatched() { return List(*javaClass->invokeMethod<jobject>(this->object, "getAllWatched", "()Ljava.util.List;", )); }

    List getChanged() { return List(*javaClass->invokeMethod<jobject>(this->object, "getChanged", "()Ljava.util.List;", )); }

    bool getIsBlank() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsBlank", "()Z", )); }

    void addObject(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "addObject", "(ILjava.lang.Object;)V", arg0, arg1)); }

    void updateWatchedObjectsFromList(List arg0) { (*javaClass->invokeMethod<void>(this->object, "updateWatchedObjectsFromList", "(Ljava.util.List;)V", arg0)); }

    ItemStack getWatchableObjectItemStack(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getWatchableObjectItemStack", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    Rotations getWatchableObjectRotations(int arg0) { return Rotations(*javaClass->invokeMethod<jobject>(this->object, "getWatchableObjectRotations", "(I)Lnet.minecraft.util.Rotations;", arg0)); }

    static void writeWatchedListToPacketBuffer(List arg0, PacketBuffer arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "writeWatchedListToPacketBuffer", "(Ljava.util.List;Lnet.minecraft.network.PacketBuffer;)V", arg0, arg1)); }

    static void writeWatchableObjectToPacketBuffer(PacketBuffer arg0, DataWatcher_WatchableObject arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "writeWatchableObjectToPacketBuffer", "(Lnet.minecraft.network.PacketBuffer;Lnet.minecraft.entity.DataWatcher$WatchableObject;)V", arg0, arg1)); }

    static List readWatchedListFromPacketBuffer(PacketBuffer arg0) { return List(*javaClass->invokeStaticMethod<jobject>(this->object, "readWatchedListFromPacketBuffer", "(Lnet.minecraft.network.PacketBuffer;)Ljava.util.List;", arg0)); }

    void writeTo(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writeTo", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.DataWatcher$WatchableObject
 * Enclosing class: net.minecraft.entity.DataWatcher
 * Package name: net.minecraft.entity
 */
class DataWatcher_WatchableObject : public Object {
protected:
    const inline static char *className = "net.minecraft.entity.DataWatcher$WatchableObject";
public:
    STATICINITIALIZE;

    DataWatcher_WatchableObject(jobject object) : JavaObject(object) {}

    int getDataValueId() { return int(*javaClass->invokeMethod<int>(this->object, "getDataValueId", "()I", )); }

    void setWatched(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setWatched", "(Z)V", arg0)); }

    bool isWatched() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWatched", "()Z", )); }

    Object getObject() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getObject", "()Ljava.lang.Object;", )); }

    int getObjectType() { return int(*javaClass->invokeMethod<int>(this->object, "getObjectType", "()I", )); }

    void setObject(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "setObject", "(Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.util.Rotations
 * Package name: net.minecraft.util
 */
class Rotations : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Rotations";
public:
    STATICINITIALIZE;

    Rotations(jobject object) : JavaObject(object) {}

    float getX() { return float(*javaClass->invokeMethod<float>(this->object, "getX", "()F", )); }

    float getY() { return float(*javaClass->invokeMethod<float>(this->object, "getY", "()F", )); }

    float getZ() { return float(*javaClass->invokeMethod<float>(this->object, "getZ", "()F", )); }

    NBTTagList writeToNBT() { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "writeToNBT", "()Lnet.minecraft.nbt.NBTTagList;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.BlockRendererDispatcher
 * Package name: net.minecraft.client.renderer
 */
class BlockRendererDispatcher : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockRendererDispatcher";
public:
    STATICINITIALIZE;

    BlockRendererDispatcher(jobject object) : JavaObject(object) {}

    void onResourceManagerReload(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "onResourceManagerReload", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    void renderBlockDamage(IBlockState arg0, BlockPos arg1, TextureAtlasSprite arg2, IBlockAccess arg3) { (*javaClass->invokeMethod<void>(this->object, "renderBlockDamage", "(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;Lnet.minecraft.world.IBlockAccess;)V", arg0, arg1, arg2, arg3)); }

    bool renderBlock(IBlockState arg0, BlockPos arg1, IBlockAccess arg2, WorldRenderer arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderBlock", "(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.renderer.WorldRenderer;)Z", arg0, arg1, arg2, arg3)); }

    IBakedModel getModelFromBlockState(IBlockState arg0, IBlockAccess arg1, BlockPos arg2) { return IBakedModel(*javaClass->invokeMethod<jobject>(this->object, "getModelFromBlockState", "(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.client.resources.model.IBakedModel;", arg0, arg1, arg2)); }

    BlockModelRenderer getBlockModelRenderer() { return BlockModelRenderer(*javaClass->invokeMethod<jobject>(this->object, "getBlockModelRenderer", "()Lnet.minecraft.client.renderer.BlockModelRenderer;", )); }

    IBakedModel getBakedModel(IBlockState arg0, BlockPos arg1) { return IBakedModel(*javaClass->invokeMethod<jobject>(this->object, "getBakedModel", "(Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;)Lnet.minecraft.client.resources.model.IBakedModel;", arg0, arg1)); }

    void renderBlockBrightness(IBlockState arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "renderBlockBrightness", "(Lnet.minecraft.block.state.IBlockState;F)V", arg0, arg1)); }

    bool isRenderTypeChest(Block arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRenderTypeChest", "(Lnet.minecraft.block.Block;I)Z", arg0, arg1)); }

    BlockModelShapes getBlockModelShapes() { return BlockModelShapes(*javaClass->invokeMethod<jobject>(this->object, "getBlockModelShapes", "()Lnet.minecraft.client.renderer.BlockModelShapes;", )); }

};


/**
 * Classpath: net.minecraft.client.resources.IResourceManager
 * Package name: net.minecraft.client.resources
 */
class IResourceManager : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.IResourceManager";
public:
    STATICINITIALIZE;

    IResourceManager(jobject object) : JavaObject(object) {}

    Set getResourceDomains() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getResourceDomains", "()Ljava.util.Set;", )); }

    List getAllResources(ResourceLocation arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getAllResources", "(Lnet.minecraft.util.ResourceLocation;)Ljava.util.List;", arg0)); }

    IResource getResource(ResourceLocation arg0) { return IResource(*javaClass->invokeMethod<jobject>(this->object, "getResource", "(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.resources.IResource;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.resources.IResource
 * Package name: net.minecraft.client.resources
 */
class IResource : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.IResource";
public:
    STATICINITIALIZE;

    IResource(jobject object) : JavaObject(object) {}

    ResourceLocation getResourceLocation() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getResourceLocation", "()Lnet.minecraft.util.ResourceLocation;", )); }

    bool hasMetadata() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasMetadata", "()Z", )); }

    IMetadataSection getMetadata(String arg0) { return IMetadataSection(*javaClass->invokeMethod<jobject>(this->object, "getMetadata", "(Ljava.lang.String;)Lnet.minecraft.client.resources.data.IMetadataSection;", arg0)); }

    String getResourcePackName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getResourcePackName", "()Ljava.lang.String;", )); }

    InputStream getInputStream() { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "getInputStream", "()Ljava.io.InputStream;", )); }

};


/**
 * Classpath: net.minecraft.client.resources.data.IMetadataSection
 * Package name: net.minecraft.client.resources.data
 */
class IMetadataSection : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.data.IMetadataSection";
public:
    STATICINITIALIZE;

    IMetadataSection(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.renderer.texture.TextureAtlasSprite
 * Package name: net.minecraft.client.renderer.texture
 */
class TextureAtlasSprite : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.TextureAtlasSprite";
public:
    STATICINITIALIZE;

    TextureAtlasSprite(jobject object) : JavaObject(object) {}

    static void setLocationNameClock(String arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setLocationNameClock", "(Ljava.lang.String;)V", arg0)); }

    static void setLocationNameCompass(String arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setLocationNameCompass", "(Ljava.lang.String;)V", arg0)); }

    float getInterpolatedU(double arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getInterpolatedU", "(D)F", arg0)); }

    float getInterpolatedV(double arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getInterpolatedV", "(D)F", arg0)); }

    int getFrameCount() { return int(*javaClass->invokeMethod<int>(this->object, "getFrameCount", "()I", )); }

    void resetSprite() { (*javaClass->invokeMethod<void>(this->object, "resetSprite", "()V", )); }

    void allocateFrameTextureData(int arg0) { (*javaClass->invokeMethod<void>(this->object, "allocateFrameTextureData", "(I)V", arg0)); }

    void clearFramesTextureData() { (*javaClass->invokeMethod<void>(this->object, "clearFramesTextureData", "()V", )); }

    void setIconWidth(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconWidth", "(I)V", arg0)); }

    void setIconHeight(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconHeight", "(I)V", arg0)); }

    void setFramesTextureData(List arg0) { (*javaClass->invokeMethod<void>(this->object, "setFramesTextureData", "(Ljava.util.List;)V", arg0)); }

    String getIconName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getIconName", "()Ljava.lang.String;", )); }

    int getIconWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getIconWidth", "()I", )); }

    int getIconHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getIconHeight", "()I", )); }

    void generateMipmaps(int arg0) { (*javaClass->invokeMethod<void>(this->object, "generateMipmaps", "(I)V", arg0)); }

    bool hasAnimationMetadata() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasAnimationMetadata", "()Z", )); }

    static TextureAtlasSprite makeAtlasSprite(ResourceLocation arg0) { return TextureAtlasSprite(*javaClass->invokeStaticMethod<jobject>(this->object, "makeAtlasSprite", "(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", arg0)); }

    void updateAnimation() { (*javaClass->invokeMethod<void>(this->object, "updateAnimation", "()V", )); }

    void initSprite(int arg0, int arg1, int arg2, int arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "initSprite", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }

    float getMinU() { return float(*javaClass->invokeMethod<float>(this->object, "getMinU", "()F", )); }

    float getMaxV() { return float(*javaClass->invokeMethod<float>(this->object, "getMaxV", "()F", )); }

    float getMaxU() { return float(*javaClass->invokeMethod<float>(this->object, "getMaxU", "()F", )); }

    float getMinV() { return float(*javaClass->invokeMethod<float>(this->object, "getMinV", "()F", )); }

    void loadSprite(BufferedImage_interface arg0, AnimationMetadataSection arg1) { (*javaClass->invokeMethod<void>(this->object, "loadSprite", "([Ljava.awt.image.BufferedImage;Lnet.minecraft.client.resources.data.AnimationMetadataSection;)V", arg0, arg1)); }

    int getOriginX() { return int(*javaClass->invokeMethod<int>(this->object, "getOriginX", "()I", )); }

    int getOriginY() { return int(*javaClass->invokeMethod<int>(this->object, "getOriginY", "()I", )); }

    void updateAnimationInterpolated() { (*javaClass->invokeMethod<void>(this->object, "updateAnimationInterpolated", "()V", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void copyFrom(TextureAtlasSprite arg0) { (*javaClass->invokeMethod<void>(this->object, "copyFrom", "(Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;)V", arg0)); }

};


/**
 * Classpath: [Ljava.awt.image.BufferedImage;
 */
class BufferedImage_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.image.BufferedImage;";
public:
    STATICINITIALIZE;

    BufferedImage_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.resources.data.AnimationMetadataSection
 * Package name: net.minecraft.client.resources.data
 */
class AnimationMetadataSection : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.data.AnimationMetadataSection";
public:
    STATICINITIALIZE;

    AnimationMetadataSection(jobject object) : JavaObject(object) {}

    int getFrameHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getFrameHeight", "()I", )); }

    int getFrameWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getFrameWidth", "()I", )); }

    AnimationFrame getAnimationFrame(int arg0) { return AnimationFrame(*javaClass->invokeMethod<jobject>(this->object, "getAnimationFrame", "(I)Lnet.minecraft.client.resources.data.AnimationFrame;", arg0)); }

    bool frameHasTime(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "frameHasTime", "(I)Z", arg0)); }

    int getFrameTimeSingle(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getFrameTimeSingle", "(I)I", arg0)); }

    int getFrameIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getFrameIndex", "(I)I", arg0)); }

    int getFrameCount() { return int(*javaClass->invokeMethod<int>(this->object, "getFrameCount", "()I", )); }

    bool isInterpolate() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInterpolate", "()Z", )); }

    Set getFrameIndexSet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getFrameIndexSet", "()Ljava.util.Set;", )); }

    int getFrameTime() { return int(*javaClass->invokeMethod<int>(this->object, "getFrameTime", "()I", )); }

};


/**
 * Classpath: net.minecraft.client.resources.data.AnimationFrame
 * Package name: net.minecraft.client.resources.data
 */
class AnimationFrame : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.data.AnimationFrame";
public:
    STATICINITIALIZE;

    AnimationFrame(jobject object) : JavaObject(object) {}

    int getFrameIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getFrameIndex", "()I", )); }

    int getFrameTime() { return int(*javaClass->invokeMethod<int>(this->object, "getFrameTime", "()I", )); }

    bool hasNoTime() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNoTime", "()Z", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.WorldRenderer
 * Package name: net.minecraft.client.renderer
 */
class WorldRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.WorldRenderer";
public:
    STATICINITIALIZE;

    WorldRenderer(jobject object) : JavaObject(object) {}

    void func_181670_b(int arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181670_b", "(I)V", arg0)); }

    void func_181674_a(float arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "func_181674_a", "(FFF)V", arg0, arg1, arg2)); }

    static float func_181665_a(FloatBuffer arg0, float arg1, float arg2, float arg3, int arg4, int arg5) { return float(*javaClass->invokeStaticMethod<float>(this->object, "func_181665_a", "(Ljava.nio.FloatBuffer;FFFII)F", arg0, arg1, arg2, arg3, arg4, arg5)); }

    WorldRenderer_State func_181672_a() { return WorldRenderer_State(*javaClass->invokeMethod<jobject>(this->object, "func_181672_a", "()Lnet.minecraft.client.renderer.WorldRenderer$State;", )); }

    int func_181664_j() { return int(*javaClass->invokeMethod<int>(this->object, "func_181664_j", "()I", )); }

    void setVertexState(WorldRenderer_State arg0) { (*javaClass->invokeMethod<void>(this->object, "setVertexState", "(Lnet.minecraft.client.renderer.WorldRenderer$State;)V", arg0)); }

    int getVertexCount() { return int(*javaClass->invokeMethod<int>(this->object, "getVertexCount", "()I", )); }

    VertexFormat getVertexFormat() { return VertexFormat(*javaClass->invokeMethod<jobject>(this->object, "getVertexFormat", "()Lnet.minecraft.client.renderer.vertex.VertexFormat;", )); }

    void func_181667_k() { (*javaClass->invokeMethod<void>(this->object, "func_181667_k", "()V", )); }

    void putBrightness4(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBrightness4", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void putPosition(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "putPosition", "(DDD)V", arg0, arg1, arg2)); }

    void putColorMultiplier(float arg0, float arg1, float arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putColorMultiplier", "(FFFI)V", arg0, arg1, arg2, arg3)); }

    void putColorRGBA(int arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "putColorRGBA", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void putColorRGB_F(float arg0, float arg1, float arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putColorRGB_F", "(FFFI)V", arg0, arg1, arg2, arg3)); }

    void finishDrawing() { (*javaClass->invokeMethod<void>(this->object, "finishDrawing", "()V", )); }

    int getDrawMode() { return int(*javaClass->invokeMethod<int>(this->object, "getDrawMode", "()I", )); }

    void putColorRGB_F4(float arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "putColorRGB_F4", "(FFF)V", arg0, arg1, arg2)); }

    void setTranslation(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setTranslation", "(DDD)V", arg0, arg1, arg2)); }

    void addVertexData(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "addVertexData", "([I)V", arg0)); }

    int getColorIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getColorIndex", "(I)I", arg0)); }

    void putColor(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "putColor", "(II)V", arg0, arg1)); }

    WorldRenderer lightmap(int arg0, int arg1) { return WorldRenderer(*javaClass->invokeMethod<jobject>(this->object, "lightmap", "(II)Lnet.minecraft.client.renderer.WorldRenderer;", arg0, arg1)); }

    WorldRenderer tex(double arg0, double arg1) { return WorldRenderer(*javaClass->invokeMethod<jobject>(this->object, "tex", "(DD)Lnet.minecraft.client.renderer.WorldRenderer;", arg0, arg1)); }

    void endVertex() { (*javaClass->invokeMethod<void>(this->object, "endVertex", "()V", )); }

    void markDirty() { (*javaClass->invokeMethod<void>(this->object, "markDirty", "()V", )); }

    void putNormal(float arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "putNormal", "(FFF)V", arg0, arg1, arg2)); }

    void putColor4(int arg0) { (*javaClass->invokeMethod<void>(this->object, "putColor4", "(I)V", arg0)); }

    void begin(int arg0, VertexFormat arg1) { (*javaClass->invokeMethod<void>(this->object, "begin", "(ILnet.minecraft.client.renderer.vertex.VertexFormat;)V", arg0, arg1)); }

    WorldRenderer pos(double arg0, double arg1, double arg2) { return WorldRenderer(*javaClass->invokeMethod<jobject>(this->object, "pos", "(DDD)Lnet.minecraft.client.renderer.WorldRenderer;", arg0, arg1, arg2)); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    ByteBuffer getByteBuffer() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "getByteBuffer", "()Ljava.nio.ByteBuffer;", )); }

    WorldRenderer color(int arg0, int arg1, int arg2, int arg3) { return WorldRenderer(*javaClass->invokeMethod<jobject>(this->object, "color", "(IIII)Lnet.minecraft.client.renderer.WorldRenderer;", arg0, arg1, arg2, arg3)); }

    WorldRenderer color(float arg0, float arg1, float arg2, float arg3) { return WorldRenderer(*javaClass->invokeMethod<jobject>(this->object, "color", "(FFFF)Lnet.minecraft.client.renderer.WorldRenderer;", arg0, arg1, arg2, arg3)); }

    WorldRenderer normal(float arg0, float arg1, float arg2) { return WorldRenderer(*javaClass->invokeMethod<jobject>(this->object, "normal", "(FFF)Lnet.minecraft.client.renderer.WorldRenderer;", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.client.renderer.WorldRenderer$State
 * Enclosing class: net.minecraft.client.renderer.WorldRenderer
 * Package name: net.minecraft.client.renderer
 */
class WorldRenderer_State : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.WorldRenderer$State";
public:
    STATICINITIALIZE;

    WorldRenderer_State(jobject object) : JavaObject(object) {}

    int getVertexCount() { return int(*javaClass->invokeMethod<int>(this->object, "getVertexCount", "()I", )); }

    VertexFormat getVertexFormat() { return VertexFormat(*javaClass->invokeMethod<jobject>(this->object, "getVertexFormat", "()Lnet.minecraft.client.renderer.vertex.VertexFormat;", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.vertex.VertexFormat
 * Package name: net.minecraft.client.renderer.vertex
 */
class VertexFormat : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormat";
public:
    STATICINITIALIZE;

    VertexFormat(jobject object) : JavaObject(object) {}

    int func_181719_f() { return int(*javaClass->invokeMethod<int>(this->object, "func_181719_f", "()I", )); }

    int getNextOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getNextOffset", "()I", )); }

    int func_181720_d(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "func_181720_d", "(I)I", arg0)); }

    int getUvOffsetById(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUvOffsetById", "(I)I", arg0)); }

    int getColorOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getColorOffset", "()I", )); }

    int getNormalOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getNormalOffset", "()I", )); }

    int getElementCount() { return int(*javaClass->invokeMethod<int>(this->object, "getElementCount", "()I", )); }

    VertexFormat func_181721_a(VertexFormatElement arg0) { return VertexFormat(*javaClass->invokeMethod<jobject>(this->object, "func_181721_a", "(Lnet.minecraft.client.renderer.vertex.VertexFormatElement;)Lnet.minecraft.client.renderer.vertex.VertexFormat;", arg0)); }

    bool hasPosition() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPosition", "()Z", )); }

    bool hasUvOffset(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasUvOffset", "(I)Z", arg0)); }

    List getElements() { return List(*javaClass->invokeMethod<jobject>(this->object, "getElements", "()Ljava.util.List;", )); }

    bool hasNormal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNormal", "()Z", )); }

    VertexFormatElement getElement(int arg0) { return VertexFormatElement(*javaClass->invokeMethod<jobject>(this->object, "getElement", "(I)Lnet.minecraft.client.renderer.vertex.VertexFormatElement;", arg0)); }

    bool hasColor() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasColor", "()Z", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.vertex.VertexFormatElement
 * Package name: net.minecraft.client.renderer.vertex
 */
class VertexFormatElement : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormatElement";
public:
    STATICINITIALIZE;

    VertexFormatElement(jobject object) : JavaObject(object) {}

    int getElementCount() { return int(*javaClass->invokeMethod<int>(this->object, "getElementCount", "()I", )); }

    bool isPositionElement() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPositionElement", "()Z", )); }

    bool func_177372_a(int arg0, VertexFormatElement_EnumUsage arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_177372_a", "(ILnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage;)Z", arg0, arg1)); }

    VertexFormatElement_EnumUsage getUsage() { return VertexFormatElement_EnumUsage(*javaClass->invokeMethod<jobject>(this->object, "getUsage", "()Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    VertexFormatElement_EnumType getType() { return VertexFormatElement_EnumType(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumType;", )); }

    int getSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSize", "()I", )); }

    int getIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getIndex", "()I", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage
 * Enclosing class: net.minecraft.client.renderer.vertex.VertexFormatElement
 * Package name: net.minecraft.client.renderer.vertex
 */
class VertexFormatElement_EnumUsage : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage";
public:
    STATICINITIALIZE;

    VertexFormatElement_EnumUsage(jobject object) : JavaObject(object) {}

    static VertexFormatElement_EnumUsage valueOf(String arg0) { return VertexFormatElement_EnumUsage(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumUsage;", arg0)); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType
 * Enclosing class: net.minecraft.client.renderer.vertex.VertexFormatElement
 * Package name: net.minecraft.client.renderer.vertex
 */
class VertexFormatElement_EnumType : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.renderer.vertex.VertexFormatElement$EnumType";
public:
    STATICINITIALIZE;

    VertexFormatElement_EnumType(jobject object) : JavaObject(object) {}

    int getGlConstant() { return int(*javaClass->invokeMethod<int>(this->object, "getGlConstant", "()I", )); }

    static VertexFormatElement_EnumType valueOf(String arg0) { return VertexFormatElement_EnumType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.renderer.vertex.VertexFormatElement$EnumType;", arg0)); }

    int getSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSize", "()I", )); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.client.resources.model.IBakedModel
 * Package name: net.minecraft.client.resources.model
 */
class IBakedModel : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.model.IBakedModel";
public:
    STATICINITIALIZE;

    IBakedModel(jobject object) : JavaObject(object) {}

    bool isAmbientOcclusion() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAmbientOcclusion", "()Z", )); }

    TextureAtlasSprite getParticleTexture() { return TextureAtlasSprite(*javaClass->invokeMethod<jobject>(this->object, "getParticleTexture", "()Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", )); }

    List getFaceQuads(EnumFacing arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getFaceQuads", "(Lnet.minecraft.util.EnumFacing;)Ljava.util.List;", arg0)); }

    List getGeneralQuads() { return List(*javaClass->invokeMethod<jobject>(this->object, "getGeneralQuads", "()Ljava.util.List;", )); }

    bool isBuiltInRenderer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBuiltInRenderer", "()Z", )); }

    ItemCameraTransforms getItemCameraTransforms() { return ItemCameraTransforms(*javaClass->invokeMethod<jobject>(this->object, "getItemCameraTransforms", "()Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms;", )); }

    bool isGui3d() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isGui3d", "()Z", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.block.model.ItemCameraTransforms
 * Package name: net.minecraft.client.renderer.block.model
 */
class ItemCameraTransforms : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.model.ItemCameraTransforms";
public:
    STATICINITIALIZE;

    ItemCameraTransforms(jobject object) : JavaObject(object) {}

    bool func_181687_c(ItemCameraTransforms_TransformType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181687_c", "(Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)Z", arg0)); }

    void applyTransform(ItemCameraTransforms_TransformType arg0) { (*javaClass->invokeMethod<void>(this->object, "applyTransform", "(Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V", arg0)); }

    ItemTransformVec3f getTransform(ItemCameraTransforms_TransformType arg0) { return ItemTransformVec3f(*javaClass->invokeMethod<jobject>(this->object, "getTransform", "(Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)Lnet.minecraft.client.renderer.block.model.ItemTransformVec3f;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType
 * Enclosing class: net.minecraft.client.renderer.block.model.ItemCameraTransforms
 * Package name: net.minecraft.client.renderer.block.model
 */
class ItemCameraTransforms_TransformType : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType";
public:
    STATICINITIALIZE;

    ItemCameraTransforms_TransformType(jobject object) : JavaObject(object) {}

    static ItemCameraTransforms_TransformType valueOf(String arg0) { return ItemCameraTransforms_TransformType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.block.model.ItemTransformVec3f
 * Package name: net.minecraft.client.renderer.block.model
 */
class ItemTransformVec3f : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.model.ItemTransformVec3f";
public:
    STATICINITIALIZE;

    ItemTransformVec3f(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.BlockModelRenderer
 * Package name: net.minecraft.client.renderer
 */
class BlockModelRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockModelRenderer";
public:
    STATICINITIALIZE;

    BlockModelRenderer(jobject object) : JavaObject(object) {}

    bool renderModelStandard(IBlockAccess arg0, IBakedModel arg1, Block arg2, BlockPos arg3, WorldRenderer arg4, bool arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderModelStandard", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Z)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void renderModelStandardQuads(IBlockAccess arg0, Block arg1, BlockPos arg2, EnumFacing arg3, int arg4, bool arg5, WorldRenderer arg6, List arg7, BitSet arg8) { (*javaClass->invokeMethod<void>(this->object, "renderModelStandardQuads", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;IZLnet.minecraft.client.renderer.WorldRenderer;Ljava.util.List;Ljava.util.BitSet;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    void fillQuadBounds(Block arg0, arr_I arg1, EnumFacing arg2, arr_F arg3, BitSet arg4) { (*javaClass->invokeMethod<void>(this->object, "fillQuadBounds", "(Lnet.minecraft.block.Block;[ILnet.minecraft.util.EnumFacing;[FLjava.util.BitSet;)V", arg0, arg1, arg2, arg3, arg4)); }

    void renderModelBrightnessColor(IBakedModel arg0, float arg1, float arg2, float arg3, float arg4) { (*javaClass->invokeMethod<void>(this->object, "renderModelBrightnessColor", "(Lnet.minecraft.client.resources.model.IBakedModel;FFFF)V", arg0, arg1, arg2, arg3, arg4)); }

    bool renderModel(IBlockAccess arg0, IBakedModel arg1, IBlockState arg2, BlockPos arg3, WorldRenderer arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderModel", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool renderModel(IBlockAccess arg0, IBakedModel arg1, IBlockState arg2, BlockPos arg3, WorldRenderer arg4, bool arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderModel", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.state.IBlockState;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Z)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void renderModelBrightness(IBakedModel arg0, IBlockState arg1, float arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "renderModelBrightness", "(Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.state.IBlockState;FZ)V", arg0, arg1, arg2, arg3)); }

    bool renderModelAmbientOcclusion(IBlockAccess arg0, IBakedModel arg1, Block arg2, BlockPos arg3, WorldRenderer arg4, bool arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderModelAmbientOcclusion", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Z)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void renderModelAmbientOcclusionQuads(IBlockAccess arg0, Block arg1, BlockPos arg2, WorldRenderer arg3, List arg4, arr_F arg5, BitSet arg6, BlockModelRenderer_AmbientOcclusionFace arg7) { (*javaClass->invokeMethod<void>(this->object, "renderModelAmbientOcclusionQuads", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.client.renderer.WorldRenderer;Ljava.util.List;[FLjava.util.BitSet;Lnet.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    void renderModelBrightnessColorQuads(float arg0, float arg1, float arg2, float arg3, List arg4) { (*javaClass->invokeMethod<void>(this->object, "renderModelBrightnessColorQuads", "(FFFFLjava.util.List;)V", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: java.util.BitSet
 * Package name: java.util
 */
class BitSet : public Object {
protected:
    const inline static char *className = "java.util.BitSet";
public:
    STATICINITIALIZE;

    BitSet(jobject object) : JavaObject(object) {}

    void expandTo(int arg0) { (*javaClass->invokeMethod<void>(this->object, "expandTo", "(I)V", arg0)); }

    BitSet get(int arg0, int arg1) { return BitSet(*javaClass->invokeMethod<jobject>(this->object, "get", "(II)Ljava.util.BitSet;", arg0, arg1)); }

    bool get(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "get", "(I)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    static BitSet valueOf(arr_J arg0) { return BitSet(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "([J)Ljava.util.BitSet;", arg0)); }

    static BitSet valueOf(LongBuffer arg0) { return BitSet(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.nio.LongBuffer;)Ljava.util.BitSet;", arg0)); }

    static BitSet valueOf(ByteBuffer arg0) { return BitSet(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.nio.ByteBuffer;)Ljava.util.BitSet;", arg0)); }

    static BitSet valueOf(arr_B arg0) { return BitSet(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "([B)Ljava.util.BitSet;", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    void clear(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "clear", "(II)V", arg0, arg1)); }

    void clear(int arg0) { (*javaClass->invokeMethod<void>(this->object, "clear", "(I)V", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    IntStream stream() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "stream", "()Ljava.util.stream.IntStream;", )); }

    void set(int arg0, int arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "set", "(IIZ)V", arg0, arg1, arg2)); }

    void set(int arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(I)V", arg0)); }

    void set(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(II)V", arg0, arg1)); }

    void set(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(IZ)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    static void checkRange(int arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkRange", "(II)V", arg0, arg1)); }

    void checkInvariants() { (*javaClass->invokeMethod<void>(this->object, "checkInvariants", "()V", )); }

    void flip(int arg0) { (*javaClass->invokeMethod<void>(this->object, "flip", "(I)V", arg0)); }

    void flip(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "flip", "(II)V", arg0, arg1)); }

    int nextClearBit(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "nextClearBit", "(I)I", arg0)); }

    void and(BitSet arg0) { (*javaClass->invokeMethod<void>(this->object, "and", "(Ljava.util.BitSet;)V", arg0)); }

    void initWords(int arg0) { (*javaClass->invokeMethod<void>(this->object, "initWords", "(I)V", arg0)); }

    static int wordIndex(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "wordIndex", "(I)I", arg0)); }

    void recalculateWordsInUse() { (*javaClass->invokeMethod<void>(this->object, "recalculateWordsInUse", "()V", )); }

    int cardinality() { return int(*javaClass->invokeMethod<int>(this->object, "cardinality", "()I", )); }

    int nextSetBit(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "nextSetBit", "(II)I", arg0, arg1)); }

    int nextSetBit(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "nextSetBit", "(I)I", arg0)); }

    int previousSetBit(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "previousSetBit", "(I)I", arg0)); }

    int previousClearBit(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "previousClearBit", "(I)I", arg0)); }

    bool intersects(BitSet arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(Ljava.util.BitSet;)Z", arg0)); }

    void or(BitSet arg0) { (*javaClass->invokeMethod<void>(this->object, "or", "(Ljava.util.BitSet;)V", arg0)); }

    void xor(BitSet arg0) { (*javaClass->invokeMethod<void>(this->object, "xor", "(Ljava.util.BitSet;)V", arg0)); }

    void andNot(BitSet arg0) { (*javaClass->invokeMethod<void>(this->object, "andNot", "(Ljava.util.BitSet;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace
 * Enclosing class: net.minecraft.client.renderer.BlockModelRenderer
 * Package name: net.minecraft.client.renderer
 */
class BlockModelRenderer_AmbientOcclusionFace : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockModelRenderer$AmbientOcclusionFace";
public:
    STATICINITIALIZE;

    BlockModelRenderer_AmbientOcclusionFace(jobject object) : JavaObject(object) {}

    void updateVertexBrightness(IBlockAccess arg0, Block arg1, BlockPos arg2, EnumFacing arg3, arr_F arg4, BitSet arg5) { (*javaClass->invokeMethod<void>(this->object, "updateVertexBrightness", "(Lnet.minecraft.world.IBlockAccess;Lnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;[FLjava.util.BitSet;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    int getAoBrightness(int arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeMethod<int>(this->object, "getAoBrightness", "(IIII)I", arg0, arg1, arg2, arg3)); }

    int getVertexBrightness(int arg0, int arg1, int arg2, int arg3, float arg4, float arg5, float arg6, float arg7) { return int(*javaClass->invokeMethod<int>(this->object, "getVertexBrightness", "(IIIIFFFF)I", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

};


/**
 * Classpath: net.minecraft.client.renderer.BlockModelShapes
 * Package name: net.minecraft.client.renderer
 */
class BlockModelShapes : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.BlockModelShapes";
public:
    STATICINITIALIZE;

    BlockModelShapes(jobject object) : JavaObject(object) {}

    void registerAllBlocks() { (*javaClass->invokeMethod<void>(this->object, "registerAllBlocks", "()V", )); }

    BlockStateMapper getBlockStateMapper() { return BlockStateMapper(*javaClass->invokeMethod<jobject>(this->object, "getBlockStateMapper", "()Lnet.minecraft.client.renderer.block.statemap.BlockStateMapper;", )); }

    void reloadModels() { (*javaClass->invokeMethod<void>(this->object, "reloadModels", "()V", )); }

    void registerBuiltInBlocks(Block_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "registerBuiltInBlocks", "([Lnet.minecraft.block.Block;)V", arg0)); }

    IBakedModel getModelForState(IBlockState arg0) { return IBakedModel(*javaClass->invokeMethod<jobject>(this->object, "getModelForState", "(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.client.resources.model.IBakedModel;", arg0)); }

    ModelManager getModelManager() { return ModelManager(*javaClass->invokeMethod<jobject>(this->object, "getModelManager", "()Lnet.minecraft.client.resources.model.ModelManager;", )); }

    TextureAtlasSprite getTexture(IBlockState arg0) { return TextureAtlasSprite(*javaClass->invokeMethod<jobject>(this->object, "getTexture", "(Lnet.minecraft.block.state.IBlockState;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", arg0)); }

    void registerBlockWithStateMapper(Block arg0, IStateMapper arg1) { (*javaClass->invokeMethod<void>(this->object, "registerBlockWithStateMapper", "(Lnet.minecraft.block.Block;Lnet.minecraft.client.renderer.block.statemap.IStateMapper;)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.client.renderer.block.statemap.BlockStateMapper
 * Package name: net.minecraft.client.renderer.block.statemap
 */
class BlockStateMapper : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.statemap.BlockStateMapper";
public:
    STATICINITIALIZE;

    BlockStateMapper(jobject object) : JavaObject(object) {}

    Map putAllStateModelLocations() { return Map(*javaClass->invokeMethod<jobject>(this->object, "putAllStateModelLocations", "()Ljava.util.Map;", )); }

    void registerBlockStateMapper(Block arg0, IStateMapper arg1) { (*javaClass->invokeMethod<void>(this->object, "registerBlockStateMapper", "(Lnet.minecraft.block.Block;Lnet.minecraft.client.renderer.block.statemap.IStateMapper;)V", arg0, arg1)); }

    void registerBuiltInBlocks(Block_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "registerBuiltInBlocks", "([Lnet.minecraft.block.Block;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.block.statemap.IStateMapper
 * Package name: net.minecraft.client.renderer.block.statemap
 */
class IStateMapper : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.statemap.IStateMapper";
public:
    STATICINITIALIZE;

    IStateMapper(jobject object) : JavaObject(object) {}

    Map putStateModelLocations(Block arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "putStateModelLocations", "(Lnet.minecraft.block.Block;)Ljava.util.Map;", arg0)); }

};


/**
 * Classpath: [Lnet.minecraft.block.Block;
 */
class Block_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.block.Block;";
public:
    STATICINITIALIZE;

    Block_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.resources.model.ModelManager
 * Package name: net.minecraft.client.resources.model
 */
class ModelManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.model.ModelManager";
public:
    STATICINITIALIZE;

    ModelManager(jobject object) : JavaObject(object) {}

    IBakedModel getMissingModel() { return IBakedModel(*javaClass->invokeMethod<jobject>(this->object, "getMissingModel", "()Lnet.minecraft.client.resources.model.IBakedModel;", )); }

    TextureMap getTextureMap() { return TextureMap(*javaClass->invokeMethod<jobject>(this->object, "getTextureMap", "()Lnet.minecraft.client.renderer.texture.TextureMap;", )); }

    void onResourceManagerReload(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "onResourceManagerReload", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    BlockModelShapes getBlockModelShapes() { return BlockModelShapes(*javaClass->invokeMethod<jobject>(this->object, "getBlockModelShapes", "()Lnet.minecraft.client.renderer.BlockModelShapes;", )); }

    IBakedModel getModel(ModelResourceLocation arg0) { return IBakedModel(*javaClass->invokeMethod<jobject>(this->object, "getModel", "(Lnet.minecraft.client.resources.model.ModelResourceLocation;)Lnet.minecraft.client.resources.model.IBakedModel;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.IIconCreator
 * Package name: net.minecraft.client.renderer.texture
 */
class IIconCreator : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.IIconCreator";
public:
    STATICINITIALIZE;

    IIconCreator(jobject object) : JavaObject(object) {}

    void registerSprites(TextureMap arg0) { (*javaClass->invokeMethod<void>(this->object, "registerSprites", "(Lnet.minecraft.client.renderer.texture.TextureMap;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.AbstractTexture
 * Package name: net.minecraft.client.renderer.texture
 */
class AbstractTexture : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.AbstractTexture";
public:
    STATICINITIALIZE;

    AbstractTexture(jobject object) : JavaObject(object) {}

    void deleteGlTexture() { (*javaClass->invokeMethod<void>(this->object, "deleteGlTexture", "()V", )); }

    void setBlurMipmap(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setBlurMipmap", "(ZZ)V", arg0, arg1)); }

    void restoreLastBlurMipmap() { (*javaClass->invokeMethod<void>(this->object, "restoreLastBlurMipmap", "()V", )); }

    int getGlTextureId() { return int(*javaClass->invokeMethod<int>(this->object, "getGlTextureId", "()I", )); }

    void setBlurMipmapDirect(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setBlurMipmapDirect", "(ZZ)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.client.resources.model.ModelResourceLocation
 * Package name: net.minecraft.client.resources.model
 */
class ModelResourceLocation : public ResourceLocation {
protected:
    const inline static char *className = "net.minecraft.client.resources.model.ModelResourceLocation";
public:
    STATICINITIALIZE;

    ModelResourceLocation(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    String getVariant() { return String(*javaClass->invokeMethod<jobject>(this->object, "getVariant", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.entity.RenderManager
 * Package name: net.minecraft.client.renderer.entity
 */
class RenderManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RenderManager";
public:
    STATICINITIALIZE;

    RenderManager(jobject object) : JavaObject(object) {}

    void setRenderPosition(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setRenderPosition", "(DDD)V", arg0, arg1, arg2)); }

    Render getEntityClassRenderObject(Class arg0) { return Render(*javaClass->invokeMethod<jobject>(this->object, "getEntityClassRenderObject", "(Ljava.lang.Class;)Lnet.minecraft.client.renderer.entity.Render;", arg0)); }

    Render getEntityRenderObject(Entity arg0) { return Render(*javaClass->invokeMethod<jobject>(this->object, "getEntityRenderObject", "(Lnet.minecraft.entity.Entity;)Lnet.minecraft.client.renderer.entity.Render;", arg0)); }

    void cacheActiveRenderInfo(World arg0, FontRenderer arg1, Entity arg2, Entity arg3, GameSettings arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "cacheActiveRenderInfo", "(Lnet.minecraft.world.World;Lnet.minecraft.client.gui.FontRenderer;Lnet.minecraft.entity.Entity;Lnet.minecraft.entity.Entity;Lnet.minecraft.client.settings.GameSettings;F)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool isRenderShadow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRenderShadow", "()Z", )); }

    bool renderEntitySimple(Entity arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderEntitySimple", "(Lnet.minecraft.entity.Entity;F)Z", arg0, arg1)); }

    bool renderEntityStatic(Entity arg0, float arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderEntityStatic", "(Lnet.minecraft.entity.Entity;FZ)Z", arg0, arg1, arg2)); }

    bool shouldRender(Entity arg0, ICamera arg1, double arg2, double arg3, double arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldRender", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.client.renderer.culling.ICamera;DDD)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool doRenderEntity(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5, bool arg6) { return bool(*javaClass->invokeMethod<boolean>(this->object, "doRenderEntity", "(Lnet.minecraft.entity.Entity;DDDFFZ)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void renderWitherSkull(Entity arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "renderWitherSkull", "(Lnet.minecraft.entity.Entity;F)V", arg0, arg1)); }

    void setRenderOutlines(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRenderOutlines", "(Z)V", arg0)); }

    void renderDebugBoundingBox(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "renderDebugBoundingBox", "(Lnet.minecraft.entity.Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    double getDistanceToCamera(double arg0, double arg1, double arg2) { return double(*javaClass->invokeMethod<double>(this->object, "getDistanceToCamera", "(DDD)D", arg0, arg1, arg2)); }

    FontRenderer getFontRenderer() { return FontRenderer(*javaClass->invokeMethod<jobject>(this->object, "getFontRenderer", "()Lnet.minecraft.client.gui.FontRenderer;", )); }

    void setPlayerViewY(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayerViewY", "(F)V", arg0)); }

    void setRenderShadow(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRenderShadow", "(Z)V", arg0)); }

    bool renderEntityWithPosYaw(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "renderEntityWithPosYaw", "(Lnet.minecraft.entity.Entity;DDDFF)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool isDebugBoundingBox() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDebugBoundingBox", "()Z", )); }

    void setDebugBoundingBox(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDebugBoundingBox", "(Z)V", arg0)); }

    void set(World arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(Lnet.minecraft.world.World;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.entity.Render
 * Package name: net.minecraft.client.renderer.entity
 */
class Render : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.Render";
public:
    STATICINITIALIZE;

    Render(jobject object) : JavaObject(object) {}

    bool canRenderName(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRenderName", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void renderLivingLabel(Entity arg0, String arg1, double arg2, double arg3, double arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "renderLivingLabel", "(Lnet.minecraft.entity.Entity;Ljava.lang.String;DDDI)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void renderOffsetLivingLabel(Entity arg0, double arg1, double arg2, double arg3, String arg4, float arg5, double arg6) { (*javaClass->invokeMethod<void>(this->object, "renderOffsetLivingLabel", "(Lnet.minecraft.entity.Entity;DDDLjava.lang.String;FD)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    ResourceLocation getEntityTexture(Entity arg0) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getEntityTexture", "(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.ResourceLocation;", arg0)); }

    bool bindEntityTexture(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "bindEntityTexture", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void renderEntityOnFire(Entity arg0, double arg1, double arg2, double arg3, float arg4) { (*javaClass->invokeMethod<void>(this->object, "renderEntityOnFire", "(Lnet.minecraft.entity.Entity;DDDF)V", arg0, arg1, arg2, arg3, arg4)); }

    World getWorldFromRenderManager() { return World(*javaClass->invokeMethod<jobject>(this->object, "getWorldFromRenderManager", "()Lnet.minecraft.world.World;", )); }

    void func_180549_a(Block arg0, double arg1, double arg2, double arg3, BlockPos arg4, float arg5, float arg6, double arg7, double arg8, double arg9) { (*javaClass->invokeMethod<void>(this->object, "func_180549_a", "(Lnet.minecraft.block.Block;DDDLnet.minecraft.util.BlockPos;FFDDD)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static void renderOffsetAABB(AxisAlignedBB arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "renderOffsetAABB", "(Lnet.minecraft.util.AxisAlignedBB;DDD)V", arg0, arg1, arg2, arg3)); }

    void renderShadow(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "renderShadow", "(Lnet.minecraft.entity.Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool shouldRender(Entity arg0, ICamera arg1, double arg2, double arg3, double arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldRender", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.client.renderer.culling.ICamera;DDD)Z", arg0, arg1, arg2, arg3, arg4)); }

    void doRenderShadowAndFire(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "doRenderShadowAndFire", "(Lnet.minecraft.entity.Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    RenderManager getRenderManager() { return RenderManager(*javaClass->invokeMethod<jobject>(this->object, "getRenderManager", "()Lnet.minecraft.client.renderer.entity.RenderManager;", )); }

    void bindTexture(ResourceLocation arg0) { (*javaClass->invokeMethod<void>(this->object, "bindTexture", "(Lnet.minecraft.util.ResourceLocation;)V", arg0)); }

    void renderName(Entity arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "renderName", "(Lnet.minecraft.entity.Entity;DDD)V", arg0, arg1, arg2, arg3)); }

    void doRender(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "doRender", "(Lnet.minecraft.entity.Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    FontRenderer getFontRendererFromRenderManager() { return FontRenderer(*javaClass->invokeMethod<jobject>(this->object, "getFontRendererFromRenderManager", "()Lnet.minecraft.client.gui.FontRenderer;", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.culling.ICamera
 * Package name: net.minecraft.client.renderer.culling
 */
class ICamera : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.culling.ICamera";
public:
    STATICINITIALIZE;

    ICamera(jobject object) : JavaObject(object) {}

    bool isBoundingBoxInFrustum(AxisAlignedBB arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBoundingBoxInFrustum", "(Lnet.minecraft.util.AxisAlignedBB;)Z", arg0)); }

    void setPosition(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setPosition", "(DDD)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.client.gui.FontRenderer
 * Package name: net.minecraft.client.gui
 */
class FontRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.gui.FontRenderer";
public:
    STATICINITIALIZE;

    FontRenderer(jobject object) : JavaObject(object) {}

    static String getFormatFromString(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getFormatFromString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    int getColorCode(char arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getColorCode", "(C)I", arg0)); }

    void readGlyphSizes() { (*javaClass->invokeMethod<void>(this->object, "readGlyphSizes", "()V", )); }

    void readFontTexture() { (*javaClass->invokeMethod<void>(this->object, "readFontTexture", "()V", )); }

    float func_181559_a(char arg0, bool arg1) { return float(*javaClass->invokeMethod<float>(this->object, "func_181559_a", "(CZ)F", arg0, arg1)); }

    float renderDefaultChar(int arg0, bool arg1) { return float(*javaClass->invokeMethod<float>(this->object, "renderDefaultChar", "(IZ)F", arg0, arg1)); }

    float renderUnicodeChar(char arg0, bool arg1) { return float(*javaClass->invokeMethod<float>(this->object, "renderUnicodeChar", "(CZ)F", arg0, arg1)); }

    ResourceLocation getUnicodePageLocation(int arg0) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getUnicodePageLocation", "(I)Lnet.minecraft.util.ResourceLocation;", arg0)); }

    void loadGlyphTexture(int arg0) { (*javaClass->invokeMethod<void>(this->object, "loadGlyphTexture", "(I)V", arg0)); }

    void resetStyles() { (*javaClass->invokeMethod<void>(this->object, "resetStyles", "()V", )); }

    int renderString(String arg0, float arg1, float arg2, int arg3, bool arg4) { return int(*javaClass->invokeMethod<int>(this->object, "renderString", "(Ljava.lang.String;FFIZ)I", arg0, arg1, arg2, arg3, arg4)); }

    String bidiReorder(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "bidiReorder", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    void renderStringAtPos(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "renderStringAtPos", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    int getCharWidth(char arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getCharWidth", "(C)I", arg0)); }

    int renderStringAligned(String arg0, int arg1, int arg2, int arg3, int arg4, bool arg5) { return int(*javaClass->invokeMethod<int>(this->object, "renderStringAligned", "(Ljava.lang.String;IIIIZ)I", arg0, arg1, arg2, arg3, arg4, arg5)); }

    String trimStringToWidth(String arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "trimStringToWidth", "(Ljava.lang.String;I)Ljava.lang.String;", arg0, arg1)); }

    String trimStringToWidth(String arg0, int arg1, bool arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "trimStringToWidth", "(Ljava.lang.String;IZ)Ljava.lang.String;", arg0, arg1, arg2)); }

    String trimStringNewline(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "trimStringNewline", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    void drawSplitString(String arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "drawSplitString", "(Ljava.lang.String;IIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void renderSplitString(String arg0, int arg1, int arg2, int arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "renderSplitString", "(Ljava.lang.String;IIIZ)V", arg0, arg1, arg2, arg3, arg4)); }

    int splitStringWidth(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "splitStringWidth", "(Ljava.lang.String;I)I", arg0, arg1)); }

    bool getUnicodeFlag() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getUnicodeFlag", "()Z", )); }

    String wrapFormattedStringToWidth(String arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "wrapFormattedStringToWidth", "(Ljava.lang.String;I)Ljava.lang.String;", arg0, arg1)); }

    int sizeStringToWidth(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "sizeStringToWidth", "(Ljava.lang.String;I)I", arg0, arg1)); }

    static bool isFormatColor(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isFormatColor", "(C)Z", arg0)); }

    static bool isFormatSpecial(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isFormatSpecial", "(C)Z", arg0)); }

    bool getBidiFlag() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBidiFlag", "()Z", )); }

    void onResourceManagerReload(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "onResourceManagerReload", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    List listFormattedStringToWidth(String arg0, int arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "listFormattedStringToWidth", "(Ljava.lang.String;I)Ljava.util.List;", arg0, arg1)); }

    int drawStringWithShadow(String arg0, float arg1, float arg2, int arg3) { return int(*javaClass->invokeMethod<int>(this->object, "drawStringWithShadow", "(Ljava.lang.String;FFI)I", arg0, arg1, arg2, arg3)); }

    int getStringWidth(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getStringWidth", "(Ljava.lang.String;)I", arg0)); }

    void setUnicodeFlag(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setUnicodeFlag", "(Z)V", arg0)); }

    void setBidiFlag(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setBidiFlag", "(Z)V", arg0)); }

    int drawString(String arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeMethod<int>(this->object, "drawString", "(Ljava.lang.String;III)I", arg0, arg1, arg2, arg3)); }

    int drawString(String arg0, float arg1, float arg2, int arg3, bool arg4) { return int(*javaClass->invokeMethod<int>(this->object, "drawString", "(Ljava.lang.String;FFIZ)I", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: net.minecraft.client.settings.GameSettings
 * Package name: net.minecraft.client.settings
 */
class GameSettings : public Object {
protected:
    const inline static char *className = "net.minecraft.client.settings.GameSettings";
public:
    STATICINITIALIZE;

    GameSettings(jobject object) : JavaObject(object) {}

    void loadOptions() { (*javaClass->invokeMethod<void>(this->object, "loadOptions", "()V", )); }

    void setOptionKeyBinding(KeyBinding arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setOptionKeyBinding", "(Lnet.minecraft.client.settings.KeyBinding;I)V", arg0, arg1)); }

    void setOptionFloatValue(GameSettings_Options arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setOptionFloatValue", "(Lnet.minecraft.client.settings.GameSettings$Options;F)V", arg0, arg1)); }

    float getOptionFloatValue(GameSettings_Options arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getOptionFloatValue", "(Lnet.minecraft.client.settings.GameSettings$Options;)F", arg0)); }

    bool getOptionOrdinalValue(GameSettings_Options arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getOptionOrdinalValue", "(Lnet.minecraft.client.settings.GameSettings$Options;)Z", arg0)); }

    static String getTranslation(String_interface arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getTranslation", "([Ljava.lang.String;I)Ljava.lang.String;", arg0, arg1)); }

    String getKeyBinding(GameSettings_Options arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getKeyBinding", "(Lnet.minecraft.client.settings.GameSettings$Options;)Ljava.lang.String;", arg0)); }

    void setModelPartEnabled(EnumPlayerModelParts arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setModelPartEnabled", "(Lnet.minecraft.entity.player.EnumPlayerModelParts;Z)V", arg0, arg1)); }

    float getSoundLevel(SoundCategory arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getSoundLevel", "(Lnet.minecraft.client.audio.SoundCategory;)F", arg0)); }

    Set getModelParts() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getModelParts", "()Ljava.util.Set;", )); }

    void switchModelPartEnabled(EnumPlayerModelParts arg0) { (*javaClass->invokeMethod<void>(this->object, "switchModelPartEnabled", "(Lnet.minecraft.entity.player.EnumPlayerModelParts;)V", arg0)); }

    int func_181147_e() { return int(*javaClass->invokeMethod<int>(this->object, "func_181147_e", "()I", )); }

    bool func_181148_f() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181148_f", "()Z", )); }

    void sendSettingsToServer() { (*javaClass->invokeMethod<void>(this->object, "sendSettingsToServer", "()V", )); }

    void setSoundLevel(SoundCategory arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setSoundLevel", "(Lnet.minecraft.client.audio.SoundCategory;F)V", arg0, arg1)); }

    static String getKeyDisplayString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyDisplayString", "(I)Ljava.lang.String;", arg0)); }

    void setOptionValue(GameSettings_Options arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setOptionValue", "(Lnet.minecraft.client.settings.GameSettings$Options;I)V", arg0, arg1)); }

    void saveOptions() { (*javaClass->invokeMethod<void>(this->object, "saveOptions", "()V", )); }

    static bool isKeyDown(KeyBinding arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isKeyDown", "(Lnet.minecraft.client.settings.KeyBinding;)Z", arg0)); }

    float parseFloat(String arg0) { return float(*javaClass->invokeMethod<float>(this->object, "parseFloat", "(Ljava.lang.String;)F", arg0)); }

};


/**
 * Classpath: net.minecraft.client.settings.KeyBinding
 * Package name: net.minecraft.client.settings
 */
class KeyBinding : public Object {
protected:
    const inline static char *className = "net.minecraft.client.settings.KeyBinding";
public:
    STATICINITIALIZE;

    KeyBinding(jobject object) : JavaObject(object) {}

    String getKeyDescription() { return String(*javaClass->invokeMethod<jobject>(this->object, "getKeyDescription", "()Ljava.lang.String;", )); }

    static Set getKeybinds() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeybinds", "()Ljava.util.Set;", )); }

    String getKeyCategory() { return String(*javaClass->invokeMethod<jobject>(this->object, "getKeyCategory", "()Ljava.lang.String;", )); }

    int getKeyCodeDefault() { return int(*javaClass->invokeMethod<int>(this->object, "getKeyCodeDefault", "()I", )); }

    static void unPressAllKeys() { (*javaClass->invokeStaticMethod<void>(this->object, "unPressAllKeys", "()V", )); }

    static void setKeyBindState(int arg0, bool arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setKeyBindState", "(IZ)V", arg0, arg1)); }

    void setKeyCode(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setKeyCode", "(I)V", arg0)); }

    void unpressKey() { (*javaClass->invokeMethod<void>(this->object, "unpressKey", "()V", )); }

    int getKeyCode() { return int(*javaClass->invokeMethod<int>(this->object, "getKeyCode", "()I", )); }

    static void onTick(int arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "onTick", "(I)V", arg0)); }

    bool isKeyDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isKeyDown", "()Z", )); }

    bool isPressed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPressed", "()Z", )); }

    static void resetKeyBindingArrayAndHash() { (*javaClass->invokeStaticMethod<void>(this->object, "resetKeyBindingArrayAndHash", "()V", )); }

    int compareTo(KeyBinding arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lnet.minecraft.client.settings.KeyBinding;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

};


/**
 * Classpath: net.minecraft.client.settings.GameSettings$Options
 * Enclosing class: net.minecraft.client.settings.GameSettings
 * Package name: net.minecraft.client.settings
 */
class GameSettings_Options : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.settings.GameSettings$Options";
public:
    STATICINITIALIZE;

    GameSettings_Options(jobject object) : JavaObject(object) {}

    void setValueMax(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setValueMax", "(F)V", arg0)); }

    String getEnumString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getEnumString", "()Ljava.lang.String;", )); }

    bool getEnumFloat() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getEnumFloat", "()Z", )); }

    float normalizeValue(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "normalizeValue", "(F)F", arg0)); }

    bool getEnumBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getEnumBoolean", "()Z", )); }

    static GameSettings_Options getEnumOptions(int arg0) { return GameSettings_Options(*javaClass->invokeStaticMethod<jobject>(this->object, "getEnumOptions", "(I)Lnet.minecraft.client.settings.GameSettings$Options;", arg0)); }

    int returnEnumOrdinal() { return int(*javaClass->invokeMethod<int>(this->object, "returnEnumOrdinal", "()I", )); }

    float snapToStepClamp(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "snapToStepClamp", "(F)F", arg0)); }

    float denormalizeValue(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "denormalizeValue", "(F)F", arg0)); }

    float getValueMax() { return float(*javaClass->invokeMethod<float>(this->object, "getValueMax", "()F", )); }

    float snapToStep(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "snapToStep", "(F)F", arg0)); }

    static GameSettings_Options valueOf(String arg0) { return GameSettings_Options(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.settings.GameSettings$Options;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.audio.SoundCategory
 * Package name: net.minecraft.client.audio
 */
class SoundCategory : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundCategory";
public:
    STATICINITIALIZE;

    SoundCategory(jobject object) : JavaObject(object) {}

    String getCategoryName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCategoryName", "()Ljava.lang.String;", )); }

    int getCategoryId() { return int(*javaClass->invokeMethod<int>(this->object, "getCategoryId", "()I", )); }

    static SoundCategory getCategory(String arg0) { return SoundCategory(*javaClass->invokeStaticMethod<jobject>(this->object, "getCategory", "(Ljava.lang.String;)Lnet.minecraft.client.audio.SoundCategory;", arg0)); }

    static SoundCategory valueOf(String arg0) { return SoundCategory(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.audio.SoundCategory;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.entity.RenderItem
 * Package name: net.minecraft.client.renderer.entity
 */
class RenderItem : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RenderItem";
public:
    STATICINITIALIZE;

    RenderItem(jobject object) : JavaObject(object) {}

    void registerItem(Item arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "registerItem", "(Lnet.minecraft.item.Item;Ljava.lang.String;)V", arg0, arg1)); }

    void registerItem(Item arg0, int arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "registerItem", "(Lnet.minecraft.item.Item;ILjava.lang.String;)V", arg0, arg1, arg2)); }

    void onResourceManagerReload(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "onResourceManagerReload", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    void renderModel(IBakedModel arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "renderModel", "(Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    void renderModel(IBakedModel arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "renderModel", "(Lnet.minecraft.client.resources.model.IBakedModel;I)V", arg0, arg1)); }

    void renderModel(IBakedModel arg0, int arg1, ItemStack arg2) { (*javaClass->invokeMethod<void>(this->object, "renderModel", "(Lnet.minecraft.client.resources.model.IBakedModel;ILnet.minecraft.item.ItemStack;)V", arg0, arg1, arg2)); }

    void func_175039_a(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "func_175039_a", "(Z)V", arg0)); }

    ItemModelMesher getItemModelMesher() { return ItemModelMesher(*javaClass->invokeMethod<jobject>(this->object, "getItemModelMesher", "()Lnet.minecraft.client.renderer.ItemModelMesher;", )); }

    void registerBlock(Block arg0, int arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "registerBlock", "(Lnet.minecraft.block.Block;ILjava.lang.String;)V", arg0, arg1, arg2)); }

    void registerBlock(Block arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "registerBlock", "(Lnet.minecraft.block.Block;Ljava.lang.String;)V", arg0, arg1)); }

    void renderQuads(WorldRenderer arg0, List arg1, int arg2, ItemStack arg3) { (*javaClass->invokeMethod<void>(this->object, "renderQuads", "(Lnet.minecraft.client.renderer.WorldRenderer;Ljava.util.List;ILnet.minecraft.item.ItemStack;)V", arg0, arg1, arg2, arg3)); }

    void renderEffect(IBakedModel arg0) { (*javaClass->invokeMethod<void>(this->object, "renderEffect", "(Lnet.minecraft.client.resources.model.IBakedModel;)V", arg0)); }

    void putQuadNormal(WorldRenderer arg0, BakedQuad arg1) { (*javaClass->invokeMethod<void>(this->object, "putQuadNormal", "(Lnet.minecraft.client.renderer.WorldRenderer;Lnet.minecraft.client.renderer.block.model.BakedQuad;)V", arg0, arg1)); }

    bool shouldRenderItemIn3D(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldRenderItemIn3D", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    void preTransform(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "preTransform", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void func_181564_a(ItemStack arg0, ItemCameraTransforms_TransformType arg1) { (*javaClass->invokeMethod<void>(this->object, "func_181564_a", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V", arg0, arg1)); }

    void renderItemModelTransform(ItemStack arg0, IBakedModel arg1, ItemCameraTransforms_TransformType arg2) { (*javaClass->invokeMethod<void>(this->object, "renderItemModelTransform", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.resources.model.IBakedModel;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V", arg0, arg1, arg2)); }

    void renderItemModelForEntity(ItemStack arg0, EntityLivingBase arg1, ItemCameraTransforms_TransformType arg2) { (*javaClass->invokeMethod<void>(this->object, "renderItemModelForEntity", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V", arg0, arg1, arg2)); }

    bool func_183005_a(ItemTransformVec3f arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_183005_a", "(Lnet.minecraft.client.renderer.block.model.ItemTransformVec3f;)Z", arg0)); }

    void renderItemIntoGUI(ItemStack arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "renderItemIntoGUI", "(Lnet.minecraft.item.ItemStack;II)V", arg0, arg1, arg2)); }

    void setupGuiTransform(int arg0, int arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "setupGuiTransform", "(IIZ)V", arg0, arg1, arg2)); }

    void renderItemOverlays(FontRenderer arg0, ItemStack arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "renderItemOverlays", "(Lnet.minecraft.client.gui.FontRenderer;Lnet.minecraft.item.ItemStack;II)V", arg0, arg1, arg2, arg3)); }

    void func_181565_a(WorldRenderer arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8) { (*javaClass->invokeMethod<void>(this->object, "func_181565_a", "(Lnet.minecraft.client.renderer.WorldRenderer;IIIIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }

    void renderItemAndEffectIntoGUI(ItemStack arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "renderItemAndEffectIntoGUI", "(Lnet.minecraft.item.ItemStack;II)V", arg0, arg1, arg2)); }

    void renderItemOverlayIntoGUI(FontRenderer arg0, ItemStack arg1, int arg2, int arg3, String arg4) { (*javaClass->invokeMethod<void>(this->object, "renderItemOverlayIntoGUI", "(Lnet.minecraft.client.gui.FontRenderer;Lnet.minecraft.item.ItemStack;IILjava.lang.String;)V", arg0, arg1, arg2, arg3, arg4)); }

    void registerItems() { (*javaClass->invokeMethod<void>(this->object, "registerItems", "()V", )); }

    void renderQuad(WorldRenderer arg0, BakedQuad arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "renderQuad", "(Lnet.minecraft.client.renderer.WorldRenderer;Lnet.minecraft.client.renderer.block.model.BakedQuad;I)V", arg0, arg1, arg2)); }

    void renderItem(ItemStack arg0, IBakedModel arg1) { (*javaClass->invokeMethod<void>(this->object, "renderItem", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.resources.model.IBakedModel;)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.client.renderer.ItemModelMesher
 * Package name: net.minecraft.client.renderer
 */
class ItemModelMesher : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ItemModelMesher";
public:
    STATICINITIALIZE;

    ItemModelMesher(jobject object) : JavaObject(object) {}

    TextureAtlasSprite getParticleIcon(Item arg0) { return TextureAtlasSprite(*javaClass->invokeMethod<jobject>(this->object, "getParticleIcon", "(Lnet.minecraft.item.Item;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", arg0)); }

    TextureAtlasSprite getParticleIcon(Item arg0, int arg1) { return TextureAtlasSprite(*javaClass->invokeMethod<jobject>(this->object, "getParticleIcon", "(Lnet.minecraft.item.Item;I)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", arg0, arg1)); }

    IBakedModel getItemModel(ItemStack arg0) { return IBakedModel(*javaClass->invokeMethod<jobject>(this->object, "getItemModel", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.client.resources.model.IBakedModel;", arg0)); }

    IBakedModel getItemModel(Item arg0, int arg1) { return IBakedModel(*javaClass->invokeMethod<jobject>(this->object, "getItemModel", "(Lnet.minecraft.item.Item;I)Lnet.minecraft.client.resources.model.IBakedModel;", arg0, arg1)); }

    ModelManager getModelManager() { return ModelManager(*javaClass->invokeMethod<jobject>(this->object, "getModelManager", "()Lnet.minecraft.client.resources.model.ModelManager;", )); }

    void rebuildCache() { (*javaClass->invokeMethod<void>(this->object, "rebuildCache", "()V", )); }

    int getMetadata(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMetadata", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    void register(Item arg0, ItemMeshDefinition arg1) { (*javaClass->invokeMethod<void>(this->object, "register", "(Lnet.minecraft.item.Item;Lnet.minecraft.client.renderer.ItemMeshDefinition;)V", arg0, arg1)); }

    void register(Item arg0, int arg1, ModelResourceLocation arg2) { (*javaClass->invokeMethod<void>(this->object, "register", "(Lnet.minecraft.item.Item;ILnet.minecraft.client.resources.model.ModelResourceLocation;)V", arg0, arg1, arg2)); }

    int getIndex(Item arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getIndex", "(Lnet.minecraft.item.Item;I)I", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.client.renderer.ItemMeshDefinition
 * Package name: net.minecraft.client.renderer
 */
class ItemMeshDefinition : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ItemMeshDefinition";
public:
    STATICINITIALIZE;

    ItemMeshDefinition(jobject object) : JavaObject(object) {}

    ModelResourceLocation getModelLocation(ItemStack arg0) { return ModelResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getModelLocation", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.client.resources.model.ModelResourceLocation;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.block.model.BakedQuad
 * Package name: net.minecraft.client.renderer.block.model
 */
class BakedQuad : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.block.model.BakedQuad";
public:
    STATICINITIALIZE;

    BakedQuad(jobject object) : JavaObject(object) {}

    bool hasTintIndex() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasTintIndex", "()Z", )); }

    int getTintIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getTintIndex", "()I", )); }

    EnumFacing getFace() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "getFace", "()Lnet.minecraft.util.EnumFacing;", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.ItemRenderer
 * Package name: net.minecraft.client.renderer
 */
class ItemRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ItemRenderer";
public:
    STATICINITIALIZE;

    ItemRenderer(jobject object) : JavaObject(object) {}

    bool isBlockTranslucent(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlockTranslucent", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    void func_178101_a(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "func_178101_a", "(FF)V", arg0, arg1)); }

    void func_178109_a(AbstractClientPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "func_178109_a", "(Lnet.minecraft.client.entity.AbstractClientPlayer;)V", arg0)); }

    void func_178110_a(EntityPlayerSP arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "func_178110_a", "(Lnet.minecraft.client.entity.EntityPlayerSP;F)V", arg0, arg1)); }

    float func_178100_c(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "func_178100_c", "(F)F", arg0)); }

    void renderRightArm(RenderPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "renderRightArm", "(Lnet.minecraft.client.renderer.entity.RenderPlayer;)V", arg0)); }

    void renderLeftArm(RenderPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "renderLeftArm", "(Lnet.minecraft.client.renderer.entity.RenderPlayer;)V", arg0)); }

    void renderPlayerArms(AbstractClientPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "renderPlayerArms", "(Lnet.minecraft.client.entity.AbstractClientPlayer;)V", arg0)); }

    void renderItemMap(AbstractClientPlayer arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "renderItemMap", "(Lnet.minecraft.client.entity.AbstractClientPlayer;FFF)V", arg0, arg1, arg2, arg3)); }

    void func_178095_a(AbstractClientPlayer arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "func_178095_a", "(Lnet.minecraft.client.entity.AbstractClientPlayer;FF)V", arg0, arg1, arg2)); }

    void func_178105_d(float arg0) { (*javaClass->invokeMethod<void>(this->object, "func_178105_d", "(F)V", arg0)); }

    void func_178104_a(AbstractClientPlayer arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "func_178104_a", "(Lnet.minecraft.client.entity.AbstractClientPlayer;F)V", arg0, arg1)); }

    void transformFirstPersonItem(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "transformFirstPersonItem", "(FF)V", arg0, arg1)); }

    void func_178098_a(float arg0, AbstractClientPlayer arg1) { (*javaClass->invokeMethod<void>(this->object, "func_178098_a", "(FLnet.minecraft.client.entity.AbstractClientPlayer;)V", arg0, arg1)); }

    void func_178103_d() { (*javaClass->invokeMethod<void>(this->object, "func_178103_d", "()V", )); }

    void renderItemInFirstPerson(float arg0) { (*javaClass->invokeMethod<void>(this->object, "renderItemInFirstPerson", "(F)V", arg0)); }

    void renderOverlays(float arg0) { (*javaClass->invokeMethod<void>(this->object, "renderOverlays", "(F)V", arg0)); }

    void func_178108_a(float arg0, TextureAtlasSprite arg1) { (*javaClass->invokeMethod<void>(this->object, "func_178108_a", "(FLnet.minecraft.client.renderer.texture.TextureAtlasSprite;)V", arg0, arg1)); }

    void renderWaterOverlayTexture(float arg0) { (*javaClass->invokeMethod<void>(this->object, "renderWaterOverlayTexture", "(F)V", arg0)); }

    void renderFireInFirstPerson(float arg0) { (*javaClass->invokeMethod<void>(this->object, "renderFireInFirstPerson", "(F)V", arg0)); }

    void updateEquippedItem() { (*javaClass->invokeMethod<void>(this->object, "updateEquippedItem", "()V", )); }

    void resetEquippedProgress() { (*javaClass->invokeMethod<void>(this->object, "resetEquippedProgress", "()V", )); }

    void resetEquippedProgress2() { (*javaClass->invokeMethod<void>(this->object, "resetEquippedProgress2", "()V", )); }

    void renderItem(EntityLivingBase arg0, ItemStack arg1, ItemCameraTransforms_TransformType arg2) { (*javaClass->invokeMethod<void>(this->object, "renderItem", "(Lnet.minecraft.entity.EntityLivingBase;Lnet.minecraft.item.ItemStack;Lnet.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType;)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.client.network.NetworkPlayerInfo
 * Package name: net.minecraft.client.network
 */
class NetworkPlayerInfo : public Object {
protected:
    const inline static char *className = "net.minecraft.client.network.NetworkPlayerInfo";
public:
    STATICINITIALIZE;

    NetworkPlayerInfo(jobject object) : JavaObject(object) {}

    int getResponseTime() { return int(*javaClass->invokeMethod<int>(this->object, "getResponseTime", "()I", )); }

    void loadPlayerTextures() { (*javaClass->invokeMethod<void>(this->object, "loadPlayerTextures", "()V", )); }

    ScorePlayerTeam getPlayerTeam() { return ScorePlayerTeam(*javaClass->invokeMethod<jobject>(this->object, "getPlayerTeam", "()Lnet.minecraft.scoreboard.ScorePlayerTeam;", )); }

    int func_178835_l() { return int(*javaClass->invokeMethod<int>(this->object, "func_178835_l", "()I", )); }

    void func_178836_b(int arg0) { (*javaClass->invokeMethod<void>(this->object, "func_178836_b", "(I)V", arg0)); }

    int func_178860_m() { return int(*javaClass->invokeMethod<int>(this->object, "func_178860_m", "()I", )); }

    void func_178857_c(int arg0) { (*javaClass->invokeMethod<void>(this->object, "func_178857_c", "(I)V", arg0)); }

    long func_178847_n() { return long(*javaClass->invokeMethod<long>(this->object, "func_178847_n", "()J", )); }

    void func_178846_a(long arg0) { (*javaClass->invokeMethod<void>(this->object, "func_178846_a", "(J)V", arg0)); }

    long func_178858_o() { return long(*javaClass->invokeMethod<long>(this->object, "func_178858_o", "()J", )); }

    void func_178844_b(long arg0) { (*javaClass->invokeMethod<void>(this->object, "func_178844_b", "(J)V", arg0)); }

    long func_178855_p() { return long(*javaClass->invokeMethod<long>(this->object, "func_178855_p", "()J", )); }

    void func_178843_c(long arg0) { (*javaClass->invokeMethod<void>(this->object, "func_178843_c", "(J)V", arg0)); }

    void setResponseTime(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setResponseTime", "(I)V", arg0)); }

    void setDisplayName(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisplayName", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    WorldSettings_GameType getGameType() { return WorldSettings_GameType(*javaClass->invokeMethod<jobject>(this->object, "getGameType", "()Lnet.minecraft.world.WorldSettings$GameType;", )); }

    bool hasLocationSkin() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasLocationSkin", "()Z", )); }

    ResourceLocation getLocationSkin() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getLocationSkin", "()Lnet.minecraft.util.ResourceLocation;", )); }

    ResourceLocation getLocationCape() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getLocationCape", "()Lnet.minecraft.util.ResourceLocation;", )); }

    String getSkinType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSkinType", "()Ljava.lang.String;", )); }

    void setGameType(WorldSettings_GameType arg0) { (*javaClass->invokeMethod<void>(this->object, "setGameType", "(Lnet.minecraft.world.WorldSettings$GameType;)V", arg0)); }

    GameProfile getGameProfile() { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom.mojang.authlib.GameProfile;", )); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: java.awt.image.Raster
 * Package name: java.awt.image
 */
class Raster : public Object {
protected:
    const inline static char *className = "java.awt.image.Raster";
public:
    STATICINITIALIZE;

    Raster(jobject object) : JavaObject(object) {}

    Raster createChild(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, arr_I arg6) { return Raster(*javaClass->invokeMethod<jobject>(this->object, "createChild", "(IIIIII[I)Ljava.awt.image.Raster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    Raster getParent() { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.awt.image.Raster;", )); }

    SampleModel getSampleModel() { return SampleModel(*javaClass->invokeMethod<jobject>(this->object, "getSampleModel", "()Ljava.awt.image.SampleModel;", )); }

    int getMinX() { return int(*javaClass->invokeMethod<int>(this->object, "getMinX", "()I", )); }

    int getMinY() { return int(*javaClass->invokeMethod<int>(this->object, "getMinY", "()I", )); }

    WritableRaster createCompatibleWritableRaster(Rectangle arg0) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(Ljava.awt.Rectangle;)Ljava.awt.image.WritableRaster;", arg0)); }

    WritableRaster createCompatibleWritableRaster(int arg0, int arg1) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(II)Ljava.awt.image.WritableRaster;", arg0, arg1)); }

    WritableRaster createCompatibleWritableRaster() { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "()Ljava.awt.image.WritableRaster;", )); }

    WritableRaster createCompatibleWritableRaster(int arg0, int arg1, int arg2, int arg3) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(IIII)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3)); }

    static WritableRaster createInterleavedRaster(int arg0, int arg1, int arg2, int arg3, Point arg4) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createInterleavedRaster", "(IIIILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }

    static WritableRaster createInterleavedRaster(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, Point arg6) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createInterleavedRaster", "(IIIII[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static WritableRaster createInterleavedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, Point arg6) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createInterleavedRaster", "(Ljava.awt.image.DataBuffer;IIII[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static WritableRaster createPackedRaster(int arg0, int arg1, int arg2, int arg3, int arg4, Point arg5) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createPackedRaster", "(IIIIILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static WritableRaster createPackedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, Point arg4) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createPackedRaster", "(Ljava.awt.image.DataBuffer;IIILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }

    static WritableRaster createPackedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, arr_I arg4, Point arg5) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createPackedRaster", "(Ljava.awt.image.DataBuffer;III[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static WritableRaster createPackedRaster(int arg0, int arg1, int arg2, arr_I arg3, Point arg4) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createPackedRaster", "(III[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }

    int getNumBands() { return int(*javaClass->invokeMethod<int>(this->object, "getNumBands", "()I", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Object getDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDataElements", "(IIIILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2, arg3, arg4)); }

    Object getDataElements(int arg0, int arg1, Object arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDataElements", "(IILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    DataBuffer getDataBuffer() { return DataBuffer(*javaClass->invokeMethod<jobject>(this->object, "getDataBuffer", "()Ljava.awt.image.DataBuffer;", )); }

    int getSampleModelTranslateX() { return int(*javaClass->invokeMethod<int>(this->object, "getSampleModelTranslateX", "()I", )); }

    int getSampleModelTranslateY() { return int(*javaClass->invokeMethod<int>(this->object, "getSampleModelTranslateY", "()I", )); }

    static WritableRaster createWritableRaster(SampleModel arg0, Point arg1) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createWritableRaster", "(Ljava.awt.image.SampleModel;Ljava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1)); }

    static WritableRaster createWritableRaster(SampleModel arg0, DataBuffer arg1, Point arg2) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createWritableRaster", "(Ljava.awt.image.SampleModel;Ljava.awt.image.DataBuffer;Ljava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2)); }

    static WritableRaster createBandedRaster(DataBuffer arg0, int arg1, int arg2, int arg3, arr_I arg4, arr_I arg5, Point arg6) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createBandedRaster", "(Ljava.awt.image.DataBuffer;III[I[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static WritableRaster createBandedRaster(int arg0, int arg1, int arg2, int arg3, arr_I arg4, arr_I arg5, Point arg6) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createBandedRaster", "(IIII[I[ILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static WritableRaster createBandedRaster(int arg0, int arg1, int arg2, int arg3, Point arg4) { return WritableRaster(*javaClass->invokeStaticMethod<jobject>(this->object, "createBandedRaster", "(IIIILjava.awt.Point;)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4)); }

    int getNumDataElements() { return int(*javaClass->invokeMethod<int>(this->object, "getNumDataElements", "()I", )); }

    int getTransferType() { return int(*javaClass->invokeMethod<int>(this->object, "getTransferType", "()I", )); }

    int getSample(int arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getSample", "(III)I", arg0, arg1, arg2)); }

    float getSampleFloat(int arg0, int arg1, int arg2) { return float(*javaClass->invokeMethod<float>(this->object, "getSampleFloat", "(III)F", arg0, arg1, arg2)); }

    double getSampleDouble(int arg0, int arg1, int arg2) { return double(*javaClass->invokeMethod<double>(this->object, "getSampleDouble", "(III)D", arg0, arg1, arg2)); }

    static Raster createRaster(SampleModel arg0, DataBuffer arg1, Point arg2) { return Raster(*javaClass->invokeStaticMethod<jobject>(this->object, "createRaster", "(Ljava.awt.image.SampleModel;Ljava.awt.image.DataBuffer;Ljava.awt.Point;)Ljava.awt.image.Raster;", arg0, arg1, arg2)); }

    Raster createTranslatedChild(int arg0, int arg1) { return Raster(*javaClass->invokeMethod<jobject>(this->object, "createTranslatedChild", "(II)Ljava.awt.image.Raster;", arg0, arg1)); }

};


/**
 * Classpath: java.awt.geom.Dimension2D
 * Package name: java.awt.geom
 */
class Dimension2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Dimension2D";
public:
    STATICINITIALIZE;

    Dimension2D(jobject object) : JavaObject(object) {}

    void setSize(Dimension2D arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(Ljava.awt.geom.Dimension2D;)V", arg0)); }

    void setSize(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(DD)V", arg0, arg1)); }

    double getWidth() { return double(*javaClass->invokeMethod<double>(this->object, "getWidth", "()D", )); }

    double getHeight() { return double(*javaClass->invokeMethod<double>(this->object, "getHeight", "()D", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.awt.geom.Point2D
 * Package name: java.awt.geom
 */
class Point2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Point2D";
public:
    STATICINITIALIZE;

    Point2D(jobject object) : JavaObject(object) {}

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    double distanceSq(Point2D arg0) { return double(*javaClass->invokeMethod<double>(this->object, "distanceSq", "(Ljava.awt.geom.Point2D;)D", arg0)); }

    static double distanceSq(double arg0, double arg1, double arg2, double arg3) { return double(*javaClass->invokeStaticMethod<double>(this->object, "distanceSq", "(DDDD)D", arg0, arg1, arg2, arg3)); }

    double distanceSq(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "distanceSq", "(DD)D", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    static double distance(double arg0, double arg1, double arg2, double arg3) { return double(*javaClass->invokeStaticMethod<double>(this->object, "distance", "(DDDD)D", arg0, arg1, arg2, arg3)); }

    double distance(Point2D arg0) { return double(*javaClass->invokeMethod<double>(this->object, "distance", "(Ljava.awt.geom.Point2D;)D", arg0)); }

    double distance(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "distance", "(DD)D", arg0, arg1)); }

    void setLocation(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }

    void setLocation(Point2D arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(Ljava.awt.geom.Point2D;)V", arg0)); }

};


/**
 * Classpath: java.awt.geom.AffineTransform
 * Package name: java.awt.geom
 */
class AffineTransform : public Object {
protected:
    const inline static char *className = "java.awt.geom.AffineTransform";
public:
    STATICINITIALIZE;

    AffineTransform(jobject object) : JavaObject(object) {}

    void updateState() { (*javaClass->invokeMethod<void>(this->object, "updateState", "()V", )); }

    void invert() { (*javaClass->invokeMethod<void>(this->object, "invert", "()V", )); }

    void translate(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(DD)V", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void scale(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "scale", "(DD)V", arg0, arg1)); }

    void transform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "transform", "([DI[DII)V", arg0, arg1, arg2, arg3, arg4)); }

    void transform(arr_F arg0, int arg1, arr_D arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "transform", "([FI[DII)V", arg0, arg1, arg2, arg3, arg4)); }

    void transform(arr_F arg0, int arg1, arr_F arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "transform", "([FI[FII)V", arg0, arg1, arg2, arg3, arg4)); }

    void transform(Point2D_interface arg0, int arg1, Point2D_interface arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "transform", "([Ljava.awt.geom.Point2D;I[Ljava.awt.geom.Point2D;II)V", arg0, arg1, arg2, arg3, arg4)); }

    Point2D transform(Point2D arg0, Point2D arg1) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "transform", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)Ljava.awt.geom.Point2D;", arg0, arg1)); }

    void transform(arr_D arg0, int arg1, arr_F arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "transform", "([DI[FII)V", arg0, arg1, arg2, arg3, arg4)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    int getType() { return int(*javaClass->invokeMethod<int>(this->object, "getType", "()I", )); }

    bool isIdentity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isIdentity", "()Z", )); }

    void rotate(double arg0) { (*javaClass->invokeMethod<void>(this->object, "rotate", "(D)V", arg0)); }

    void rotate(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "rotate", "(DDD)V", arg0, arg1, arg2)); }

    void rotate(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "rotate", "(DD)V", arg0, arg1)); }

    void rotate(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "rotate", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void shear(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "shear", "(DD)V", arg0, arg1)); }

    void setTransform(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { (*javaClass->invokeMethod<void>(this->object, "setTransform", "(DDDDDD)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void setToTranslation(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setToTranslation", "(DD)V", arg0, arg1)); }

    void setToRotation(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setToRotation", "(DD)V", arg0, arg1)); }

    void setToRotation(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setToRotation", "(DDD)V", arg0, arg1, arg2)); }

    void setToRotation(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setToRotation", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void setToRotation(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setToRotation", "(D)V", arg0)); }

    void setToQuadrantRotation(int arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setToQuadrantRotation", "(IDD)V", arg0, arg1, arg2)); }

    void setToQuadrantRotation(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setToQuadrantRotation", "(I)V", arg0)); }

    void setToScale(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setToScale", "(DD)V", arg0, arg1)); }

    void setToShear(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setToShear", "(DD)V", arg0, arg1)); }

    void calculateType() { (*javaClass->invokeMethod<void>(this->object, "calculateType", "()V", )); }

    void stateError() { (*javaClass->invokeMethod<void>(this->object, "stateError", "()V", )); }

    void rotate90() { (*javaClass->invokeMethod<void>(this->object, "rotate90", "()V", )); }

    void rotate270() { (*javaClass->invokeMethod<void>(this->object, "rotate270", "()V", )); }

    void rotate180() { (*javaClass->invokeMethod<void>(this->object, "rotate180", "()V", )); }

    static double _matround(double arg0) { return double(*javaClass->invokeStaticMethod<double>(this->object, "_matround", "(D)D", arg0)); }

    static AffineTransform getTranslateInstance(double arg0, double arg1) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getTranslateInstance", "(DD)Ljava.awt.geom.AffineTransform;", arg0, arg1)); }

    static AffineTransform getRotateInstance(double arg0, double arg1) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getRotateInstance", "(DD)Ljava.awt.geom.AffineTransform;", arg0, arg1)); }

    static AffineTransform getRotateInstance(double arg0, double arg1, double arg2, double arg3) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getRotateInstance", "(DDDD)Ljava.awt.geom.AffineTransform;", arg0, arg1, arg2, arg3)); }

    static AffineTransform getRotateInstance(double arg0) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getRotateInstance", "(D)Ljava.awt.geom.AffineTransform;", arg0)); }

    static AffineTransform getRotateInstance(double arg0, double arg1, double arg2) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getRotateInstance", "(DDD)Ljava.awt.geom.AffineTransform;", arg0, arg1, arg2)); }

    static AffineTransform getQuadrantRotateInstance(int arg0) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getQuadrantRotateInstance", "(I)Ljava.awt.geom.AffineTransform;", arg0)); }

    static AffineTransform getQuadrantRotateInstance(int arg0, double arg1, double arg2) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getQuadrantRotateInstance", "(IDD)Ljava.awt.geom.AffineTransform;", arg0, arg1, arg2)); }

    static AffineTransform getScaleInstance(double arg0, double arg1) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getScaleInstance", "(DD)Ljava.awt.geom.AffineTransform;", arg0, arg1)); }

    static AffineTransform getShearInstance(double arg0, double arg1) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getShearInstance", "(DD)Ljava.awt.geom.AffineTransform;", arg0, arg1)); }

    double getDeterminant() { return double(*javaClass->invokeMethod<double>(this->object, "getDeterminant", "()D", )); }

    void getMatrix(arr_D arg0) { (*javaClass->invokeMethod<void>(this->object, "getMatrix", "([D)V", arg0)); }

    double getScaleX() { return double(*javaClass->invokeMethod<double>(this->object, "getScaleX", "()D", )); }

    double getScaleY() { return double(*javaClass->invokeMethod<double>(this->object, "getScaleY", "()D", )); }

    double getShearX() { return double(*javaClass->invokeMethod<double>(this->object, "getShearX", "()D", )); }

    double getShearY() { return double(*javaClass->invokeMethod<double>(this->object, "getShearY", "()D", )); }

    double getTranslateX() { return double(*javaClass->invokeMethod<double>(this->object, "getTranslateX", "()D", )); }

    double getTranslateY() { return double(*javaClass->invokeMethod<double>(this->object, "getTranslateY", "()D", )); }

    void quadrantRotate(int arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "quadrantRotate", "(IDD)V", arg0, arg1, arg2)); }

    void quadrantRotate(int arg0) { (*javaClass->invokeMethod<void>(this->object, "quadrantRotate", "(I)V", arg0)); }

    void setToIdentity() { (*javaClass->invokeMethod<void>(this->object, "setToIdentity", "()V", )); }

    void concatenate(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "concatenate", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void preConcatenate(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "preConcatenate", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    AffineTransform createInverse() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "createInverse", "()Ljava.awt.geom.AffineTransform;", )); }

    void inverseTransform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "inverseTransform", "([DI[DII)V", arg0, arg1, arg2, arg3, arg4)); }

    Point2D inverseTransform(Point2D arg0, Point2D arg1) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "inverseTransform", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)Ljava.awt.geom.Point2D;", arg0, arg1)); }

    void deltaTransform(arr_D arg0, int arg1, arr_D arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "deltaTransform", "([DI[DII)V", arg0, arg1, arg2, arg3, arg4)); }

    Point2D deltaTransform(Point2D arg0, Point2D arg1) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "deltaTransform", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)Ljava.awt.geom.Point2D;", arg0, arg1)); }

    Shape createTransformedShape(Shape arg0) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "createTransformedShape", "(Ljava.awt.Shape;)Ljava.awt.Shape;", arg0)); }

};


/**
 * Classpath: [Ljava.awt.geom.Point2D;
 */
class Point2D_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.geom.Point2D;";
public:
    STATICINITIALIZE;

    Point2D_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.Shape
 * Package name: java.awt
 */
class Shape : public JavaObject {
protected:
    const inline static char *className = "java.awt.Shape";
public:
    STATICINITIALIZE;

    Shape(jobject object) : JavaObject(object) {}

    bool contains(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool contains(double arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DD)Z", arg0, arg1)); }

    bool contains(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool contains(Point2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Point2D;)Z", arg0)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    bool intersects(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool intersects(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    Rectangle2D getBounds2D() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava.awt.geom.Rectangle2D;", )); }

    PathIterator getPathIterator(AffineTransform arg0, double arg1) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;D)Ljava.awt.geom.PathIterator;", arg0, arg1)); }

    PathIterator getPathIterator(AffineTransform arg0) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.geom.PathIterator;", arg0)); }

};


/**
 * Classpath: java.awt.geom.PathIterator
 * Package name: java.awt.geom
 */
class PathIterator : public JavaObject {
protected:
    const inline static char *className = "java.awt.geom.PathIterator";
public:
    STATICINITIALIZE;

    PathIterator(jobject object) : JavaObject(object) {}

    void next() { (*javaClass->invokeMethod<void>(this->object, "next", "()V", )); }

    bool isDone() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDone", "()Z", )); }

    int getWindingRule() { return int(*javaClass->invokeMethod<int>(this->object, "getWindingRule", "()I", )); }

    int currentSegment(arr_F arg0) { return int(*javaClass->invokeMethod<int>(this->object, "currentSegment", "([F)I", arg0)); }

    int currentSegment(arr_D arg0) { return int(*javaClass->invokeMethod<int>(this->object, "currentSegment", "([D)I", arg0)); }

};


/**
 * Classpath: java.awt.geom.Line2D
 * Package name: java.awt.geom
 */
class Line2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Line2D";
public:
    STATICINITIALIZE;

    Line2D(jobject object) : JavaObject(object) {}

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    bool contains(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool contains(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool contains(Point2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Point2D;)Z", arg0)); }

    bool contains(double arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DD)Z", arg0, arg1)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    bool intersects(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool intersects(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    PathIterator getPathIterator(AffineTransform arg0) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.geom.PathIterator;", arg0)); }

    PathIterator getPathIterator(AffineTransform arg0, double arg1) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;D)Ljava.awt.geom.PathIterator;", arg0, arg1)); }

    double getX1() { return double(*javaClass->invokeMethod<double>(this->object, "getX1", "()D", )); }

    double getY1() { return double(*javaClass->invokeMethod<double>(this->object, "getY1", "()D", )); }

    double getX2() { return double(*javaClass->invokeMethod<double>(this->object, "getX2", "()D", )); }

    double getY2() { return double(*javaClass->invokeMethod<double>(this->object, "getY2", "()D", )); }

    bool intersectsLine(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsLine", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool intersectsLine(Line2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsLine", "(Ljava.awt.geom.Line2D;)Z", arg0)); }

    void setLine(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setLine", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void setLine(Point2D arg0, Point2D arg1) { (*javaClass->invokeMethod<void>(this->object, "setLine", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)V", arg0, arg1)); }

    void setLine(Line2D arg0) { (*javaClass->invokeMethod<void>(this->object, "setLine", "(Ljava.awt.geom.Line2D;)V", arg0)); }

    int relativeCCW(double arg0, double arg1) { return int(*javaClass->invokeMethod<int>(this->object, "relativeCCW", "(DD)I", arg0, arg1)); }

    static int relativeCCW(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return int(*javaClass->invokeStaticMethod<int>(this->object, "relativeCCW", "(DDDDDD)I", arg0, arg1, arg2, arg3, arg4, arg5)); }

    int relativeCCW(Point2D arg0) { return int(*javaClass->invokeMethod<int>(this->object, "relativeCCW", "(Ljava.awt.geom.Point2D;)I", arg0)); }

    static bool linesIntersect(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "linesIntersect", "(DDDDDDDD)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    double ptSegDistSq(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "ptSegDistSq", "(DD)D", arg0, arg1)); }

    static double ptSegDistSq(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*javaClass->invokeStaticMethod<double>(this->object, "ptSegDistSq", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }

    double ptSegDistSq(Point2D arg0) { return double(*javaClass->invokeMethod<double>(this->object, "ptSegDistSq", "(Ljava.awt.geom.Point2D;)D", arg0)); }

    double ptSegDist(Point2D arg0) { return double(*javaClass->invokeMethod<double>(this->object, "ptSegDist", "(Ljava.awt.geom.Point2D;)D", arg0)); }

    double ptSegDist(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "ptSegDist", "(DD)D", arg0, arg1)); }

    static double ptSegDist(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*javaClass->invokeStaticMethod<double>(this->object, "ptSegDist", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }

    double ptLineDistSq(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "ptLineDistSq", "(DD)D", arg0, arg1)); }

    double ptLineDistSq(Point2D arg0) { return double(*javaClass->invokeMethod<double>(this->object, "ptLineDistSq", "(Ljava.awt.geom.Point2D;)D", arg0)); }

    static double ptLineDistSq(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*javaClass->invokeStaticMethod<double>(this->object, "ptLineDistSq", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }

    double ptLineDist(Point2D arg0) { return double(*javaClass->invokeMethod<double>(this->object, "ptLineDist", "(Ljava.awt.geom.Point2D;)D", arg0)); }

    static double ptLineDist(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { return double(*javaClass->invokeStaticMethod<double>(this->object, "ptLineDist", "(DDDDDD)D", arg0, arg1, arg2, arg3, arg4, arg5)); }

    double ptLineDist(double arg0, double arg1) { return double(*javaClass->invokeMethod<double>(this->object, "ptLineDist", "(DD)D", arg0, arg1)); }

    Point2D getP1() { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "getP1", "()Ljava.awt.geom.Point2D;", )); }

    Point2D getP2() { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "getP2", "()Ljava.awt.geom.Point2D;", )); }

};


/**
 * Classpath: java.awt.geom.RectangularShape
 * Package name: java.awt.geom
 */
class RectangularShape : public Object {
protected:
    const inline static char *className = "java.awt.geom.RectangularShape";
public:
    STATICINITIALIZE;

    RectangularShape(jobject object) : JavaObject(object) {}

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    double getWidth() { return double(*javaClass->invokeMethod<double>(this->object, "getWidth", "()D", )); }

    double getHeight() { return double(*javaClass->invokeMethod<double>(this->object, "getHeight", "()D", )); }

    double getCenterX() { return double(*javaClass->invokeMethod<double>(this->object, "getCenterX", "()D", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    bool contains(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool contains(Point2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Point2D;)Z", arg0)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    double getMinX() { return double(*javaClass->invokeMethod<double>(this->object, "getMinX", "()D", )); }

    double getMinY() { return double(*javaClass->invokeMethod<double>(this->object, "getMinY", "()D", )); }

    bool intersects(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    PathIterator getPathIterator(AffineTransform arg0, double arg1) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;D)Ljava.awt.geom.PathIterator;", arg0, arg1)); }

    double getMaxX() { return double(*javaClass->invokeMethod<double>(this->object, "getMaxX", "()D", )); }

    double getMaxY() { return double(*javaClass->invokeMethod<double>(this->object, "getMaxY", "()D", )); }

    void setFrame(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setFrame", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void setFrame(Point2D arg0, Dimension2D arg1) { (*javaClass->invokeMethod<void>(this->object, "setFrame", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Dimension2D;)V", arg0, arg1)); }

    void setFrame(Rectangle2D arg0) { (*javaClass->invokeMethod<void>(this->object, "setFrame", "(Ljava.awt.geom.Rectangle2D;)V", arg0)); }

    void setFrameFromDiagonal(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setFrameFromDiagonal", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void setFrameFromDiagonal(Point2D arg0, Point2D arg1) { (*javaClass->invokeMethod<void>(this->object, "setFrameFromDiagonal", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)V", arg0, arg1)); }

    void setFrameFromCenter(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setFrameFromCenter", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void setFrameFromCenter(Point2D arg0, Point2D arg1) { (*javaClass->invokeMethod<void>(this->object, "setFrameFromCenter", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)V", arg0, arg1)); }

    double getCenterY() { return double(*javaClass->invokeMethod<double>(this->object, "getCenterY", "()D", )); }

    Rectangle2D getFrame() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getFrame", "()Ljava.awt.geom.Rectangle2D;", )); }

};


/**
 * Classpath: java.awt.image.SampleModel
 * Package name: java.awt.image
 */
class SampleModel : public Object {
protected:
    const inline static char *className = "java.awt.image.SampleModel";
public:
    STATICINITIALIZE;

    SampleModel(jobject object) : JavaObject(object) {}

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    int getNumBands() { return int(*javaClass->invokeMethod<int>(this->object, "getNumBands", "()I", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Object getDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4, DataBuffer arg5) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDataElements", "(IIIILjava.lang.Object;Ljava.awt.image.DataBuffer;)Ljava.lang.Object;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Object getDataElements(int arg0, int arg1, Object arg2, DataBuffer arg3) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDataElements", "(IILjava.lang.Object;Ljava.awt.image.DataBuffer;)Ljava.lang.Object;", arg0, arg1, arg2, arg3)); }

    int getDataType() { return int(*javaClass->invokeMethod<int>(this->object, "getDataType", "()I", )); }

    void setDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4, DataBuffer arg5) { (*javaClass->invokeMethod<void>(this->object, "setDataElements", "(IIIILjava.lang.Object;Ljava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setDataElements(int arg0, int arg1, Object arg2, DataBuffer arg3) { (*javaClass->invokeMethod<void>(this->object, "setDataElements", "(IILjava.lang.Object;Ljava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3)); }

    SampleModel createCompatibleSampleModel(int arg0, int arg1) { return SampleModel(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleSampleModel", "(II)Ljava.awt.image.SampleModel;", arg0, arg1)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_I arg4, DataBuffer arg5) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIII[ILjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_D arg4, DataBuffer arg5) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIII[DLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_F arg4, DataBuffer arg5) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIII[FLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    int getSampleSize(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getSampleSize", "(I)I", arg0)); }

    DataBuffer createDataBuffer() { return DataBuffer(*javaClass->invokeMethod<jobject>(this->object, "createDataBuffer", "()Ljava.awt.image.DataBuffer;", )); }

    int getNumDataElements() { return int(*javaClass->invokeMethod<int>(this->object, "getNumDataElements", "()I", )); }

    SampleModel createSubsetSampleModel(arr_I arg0) { return SampleModel(*javaClass->invokeMethod<jobject>(this->object, "createSubsetSampleModel", "([I)Ljava.awt.image.SampleModel;", arg0)); }

    int getTransferType() { return int(*javaClass->invokeMethod<int>(this->object, "getTransferType", "()I", )); }

    int getSample(int arg0, int arg1, int arg2, DataBuffer arg3) { return int(*javaClass->invokeMethod<int>(this->object, "getSample", "(IIILjava.awt.image.DataBuffer;)I", arg0, arg1, arg2, arg3)); }

    float getSampleFloat(int arg0, int arg1, int arg2, DataBuffer arg3) { return float(*javaClass->invokeMethod<float>(this->object, "getSampleFloat", "(IIILjava.awt.image.DataBuffer;)F", arg0, arg1, arg2, arg3)); }

    double getSampleDouble(int arg0, int arg1, int arg2, DataBuffer arg3) { return double(*javaClass->invokeMethod<double>(this->object, "getSampleDouble", "(IIILjava.awt.image.DataBuffer;)D", arg0, arg1, arg2, arg3)); }

    void setSample(int arg0, int arg1, int arg2, int arg3, DataBuffer arg4) { (*javaClass->invokeMethod<void>(this->object, "setSample", "(IIIILjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4)); }

    void setSample(int arg0, int arg1, int arg2, float arg3, DataBuffer arg4) { (*javaClass->invokeMethod<void>(this->object, "setSample", "(IIIFLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4)); }

    void setSample(int arg0, int arg1, int arg2, double arg3, DataBuffer arg4) { (*javaClass->invokeMethod<void>(this->object, "setSample", "(IIIDLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4)); }

    void setPixel(int arg0, int arg1, arr_F arg2, DataBuffer arg3) { (*javaClass->invokeMethod<void>(this->object, "setPixel", "(II[FLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3)); }

    void setPixel(int arg0, int arg1, arr_I arg2, DataBuffer arg3) { (*javaClass->invokeMethod<void>(this->object, "setPixel", "(II[ILjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3)); }

    void setPixel(int arg0, int arg1, arr_D arg2, DataBuffer arg3) { (*javaClass->invokeMethod<void>(this->object, "setPixel", "(II[DLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3)); }

    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5, DataBuffer arg6) { (*javaClass->invokeMethod<void>(this->object, "setSamples", "(IIIII[ILjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_F arg5, DataBuffer arg6) { (*javaClass->invokeMethod<void>(this->object, "setSamples", "(IIIII[FLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_D arg5, DataBuffer arg6) { (*javaClass->invokeMethod<void>(this->object, "setSamples", "(IIIII[DLjava.awt.image.DataBuffer;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

};


/**
 * Classpath: java.awt.image.DataBuffer
 * Package name: java.awt.image
 */
class DataBuffer : public Object {
protected:
    const inline static char *className = "java.awt.image.DataBuffer";
public:
    STATICINITIALIZE;

    DataBuffer(jobject object) : JavaObject(object) {}

    int getSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSize", "()I", )); }

    int getOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getOffset", "()I", )); }

    int getDataType() { return int(*javaClass->invokeMethod<int>(this->object, "getDataType", "()I", )); }

    static int getDataTypeSize(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getDataTypeSize", "(I)I", arg0)); }

    int getNumBanks() { return int(*javaClass->invokeMethod<int>(this->object, "getNumBanks", "()I", )); }

    int getElem(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getElem", "(I)I", arg0)); }

    int getElem(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getElem", "(II)I", arg0, arg1)); }

    void setElem(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setElem", "(II)V", arg0, arg1)); }

    void setElem(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setElem", "(III)V", arg0, arg1, arg2)); }

    float getElemFloat(int arg0, int arg1) { return float(*javaClass->invokeMethod<float>(this->object, "getElemFloat", "(II)F", arg0, arg1)); }

    float getElemFloat(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getElemFloat", "(I)F", arg0)); }

    void setElemFloat(int arg0, int arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "setElemFloat", "(IIF)V", arg0, arg1, arg2)); }

    void setElemFloat(int arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setElemFloat", "(IF)V", arg0, arg1)); }

    double getElemDouble(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getElemDouble", "(I)D", arg0)); }

    double getElemDouble(int arg0, int arg1) { return double(*javaClass->invokeMethod<double>(this->object, "getElemDouble", "(II)D", arg0, arg1)); }

    void setElemDouble(int arg0, int arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setElemDouble", "(IID)V", arg0, arg1, arg2)); }

    void setElemDouble(int arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setElemDouble", "(ID)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.image.WritableRaster
 * Package name: java.awt.image
 */
class WritableRaster : public Raster {
protected:
    const inline static char *className = "java.awt.image.WritableRaster";
public:
    STATICINITIALIZE;

    WritableRaster(jobject object) : JavaObject(object) {}

    void setDataElements(int arg0, int arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "setDataElements", "(IILjava.lang.Object;)V", arg0, arg1, arg2)); }

    void setDataElements(int arg0, int arg1, Raster arg2) { (*javaClass->invokeMethod<void>(this->object, "setDataElements", "(IILjava.awt.image.Raster;)V", arg0, arg1, arg2)); }

    void setDataElements(int arg0, int arg1, int arg2, int arg3, Object arg4) { (*javaClass->invokeMethod<void>(this->object, "setDataElements", "(IIIILjava.lang.Object;)V", arg0, arg1, arg2, arg3, arg4)); }

    WritableRaster createWritableChild(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, arr_I arg6) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "createWritableChild", "(IIIIII[I)Ljava.awt.image.WritableRaster;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_I arg4) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIII[I)V", arg0, arg1, arg2, arg3, arg4)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_D arg4) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIII[D)V", arg0, arg1, arg2, arg3, arg4)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, arr_F arg4) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIII[F)V", arg0, arg1, arg2, arg3, arg4)); }

    void setRect(int arg0, int arg1, Raster arg2) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(IILjava.awt.image.Raster;)V", arg0, arg1, arg2)); }

    void setRect(Raster arg0) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(Ljava.awt.image.Raster;)V", arg0)); }

    void setSample(int arg0, int arg1, int arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setSample", "(IIID)V", arg0, arg1, arg2, arg3)); }

    void setSample(int arg0, int arg1, int arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "setSample", "(IIIF)V", arg0, arg1, arg2, arg3)); }

    void setSample(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setSample", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void setPixel(int arg0, int arg1, arr_I arg2) { (*javaClass->invokeMethod<void>(this->object, "setPixel", "(II[I)V", arg0, arg1, arg2)); }

    void setPixel(int arg0, int arg1, arr_F arg2) { (*javaClass->invokeMethod<void>(this->object, "setPixel", "(II[F)V", arg0, arg1, arg2)); }

    void setPixel(int arg0, int arg1, arr_D arg2) { (*javaClass->invokeMethod<void>(this->object, "setPixel", "(II[D)V", arg0, arg1, arg2)); }

    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_F arg5) { (*javaClass->invokeMethod<void>(this->object, "setSamples", "(IIIII[F)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_I arg5) { (*javaClass->invokeMethod<void>(this->object, "setSamples", "(IIIII[I)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setSamples(int arg0, int arg1, int arg2, int arg3, int arg4, arr_D arg5) { (*javaClass->invokeMethod<void>(this->object, "setSamples", "(IIIII[D)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    WritableRaster getWritableParent() { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "getWritableParent", "()Ljava.awt.image.WritableRaster;", )); }

    WritableRaster createWritableTranslatedChild(int arg0, int arg1) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "createWritableTranslatedChild", "(II)Ljava.awt.image.WritableRaster;", arg0, arg1)); }

};


/**
 * Classpath: java.awt.image.ImageObserver
 * Package name: java.awt.image
 */
class ImageObserver : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.ImageObserver";
public:
    STATICINITIALIZE;

    ImageObserver(jobject object) : JavaObject(object) {}

    bool imageUpdate(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "imageUpdate", "(Ljava.awt.Image;IIIII)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

};


/**
 * Classpath: java.awt.Image
 * Package name: java.awt
 */
class Image : public Object {
protected:
    const inline static char *className = "java.awt.Image";
public:
    STATICINITIALIZE;

    Image(jobject object) : JavaObject(object) {}

    ImageCapabilities getCapabilities(GraphicsConfiguration arg0) { return ImageCapabilities(*javaClass->invokeMethod<jobject>(this->object, "getCapabilities", "(Ljava.awt.GraphicsConfiguration;)Ljava.awt.ImageCapabilities;", arg0)); }

    int getWidth(ImageObserver arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "(Ljava.awt.image.ImageObserver;)I", arg0)); }

    int getHeight(ImageObserver arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "(Ljava.awt.image.ImageObserver;)I", arg0)); }

    Object getProperty(String arg0, ImageObserver arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;Ljava.awt.image.ImageObserver;)Ljava.lang.Object;", arg0, arg1)); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    ImageProducer getSource() { return ImageProducer(*javaClass->invokeMethod<jobject>(this->object, "getSource", "()Ljava.awt.image.ImageProducer;", )); }

    Graphics getGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava.awt.Graphics;", )); }

    void setAccelerationPriority(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccelerationPriority", "(F)V", arg0)); }

    Image getScaledInstance(int arg0, int arg1, int arg2) { return Image(*javaClass->invokeMethod<jobject>(this->object, "getScaledInstance", "(III)Ljava.awt.Image;", arg0, arg1, arg2)); }

    float getAccelerationPriority() { return float(*javaClass->invokeMethod<float>(this->object, "getAccelerationPriority", "()F", )); }

};


/**
 * Classpath: java.awt.GraphicsConfiguration
 * Package name: java.awt
 */
class GraphicsConfiguration : public Object {
protected:
    const inline static char *className = "java.awt.GraphicsConfiguration";
public:
    STATICINITIALIZE;

    GraphicsConfiguration(jobject object) : JavaObject(object) {}

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    ColorModel getColorModel() { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava.awt.image.ColorModel;", )); }

    ColorModel getColorModel(int arg0) { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "(I)Ljava.awt.image.ColorModel;", arg0)); }

    bool isTranslucencyCapable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTranslucencyCapable", "()Z", )); }

    BufferedImage createCompatibleImage(int arg0, int arg1, int arg2) { return BufferedImage(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleImage", "(III)Ljava.awt.image.BufferedImage;", arg0, arg1, arg2)); }

    BufferedImage createCompatibleImage(int arg0, int arg1) { return BufferedImage(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleImage", "(II)Ljava.awt.image.BufferedImage;", arg0, arg1)); }

    VolatileImage createCompatibleVolatileImage(int arg0, int arg1) { return VolatileImage(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(II)Ljava.awt.image.VolatileImage;", arg0, arg1)); }

    VolatileImage createCompatibleVolatileImage(int arg0, int arg1, int arg2) { return VolatileImage(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(III)Ljava.awt.image.VolatileImage;", arg0, arg1, arg2)); }

    VolatileImage createCompatibleVolatileImage(int arg0, int arg1, ImageCapabilities arg2, int arg3) { return VolatileImage(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(IILjava.awt.ImageCapabilities;I)Ljava.awt.image.VolatileImage;", arg0, arg1, arg2, arg3)); }

    VolatileImage createCompatibleVolatileImage(int arg0, int arg1, ImageCapabilities arg2) { return VolatileImage(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleVolatileImage", "(IILjava.awt.ImageCapabilities;)Ljava.awt.image.VolatileImage;", arg0, arg1, arg2)); }

    ImageCapabilities getImageCapabilities() { return ImageCapabilities(*javaClass->invokeMethod<jobject>(this->object, "getImageCapabilities", "()Ljava.awt.ImageCapabilities;", )); }

    GraphicsDevice getDevice() { return GraphicsDevice(*javaClass->invokeMethod<jobject>(this->object, "getDevice", "()Ljava.awt.GraphicsDevice;", )); }

    AffineTransform getDefaultTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getDefaultTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    AffineTransform getNormalizingTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getNormalizingTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    BufferCapabilities getBufferCapabilities() { return BufferCapabilities(*javaClass->invokeMethod<jobject>(this->object, "getBufferCapabilities", "()Ljava.awt.BufferCapabilities;", )); }

};


/**
 * Classpath: java.awt.image.ColorModel
 * Package name: java.awt.image
 */
class ColorModel : public Object {
protected:
    const inline static char *className = "java.awt.image.ColorModel";
public:
    STATICINITIALIZE;

    ColorModel(jobject object) : JavaObject(object) {}

    int getRGB(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRGB", "(I)I", arg0)); }

    int getRGB(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRGB", "(Ljava.lang.Object;)I", arg0)); }

    void finalize() { (*javaClass->invokeMethod<void>(this->object, "finalize", "()V", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    WritableRaster createCompatibleWritableRaster(int arg0, int arg1) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleWritableRaster", "(II)Ljava.awt.image.WritableRaster;", arg0, arg1)); }

    static ColorModel getRGBdefault() { return ColorModel(*javaClass->invokeStaticMethod<jobject>(this->object, "getRGBdefault", "()Ljava.awt.image.ColorModel;", )); }

    bool hasAlpha() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasAlpha", "()Z", )); }

    bool isAlphaPremultiplied() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAlphaPremultiplied", "()Z", )); }

    bool isCompatibleRaster(Raster arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCompatibleRaster", "(Ljava.awt.image.Raster;)Z", arg0)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    ColorModel coerceData(WritableRaster arg0, bool arg1) { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "coerceData", "(Ljava.awt.image.WritableRaster;Z)Ljava.awt.image.ColorModel;", arg0, arg1)); }

    ColorSpace getColorSpace() { return ColorSpace(*javaClass->invokeMethod<jobject>(this->object, "getColorSpace", "()Ljava.awt.color.ColorSpace;", )); }

    int getComponentSize(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getComponentSize", "(I)I", arg0)); }

    int getPixelSize() { return int(*javaClass->invokeMethod<int>(this->object, "getPixelSize", "()I", )); }

    int getNumComponents() { return int(*javaClass->invokeMethod<int>(this->object, "getNumComponents", "()I", )); }

    WritableRaster getAlphaRaster(WritableRaster arg0) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "getAlphaRaster", "(Ljava.awt.image.WritableRaster;)Ljava.awt.image.WritableRaster;", arg0)); }

    Object getDataElements(arr_I arg0, int arg1, Object arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDataElements", "([IILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Object getDataElements(int arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDataElements", "(ILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object getDataElements(arr_F arg0, int arg1, Object arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDataElements", "([FILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    SampleModel createCompatibleSampleModel(int arg0, int arg1) { return SampleModel(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleSampleModel", "(II)Ljava.awt.image.SampleModel;", arg0, arg1)); }

    int getTransparency() { return int(*javaClass->invokeMethod<int>(this->object, "getTransparency", "()I", )); }

    static void loadLibraries() { (*javaClass->invokeStaticMethod<void>(this->object, "loadLibraries", "()V", )); }

    int getTransferType() { return int(*javaClass->invokeMethod<int>(this->object, "getTransferType", "()I", )); }

    static int getDefaultTransferType(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getDefaultTransferType", "(I)I", arg0)); }

    int getAlpha(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getAlpha", "(Ljava.lang.Object;)I", arg0)); }

    int getAlpha(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getAlpha", "(I)I", arg0)); }

    int getRed(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRed", "(I)I", arg0)); }

    int getRed(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getRed", "(Ljava.lang.Object;)I", arg0)); }

    int getGreen(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getGreen", "(Ljava.lang.Object;)I", arg0)); }

    int getGreen(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getGreen", "(I)I", arg0)); }

    int getBlue(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getBlue", "(I)I", arg0)); }

    int getBlue(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getBlue", "(Ljava.lang.Object;)I", arg0)); }

    int getDataElement(arr_I arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getDataElement", "([II)I", arg0, arg1)); }

    int getDataElement(arr_F arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getDataElement", "([FI)I", arg0, arg1)); }

    static bool isLinearGRAYspace(ColorSpace arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLinearGRAYspace", "(Ljava.awt.color.ColorSpace;)Z", arg0)); }

    int getNumColorComponents() { return int(*javaClass->invokeMethod<int>(this->object, "getNumColorComponents", "()I", )); }

    bool isCompatibleSampleModel(SampleModel arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCompatibleSampleModel", "(Ljava.awt.image.SampleModel;)Z", arg0)); }

    static bool isLinearRGBspace(ColorSpace arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLinearRGBspace", "(Ljava.awt.color.ColorSpace;)Z", arg0)); }

};


/**
 * Classpath: java.awt.color.ColorSpace
 * Package name: java.awt.color
 */
class ColorSpace : public Object {
protected:
    const inline static char *className = "java.awt.color.ColorSpace";
public:
    STATICINITIALIZE;

    ColorSpace(jobject object) : JavaObject(object) {}

    String getName(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "(I)Ljava.lang.String;", arg0)); }

    void rangeCheck(int arg0) { (*javaClass->invokeMethod<void>(this->object, "rangeCheck", "(I)V", arg0)); }

    static ColorSpace getInstance(int arg0) { return ColorSpace(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(I)Ljava.awt.color.ColorSpace;", arg0)); }

    int getType() { return int(*javaClass->invokeMethod<int>(this->object, "getType", "()I", )); }

    bool isCS_sRGB() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCS_sRGB", "()Z", )); }

    float getMinValue(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getMinValue", "(I)F", arg0)); }

    float getMaxValue(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getMaxValue", "(I)F", arg0)); }

    int getNumComponents() { return int(*javaClass->invokeMethod<int>(this->object, "getNumComponents", "()I", )); }

};


/**
 * Classpath: java.awt.image.VolatileImage
 * Package name: java.awt.image
 */
class VolatileImage : public Image {
protected:
    const inline static char *className = "java.awt.image.VolatileImage";
public:
    STATICINITIALIZE;

    VolatileImage(jobject object) : JavaObject(object) {}

    ImageCapabilities getCapabilities() { return ImageCapabilities(*javaClass->invokeMethod<jobject>(this->object, "getCapabilities", "()Ljava.awt.ImageCapabilities;", )); }

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    int validate(GraphicsConfiguration arg0) { return int(*javaClass->invokeMethod<int>(this->object, "validate", "(Ljava.awt.GraphicsConfiguration;)I", arg0)); }

    ImageProducer getSource() { return ImageProducer(*javaClass->invokeMethod<jobject>(this->object, "getSource", "()Ljava.awt.image.ImageProducer;", )); }

    BufferedImage getSnapshot() { return BufferedImage(*javaClass->invokeMethod<jobject>(this->object, "getSnapshot", "()Ljava.awt.image.BufferedImage;", )); }

    bool contentsLost() { return bool(*javaClass->invokeMethod<boolean>(this->object, "contentsLost", "()Z", )); }

    Graphics2D createGraphics() { return Graphics2D(*javaClass->invokeMethod<jobject>(this->object, "createGraphics", "()Ljava.awt.Graphics2D;", )); }

    int getTransparency() { return int(*javaClass->invokeMethod<int>(this->object, "getTransparency", "()I", )); }

    Graphics getGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava.awt.Graphics;", )); }

};


/**
 * Classpath: java.awt.ImageCapabilities
 * Package name: java.awt
 */
class ImageCapabilities : public Object {
protected:
    const inline static char *className = "java.awt.ImageCapabilities";
public:
    STATICINITIALIZE;

    ImageCapabilities(jobject object) : JavaObject(object) {}

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    bool isTrueVolatile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTrueVolatile", "()Z", )); }

    bool isAccelerated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccelerated", "()Z", )); }

};


/**
 * Classpath: java.awt.image.ImageProducer
 * Package name: java.awt.image
 */
class ImageProducer : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.ImageProducer";
public:
    STATICINITIALIZE;

    ImageProducer(jobject object) : JavaObject(object) {}

    void addConsumer(ImageConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "addConsumer", "(Ljava.awt.image.ImageConsumer;)V", arg0)); }

    bool isConsumer(ImageConsumer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConsumer", "(Ljava.awt.image.ImageConsumer;)Z", arg0)); }

    void removeConsumer(ImageConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "removeConsumer", "(Ljava.awt.image.ImageConsumer;)V", arg0)); }

    void startProduction(ImageConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "startProduction", "(Ljava.awt.image.ImageConsumer;)V", arg0)); }

    void requestTopDownLeftRightResend(ImageConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "requestTopDownLeftRightResend", "(Ljava.awt.image.ImageConsumer;)V", arg0)); }

};


/**
 * Classpath: java.awt.image.ImageConsumer
 * Package name: java.awt.image
 */
class ImageConsumer : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.ImageConsumer";
public:
    STATICINITIALIZE;

    ImageConsumer(jobject object) : JavaObject(object) {}

    void setProperties(Hashtable arg0) { (*javaClass->invokeMethod<void>(this->object, "setProperties", "(Ljava.util.Hashtable;)V", arg0)); }

    void setDimensions(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setDimensions", "(II)V", arg0, arg1)); }

    void setColorModel(ColorModel arg0) { (*javaClass->invokeMethod<void>(this->object, "setColorModel", "(Ljava.awt.image.ColorModel;)V", arg0)); }

    void setHints(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setHints", "(I)V", arg0)); }

    void imageComplete(int arg0) { (*javaClass->invokeMethod<void>(this->object, "imageComplete", "(I)V", arg0)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, ColorModel arg4, arr_I arg5, int arg6, int arg7) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIIILjava.awt.image.ColorModel;[III)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    void setPixels(int arg0, int arg1, int arg2, int arg3, ColorModel arg4, arr_B arg5, int arg6, int arg7) { (*javaClass->invokeMethod<void>(this->object, "setPixels", "(IIIILjava.awt.image.ColorModel;[BII)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

};


/**
 * Classpath: [Ljava.util.Hashtable$Entry;
 */
class Hashtable_Entry_interface : public Object {
protected:
    const inline static char *className = "[Ljava.util.Hashtable$Entry;";
public:
    STATICINITIALIZE;

    Hashtable_Entry_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.util.Dictionary
 * Package name: java.util
 */
class Dictionary : public Object {
protected:
    const inline static char *className = "java.util.Dictionary";
public:
    STATICINITIALIZE;

    Dictionary(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Enumeration elements() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "elements", "()Ljava.util.Enumeration;", )); }

    Enumeration keys() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Ljava.util.Enumeration;", )); }

};


/**
 * Classpath: java.awt.Paint
 * Package name: java.awt
 */
class Paint : public JavaObject {
protected:
    const inline static char *className = "java.awt.Paint";
public:
    STATICINITIALIZE;

    Paint(jobject object) : JavaObject(object) {}

    PaintContext createContext(ColorModel arg0, Rectangle arg1, Rectangle2D arg2, AffineTransform arg3, RenderingHints arg4) { return PaintContext(*javaClass->invokeMethod<jobject>(this->object, "createContext", "(Ljava.awt.image.ColorModel;Ljava.awt.Rectangle;Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.AffineTransform;Ljava.awt.RenderingHints;)Ljava.awt.PaintContext;", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: java.awt.RenderingHints
 * Package name: java.awt
 */
class RenderingHints : public Object {
protected:
    const inline static char *className = "java.awt.RenderingHints";
public:
    STATICINITIALIZE;

    RenderingHints(jobject object) : JavaObject(object) {}

    void add(RenderingHints arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.awt.RenderingHints;)V", arg0)); }

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    void putAll(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "putAll", "(Ljava.util.Map;)V", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

};


/**
 * Classpath: java.awt.PaintContext
 * Package name: java.awt
 */
class PaintContext : public JavaObject {
protected:
    const inline static char *className = "java.awt.PaintContext";
public:
    STATICINITIALIZE;

    PaintContext(jobject object) : JavaObject(object) {}

    ColorModel getColorModel() { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava.awt.image.ColorModel;", )); }

    Raster getRaster(int arg0, int arg1, int arg2, int arg3) { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getRaster", "(IIII)Ljava.awt.image.Raster;", arg0, arg1, arg2, arg3)); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: java.awt.image.BufferedImageOp
 * Package name: java.awt.image
 */
class BufferedImageOp : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.BufferedImageOp";
public:
    STATICINITIALIZE;

    BufferedImageOp(jobject object) : JavaObject(object) {}

    BufferedImage filter(BufferedImage arg0, BufferedImage arg1) { return BufferedImage(*javaClass->invokeMethod<jobject>(this->object, "filter", "(Ljava.awt.image.BufferedImage;Ljava.awt.image.BufferedImage;)Ljava.awt.image.BufferedImage;", arg0, arg1)); }

    BufferedImage createCompatibleDestImage(BufferedImage arg0, ColorModel arg1) { return BufferedImage(*javaClass->invokeMethod<jobject>(this->object, "createCompatibleDestImage", "(Ljava.awt.image.BufferedImage;Ljava.awt.image.ColorModel;)Ljava.awt.image.BufferedImage;", arg0, arg1)); }

    Point2D getPoint2D(Point2D arg0, Point2D arg1) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "getPoint2D", "(Ljava.awt.geom.Point2D;Ljava.awt.geom.Point2D;)Ljava.awt.geom.Point2D;", arg0, arg1)); }

    Rectangle2D getBounds2D(BufferedImage arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "(Ljava.awt.image.BufferedImage;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    RenderingHints getRenderingHints() { return RenderingHints(*javaClass->invokeMethod<jobject>(this->object, "getRenderingHints", "()Ljava.awt.RenderingHints;", )); }

};


/**
 * Classpath: java.awt.image.RenderedImage
 * Package name: java.awt.image
 */
class RenderedImage : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.RenderedImage";
public:
    STATICINITIALIZE;

    RenderedImage(jobject object) : JavaObject(object) {}

    Raster getData() { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getData", "()Ljava.awt.image.Raster;", )); }

    Raster getData(Rectangle arg0) { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getData", "(Ljava.awt.Rectangle;)Ljava.awt.image.Raster;", arg0)); }

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    Object getProperty(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Vector getSources() { return Vector(*javaClass->invokeMethod<jobject>(this->object, "getSources", "()Ljava.util.Vector;", )); }

    ColorModel getColorModel() { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava.awt.image.ColorModel;", )); }

    SampleModel getSampleModel() { return SampleModel(*javaClass->invokeMethod<jobject>(this->object, "getSampleModel", "()Ljava.awt.image.SampleModel;", )); }

    int getMinX() { return int(*javaClass->invokeMethod<int>(this->object, "getMinX", "()I", )); }

    int getMinY() { return int(*javaClass->invokeMethod<int>(this->object, "getMinY", "()I", )); }

    int getNumXTiles() { return int(*javaClass->invokeMethod<int>(this->object, "getNumXTiles", "()I", )); }

    int getNumYTiles() { return int(*javaClass->invokeMethod<int>(this->object, "getNumYTiles", "()I", )); }

    int getMinTileX() { return int(*javaClass->invokeMethod<int>(this->object, "getMinTileX", "()I", )); }

    int getMinTileY() { return int(*javaClass->invokeMethod<int>(this->object, "getMinTileY", "()I", )); }

    int getTileWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getTileWidth", "()I", )); }

    int getTileHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getTileHeight", "()I", )); }

    int getTileGridXOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getTileGridXOffset", "()I", )); }

    int getTileGridYOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getTileGridYOffset", "()I", )); }

    Raster getTile(int arg0, int arg1) { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getTile", "(II)Ljava.awt.image.Raster;", arg0, arg1)); }

    WritableRaster copyData(WritableRaster arg0) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "copyData", "(Ljava.awt.image.WritableRaster;)Ljava.awt.image.WritableRaster;", arg0)); }

};


/**
 * Classpath: java.util.Vector
 * Package name: java.util
 */
class Vector : public AbstractList {
protected:
    const inline static char *className = "java.util.Vector";
public:
    STATICINITIALIZE;

    Vector(jobject object) : JavaObject(object) {}

    void setSize(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(I)V", arg0)); }

    void add(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(ILjava.lang.Object;)V", arg0, arg1)); }

    void add(Object arg0, Object_interface arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.Object;[Ljava.lang.Object;I)V", arg0, arg1, arg2)); }

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    Object remove(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(I)Ljava.lang.Object;", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    Object get(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Ljava.lang.Object;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    int indexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.Object;)I", arg0)); }

    int indexOf(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int lastIndexOf(Object arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.Object;I)I", arg0, arg1)); }

    int lastIndexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.Object;)I", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    void replaceAll(UnaryOperator arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.UnaryOperator;)V", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    List subList(int arg0, int arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "subList", "(II)Ljava.util.List;", arg0, arg1)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Enumeration elements() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "elements", "()Ljava.util.Enumeration;", )); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    bool addAll(int arg0, Collection arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(ILjava.util.Collection;)Z", arg0, arg1)); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    Object set(int arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "set", "(ILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void forEach(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.Consumer;)V", arg0)); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    Object elementData(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "elementData", "(I)Ljava.lang.Object;", arg0)); }

    void shiftTailOverGap(Object_interface arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "shiftTailOverGap", "([Ljava.lang.Object;II)V", arg0, arg1, arg2)); }

    Object elementAt(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "elementAt", "(I)Ljava.lang.Object;", arg0)); }

    static Object elementAt(Object_interface arg0, int arg1) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "elementAt", "([Ljava.lang.Object;I)Ljava.lang.Object;", arg0, arg1)); }

    bool removeIf(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeIf", "(Ljava.util.function.Predicate;)Z", arg0)); }

    static void setBit(arr_J arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setBit", "([JI)V", arg0, arg1)); }

    static bool isClear(arr_J arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isClear", "([JI)Z", arg0, arg1)); }

    void sort(Comparator arg0) { (*javaClass->invokeMethod<void>(this->object, "sort", "(Ljava.util.Comparator;)V", arg0)); }

    void removeRange(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "removeRange", "(II)V", arg0, arg1)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    ListIterator listIterator(int arg0) { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "(I)Ljava.util.ListIterator;", arg0)); }

    ListIterator listIterator() { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "()Ljava.util.ListIterator;", )); }

    void checkInvariants() { (*javaClass->invokeMethod<void>(this->object, "checkInvariants", "()V", )); }

    bool containsAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAll", "(Ljava.util.Collection;)Z", arg0)); }

    void removeElementAt(int arg0) { (*javaClass->invokeMethod<void>(this->object, "removeElementAt", "(I)V", arg0)); }

    bool removeElement(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeElement", "(Ljava.lang.Object;)Z", arg0)); }

    void insertElementAt(Object arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insertElementAt", "(Ljava.lang.Object;I)V", arg0, arg1)); }

    void removeAllElements() { (*javaClass->invokeMethod<void>(this->object, "removeAllElements", "()V", )); }

    Object firstElement() { return Object(*javaClass->invokeMethod<jobject>(this->object, "firstElement", "()Ljava.lang.Object;", )); }

    Object lastElement() { return Object(*javaClass->invokeMethod<jobject>(this->object, "lastElement", "()Ljava.lang.Object;", )); }

    void setElementAt(Object arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setElementAt", "(Ljava.lang.Object;I)V", arg0, arg1)); }

    void addElement(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "addElement", "(Ljava.lang.Object;)V", arg0)); }

    bool bulkRemove(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "bulkRemove", "(Ljava.util.function.Predicate;)Z", arg0)); }

    static bool lambda_retainAll_1(Collection arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$retainAll$1", "(Ljava.util.Collection;Ljava.lang.Object;)Z", arg0, arg1)); }

    static bool lambda_removeAll_0(Collection arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$removeAll$0", "(Ljava.util.Collection;Ljava.lang.Object;)Z", arg0, arg1)); }

    void copyInto(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "copyInto", "([Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: java.awt.image.renderable.RenderableImage
 * Package name: java.awt.image.renderable
 */
class RenderableImage : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.renderable.RenderableImage";
public:
    STATICINITIALIZE;

    RenderableImage(jobject object) : JavaObject(object) {}

    float getWidth() { return float(*javaClass->invokeMethod<float>(this->object, "getWidth", "()F", )); }

    float getHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getHeight", "()F", )); }

    Object getProperty(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Vector getSources() { return Vector(*javaClass->invokeMethod<jobject>(this->object, "getSources", "()Ljava.util.Vector;", )); }

    float getMinX() { return float(*javaClass->invokeMethod<float>(this->object, "getMinX", "()F", )); }

    float getMinY() { return float(*javaClass->invokeMethod<float>(this->object, "getMinY", "()F", )); }

    bool isDynamic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDynamic", "()Z", )); }

    RenderedImage createScaledRendering(int arg0, int arg1, RenderingHints arg2) { return RenderedImage(*javaClass->invokeMethod<jobject>(this->object, "createScaledRendering", "(IILjava.awt.RenderingHints;)Ljava.awt.image.RenderedImage;", arg0, arg1, arg2)); }

    RenderedImage createDefaultRendering() { return RenderedImage(*javaClass->invokeMethod<jobject>(this->object, "createDefaultRendering", "()Ljava.awt.image.RenderedImage;", )); }

    RenderedImage createRendering(RenderContext arg0) { return RenderedImage(*javaClass->invokeMethod<jobject>(this->object, "createRendering", "(Ljava.awt.image.renderable.RenderContext;)Ljava.awt.image.RenderedImage;", arg0)); }

};


/**
 * Classpath: java.awt.image.renderable.RenderContext
 * Package name: java.awt.image.renderable
 */
class RenderContext : public Object {
protected:
    const inline static char *className = "java.awt.image.renderable.RenderContext";
public:
    STATICINITIALIZE;

    RenderContext(jobject object) : JavaObject(object) {}

    AffineTransform getTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void preConcetenateTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "preConcetenateTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void concetenateTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "concetenateTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void preConcatenateTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "preConcatenateTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void concatenateTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "concatenateTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void setAreaOfInterest(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "setAreaOfInterest", "(Ljava.awt.Shape;)V", arg0)); }

    Shape getAreaOfInterest() { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getAreaOfInterest", "()Ljava.awt.Shape;", )); }

    void setRenderingHints(RenderingHints arg0) { (*javaClass->invokeMethod<void>(this->object, "setRenderingHints", "(Ljava.awt.RenderingHints;)V", arg0)); }

    RenderingHints getRenderingHints() { return RenderingHints(*javaClass->invokeMethod<jobject>(this->object, "getRenderingHints", "()Ljava.awt.RenderingHints;", )); }

    void setTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

};


/**
 * Classpath: java.awt.font.GlyphVector
 * Package name: java.awt.font
 */
class GlyphVector : public Object {
protected:
    const inline static char *className = "java.awt.font.GlyphVector";
public:
    STATICINITIALIZE;

    GlyphVector(jobject object) : JavaObject(object) {}

    bool equals(GlyphVector arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.awt.font.GlyphVector;)Z", arg0)); }

    int getGlyphCharIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getGlyphCharIndex", "(I)I", arg0)); }

    Rectangle2D getVisualBounds() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getVisualBounds", "()Ljava.awt.geom.Rectangle2D;", )); }

    Shape getGlyphOutline(int arg0) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getGlyphOutline", "(I)Ljava.awt.Shape;", arg0)); }

    Shape getGlyphOutline(int arg0, float arg1, float arg2) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getGlyphOutline", "(IFF)Ljava.awt.Shape;", arg0, arg1, arg2)); }

    Shape getGlyphVisualBounds(int arg0) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getGlyphVisualBounds", "(I)Ljava.awt.Shape;", arg0)); }

    void performDefaultLayout() { (*javaClass->invokeMethod<void>(this->object, "performDefaultLayout", "()V", )); }

    int getNumGlyphs() { return int(*javaClass->invokeMethod<int>(this->object, "getNumGlyphs", "()I", )); }

    int getGlyphCode(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getGlyphCode", "(I)I", arg0)); }

    Rectangle2D getLogicalBounds() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getLogicalBounds", "()Ljava.awt.geom.Rectangle2D;", )); }

    Rectangle getPixelBounds(FontRenderContext arg0, float arg1, float arg2) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getPixelBounds", "(Ljava.awt.font.FontRenderContext;FF)Ljava.awt.Rectangle;", arg0, arg1, arg2)); }

    Shape getOutline(float arg0, float arg1) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getOutline", "(FF)Ljava.awt.Shape;", arg0, arg1)); }

    Shape getOutline() { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getOutline", "()Ljava.awt.Shape;", )); }

    Point2D getGlyphPosition(int arg0) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "getGlyphPosition", "(I)Ljava.awt.geom.Point2D;", arg0)); }

    void setGlyphPosition(int arg0, Point2D arg1) { (*javaClass->invokeMethod<void>(this->object, "setGlyphPosition", "(ILjava.awt.geom.Point2D;)V", arg0, arg1)); }

    AffineTransform getGlyphTransform(int arg0) { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getGlyphTransform", "(I)Ljava.awt.geom.AffineTransform;", arg0)); }

    void setGlyphTransform(int arg0, AffineTransform arg1) { (*javaClass->invokeMethod<void>(this->object, "setGlyphTransform", "(ILjava.awt.geom.AffineTransform;)V", arg0, arg1)); }

    int getLayoutFlags() { return int(*javaClass->invokeMethod<int>(this->object, "getLayoutFlags", "()I", )); }

    Shape getGlyphLogicalBounds(int arg0) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getGlyphLogicalBounds", "(I)Ljava.awt.Shape;", arg0)); }

    Rectangle getGlyphPixelBounds(int arg0, FontRenderContext arg1, float arg2, float arg3) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getGlyphPixelBounds", "(ILjava.awt.font.FontRenderContext;FF)Ljava.awt.Rectangle;", arg0, arg1, arg2, arg3)); }

    GlyphMetrics getGlyphMetrics(int arg0) { return GlyphMetrics(*javaClass->invokeMethod<jobject>(this->object, "getGlyphMetrics", "(I)Ljava.awt.font.GlyphMetrics;", arg0)); }

    GlyphJustificationInfo getGlyphJustificationInfo(int arg0) { return GlyphJustificationInfo(*javaClass->invokeMethod<jobject>(this->object, "getGlyphJustificationInfo", "(I)Ljava.awt.font.GlyphJustificationInfo;", arg0)); }

    FontRenderContext getFontRenderContext() { return FontRenderContext(*javaClass->invokeMethod<jobject>(this->object, "getFontRenderContext", "()Ljava.awt.font.FontRenderContext;", )); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

};


/**
 * Classpath: java.awt.font.FontRenderContext
 * Package name: java.awt.font
 */
class FontRenderContext : public Object {
protected:
    const inline static char *className = "java.awt.font.FontRenderContext";
public:
    STATICINITIALIZE;

    FontRenderContext(jobject object) : JavaObject(object) {}

    AffineTransform getTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(FontRenderContext arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.awt.font.FontRenderContext;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isAntiAliased() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAntiAliased", "()Z", )); }

    bool usesFractionalMetrics() { return bool(*javaClass->invokeMethod<boolean>(this->object, "usesFractionalMetrics", "()Z", )); }

    Object getAntiAliasingHint() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAntiAliasingHint", "()Ljava.lang.Object;", )); }

    Object getFractionalMetricsHint() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getFractionalMetricsHint", "()Ljava.lang.Object;", )); }

    bool isTransformed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTransformed", "()Z", )); }

    int getTransformType() { return int(*javaClass->invokeMethod<int>(this->object, "getTransformType", "()I", )); }

};


/**
 * Classpath: java.awt.font.GlyphMetrics
 * Package name: java.awt.font
 */
class GlyphMetrics : public Object {
protected:
    const inline static char *className = "java.awt.font.GlyphMetrics";
public:
    STATICINITIALIZE;

    GlyphMetrics(jobject object) : JavaObject(object) {}

    bool isWhitespace() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWhitespace", "()Z", )); }

    int getType() { return int(*javaClass->invokeMethod<int>(this->object, "getType", "()I", )); }

    bool isStandard() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStandard", "()Z", )); }

    float getAdvance() { return float(*javaClass->invokeMethod<float>(this->object, "getAdvance", "()F", )); }

    float getAdvanceX() { return float(*javaClass->invokeMethod<float>(this->object, "getAdvanceX", "()F", )); }

    float getAdvanceY() { return float(*javaClass->invokeMethod<float>(this->object, "getAdvanceY", "()F", )); }

    float getLSB() { return float(*javaClass->invokeMethod<float>(this->object, "getLSB", "()F", )); }

    float getRSB() { return float(*javaClass->invokeMethod<float>(this->object, "getRSB", "()F", )); }

    bool isLigature() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLigature", "()Z", )); }

    bool isCombining() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCombining", "()Z", )); }

    bool isComponent() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isComponent", "()Z", )); }

    Rectangle2D getBounds2D() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava.awt.geom.Rectangle2D;", )); }

};


/**
 * Classpath: java.awt.font.GlyphJustificationInfo
 * Package name: java.awt.font
 */
class GlyphJustificationInfo : public Object {
protected:
    const inline static char *className = "java.awt.font.GlyphJustificationInfo";
public:
    STATICINITIALIZE;

    GlyphJustificationInfo(jobject object) : JavaObject(object) {}

    static bool priorityIsValid(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "priorityIsValid", "(I)Z", arg0)); }

};


/**
 * Classpath: java.awt.Font
 * Package name: java.awt
 */
class Font : public Object {
protected:
    const inline static char *className = "java.awt.Font";
public:
    STATICINITIALIZE;

    Font(jobject object) : JavaObject(object) {}

    static void applyTransform(AffineTransform arg0, AttributeValues arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "applyTransform", "(Ljava.awt.geom.AffineTransform;Lsun.font.AttributeValues;)V", arg0, arg1)); }

    AffineTransform getTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static Font decode(String arg0) { return Font(*javaClass->invokeStaticMethod<jobject>(this->object, "decode", "(Ljava.lang.String;)Ljava.awt.Font;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    int getSize() { return int(*javaClass->invokeMethod<int>(this->object, "getSize", "()I", )); }

    Map getAttributes() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getAttributes", "()Ljava.util.Map;", )); }

    String getFamily(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getFamily", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String getFamily() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFamily", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    int getNumGlyphs() { return int(*javaClass->invokeMethod<int>(this->object, "getNumGlyphs", "()I", )); }

    bool isTransformed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTransformed", "()Z", )); }

    FontPeer getFontPeer() { return FontPeer(*javaClass->invokeMethod<jobject>(this->object, "getFontPeer", "()Ljava.awt.peer.FontPeer;", )); }

    int getStyle() { return int(*javaClass->invokeMethod<int>(this->object, "getStyle", "()I", )); }

    String getFontName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getFontName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String getFontName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFontName", "()Ljava.lang.String;", )); }

    void initFromValues(AttributeValues arg0) { (*javaClass->invokeMethod<void>(this->object, "initFromValues", "(Lsun.font.AttributeValues;)V", arg0)); }

    AttributeValues getAttributeValues() { return AttributeValues(*javaClass->invokeMethod<jobject>(this->object, "getAttributeValues", "()Lsun.font.AttributeValues;", )); }

    bool hasLayoutAttributes() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasLayoutAttributes", "()Z", )); }

    static bool hasTempPermission() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "hasTempPermission", "()Z", )); }

    static File checkFontFile(int arg0, File arg1) { return File(*javaClass->invokeStaticMethod<jobject>(this->object, "checkFontFile", "(ILjava.io.File;)Ljava.io.File;", arg0, arg1)); }

    String getFamily_NoClientCode() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFamily_NoClientCode", "()Ljava.lang.String;", )); }

    Font2D getFont2D() { return Font2D(*javaClass->invokeMethod<jobject>(this->object, "getFont2D", "()Lsun.font.Font2D;", )); }

    bool isBold() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBold", "()Z", )); }

    bool isItalic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItalic", "()Z", )); }

    int getMissingGlyphCode() { return int(*javaClass->invokeMethod<int>(this->object, "getMissingGlyphCode", "()I", )); }

    byte getBaselineFor(char arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getBaselineFor", "(C)B", arg0)); }

    static void applyStyle(int arg0, AttributeValues arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "applyStyle", "(ILsun.font.AttributeValues;)V", arg0, arg1)); }

    bool canDisplay(char arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDisplay", "(C)Z", arg0)); }

    bool canDisplay(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDisplay", "(I)Z", arg0)); }

    float getItalicAngle(FontRenderContext arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getItalicAngle", "(Ljava.awt.font.FontRenderContext;)F", arg0)); }

    float getItalicAngle() { return float(*javaClass->invokeMethod<float>(this->object, "getItalicAngle", "()F", )); }

    FontLineMetrics defaultLineMetrics(FontRenderContext arg0) { return FontLineMetrics(*javaClass->invokeMethod<jobject>(this->object, "defaultLineMetrics", "(Ljava.awt.font.FontRenderContext;)Lsun.font.FontLineMetrics;", arg0)); }

    Rectangle2D getStringBounds(arr_C arg0, int arg1, int arg2, FontRenderContext arg3) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "([CIILjava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;", arg0, arg1, arg2, arg3)); }

    Rectangle2D getStringBounds(String arg0, int arg1, int arg2, FontRenderContext arg3) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava.lang.String;IILjava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;", arg0, arg1, arg2, arg3)); }

    Rectangle2D getStringBounds(CharacterIterator arg0, int arg1, int arg2, FontRenderContext arg3) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava.text.CharacterIterator;IILjava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;", arg0, arg1, arg2, arg3)); }

    Rectangle2D getStringBounds(String arg0, FontRenderContext arg1) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava.lang.String;Ljava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;", arg0, arg1)); }

    static bool textRequiresLayout(arr_C arg0, int arg1, int arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "textRequiresLayout", "([CII)Z", arg0, arg1, arg2)); }

    static Font createFont(int arg0, File arg1) { return Font(*javaClass->invokeStaticMethod<jobject>(this->object, "createFont", "(ILjava.io.File;)Ljava.awt.Font;", arg0, arg1)); }

    static Font createFont(int arg0, InputStream arg1) { return Font(*javaClass->invokeStaticMethod<jobject>(this->object, "createFont", "(ILjava.io.InputStream;)Ljava.awt.Font;", arg0, arg1)); }

    String getPSName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPSName", "()Ljava.lang.String;", )); }

    float getSize2D() { return float(*javaClass->invokeMethod<float>(this->object, "getSize2D", "()F", )); }

    bool isPlain() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlain", "()Z", )); }

    Font deriveFont(int arg0, float arg1) { return Font(*javaClass->invokeMethod<jobject>(this->object, "deriveFont", "(IF)Ljava.awt.Font;", arg0, arg1)); }

    Font deriveFont(Map arg0) { return Font(*javaClass->invokeMethod<jobject>(this->object, "deriveFont", "(Ljava.util.Map;)Ljava.awt.Font;", arg0)); }

    Font deriveFont(float arg0) { return Font(*javaClass->invokeMethod<jobject>(this->object, "deriveFont", "(F)Ljava.awt.Font;", arg0)); }

    Font deriveFont(AffineTransform arg0) { return Font(*javaClass->invokeMethod<jobject>(this->object, "deriveFont", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.Font;", arg0)); }

    Font deriveFont(int arg0, AffineTransform arg1) { return Font(*javaClass->invokeMethod<jobject>(this->object, "deriveFont", "(ILjava.awt.geom.AffineTransform;)Ljava.awt.Font;", arg0, arg1)); }

    Font deriveFont(int arg0) { return Font(*javaClass->invokeMethod<jobject>(this->object, "deriveFont", "(I)Ljava.awt.Font;", arg0)); }

    int canDisplayUpTo(CharacterIterator arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "canDisplayUpTo", "(Ljava.text.CharacterIterator;II)I", arg0, arg1, arg2)); }

    int canDisplayUpTo(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "canDisplayUpTo", "(Ljava.lang.String;)I", arg0)); }

    int canDisplayUpTo(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "canDisplayUpTo", "([CII)I", arg0, arg1, arg2)); }

    bool hasUniformLineMetrics() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasUniformLineMetrics", "()Z", )); }

    LineMetrics getLineMetrics(CharacterIterator arg0, int arg1, int arg2, FontRenderContext arg3) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava.text.CharacterIterator;IILjava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;", arg0, arg1, arg2, arg3)); }

    LineMetrics getLineMetrics(String arg0, FontRenderContext arg1) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava.lang.String;Ljava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;", arg0, arg1)); }

    LineMetrics getLineMetrics(arr_C arg0, int arg1, int arg2, FontRenderContext arg3) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "([CIILjava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;", arg0, arg1, arg2, arg3)); }

    LineMetrics getLineMetrics(String arg0, int arg1, int arg2, FontRenderContext arg3) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava.lang.String;IILjava.awt.font.FontRenderContext;)Ljava.awt.font.LineMetrics;", arg0, arg1, arg2, arg3)); }

    Rectangle2D getMaxCharBounds(FontRenderContext arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getMaxCharBounds", "(Ljava.awt.font.FontRenderContext;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    GlyphVector createGlyphVector(FontRenderContext arg0, arr_I arg1) { return GlyphVector(*javaClass->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava.awt.font.FontRenderContext;[I)Ljava.awt.font.GlyphVector;", arg0, arg1)); }

    GlyphVector createGlyphVector(FontRenderContext arg0, arr_C arg1) { return GlyphVector(*javaClass->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava.awt.font.FontRenderContext;[C)Ljava.awt.font.GlyphVector;", arg0, arg1)); }

    GlyphVector createGlyphVector(FontRenderContext arg0, String arg1) { return GlyphVector(*javaClass->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava.awt.font.FontRenderContext;Ljava.lang.String;)Ljava.awt.font.GlyphVector;", arg0, arg1)); }

    GlyphVector createGlyphVector(FontRenderContext arg0, CharacterIterator arg1) { return GlyphVector(*javaClass->invokeMethod<jobject>(this->object, "createGlyphVector", "(Ljava.awt.font.FontRenderContext;Ljava.text.CharacterIterator;)Ljava.awt.font.GlyphVector;", arg0, arg1)); }

    GlyphVector layoutGlyphVector(FontRenderContext arg0, arr_C arg1, int arg2, int arg3, int arg4) { return GlyphVector(*javaClass->invokeMethod<jobject>(this->object, "layoutGlyphVector", "(Ljava.awt.font.FontRenderContext;[CIII)Ljava.awt.font.GlyphVector;", arg0, arg1, arg2, arg3, arg4)); }

    static Font getFont(Map arg0) { return Font(*javaClass->invokeStaticMethod<jobject>(this->object, "getFont", "(Ljava.util.Map;)Ljava.awt.Font;", arg0)); }

    static Font getFont(String arg0) { return Font(*javaClass->invokeStaticMethod<jobject>(this->object, "getFont", "(Ljava.lang.String;)Ljava.awt.Font;", arg0)); }

    static Font getFont(String arg0, Font arg1) { return Font(*javaClass->invokeStaticMethod<jobject>(this->object, "getFont", "(Ljava.lang.String;Ljava.awt.Font;)Ljava.awt.Font;", arg0, arg1)); }

};


/**
 * Classpath: sun.font.AttributeValues
 * Package name: sun.font
 */
class AttributeValues : public Object {
protected:
    const inline static char *className = "sun.font.AttributeValues";
public:
    STATICINITIALIZE;

    AttributeValues(jobject object) : JavaObject(object) {}

    AffineTransform getTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    bool getStrikethrough() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getStrikethrough", "()Z", )); }

    void setStrikethrough(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setStrikethrough", "(Z)V", arg0)); }

    float getWeight() { return float(*javaClass->invokeMethod<float>(this->object, "getWeight", "()F", )); }

    void setSize(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(F)V", arg0)); }

    float getWidth() { return float(*javaClass->invokeMethod<float>(this->object, "getWidth", "()F", )); }

    Object get(EAttribute arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Lsun.font.EAttribute;)Ljava.lang.Object;", arg0)); }

    static bool equals(Object arg0, Object arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool equals(AttributeValues arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Lsun.font.AttributeValues;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    AttributeValues clone() { return AttributeValues(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Lsun.font.AttributeValues;", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void update(EAttribute arg0) { (*javaClass->invokeMethod<void>(this->object, "update", "(Lsun.font.EAttribute;)V", arg0)); }

    AttributeValues merge(Map arg0) { return AttributeValues(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Ljava.util.Map;)Lsun.font.AttributeValues;", arg0)); }

    AttributeValues merge(AttributeValues arg0, int arg1) { return AttributeValues(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Lsun.font.AttributeValues;I)Lsun.font.AttributeValues;", arg0, arg1)); }

    AttributeValues merge(Map arg0, int arg1) { return AttributeValues(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Ljava.util.Map;I)Lsun.font.AttributeValues;", arg0, arg1)); }

    AttributeValues merge(AttributeValues arg0) { return AttributeValues(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Lsun.font.AttributeValues;)Lsun.font.AttributeValues;", arg0)); }

    Map toMap(Map arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "toMap", "(Ljava.util.Map;)Ljava.util.Map;", arg0)); }

    void set(EAttribute arg0, AttributeValues arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(Lsun.font.EAttribute;Lsun.font.AttributeValues;)V", arg0, arg1)); }

    void set(EAttribute arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(Lsun.font.EAttribute;Ljava.lang.Object;)V", arg0, arg1)); }

    float getSize() { return float(*javaClass->invokeMethod<float>(this->object, "getSize", "()F", )); }

    bool isDefined(EAttribute arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDefined", "(Lsun.font.EAttribute;)Z", arg0)); }

    String getFamily() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFamily", "()Ljava.lang.String;", )); }

    static int getMask(EAttribute_interface arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getMask", "([Lsun.font.EAttribute;)I", arg0)); }

    static int getMask(EAttribute arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getMask", "(Lsun.font.EAttribute;)I", arg0)); }

    void setFamily(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setFamily", "(Ljava.lang.String;)V", arg0)); }

    void setWeight(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setWeight", "(F)V", arg0)); }

    void setPosture(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setPosture", "(F)V", arg0)); }

    void defineAll(int arg0) { (*javaClass->invokeMethod<void>(this->object, "defineAll", "(I)V", arg0)); }

    float getPosture() { return float(*javaClass->invokeMethod<float>(this->object, "getPosture", "()F", )); }

    static AttributeValues fromMap(Map arg0) { return AttributeValues(*javaClass->invokeStaticMethod<jobject>(this->object, "fromMap", "(Ljava.util.Map;)Lsun.font.AttributeValues;", arg0)); }

    static AttributeValues fromMap(Map arg0, int arg1) { return AttributeValues(*javaClass->invokeStaticMethod<jobject>(this->object, "fromMap", "(Ljava.util.Map;I)Lsun.font.AttributeValues;", arg0, arg1)); }

    bool anyNonDefault(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "anyNonDefault", "(I)Z", arg0)); }

    bool isNonDefault(EAttribute arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNonDefault", "(Lsun.font.EAttribute;)Z", arg0)); }

    bool anyDefined(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "anyDefined", "(I)Z", arg0)); }

    int getSuperscript() { return int(*javaClass->invokeMethod<int>(this->object, "getSuperscript", "()I", )); }

    Hashtable toSerializableHashtable() { return Hashtable(*javaClass->invokeMethod<jobject>(this->object, "toSerializableHashtable", "()Ljava.util.Hashtable;", )); }

    static AttributeValues fromSerializableHashtable(Hashtable arg0) { return AttributeValues(*javaClass->invokeStaticMethod<jobject>(this->object, "fromSerializableHashtable", "(Ljava.util.Hashtable;)Lsun.font.AttributeValues;", arg0)); }

    static bool is16Hashtable(Hashtable arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "is16Hashtable", "(Ljava.util.Hashtable;)Z", arg0)); }

    void unsetDefault() { (*javaClass->invokeMethod<void>(this->object, "unsetDefault", "()V", )); }

    static AffineTransform getCharTransform(Map arg0) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getCharTransform", "(Ljava.util.Map;)Ljava.awt.geom.AffineTransform;", arg0)); }

    AffineTransform getCharTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getCharTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    int getKerning() { return int(*javaClass->invokeMethod<int>(this->object, "getKerning", "()I", )); }

    int getLigatures() { return int(*javaClass->invokeMethod<int>(this->object, "getLigatures", "()I", )); }

    static AffineTransform getBaselineTransform(Map arg0) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "getBaselineTransform", "(Ljava.util.Map;)Ljava.awt.geom.AffineTransform;", arg0)); }

    AffineTransform getBaselineTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getBaselineTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    void updateDerivedTransforms() { (*javaClass->invokeMethod<void>(this->object, "updateDerivedTransforms", "()V", )); }

    void i_set(EAttribute arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "i_set", "(Lsun.font.EAttribute;Ljava.lang.Object;)V", arg0, arg1)); }

    void i_set(EAttribute arg0, AttributeValues arg1) { (*javaClass->invokeMethod<void>(this->object, "i_set", "(Lsun.font.EAttribute;Lsun.font.AttributeValues;)V", arg0, arg1)); }

    Object i_get(EAttribute arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "i_get", "(Lsun.font.EAttribute;)Ljava.lang.Object;", arg0)); }

    bool i_validate(EAttribute arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "i_validate", "(Lsun.font.EAttribute;)Z", arg0)); }

    bool i_equals(EAttribute arg0, AttributeValues arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "i_equals", "(Lsun.font.EAttribute;Lsun.font.AttributeValues;)Z", arg0, arg1)); }

    static AffineTransform extractXRotation(AffineTransform arg0, bool arg1) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "extractXRotation", "(Ljava.awt.geom.AffineTransform;Z)Ljava.awt.geom.AffineTransform;", arg0, arg1)); }

    static AffineTransform extractRotation(Point2D_Double arg0, AffineTransform arg1, bool arg2) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "extractRotation", "(Ljava.awt.geom.Point2D$Double;Ljava.awt.geom.AffineTransform;Z)Ljava.awt.geom.AffineTransform;", arg0, arg1, arg2)); }

    void setWidth(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setWidth", "(F)V", arg0)); }

    void setSuperscript(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSuperscript", "(I)V", arg0)); }

    GraphicAttribute getCharReplacement() { return GraphicAttribute(*javaClass->invokeMethod<jobject>(this->object, "getCharReplacement", "()Ljava.awt.font.GraphicAttribute;", )); }

    void setCharReplacement(GraphicAttribute arg0) { (*javaClass->invokeMethod<void>(this->object, "setCharReplacement", "(Ljava.awt.font.GraphicAttribute;)V", arg0)); }

    Paint getForeground() { return Paint(*javaClass->invokeMethod<jobject>(this->object, "getForeground", "()Ljava.awt.Paint;", )); }

    void setForeground(Paint arg0) { (*javaClass->invokeMethod<void>(this->object, "setForeground", "(Ljava.awt.Paint;)V", arg0)); }

    int getUnderline() { return int(*javaClass->invokeMethod<int>(this->object, "getUnderline", "()I", )); }

    void setUnderline(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setUnderline", "(I)V", arg0)); }

    int getRunDirection() { return int(*javaClass->invokeMethod<int>(this->object, "getRunDirection", "()I", )); }

    void setRunDirection(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setRunDirection", "(I)V", arg0)); }

    int getBidiEmbedding() { return int(*javaClass->invokeMethod<int>(this->object, "getBidiEmbedding", "()I", )); }

    void setBidiEmbedding(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBidiEmbedding", "(I)V", arg0)); }

    static float getJustification(Map arg0) { return float(*javaClass->invokeStaticMethod<float>(this->object, "getJustification", "(Ljava.util.Map;)F", arg0)); }

    float getJustification() { return float(*javaClass->invokeMethod<float>(this->object, "getJustification", "()F", )); }

    void setJustification(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setJustification", "(F)V", arg0)); }

    Object getInputMethodHighlight() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getInputMethodHighlight", "()Ljava.lang.Object;", )); }

    void setInputMethodHighlight(Annotation arg0) { (*javaClass->invokeMethod<void>(this->object, "setInputMethodHighlight", "(Ljava.text.Annotation;)V", arg0)); }

    void setInputMethodHighlight(InputMethodHighlight arg0) { (*javaClass->invokeMethod<void>(this->object, "setInputMethodHighlight", "(Ljava.awt.im.InputMethodHighlight;)V", arg0)); }

    int getInputMethodUnderline() { return int(*javaClass->invokeMethod<int>(this->object, "getInputMethodUnderline", "()I", )); }

    void setInputMethodUnderline(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setInputMethodUnderline", "(I)V", arg0)); }

    bool getSwapColors() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getSwapColors", "()Z", )); }

    void setSwapColors(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSwapColors", "(Z)V", arg0)); }

    static NumericShaper getNumericShaping(Map arg0) { return NumericShaper(*javaClass->invokeStaticMethod<jobject>(this->object, "getNumericShaping", "(Ljava.util.Map;)Ljava.awt.font.NumericShaper;", arg0)); }

    NumericShaper getNumericShaping() { return NumericShaper(*javaClass->invokeMethod<jobject>(this->object, "getNumericShaping", "()Ljava.awt.font.NumericShaper;", )); }

    void setNumericShaping(NumericShaper arg0) { (*javaClass->invokeMethod<void>(this->object, "setNumericShaping", "(Ljava.awt.font.NumericShaper;)V", arg0)); }

    void setKerning(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setKerning", "(I)V", arg0)); }

    float getTracking() { return float(*javaClass->invokeMethod<float>(this->object, "getTracking", "()F", )); }

    void setTracking(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setTracking", "(F)V", arg0)); }

    void setLigatures(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLigatures", "(I)V", arg0)); }

    bool allDefined(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "allDefined", "(I)Z", arg0)); }

    void unset(EAttribute arg0) { (*javaClass->invokeMethod<void>(this->object, "unset", "(Lsun.font.EAttribute;)V", arg0)); }

    AttributeValues applyIMHighlight() { return AttributeValues(*javaClass->invokeMethod<jobject>(this->object, "applyIMHighlight", "()Lsun.font.AttributeValues;", )); }

    static AffineTransform extractYRotation(AffineTransform arg0, bool arg1) { return AffineTransform(*javaClass->invokeStaticMethod<jobject>(this->object, "extractYRotation", "(Ljava.awt.geom.AffineTransform;Z)Ljava.awt.geom.AffineTransform;", arg0, arg1)); }

    void setTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void setTransform(TransformAttribute arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransform", "(Ljava.awt.font.TransformAttribute;)V", arg0)); }

    void setBackground(Paint arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Paint;)V", arg0)); }

    Paint getBackground() { return Paint(*javaClass->invokeMethod<jobject>(this->object, "getBackground", "()Ljava.awt.Paint;", )); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

    void setFont(Font arg0) { (*javaClass->invokeMethod<void>(this->object, "setFont", "(Ljava.awt.Font;)V", arg0)); }

    void setDefault(EAttribute arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefault", "(Lsun.font.EAttribute;)V", arg0)); }

};


/**
 * Classpath: sun.font.EAttribute
 * Package name: sun.font
 */
class EAttribute : public Enum {
protected:
    const inline static char *className = "sun.font.EAttribute";
public:
    STATICINITIALIZE;

    EAttribute(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static EAttribute valueOf(String arg0) { return EAttribute(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lsun.font.EAttribute;", arg0)); }

    static EAttribute forAttribute(AttributedCharacterIterator_Attribute arg0) { return EAttribute(*javaClass->invokeStaticMethod<jobject>(this->object, "forAttribute", "(Ljava.text.AttributedCharacterIterator$Attribute;)Lsun.font.EAttribute;", arg0)); }

};


/**
 * Classpath: [Lsun.font.EAttribute;
 */
class EAttribute_interface : public Object {
protected:
    const inline static char *className = "[Lsun.font.EAttribute;";
public:
    STATICINITIALIZE;

    EAttribute_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.geom.Point2D$Double
 * Enclosing class: java.awt.geom.Point2D
 * Package name: java.awt.geom
 */
class Point2D_Double : public Point2D {
protected:
    const inline static char *className = "java.awt.geom.Point2D$Double";
public:
    STATICINITIALIZE;

    Point2D_Double(jobject object) : JavaObject(object) {}

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void setLocation(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.font.GraphicAttribute
 * Package name: java.awt.font
 */
class GraphicAttribute : public Object {
protected:
    const inline static char *className = "java.awt.font.GraphicAttribute";
public:
    STATICINITIALIZE;

    GraphicAttribute(jobject object) : JavaObject(object) {}

    void draw(Graphics2D arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "draw", "(Ljava.awt.Graphics2D;FF)V", arg0, arg1, arg2)); }

    Rectangle2D getBounds() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.geom.Rectangle2D;", )); }

    Shape getOutline(AffineTransform arg0) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getOutline", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.Shape;", arg0)); }

    float getAdvance() { return float(*javaClass->invokeMethod<float>(this->object, "getAdvance", "()F", )); }

    float getAscent() { return float(*javaClass->invokeMethod<float>(this->object, "getAscent", "()F", )); }

    float getDescent() { return float(*javaClass->invokeMethod<float>(this->object, "getDescent", "()F", )); }

    int getAlignment() { return int(*javaClass->invokeMethod<int>(this->object, "getAlignment", "()I", )); }

    GlyphJustificationInfo getJustificationInfo() { return GlyphJustificationInfo(*javaClass->invokeMethod<jobject>(this->object, "getJustificationInfo", "()Ljava.awt.font.GlyphJustificationInfo;", )); }

};


/**
 * Classpath: java.awt.im.InputMethodHighlight
 * Package name: java.awt.im
 */
class InputMethodHighlight : public Object {
protected:
    const inline static char *className = "java.awt.im.InputMethodHighlight";
public:
    STATICINITIALIZE;

    InputMethodHighlight(jobject object) : JavaObject(object) {}

    bool isSelected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelected", "()Z", )); }

    int getState() { return int(*javaClass->invokeMethod<int>(this->object, "getState", "()I", )); }

    Map getStyle() { return Map(*javaClass->invokeMethod<jobject>(this->object, "getStyle", "()Ljava.util.Map;", )); }

    int getVariation() { return int(*javaClass->invokeMethod<int>(this->object, "getVariation", "()I", )); }

};


/**
 * Classpath: java.awt.font.NumericShaper
 * Package name: java.awt.font
 */
class NumericShaper : public Object {
protected:
    const inline static char *className = "java.awt.font.NumericShaper";
public:
    STATICINITIALIZE;

    NumericShaper(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    static int search(int arg0, arr_I arg1, int arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "search", "(I[III)I", arg0, arg1, arg2, arg3)); }

    static int getKeyFromMask(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getKeyFromMask", "(I)I", arg0)); }

    void checkParams(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "checkParams", "([CII)V", arg0, arg1, arg2)); }

    bool isContextual() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isContextual", "()Z", )); }

    void shapeContextually(arr_C arg0, int arg1, int arg2, NumericShaper_Range arg3) { (*javaClass->invokeMethod<void>(this->object, "shapeContextually", "([CIILjava.awt.font.NumericShaper$Range;)V", arg0, arg1, arg2, arg3)); }

    void shapeContextually(arr_C arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "shapeContextually", "([CIII)V", arg0, arg1, arg2, arg3)); }

    void shapeNonContextually(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "shapeNonContextually", "([CII)V", arg0, arg1, arg2)); }

    bool isStrongDirectional(char arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStrongDirectional", "(C)Z", arg0)); }

    static int getContextKey(char arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getContextKey", "(C)I", arg0)); }

    NumericShaper_Range rangeForCodePoint(int arg0) { return NumericShaper_Range(*javaClass->invokeMethod<jobject>(this->object, "rangeForCodePoint", "(I)Ljava.awt.font.NumericShaper$Range;", arg0)); }

    static int getHighBit(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getHighBit", "(I)I", arg0)); }

    static NumericShaper getShaper(int arg0) { return NumericShaper(*javaClass->invokeStaticMethod<jobject>(this->object, "getShaper", "(I)Ljava.awt.font.NumericShaper;", arg0)); }

    static NumericShaper getShaper(NumericShaper_Range arg0) { return NumericShaper(*javaClass->invokeStaticMethod<jobject>(this->object, "getShaper", "(Ljava.awt.font.NumericShaper$Range;)Ljava.awt.font.NumericShaper;", arg0)); }

    static NumericShaper getContextualShaper(Set arg0) { return NumericShaper(*javaClass->invokeStaticMethod<jobject>(this->object, "getContextualShaper", "(Ljava.util.Set;)Ljava.awt.font.NumericShaper;", arg0)); }

    static NumericShaper getContextualShaper(int arg0) { return NumericShaper(*javaClass->invokeStaticMethod<jobject>(this->object, "getContextualShaper", "(I)Ljava.awt.font.NumericShaper;", arg0)); }

    static NumericShaper getContextualShaper(int arg0, int arg1) { return NumericShaper(*javaClass->invokeStaticMethod<jobject>(this->object, "getContextualShaper", "(II)Ljava.awt.font.NumericShaper;", arg0, arg1)); }

    static NumericShaper getContextualShaper(Set arg0, NumericShaper_Range arg1) { return NumericShaper(*javaClass->invokeStaticMethod<jobject>(this->object, "getContextualShaper", "(Ljava.util.Set;Ljava.awt.font.NumericShaper$Range;)Ljava.awt.font.NumericShaper;", arg0, arg1)); }

    int getRanges() { return int(*javaClass->invokeMethod<int>(this->object, "getRanges", "()I", )); }

    Set getRangeSet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getRangeSet", "()Ljava.util.Set;", )); }

    void shape(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "shape", "([CII)V", arg0, arg1, arg2)); }

    void shape(arr_C arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "shape", "([CIII)V", arg0, arg1, arg2, arg3)); }

    void shape(arr_C arg0, int arg1, int arg2, NumericShaper_Range arg3) { (*javaClass->invokeMethod<void>(this->object, "shape", "([CIILjava.awt.font.NumericShaper$Range;)V", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.awt.font.NumericShaper$Range
 * Enclosing class: java.awt.font.NumericShaper
 * Package name: java.awt.font
 */
class NumericShaper_Range : public Enum {
protected:
    const inline static char *className = "java.awt.font.NumericShaper$Range";
public:
    STATICINITIALIZE;

    NumericShaper_Range(jobject object) : JavaObject(object) {}

    static NumericShaper_Range valueOf(String arg0) { return NumericShaper_Range(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.font.NumericShaper$Range;", arg0)); }

    bool inRange(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "inRange", "(I)Z", arg0)); }

    static int toRangeIndex(NumericShaper_Range arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toRangeIndex", "(Ljava.awt.font.NumericShaper$Range;)I", arg0)); }

    static Set maskToRangeSet(int arg0) { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "maskToRangeSet", "(I)Ljava.util.Set;", arg0)); }

    int getDigitBase() { return int(*javaClass->invokeMethod<int>(this->object, "getDigitBase", "()I", )); }

    char getNumericBase() { return char(*javaClass->invokeMethod<char>(this->object, "getNumericBase", "()C", )); }

    static NumericShaper_Range indexToRange(int arg0) { return NumericShaper_Range(*javaClass->invokeStaticMethod<jobject>(this->object, "indexToRange", "(I)Ljava.awt.font.NumericShaper$Range;", arg0)); }

    static int toRangeMask(Set arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "toRangeMask", "(Ljava.util.Set;)I", arg0)); }

};


/**
 * Classpath: java.awt.font.TransformAttribute
 * Package name: java.awt.font
 */
class TransformAttribute : public Object {
protected:
    const inline static char *className = "java.awt.font.TransformAttribute";
public:
    STATICINITIALIZE;

    TransformAttribute(jobject object) : JavaObject(object) {}

    AffineTransform getTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool isIdentity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isIdentity", "()Z", )); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.awt.peer.FontPeer
 * Package name: java.awt.peer
 */
class FontPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.FontPeer";
public:
    STATICINITIALIZE;

    FontPeer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.font.Font2D
 * Package name: sun.font
 */
class Font2D : public Object {
protected:
    const inline static char *className = "sun.font.Font2D";
public:
    STATICINITIALIZE;

    Font2D(jobject object) : JavaObject(object) {}

    int getWeight() { return int(*javaClass->invokeMethod<int>(this->object, "getWeight", "()I", )); }

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getNumGlyphs() { return int(*javaClass->invokeMethod<int>(this->object, "getNumGlyphs", "()I", )); }

    int getStyle() { return int(*javaClass->invokeMethod<int>(this->object, "getStyle", "()I", )); }

    String getFontName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getFontName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String getFamilyName(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getFamilyName", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String getPostscriptName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPostscriptName", "()Ljava.lang.String;", )); }

    int getMissingGlyphCode() { return int(*javaClass->invokeMethod<int>(this->object, "getMissingGlyphCode", "()I", )); }

    byte getBaselineFor(char arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getBaselineFor", "(C)B", arg0)); }

    bool canDisplay(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDisplay", "(I)Z", arg0)); }

    bool canDisplay(char arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDisplay", "(C)Z", arg0)); }

    float getItalicAngle(Font arg0, AffineTransform arg1, Object arg2, Object arg3) { return float(*javaClass->invokeMethod<float>(this->object, "getItalicAngle", "(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;Ljava.lang.Object;Ljava.lang.Object;)F", arg0, arg1, arg2, arg3)); }

    CharToGlyphMapper getMapper() { return CharToGlyphMapper(*javaClass->invokeMethod<jobject>(this->object, "getMapper", "()Lsun.font.CharToGlyphMapper;", )); }

    FontStrike getStrike(FontStrikeDesc arg0, bool arg1) { return FontStrike(*javaClass->invokeMethod<jobject>(this->object, "getStrike", "(Lsun.font.FontStrikeDesc;Z)Lsun.font.FontStrike;", arg0, arg1)); }

    FontStrike getStrike(FontStrikeDesc arg0) { return FontStrike(*javaClass->invokeMethod<jobject>(this->object, "getStrike", "(Lsun.font.FontStrikeDesc;)Lsun.font.FontStrike;", arg0)); }

    FontStrike getStrike(Font arg0, AffineTransform arg1, AffineTransform arg2, int arg3, int arg4) { return FontStrike(*javaClass->invokeMethod<jobject>(this->object, "getStrike", "(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;Ljava.awt.geom.AffineTransform;II)Lsun.font.FontStrike;", arg0, arg1, arg2, arg3, arg4)); }

    FontStrike getStrike(Font arg0, AffineTransform arg1, int arg2, int arg3) { return FontStrike(*javaClass->invokeMethod<jobject>(this->object, "getStrike", "(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;II)Lsun.font.FontStrike;", arg0, arg1, arg2, arg3)); }

    FontStrike getStrike(Font arg0) { return FontStrike(*javaClass->invokeMethod<jobject>(this->object, "getStrike", "(Ljava.awt.Font;)Lsun.font.FontStrike;", arg0)); }

    FontStrike getStrike(Font arg0, FontRenderContext arg1) { return FontStrike(*javaClass->invokeMethod<jobject>(this->object, "getStrike", "(Ljava.awt.Font;Ljava.awt.font.FontRenderContext;)Lsun.font.FontStrike;", arg0, arg1)); }

    void updateLastStrikeRef(FontStrike arg0) { (*javaClass->invokeMethod<void>(this->object, "updateLastStrikeRef", "(Lsun.font.FontStrike;)V", arg0)); }

    FontStrike createStrike(FontStrikeDesc arg0) { return FontStrike(*javaClass->invokeMethod<jobject>(this->object, "createStrike", "(Lsun.font.FontStrikeDesc;)Lsun.font.FontStrike;", arg0)); }

    void getStyleMetrics(float arg0, arr_F arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "getStyleMetrics", "(F[FI)V", arg0, arg1, arg2)); }

    int charToGlyph(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "charToGlyph", "(I)I", arg0)); }

    int charToVariationGlyph(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "charToVariationGlyph", "(II)I", arg0, arg1)); }

    void setUseWeakRefs(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setUseWeakRefs", "(ZI)V", arg0, arg1)); }

    void setStyle() { (*javaClass->invokeMethod<void>(this->object, "setStyle", "()V", )); }

    int getRank() { return int(*javaClass->invokeMethod<int>(this->object, "getRank", "()I", )); }

    void setRank(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setRank", "(I)V", arg0)); }

    int getValidatedGlyphCode(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getValidatedGlyphCode", "(I)I", arg0)); }

    void getFontMetrics(Font arg0, AffineTransform arg1, Object arg2, Object arg3, arr_F arg4) { (*javaClass->invokeMethod<void>(this->object, "getFontMetrics", "(Ljava.awt.Font;Ljava.awt.geom.AffineTransform;Ljava.lang.Object;Ljava.lang.Object;[F)V", arg0, arg1, arg2, arg3, arg4)); }

    void getFontMetrics(Font arg0, FontRenderContext arg1, arr_F arg2) { (*javaClass->invokeMethod<void>(this->object, "getFontMetrics", "(Ljava.awt.Font;Ljava.awt.font.FontRenderContext;[F)V", arg0, arg1, arg2)); }

    long getPlatformNativeFontPtr() { return long(*javaClass->invokeMethod<long>(this->object, "getPlatformNativeFontPtr", "()J", )); }

    long getUnitsPerEm() { return long(*javaClass->invokeMethod<long>(this->object, "getUnitsPerEm", "()J", )); }

    bool supportsEncoding(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "supportsEncoding", "(Ljava.lang.String;)Z", arg0)); }

    bool canDoStyle(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDoStyle", "(I)Z", arg0)); }

    bool useAAForPtSize(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "useAAForPtSize", "(I)Z", arg0)); }

    bool hasSupplementaryChars() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasSupplementaryChars", "()Z", )); }

};


/**
 * Classpath: sun.font.CharToGlyphMapper
 * Package name: sun.font
 */
class CharToGlyphMapper : public Object {
protected:
    const inline static char *className = "sun.font.CharToGlyphMapper";
public:
    STATICINITIALIZE;

    CharToGlyphMapper(jobject object) : JavaObject(object) {}

    int getNumGlyphs() { return int(*javaClass->invokeMethod<int>(this->object, "getNumGlyphs", "()I", )); }

    int getMissingGlyphCode() { return int(*javaClass->invokeMethod<int>(this->object, "getMissingGlyphCode", "()I", )); }

    bool canDisplay(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDisplay", "(I)Z", arg0)); }

    bool canDisplay(char arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDisplay", "(C)Z", arg0)); }

    int charToGlyph(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "charToGlyph", "(I)I", arg0)); }

    int charToGlyph(char arg0) { return int(*javaClass->invokeMethod<int>(this->object, "charToGlyph", "(C)I", arg0)); }

    int charToVariationGlyph(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "charToVariationGlyph", "(II)I", arg0, arg1)); }

    void charsToGlyphs(int arg0, arr_C arg1, arr_I arg2) { (*javaClass->invokeMethod<void>(this->object, "charsToGlyphs", "(I[C[I)V", arg0, arg1, arg2)); }

    void charsToGlyphs(int arg0, arr_I arg1, arr_I arg2) { (*javaClass->invokeMethod<void>(this->object, "charsToGlyphs", "(I[I[I)V", arg0, arg1, arg2)); }

    bool charsToGlyphsNS(int arg0, arr_C arg1, arr_I arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "charsToGlyphsNS", "(I[C[I)Z", arg0, arg1, arg2)); }

    static bool isVariationSelector(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isVariationSelector", "(I)Z", arg0)); }

};


/**
 * Classpath: sun.font.FontStrikeDesc
 * Package name: sun.font
 */
class FontStrikeDesc : public Object {
protected:
    const inline static char *className = "sun.font.FontStrikeDesc";
public:
    STATICINITIALIZE;

    FontStrikeDesc(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static int getAAHintIntVal(Font2D arg0, Font arg1, FontRenderContext arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getAAHintIntVal", "(Lsun.font.Font2D;Ljava.awt.Font;Ljava.awt.font.FontRenderContext;)I", arg0, arg1, arg2)); }

    static int getAAHintIntVal(Object arg0, Font2D arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getAAHintIntVal", "(Ljava.lang.Object;Lsun.font.Font2D;I)I", arg0, arg1, arg2)); }

    static int getFMHintIntVal(Object arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getFMHintIntVal", "(Ljava.lang.Object;)I", arg0)); }

};


/**
 * Classpath: sun.font.FontStrike
 * Package name: sun.font
 */
class FontStrike : public Object {
protected:
    const inline static char *className = "sun.font.FontStrike";
public:
    STATICINITIALIZE;

    FontStrike(jobject object) : JavaObject(object) {}

    GeneralPath getGlyphOutline(int arg0, float arg1, float arg2) { return GeneralPath(*javaClass->invokeMethod<jobject>(this->object, "getGlyphOutline", "(IFF)Ljava.awt.geom.GeneralPath;", arg0, arg1, arg2)); }

    int getNumGlyphs() { return int(*javaClass->invokeMethod<int>(this->object, "getNumGlyphs", "()I", )); }

    Point2D_Float getGlyphMetrics(int arg0) { return Point2D_Float(*javaClass->invokeMethod<jobject>(this->object, "getGlyphMetrics", "(I)Ljava.awt.geom.Point2D$Float;", arg0)); }

    StrikeMetrics getFontMetrics() { return StrikeMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "()Lsun.font.StrikeMetrics;", )); }

    void getGlyphImagePtrs(arr_I arg0, arr_J arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "getGlyphImagePtrs", "([I[JI)V", arg0, arg1, arg2)); }

    long getGlyphImagePtr(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getGlyphImagePtr", "(I)J", arg0)); }

    void getGlyphImageBounds(int arg0, Point2D_Float arg1, Rectangle arg2) { (*javaClass->invokeMethod<void>(this->object, "getGlyphImageBounds", "(ILjava.awt.geom.Point2D$Float;Ljava.awt.Rectangle;)V", arg0, arg1, arg2)); }

    Point2D_Float getCharMetrics(char arg0) { return Point2D_Float(*javaClass->invokeMethod<jobject>(this->object, "getCharMetrics", "(C)Ljava.awt.geom.Point2D$Float;", arg0)); }

    float getGlyphAdvance(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getGlyphAdvance", "(I)F", arg0)); }

    float getCodePointAdvance(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getCodePointAdvance", "(I)F", arg0)); }

    Rectangle2D_Float getGlyphOutlineBounds(int arg0) { return Rectangle2D_Float(*javaClass->invokeMethod<jobject>(this->object, "getGlyphOutlineBounds", "(I)Ljava.awt.geom.Rectangle2D$Float;", arg0)); }

    GeneralPath getGlyphVectorOutline(arr_I arg0, float arg1, float arg2) { return GeneralPath(*javaClass->invokeMethod<jobject>(this->object, "getGlyphVectorOutline", "([IFF)Ljava.awt.geom.GeneralPath;", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.awt.geom.Path2D
 * Package name: java.awt.geom
 */
class Path2D : public Object {
protected:
    const inline static char *className = "java.awt.geom.Path2D";
public:
    STATICINITIALIZE;

    Path2D(jobject object) : JavaObject(object) {}

    void append(PathIterator arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "append", "(Ljava.awt.geom.PathIterator;Z)V", arg0, arg1)); }

    void append(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "append", "(DD)V", arg0, arg1)); }

    void append(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "append", "(FF)V", arg0, arg1)); }

    void append(Shape arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "append", "(Ljava.awt.Shape;Z)V", arg0, arg1)); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    static bool contains(PathIterator arg0, Point2D arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.PathIterator;Ljava.awt.geom.Point2D;)Z", arg0, arg1)); }

    bool contains(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    static bool contains(PathIterator arg0, Rectangle2D arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.PathIterator;Ljava.awt.geom.Rectangle2D;)Z", arg0, arg1)); }

    bool contains(double arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DD)Z", arg0, arg1)); }

    bool contains(Point2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Point2D;)Z", arg0)); }

    static bool contains(PathIterator arg0, double arg1, double arg2, double arg3, double arg4) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.PathIterator;DDDD)Z", arg0, arg1, arg2, arg3, arg4)); }

    static bool contains(PathIterator arg0, double arg1, double arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.PathIterator;DD)Z", arg0, arg1, arg2)); }

    bool contains(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    void transform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "transform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    void readObject(ObjectInputStream arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;Z)V", arg0, arg1)); }

    void writeObject(ObjectOutputStream arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;Z)V", arg0, arg1)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    static bool intersects(PathIterator arg0, Rectangle2D arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "intersects", "(Ljava.awt.geom.PathIterator;Ljava.awt.geom.Rectangle2D;)Z", arg0, arg1)); }

    static bool intersects(PathIterator arg0, double arg1, double arg2, double arg3, double arg4) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "intersects", "(Ljava.awt.geom.PathIterator;DDDD)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool intersects(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool intersects(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    PathIterator getPathIterator(AffineTransform arg0, double arg1) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;D)Ljava.awt.geom.PathIterator;", arg0, arg1)); }

    Shape createTransformedShape(AffineTransform arg0) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "createTransformedShape", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.Shape;", arg0)); }

    int getWindingRule() { return int(*javaClass->invokeMethod<int>(this->object, "getWindingRule", "()I", )); }

    void setWindingRule(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setWindingRule", "(I)V", arg0)); }

    void needRoom(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "needRoom", "(ZI)V", arg0, arg1)); }

    void moveTo(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "moveTo", "(DD)V", arg0, arg1)); }

    void lineTo(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "lineTo", "(DD)V", arg0, arg1)); }

    void quadTo(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "quadTo", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void curveTo(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { (*javaClass->invokeMethod<void>(this->object, "curveTo", "(DDDDDD)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void closePath() { (*javaClass->invokeMethod<void>(this->object, "closePath", "()V", )); }

    Point2D getPoint(int arg0) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "getPoint", "(I)Ljava.awt.geom.Point2D;", arg0)); }

    int pointCrossings(double arg0, double arg1) { return int(*javaClass->invokeMethod<int>(this->object, "pointCrossings", "(DD)I", arg0, arg1)); }

    int rectCrossings(double arg0, double arg1, double arg2, double arg3) { return int(*javaClass->invokeMethod<int>(this->object, "rectCrossings", "(DDDD)I", arg0, arg1, arg2, arg3)); }

    Point2D getCurrentPoint() { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "getCurrentPoint", "()Ljava.awt.geom.Point2D;", )); }

};


/**
 * Classpath: java.awt.geom.Point2D$Float
 * Enclosing class: java.awt.geom.Point2D
 * Package name: java.awt.geom
 */
class Point2D_Float : public Point2D {
protected:
    const inline static char *className = "java.awt.geom.Point2D$Float";
public:
    STATICINITIALIZE;

    Point2D_Float(jobject object) : JavaObject(object) {}

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void setLocation(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }

    void setLocation(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(FF)V", arg0, arg1)); }

};


/**
 * Classpath: sun.font.StrikeMetrics
 * Package name: sun.font
 */
class StrikeMetrics : public Object {
protected:
    const inline static char *className = "sun.font.StrikeMetrics";
public:
    STATICINITIALIZE;

    StrikeMetrics(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void merge(StrikeMetrics arg0) { (*javaClass->invokeMethod<void>(this->object, "merge", "(Lsun.font.StrikeMetrics;)V", arg0)); }

    float getAscent() { return float(*javaClass->invokeMethod<float>(this->object, "getAscent", "()F", )); }

    float getDescent() { return float(*javaClass->invokeMethod<float>(this->object, "getDescent", "()F", )); }

    float getLeading() { return float(*javaClass->invokeMethod<float>(this->object, "getLeading", "()F", )); }

    float getMaxAdvance() { return float(*javaClass->invokeMethod<float>(this->object, "getMaxAdvance", "()F", )); }

    void convertToUserSpace(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "convertToUserSpace", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

};


/**
 * Classpath: java.awt.font.LineMetrics
 * Package name: java.awt.font
 */
class LineMetrics : public Object {
protected:
    const inline static char *className = "java.awt.font.LineMetrics";
public:
    STATICINITIALIZE;

    LineMetrics(jobject object) : JavaObject(object) {}

    float getHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getHeight", "()F", )); }

    float getAscent() { return float(*javaClass->invokeMethod<float>(this->object, "getAscent", "()F", )); }

    float getDescent() { return float(*javaClass->invokeMethod<float>(this->object, "getDescent", "()F", )); }

    float getLeading() { return float(*javaClass->invokeMethod<float>(this->object, "getLeading", "()F", )); }

    int getNumChars() { return int(*javaClass->invokeMethod<int>(this->object, "getNumChars", "()I", )); }

    int getBaselineIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getBaselineIndex", "()I", )); }

    float getStrikethroughOffset() { return float(*javaClass->invokeMethod<float>(this->object, "getStrikethroughOffset", "()F", )); }

    float getStrikethroughThickness() { return float(*javaClass->invokeMethod<float>(this->object, "getStrikethroughThickness", "()F", )); }

    float getUnderlineOffset() { return float(*javaClass->invokeMethod<float>(this->object, "getUnderlineOffset", "()F", )); }

    float getUnderlineThickness() { return float(*javaClass->invokeMethod<float>(this->object, "getUnderlineThickness", "()F", )); }

};


/**
 * Classpath: java.text.CharacterIterator
 * Package name: java.text
 */
class CharacterIterator : public JavaObject {
protected:
    const inline static char *className = "java.text.CharacterIterator";
public:
    STATICINITIALIZE;

    CharacterIterator(jobject object) : JavaObject(object) {}

    char setIndex(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "setIndex", "(I)C", arg0)); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    char next() { return char(*javaClass->invokeMethod<char>(this->object, "next", "()C", )); }

    char last() { return char(*javaClass->invokeMethod<char>(this->object, "last", "()C", )); }

    char first() { return char(*javaClass->invokeMethod<char>(this->object, "first", "()C", )); }

    char current() { return char(*javaClass->invokeMethod<char>(this->object, "current", "()C", )); }

    char previous() { return char(*javaClass->invokeMethod<char>(this->object, "previous", "()C", )); }

    int getIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getIndex", "()I", )); }

    int getBeginIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getBeginIndex", "()I", )); }

    int getEndIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getEndIndex", "()I", )); }

};


/**
 * Classpath: java.awt.Composite
 * Package name: java.awt
 */
class Composite : public JavaObject {
protected:
    const inline static char *className = "java.awt.Composite";
public:
    STATICINITIALIZE;

    Composite(jobject object) : JavaObject(object) {}

    CompositeContext createContext(ColorModel arg0, ColorModel arg1, RenderingHints arg2) { return CompositeContext(*javaClass->invokeMethod<jobject>(this->object, "createContext", "(Ljava.awt.image.ColorModel;Ljava.awt.image.ColorModel;Ljava.awt.RenderingHints;)Ljava.awt.CompositeContext;", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.awt.CompositeContext
 * Package name: java.awt
 */
class CompositeContext : public JavaObject {
protected:
    const inline static char *className = "java.awt.CompositeContext";
public:
    STATICINITIALIZE;

    CompositeContext(jobject object) : JavaObject(object) {}

    void compose(Raster arg0, Raster arg1, WritableRaster arg2) { (*javaClass->invokeMethod<void>(this->object, "compose", "(Ljava.awt.image.Raster;Ljava.awt.image.Raster;Ljava.awt.image.WritableRaster;)V", arg0, arg1, arg2)); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: java.awt.Stroke
 * Package name: java.awt
 */
class Stroke : public JavaObject {
protected:
    const inline static char *className = "java.awt.Stroke";
public:
    STATICINITIALIZE;

    Stroke(jobject object) : JavaObject(object) {}

    Shape createStrokedShape(Shape arg0) { return Shape(*javaClass->invokeMethod<jobject>(this->object, "createStrokedShape", "(Ljava.awt.Shape;)Ljava.awt.Shape;", arg0)); }

};


/**
 * Classpath: java.awt.RenderingHints$Key
 * Enclosing class: java.awt.RenderingHints
 * Package name: java.awt
 */
class RenderingHints_Key : public Object {
protected:
    const inline static char *className = "java.awt.RenderingHints$Key";
public:
    STATICINITIALIZE;

    RenderingHints_Key(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    String getIdentity() { return String(*javaClass->invokeMethod<jobject>(this->object, "getIdentity", "()Ljava.lang.String;", )); }

    static void recordIdentity(RenderingHints_Key arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "recordIdentity", "(Ljava.awt.RenderingHints$Key;)V", arg0)); }

    bool isCompatibleValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCompatibleValue", "(Ljava.lang.Object;)Z", arg0)); }

    int intKey() { return int(*javaClass->invokeMethod<int>(this->object, "intKey", "()I", )); }

};


/**
 * Classpath: java.awt.Color
 * Package name: java.awt
 */
class Color : public Object {
protected:
    const inline static char *className = "java.awt.Color";
public:
    STATICINITIALIZE;

    Color(jobject object) : JavaObject(object) {}

    static Color getColor(String arg0, Color arg1) { return Color(*javaClass->invokeStaticMethod<jobject>(this->object, "getColor", "(Ljava.lang.String;Ljava.awt.Color;)Ljava.awt.Color;", arg0, arg1)); }

    static Color getColor(String arg0, int arg1) { return Color(*javaClass->invokeStaticMethod<jobject>(this->object, "getColor", "(Ljava.lang.String;I)Ljava.awt.Color;", arg0, arg1)); }

    static Color getColor(String arg0) { return Color(*javaClass->invokeStaticMethod<jobject>(this->object, "getColor", "(Ljava.lang.String;)Ljava.awt.Color;", arg0)); }

    int getRGB() { return int(*javaClass->invokeMethod<int>(this->object, "getRGB", "()I", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static Color decode(String arg0) { return Color(*javaClass->invokeStaticMethod<jobject>(this->object, "decode", "(Ljava.lang.String;)Ljava.awt.Color;", arg0)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    PaintContext createContext(ColorModel arg0, Rectangle arg1, Rectangle2D arg2, AffineTransform arg3, RenderingHints arg4) { return PaintContext(*javaClass->invokeMethod<jobject>(this->object, "createContext", "(Ljava.awt.image.ColorModel;Ljava.awt.Rectangle;Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.AffineTransform;Ljava.awt.RenderingHints;)Ljava.awt.PaintContext;", arg0, arg1, arg2, arg3, arg4)); }

    static void testColorValueRange(float arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "testColorValueRange", "(FFFF)V", arg0, arg1, arg2, arg3)); }

    static void testColorValueRange(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "testColorValueRange", "(IIII)V", arg0, arg1, arg2, arg3)); }

    static int HSBtoRGB(float arg0, float arg1, float arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "HSBtoRGB", "(FFF)I", arg0, arg1, arg2)); }

    static Color getHSBColor(float arg0, float arg1, float arg2) { return Color(*javaClass->invokeStaticMethod<jobject>(this->object, "getHSBColor", "(FFF)Ljava.awt.Color;", arg0, arg1, arg2)); }

    ColorSpace getColorSpace() { return ColorSpace(*javaClass->invokeMethod<jobject>(this->object, "getColorSpace", "()Ljava.awt.color.ColorSpace;", )); }

    int getTransparency() { return int(*javaClass->invokeMethod<int>(this->object, "getTransparency", "()I", )); }

    int getAlpha() { return int(*javaClass->invokeMethod<int>(this->object, "getAlpha", "()I", )); }

    int getRed() { return int(*javaClass->invokeMethod<int>(this->object, "getRed", "()I", )); }

    int getGreen() { return int(*javaClass->invokeMethod<int>(this->object, "getGreen", "()I", )); }

    int getBlue() { return int(*javaClass->invokeMethod<int>(this->object, "getBlue", "()I", )); }

    Color brighter() { return Color(*javaClass->invokeMethod<jobject>(this->object, "brighter", "()Ljava.awt.Color;", )); }

    Color darker() { return Color(*javaClass->invokeMethod<jobject>(this->object, "darker", "()Ljava.awt.Color;", )); }

};


/**
 * Classpath: java.awt.Graphics
 * Package name: java.awt
 */
class Graphics : public Object {
protected:
    const inline static char *className = "java.awt.Graphics";
public:
    STATICINITIALIZE;

    Graphics(jobject object) : JavaObject(object) {}

    Color getColor() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getColor", "()Ljava.awt.Color;", )); }

    void translate(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }

    void drawRect(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "drawRect", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void drawString(AttributedCharacterIterator arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawString", "(Ljava.text.AttributedCharacterIterator;II)V", arg0, arg1, arg2)); }

    void drawString(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawString", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void setColor(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setColor", "(Ljava.awt.Color;)V", arg0)); }

    void finalize() { (*javaClass->invokeMethod<void>(this->object, "finalize", "()V", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Graphics create() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "create", "()Ljava.awt.Graphics;", )); }

    Graphics create(int arg0, int arg1, int arg2, int arg3) { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "create", "(IIII)Ljava.awt.Graphics;", arg0, arg1, arg2, arg3)); }

    void fillRect(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "fillRect", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void draw3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "draw3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }

    void fill3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "fill3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }

    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, ImageObserver arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawImage", "(Ljava.awt.Image;IIIILjava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool drawImage(Image arg0, int arg1, int arg2, Color arg3, ImageObserver arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawImage", "(Ljava.awt.Image;IILjava.awt.Color;Ljava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, Color arg5, ImageObserver arg6) { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawImage", "(Ljava.awt.Image;IIIILjava.awt.Color;Ljava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    bool drawImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawImage", "(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3)); }

    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, Color arg9, ImageObserver arg10) { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawImage", "(Ljava.awt.Image;IIIIIIIILjava.awt.Color;Ljava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }

    bool drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, ImageObserver arg9) { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawImage", "(Ljava.awt.Image;IIIIIIIILjava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    void clipRect(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "clipRect", "(IIII)V", arg0, arg1, arg2, arg3)); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

    FontMetrics getFontMetrics(Font arg0) { return FontMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava.awt.Font;)Ljava.awt.FontMetrics;", arg0)); }

    FontMetrics getFontMetrics() { return FontMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "()Ljava.awt.FontMetrics;", )); }

    void drawLine(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "drawLine", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void drawPolygon(arr_I arg0, arr_I arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawPolygon", "([I[II)V", arg0, arg1, arg2)); }

    void drawPolygon(Polygon arg0) { (*javaClass->invokeMethod<void>(this->object, "drawPolygon", "(Ljava.awt.Polygon;)V", arg0)); }

    void fillPolygon(Polygon arg0) { (*javaClass->invokeMethod<void>(this->object, "fillPolygon", "(Ljava.awt.Polygon;)V", arg0)); }

    void fillPolygon(arr_I arg0, arr_I arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "fillPolygon", "([I[II)V", arg0, arg1, arg2)); }

    Rectangle getClipBounds(Rectangle arg0) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getClipBounds", "(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;", arg0)); }

    Rectangle getClipBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getClipBounds", "()Ljava.awt.Rectangle;", )); }

    void setPaintMode() { (*javaClass->invokeMethod<void>(this->object, "setPaintMode", "()V", )); }

    void setXORMode(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setXORMode", "(Ljava.awt.Color;)V", arg0)); }

    void setFont(Font arg0) { (*javaClass->invokeMethod<void>(this->object, "setFont", "(Ljava.awt.Font;)V", arg0)); }

    void setClip(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "setClip", "(Ljava.awt.Shape;)V", arg0)); }

    void setClip(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setClip", "(IIII)V", arg0, arg1, arg2, arg3)); }

    Shape getClip() { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getClip", "()Ljava.awt.Shape;", )); }

    void copyArea(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "copyArea", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void clearRect(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "clearRect", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void drawRoundRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "drawRoundRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void fillRoundRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "fillRoundRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void drawOval(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "drawOval", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void fillOval(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "fillOval", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void drawArc(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "drawArc", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void fillArc(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "fillArc", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void drawPolyline(arr_I arg0, arr_I arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawPolyline", "([I[II)V", arg0, arg1, arg2)); }

    void drawChars(arr_C arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "drawChars", "([CIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void drawBytes(arr_B arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "drawBytes", "([BIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    Rectangle getClipRect() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getClipRect", "()Ljava.awt.Rectangle;", )); }

    bool hitClip(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hitClip", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: java.awt.FontMetrics
 * Package name: java.awt
 */
class FontMetrics : public Object {
protected:
    const inline static char *className = "java.awt.FontMetrics";
public:
    STATICINITIALIZE;

    FontMetrics(jobject object) : JavaObject(object) {}

    int charWidth(char arg0) { return int(*javaClass->invokeMethod<int>(this->object, "charWidth", "(C)I", arg0)); }

    int charWidth(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "charWidth", "(I)I", arg0)); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Rectangle2D getStringBounds(CharacterIterator arg0, int arg1, int arg2, Graphics arg3) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava.text.CharacterIterator;IILjava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;", arg0, arg1, arg2, arg3)); }

    Rectangle2D getStringBounds(String arg0, Graphics arg1) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava.lang.String;Ljava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;", arg0, arg1)); }

    Rectangle2D getStringBounds(arr_C arg0, int arg1, int arg2, Graphics arg3) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "([CIILjava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;", arg0, arg1, arg2, arg3)); }

    Rectangle2D getStringBounds(String arg0, int arg1, int arg2, Graphics arg3) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getStringBounds", "(Ljava.lang.String;IILjava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;", arg0, arg1, arg2, arg3)); }

    int getAscent() { return int(*javaClass->invokeMethod<int>(this->object, "getAscent", "()I", )); }

    int getDescent() { return int(*javaClass->invokeMethod<int>(this->object, "getDescent", "()I", )); }

    int getLeading() { return int(*javaClass->invokeMethod<int>(this->object, "getLeading", "()I", )); }

    bool hasUniformLineMetrics() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasUniformLineMetrics", "()Z", )); }

    LineMetrics getLineMetrics(String arg0, Graphics arg1) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava.lang.String;Ljava.awt.Graphics;)Ljava.awt.font.LineMetrics;", arg0, arg1)); }

    LineMetrics getLineMetrics(String arg0, int arg1, int arg2, Graphics arg3) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava.lang.String;IILjava.awt.Graphics;)Ljava.awt.font.LineMetrics;", arg0, arg1, arg2, arg3)); }

    LineMetrics getLineMetrics(arr_C arg0, int arg1, int arg2, Graphics arg3) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "([CIILjava.awt.Graphics;)Ljava.awt.font.LineMetrics;", arg0, arg1, arg2, arg3)); }

    LineMetrics getLineMetrics(CharacterIterator arg0, int arg1, int arg2, Graphics arg3) { return LineMetrics(*javaClass->invokeMethod<jobject>(this->object, "getLineMetrics", "(Ljava.text.CharacterIterator;IILjava.awt.Graphics;)Ljava.awt.font.LineMetrics;", arg0, arg1, arg2, arg3)); }

    Rectangle2D getMaxCharBounds(Graphics arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getMaxCharBounds", "(Ljava.awt.Graphics;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    int getMaxAdvance() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxAdvance", "()I", )); }

    FontRenderContext getFontRenderContext() { return FontRenderContext(*javaClass->invokeMethod<jobject>(this->object, "getFontRenderContext", "()Ljava.awt.font.FontRenderContext;", )); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

    int getMaxDescent() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxDescent", "()I", )); }

    int charsWidth(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "charsWidth", "([CII)I", arg0, arg1, arg2)); }

    int stringWidth(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "stringWidth", "(Ljava.lang.String;)I", arg0)); }

    FontRenderContext myFRC(Graphics arg0) { return FontRenderContext(*javaClass->invokeMethod<jobject>(this->object, "myFRC", "(Ljava.awt.Graphics;)Ljava.awt.font.FontRenderContext;", arg0)); }

    int getMaxAscent() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxAscent", "()I", )); }

    int getMaxDecent() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxDecent", "()I", )); }

    int bytesWidth(arr_B arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "bytesWidth", "([BII)I", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.awt.Polygon
 * Package name: java.awt
 */
class Polygon : public Object {
protected:
    const inline static char *className = "java.awt.Polygon";
public:
    STATICINITIALIZE;

    Polygon(jobject object) : JavaObject(object) {}

    Rectangle getBoundingBox() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBoundingBox", "()Ljava.awt.Rectangle;", )); }

    void addPoint(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addPoint", "(II)V", arg0, arg1)); }

    void translate(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }

    void invalidate() { (*javaClass->invokeMethod<void>(this->object, "invalidate", "()V", )); }

    bool contains(double arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DD)Z", arg0, arg1)); }

    bool contains(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(II)Z", arg0, arg1)); }

    bool contains(Point2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Point2D;)Z", arg0)); }

    bool contains(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool contains(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool contains(Point arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.Point;)Z", arg0)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    bool intersects(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool intersects(Rectangle2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(Ljava.awt.geom.Rectangle2D;)Z", arg0)); }

    bool inside(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "inside", "(II)Z", arg0, arg1)); }

    Rectangle2D getBounds2D() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava.awt.geom.Rectangle2D;", )); }

    PathIterator getPathIterator(AffineTransform arg0) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.geom.PathIterator;", arg0)); }

    PathIterator getPathIterator(AffineTransform arg0, double arg1) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;D)Ljava.awt.geom.PathIterator;", arg0, arg1)); }

    void updateBounds(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "updateBounds", "(II)V", arg0, arg1)); }

    void calculateBounds(arr_I arg0, arr_I arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "calculateBounds", "([I[II)V", arg0, arg1, arg2)); }

    Crossings getCrossings(double arg0, double arg1, double arg2, double arg3) { return Crossings(*javaClass->invokeMethod<jobject>(this->object, "getCrossings", "(DDDD)Lsun.awt.geom.Crossings;", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: sun.awt.geom.Crossings
 * Package name: sun.awt.geom
 */
class Crossings : public Object {
protected:
    const inline static char *className = "sun.awt.geom.Crossings";
public:
    STATICINITIALIZE;

    Crossings(jobject object) : JavaObject(object) {}

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    void record(double arg0, double arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "record", "(DDI)V", arg0, arg1, arg2)); }

    void print() { (*javaClass->invokeMethod<void>(this->object, "print", "()V", )); }

    bool accumulateLine(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accumulateLine", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool accumulateLine(double arg0, double arg1, double arg2, double arg3, int arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accumulateLine", "(DDDDI)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool covers(double arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "covers", "(DD)Z", arg0, arg1)); }

    bool accumulateQuad(double arg0, double arg1, arr_D arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accumulateQuad", "(DD[D)Z", arg0, arg1, arg2)); }

    bool accumulateCubic(double arg0, double arg1, arr_D arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accumulateCubic", "(DD[D)Z", arg0, arg1, arg2)); }

    double getXLo() { return double(*javaClass->invokeMethod<double>(this->object, "getXLo", "()D", )); }

    double getYLo() { return double(*javaClass->invokeMethod<double>(this->object, "getYLo", "()D", )); }

    double getXHi() { return double(*javaClass->invokeMethod<double>(this->object, "getXHi", "()D", )); }

    double getYHi() { return double(*javaClass->invokeMethod<double>(this->object, "getYHi", "()D", )); }

    static Crossings findCrossings(PathIterator arg0, double arg1, double arg2, double arg3, double arg4) { return Crossings(*javaClass->invokeStaticMethod<jobject>(this->object, "findCrossings", "(Ljava.awt.geom.PathIterator;DDDD)Lsun.awt.geom.Crossings;", arg0, arg1, arg2, arg3, arg4)); }

    static Crossings findCrossings(Vector arg0, double arg1, double arg2, double arg3, double arg4) { return Crossings(*javaClass->invokeStaticMethod<jobject>(this->object, "findCrossings", "(Ljava.util.Vector;DDDD)Lsun.awt.geom.Crossings;", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: java.awt.GraphicsDevice
 * Package name: java.awt
 */
class GraphicsDevice : public Object {
protected:
    const inline static char *className = "java.awt.GraphicsDevice";
public:
    STATICINITIALIZE;

    GraphicsDevice(jobject object) : JavaObject(object) {}

    DisplayMode getDisplayMode() { return DisplayMode(*javaClass->invokeMethod<jobject>(this->object, "getDisplayMode", "()Ljava.awt.DisplayMode;", )); }

    void setDisplayMode(DisplayMode arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisplayMode", "(Ljava.awt.DisplayMode;)V", arg0)); }

    int getType() { return int(*javaClass->invokeMethod<int>(this->object, "getType", "()I", )); }

    GraphicsConfiguration getBestConfiguration(GraphicsConfigTemplate arg0) { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getBestConfiguration", "(Ljava.awt.GraphicsConfigTemplate;)Ljava.awt.GraphicsConfiguration;", arg0)); }

    Window getFullScreenWindow() { return Window(*javaClass->invokeMethod<jobject>(this->object, "getFullScreenWindow", "()Ljava.awt.Window;", )); }

    void setFullScreenWindow(Window arg0) { (*javaClass->invokeMethod<void>(this->object, "setFullScreenWindow", "(Ljava.awt.Window;)V", arg0)); }

    GraphicsConfiguration getDefaultConfiguration() { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getDefaultConfiguration", "()Ljava.awt.GraphicsConfiguration;", )); }

    static bool isWindowShapingSupported() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isWindowShapingSupported", "()Z", )); }

    static bool isWindowOpacitySupported() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isWindowOpacitySupported", "()Z", )); }

    bool isWindowPerpixelTranslucencySupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWindowPerpixelTranslucencySupported", "()Z", )); }

    bool isWindowTranslucencySupported(GraphicsDevice_WindowTranslucency arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWindowTranslucencySupported", "(Ljava.awt.GraphicsDevice$WindowTranslucency;)Z", arg0)); }

    GraphicsConfiguration getTranslucencyCapableGC() { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getTranslucencyCapableGC", "()Ljava.awt.GraphicsConfiguration;", )); }

    String getIDstring() { return String(*javaClass->invokeMethod<jobject>(this->object, "getIDstring", "()Ljava.lang.String;", )); }

    bool isFullScreenSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFullScreenSupported", "()Z", )); }

    bool isDisplayChangeSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDisplayChangeSupported", "()Z", )); }

    int getAvailableAcceleratedMemory() { return int(*javaClass->invokeMethod<int>(this->object, "getAvailableAcceleratedMemory", "()I", )); }

};


/**
 * Classpath: java.awt.DisplayMode
 * Package name: java.awt
 */
class DisplayMode : public Object {
protected:
    const inline static char *className = "java.awt.DisplayMode";
public:
    STATICINITIALIZE;

    DisplayMode(jobject object) : JavaObject(object) {}

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(DisplayMode arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.awt.DisplayMode;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getBitDepth() { return int(*javaClass->invokeMethod<int>(this->object, "getBitDepth", "()I", )); }

    int getRefreshRate() { return int(*javaClass->invokeMethod<int>(this->object, "getRefreshRate", "()I", )); }

};


/**
 * Classpath: java.awt.GraphicsConfigTemplate
 * Package name: java.awt
 */
class GraphicsConfigTemplate : public Object {
protected:
    const inline static char *className = "java.awt.GraphicsConfigTemplate";
public:
    STATICINITIALIZE;

    GraphicsConfigTemplate(jobject object) : JavaObject(object) {}

    GraphicsConfiguration getBestConfiguration(GraphicsConfiguration_interface arg0) { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getBestConfiguration", "([Ljava.awt.GraphicsConfiguration;)Ljava.awt.GraphicsConfiguration;", arg0)); }

    bool isGraphicsConfigSupported(GraphicsConfiguration arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isGraphicsConfigSupported", "(Ljava.awt.GraphicsConfiguration;)Z", arg0)); }

};


/**
 * Classpath: [Ljava.awt.GraphicsConfiguration;
 */
class GraphicsConfiguration_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.GraphicsConfiguration;";
public:
    STATICINITIALIZE;

    GraphicsConfiguration_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.Window
 * Package name: java.awt
 */
class Window : public Container {
protected:
    const inline static char *className = "java.awt.Window";
public:
    STATICINITIALIZE;

    Window(jobject object) : JavaObject(object) {}

    void setSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void setSize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }

    static double limit(double arg0, double arg1, double arg2) { return double(*javaClass->invokeStaticMethod<double>(this->object, "limit", "(DDD)D", arg0, arg1, arg2)); }

    void init(GraphicsConfiguration arg0) { (*javaClass->invokeMethod<void>(this->object, "init", "(Ljava.awt.GraphicsConfiguration;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    Window_Type getType() { return Window_Type(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Ljava.awt.Window$Type;", )); }

    bool isOpaque() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpaque", "()Z", )); }

    bool isActive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isActive", "()Z", )); }

    Window getOwner() { return Window(*javaClass->invokeMethod<jobject>(this->object, "getOwner", "()Ljava.awt.Window;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Shape getShape() { return Shape(*javaClass->invokeMethod<jobject>(this->object, "getShape", "()Ljava.awt.Shape;", )); }

    void setShape(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "setShape", "(Ljava.awt.Shape;)V", arg0)); }

    float getOpacity() { return float(*javaClass->invokeMethod<float>(this->object, "getOpacity", "()F", )); }

    void setOpacity(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpacity", "(F)V", arg0)); }

    void setGraphicsConfiguration(GraphicsConfiguration arg0) { (*javaClass->invokeMethod<void>(this->object, "setGraphicsConfiguration", "(Ljava.awt.GraphicsConfiguration;)V", arg0)); }

    void setVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }

    void toFront() { (*javaClass->invokeMethod<void>(this->object, "toFront", "()V", )); }

    void setBounds(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(Ljava.awt.Rectangle;)V", arg0)); }

    void setBounds(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void reshape(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "reshape", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void setLocation(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }

    void setLocation(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(Ljava.awt.Point;)V", arg0)); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    Color getBackground() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getBackground", "()Ljava.awt.Color;", )); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    void addToWindowList() { (*javaClass->invokeMethod<void>(this->object, "addToWindowList", "()V", )); }

    void setWarningString() { (*javaClass->invokeMethod<void>(this->object, "setWarningString", "()V", )); }

    GraphicsConfiguration initGC(GraphicsConfiguration arg0) { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "initGC", "(Ljava.awt.GraphicsConfiguration;)Ljava.awt.GraphicsConfiguration;", arg0)); }

    Toolkit getToolkit() { return Toolkit(*javaClass->invokeMethod<jobject>(this->object, "getToolkit", "()Ljava.awt.Toolkit;", )); }

    void setLocationByPlatform(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocationByPlatform", "(Z)V", arg0)); }

    void ownedInit(Window arg0) { (*javaClass->invokeMethod<void>(this->object, "ownedInit", "(Ljava.awt.Window;)V", arg0)); }

    void addOwnedWindow(WeakReference arg0) { (*javaClass->invokeMethod<void>(this->object, "addOwnedWindow", "(Ljava.lang.ref.WeakReference;)V", arg0)); }

    bool isAlwaysOnTop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAlwaysOnTop", "()Z", )); }

    void setAlwaysOnTop(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAlwaysOnTop", "(Z)V", arg0)); }

    void setIconImages(List arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconImages", "(Ljava.util.List;)V", arg0)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    void setClientSize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setClientSize", "(II)V", arg0, arg1)); }

    void setMinimumSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinimumSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void closeSplashScreen() { (*javaClass->invokeMethod<void>(this->object, "closeSplashScreen", "()V", )); }

    void show() { (*javaClass->invokeMethod<void>(this->object, "show", "()V", )); }

    bool isModalBlocked() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isModalBlocked", "()Z", )); }

    void updateChildrenBlocking() { (*javaClass->invokeMethod<void>(this->object, "updateChildrenBlocking", "()V", )); }

    void toFront_NoClientCode() { (*javaClass->invokeMethod<void>(this->object, "toFront_NoClientCode", "()V", )); }

    static void updateChildFocusableWindowState(Window arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "updateChildFocusableWindowState", "(Ljava.awt.Window;)V", arg0)); }

    void postWindowEvent(int arg0) { (*javaClass->invokeMethod<void>(this->object, "postWindowEvent", "(I)V", arg0)); }

    bool isShowing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isShowing", "()Z", )); }

    bool postEvent(Event arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "postEvent", "(Ljava.awt.Event;)Z", arg0)); }

    void hide() { (*javaClass->invokeMethod<void>(this->object, "hide", "()V", )); }

    void doDispose() { (*javaClass->invokeMethod<void>(this->object, "doDispose", "()V", )); }

    void toBack_NoClientCode() { (*javaClass->invokeMethod<void>(this->object, "toBack_NoClientCode", "()V", )); }

    void toBack() { (*javaClass->invokeMethod<void>(this->object, "toBack", "()V", )); }

    void setCursor(Cursor arg0) { (*javaClass->invokeMethod<void>(this->object, "setCursor", "(Ljava.awt.Cursor;)V", arg0)); }

    Window getOwner_NoClientCode() { return Window(*javaClass->invokeMethod<jobject>(this->object, "getOwner_NoClientCode", "()Ljava.awt.Window;", )); }

    void setModalBlocked(Dialog arg0, bool arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "setModalBlocked", "(Ljava.awt.Dialog;ZZ)V", arg0, arg1, arg2)); }

    bool isModalExcluded(Dialog_ModalExclusionType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isModalExcluded", "(Ljava.awt.Dialog$ModalExclusionType;)Z", arg0)); }

    Dialog getModalBlocker() { return Dialog(*javaClass->invokeMethod<jobject>(this->object, "getModalBlocker", "()Ljava.awt.Dialog;", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processWindowEvent(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processWindowEvent", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void processWindowFocusEvent(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processWindowFocusEvent", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void processWindowStateEvent(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processWindowStateEvent", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    bool isAlwaysOnTopSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAlwaysOnTopSupported", "()Z", )); }

    void setOwnedWindowsAlwaysOnTop(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setOwnedWindowsAlwaysOnTop", "(Z)V", arg0)); }

    bool isFocused() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocused", "()Z", )); }

    Component getFocusOwner() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getFocusOwner", "()Ljava.awt.Component;", )); }

    Component getMostRecentFocusOwner() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getMostRecentFocusOwner", "()Ljava.awt.Component;", )); }

    bool isFocusableWindow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusableWindow", "()Z", )); }

    bool getFocusableWindowState() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getFocusableWindowState", "()Z", )); }

    void addPropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    void dispatchEventImpl(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void applyResourceBundle(String arg0) { (*javaClass->invokeMethod<void>(this->object, "applyResourceBundle", "(Ljava.lang.String;)V", arg0)); }

    void applyResourceBundle(ResourceBundle arg0) { (*javaClass->invokeMethod<void>(this->object, "applyResourceBundle", "(Ljava.util.ResourceBundle;)V", arg0)); }

    static void removeFromWindowList(AppContext arg0, WeakReference arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "removeFromWindowList", "(Lsun.awt.AppContext;Ljava.lang.ref.WeakReference;)V", arg0, arg1)); }

    void removeFromWindowList() { (*javaClass->invokeMethod<void>(this->object, "removeFromWindowList", "()V", )); }

    void addWindowListener(WindowListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addWindowListener", "(Ljava.awt.event.WindowListener;)V", arg0)); }

    void addWindowFocusListener(WindowFocusListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addWindowFocusListener", "(Ljava.awt.event.WindowFocusListener;)V", arg0)); }

    void addWindowStateListener(WindowStateListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addWindowStateListener", "(Ljava.awt.event.WindowStateListener;)V", arg0)); }

    void connectOwnedWindow(Window arg0) { (*javaClass->invokeMethod<void>(this->object, "connectOwnedWindow", "(Ljava.awt.Window;)V", arg0)); }

    void initDeserializedWindow() { (*javaClass->invokeMethod<void>(this->object, "initDeserializedWindow", "()V", )); }

    void setModalExclusionType(Dialog_ModalExclusionType arg0) { (*javaClass->invokeMethod<void>(this->object, "setModalExclusionType", "(Ljava.awt.Dialog$ModalExclusionType;)V", arg0)); }

    void deserializeResources(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "deserializeResources", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void createBufferStrategy(int arg0) { (*javaClass->invokeMethod<void>(this->object, "createBufferStrategy", "(I)V", arg0)); }

    void createBufferStrategy(int arg0, BufferCapabilities arg1) { (*javaClass->invokeMethod<void>(this->object, "createBufferStrategy", "(ILjava.awt.BufferCapabilities;)V", arg0, arg1)); }

    BufferStrategy getBufferStrategy() { return BufferStrategy(*javaClass->invokeMethod<jobject>(this->object, "getBufferStrategy", "()Ljava.awt.image.BufferStrategy;", )); }

    bool canContainFocusOwner(Component arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canContainFocusOwner", "(Ljava.awt.Component;)Z", arg0)); }

    static void setLayersOpaque(Component arg0, bool arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setLayersOpaque", "(Ljava.awt.Component;Z)V", arg0, arg1)); }

    void updateWindow() { (*javaClass->invokeMethod<void>(this->object, "updateWindow", "()V", )); }

    void paint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paint", "(Ljava.awt.Graphics;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    List getIconImages() { return List(*javaClass->invokeMethod<jobject>(this->object, "getIconImages", "()Ljava.util.List;", )); }

    void setIconImage(Image arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconImage", "(Ljava.awt.Image;)V", arg0)); }

    void pack() { (*javaClass->invokeMethod<void>(this->object, "pack", "()V", )); }

    void clearMostRecentFocusOwnerOnHide() { (*javaClass->invokeMethod<void>(this->object, "clearMostRecentFocusOwnerOnHide", "()V", )); }

    void disposeImpl() { (*javaClass->invokeMethod<void>(this->object, "disposeImpl", "()V", )); }

    void adjustListeningChildrenOnParent(long arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "adjustListeningChildrenOnParent", "(JI)V", arg0, arg1)); }

    void adjustDescendantsOnParent(int arg0) { (*javaClass->invokeMethod<void>(this->object, "adjustDescendantsOnParent", "(I)V", arg0)); }

    String getWarningString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getWarningString", "()Ljava.lang.String;", )); }

    InputContext getInputContext() { return InputContext(*javaClass->invokeMethod<jobject>(this->object, "getInputContext", "()Ljava.awt.im.InputContext;", )); }

    static IdentityArrayList getAllWindows() { return IdentityArrayList(*javaClass->invokeStaticMethod<jobject>(this->object, "getAllWindows", "()Lsun.awt.util.IdentityArrayList;", )); }

    static IdentityArrayList getAllUnblockedWindows() { return IdentityArrayList(*javaClass->invokeStaticMethod<jobject>(this->object, "getAllUnblockedWindows", "()Lsun.awt.util.IdentityArrayList;", )); }

    Window getDocumentRoot() { return Window(*javaClass->invokeMethod<jobject>(this->object, "getDocumentRoot", "()Ljava.awt.Window;", )); }

    Dialog_ModalExclusionType getModalExclusionType() { return Dialog_ModalExclusionType(*javaClass->invokeMethod<jobject>(this->object, "getModalExclusionType", "()Ljava.awt.Dialog$ModalExclusionType;", )); }

    void removeWindowListener(WindowListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeWindowListener", "(Ljava.awt.event.WindowListener;)V", arg0)); }

    void removeWindowStateListener(WindowStateListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeWindowStateListener", "(Ljava.awt.event.WindowStateListener;)V", arg0)); }

    void removeWindowFocusListener(WindowFocusListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeWindowFocusListener", "(Ljava.awt.event.WindowFocusListener;)V", arg0)); }

    void preProcessKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "preProcessKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    void postProcessKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "postProcessKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    Set getFocusTraversalKeys(int arg0) { return Set(*javaClass->invokeMethod<jobject>(this->object, "getFocusTraversalKeys", "(I)Ljava.util.Set;", arg0)); }

    void setFocusCycleRoot(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setFocusCycleRoot", "(Z)V", arg0)); }

    bool isFocusCycleRoot() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusCycleRoot", "()Z", )); }

    Container getFocusCycleRootAncestor() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getFocusCycleRootAncestor", "()Ljava.awt.Container;", )); }

    void setFocusableWindowState(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setFocusableWindowState", "(Z)V", arg0)); }

    void setAutoRequestFocus(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAutoRequestFocus", "(Z)V", arg0)); }

    bool isAutoRequestFocus() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAutoRequestFocus", "()Z", )); }

    bool isValidateRoot() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidateRoot", "()Z", )); }

    bool isDisposing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDisposing", "()Z", )); }

    void removeOwnedWindow(WeakReference arg0) { (*javaClass->invokeMethod<void>(this->object, "removeOwnedWindow", "(Ljava.lang.ref.WeakReference;)V", arg0)); }

    void setType(Window_Type arg0) { (*javaClass->invokeMethod<void>(this->object, "setType", "(Ljava.awt.Window$Type;)V", arg0)); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void setLocationRelativeTo(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocationRelativeTo", "(Ljava.awt.Component;)V", arg0)); }

    void deliverMouseWheelToAncestor(MouseWheelEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "deliverMouseWheelToAncestor", "(Ljava.awt.event.MouseWheelEvent;)V", arg0)); }

    bool dispatchMouseWheelToAncestor(MouseWheelEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "dispatchMouseWheelToAncestor", "(Ljava.awt.event.MouseWheelEvent;)Z", arg0)); }

    Component getTemporaryLostComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getTemporaryLostComponent", "()Ljava.awt.Component;", )); }

    Component setTemporaryLostComponent(Component arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "setTemporaryLostComponent", "(Ljava.awt.Component;)Ljava.awt.Component;", arg0)); }

    bool isLocationByPlatform() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLocationByPlatform", "()Z", )); }

    bool isRecursivelyVisible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRecursivelyVisible", "()Z", )); }

    Container getContainer() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getContainer", "()Ljava.awt.Container;", )); }

    void applyCompoundShape(Region arg0) { (*javaClass->invokeMethod<void>(this->object, "applyCompoundShape", "(Lsun.java2d.pipe.Region;)V", arg0)); }

    void applyCurrentShape() { (*javaClass->invokeMethod<void>(this->object, "applyCurrentShape", "()V", )); }

    void mixOnReshaping() { (*javaClass->invokeMethod<void>(this->object, "mixOnReshaping", "()V", )); }

    Point getLocationOnWindow() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocationOnWindow", "()Ljava.awt.Point;", )); }

    Point2D calculateSecurityWarningPosition(double arg0, double arg1, double arg2, double arg3) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "calculateSecurityWarningPosition", "(DDDD)Ljava.awt.geom.Point2D;", arg0, arg1, arg2, arg3)); }

    void updateZOrder() { (*javaClass->invokeMethod<void>(this->object, "updateZOrder", "()V", )); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: java.awt.Window$Type
 * Enclosing class: java.awt.Window
 * Package name: java.awt
 */
class Window_Type : public Enum {
protected:
    const inline static char *className = "java.awt.Window$Type";
public:
    STATICINITIALIZE;

    Window_Type(jobject object) : JavaObject(object) {}

    static Window_Type valueOf(String arg0) { return Window_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.Window$Type;", arg0)); }

};


/**
 * Classpath: java.awt.Toolkit
 * Package name: java.awt
 */
class Toolkit : public Object {
protected:
    const inline static char *className = "java.awt.Toolkit";
public:
    STATICINITIALIZE;

    Toolkit(jobject object) : JavaObject(object) {}

    static Toolkit getDefaultToolkit() { return Toolkit(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultToolkit", "()Ljava.awt.Toolkit;", )); }

    Clipboard getSystemClipboard() { return Clipboard(*javaClass->invokeMethod<jobject>(this->object, "getSystemClipboard", "()Ljava.awt.datatransfer.Clipboard;", )); }

    static String getProperty(String arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    static void initStatic() { (*javaClass->invokeStaticMethod<void>(this->object, "initStatic", "()V", )); }

    ColorModel getColorModel() { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava.awt.image.ColorModel;", )); }

    void sync() { (*javaClass->invokeMethod<void>(this->object, "sync", "()V", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Map mapInputMethodHighlight(InputMethodHighlight arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "mapInputMethodHighlight", "(Ljava.awt.im.InputMethodHighlight;)Ljava.util.Map;", arg0)); }

    static PropertyChangeSupport createPropertyChangeSupport(Toolkit arg0) { return PropertyChangeSupport(*javaClass->invokeStaticMethod<jobject>(this->object, "createPropertyChangeSupport", "(Ljava.awt.Toolkit;)Ljava.beans.PropertyChangeSupport;", arg0)); }

    void setDynamicLayout(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDynamicLayout", "(Z)V", arg0)); }

    bool isDynamicLayoutSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDynamicLayoutSet", "()Z", )); }

    bool isDynamicLayoutActive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDynamicLayoutActive", "()Z", )); }

    static void newAWTError(Throwable arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "newAWTError", "(Ljava.lang.Throwable;Ljava.lang.String;)V", arg0, arg1)); }

    static void loadAssistiveTechnologies() { (*javaClass->invokeStaticMethod<void>(this->object, "loadAssistiveTechnologies", "()V", )); }

    PrintJob getPrintJob(Frame arg0, String arg1, JobAttributes arg2, PageAttributes arg3) { return PrintJob(*javaClass->invokeMethod<jobject>(this->object, "getPrintJob", "(Ljava.awt.Frame;Ljava.lang.String;Ljava.awt.JobAttributes;Ljava.awt.PageAttributes;)Ljava.awt.PrintJob;", arg0, arg1, arg2, arg3)); }

    PrintJob getPrintJob(Frame arg0, String arg1, Properties arg2) { return PrintJob(*javaClass->invokeMethod<jobject>(this->object, "getPrintJob", "(Ljava.awt.Frame;Ljava.lang.String;Ljava.util.Properties;)Ljava.awt.PrintJob;", arg0, arg1, arg2)); }

    Clipboard getSystemSelection() { return Clipboard(*javaClass->invokeMethod<jobject>(this->object, "getSystemSelection", "()Ljava.awt.datatransfer.Clipboard;", )); }

    Cursor createCustomCursor(Image arg0, Point arg1, String arg2) { return Cursor(*javaClass->invokeMethod<jobject>(this->object, "createCustomCursor", "(Ljava.awt.Image;Ljava.awt.Point;Ljava.lang.String;)Ljava.awt.Cursor;", arg0, arg1, arg2)); }

    Dimension getBestCursorSize(int arg0, int arg1) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getBestCursorSize", "(II)Ljava.awt.Dimension;", arg0, arg1)); }

    int getMaximumCursorColors() { return int(*javaClass->invokeMethod<int>(this->object, "getMaximumCursorColors", "()I", )); }

    bool isFrameStateSupported(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFrameStateSupported", "(I)Z", arg0)); }

    static void initAssistiveTechnologies() { (*javaClass->invokeStaticMethod<void>(this->object, "initAssistiveTechnologies", "()V", )); }

    EventQueue getSystemEventQueueImpl() { return EventQueue(*javaClass->invokeMethod<jobject>(this->object, "getSystemEventQueueImpl", "()Ljava.awt.EventQueue;", )); }

    Object getDesktopProperty(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getDesktopProperty", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    void initializeDesktopProperties() { (*javaClass->invokeMethod<void>(this->object, "initializeDesktopProperties", "()V", )); }

    Object lazilyLoadDesktopProperty(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "lazilyLoadDesktopProperty", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    void setDesktopProperty(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "setDesktopProperty", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    static AWTEventListener deProxyAWTEventListener(AWTEventListener arg0) { return AWTEventListener(*javaClass->invokeStaticMethod<jobject>(this->object, "deProxyAWTEventListener", "(Ljava.awt.event.AWTEventListener;)Ljava.awt.event.AWTEventListener;", arg0)); }

    bool areExtraMouseButtonsEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "areExtraMouseButtonsEnabled", "()Z", )); }

    void loadSystemColors(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "loadSystemColors", "([I)V", arg0)); }

    Dimension getScreenSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getScreenSize", "()Ljava.awt.Dimension;", )); }

    int getScreenResolution() { return int(*javaClass->invokeMethod<int>(this->object, "getScreenResolution", "()I", )); }

    static void fallbackToLoadClassForAT(String arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "fallbackToLoadClassForAT", "(Ljava.lang.String;)V", arg0)); }

    Image getImage(String arg0) { return Image(*javaClass->invokeMethod<jobject>(this->object, "getImage", "(Ljava.lang.String;)Ljava.awt.Image;", arg0)); }

    Image getImage(URL arg0) { return Image(*javaClass->invokeMethod<jobject>(this->object, "getImage", "(Ljava.net.URL;)Ljava.awt.Image;", arg0)); }

    void beep() { (*javaClass->invokeMethod<void>(this->object, "beep", "()V", )); }

    int getMenuShortcutKeyMask() { return int(*javaClass->invokeMethod<int>(this->object, "getMenuShortcutKeyMask", "()I", )); }

    int getMenuShortcutKeyMaskEx() { return int(*javaClass->invokeMethod<int>(this->object, "getMenuShortcutKeyMaskEx", "()I", )); }

    bool getLockingKeyState(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getLockingKeyState", "(I)Z", arg0)); }

    void setLockingKeyState(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setLockingKeyState", "(IZ)V", arg0, arg1)); }

    static void setPlatformResources(ResourceBundle arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setPlatformResources", "(Ljava.util.ResourceBundle;)V", arg0)); }

    EventQueue getSystemEventQueue() { return EventQueue(*javaClass->invokeMethod<jobject>(this->object, "getSystemEventQueue", "()Ljava.awt.EventQueue;", )); }

    DragGestureRecognizer createDragGestureRecognizer(Class arg0, DragSource arg1, Component arg2, int arg3, DragGestureListener arg4) { return DragGestureRecognizer(*javaClass->invokeMethod<jobject>(this->object, "createDragGestureRecognizer", "(Ljava.lang.Class;Ljava.awt.dnd.DragSource;Ljava.awt.Component;ILjava.awt.dnd.DragGestureListener;)Ljava.awt.dnd.DragGestureRecognizer;", arg0, arg1, arg2, arg3, arg4)); }

    bool isModalityTypeSupported(Dialog_ModalityType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isModalityTypeSupported", "(Ljava.awt.Dialog$ModalityType;)Z", arg0)); }

    void addAWTEventListener(AWTEventListener arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "addAWTEventListener", "(Ljava.awt.event.AWTEventListener;J)V", arg0, arg1)); }

    void removeAWTEventListener(AWTEventListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAWTEventListener", "(Ljava.awt.event.AWTEventListener;)V", arg0)); }

    int countAWTEventListeners(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "countAWTEventListeners", "(J)I", arg0)); }

    static bool lambda_loadAssistiveTechnologies_1(Map arg0, String arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$loadAssistiveTechnologies$1", "(Ljava.util.Map;Ljava.lang.String;)Z", arg0, arg1)); }

    static Void lambda_loadAssistiveTechnologies_0(ClassLoader arg0, Set arg1, Map arg2) { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$loadAssistiveTechnologies$0", "(Ljava.lang.ClassLoader;Ljava.util.Set;Ljava.util.Map;)Ljava.lang.Void;", arg0, arg1, arg2)); }

    bool prepareImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "prepareImage", "(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3)); }

    int checkImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return int(*javaClass->invokeMethod<int>(this->object, "checkImage", "(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)I", arg0, arg1, arg2, arg3)); }

    void notifyAWTEventListeners(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "notifyAWTEventListeners", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    static void loadLibraries() { (*javaClass->invokeStaticMethod<void>(this->object, "loadLibraries", "()V", )); }

    Image createImage(URL arg0) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "(Ljava.net.URL;)Ljava.awt.Image;", arg0)); }

    Image createImage(String arg0) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "(Ljava.lang.String;)Ljava.awt.Image;", arg0)); }

    Image createImage(ImageProducer arg0) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "(Ljava.awt.image.ImageProducer;)Ljava.awt.Image;", arg0)); }

    Image createImage(arr_B arg0, int arg1, int arg2) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "([BII)Ljava.awt.Image;", arg0, arg1, arg2)); }

    Image createImage(arr_B arg0) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "([B)Ljava.awt.Image;", arg0)); }

    FontMetrics getFontMetrics(Font arg0) { return FontMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava.awt.Font;)Ljava.awt.FontMetrics;", arg0)); }

    Insets getScreenInsets(GraphicsConfiguration arg0) { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getScreenInsets", "(Ljava.awt.GraphicsConfiguration;)Ljava.awt.Insets;", arg0)); }

    static bool enabledOnToolkit(long arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "enabledOnToolkit", "(J)Z", arg0)); }

    static EventQueue getEventQueue() { return EventQueue(*javaClass->invokeStaticMethod<jobject>(this->object, "getEventQueue", "()Ljava.awt.EventQueue;", )); }

    bool isModalExclusionTypeSupported(Dialog_ModalExclusionType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isModalExclusionTypeSupported", "(Ljava.awt.Dialog$ModalExclusionType;)Z", arg0)); }

    bool isAlwaysOnTopSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAlwaysOnTopSupported", "()Z", )); }

    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    static Container getNativeContainer(Component arg0) { return Container(*javaClass->invokeStaticMethod<jobject>(this->object, "getNativeContainer", "(Ljava.awt.Component;)Ljava.awt.Container;", arg0)); }

};


/**
 * Classpath: java.awt.datatransfer.Clipboard
 * Package name: java.awt.datatransfer
 */
class Clipboard : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.Clipboard";
public:
    STATICINITIALIZE;

    Clipboard(jobject object) : JavaObject(object) {}

    Transferable getContents(Object arg0) { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "getContents", "(Ljava.lang.Object;)Ljava.awt.datatransfer.Transferable;", arg0)); }

    void setContents(Transferable arg0, ClipboardOwner arg1) { (*javaClass->invokeMethod<void>(this->object, "setContents", "(Ljava.awt.datatransfer.Transferable;Ljava.awt.datatransfer.ClipboardOwner;)V", arg0, arg1)); }

    Object getData(DataFlavor arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getData", "(Ljava.awt.datatransfer.DataFlavor;)Ljava.lang.Object;", arg0)); }

    void fireFlavorsChanged() { (*javaClass->invokeMethod<void>(this->object, "fireFlavorsChanged", "()V", )); }

    Set getAvailableDataFlavorSet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getAvailableDataFlavorSet", "()Ljava.util.Set;", )); }

    bool isDataFlavorAvailable(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDataFlavorAvailable", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    void addFlavorListener(FlavorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addFlavorListener", "(Ljava.awt.datatransfer.FlavorListener;)V", arg0)); }

    void removeFlavorListener(FlavorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeFlavorListener", "(Ljava.awt.datatransfer.FlavorListener;)V", arg0)); }

    void lambda_fireFlavorsChanged_2(FlavorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "lambda$fireFlavorsChanged$2", "(Ljava.awt.datatransfer.FlavorListener;)V", arg0)); }

    void lambda_fireFlavorsChanged_1(FlavorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "lambda$fireFlavorsChanged$1", "(Ljava.awt.datatransfer.FlavorListener;)V", arg0)); }

    void lambda_setContents_0(ClipboardOwner arg0, Transferable arg1) { (*javaClass->invokeMethod<void>(this->object, "lambda$setContents$0", "(Ljava.awt.datatransfer.ClipboardOwner;Ljava.awt.datatransfer.Transferable;)V", arg0, arg1)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.awt.datatransfer.Transferable
 * Package name: java.awt.datatransfer
 */
class Transferable : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.Transferable";
public:
    STATICINITIALIZE;

    Transferable(jobject object) : JavaObject(object) {}

    bool isDataFlavorSupported(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDataFlavorSupported", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    Object getTransferData(DataFlavor arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getTransferData", "(Ljava.awt.datatransfer.DataFlavor;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.awt.datatransfer.DataFlavor
 * Package name: java.awt.datatransfer
 */
class DataFlavor : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.DataFlavor";
public:
    STATICINITIALIZE;

    DataFlavor(jobject object) : JavaObject(object) {}

    String getParameter(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getParameter", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static Class tryToLoadClass(String arg0, ClassLoader arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "tryToLoadClass", "(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.Class;", arg0, arg1)); }

    String getPrimaryType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPrimaryType", "()Ljava.lang.String;", )); }

    String getSubType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSubType", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    bool equals(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.String;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void initialize(String arg0, String arg1, ClassLoader arg2) { (*javaClass->invokeMethod<void>(this->object, "initialize", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.ClassLoader;)V", arg0, arg1, arg2)); }

    bool match(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "match", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void readExternal(ObjectInput arg0) { (*javaClass->invokeMethod<void>(this->object, "readExternal", "(Ljava.io.ObjectInput;)V", arg0)); }

    void writeExternal(ObjectOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.ObjectOutput;)V", arg0)); }

    bool isRepresentationClassInputStream() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRepresentationClassInputStream", "()Z", )); }

    bool isRepresentationClassByteBuffer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRepresentationClassByteBuffer", "()Z", )); }

    bool isFlavorTextType() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlavorTextType", "()Z", )); }

    Class getRepresentationClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getRepresentationClass", "()Ljava.lang.Class;", )); }

    bool isStandardTextRepresentationClass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStandardTextRepresentationClass", "()Z", )); }

    bool isMimeTypeEqual(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMimeTypeEqual", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    bool isMimeTypeEqual(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMimeTypeEqual", "(Ljava.lang.String;)Z", arg0)); }

    bool isMimeTypeEqual(MimeType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMimeTypeEqual", "(Ljava.awt.datatransfer.MimeType;)Z", arg0)); }

    bool isRepresentationClassReader() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRepresentationClassReader", "()Z", )); }

    bool isRepresentationClassCharBuffer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRepresentationClassCharBuffer", "()Z", )); }

    Class getDefaultRepresentationClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDefaultRepresentationClass", "()Ljava.lang.Class;", )); }

    bool isRepresentationClassSerializable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRepresentationClassSerializable", "()Z", )); }

    bool isRepresentationClassRemote() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRepresentationClassRemote", "()Z", )); }

    static DataFlavor initHtml(String arg0) { return DataFlavor(*javaClass->invokeStaticMethod<jobject>(this->object, "initHtml", "(Ljava.lang.String;)Ljava.awt.datatransfer.DataFlavor;", arg0)); }

    static DataFlavor getTextPlainUnicodeFlavor() { return DataFlavor(*javaClass->invokeStaticMethod<jobject>(this->object, "getTextPlainUnicodeFlavor", "()Ljava.awt.datatransfer.DataFlavor;", )); }

    static DataFlavor selectBestTextFlavor(DataFlavor_interface arg0) { return DataFlavor(*javaClass->invokeStaticMethod<jobject>(this->object, "selectBestTextFlavor", "([Ljava.awt.datatransfer.DataFlavor;)Ljava.awt.datatransfer.DataFlavor;", arg0)); }

    Reader getReaderForText(Transferable arg0) { return Reader(*javaClass->invokeMethod<jobject>(this->object, "getReaderForText", "(Ljava.awt.datatransfer.Transferable;)Ljava.io.Reader;", arg0)); }

    String getMimeType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getMimeType", "()Ljava.lang.String;", )); }

    String getHumanPresentableName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHumanPresentableName", "()Ljava.lang.String;", )); }

    void setHumanPresentableName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setHumanPresentableName", "(Ljava.lang.String;)V", arg0)); }

    bool isMimeTypeSerializedObject() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMimeTypeSerializedObject", "()Z", )); }

    String getDefaultRepresentationClassAsString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDefaultRepresentationClassAsString", "()Ljava.lang.String;", )); }

    bool isFlavorSerializedObjectType() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlavorSerializedObjectType", "()Z", )); }

    bool isFlavorRemoteObjectType() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlavorRemoteObjectType", "()Z", )); }

    bool isFlavorJavaFileListType() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlavorJavaFileListType", "()Z", )); }

    String normalizeMimeTypeParameter(String arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "normalizeMimeTypeParameter", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    String normalizeMimeType(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "normalizeMimeType", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static DataFlavor createConstant(String arg0, String arg1) { return DataFlavor(*javaClass->invokeStaticMethod<jobject>(this->object, "createConstant", "(Ljava.lang.String;Ljava.lang.String;)Ljava.awt.datatransfer.DataFlavor;", arg0, arg1)); }

    static DataFlavor createConstant(Class arg0, String arg1) { return DataFlavor(*javaClass->invokeStaticMethod<jobject>(this->object, "createConstant", "(Ljava.lang.Class;Ljava.lang.String;)Ljava.awt.datatransfer.DataFlavor;", arg0, arg1)); }

};


/**
 * Classpath: java.awt.datatransfer.MimeType
 * Package name: java.awt.datatransfer
 */
class MimeType : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.MimeType";
public:
    STATICINITIALIZE;

    MimeType(jobject object) : JavaObject(object) {}

    void removeParameter(String arg0) { (*javaClass->invokeMethod<void>(this->object, "removeParameter", "(Ljava.lang.String;)V", arg0)); }

    String getParameter(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getParameter", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String getBaseType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getBaseType", "()Ljava.lang.String;", )); }

    void setParameter(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "setParameter", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    String getPrimaryType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPrimaryType", "()Ljava.lang.String;", )); }

    String getSubType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSubType", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    bool match(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "match", "(Ljava.lang.String;)Z", arg0)); }

    bool match(MimeType arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "match", "(Ljava.awt.datatransfer.MimeType;)Z", arg0)); }

    MimeTypeParameterList getParameters() { return MimeTypeParameterList(*javaClass->invokeMethod<jobject>(this->object, "getParameters", "()Ljava.awt.datatransfer.MimeTypeParameterList;", )); }

    void readExternal(ObjectInput arg0) { (*javaClass->invokeMethod<void>(this->object, "readExternal", "(Ljava.io.ObjectInput;)V", arg0)); }

    void writeExternal(ObjectOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternal", "(Ljava.io.ObjectOutput;)V", arg0)); }

    bool isValidToken(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidToken", "(Ljava.lang.String;)Z", arg0)); }

    static bool isTokenChar(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isTokenChar", "(C)Z", arg0)); }

    void parse(String arg0) { (*javaClass->invokeMethod<void>(this->object, "parse", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: java.awt.datatransfer.MimeTypeParameterList
 * Package name: java.awt.datatransfer
 */
class MimeTypeParameterList : public Object {
protected:
    const inline static char *className = "java.awt.datatransfer.MimeTypeParameterList";
public:
    STATICINITIALIZE;

    MimeTypeParameterList(jobject object) : JavaObject(object) {}

    void remove(String arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.lang.String;)V", arg0)); }

    String get(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    void set(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    static String quote(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "quote", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static bool isTokenChar(char arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isTokenChar", "(C)Z", arg0)); }

    Enumeration getNames() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getNames", "()Ljava.util.Enumeration;", )); }

    static String unquote(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "unquote", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    void parse(String arg0) { (*javaClass->invokeMethod<void>(this->object, "parse", "(Ljava.lang.String;)V", arg0)); }

    static int skipWhiteSpace(String arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "skipWhiteSpace", "(Ljava.lang.String;I)I", arg0, arg1)); }

};


/**
 * Classpath: [Ljava.awt.datatransfer.DataFlavor;
 */
class DataFlavor_interface : public Object {
protected:
    const inline static char *className = "[Ljava.awt.datatransfer.DataFlavor;";
public:
    STATICINITIALIZE;

    DataFlavor_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.io.Reader
 * Package name: java.io
 */
class Reader : public Object {
protected:
    const inline static char *className = "java.io.Reader";
public:
    STATICINITIALIZE;

    Reader(jobject object) : JavaObject(object) {}

    int read(arr_C arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "([C)I", arg0)); }

    int read(arr_C arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "read", "([CII)I", arg0, arg1, arg2)); }

    int read(CharBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "(Ljava.nio.CharBuffer;)I", arg0)); }

    int read() { return int(*javaClass->invokeMethod<int>(this->object, "read", "()I", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void mark(int arg0) { (*javaClass->invokeMethod<void>(this->object, "mark", "(I)V", arg0)); }

    long transferTo(Writer arg0) { return long(*javaClass->invokeMethod<long>(this->object, "transferTo", "(Ljava.io.Writer;)J", arg0)); }

    long skip(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "skip", "(J)J", arg0)); }

    bool markSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "markSupported", "()Z", )); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    bool ready() { return bool(*javaClass->invokeMethod<boolean>(this->object, "ready", "()Z", )); }

    static Reader nullReader() { return Reader(*javaClass->invokeStaticMethod<jobject>(this->object, "nullReader", "()Ljava.io.Reader;", )); }

};


/**
 * Classpath: java.awt.datatransfer.ClipboardOwner
 * Package name: java.awt.datatransfer
 */
class ClipboardOwner : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.ClipboardOwner";
public:
    STATICINITIALIZE;

    ClipboardOwner(jobject object) : JavaObject(object) {}

    void lostOwnership(Clipboard arg0, Transferable arg1) { (*javaClass->invokeMethod<void>(this->object, "lostOwnership", "(Ljava.awt.datatransfer.Clipboard;Ljava.awt.datatransfer.Transferable;)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.datatransfer.FlavorListener
 * Package name: java.awt.datatransfer
 */
class FlavorListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.FlavorListener";
public:
    STATICINITIALIZE;

    FlavorListener(jobject object) : JavaObject(object) {}

    void flavorsChanged(FlavorEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "flavorsChanged", "(Ljava.awt.datatransfer.FlavorEvent;)V", arg0)); }

};


/**
 * Classpath: java.util.EventObject
 * Package name: java.util
 */
class EventObject : public Object {
protected:
    const inline static char *className = "java.util.EventObject";
public:
    STATICINITIALIZE;

    EventObject(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Object getSource() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getSource", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.beans.PropertyChangeSupport
 * Package name: java.beans
 */
class PropertyChangeSupport : public Object {
protected:
    const inline static char *className = "java.beans.PropertyChangeSupport";
public:
    STATICINITIALIZE;

    PropertyChangeSupport(jobject object) : JavaObject(object) {}

    static void fire(PropertyChangeListener_interface arg0, PropertyChangeEvent arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "fire", "([Ljava.beans.PropertyChangeListener;Ljava.beans.PropertyChangeEvent;)V", arg0, arg1)); }

    void fireIndexedPropertyChange(String arg0, int arg1, Object arg2, Object arg3) { (*javaClass->invokeMethod<void>(this->object, "fireIndexedPropertyChange", "(Ljava.lang.String;ILjava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2, arg3)); }

    void fireIndexedPropertyChange(String arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "fireIndexedPropertyChange", "(Ljava.lang.String;III)V", arg0, arg1, arg2, arg3)); }

    void fireIndexedPropertyChange(String arg0, int arg1, bool arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "fireIndexedPropertyChange", "(Ljava.lang.String;IZZ)V", arg0, arg1, arg2, arg3)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void removePropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    void firePropertyChange(String arg0, bool arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;ZZ)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void firePropertyChange(PropertyChangeEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.beans.PropertyChangeEvent;)V", arg0)); }

    void addPropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    bool hasListeners(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasListeners", "(Ljava.lang.String;)Z", arg0)); }

};


/**
 * Classpath: [Ljava.beans.PropertyChangeListener;
 */
class PropertyChangeListener_interface : public Object {
protected:
    const inline static char *className = "[Ljava.beans.PropertyChangeListener;";
public:
    STATICINITIALIZE;

    PropertyChangeListener_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.beans.PropertyChangeEvent
 * Package name: java.beans
 */
class PropertyChangeEvent : public EventObject {
protected:
    const inline static char *className = "java.beans.PropertyChangeEvent";
public:
    STATICINITIALIZE;

    PropertyChangeEvent(jobject object) : JavaObject(object) {}

    String getPropertyName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPropertyName", "()Ljava.lang.String;", )); }

    Object getOldValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOldValue", "()Ljava.lang.Object;", )); }

    Object getNewValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getNewValue", "()Ljava.lang.Object;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void appendTo(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "appendTo", "(Ljava.lang.StringBuilder;)V", arg0)); }

    Object getPropagationId() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getPropagationId", "()Ljava.lang.Object;", )); }

    void setPropagationId(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "setPropagationId", "(Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: java.beans.PropertyChangeListener
 * Package name: java.beans
 */
class PropertyChangeListener : public JavaObject {
protected:
    const inline static char *className = "java.beans.PropertyChangeListener";
public:
    STATICINITIALIZE;

    PropertyChangeListener(jobject object) : JavaObject(object) {}

    void propertyChange(PropertyChangeEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "propertyChange", "(Ljava.beans.PropertyChangeEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.Frame
 * Package name: java.awt
 */
class Frame : public Window {
protected:
    const inline static char *className = "java.awt.Frame";
public:
    STATICINITIALIZE;

    Frame(jobject object) : JavaObject(object) {}

    void setResizable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setResizable", "(Z)V", arg0)); }

    void setTitle(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTitle", "(Ljava.lang.String;)V", arg0)); }

    String getTitle() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTitle", "()Ljava.lang.String;", )); }

    void setMenuBar(MenuBar arg0) { (*javaClass->invokeMethod<void>(this->object, "setMenuBar", "(Ljava.awt.MenuBar;)V", arg0)); }

    void setMaximizedBounds(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaximizedBounds", "(Ljava.awt.Rectangle;)V", arg0)); }

    int getExtendedState() { return int(*javaClass->invokeMethod<int>(this->object, "getExtendedState", "()I", )); }

    void setExtendedState(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setExtendedState", "(I)V", arg0)); }

    void setState(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setState", "(I)V", arg0)); }

    Image getIconImage() { return Image(*javaClass->invokeMethod<jobject>(this->object, "getIconImage", "()Ljava.awt.Image;", )); }

    MenuBar getMenuBar() { return MenuBar(*javaClass->invokeMethod<jobject>(this->object, "getMenuBar", "()Ljava.awt.MenuBar;", )); }

    Rectangle getMaximizedBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getMaximizedBounds", "()Ljava.awt.Rectangle;", )); }

    int getCursorType() { return int(*javaClass->invokeMethod<int>(this->object, "getCursorType", "()I", )); }

    void remove(MenuComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.awt.MenuComponent;)V", arg0)); }

    void init(String arg0, GraphicsConfiguration arg1) { (*javaClass->invokeMethod<void>(this->object, "init", "(Ljava.lang.String;Ljava.awt.GraphicsConfiguration;)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    int getState() { return int(*javaClass->invokeMethod<int>(this->object, "getState", "()I", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void setShape(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "setShape", "(Ljava.awt.Shape;)V", arg0)); }

    void setOpacity(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpacity", "(F)V", arg0)); }

    bool isFrameStateSupported(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFrameStateSupported", "(I)Z", arg0)); }

    bool isUndecorated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUndecorated", "()Z", )); }

    bool isResizable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isResizable", "()Z", )); }

    void setUndecorated(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setUndecorated", "(Z)V", arg0)); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    void setCursor(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setCursor", "(I)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    void setIconImage(Image arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconImage", "(Ljava.awt.Image;)V", arg0)); }

    void postProcessKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "postProcessKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

};


/**
 * Classpath: java.awt.Component
 * Package name: java.awt
 */
class Component : public Object {
protected:
    const inline static char *className = "java.awt.Component";
public:
    STATICINITIALIZE;

    Component(jobject object) : JavaObject(object) {}

    void disable() { (*javaClass->invokeMethod<void>(this->object, "disable", "()V", )); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    void setSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void setSize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    void invalidate() { (*javaClass->invokeMethod<void>(this->object, "invalidate", "()V", )); }

    void enable() { (*javaClass->invokeMethod<void>(this->object, "enable", "()V", )); }

    void enable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "enable", "(Z)V", arg0)); }

    void setLocale(Locale arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocale", "(Ljava.util.Locale;)V", arg0)); }

    bool isValid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValid", "()Z", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void add(PopupMenu arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.awt.PopupMenu;)V", arg0)); }

    void remove(MenuComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.awt.MenuComponent;)V", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void update(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "update", "(Ljava.awt.Graphics;)V", arg0)); }

    Dimension size() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "size", "()Ljava.awt.Dimension;", )); }

    bool contains(Point arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.Point;)Z", arg0)); }

    bool contains(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(II)Z", arg0, arg1)); }

    void list(PrintWriter arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "list", "(Ljava.io.PrintWriter;I)V", arg0, arg1)); }

    void list(PrintStream arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "list", "(Ljava.io.PrintStream;I)V", arg0, arg1)); }

    void list(PrintWriter arg0) { (*javaClass->invokeMethod<void>(this->object, "list", "(Ljava.io.PrintWriter;)V", arg0)); }

    void list(PrintStream arg0) { (*javaClass->invokeMethod<void>(this->object, "list", "(Ljava.io.PrintStream;)V", arg0)); }

    void list() { (*javaClass->invokeMethod<void>(this->object, "list", "()V", )); }

    Rectangle getBounds(Rectangle arg0) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;", arg0)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    void validate() { (*javaClass->invokeMethod<void>(this->object, "validate", "()V", )); }

    Rectangle bounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "bounds", "()Ljava.awt.Rectangle;", )); }

    Point getLocation(Point arg0) { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "(Ljava.awt.Point;)Ljava.awt.Point;", arg0)); }

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    Container getParent() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.awt.Container;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool action(Event arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "action", "(Ljava.awt.Event;Ljava.lang.Object;)Z", arg0, arg1)); }

    void setName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setName", "(Ljava.lang.String;)V", arg0)); }

    void print(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.awt.Graphics;)V", arg0)); }

    Point location() { return Point(*javaClass->invokeMethod<jobject>(this->object, "location", "()Ljava.awt.Point;", )); }

    Dimension getSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getSize", "()Ljava.awt.Dimension;", )); }

    Dimension getSize(Dimension arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getSize", "(Ljava.awt.Dimension;)Ljava.awt.Dimension;", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    bool isOpaque() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpaque", "()Z", )); }

    void resize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "resize", "(II)V", arg0, arg1)); }

    void resize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "resize", "(Ljava.awt.Dimension;)V", arg0)); }

    static bool isInstanceOf(Object arg0, String arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isInstanceOf", "(Ljava.lang.Object;Ljava.lang.String;)Z", arg0, arg1)); }

    ColorModel getColorModel() { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava.awt.image.ColorModel;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    GraphicsConfiguration getGraphicsConfiguration() { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getGraphicsConfiguration", "()Ljava.awt.GraphicsConfiguration;", )); }

    void setGraphicsConfiguration(GraphicsConfiguration arg0) { (*javaClass->invokeMethod<void>(this->object, "setGraphicsConfiguration", "(Ljava.awt.GraphicsConfiguration;)V", arg0)); }

    void setVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }

    void layout() { (*javaClass->invokeMethod<void>(this->object, "layout", "()V", )); }

    Color getForeground() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getForeground", "()Ljava.awt.Color;", )); }

    void setForeground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setForeground", "(Ljava.awt.Color;)V", arg0)); }

    void relocateComponent() { (*javaClass->invokeMethod<void>(this->object, "relocateComponent", "()V", )); }

    bool isFocusOwner() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusOwner", "()Z", )); }

    bool canBeFocusOwnerRecursively() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeFocusOwnerRecursively", "()Z", )); }

    bool transferFocus(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "transferFocus", "(Z)Z", arg0)); }

    void transferFocus() { (*javaClass->invokeMethod<void>(this->object, "transferFocus", "()V", )); }

    bool updateGraphicsData(GraphicsConfiguration arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "updateGraphicsData", "(Ljava.awt.GraphicsConfiguration;)Z", arg0)); }

    void invalidateParent() { (*javaClass->invokeMethod<void>(this->object, "invalidateParent", "()V", )); }

    void doLayout() { (*javaClass->invokeMethod<void>(this->object, "doLayout", "()V", )); }

    Dimension preferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "preferredSize", "()Ljava.awt.Dimension;", )); }

    bool isPreferredSizeSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPreferredSizeSet", "()Z", )); }

    bool isMaximumSizeSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMaximumSizeSet", "()Z", )); }

    Dimension getMaximumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMaximumSize", "()Ljava.awt.Dimension;", )); }

    float getAlignmentX() { return float(*javaClass->invokeMethod<float>(this->object, "getAlignmentX", "()F", )); }

    float getAlignmentY() { return float(*javaClass->invokeMethod<float>(this->object, "getAlignmentY", "()F", )); }

    void lightweightPaint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "lightweightPaint", "(Ljava.awt.Graphics;)V", arg0)); }

    void paintHeavyweightComponents(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintHeavyweightComponents", "(Ljava.awt.Graphics;)V", arg0)); }

    void lightweightPrint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "lightweightPrint", "(Ljava.awt.Graphics;)V", arg0)); }

    void printHeavyweightComponents(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "printHeavyweightComponents", "(Ljava.awt.Graphics;)V", arg0)); }

    void enableEvents(long arg0) { (*javaClass->invokeMethod<void>(this->object, "enableEvents", "(J)V", arg0)); }

    Component getComponentAt(int arg0, int arg1) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponentAt", "(II)Ljava.awt.Component;", arg0, arg1)); }

    Component getComponentAt(Point arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponentAt", "(Ljava.awt.Point;)Ljava.awt.Component;", arg0)); }

    void deliverEvent(Event arg0) { (*javaClass->invokeMethod<void>(this->object, "deliverEvent", "(Ljava.awt.Event;)V", arg0)); }

    Component locate(int arg0, int arg1) { return Component(*javaClass->invokeMethod<jobject>(this->object, "locate", "(II)Ljava.awt.Component;", arg0, arg1)); }

    Component findUnderMouseInWindow(PointerInfo arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "findUnderMouseInWindow", "(Ljava.awt.PointerInfo;)Ljava.awt.Component;", arg0)); }

    bool isSameOrAncestorOf(Component arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSameOrAncestorOf", "(Ljava.awt.Component;Z)Z", arg0, arg1)); }

    Point pointRelativeToComponent(Point arg0) { return Point(*javaClass->invokeMethod<jobject>(this->object, "pointRelativeToComponent", "(Ljava.awt.Point;)Ljava.awt.Point;", arg0)); }

    void setAutoFocusTransferOnDisposal(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAutoFocusTransferOnDisposal", "(Z)V", arg0)); }

    bool containsFocus() { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsFocus", "()Z", )); }

    void transferFocusBackward() { (*javaClass->invokeMethod<void>(this->object, "transferFocusBackward", "()V", )); }

    bool transferFocusBackward(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "transferFocusBackward", "(Z)Z", arg0)); }

    void setFocusTraversalKeys_NoIDCheck(int arg0, Set arg1) { (*javaClass->invokeMethod<void>(this->object, "setFocusTraversalKeys_NoIDCheck", "(ILjava.util.Set;)V", arg0, arg1)); }

    Set getFocusTraversalKeys_NoIDCheck(int arg0) { return Set(*javaClass->invokeMethod<jobject>(this->object, "getFocusTraversalKeys_NoIDCheck", "(I)Ljava.util.Set;", arg0)); }

    Container getTraversalRoot() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getTraversalRoot", "()Ljava.awt.Container;", )); }

    bool isNonOpaqueForMixing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNonOpaqueForMixing", "()Z", )); }

    Region getOpaqueShape() { return Region(*javaClass->invokeMethod<jobject>(this->object, "getOpaqueShape", "()Lsun.java2d.pipe.Region;", )); }

    Region getNormalShape() { return Region(*javaClass->invokeMethod<jobject>(this->object, "getNormalShape", "()Lsun.java2d.pipe.Region;", )); }

    void subtractAndApplyShape(Region arg0) { (*javaClass->invokeMethod<void>(this->object, "subtractAndApplyShape", "(Lsun.java2d.pipe.Region;)V", arg0)); }

    bool isMixingNeeded() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMixingNeeded", "()Z", )); }

    void mixOnShowing() { (*javaClass->invokeMethod<void>(this->object, "mixOnShowing", "()V", )); }

    void mixOnHiding(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "mixOnHiding", "(Z)V", arg0)); }

    void subtractAndApplyShapeBelowMe() { (*javaClass->invokeMethod<void>(this->object, "subtractAndApplyShapeBelowMe", "()V", )); }

    void mixOnValidating() { (*javaClass->invokeMethod<void>(this->object, "mixOnValidating", "()V", )); }

    void initializeFocusTraversalKeys() { (*javaClass->invokeMethod<void>(this->object, "initializeFocusTraversalKeys", "()V", )); }

    bool updateChildGraphicsData(GraphicsConfiguration arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "updateChildGraphicsData", "(Ljava.awt.GraphicsConfiguration;)Z", arg0)); }

    Point getMousePosition() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getMousePosition", "()Ljava.awt.Point;", )); }

    void setFocusTraversalKeys(int arg0, Set arg1) { (*javaClass->invokeMethod<void>(this->object, "setFocusTraversalKeys", "(ILjava.util.Set;)V", arg0, arg1)); }

    bool areFocusTraversalKeysSet(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "areFocusTraversalKeysSet", "(I)Z", arg0)); }

    void clearCurrentFocusCycleRootOnHide() { (*javaClass->invokeMethod<void>(this->object, "clearCurrentFocusCycleRootOnHide", "()V", )); }

    bool postsOldMouseEvents() { return bool(*javaClass->invokeMethod<boolean>(this->object, "postsOldMouseEvents", "()Z", )); }

    bool isFocusTraversableOverridden() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusTraversableOverridden", "()Z", )); }

    bool checkCoalescing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkCoalescing", "()Z", )); }

    Container getParent_NoClientCode() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getParent_NoClientCode", "()Ljava.awt.Container;", )); }

    bool updateSelfGraphicsData(GraphicsConfiguration arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "updateSelfGraphicsData", "(Ljava.awt.GraphicsConfiguration;)Z", arg0)); }

    Toolkit getToolkitImpl() { return Toolkit(*javaClass->invokeMethod<jobject>(this->object, "getToolkitImpl", "()Ljava.awt.Toolkit;", )); }

    bool isVisible_NoClientCode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVisible_NoClientCode", "()Z", )); }

    Rectangle getRecursivelyVisibleBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getRecursivelyVisibleBounds", "()Ljava.awt.Rectangle;", )); }

    bool isEnabledImpl() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnabledImpl", "()Z", )); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    void repaint(long arg0) { (*javaClass->invokeMethod<void>(this->object, "repaint", "(J)V", arg0)); }

    void repaint() { (*javaClass->invokeMethod<void>(this->object, "repaint", "()V", )); }

    void repaint(long arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "repaint", "(JIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void repaint(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "repaint", "(IIII)V", arg0, arg1, arg2, arg3)); }

    Font getFont_NoClientCode() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont_NoClientCode", "()Ljava.awt.Font;", )); }

    Point getLocationOnScreen_NoTreeLock() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocationOnScreen_NoTreeLock", "()Ljava.awt.Point;", )); }

    Point location_NoClientCode() { return Point(*javaClass->invokeMethod<jobject>(this->object, "location_NoClientCode", "()Ljava.awt.Point;", )); }

    void reshapeNativePeer(int arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "reshapeNativePeer", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void notifyNewBounds(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "notifyNewBounds", "(ZZ)V", arg0, arg1)); }

    void repaintParentIfNeeded(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "repaintParentIfNeeded", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void revalidateSynchronously() { (*javaClass->invokeMethod<void>(this->object, "revalidateSynchronously", "()V", )); }

    Graphics getGraphics_NoClientCode() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics_NoClientCode", "()Ljava.awt.Graphics;", )); }

    Cursor getCursor_NoClientCode() { return Cursor(*javaClass->invokeMethod<jobject>(this->object, "getCursor_NoClientCode", "()Ljava.awt.Cursor;", )); }

    VolatileImage createVolatileImage(int arg0, int arg1) { return VolatileImage(*javaClass->invokeMethod<jobject>(this->object, "createVolatileImage", "(II)Ljava.awt.image.VolatileImage;", arg0, arg1)); }

    VolatileImage createVolatileImage(int arg0, int arg1, ImageCapabilities arg2) { return VolatileImage(*javaClass->invokeMethod<jobject>(this->object, "createVolatileImage", "(IILjava.awt.ImageCapabilities;)Ljava.awt.image.VolatileImage;", arg0, arg1, arg2)); }

    bool prepareImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "prepareImage", "(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)Z", arg0, arg1, arg2, arg3)); }

    bool prepareImage(Image arg0, ImageObserver arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "prepareImage", "(Ljava.awt.Image;Ljava.awt.image.ImageObserver;)Z", arg0, arg1)); }

    int checkImage(Image arg0, ImageObserver arg1) { return int(*javaClass->invokeMethod<int>(this->object, "checkImage", "(Ljava.awt.Image;Ljava.awt.image.ImageObserver;)I", arg0, arg1)); }

    int checkImage(Image arg0, int arg1, int arg2, ImageObserver arg3) { return int(*javaClass->invokeMethod<int>(this->object, "checkImage", "(Ljava.awt.Image;IILjava.awt.image.ImageObserver;)I", arg0, arg1, arg2, arg3)); }

    Image getBackBuffer() { return Image(*javaClass->invokeMethod<jobject>(this->object, "getBackBuffer", "()Ljava.awt.Image;", )); }

    bool eventTypeEnabled(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventTypeEnabled", "(I)Z", arg0)); }

    void processKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    bool areInputMethodsEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "areInputMethodsEnabled", "()Z", )); }

    void autoProcessMouseWheel(MouseWheelEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "autoProcessMouseWheel", "(Ljava.awt.event.MouseWheelEvent;)V", arg0)); }

    static bool isCoalesceEventsOverriden(Class arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isCoalesceEventsOverriden", "(Ljava.lang.Class;)Z", arg0)); }

    AWTEvent coalesceEvents(AWTEvent arg0, AWTEvent arg1) { return AWTEvent(*javaClass->invokeMethod<jobject>(this->object, "coalesceEvents", "(Ljava.awt.AWTEvent;Ljava.awt.AWTEvent;)Ljava.awt.AWTEvent;", arg0, arg1)); }

    void processFocusEvent(FocusEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processFocusEvent", "(Ljava.awt.event.FocusEvent;)V", arg0)); }

    void processMouseEvent(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void processMouseMotionEvent(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMouseMotionEvent", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void processMouseWheelEvent(MouseWheelEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMouseWheelEvent", "(Ljava.awt.event.MouseWheelEvent;)V", arg0)); }

    void processComponentEvent(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processComponentEvent", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void processInputMethodEvent(InputMethodEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processInputMethodEvent", "(Ljava.awt.event.InputMethodEvent;)V", arg0)); }

    void processHierarchyEvent(HierarchyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processHierarchyEvent", "(Ljava.awt.event.HierarchyEvent;)V", arg0)); }

    void processHierarchyBoundsEvent(HierarchyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processHierarchyBoundsEvent", "(Ljava.awt.event.HierarchyEvent;)V", arg0)); }

    bool mouseEnter(Event arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mouseEnter", "(Ljava.awt.Event;II)Z", arg0, arg1, arg2)); }

    bool mouseExit(Event arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mouseExit", "(Ljava.awt.Event;II)Z", arg0, arg1, arg2)); }

    bool mouseMove(Event arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mouseMove", "(Ljava.awt.Event;II)Z", arg0, arg1, arg2)); }

    bool mouseDown(Event arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mouseDown", "(Ljava.awt.Event;II)Z", arg0, arg1, arg2)); }

    bool mouseDrag(Event arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mouseDrag", "(Ljava.awt.Event;II)Z", arg0, arg1, arg2)); }

    bool mouseUp(Event arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mouseUp", "(Ljava.awt.Event;II)Z", arg0, arg1, arg2)); }

    bool keyDown(Event arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "keyDown", "(Ljava.awt.Event;I)Z", arg0, arg1)); }

    bool keyUp(Event arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "keyUp", "(Ljava.awt.Event;I)Z", arg0, arg1)); }

    bool gotFocus(Event arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "gotFocus", "(Ljava.awt.Event;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool lostFocus(Event arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "lostFocus", "(Ljava.awt.Event;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool isFocusTraversable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusTraversable", "()Z", )); }

    bool requestFocusHelper(bool arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusHelper", "(ZZ)Z", arg0, arg1)); }

    bool requestFocusHelper(bool arg0, bool arg1, FocusEvent_Cause arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusHelper", "(ZZLjava.awt.event.FocusEvent$Cause;)Z", arg0, arg1, arg2)); }

    bool isRequestFocusAccepted(bool arg0, bool arg1, FocusEvent_Cause arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRequestFocusAccepted", "(ZZLjava.awt.event.FocusEvent$Cause;)Z", arg0, arg1, arg2)); }

    void nextFocus() { (*javaClass->invokeMethod<void>(this->object, "nextFocus", "()V", )); }

    Component getNextFocusCandidate() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getNextFocusCandidate", "()Ljava.awt.Component;", )); }

    bool requestFocusInWindow(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusInWindow", "(Z)Z", arg0)); }

    bool requestFocusInWindow(bool arg0, FocusEvent_Cause arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusInWindow", "(ZLjava.awt.event.FocusEvent$Cause;)Z", arg0, arg1)); }

    bool requestFocusInWindow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusInWindow", "()Z", )); }

    bool requestFocusInWindow(FocusEvent_Cause arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusInWindow", "(Ljava.awt.event.FocusEvent$Cause;)Z", arg0)); }

    bool hasFocus() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasFocus", "()Z", )); }

    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    void removePropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    void doSwingSerialization() { (*javaClass->invokeMethod<void>(this->object, "doSwingSerialization", "()V", )); }

    void addComponentListener(ComponentListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addComponentListener", "(Ljava.awt.event.ComponentListener;)V", arg0)); }

    void addFocusListener(FocusListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addFocusListener", "(Ljava.awt.event.FocusListener;)V", arg0)); }

    void addKeyListener(KeyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addKeyListener", "(Ljava.awt.event.KeyListener;)V", arg0)); }

    void addMouseListener(MouseListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addMouseListener", "(Ljava.awt.event.MouseListener;)V", arg0)); }

    void addMouseMotionListener(MouseMotionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addMouseMotionListener", "(Ljava.awt.event.MouseMotionListener;)V", arg0)); }

    void addInputMethodListener(InputMethodListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addInputMethodListener", "(Ljava.awt.event.InputMethodListener;)V", arg0)); }

    void addHierarchyListener(HierarchyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addHierarchyListener", "(Ljava.awt.event.HierarchyListener;)V", arg0)); }

    void addHierarchyBoundsListener(HierarchyBoundsListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addHierarchyBoundsListener", "(Ljava.awt.event.HierarchyBoundsListener;)V", arg0)); }

    void addMouseWheelListener(MouseWheelListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addMouseWheelListener", "(Ljava.awt.event.MouseWheelListener;)V", arg0)); }

    void setComponentOrientation(ComponentOrientation arg0) { (*javaClass->invokeMethod<void>(this->object, "setComponentOrientation", "(Ljava.awt.ComponentOrientation;)V", arg0)); }

    int getAccessibleIndexInParent() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleIndexInParent", "()I", )); }

    bool areBoundsValid() { return bool(*javaClass->invokeMethod<boolean>(this->object, "areBoundsValid", "()Z", )); }

    Region getAppliedShape() { return Region(*javaClass->invokeMethod<jobject>(this->object, "getAppliedShape", "()Lsun.java2d.pipe.Region;", )); }

    int getSiblingIndexAbove() { return int(*javaClass->invokeMethod<int>(this->object, "getSiblingIndexAbove", "()I", )); }

    Region calculateCurrentShape() { return Region(*javaClass->invokeMethod<jobject>(this->object, "calculateCurrentShape", "()Lsun.java2d.pipe.Region;", )); }

    int getSiblingIndexBelow() { return int(*javaClass->invokeMethod<int>(this->object, "getSiblingIndexBelow", "()I", )); }

    void applyCurrentShapeBelowMe() { (*javaClass->invokeMethod<void>(this->object, "applyCurrentShapeBelowMe", "()V", )); }

    ComponentPeer getHWPeerAboveMe() { return ComponentPeer(*javaClass->invokeMethod<jobject>(this->object, "getHWPeerAboveMe", "()Ljava.awt.peer.ComponentPeer;", )); }

    AccessControlContext getAccessControlContext() { return AccessControlContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessControlContext", "()Ljava.security.AccessControlContext;", )); }

    void setDropTarget(DropTarget arg0) { (*javaClass->invokeMethod<void>(this->object, "setDropTarget", "(Ljava.awt.dnd.DropTarget;)V", arg0)); }

    DropTarget getDropTarget() { return DropTarget(*javaClass->invokeMethod<jobject>(this->object, "getDropTarget", "()Ljava.awt.dnd.DropTarget;", )); }

    bool isDoubleBuffered() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDoubleBuffered", "()Z", )); }

    void enableInputMethods(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "enableInputMethods", "(Z)V", arg0)); }

    bool isForegroundSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isForegroundSet", "()Z", )); }

    bool isBackgroundSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBackgroundSet", "()Z", )); }

    bool isFontSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFontSet", "()Z", )); }

    void setPreferredSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setPreferredSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void setMaximumSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaximumSize", "(Ljava.awt.Dimension;)V", arg0)); }

    int getBaseline(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getBaseline", "(II)I", arg0, arg1)); }

    Component_BaselineResizeBehavior getBaselineResizeBehavior() { return Component_BaselineResizeBehavior(*javaClass->invokeMethod<jobject>(this->object, "getBaselineResizeBehavior", "()Ljava.awt.Component$BaselineResizeBehavior;", )); }

    void revalidate() { (*javaClass->invokeMethod<void>(this->object, "revalidate", "()V", )); }

    Cursor getCursor() { return Cursor(*javaClass->invokeMethod<jobject>(this->object, "getCursor", "()Ljava.awt.Cursor;", )); }

    bool isCursorSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCursorSet", "()Z", )); }

    void paintAll(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintAll", "(Ljava.awt.Graphics;)V", arg0)); }

    void printAll(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "printAll", "(Ljava.awt.Graphics;)V", arg0)); }

    Insets getInsets_NoClientCode() { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getInsets_NoClientCode", "()Ljava.awt.Insets;", )); }

    void setIgnoreRepaint(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setIgnoreRepaint", "(Z)V", arg0)); }

    bool getIgnoreRepaint() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIgnoreRepaint", "()Z", )); }

    void removeComponentListener(ComponentListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeComponentListener", "(Ljava.awt.event.ComponentListener;)V", arg0)); }

    void removeFocusListener(FocusListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeFocusListener", "(Ljava.awt.event.FocusListener;)V", arg0)); }

    void removeHierarchyListener(HierarchyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeHierarchyListener", "(Ljava.awt.event.HierarchyListener;)V", arg0)); }

    void removeHierarchyBoundsListener(HierarchyBoundsListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeHierarchyBoundsListener", "(Ljava.awt.event.HierarchyBoundsListener;)V", arg0)); }

    void removeKeyListener(KeyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeKeyListener", "(Ljava.awt.event.KeyListener;)V", arg0)); }

    void removeMouseListener(MouseListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeMouseListener", "(Ljava.awt.event.MouseListener;)V", arg0)); }

    void removeMouseMotionListener(MouseMotionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeMouseMotionListener", "(Ljava.awt.event.MouseMotionListener;)V", arg0)); }

    void removeMouseWheelListener(MouseWheelListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeMouseWheelListener", "(Ljava.awt.event.MouseWheelListener;)V", arg0)); }

    void removeInputMethodListener(InputMethodListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeInputMethodListener", "(Ljava.awt.event.InputMethodListener;)V", arg0)); }

    InputMethodRequests getInputMethodRequests() { return InputMethodRequests(*javaClass->invokeMethod<jobject>(this->object, "getInputMethodRequests", "()Ljava.awt.im.InputMethodRequests;", )); }

    void disableEvents(long arg0) { (*javaClass->invokeMethod<void>(this->object, "disableEvents", "(J)V", arg0)); }

    bool isCoalescingEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCoalescingEnabled", "()Z", )); }

    void setFocusable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setFocusable", "(Z)V", arg0)); }

    void setFocusTraversalKeysEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setFocusTraversalKeysEnabled", "(Z)V", arg0)); }

    bool getFocusTraversalKeysEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getFocusTraversalKeysEnabled", "()Z", )); }

    static void setRequestFocusController(RequestFocusController arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setRequestFocusController", "(Lsun.awt.RequestFocusController;)V", arg0)); }

    void transferFocusUpCycle() { (*javaClass->invokeMethod<void>(this->object, "transferFocusUpCycle", "()V", )); }

    bool isAutoFocusTransferOnDisposal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAutoFocusTransferOnDisposal", "()Z", )); }

    ComponentOrientation getComponentOrientation() { return ComponentOrientation(*javaClass->invokeMethod<jobject>(this->object, "getComponentOrientation", "()Ljava.awt.ComponentOrientation;", )); }

    AccessibleStateSet getAccessibleStateSet() { return AccessibleStateSet(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleStateSet", "()Ljavax.accessibility.AccessibleStateSet;", )); }

    void setMixingCutoutShape(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "setMixingCutoutShape", "(Ljava.awt.Shape;)V", arg0)); }

    Graphics getGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava.awt.Graphics;", )); }

    Image createImage(ImageProducer arg0) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "(Ljava.awt.image.ImageProducer;)Ljava.awt.Image;", arg0)); }

    Image createImage(int arg0, int arg1) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "(II)Ljava.awt.Image;", arg0, arg1)); }

    void setBounds(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void setBounds(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(Ljava.awt.Rectangle;)V", arg0)); }

    void reshape(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "reshape", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void setLocation(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }

    void setLocation(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(Ljava.awt.Point;)V", arg0)); }

    bool inside(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "inside", "(II)Z", arg0, arg1)); }

    bool imageUpdate(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "imageUpdate", "(Ljava.awt.Image;IIIII)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    Color getBackground() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getBackground", "()Ljava.awt.Color;", )); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

    FontMetrics getFontMetrics(Font arg0) { return FontMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava.awt.Font;)Ljava.awt.FontMetrics;", arg0)); }

    void setFont(Font arg0) { (*javaClass->invokeMethod<void>(this->object, "setFont", "(Ljava.awt.Font;)V", arg0)); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    Toolkit getToolkit() { return Toolkit(*javaClass->invokeMethod<jobject>(this->object, "getToolkit", "()Ljava.awt.Toolkit;", )); }

    void firePropertyChange(String arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;DD)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;FF)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, long arg1, long arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;JJ)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, char arg1, char arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;CC)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, short arg1, short arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;SS)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, byte arg1, byte arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;BB)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, bool arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;ZZ)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    Object getTreeLock() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getTreeLock", "()Ljava.lang.Object;", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    ComponentFactory getComponentFactory() { return ComponentFactory(*javaClass->invokeMethod<jobject>(this->object, "getComponentFactory", "()Lsun.awt.ComponentFactory;", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    Dimension getPreferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "()Ljava.awt.Dimension;", )); }

    void setMinimumSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinimumSize", "(Ljava.awt.Dimension;)V", arg0)); }

    bool isMinimumSizeSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMinimumSizeSet", "()Z", )); }

    Dimension getMinimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "()Ljava.awt.Dimension;", )); }

    void setBoundsOp(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBoundsOp", "(I)V", arg0)); }

    void show(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "show", "(Z)V", arg0)); }

    void show() { (*javaClass->invokeMethod<void>(this->object, "show", "()V", )); }

    bool isShowing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isShowing", "()Z", )); }

    bool postEvent(Event arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "postEvent", "(Ljava.awt.Event;)Z", arg0)); }

    void hide() { (*javaClass->invokeMethod<void>(this->object, "hide", "()V", )); }

    bool isDisplayable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDisplayable", "()Z", )); }

    void setCursor(Cursor arg0) { (*javaClass->invokeMethod<void>(this->object, "setCursor", "(Ljava.awt.Cursor;)V", arg0)); }

    bool isVisible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVisible", "()Z", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void requestFocus(FocusEvent_Cause arg0) { (*javaClass->invokeMethod<void>(this->object, "requestFocus", "(Ljava.awt.event.FocusEvent$Cause;)V", arg0)); }

    bool requestFocus(bool arg0, FocusEvent_Cause arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocus", "(ZLjava.awt.event.FocusEvent$Cause;)Z", arg0, arg1)); }

    void requestFocus() { (*javaClass->invokeMethod<void>(this->object, "requestFocus", "()V", )); }

    bool requestFocus(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocus", "(Z)Z", arg0)); }

    void addPropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    void dispatchEventImpl(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava.awt.AWTEvent;)V", arg0)); }

    bool handleEvent(Event arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleEvent", "(Ljava.awt.Event;)Z", arg0)); }

    void applyComponentOrientation(ComponentOrientation arg0) { (*javaClass->invokeMethod<void>(this->object, "applyComponentOrientation", "(Ljava.awt.ComponentOrientation;)V", arg0)); }

    Object getObjectLock() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getObjectLock", "()Ljava.lang.Object;", )); }

    GraphicsConfiguration getGraphicsConfiguration_NoClientCode() { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getGraphicsConfiguration_NoClientCode", "()Ljava.awt.GraphicsConfiguration;", )); }

    Window getContainingWindow() { return Window(*javaClass->invokeMethod<jobject>(this->object, "getContainingWindow", "()Ljava.awt.Window;", )); }

    Point getLocationOnScreen() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocationOnScreen", "()Ljava.awt.Point;", )); }

    void createBufferStrategy(int arg0, BufferCapabilities arg1) { (*javaClass->invokeMethod<void>(this->object, "createBufferStrategy", "(ILjava.awt.BufferCapabilities;)V", arg0, arg1)); }

    void createBufferStrategy(int arg0) { (*javaClass->invokeMethod<void>(this->object, "createBufferStrategy", "(I)V", arg0)); }

    BufferStrategy getBufferStrategy() { return BufferStrategy(*javaClass->invokeMethod<jobject>(this->object, "getBufferStrategy", "()Ljava.awt.image.BufferStrategy;", )); }

    bool canBeFocusOwner() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBeFocusOwner", "()Z", )); }

    int getBoundsOp() { return int(*javaClass->invokeMethod<int>(this->object, "getBoundsOp", "()I", )); }

    void paint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paint", "(Ljava.awt.Graphics;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    Dimension minimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "minimumSize", "()Ljava.awt.Dimension;", )); }

    void clearMostRecentFocusOwnerOnHide() { (*javaClass->invokeMethod<void>(this->object, "clearMostRecentFocusOwnerOnHide", "()V", )); }

    void adjustListeningChildrenOnParent(long arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "adjustListeningChildrenOnParent", "(JI)V", arg0, arg1)); }

    InputContext getInputContext() { return InputContext(*javaClass->invokeMethod<jobject>(this->object, "getInputContext", "()Ljava.awt.im.InputContext;", )); }

    Set getFocusTraversalKeys(int arg0) { return Set(*javaClass->invokeMethod<jobject>(this->object, "getFocusTraversalKeys", "(I)Ljava.util.Set;", arg0)); }

    bool isFocusCycleRoot(Container arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusCycleRoot", "(Ljava.awt.Container;)Z", arg0)); }

    Container getFocusCycleRootAncestor() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getFocusCycleRootAncestor", "()Ljava.awt.Container;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    bool dispatchMouseWheelToAncestor(MouseWheelEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "dispatchMouseWheelToAncestor", "(Ljava.awt.event.MouseWheelEvent;)Z", arg0)); }

    bool isRecursivelyVisible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRecursivelyVisible", "()Z", )); }

    Container getContainer() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getContainer", "()Ljava.awt.Container;", )); }

    void applyCompoundShape(Region arg0) { (*javaClass->invokeMethod<void>(this->object, "applyCompoundShape", "(Lsun.java2d.pipe.Region;)V", arg0)); }

    void applyCurrentShape() { (*javaClass->invokeMethod<void>(this->object, "applyCurrentShape", "()V", )); }

    void mixOnReshaping() { (*javaClass->invokeMethod<void>(this->object, "mixOnReshaping", "()V", )); }

    Point getLocationOnWindow() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocationOnWindow", "()Ljava.awt.Point;", )); }

    void updateZOrder() { (*javaClass->invokeMethod<void>(this->object, "updateZOrder", "()V", )); }

    void checkTreeLock() { (*javaClass->invokeMethod<void>(this->object, "checkTreeLock", "()V", )); }

    void checkGD(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkGD", "(Ljava.lang.String;)V", arg0)); }

    int numListening(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "numListening", "(J)I", arg0)); }

    int countHierarchyMembers() { return int(*javaClass->invokeMethod<int>(this->object, "countHierarchyMembers", "()I", )); }

    void invalidateIfValid() { (*javaClass->invokeMethod<void>(this->object, "invalidateIfValid", "()V", )); }

    void dispatchEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    int createHierarchyEvents(int arg0, Component arg1, Container arg2, long arg3, bool arg4) { return int(*javaClass->invokeMethod<int>(this->object, "createHierarchyEvents", "(ILjava.awt.Component;Ljava.awt.Container;JZ)I", arg0, arg1, arg2, arg3, arg4)); }

    void updateCursorImmediately() { (*javaClass->invokeMethod<void>(this->object, "updateCursorImmediately", "()V", )); }

    bool isFocusable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusable", "()Z", )); }

    Container getNativeContainer() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getNativeContainer", "()Ljava.awt.Container;", )); }

    bool isLightweight() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLightweight", "()Z", )); }

    void mixOnZOrderChanging(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "mixOnZOrderChanging", "(II)V", arg0, arg1)); }

    void move(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "move", "(II)V", arg0, arg1)); }

    bool isEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnabled", "()Z", )); }

};


/**
 * Classpath: java.awt.MenuContainer
 * Package name: java.awt
 */
class MenuContainer : public JavaObject {
protected:
    const inline static char *className = "java.awt.MenuContainer";
public:
    STATICINITIALIZE;

    MenuContainer(jobject object) : JavaObject(object) {}

    void remove(MenuComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.awt.MenuComponent;)V", arg0)); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

    bool postEvent(Event arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "postEvent", "(Ljava.awt.Event;)Z", arg0)); }

};


/**
 * Classpath: java.awt.MenuComponent
 * Package name: java.awt
 */
class MenuComponent : public Object {
protected:
    const inline static char *className = "java.awt.MenuComponent";
public:
    STATICINITIALIZE;

    MenuComponent(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    MenuContainer getParent() { return MenuContainer(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.awt.MenuContainer;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void setName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setName", "(Ljava.lang.String;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    MenuContainer getParent_NoClientCode() { return MenuContainer(*javaClass->invokeMethod<jobject>(this->object, "getParent_NoClientCode", "()Ljava.awt.MenuContainer;", )); }

    Font getFont_NoClientCode() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont_NoClientCode", "()Ljava.awt.Font;", )); }

    int getAccessibleIndexInParent() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleIndexInParent", "()I", )); }

    AccessControlContext getAccessControlContext() { return AccessControlContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessControlContext", "()Ljava.security.AccessControlContext;", )); }

    AccessibleStateSet getAccessibleStateSet() { return AccessibleStateSet(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleStateSet", "()Ljavax.accessibility.AccessibleStateSet;", )); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

    void setFont(Font arg0) { (*javaClass->invokeMethod<void>(this->object, "setFont", "(Ljava.awt.Font;)V", arg0)); }

    Object getTreeLock() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getTreeLock", "()Ljava.lang.Object;", )); }

    ComponentFactory getComponentFactory() { return ComponentFactory(*javaClass->invokeMethod<jobject>(this->object, "getComponentFactory", "()Lsun.awt.ComponentFactory;", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    bool postEvent(Event arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "postEvent", "(Ljava.awt.Event;)Z", arg0)); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void dispatchEventImpl(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava.awt.AWTEvent;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void dispatchEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    int getAccessibleChildIndex(MenuComponent arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleChildIndex", "(Ljava.awt.MenuComponent;)I", arg0)); }

};


/**
 * Classpath: java.security.AccessControlContext
 * Package name: java.security
 */
class AccessControlContext : public Object {
protected:
    const inline static char *className = "java.security.AccessControlContext";
public:
    STATICINITIALIZE;

    AccessControlContext(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void checkPermission(Permission arg0) { (*javaClass->invokeMethod<void>(this->object, "checkPermission", "(Ljava.security.Permission;)V", arg0)); }

    bool isAuthorized() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAuthorized", "()Z", )); }

    bool isPrivileged() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPrivileged", "()Z", )); }

    DomainCombiner getCombiner() { return DomainCombiner(*javaClass->invokeMethod<jobject>(this->object, "getCombiner", "()Ljava.security.DomainCombiner;", )); }

    static Debug getDebug() { return Debug(*javaClass->invokeStaticMethod<jobject>(this->object, "getDebug", "()Lsun.security.util.Debug;", )); }

    void checkPermission2(Permission arg0) { (*javaClass->invokeMethod<void>(this->object, "checkPermission2", "(Ljava.security.Permission;)V", arg0)); }

    void calculateFields(AccessControlContext arg0, AccessControlContext arg1, Permission_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "calculateFields", "(Ljava.security.AccessControlContext;Ljava.security.AccessControlContext;[Ljava.security.Permission;)V", arg0, arg1, arg2)); }

    static bool containsAllPDs(ProtectionDomain_interface arg0, ProtectionDomain_interface arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "containsAllPDs", "([Ljava.security.ProtectionDomain;[Ljava.security.ProtectionDomain;)Z", arg0, arg1)); }

    bool equalContext(AccessControlContext arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equalContext", "(Ljava.security.AccessControlContext;)Z", arg0)); }

    bool equalLimitedContext(AccessControlContext arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equalLimitedContext", "(Ljava.security.AccessControlContext;)Z", arg0)); }

    bool equalPDs(ProtectionDomain_interface arg0, ProtectionDomain_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equalPDs", "([Ljava.security.ProtectionDomain;[Ljava.security.ProtectionDomain;)Z", arg0, arg1)); }

    bool containsAllLimits(AccessControlContext arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAllLimits", "(Ljava.security.AccessControlContext;)Z", arg0)); }

    static AccessControlContext getNextPC(AccessControlContext arg0) { return AccessControlContext(*javaClass->invokeStaticMethod<jobject>(this->object, "getNextPC", "(Ljava.security.AccessControlContext;)Ljava.security.AccessControlContext;", arg0)); }

    DomainCombiner getAssignedCombiner() { return DomainCombiner(*javaClass->invokeMethod<jobject>(this->object, "getAssignedCombiner", "()Ljava.security.DomainCombiner;", )); }

    DomainCombiner getDomainCombiner() { return DomainCombiner(*javaClass->invokeMethod<jobject>(this->object, "getDomainCombiner", "()Ljava.security.DomainCombiner;", )); }

    AccessControlContext optimize() { return AccessControlContext(*javaClass->invokeMethod<jobject>(this->object, "optimize", "()Ljava.security.AccessControlContext;", )); }

};


/**
 * Classpath: java.security.DomainCombiner
 * Package name: java.security
 */
class DomainCombiner : public JavaObject {
protected:
    const inline static char *className = "java.security.DomainCombiner";
public:
    STATICINITIALIZE;

    DomainCombiner(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.security.util.Debug
 * Package name: sun.security.util
 */
class Debug : public Object {
protected:
    const inline static char *className = "sun.security.util.Debug";
public:
    STATICINITIALIZE;

    Debug(jobject object) : JavaObject(object) {}

    static void println(String arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "println", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    void println(Object arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "println", "(Ljava.lang.Object;Ljava.lang.String;)V", arg0, arg1)); }

    void println(String arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Ljava.lang.String;)V", arg0)); }

    void println() { (*javaClass->invokeMethod<void>(this->object, "println", "()V", )); }

    static String toString(arr_B arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "([B)Ljava.lang.String;", arg0)); }

    static String toHexString(BigInteger arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toHexString", "(Ljava.math.BigInteger;)Ljava.lang.String;", arg0)); }

    static Debug getInstance(String arg0) { return Debug(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.lang.String;)Lsun.security.util.Debug;", arg0)); }

    static Debug getInstance(String arg0, String arg1) { return Debug(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.lang.String;Ljava.lang.String;)Lsun.security.util.Debug;", arg0, arg1)); }

    static bool isOn(String arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isOn", "(Ljava.lang.String;)Z", arg0)); }

    static String marshal(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "marshal", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static void Help() { (*javaClass->invokeStaticMethod<void>(this->object, "Help", "()V", )); }

    static bool isVerbose() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isVerbose", "()Z", )); }

    PrintStream getPrintStream() { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "getPrintStream", "()Ljava.io.PrintStream;", )); }

};


/**
 * Classpath: [Ljava.security.Permission;
 */
class Permission_interface : public Object {
protected:
    const inline static char *className = "[Ljava.security.Permission;";
public:
    STATICINITIALIZE;

    Permission_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: [Ljava.security.ProtectionDomain;
 */
class ProtectionDomain_interface : public Object {
protected:
    const inline static char *className = "[Ljava.security.ProtectionDomain;";
public:
    STATICINITIALIZE;

    ProtectionDomain_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.accessibility.AccessibleStateSet
 * Package name: javax.accessibility
 */
class AccessibleStateSet : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleStateSet";
public:
    STATICINITIALIZE;

    AccessibleStateSet(jobject object) : JavaObject(object) {}

    bool add(AccessibleState arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljavax.accessibility.AccessibleState;)Z", arg0)); }

    bool remove(AccessibleState arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljavax.accessibility.AccessibleState;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool contains(AccessibleState arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljavax.accessibility.AccessibleState;)Z", arg0)); }

    void addAll(AccessibleState_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "addAll", "([Ljavax.accessibility.AccessibleState;)V", arg0)); }

};


/**
 * Classpath: javax.accessibility.AccessibleBundle
 * Package name: javax.accessibility
 */
class AccessibleBundle : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleBundle";
public:
    STATICINITIALIZE;

    AccessibleBundle(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String toDisplayString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toDisplayString", "()Ljava.lang.String;", )); }

    String toDisplayString(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toDisplayString", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String toDisplayString(String arg0, Locale arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "toDisplayString", "(Ljava.lang.String;Ljava.util.Locale;)Ljava.lang.String;", arg0, arg1)); }

};


/**
 * Classpath: [Ljavax.accessibility.AccessibleState;
 */
class AccessibleState_interface : public Object {
protected:
    const inline static char *className = "[Ljavax.accessibility.AccessibleState;";
public:
    STATICINITIALIZE;

    AccessibleState_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.awt.ComponentFactory
 * Package name: sun.awt
 */
class ComponentFactory : public JavaObject {
protected:
    const inline static char *className = "sun.awt.ComponentFactory";
public:
    STATICINITIALIZE;

    ComponentFactory(jobject object) : JavaObject(object) {}

    FramePeer createFrame(Frame arg0) { return FramePeer(*javaClass->invokeMethod<jobject>(this->object, "createFrame", "(Ljava.awt.Frame;)Ljava.awt.peer.FramePeer;", arg0)); }

    LabelPeer createLabel(Label arg0) { return LabelPeer(*javaClass->invokeMethod<jobject>(this->object, "createLabel", "(Ljava.awt.Label;)Ljava.awt.peer.LabelPeer;", arg0)); }

    FontPeer getFontPeer(String arg0, int arg1) { return FontPeer(*javaClass->invokeMethod<jobject>(this->object, "getFontPeer", "(Ljava.lang.String;I)Ljava.awt.peer.FontPeer;", arg0, arg1)); }

    DialogPeer createDialog(Dialog arg0) { return DialogPeer(*javaClass->invokeMethod<jobject>(this->object, "createDialog", "(Ljava.awt.Dialog;)Ljava.awt.peer.DialogPeer;", arg0)); }

    MouseInfoPeer getMouseInfoPeer() { return MouseInfoPeer(*javaClass->invokeMethod<jobject>(this->object, "getMouseInfoPeer", "()Ljava.awt.peer.MouseInfoPeer;", )); }

    LightweightPeer createComponent(Component arg0) { return LightweightPeer(*javaClass->invokeMethod<jobject>(this->object, "createComponent", "(Ljava.awt.Component;)Ljava.awt.peer.LightweightPeer;", arg0)); }

    WindowPeer createWindow(Window arg0) { return WindowPeer(*javaClass->invokeMethod<jobject>(this->object, "createWindow", "(Ljava.awt.Window;)Ljava.awt.peer.WindowPeer;", arg0)); }

    MenuBarPeer createMenuBar(MenuBar arg0) { return MenuBarPeer(*javaClass->invokeMethod<jobject>(this->object, "createMenuBar", "(Ljava.awt.MenuBar;)Ljava.awt.peer.MenuBarPeer;", arg0)); }

    MenuPeer createMenu(Menu arg0) { return MenuPeer(*javaClass->invokeMethod<jobject>(this->object, "createMenu", "(Ljava.awt.Menu;)Ljava.awt.peer.MenuPeer;", arg0)); }

    MenuItemPeer createMenuItem(MenuItem arg0) { return MenuItemPeer(*javaClass->invokeMethod<jobject>(this->object, "createMenuItem", "(Ljava.awt.MenuItem;)Ljava.awt.peer.MenuItemPeer;", arg0)); }

    PopupMenuPeer createPopupMenu(PopupMenu arg0) { return PopupMenuPeer(*javaClass->invokeMethod<jobject>(this->object, "createPopupMenu", "(Ljava.awt.PopupMenu;)Ljava.awt.peer.PopupMenuPeer;", arg0)); }

    DesktopPeer createDesktopPeer(Desktop arg0) { return DesktopPeer(*javaClass->invokeMethod<jobject>(this->object, "createDesktopPeer", "(Ljava.awt.Desktop;)Ljava.awt.peer.DesktopPeer;", arg0)); }

    TaskbarPeer createTaskbarPeer(Taskbar arg0) { return TaskbarPeer(*javaClass->invokeMethod<jobject>(this->object, "createTaskbarPeer", "(Ljava.awt.Taskbar;)Ljava.awt.peer.TaskbarPeer;", arg0)); }

    ButtonPeer createButton(Button arg0) { return ButtonPeer(*javaClass->invokeMethod<jobject>(this->object, "createButton", "(Ljava.awt.Button;)Ljava.awt.peer.ButtonPeer;", arg0)); }

    TextFieldPeer createTextField(TextField arg0) { return TextFieldPeer(*javaClass->invokeMethod<jobject>(this->object, "createTextField", "(Ljava.awt.TextField;)Ljava.awt.peer.TextFieldPeer;", arg0)); }

    ListPeer createList(List arg0) { return ListPeer(*javaClass->invokeMethod<jobject>(this->object, "createList", "(Ljava.awt.List;)Ljava.awt.peer.ListPeer;", arg0)); }

    CheckboxPeer createCheckbox(Checkbox arg0) { return CheckboxPeer(*javaClass->invokeMethod<jobject>(this->object, "createCheckbox", "(Ljava.awt.Checkbox;)Ljava.awt.peer.CheckboxPeer;", arg0)); }

    ScrollbarPeer createScrollbar(Scrollbar arg0) { return ScrollbarPeer(*javaClass->invokeMethod<jobject>(this->object, "createScrollbar", "(Ljava.awt.Scrollbar;)Ljava.awt.peer.ScrollbarPeer;", arg0)); }

    ScrollPanePeer createScrollPane(ScrollPane arg0) { return ScrollPanePeer(*javaClass->invokeMethod<jobject>(this->object, "createScrollPane", "(Ljava.awt.ScrollPane;)Ljava.awt.peer.ScrollPanePeer;", arg0)); }

    TextAreaPeer createTextArea(TextArea arg0) { return TextAreaPeer(*javaClass->invokeMethod<jobject>(this->object, "createTextArea", "(Ljava.awt.TextArea;)Ljava.awt.peer.TextAreaPeer;", arg0)); }

    ChoicePeer createChoice(Choice arg0) { return ChoicePeer(*javaClass->invokeMethod<jobject>(this->object, "createChoice", "(Ljava.awt.Choice;)Ljava.awt.peer.ChoicePeer;", arg0)); }

    CanvasPeer createCanvas(Canvas arg0) { return CanvasPeer(*javaClass->invokeMethod<jobject>(this->object, "createCanvas", "(Ljava.awt.Canvas;)Ljava.awt.peer.CanvasPeer;", arg0)); }

    PanelPeer createPanel(Panel arg0) { return PanelPeer(*javaClass->invokeMethod<jobject>(this->object, "createPanel", "(Ljava.awt.Panel;)Ljava.awt.peer.PanelPeer;", arg0)); }

    FileDialogPeer createFileDialog(FileDialog arg0) { return FileDialogPeer(*javaClass->invokeMethod<jobject>(this->object, "createFileDialog", "(Ljava.awt.FileDialog;)Ljava.awt.peer.FileDialogPeer;", arg0)); }

    CheckboxMenuItemPeer createCheckboxMenuItem(CheckboxMenuItem arg0) { return CheckboxMenuItemPeer(*javaClass->invokeMethod<jobject>(this->object, "createCheckboxMenuItem", "(Ljava.awt.CheckboxMenuItem;)Ljava.awt.peer.CheckboxMenuItemPeer;", arg0)); }

    DragSourceContextPeer createDragSourceContextPeer(DragGestureEvent arg0) { return DragSourceContextPeer(*javaClass->invokeMethod<jobject>(this->object, "createDragSourceContextPeer", "(Ljava.awt.dnd.DragGestureEvent;)Ljava.awt.dnd.peer.DragSourceContextPeer;", arg0)); }

    RobotPeer createRobot(GraphicsDevice arg0) { return RobotPeer(*javaClass->invokeMethod<jobject>(this->object, "createRobot", "(Ljava.awt.GraphicsDevice;)Ljava.awt.peer.RobotPeer;", arg0)); }

    DataTransferer getDataTransferer() { return DataTransferer(*javaClass->invokeMethod<jobject>(this->object, "getDataTransferer", "()Lsun.awt.datatransfer.DataTransferer;", )); }

};


/**
 * Classpath: java.awt.peer.FramePeer
 * Package name: java.awt.peer
 */
class FramePeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.FramePeer";
public:
    STATICINITIALIZE;

    FramePeer(jobject object) : JavaObject(object) {}

    void setResizable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setResizable", "(Z)V", arg0)); }

    void setTitle(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTitle", "(Ljava.lang.String;)V", arg0)); }

    void setMenuBar(MenuBar arg0) { (*javaClass->invokeMethod<void>(this->object, "setMenuBar", "(Ljava.awt.MenuBar;)V", arg0)); }

    void setMaximizedBounds(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaximizedBounds", "(Ljava.awt.Rectangle;)V", arg0)); }

    void setState(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setState", "(I)V", arg0)); }

    int getState() { return int(*javaClass->invokeMethod<int>(this->object, "getState", "()I", )); }

    void setBoundsPrivate(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setBoundsPrivate", "(IIII)V", arg0, arg1, arg2, arg3)); }

    Rectangle getBoundsPrivate() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBoundsPrivate", "()Ljava.awt.Rectangle;", )); }

    void emulateActivation(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "emulateActivation", "(Z)V", arg0)); }

};


/**
 * Classpath: javax.accessibility.AccessibleContext
 * Package name: javax.accessibility
 */
class AccessibleContext : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleContext";
public:
    STATICINITIALIZE;

    AccessibleContext(jobject object) : JavaObject(object) {}

    String getAccessibleName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleName", "()Ljava.lang.String;", )); }

    void setAccessibleName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleName", "(Ljava.lang.String;)V", arg0)); }

    String getAccessibleDescription() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleDescription", "()Ljava.lang.String;", )); }

    void setAccessibleDescription(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleDescription", "(Ljava.lang.String;)V", arg0)); }

    AccessibleRole getAccessibleRole() { return AccessibleRole(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleRole", "()Ljavax.accessibility.AccessibleRole;", )); }

    void setAccessibleParent(Accessible arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleParent", "(Ljavax.accessibility.Accessible;)V", arg0)); }

    AccessibleAction getAccessibleAction() { return AccessibleAction(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleAction", "()Ljavax.accessibility.AccessibleAction;", )); }

    AccessibleText getAccessibleText() { return AccessibleText(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleText", "()Ljavax.accessibility.AccessibleText;", )); }

    AccessibleEditableText getAccessibleEditableText() { return AccessibleEditableText(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleEditableText", "()Ljavax.accessibility.AccessibleEditableText;", )); }

    AccessibleValue getAccessibleValue() { return AccessibleValue(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleValue", "()Ljavax.accessibility.AccessibleValue;", )); }

    AccessibleRelationSet getAccessibleRelationSet() { return AccessibleRelationSet(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleRelationSet", "()Ljavax.accessibility.AccessibleRelationSet;", )); }

    AccessibleTable getAccessibleTable() { return AccessibleTable(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleTable", "()Ljavax.accessibility.AccessibleTable;", )); }

    int getAccessibleChildrenCount() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleChildrenCount", "()I", )); }

    Accessible getAccessibleChild(int arg0) { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleChild", "(I)Ljavax.accessibility.Accessible;", arg0)); }

    AccessibleComponent getAccessibleComponent() { return AccessibleComponent(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleComponent", "()Ljavax.accessibility.AccessibleComponent;", )); }

    void removePropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    Accessible getAccessibleParent() { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleParent", "()Ljavax.accessibility.Accessible;", )); }

    AccessibleSelection getAccessibleSelection() { return AccessibleSelection(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleSelection", "()Ljavax.accessibility.AccessibleSelection;", )); }

    int getAccessibleIndexInParent() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleIndexInParent", "()I", )); }

    AccessibleStateSet getAccessibleStateSet() { return AccessibleStateSet(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleStateSet", "()Ljavax.accessibility.AccessibleStateSet;", )); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    void firePropertyChange(String arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    void addPropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

};


/**
 * Classpath: javax.accessibility.AccessibleRole
 * Package name: javax.accessibility
 */
class AccessibleRole : public AccessibleBundle {
protected:
    const inline static char *className = "javax.accessibility.AccessibleRole";
public:
    STATICINITIALIZE;

    AccessibleRole(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.accessibility.Accessible
 * Package name: javax.accessibility
 */
class Accessible : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.Accessible";
public:
    STATICINITIALIZE;

    Accessible(jobject object) : JavaObject(object) {}

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

};


/**
 * Classpath: javax.accessibility.AccessibleAction
 * Package name: javax.accessibility
 */
class AccessibleAction : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleAction";
public:
    STATICINITIALIZE;

    AccessibleAction(jobject object) : JavaObject(object) {}

    int getAccessibleActionCount() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleActionCount", "()I", )); }

    String getAccessibleActionDescription(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleActionDescription", "(I)Ljava.lang.String;", arg0)); }

    bool doAccessibleAction(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "doAccessibleAction", "(I)Z", arg0)); }

};


/**
 * Classpath: javax.accessibility.AccessibleText
 * Package name: javax.accessibility
 */
class AccessibleText : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleText";
public:
    STATICINITIALIZE;

    AccessibleText(jobject object) : JavaObject(object) {}

    int getIndexAtPoint(Point arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getIndexAtPoint", "(Ljava.awt.Point;)I", arg0)); }

    Rectangle getCharacterBounds(int arg0) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getCharacterBounds", "(I)Ljava.awt.Rectangle;", arg0)); }

    int getCharCount() { return int(*javaClass->invokeMethod<int>(this->object, "getCharCount", "()I", )); }

    String getAtIndex(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getAtIndex", "(II)Ljava.lang.String;", arg0, arg1)); }

    String getAfterIndex(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getAfterIndex", "(II)Ljava.lang.String;", arg0, arg1)); }

    String getBeforeIndex(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getBeforeIndex", "(II)Ljava.lang.String;", arg0, arg1)); }

    AttributeSet getCharacterAttribute(int arg0) { return AttributeSet(*javaClass->invokeMethod<jobject>(this->object, "getCharacterAttribute", "(I)Ljavax.swing.text.AttributeSet;", arg0)); }

    String getSelectedText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSelectedText", "()Ljava.lang.String;", )); }

    int getSelectionStart() { return int(*javaClass->invokeMethod<int>(this->object, "getSelectionStart", "()I", )); }

    int getSelectionEnd() { return int(*javaClass->invokeMethod<int>(this->object, "getSelectionEnd", "()I", )); }

    int getCaretPosition() { return int(*javaClass->invokeMethod<int>(this->object, "getCaretPosition", "()I", )); }

};


/**
 * Classpath: javax.swing.text.AttributeSet
 * Package name: javax.swing.text
 */
class AttributeSet : public JavaObject {
protected:
    const inline static char *className = "javax.swing.text.AttributeSet";
public:
    STATICINITIALIZE;

    AttributeSet(jobject object) : JavaObject(object) {}

    bool isDefined(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDefined", "(Ljava.lang.Object;)Z", arg0)); }

    int getAttributeCount() { return int(*javaClass->invokeMethod<int>(this->object, "getAttributeCount", "()I", )); }

    bool isEqual(AttributeSet arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEqual", "(Ljavax.swing.text.AttributeSet;)Z", arg0)); }

    AttributeSet copyAttributes() { return AttributeSet(*javaClass->invokeMethod<jobject>(this->object, "copyAttributes", "()Ljavax.swing.text.AttributeSet;", )); }

    Enumeration getAttributeNames() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getAttributeNames", "()Ljava.util.Enumeration;", )); }

    bool containsAttribute(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAttribute", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool containsAttributes(AttributeSet arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsAttributes", "(Ljavax.swing.text.AttributeSet;)Z", arg0)); }

    AttributeSet getResolveParent() { return AttributeSet(*javaClass->invokeMethod<jobject>(this->object, "getResolveParent", "()Ljavax.swing.text.AttributeSet;", )); }

    Object getAttribute(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getAttribute", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: javax.accessibility.AccessibleEditableText
 * Package name: javax.accessibility
 */
class AccessibleEditableText : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleEditableText";
public:
    STATICINITIALIZE;

    AccessibleEditableText(jobject object) : JavaObject(object) {}

    void delete(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "delete", "(II)V", arg0, arg1)); }

    void replaceText(int arg0, int arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "replaceText", "(IILjava.lang.String;)V", arg0, arg1, arg2)); }

    void setTextContents(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTextContents", "(Ljava.lang.String;)V", arg0)); }

    void insertTextAtIndex(int arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "insertTextAtIndex", "(ILjava.lang.String;)V", arg0, arg1)); }

    String getTextRange(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getTextRange", "(II)Ljava.lang.String;", arg0, arg1)); }

    void cut(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "cut", "(II)V", arg0, arg1)); }

    void paste(int arg0) { (*javaClass->invokeMethod<void>(this->object, "paste", "(I)V", arg0)); }

    void selectText(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "selectText", "(II)V", arg0, arg1)); }

    void setAttributes(int arg0, int arg1, AttributeSet arg2) { (*javaClass->invokeMethod<void>(this->object, "setAttributes", "(IILjavax.swing.text.AttributeSet;)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: javax.accessibility.AccessibleValue
 * Package name: javax.accessibility
 */
class AccessibleValue : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleValue";
public:
    STATICINITIALIZE;

    AccessibleValue(jobject object) : JavaObject(object) {}

    Number getCurrentAccessibleValue() { return Number(*javaClass->invokeMethod<jobject>(this->object, "getCurrentAccessibleValue", "()Ljava.lang.Number;", )); }

    bool setCurrentAccessibleValue(Number arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setCurrentAccessibleValue", "(Ljava.lang.Number;)Z", arg0)); }

    Number getMinimumAccessibleValue() { return Number(*javaClass->invokeMethod<jobject>(this->object, "getMinimumAccessibleValue", "()Ljava.lang.Number;", )); }

    Number getMaximumAccessibleValue() { return Number(*javaClass->invokeMethod<jobject>(this->object, "getMaximumAccessibleValue", "()Ljava.lang.Number;", )); }

};


/**
 * Classpath: javax.accessibility.AccessibleRelationSet
 * Package name: javax.accessibility
 */
class AccessibleRelationSet : public Object {
protected:
    const inline static char *className = "javax.accessibility.AccessibleRelationSet";
public:
    STATICINITIALIZE;

    AccessibleRelationSet(jobject object) : JavaObject(object) {}

    bool add(AccessibleRelation arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljavax.accessibility.AccessibleRelation;)Z", arg0)); }

    bool remove(AccessibleRelation arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljavax.accessibility.AccessibleRelation;)Z", arg0)); }

    AccessibleRelation get(String arg0) { return AccessibleRelation(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.String;)Ljavax.accessibility.AccessibleRelation;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool contains(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.String;)Z", arg0)); }

    void addAll(AccessibleRelation_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "addAll", "([Ljavax.accessibility.AccessibleRelation;)V", arg0)); }

};


/**
 * Classpath: javax.accessibility.AccessibleRelation
 * Package name: javax.accessibility
 */
class AccessibleRelation : public AccessibleBundle {
protected:
    const inline static char *className = "javax.accessibility.AccessibleRelation";
public:
    STATICINITIALIZE;

    AccessibleRelation(jobject object) : JavaObject(object) {}

    String getKey() { return String(*javaClass->invokeMethod<jobject>(this->object, "getKey", "()Ljava.lang.String;", )); }

    void setTarget(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "setTarget", "(Ljava.lang.Object;)V", arg0)); }

    void setTarget(Object_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setTarget", "([Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: [Ljavax.accessibility.AccessibleRelation;
 */
class AccessibleRelation_interface : public Object {
protected:
    const inline static char *className = "[Ljavax.accessibility.AccessibleRelation;";
public:
    STATICINITIALIZE;

    AccessibleRelation_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.accessibility.AccessibleTable
 * Package name: javax.accessibility
 */
class AccessibleTable : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleTable";
public:
    STATICINITIALIZE;

    AccessibleTable(jobject object) : JavaObject(object) {}

    Accessible getAccessibleCaption() { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleCaption", "()Ljavax.accessibility.Accessible;", )); }

    void setAccessibleCaption(Accessible arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleCaption", "(Ljavax.accessibility.Accessible;)V", arg0)); }

    Accessible getAccessibleSummary() { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleSummary", "()Ljavax.accessibility.Accessible;", )); }

    void setAccessibleSummary(Accessible arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleSummary", "(Ljavax.accessibility.Accessible;)V", arg0)); }

    int getAccessibleRowCount() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleRowCount", "()I", )); }

    int getAccessibleColumnCount() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleColumnCount", "()I", )); }

    int getAccessibleRowExtentAt(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleRowExtentAt", "(II)I", arg0, arg1)); }

    int getAccessibleColumnExtentAt(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleColumnExtentAt", "(II)I", arg0, arg1)); }

    AccessibleTable getAccessibleRowHeader() { return AccessibleTable(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleRowHeader", "()Ljavax.accessibility.AccessibleTable;", )); }

    void setAccessibleRowHeader(AccessibleTable arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleRowHeader", "(Ljavax.accessibility.AccessibleTable;)V", arg0)); }

    AccessibleTable getAccessibleColumnHeader() { return AccessibleTable(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleColumnHeader", "()Ljavax.accessibility.AccessibleTable;", )); }

    void setAccessibleColumnHeader(AccessibleTable arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleColumnHeader", "(Ljavax.accessibility.AccessibleTable;)V", arg0)); }

    Accessible getAccessibleRowDescription(int arg0) { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleRowDescription", "(I)Ljavax.accessibility.Accessible;", arg0)); }

    void setAccessibleRowDescription(int arg0, Accessible arg1) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleRowDescription", "(ILjavax.accessibility.Accessible;)V", arg0, arg1)); }

    Accessible getAccessibleColumnDescription(int arg0) { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleColumnDescription", "(I)Ljavax.accessibility.Accessible;", arg0)); }

    void setAccessibleColumnDescription(int arg0, Accessible arg1) { (*javaClass->invokeMethod<void>(this->object, "setAccessibleColumnDescription", "(ILjavax.accessibility.Accessible;)V", arg0, arg1)); }

    bool isAccessibleSelected(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessibleSelected", "(II)Z", arg0, arg1)); }

    bool isAccessibleRowSelected(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessibleRowSelected", "(I)Z", arg0)); }

    bool isAccessibleColumnSelected(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessibleColumnSelected", "(I)Z", arg0)); }

    Accessible getAccessibleAt(int arg0, int arg1) { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleAt", "(II)Ljavax.accessibility.Accessible;", arg0, arg1)); }

};


/**
 * Classpath: javax.accessibility.AccessibleComponent
 * Package name: javax.accessibility
 */
class AccessibleComponent : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleComponent";
public:
    STATICINITIALIZE;

    AccessibleComponent(jobject object) : JavaObject(object) {}

    void setSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(Ljava.awt.Dimension;)V", arg0)); }

    bool contains(Point arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.Point;)Z", arg0)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    Dimension getSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getSize", "()Ljava.awt.Dimension;", )); }

    void setVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }

    Color getForeground() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getForeground", "()Ljava.awt.Color;", )); }

    void setForeground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setForeground", "(Ljava.awt.Color;)V", arg0)); }

    Accessible getAccessibleAt(Point arg0) { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleAt", "(Ljava.awt.Point;)Ljavax.accessibility.Accessible;", arg0)); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    bool isFocusTraversable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusTraversable", "()Z", )); }

    void addFocusListener(FocusListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addFocusListener", "(Ljava.awt.event.FocusListener;)V", arg0)); }

    Cursor getCursor() { return Cursor(*javaClass->invokeMethod<jobject>(this->object, "getCursor", "()Ljava.awt.Cursor;", )); }

    void removeFocusListener(FocusListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeFocusListener", "(Ljava.awt.event.FocusListener;)V", arg0)); }

    void setBounds(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(Ljava.awt.Rectangle;)V", arg0)); }

    void setLocation(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(Ljava.awt.Point;)V", arg0)); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    Color getBackground() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getBackground", "()Ljava.awt.Color;", )); }

    Font getFont() { return Font(*javaClass->invokeMethod<jobject>(this->object, "getFont", "()Ljava.awt.Font;", )); }

    FontMetrics getFontMetrics(Font arg0) { return FontMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava.awt.Font;)Ljava.awt.FontMetrics;", arg0)); }

    void setFont(Font arg0) { (*javaClass->invokeMethod<void>(this->object, "setFont", "(Ljava.awt.Font;)V", arg0)); }

    bool isShowing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isShowing", "()Z", )); }

    void setCursor(Cursor arg0) { (*javaClass->invokeMethod<void>(this->object, "setCursor", "(Ljava.awt.Cursor;)V", arg0)); }

    bool isVisible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVisible", "()Z", )); }

    void requestFocus() { (*javaClass->invokeMethod<void>(this->object, "requestFocus", "()V", )); }

    Point getLocationOnScreen() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocationOnScreen", "()Ljava.awt.Point;", )); }

    bool isEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnabled", "()Z", )); }

};


/**
 * Classpath: java.awt.event.FocusListener
 * Package name: java.awt.event
 */
class FocusListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.FocusListener";
public:
    STATICINITIALIZE;

    FocusListener(jobject object) : JavaObject(object) {}

    void focusGained(FocusEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "focusGained", "(Ljava.awt.event.FocusEvent;)V", arg0)); }

    void focusLost(FocusEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "focusLost", "(Ljava.awt.event.FocusEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.FocusEvent$Cause
 * Enclosing class: java.awt.event.FocusEvent
 * Package name: java.awt.event
 */
class FocusEvent_Cause : public Enum {
protected:
    const inline static char *className = "java.awt.event.FocusEvent$Cause";
public:
    STATICINITIALIZE;

    FocusEvent_Cause(jobject object) : JavaObject(object) {}

    static FocusEvent_Cause valueOf(String arg0) { return FocusEvent_Cause(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.event.FocusEvent$Cause;", arg0)); }

};


/**
 * Classpath: java.awt.Cursor
 * Package name: java.awt
 */
class Cursor : public Object {
protected:
    const inline static char *className = "java.awt.Cursor";
public:
    STATICINITIALIZE;

    Cursor(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int getType() { return int(*javaClass->invokeMethod<int>(this->object, "getType", "()I", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    static void loadSystemCustomCursorProperties() { (*javaClass->invokeStaticMethod<void>(this->object, "loadSystemCustomCursorProperties", "()V", )); }

    void setPData(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setPData", "(J)V", arg0)); }

    static Cursor getSystemCustomCursor(String arg0) { return Cursor(*javaClass->invokeStaticMethod<jobject>(this->object, "getSystemCustomCursor", "(Ljava.lang.String;)Ljava.awt.Cursor;", arg0)); }

    static Cursor getDefaultCursor() { return Cursor(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultCursor", "()Ljava.awt.Cursor;", )); }

    static void finalizeImpl(long arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "finalizeImpl", "(J)V", arg0)); }

    static Object lambda_loadSystemCustomCursorProperties_1() { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$loadSystemCustomCursorProperties$1", "()Ljava.lang.Object;", )); }

    static InputStream lambda_getSystemCustomCursor_0(String arg0) { return InputStream(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$getSystemCustomCursor$0", "(Ljava.lang.String;)Ljava.io.InputStream;", arg0)); }

    static Cursor getPredefinedCursor(int arg0) { return Cursor(*javaClass->invokeStaticMethod<jobject>(this->object, "getPredefinedCursor", "(I)Ljava.awt.Cursor;", arg0)); }

};


/**
 * Classpath: javax.accessibility.AccessibleSelection
 * Package name: javax.accessibility
 */
class AccessibleSelection : public JavaObject {
protected:
    const inline static char *className = "javax.accessibility.AccessibleSelection";
public:
    STATICINITIALIZE;

    AccessibleSelection(jobject object) : JavaObject(object) {}

    int getAccessibleSelectionCount() { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleSelectionCount", "()I", )); }

    void addAccessibleSelection(int arg0) { (*javaClass->invokeMethod<void>(this->object, "addAccessibleSelection", "(I)V", arg0)); }

    void removeAccessibleSelection(int arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAccessibleSelection", "(I)V", arg0)); }

    void clearAccessibleSelection() { (*javaClass->invokeMethod<void>(this->object, "clearAccessibleSelection", "()V", )); }

    void selectAllAccessibleSelection() { (*javaClass->invokeMethod<void>(this->object, "selectAllAccessibleSelection", "()V", )); }

    Accessible getAccessibleSelection(int arg0) { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleSelection", "(I)Ljavax.accessibility.Accessible;", arg0)); }

    bool isAccessibleChildSelected(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAccessibleChildSelected", "(I)Z", arg0)); }

};


/**
 * Classpath: java.awt.peer.LabelPeer
 * Package name: java.awt.peer
 */
class LabelPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.LabelPeer";
public:
    STATICINITIALIZE;

    LabelPeer(jobject object) : JavaObject(object) {}

    void setText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setText", "(Ljava.lang.String;)V", arg0)); }

    void setAlignment(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setAlignment", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.Dialog
 * Package name: java.awt
 */
class Dialog : public Window {
protected:
    const inline static char *className = "java.awt.Dialog";
public:
    STATICINITIALIZE;

    Dialog(jobject object) : JavaObject(object) {}

    void setResizable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setResizable", "(Z)V", arg0)); }

    void setTitle(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTitle", "(Ljava.lang.String;)V", arg0)); }

    String getTitle() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTitle", "()Ljava.lang.String;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void setShape(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "setShape", "(Ljava.awt.Shape;)V", arg0)); }

    void setOpacity(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpacity", "(F)V", arg0)); }

    void setVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }

    void setModalityType(Dialog_ModalityType arg0) { (*javaClass->invokeMethod<void>(this->object, "setModalityType", "(Ljava.awt.Dialog$ModalityType;)V", arg0)); }

    bool isModal_NoClientCode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isModal_NoClientCode", "()Z", )); }

    void checkModalityPermission(Dialog_ModalityType arg0) { (*javaClass->invokeMethod<void>(this->object, "checkModalityPermission", "(Ljava.awt.Dialog$ModalityType;)V", arg0)); }

    bool isModal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isModal", "()Z", )); }

    void modalShow() { (*javaClass->invokeMethod<void>(this->object, "modalShow", "()V", )); }

    bool conditionalShow(Component arg0, AtomicLong arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "conditionalShow", "(Ljava.awt.Component;Ljava.util.concurrent.atomic.AtomicLong;)Z", arg0, arg1)); }

    void modalityPushed() { (*javaClass->invokeMethod<void>(this->object, "modalityPushed", "()V", )); }

    void modalityPopped() { (*javaClass->invokeMethod<void>(this->object, "modalityPopped", "()V", )); }

    void modalHide() { (*javaClass->invokeMethod<void>(this->object, "modalHide", "()V", )); }

    void hideAndDisposePreHandler() { (*javaClass->invokeMethod<void>(this->object, "hideAndDisposePreHandler", "()V", )); }

    void hideAndDisposeHandler() { (*javaClass->invokeMethod<void>(this->object, "hideAndDisposeHandler", "()V", )); }

    bool isUndecorated() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUndecorated", "()Z", )); }

    bool shouldBlock(Window arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldBlock", "(Ljava.awt.Window;)Z", arg0)); }

    Dialog_ModalityType getModalityType() { return Dialog_ModalityType(*javaClass->invokeMethod<jobject>(this->object, "getModalityType", "()Ljava.awt.Dialog$ModalityType;", )); }

    void blockWindow(Window arg0) { (*javaClass->invokeMethod<void>(this->object, "blockWindow", "(Ljava.awt.Window;)V", arg0)); }

    void blockWindows(List arg0) { (*javaClass->invokeMethod<void>(this->object, "blockWindows", "(Ljava.util.List;)V", arg0)); }

    void setModal(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setModal", "(Z)V", arg0)); }

    bool isResizable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isResizable", "()Z", )); }

    void setUndecorated(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setUndecorated", "(Z)V", arg0)); }

    static bool lambda_show_1() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$show$1", "()Z", )); }

    static void lambda_show_0() { (*javaClass->invokeStaticMethod<void>(this->object, "lambda$show$0", "()V", )); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    static void checkShouldBeBlocked(Window arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "checkShouldBeBlocked", "(Ljava.awt.Window;)V", arg0)); }

    void show() { (*javaClass->invokeMethod<void>(this->object, "show", "()V", )); }

    void hide() { (*javaClass->invokeMethod<void>(this->object, "hide", "()V", )); }

    void unblockWindow(Window arg0) { (*javaClass->invokeMethod<void>(this->object, "unblockWindow", "(Ljava.awt.Window;)V", arg0)); }

    void doDispose() { (*javaClass->invokeMethod<void>(this->object, "doDispose", "()V", )); }

    void toBack() { (*javaClass->invokeMethod<void>(this->object, "toBack", "()V", )); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

};


/**
 * Classpath: java.awt.Dialog$ModalityType
 * Enclosing class: java.awt.Dialog
 * Package name: java.awt
 */
class Dialog_ModalityType : public Enum {
protected:
    const inline static char *className = "java.awt.Dialog$ModalityType";
public:
    STATICINITIALIZE;

    Dialog_ModalityType(jobject object) : JavaObject(object) {}

    static Dialog_ModalityType valueOf(String arg0) { return Dialog_ModalityType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.Dialog$ModalityType;", arg0)); }

};


/**
 * Classpath: java.util.concurrent.atomic.AtomicLong
 * Package name: java.util.concurrent.atomic
 */
class AtomicLong : public Number {
protected:
    const inline static char *className = "java.util.concurrent.atomic.AtomicLong";
public:
    STATICINITIALIZE;

    AtomicLong(jobject object) : JavaObject(object) {}

    long get() { return long(*javaClass->invokeMethod<long>(this->object, "get", "()J", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    long longValue() { return long(*javaClass->invokeMethod<long>(this->object, "longValue", "()J", )); }

    float floatValue() { return float(*javaClass->invokeMethod<float>(this->object, "floatValue", "()F", )); }

    double doubleValue() { return double(*javaClass->invokeMethod<double>(this->object, "doubleValue", "()D", )); }

    void set(long arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(J)V", arg0)); }

    long getOpaque() { return long(*javaClass->invokeMethod<long>(this->object, "getOpaque", "()J", )); }

    void setOpaque(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpaque", "(J)V", arg0)); }

    long getAcquire() { return long(*javaClass->invokeMethod<long>(this->object, "getAcquire", "()J", )); }

    void setRelease(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setRelease", "(J)V", arg0)); }

    bool compareAndSet(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "compareAndSet", "(JJ)Z", arg0, arg1)); }

    long compareAndExchange(long arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "compareAndExchange", "(JJ)J", arg0, arg1)); }

    long compareAndExchangeAcquire(long arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "compareAndExchangeAcquire", "(JJ)J", arg0, arg1)); }

    long compareAndExchangeRelease(long arg0, long arg1) { return long(*javaClass->invokeMethod<long>(this->object, "compareAndExchangeRelease", "(JJ)J", arg0, arg1)); }

    bool weakCompareAndSetPlain(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSetPlain", "(JJ)Z", arg0, arg1)); }

    bool weakCompareAndSet(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSet", "(JJ)Z", arg0, arg1)); }

    bool weakCompareAndSetAcquire(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSetAcquire", "(JJ)Z", arg0, arg1)); }

    bool weakCompareAndSetRelease(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSetRelease", "(JJ)Z", arg0, arg1)); }

    long getAndSet(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getAndSet", "(J)J", arg0)); }

    long getAndAdd(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getAndAdd", "(J)J", arg0)); }

    void lazySet(long arg0) { (*javaClass->invokeMethod<void>(this->object, "lazySet", "(J)V", arg0)); }

    static bool VMSupportsCS8() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "VMSupportsCS8", "()Z", )); }

    bool weakCompareAndSetVolatile(long arg0, long arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "weakCompareAndSetVolatile", "(JJ)Z", arg0, arg1)); }

    long getAndIncrement() { return long(*javaClass->invokeMethod<long>(this->object, "getAndIncrement", "()J", )); }

    long getAndDecrement() { return long(*javaClass->invokeMethod<long>(this->object, "getAndDecrement", "()J", )); }

    long incrementAndGet() { return long(*javaClass->invokeMethod<long>(this->object, "incrementAndGet", "()J", )); }

    long decrementAndGet() { return long(*javaClass->invokeMethod<long>(this->object, "decrementAndGet", "()J", )); }

    long addAndGet(long arg0) { return long(*javaClass->invokeMethod<long>(this->object, "addAndGet", "(J)J", arg0)); }

    long getAndUpdate(LongUnaryOperator arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getAndUpdate", "(Ljava.util.function.LongUnaryOperator;)J", arg0)); }

    long updateAndGet(LongUnaryOperator arg0) { return long(*javaClass->invokeMethod<long>(this->object, "updateAndGet", "(Ljava.util.function.LongUnaryOperator;)J", arg0)); }

    long getAndAccumulate(long arg0, LongBinaryOperator arg1) { return long(*javaClass->invokeMethod<long>(this->object, "getAndAccumulate", "(JLjava.util.function.LongBinaryOperator;)J", arg0, arg1)); }

    long accumulateAndGet(long arg0, LongBinaryOperator arg1) { return long(*javaClass->invokeMethod<long>(this->object, "accumulateAndGet", "(JLjava.util.function.LongBinaryOperator;)J", arg0, arg1)); }

    long getPlain() { return long(*javaClass->invokeMethod<long>(this->object, "getPlain", "()J", )); }

    void setPlain(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlain", "(J)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.DialogPeer
 * Package name: java.awt.peer
 */
class DialogPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.DialogPeer";
public:
    STATICINITIALIZE;

    DialogPeer(jobject object) : JavaObject(object) {}

    void setResizable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setResizable", "(Z)V", arg0)); }

    void setTitle(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTitle", "(Ljava.lang.String;)V", arg0)); }

    void blockWindows(List arg0) { (*javaClass->invokeMethod<void>(this->object, "blockWindows", "(Ljava.util.List;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.MouseInfoPeer
 * Package name: java.awt.peer
 */
class MouseInfoPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.MouseInfoPeer";
public:
    STATICINITIALIZE;

    MouseInfoPeer(jobject object) : JavaObject(object) {}

    bool isWindowUnderMouse(Window arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWindowUnderMouse", "(Ljava.awt.Window;)Z", arg0)); }

    int fillPointWithCoords(Point arg0) { return int(*javaClass->invokeMethod<int>(this->object, "fillPointWithCoords", "(Ljava.awt.Point;)I", arg0)); }

};


/**
 * Classpath: java.awt.peer.LightweightPeer
 * Package name: java.awt.peer
 */
class LightweightPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.LightweightPeer";
public:
    STATICINITIALIZE;

    LightweightPeer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.peer.WindowPeer
 * Package name: java.awt.peer
 */
class WindowPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.WindowPeer";
public:
    STATICINITIALIZE;

    WindowPeer(jobject object) : JavaObject(object) {}

    void setOpaque(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpaque", "(Z)V", arg0)); }

    void setOpacity(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpacity", "(F)V", arg0)); }

    void toFront() { (*javaClass->invokeMethod<void>(this->object, "toFront", "()V", )); }

    void updateIconImages() { (*javaClass->invokeMethod<void>(this->object, "updateIconImages", "()V", )); }

    void updateMinimumSize() { (*javaClass->invokeMethod<void>(this->object, "updateMinimumSize", "()V", )); }

    void updateFocusableWindowState() { (*javaClass->invokeMethod<void>(this->object, "updateFocusableWindowState", "()V", )); }

    void toBack() { (*javaClass->invokeMethod<void>(this->object, "toBack", "()V", )); }

    void setModalBlocked(Dialog arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setModalBlocked", "(Ljava.awt.Dialog;Z)V", arg0, arg1)); }

    void updateAlwaysOnTopState() { (*javaClass->invokeMethod<void>(this->object, "updateAlwaysOnTopState", "()V", )); }

    void updateWindow() { (*javaClass->invokeMethod<void>(this->object, "updateWindow", "()V", )); }

    void repositionSecurityWarning() { (*javaClass->invokeMethod<void>(this->object, "repositionSecurityWarning", "()V", )); }

};


/**
 * Classpath: java.awt.peer.MenuBarPeer
 * Package name: java.awt.peer
 */
class MenuBarPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.MenuBarPeer";
public:
    STATICINITIALIZE;

    MenuBarPeer(jobject object) : JavaObject(object) {}

    void addHelpMenu(Menu arg0) { (*javaClass->invokeMethod<void>(this->object, "addHelpMenu", "(Ljava.awt.Menu;)V", arg0)); }

    void addMenu(Menu arg0) { (*javaClass->invokeMethod<void>(this->object, "addMenu", "(Ljava.awt.Menu;)V", arg0)); }

    void delMenu(int arg0) { (*javaClass->invokeMethod<void>(this->object, "delMenu", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.MenuItem
 * Package name: java.awt
 */
class MenuItem : public MenuComponent {
protected:
    const inline static char *className = "java.awt.MenuItem";
public:
    STATICINITIALIZE;

    MenuItem(jobject object) : JavaObject(object) {}

    void disable() { (*javaClass->invokeMethod<void>(this->object, "disable", "()V", )); }

    void enable() { (*javaClass->invokeMethod<void>(this->object, "enable", "()V", )); }

    void enable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "enable", "(Z)V", arg0)); }

    bool handleShortcut(KeyEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleShortcut", "(Ljava.awt.event.KeyEvent;)Z", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    String getLabel() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLabel", "()Ljava.lang.String;", )); }

    String getActionCommand() { return String(*javaClass->invokeMethod<jobject>(this->object, "getActionCommand", "()Ljava.lang.String;", )); }

    void enableEvents(long arg0) { (*javaClass->invokeMethod<void>(this->object, "enableEvents", "(J)V", arg0)); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    void disableEvents(long arg0) { (*javaClass->invokeMethod<void>(this->object, "disableEvents", "(J)V", arg0)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    MenuItem getShortcutMenuItem(MenuShortcut arg0) { return MenuItem(*javaClass->invokeMethod<jobject>(this->object, "getShortcutMenuItem", "(Ljava.awt.MenuShortcut;)Ljava.awt.MenuItem;", arg0)); }

    void deleteShortcut(MenuShortcut arg0) { (*javaClass->invokeMethod<void>(this->object, "deleteShortcut", "(Ljava.awt.MenuShortcut;)V", arg0)); }

    void deleteShortcut() { (*javaClass->invokeMethod<void>(this->object, "deleteShortcut", "()V", )); }

    MenuShortcut getShortcut() { return MenuShortcut(*javaClass->invokeMethod<jobject>(this->object, "getShortcut", "()Ljava.awt.MenuShortcut;", )); }

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

    bool isItemEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isItemEnabled", "()Z", )); }

    void doMenuEvent(long arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "doMenuEvent", "(JI)V", arg0, arg1)); }

    String getActionCommandImpl() { return String(*javaClass->invokeMethod<jobject>(this->object, "getActionCommandImpl", "()Ljava.lang.String;", )); }

    void processActionEvent(ActionEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processActionEvent", "(Ljava.awt.event.ActionEvent;)V", arg0)); }

    void addActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    void setShortcut(MenuShortcut arg0) { (*javaClass->invokeMethod<void>(this->object, "setShortcut", "(Ljava.awt.MenuShortcut;)V", arg0)); }

    void setActionCommand(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setActionCommand", "(Ljava.lang.String;)V", arg0)); }

    void removeActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    bool isEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnabled", "()Z", )); }

};


/**
 * Classpath: java.awt.AWTEvent
 * Package name: java.awt
 */
class AWTEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.AWTEvent";
public:
    STATICINITIALIZE;

    AWTEvent(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void nativeSetSource(ComponentPeer arg0) { (*javaClass->invokeMethod<void>(this->object, "nativeSetSource", "(Ljava.awt.peer.ComponentPeer;)V", arg0)); }

    void setSource(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "setSource", "(Ljava.lang.Object;)V", arg0)); }

    void dispatched() { (*javaClass->invokeMethod<void>(this->object, "dispatched", "()V", )); }

    bool isConsumed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConsumed", "()Z", )); }

    Event convertToOld() { return Event(*javaClass->invokeMethod<jobject>(this->object, "convertToOld", "()Ljava.awt.Event;", )); }

    void copyPrivateDataInto(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "copyPrivateDataInto", "(Ljava.awt.AWTEvent;)V", arg0)); }

    AccessControlContext getAccessControlContext() { return AccessControlContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessControlContext", "()Ljava.security.AccessControlContext;", )); }

    void consume() { (*javaClass->invokeMethod<void>(this->object, "consume", "()V", )); }

    int getID() { return int(*javaClass->invokeMethod<int>(this->object, "getID", "()I", )); }

};


/**
 * Classpath: java.awt.peer.ComponentPeer
 * Package name: java.awt.peer
 */
class ComponentPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ComponentPeer";
public:
    STATICINITIALIZE;

    ComponentPeer(jobject object) : JavaObject(object) {}

    void coalescePaintEvent(PaintEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "coalescePaintEvent", "(Ljava.awt.event.PaintEvent;)V", arg0)); }

    void print(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.awt.Graphics;)V", arg0)); }

    void flip(int arg0, int arg1, int arg2, int arg3, BufferCapabilities_FlipContents arg4) { (*javaClass->invokeMethod<void>(this->object, "flip", "(IIIILjava.awt.BufferCapabilities$FlipContents;)V", arg0, arg1, arg2, arg3, arg4)); }

    ColorModel getColorModel() { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava.awt.image.ColorModel;", )); }

    GraphicsConfiguration getGraphicsConfiguration() { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getGraphicsConfiguration", "()Ljava.awt.GraphicsConfiguration;", )); }

    void setVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }

    void layout() { (*javaClass->invokeMethod<void>(this->object, "layout", "()V", )); }

    void setForeground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setForeground", "(Ljava.awt.Color;)V", arg0)); }

    void reparent(ContainerPeer arg0) { (*javaClass->invokeMethod<void>(this->object, "reparent", "(Ljava.awt.peer.ContainerPeer;)V", arg0)); }

    bool updateGraphicsData(GraphicsConfiguration arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "updateGraphicsData", "(Ljava.awt.GraphicsConfiguration;)Z", arg0)); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    VolatileImage createVolatileImage(int arg0, int arg1) { return VolatileImage(*javaClass->invokeMethod<jobject>(this->object, "createVolatileImage", "(II)Ljava.awt.image.VolatileImage;", arg0, arg1)); }

    Image getBackBuffer() { return Image(*javaClass->invokeMethod<jobject>(this->object, "getBackBuffer", "()Ljava.awt.Image;", )); }

    bool handlesWheelScrolling() { return bool(*javaClass->invokeMethod<boolean>(this->object, "handlesWheelScrolling", "()Z", )); }

    void setZOrder(ComponentPeer arg0) { (*javaClass->invokeMethod<void>(this->object, "setZOrder", "(Ljava.awt.peer.ComponentPeer;)V", arg0)); }

    Graphics getGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava.awt.Graphics;", )); }

    Image createImage(int arg0, int arg1) { return Image(*javaClass->invokeMethod<jobject>(this->object, "createImage", "(II)Ljava.awt.Image;", arg0, arg1)); }

    void setBounds(int arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    FontMetrics getFontMetrics(Font arg0) { return FontMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava.awt.Font;)Ljava.awt.FontMetrics;", arg0)); }

    void setFont(Font arg0) { (*javaClass->invokeMethod<void>(this->object, "setFont", "(Ljava.awt.Font;)V", arg0)); }

    Dimension getPreferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "()Ljava.awt.Dimension;", )); }

    Dimension getMinimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "()Ljava.awt.Dimension;", )); }

    bool requestFocus(Component arg0, bool arg1, bool arg2, long arg3, FocusEvent_Cause arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocus", "(Ljava.awt.Component;ZZJLjava.awt.event.FocusEvent$Cause;)Z", arg0, arg1, arg2, arg3, arg4)); }

    void handleEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    Point getLocationOnScreen() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocationOnScreen", "()Ljava.awt.Point;", )); }

    void applyShape(Region arg0) { (*javaClass->invokeMethod<void>(this->object, "applyShape", "(Lsun.java2d.pipe.Region;)V", arg0)); }

    void paint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paint", "(Ljava.awt.Graphics;)V", arg0)); }

    void updateCursorImmediately() { (*javaClass->invokeMethod<void>(this->object, "updateCursorImmediately", "()V", )); }

    bool isFocusable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusable", "()Z", )); }

    bool isReparentSupported() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReparentSupported", "()Z", )); }

    bool isObscured() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isObscured", "()Z", )); }

    bool canDetermineObscurity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDetermineObscurity", "()Z", )); }

    void createBuffers(int arg0, BufferCapabilities arg1) { (*javaClass->invokeMethod<void>(this->object, "createBuffers", "(ILjava.awt.BufferCapabilities;)V", arg0, arg1)); }

    void destroyBuffers() { (*javaClass->invokeMethod<void>(this->object, "destroyBuffers", "()V", )); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: java.awt.AttributeValue
 * Package name: java.awt
 */
class AttributeValue : public Object {
protected:
    const inline static char *className = "java.awt.AttributeValue";
public:
    STATICINITIALIZE;

    AttributeValue(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.peer.ContainerPeer
 * Package name: java.awt.peer
 */
class ContainerPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ContainerPeer";
public:
    STATICINITIALIZE;

    ContainerPeer(jobject object) : JavaObject(object) {}

    void beginValidate() { (*javaClass->invokeMethod<void>(this->object, "beginValidate", "()V", )); }

    void endValidate() { (*javaClass->invokeMethod<void>(this->object, "endValidate", "()V", )); }

    void beginLayout() { (*javaClass->invokeMethod<void>(this->object, "beginLayout", "()V", )); }

    void endLayout() { (*javaClass->invokeMethod<void>(this->object, "endLayout", "()V", )); }

    Insets getInsets() { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getInsets", "()Ljava.awt.Insets;", )); }

};


/**
 * Classpath: java.awt.Insets
 * Package name: java.awt
 */
class Insets : public Object {
protected:
    const inline static char *className = "java.awt.Insets";
public:
    STATICINITIALIZE;

    Insets(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void set(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "set", "(IIII)V", arg0, arg1, arg2, arg3)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

};


/**
 * Classpath: sun.java2d.pipe.Region
 * Package name: sun.java2d.pipe
 */
class Region : public Object {
protected:
    const inline static char *className = "sun.java2d.pipe.Region";
public:
    STATICINITIALIZE;

    Region(jobject object) : JavaObject(object) {}

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    static int clipAdd(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "clipAdd", "(II)I", arg0, arg1)); }

    static int dimAdd(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "dimAdd", "(II)I", arg0, arg1)); }

    static Region getInstanceXYXY(int arg0, int arg1, int arg2, int arg3) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstanceXYXY", "(IIII)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    void appendSpans(SpanIterator arg0) { (*javaClass->invokeMethod<void>(this->object, "appendSpans", "(Lsun.java2d.pipe.SpanIterator;)V", arg0)); }

    void appendSpan(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "appendSpan", "([I)V", arg0)); }

    void endRow(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "endRow", "([I)V", arg0)); }

    void calcBBox() { (*javaClass->invokeMethod<void>(this->object, "calcBBox", "()V", )); }

    static int clipScale(int arg0, double arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "clipScale", "(ID)I", arg0, arg1)); }

    Region getSafeTranslatedRegion(int arg0, int arg1) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getSafeTranslatedRegion", "(II)Lsun.java2d.pipe.Region;", arg0, arg1)); }

    Region getIntersectionXYWH(int arg0, int arg1, int arg2, int arg3) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getIntersectionXYWH", "(IIII)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    Region getIntersectionXYXY(double arg0, double arg1, double arg2, double arg3) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getIntersectionXYXY", "(DDDD)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    Region getIntersectionXYXY(int arg0, int arg1, int arg2, int arg3) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getIntersectionXYXY", "(IIII)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    static int clipRound(double arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "clipRound", "(D)I", arg0)); }

    bool isInsideXYXY(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInsideXYXY", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    SpanIterator getSpanIterator() { return SpanIterator(*javaClass->invokeMethod<jobject>(this->object, "getSpanIterator", "()Lsun.java2d.pipe.SpanIterator;", )); }

    SpanIterator getSpanIterator(arr_I arg0) { return SpanIterator(*javaClass->invokeMethod<jobject>(this->object, "getSpanIterator", "([I)Lsun.java2d.pipe.SpanIterator;", arg0)); }

    bool isInsideQuickCheck(Region arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInsideQuickCheck", "(Lsun.java2d.pipe.Region;)Z", arg0)); }

    void filterSpans(Region arg0, Region arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "filterSpans", "(Lsun.java2d.pipe.Region;Lsun.java2d.pipe.Region;I)V", arg0, arg1, arg2)); }

    bool intersectsQuickCheck(Region arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsQuickCheck", "(Lsun.java2d.pipe.Region;)Z", arg0)); }

    Region getBoundsIntersectionXYWH(int arg0, int arg1, int arg2, int arg3) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getBoundsIntersectionXYWH", "(IIII)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    Region getBoundsIntersectionXYXY(int arg0, int arg1, int arg2, int arg3) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getBoundsIntersectionXYXY", "(IIII)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    bool encompasses(Region arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "encompasses", "(Lsun.java2d.pipe.Region;)Z", arg0)); }

    void needSpace(int arg0) { (*javaClass->invokeMethod<void>(this->object, "needSpace", "(I)V", arg0)); }

    bool encompassesXYXY(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "encompassesXYXY", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    Region getScaledRegion(double arg0, double arg1) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getScaledRegion", "(DD)Lsun.java2d.pipe.Region;", arg0, arg1)); }

    Region getExclusiveOr(Region arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getExclusiveOr", "(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;", arg0)); }

    Region getBoundsIntersection(Rectangle arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getBoundsIntersection", "(Ljava.awt.Rectangle;)Lsun.java2d.pipe.Region;", arg0)); }

    Region getBoundsIntersection(Region arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getBoundsIntersection", "(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;", arg0)); }

    int getLoX() { return int(*javaClass->invokeMethod<int>(this->object, "getLoX", "()I", )); }

    int getLoY() { return int(*javaClass->invokeMethod<int>(this->object, "getLoY", "()I", )); }

    int getHiX() { return int(*javaClass->invokeMethod<int>(this->object, "getHiX", "()I", )); }

    int getHiY() { return int(*javaClass->invokeMethod<int>(this->object, "getHiY", "()I", )); }

    bool isRectangular() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRectangular", "()Z", )); }

    bool isInsideXYWH(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInsideXYWH", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    bool intersectsQuickCheckXYXY(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsQuickCheckXYXY", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    bool encompassesXYWH(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "encompassesXYWH", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    void clipBoxToBounds(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "clipBoxToBounds", "([I)V", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    bool contains(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(II)Z", arg0, arg1)); }

    void getBounds(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "getBounds", "([I)V", arg0)); }

    SpanIterator filter(SpanIterator arg0) { return SpanIterator(*javaClass->invokeMethod<jobject>(this->object, "filter", "(Lsun.java2d.pipe.SpanIterator;)Lsun.java2d.pipe.SpanIterator;", arg0)); }

    static Region getInstance(Shape arg0, AffineTransform arg1) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.awt.Shape;Ljava.awt.geom.AffineTransform;)Lsun.java2d.pipe.Region;", arg0, arg1)); }

    static Region getInstance(int arg0, int arg1, int arg2, int arg3, arr_I arg4) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(IIII[I)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3, arg4)); }

    static Region getInstance(Rectangle arg0) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Ljava.awt.Rectangle;)Lsun.java2d.pipe.Region;", arg0)); }

    static Region getInstance(Region arg0, bool arg1, Shape arg2, AffineTransform arg3) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Lsun.java2d.pipe.Region;ZLjava.awt.Shape;Ljava.awt.geom.AffineTransform;)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    static Region getInstance(Region arg0, Shape arg1, AffineTransform arg2) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "(Lsun.java2d.pipe.Region;Ljava.awt.Shape;Ljava.awt.geom.AffineTransform;)Lsun.java2d.pipe.Region;", arg0, arg1, arg2)); }

    static Region getInstance(arr_I arg0, SpanIterator arg1) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "([ILsun.java2d.pipe.SpanIterator;)Lsun.java2d.pipe.Region;", arg0, arg1)); }

    static Region getInstance(arr_I arg0) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "([I)Lsun.java2d.pipe.Region;", arg0)); }

    RegionIterator getIterator() { return RegionIterator(*javaClass->invokeMethod<jobject>(this->object, "getIterator", "()Lsun.java2d.pipe.RegionIterator;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Region getUnion(Region arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getUnion", "(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;", arg0)); }

    Region getIntersection(Region arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getIntersection", "(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;", arg0)); }

    Region getIntersection(Rectangle2D arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getIntersection", "(Ljava.awt.geom.Rectangle2D;)Lsun.java2d.pipe.Region;", arg0)); }

    Region getIntersection(Rectangle arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getIntersection", "(Ljava.awt.Rectangle;)Lsun.java2d.pipe.Region;", arg0)); }

    Region getTranslatedRegion(int arg0, int arg1) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getTranslatedRegion", "(II)Lsun.java2d.pipe.Region;", arg0, arg1)); }

    static Region getInstanceXYWH(int arg0, int arg1, int arg2, int arg3) { return Region(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstanceXYWH", "(IIII)Lsun.java2d.pipe.Region;", arg0, arg1, arg2, arg3)); }

    Region getDifference(Region arg0) { return Region(*javaClass->invokeMethod<jobject>(this->object, "getDifference", "(Lsun.java2d.pipe.Region;)Lsun.java2d.pipe.Region;", arg0)); }

};


/**
 * Classpath: sun.java2d.pipe.SpanIterator
 * Package name: sun.java2d.pipe
 */
class SpanIterator : public JavaObject {
protected:
    const inline static char *className = "sun.java2d.pipe.SpanIterator";
public:
    STATICINITIALIZE;

    SpanIterator(jobject object) : JavaObject(object) {}

    void getPathBox(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "getPathBox", "([I)V", arg0)); }

    bool nextSpan(arr_I arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "nextSpan", "([I)Z", arg0)); }

    void intersectClipBox(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "intersectClipBox", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void skipDownTo(int arg0) { (*javaClass->invokeMethod<void>(this->object, "skipDownTo", "(I)V", arg0)); }

    long getNativeIterator() { return long(*javaClass->invokeMethod<long>(this->object, "getNativeIterator", "()J", )); }

};


/**
 * Classpath: sun.java2d.pipe.RegionIterator
 * Package name: sun.java2d.pipe
 */
class RegionIterator : public Object {
protected:
    const inline static char *className = "sun.java2d.pipe.RegionIterator";
public:
    STATICINITIALIZE;

    RegionIterator(jobject object) : JavaObject(object) {}

    RegionIterator createCopy() { return RegionIterator(*javaClass->invokeMethod<jobject>(this->object, "createCopy", "()Lsun.java2d.pipe.RegionIterator;", )); }

    void copyStateFrom(RegionIterator arg0) { (*javaClass->invokeMethod<void>(this->object, "copyStateFrom", "(Lsun.java2d.pipe.RegionIterator;)V", arg0)); }

    bool nextYRange(arr_I arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "nextYRange", "([I)Z", arg0)); }

    bool nextXBand(arr_I arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "nextXBand", "([I)Z", arg0)); }

};


/**
 * Classpath: java.awt.BufferCapabilities
 * Package name: java.awt
 */
class BufferCapabilities : public Object {
protected:
    const inline static char *className = "java.awt.BufferCapabilities";
public:
    STATICINITIALIZE;

    BufferCapabilities(jobject object) : JavaObject(object) {}

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    BufferCapabilities_FlipContents getFlipContents() { return BufferCapabilities_FlipContents(*javaClass->invokeMethod<jobject>(this->object, "getFlipContents", "()Ljava.awt.BufferCapabilities$FlipContents;", )); }

    ImageCapabilities getFrontBufferCapabilities() { return ImageCapabilities(*javaClass->invokeMethod<jobject>(this->object, "getFrontBufferCapabilities", "()Ljava.awt.ImageCapabilities;", )); }

    ImageCapabilities getBackBufferCapabilities() { return ImageCapabilities(*javaClass->invokeMethod<jobject>(this->object, "getBackBufferCapabilities", "()Ljava.awt.ImageCapabilities;", )); }

    bool isPageFlipping() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPageFlipping", "()Z", )); }

    bool isFullScreenRequired() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFullScreenRequired", "()Z", )); }

    bool isMultiBufferAvailable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMultiBufferAvailable", "()Z", )); }

};


/**
 * Classpath: java.awt.Event
 * Package name: java.awt
 */
class Event : public Object {
protected:
    const inline static char *className = "java.awt.Event";
public:
    STATICINITIALIZE;

    Event(jobject object) : JavaObject(object) {}

    void translate(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    bool shiftDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shiftDown", "()Z", )); }

    bool controlDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "controlDown", "()Z", )); }

    bool metaDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "metaDown", "()Z", )); }

    static int getOldEventKey(KeyEvent arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getOldEventKey", "(Ljava.awt.event.KeyEvent;)I", arg0)); }

    bool isConsumed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConsumed", "()Z", )); }

    char getKeyEventChar() { return char(*javaClass->invokeMethod<char>(this->object, "getKeyEventChar", "()C", )); }

    void consume() { (*javaClass->invokeMethod<void>(this->object, "consume", "()V", )); }

};


/**
 * Classpath: java.awt.MenuShortcut
 * Package name: java.awt
 */
class MenuShortcut : public Object {
protected:
    const inline static char *className = "java.awt.MenuShortcut";
public:
    STATICINITIALIZE;

    MenuShortcut(jobject object) : JavaObject(object) {}

    bool equals(MenuShortcut arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.awt.MenuShortcut;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getKey() { return int(*javaClass->invokeMethod<int>(this->object, "getKey", "()I", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    bool usesShiftModifier() { return bool(*javaClass->invokeMethod<boolean>(this->object, "usesShiftModifier", "()Z", )); }

};


/**
 * Classpath: java.awt.event.ActionEvent
 * Package name: java.awt.event
 */
class ActionEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.ActionEvent";
public:
    STATICINITIALIZE;

    ActionEvent(jobject object) : JavaObject(object) {}

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    String getActionCommand() { return String(*javaClass->invokeMethod<jobject>(this->object, "getActionCommand", "()Ljava.lang.String;", )); }

    long getWhen() { return long(*javaClass->invokeMethod<long>(this->object, "getWhen", "()J", )); }

};


/**
 * Classpath: java.awt.event.ActionListener
 * Package name: java.awt.event
 */
class ActionListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.ActionListener";
public:
    STATICINITIALIZE;

    ActionListener(jobject object) : JavaObject(object) {}

    void actionPerformed(ActionEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "actionPerformed", "(Ljava.awt.event.ActionEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.MenuPeer
 * Package name: java.awt.peer
 */
class MenuPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.MenuPeer";
public:
    STATICINITIALIZE;

    MenuPeer(jobject object) : JavaObject(object) {}

    void addItem(MenuItem arg0) { (*javaClass->invokeMethod<void>(this->object, "addItem", "(Ljava.awt.MenuItem;)V", arg0)); }

    void delItem(int arg0) { (*javaClass->invokeMethod<void>(this->object, "delItem", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.MenuItemPeer
 * Package name: java.awt.peer
 */
class MenuItemPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.MenuItemPeer";
public:
    STATICINITIALIZE;

    MenuItemPeer(jobject object) : JavaObject(object) {}

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.PopupMenuPeer
 * Package name: java.awt.peer
 */
class PopupMenuPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.PopupMenuPeer";
public:
    STATICINITIALIZE;

    PopupMenuPeer(jobject object) : JavaObject(object) {}

    void show(Event arg0) { (*javaClass->invokeMethod<void>(this->object, "show", "(Ljava.awt.Event;)V", arg0)); }

};


/**
 * Classpath: java.awt.Desktop
 * Package name: java.awt
 */
class Desktop : public Object {
protected:
    const inline static char *className = "java.awt.Desktop";
public:
    STATICINITIALIZE;

    Desktop(jobject object) : JavaObject(object) {}

    static Desktop getDesktop() { return Desktop(*javaClass->invokeStaticMethod<jobject>(this->object, "getDesktop", "()Ljava.awt.Desktop;", )); }

    void browse(URI arg0) { (*javaClass->invokeMethod<void>(this->object, "browse", "(Ljava.net.URI;)V", arg0)); }

    void checkExec() { (*javaClass->invokeMethod<void>(this->object, "checkExec", "()V", )); }

    void checkRead() { (*javaClass->invokeMethod<void>(this->object, "checkRead", "()V", )); }

    void print(File arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.io.File;)V", arg0)); }

    void open(File arg0) { (*javaClass->invokeMethod<void>(this->object, "open", "(Ljava.io.File;)V", arg0)); }

    bool isSupported(Desktop_Action arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.awt.Desktop$Action;)Z", arg0)); }

    static bool isDesktopSupported() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isDesktopSupported", "()Z", )); }

    void checkAWTPermission() { (*javaClass->invokeMethod<void>(this->object, "checkAWTPermission", "()V", )); }

    void checkActionSupport(Desktop_Action arg0) { (*javaClass->invokeMethod<void>(this->object, "checkActionSupport", "(Ljava.awt.Desktop$Action;)V", arg0)); }

    static void checkFileValidation(File arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "checkFileValidation", "(Ljava.io.File;)V", arg0)); }

    void edit(File arg0) { (*javaClass->invokeMethod<void>(this->object, "edit", "(Ljava.io.File;)V", arg0)); }

    void mail(URI arg0) { (*javaClass->invokeMethod<void>(this->object, "mail", "(Ljava.net.URI;)V", arg0)); }

    void mail() { (*javaClass->invokeMethod<void>(this->object, "mail", "()V", )); }

    void checkEventsProcessingPermission() { (*javaClass->invokeMethod<void>(this->object, "checkEventsProcessingPermission", "()V", )); }

    void addAppEventListener(SystemEventListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addAppEventListener", "(Ljava.awt.desktop.SystemEventListener;)V", arg0)); }

    void removeAppEventListener(SystemEventListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAppEventListener", "(Ljava.awt.desktop.SystemEventListener;)V", arg0)); }

    void setAboutHandler(AboutHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setAboutHandler", "(Ljava.awt.desktop.AboutHandler;)V", arg0)); }

    void setPreferencesHandler(PreferencesHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setPreferencesHandler", "(Ljava.awt.desktop.PreferencesHandler;)V", arg0)); }

    void setOpenFileHandler(OpenFilesHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpenFileHandler", "(Ljava.awt.desktop.OpenFilesHandler;)V", arg0)); }

    void setPrintFileHandler(PrintFilesHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setPrintFileHandler", "(Ljava.awt.desktop.PrintFilesHandler;)V", arg0)); }

    void setOpenURIHandler(OpenURIHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpenURIHandler", "(Ljava.awt.desktop.OpenURIHandler;)V", arg0)); }

    void checkQuitPermission() { (*javaClass->invokeMethod<void>(this->object, "checkQuitPermission", "()V", )); }

    void setQuitHandler(QuitHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setQuitHandler", "(Ljava.awt.desktop.QuitHandler;)V", arg0)); }

    void setQuitStrategy(QuitStrategy arg0) { (*javaClass->invokeMethod<void>(this->object, "setQuitStrategy", "(Ljava.awt.desktop.QuitStrategy;)V", arg0)); }

    void enableSuddenTermination() { (*javaClass->invokeMethod<void>(this->object, "enableSuddenTermination", "()V", )); }

    void disableSuddenTermination() { (*javaClass->invokeMethod<void>(this->object, "disableSuddenTermination", "()V", )); }

    void requestForeground(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "requestForeground", "(Z)V", arg0)); }

    void openHelpViewer() { (*javaClass->invokeMethod<void>(this->object, "openHelpViewer", "()V", )); }

    void setDefaultMenuBar(JMenuBar arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultMenuBar", "(Ljavax.swing.JMenuBar;)V", arg0)); }

    void browseFileDirectory(File arg0) { (*javaClass->invokeMethod<void>(this->object, "browseFileDirectory", "(Ljava.io.File;)V", arg0)); }

    bool moveToTrash(File arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "moveToTrash", "(Ljava.io.File;)Z", arg0)); }

    static Object lambda_moveToTrash_0(File arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$moveToTrash$0", "(Ljava.io.File;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: java.awt.Desktop$Action
 * Enclosing class: java.awt.Desktop
 * Package name: java.awt
 */
class Desktop_Action : public Enum {
protected:
    const inline static char *className = "java.awt.Desktop$Action";
public:
    STATICINITIALIZE;

    Desktop_Action(jobject object) : JavaObject(object) {}

    static Desktop_Action valueOf(String arg0) { return Desktop_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.Desktop$Action;", arg0)); }

};


/**
 * Classpath: java.awt.desktop.SystemEventListener
 * Package name: java.awt.desktop
 */
class SystemEventListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.SystemEventListener";
public:
    STATICINITIALIZE;

    SystemEventListener(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.desktop.AboutHandler
 * Package name: java.awt.desktop
 */
class AboutHandler : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.AboutHandler";
public:
    STATICINITIALIZE;

    AboutHandler(jobject object) : JavaObject(object) {}

    void handleAbout(AboutEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "handleAbout", "(Ljava.awt.desktop.AboutEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.desktop.AppEvent
 * Package name: java.awt.desktop
 */
class AppEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.desktop.AppEvent";
public:
    STATICINITIALIZE;

    AppEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.desktop.PreferencesHandler
 * Package name: java.awt.desktop
 */
class PreferencesHandler : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.PreferencesHandler";
public:
    STATICINITIALIZE;

    PreferencesHandler(jobject object) : JavaObject(object) {}

    void handlePreferences(PreferencesEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePreferences", "(Ljava.awt.desktop.PreferencesEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.desktop.PreferencesEvent
 * Package name: java.awt.desktop
 */
class PreferencesEvent : public AppEvent {
protected:
    const inline static char *className = "java.awt.desktop.PreferencesEvent";
public:
    STATICINITIALIZE;

    PreferencesEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.desktop.OpenFilesHandler
 * Package name: java.awt.desktop
 */
class OpenFilesHandler : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.OpenFilesHandler";
public:
    STATICINITIALIZE;

    OpenFilesHandler(jobject object) : JavaObject(object) {}

    void openFiles(OpenFilesEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "openFiles", "(Ljava.awt.desktop.OpenFilesEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.desktop.FilesEvent
 * Package name: java.awt.desktop
 */
class FilesEvent : public AppEvent {
protected:
    const inline static char *className = "java.awt.desktop.FilesEvent";
public:
    STATICINITIALIZE;

    FilesEvent(jobject object) : JavaObject(object) {}

    List getFiles() { return List(*javaClass->invokeMethod<jobject>(this->object, "getFiles", "()Ljava.util.List;", )); }

};


/**
 * Classpath: java.awt.desktop.PrintFilesHandler
 * Package name: java.awt.desktop
 */
class PrintFilesHandler : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.PrintFilesHandler";
public:
    STATICINITIALIZE;

    PrintFilesHandler(jobject object) : JavaObject(object) {}

    void printFiles(PrintFilesEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "printFiles", "(Ljava.awt.desktop.PrintFilesEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.desktop.PrintFilesEvent
 * Package name: java.awt.desktop
 */
class PrintFilesEvent : public FilesEvent {
protected:
    const inline static char *className = "java.awt.desktop.PrintFilesEvent";
public:
    STATICINITIALIZE;

    PrintFilesEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.desktop.OpenURIHandler
 * Package name: java.awt.desktop
 */
class OpenURIHandler : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.OpenURIHandler";
public:
    STATICINITIALIZE;

    OpenURIHandler(jobject object) : JavaObject(object) {}

    void openURI(OpenURIEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "openURI", "(Ljava.awt.desktop.OpenURIEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.desktop.OpenURIEvent
 * Package name: java.awt.desktop
 */
class OpenURIEvent : public AppEvent {
protected:
    const inline static char *className = "java.awt.desktop.OpenURIEvent";
public:
    STATICINITIALIZE;

    OpenURIEvent(jobject object) : JavaObject(object) {}

    URI getURI() { return URI(*javaClass->invokeMethod<jobject>(this->object, "getURI", "()Ljava.net.URI;", )); }

};


/**
 * Classpath: java.awt.desktop.QuitHandler
 * Package name: java.awt.desktop
 */
class QuitHandler : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.QuitHandler";
public:
    STATICINITIALIZE;

    QuitHandler(jobject object) : JavaObject(object) {}

    void handleQuitRequestWith(QuitEvent arg0, QuitResponse arg1) { (*javaClass->invokeMethod<void>(this->object, "handleQuitRequestWith", "(Ljava.awt.desktop.QuitEvent;Ljava.awt.desktop.QuitResponse;)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.desktop.QuitEvent
 * Package name: java.awt.desktop
 */
class QuitEvent : public AppEvent {
protected:
    const inline static char *className = "java.awt.desktop.QuitEvent";
public:
    STATICINITIALIZE;

    QuitEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.desktop.QuitResponse
 * Package name: java.awt.desktop
 */
class QuitResponse : public JavaObject {
protected:
    const inline static char *className = "java.awt.desktop.QuitResponse";
public:
    STATICINITIALIZE;

    QuitResponse(jobject object) : JavaObject(object) {}

    void performQuit() { (*javaClass->invokeMethod<void>(this->object, "performQuit", "()V", )); }

    void cancelQuit() { (*javaClass->invokeMethod<void>(this->object, "cancelQuit", "()V", )); }

};


/**
 * Classpath: java.awt.desktop.QuitStrategy
 * Package name: java.awt.desktop
 */
class QuitStrategy : public Enum {
protected:
    const inline static char *className = "java.awt.desktop.QuitStrategy";
public:
    STATICINITIALIZE;

    QuitStrategy(jobject object) : JavaObject(object) {}

    static QuitStrategy valueOf(String arg0) { return QuitStrategy(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.desktop.QuitStrategy;", arg0)); }

};


/**
 * Classpath: javax.swing.Action
 * Package name: javax.swing
 */
class Action : public JavaObject {
protected:
    const inline static char *className = "javax.swing.Action";
public:
    STATICINITIALIZE;

    Action(jobject object) : JavaObject(object) {}

    Object getValue(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    bool accept(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accept", "(Ljava.lang.Object;)Z", arg0)); }

    void putValue(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "putValue", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    void removePropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    void addPropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    bool isEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnabled", "()Z", )); }

};


/**
 * Classpath: javax.swing.Icon
 * Package name: javax.swing
 */
class Icon : public JavaObject {
protected:
    const inline static char *className = "javax.swing.Icon";
public:
    STATICINITIALIZE;

    Icon(jobject object) : JavaObject(object) {}

    int getIconWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getIconWidth", "()I", )); }

    int getIconHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getIconHeight", "()I", )); }

    void paintIcon(Component arg0, Graphics arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "paintIcon", "(Ljava.awt.Component;Ljava.awt.Graphics;II)V", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: javax.swing.plaf.ComponentUI
 * Package name: javax.swing.plaf
 */
class ComponentUI : public Object {
protected:
    const inline static char *className = "javax.swing.plaf.ComponentUI";
public:
    STATICINITIALIZE;

    ComponentUI(jobject object) : JavaObject(object) {}

    void update(Graphics arg0, JComponent arg1) { (*javaClass->invokeMethod<void>(this->object, "update", "(Ljava.awt.Graphics;Ljavax.swing.JComponent;)V", arg0, arg1)); }

    bool contains(JComponent arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljavax.swing.JComponent;II)Z", arg0, arg1, arg2)); }

    void installUI(JComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "installUI", "(Ljavax.swing.JComponent;)V", arg0)); }

    Dimension getMaximumSize(JComponent arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMaximumSize", "(Ljavax.swing.JComponent;)Ljava.awt.Dimension;", arg0)); }

    int getAccessibleChildrenCount(JComponent arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleChildrenCount", "(Ljavax.swing.JComponent;)I", arg0)); }

    Accessible getAccessibleChild(JComponent arg0, int arg1) { return Accessible(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleChild", "(Ljavax.swing.JComponent;I)Ljavax.accessibility.Accessible;", arg0, arg1)); }

    int getBaseline(JComponent arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getBaseline", "(Ljavax.swing.JComponent;II)I", arg0, arg1, arg2)); }

    Component_BaselineResizeBehavior getBaselineResizeBehavior(JComponent arg0) { return Component_BaselineResizeBehavior(*javaClass->invokeMethod<jobject>(this->object, "getBaselineResizeBehavior", "(Ljavax.swing.JComponent;)Ljava.awt.Component$BaselineResizeBehavior;", arg0)); }

    Dimension getPreferredSize(JComponent arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "(Ljavax.swing.JComponent;)Ljava.awt.Dimension;", arg0)); }

    Dimension getMinimumSize(JComponent arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "(Ljavax.swing.JComponent;)Ljava.awt.Dimension;", arg0)); }

    void paint(Graphics arg0, JComponent arg1) { (*javaClass->invokeMethod<void>(this->object, "paint", "(Ljava.awt.Graphics;Ljavax.swing.JComponent;)V", arg0, arg1)); }

    void uninstallUI(JComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "uninstallUI", "(Ljavax.swing.JComponent;)V", arg0)); }

    static ComponentUI createUI(JComponent arg0) { return ComponentUI(*javaClass->invokeStaticMethod<jobject>(this->object, "createUI", "(Ljavax.swing.JComponent;)Ljavax.swing.plaf.ComponentUI;", arg0)); }

};


/**
 * Classpath: javax.swing.JComponent
 * Package name: javax.swing
 */
class JComponent : public Container {
protected:
    const inline static char *className = "javax.swing.JComponent";
public:
    STATICINITIALIZE;

    JComponent(jobject object) : JavaObject(object) {}

    void disable() { (*javaClass->invokeMethod<void>(this->object, "disable", "()V", )); }

    static AccessibleContext access_200(JComponent arg0) { return AccessibleContext(*javaClass->invokeStaticMethod<jobject>(this->object, "access$200", "(Ljavax.swing.JComponent;)Ljavax.accessibility.AccessibleContext;", arg0)); }

    static AccessibleContext access_300(JComponent arg0) { return AccessibleContext(*javaClass->invokeStaticMethod<jobject>(this->object, "access$300", "(Ljavax.swing.JComponent;)Ljavax.accessibility.AccessibleContext;", arg0)); }

    static AccessibleContext access_100(JComponent arg0) { return AccessibleContext(*javaClass->invokeStaticMethod<jobject>(this->object, "access$100", "(Ljavax.swing.JComponent;)Ljavax.accessibility.AccessibleContext;", arg0)); }

    static AccessibleContext access_000(JComponent arg0) { return AccessibleContext(*javaClass->invokeStaticMethod<jobject>(this->object, "access$000", "(Ljavax.swing.JComponent;)Ljavax.accessibility.AccessibleContext;", arg0)); }

    void setFlag(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setFlag", "(IZ)V", arg0, arg1)); }

    bool getFlag(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getFlag", "(I)Z", arg0)); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    void enable() { (*javaClass->invokeMethod<void>(this->object, "enable", "()V", )); }

    void update(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "update", "(Ljava.awt.Graphics;)V", arg0)); }

    bool contains(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(II)Z", arg0, arg1)); }

    Rectangle getBounds(Rectangle arg0) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;", arg0)); }

    Point getLocation(Point arg0) { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "(Ljava.awt.Point;)Ljava.awt.Point;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void print(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.awt.Graphics;)V", arg0)); }

    Dimension getSize(Dimension arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getSize", "(Ljava.awt.Dimension;)Ljava.awt.Dimension;", arg0)); }

    void setOpaque(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpaque", "(Z)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    bool isOpaque() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpaque", "()Z", )); }

    void paintBorder(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintBorder", "(Ljava.awt.Graphics;)V", arg0)); }

    void setUI(ComponentUI arg0) { (*javaClass->invokeMethod<void>(this->object, "setUI", "(Ljavax.swing.plaf.ComponentUI;)V", arg0)); }

    ComponentUI getUI() { return ComponentUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ComponentUI;", )); }

    bool processKeyBinding(KeyStroke arg0, KeyEvent arg1, int arg2, bool arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "processKeyBinding", "(Ljavax.swing.KeyStroke;Ljava.awt.event.KeyEvent;IZ)Z", arg0, arg1, arg2, arg3)); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    static byte getWriteObjCounter(JComponent arg0) { return byte(*javaClass->invokeStaticMethod<byte>(this->object, "getWriteObjCounter", "(Ljavax.swing.JComponent;)B", arg0)); }

    static void setWriteObjCounter(JComponent arg0, byte arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setWriteObjCounter", "(Ljavax.swing.JComponent;B)V", arg0, arg1)); }

    static Graphics safelyGetGraphics(Component arg0) { return Graphics(*javaClass->invokeStaticMethod<jobject>(this->object, "safelyGetGraphics", "(Ljava.awt.Component;)Ljava.awt.Graphics;", arg0)); }

    static Graphics safelyGetGraphics(Component arg0, Component arg1) { return Graphics(*javaClass->invokeStaticMethod<jobject>(this->object, "safelyGetGraphics", "(Ljava.awt.Component;Ljava.awt.Component;)Ljava.awt.Graphics;", arg0, arg1)); }

    static bool isComponentObtainingGraphicsFrom(Component arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isComponentObtainingGraphicsFrom", "(Ljava.awt.Component;)Z", arg0)); }

    bool getInheritsPopupMenu() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getInheritsPopupMenu", "()Z", )); }

    JPopupMenu getComponentPopupMenu() { return JPopupMenu(*javaClass->invokeMethod<jobject>(this->object, "getComponentPopupMenu", "()Ljavax.swing.JPopupMenu;", )); }

    bool isManagingFocus() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isManagingFocus", "()Z", )); }

    static Set getManagingFocusForwardTraversalKeys() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getManagingFocusForwardTraversalKeys", "()Ljava.util.Set;", )); }

    static Set getManagingFocusBackwardTraversalKeys() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getManagingFocusBackwardTraversalKeys", "()Ljava.util.Set;", )); }

    static Locale getDefaultLocale() { return Locale(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultLocale", "()Ljava.util.Locale;", )); }

    void uninstallUIAndProperties() { (*javaClass->invokeMethod<void>(this->object, "uninstallUIAndProperties", "()V", )); }

    void setVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }

    void setForeground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setForeground", "(Ljava.awt.Color;)V", arg0)); }

    Dimension getMaximumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMaximumSize", "()Ljava.awt.Dimension;", )); }

    float getAlignmentX() { return float(*javaClass->invokeMethod<float>(this->object, "getAlignmentX", "()F", )); }

    float getAlignmentY() { return float(*javaClass->invokeMethod<float>(this->object, "getAlignmentY", "()F", )); }

    void setFocusTraversalKeys(int arg0, Set arg1) { (*javaClass->invokeMethod<void>(this->object, "setFocusTraversalKeys", "(ILjava.util.Set;)V", arg0, arg1)); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    void repaint(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "repaint", "(Ljava.awt.Rectangle;)V", arg0)); }

    void repaint(long arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "repaint", "(JIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void processKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    void processMouseEvent(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void processMouseMotionEvent(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMouseMotionEvent", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    bool requestFocusInWindow() { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusInWindow", "()Z", )); }

    bool requestFocusInWindow(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocusInWindow", "(Z)Z", arg0)); }

    void compWriteObjectNotify() { (*javaClass->invokeMethod<void>(this->object, "compWriteObjectNotify", "()V", )); }

    bool isDoubleBuffered() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDoubleBuffered", "()Z", )); }

    void setPreferredSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setPreferredSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void setMaximumSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaximumSize", "(Ljava.awt.Dimension;)V", arg0)); }

    int getBaseline(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getBaseline", "(II)I", arg0, arg1)); }

    Component_BaselineResizeBehavior getBaselineResizeBehavior() { return Component_BaselineResizeBehavior(*javaClass->invokeMethod<jobject>(this->object, "getBaselineResizeBehavior", "()Ljava.awt.Component$BaselineResizeBehavior;", )); }

    void revalidate() { (*javaClass->invokeMethod<void>(this->object, "revalidate", "()V", )); }

    void printAll(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "printAll", "(Ljava.awt.Graphics;)V", arg0)); }

    Graphics getGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava.awt.Graphics;", )); }

    void reshape(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "reshape", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    FontMetrics getFontMetrics(Font arg0) { return FontMetrics(*javaClass->invokeMethod<jobject>(this->object, "getFontMetrics", "(Ljava.awt.Font;)Ljava.awt.FontMetrics;", arg0)); }

    void setFont(Font arg0) { (*javaClass->invokeMethod<void>(this->object, "setFont", "(Ljava.awt.Font;)V", arg0)); }

    void firePropertyChange(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, bool arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;ZZ)V", arg0, arg1, arg2)); }

    void firePropertyChange(String arg0, char arg1, char arg2) { (*javaClass->invokeMethod<void>(this->object, "firePropertyChange", "(Ljava.lang.String;CC)V", arg0, arg1, arg2)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    Dimension getPreferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "()Ljava.awt.Dimension;", )); }

    void setMinimumSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinimumSize", "(Ljava.awt.Dimension;)V", arg0)); }

    Dimension getMinimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "()Ljava.awt.Dimension;", )); }

    void hide() { (*javaClass->invokeMethod<void>(this->object, "hide", "()V", )); }

    bool alwaysOnTop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "alwaysOnTop", "()Z", )); }

    void requestFocus() { (*javaClass->invokeMethod<void>(this->object, "requestFocus", "()V", )); }

    bool requestFocus(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestFocus", "(Z)Z", arg0)); }

    void paint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paint", "(Ljava.awt.Graphics;)V", arg0)); }

    JRootPane getRootPane() { return JRootPane(*javaClass->invokeMethod<jobject>(this->object, "getRootPane", "()Ljavax.swing.JRootPane;", )); }

    bool isValidateRoot() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidateRoot", "()Z", )); }

    Insets getInsets(Insets arg0) { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getInsets", "(Ljava.awt.Insets;)Ljava.awt.Insets;", arg0)); }

    Insets getInsets() { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getInsets", "()Ljava.awt.Insets;", )); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

    void putClientProperty(Object arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "putClientProperty", "(Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1)); }

    int shouldDebugGraphics() { return int(*javaClass->invokeMethod<int>(this->object, "shouldDebugGraphics", "()I", )); }

    static Rectangle fetchRectangle() { return Rectangle(*javaClass->invokeStaticMethod<jobject>(this->object, "fetchRectangle", "()Ljava.awt.Rectangle;", )); }

    bool isOptimizedDrawingEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOptimizedDrawingEnabled", "()Z", )); }

    bool checkIfChildObscuredBySibling() { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkIfChildObscuredBySibling", "()Z", )); }

    static bool isLightweightComponent(Component arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isLightweightComponent", "(Ljava.awt.Component;)Z", arg0)); }

    int getObscuredState(int arg0, int arg1, int arg2, int arg3, int arg4) { return int(*javaClass->invokeMethod<int>(this->object, "getObscuredState", "(IIIII)I", arg0, arg1, arg2, arg3, arg4)); }

    static void recycleRectangle(Rectangle arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "recycleRectangle", "(Ljava.awt.Rectangle;)V", arg0)); }

    Border getBorder() { return Border(*javaClass->invokeMethod<jobject>(this->object, "getBorder", "()Ljavax.swing.border.Border;", )); }

    Graphics getComponentGraphics(Graphics arg0) { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getComponentGraphics", "(Ljava.awt.Graphics;)Ljava.awt.Graphics;", arg0)); }

    void adjustPaintFlags() { (*javaClass->invokeMethod<void>(this->object, "adjustPaintFlags", "()V", )); }

    bool isPainting() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPainting", "()Z", )); }

    bool rectangleIsObscured(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "rectangleIsObscured", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    void paintComponent(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintComponent", "(Ljava.awt.Graphics;)V", arg0)); }

    void printComponent(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "printComponent", "(Ljava.awt.Graphics;)V", arg0)); }

    void printBorder(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "printBorder", "(Ljava.awt.Graphics;)V", arg0)); }

    void paintChildren(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintChildren", "(Ljava.awt.Graphics;)V", arg0)); }

    void printChildren(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "printChildren", "(Ljava.awt.Graphics;)V", arg0)); }

    Component getNextFocusableComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getNextFocusableComponent", "()Ljava.awt.Component;", )); }

    void registerNextFocusableComponent() { (*javaClass->invokeMethod<void>(this->object, "registerNextFocusableComponent", "()V", )); }

    void registerNextFocusableComponent(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "registerNextFocusableComponent", "(Ljava.awt.Component;)V", arg0)); }

    void setNextFocusableComponent(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setNextFocusableComponent", "(Ljava.awt.Component;)V", arg0)); }

    void deregisterNextFocusableComponent() { (*javaClass->invokeMethod<void>(this->object, "deregisterNextFocusableComponent", "()V", )); }

    Object getClientProperty(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getClientProperty", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    float validateAlignment(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "validateAlignment", "(F)F", arg0)); }

    InputMap getInputMap(int arg0, bool arg1) { return InputMap(*javaClass->invokeMethod<jobject>(this->object, "getInputMap", "(IZ)Ljavax.swing.InputMap;", arg0, arg1)); }

    InputMap getInputMap() { return InputMap(*javaClass->invokeMethod<jobject>(this->object, "getInputMap", "()Ljavax.swing.InputMap;", )); }

    InputMap getInputMap(int arg0) { return InputMap(*javaClass->invokeMethod<jobject>(this->object, "getInputMap", "(I)Ljavax.swing.InputMap;", arg0)); }

    ActionMap getActionMap() { return ActionMap(*javaClass->invokeMethod<jobject>(this->object, "getActionMap", "()Ljavax.swing.ActionMap;", )); }

    ActionMap getActionMap(bool arg0) { return ActionMap(*javaClass->invokeMethod<jobject>(this->object, "getActionMap", "(Z)Ljavax.swing.ActionMap;", arg0)); }

    void registerWithKeyboardManager(KeyStroke arg0) { (*javaClass->invokeMethod<void>(this->object, "registerWithKeyboardManager", "(Ljavax.swing.KeyStroke;)V", arg0)); }

    void registerWithKeyboardManager(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "registerWithKeyboardManager", "(Z)V", arg0)); }

    void unregisterWithKeyboardManager() { (*javaClass->invokeMethod<void>(this->object, "unregisterWithKeyboardManager", "()V", )); }

    void unregisterWithKeyboardManager(KeyStroke arg0) { (*javaClass->invokeMethod<void>(this->object, "unregisterWithKeyboardManager", "(Ljavax.swing.KeyStroke;)V", arg0)); }

    void registerKeyboardAction(ActionListener arg0, KeyStroke arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "registerKeyboardAction", "(Ljava.awt.event.ActionListener;Ljavax.swing.KeyStroke;I)V", arg0, arg1, arg2)); }

    void registerKeyboardAction(ActionListener arg0, String arg1, KeyStroke arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "registerKeyboardAction", "(Ljava.awt.event.ActionListener;Ljava.lang.String;Ljavax.swing.KeyStroke;I)V", arg0, arg1, arg2, arg3)); }

    void setInputMap(int arg0, InputMap arg1) { (*javaClass->invokeMethod<void>(this->object, "setInputMap", "(ILjavax.swing.InputMap;)V", arg0, arg1)); }

    void setActionMap(ActionMap arg0) { (*javaClass->invokeMethod<void>(this->object, "setActionMap", "(Ljavax.swing.ActionMap;)V", arg0)); }

    static void setDefaultLocale(Locale arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefaultLocale", "(Ljava.util.Locale;)V", arg0)); }

    void processComponentKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processComponentKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    bool processKeyBindings(KeyEvent arg0, bool arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "processKeyBindings", "(Ljava.awt.event.KeyEvent;Z)Z", arg0, arg1)); }

    static bool processKeyBindingsForAllComponents(KeyEvent arg0, Container arg1, bool arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "processKeyBindingsForAllComponents", "(Ljava.awt.event.KeyEvent;Ljava.awt.Container;Z)Z", arg0, arg1, arg2)); }

    String getToolTipText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getToolTipText", "()Ljava.lang.String;", )); }

    String getToolTipText(MouseEvent arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getToolTipText", "(Ljava.awt.event.MouseEvent;)Ljava.lang.String;", arg0)); }

    void scrollRectToVisible(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "scrollRectToVisible", "(Ljava.awt.Rectangle;)V", arg0)); }

    ArrayTable getClientProperties() { return ArrayTable(*javaClass->invokeMethod<jobject>(this->object, "getClientProperties", "()Ljavax.swing.ArrayTable;", )); }

    void clientPropertyChanged(Object arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "clientPropertyChanged", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    void setAutoscrolls(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAutoscrolls", "(Z)V", arg0)); }

    void computeVisibleRect(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "computeVisibleRect", "(Ljava.awt.Rectangle;)V", arg0)); }

    static void computeVisibleRect(Component arg0, Rectangle arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "computeVisibleRect", "(Ljava.awt.Component;Ljava.awt.Rectangle;)V", arg0, arg1)); }

    void fireVetoableChange(String arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "fireVetoableChange", "(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    void addVetoableChangeListener(VetoableChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addVetoableChangeListener", "(Ljava.beans.VetoableChangeListener;)V", arg0)); }

    void removeVetoableChangeListener(VetoableChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeVetoableChangeListener", "(Ljava.beans.VetoableChangeListener;)V", arg0)); }

    AncestorNotifier getAncestorNotifier() { return AncestorNotifier(*javaClass->invokeMethod<jobject>(this->object, "getAncestorNotifier", "()Ljavax.swing.AncestorNotifier;", )); }

    void addAncestorListener(AncestorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addAncestorListener", "(Ljavax.swing.event.AncestorListener;)V", arg0)); }

    void removeAncestorListener(AncestorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAncestorListener", "(Ljavax.swing.event.AncestorListener;)V", arg0)); }

    bool getCreatedDoubleBuffer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCreatedDoubleBuffer", "()Z", )); }

    void setCreatedDoubleBuffer(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCreatedDoubleBuffer", "(Z)V", arg0)); }

    void paintImmediately(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "paintImmediately", "(Ljava.awt.Rectangle;)V", arg0)); }

    void paintImmediately(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "paintImmediately", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void _paintImmediately(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "_paintImmediately", "(IIII)V", arg0, arg1, arg2, arg3)); }

    bool isPaintingOrigin() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPaintingOrigin", "()Z", )); }

    void setPaintingChild(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setPaintingChild", "(Ljava.awt.Component;)V", arg0)); }

    static void getGraphicsInvoked(Component arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "getGraphicsInvoked", "(Ljava.awt.Component;)V", arg0)); }

    void setInheritsPopupMenu(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setInheritsPopupMenu", "(Z)V", arg0)); }

    void setComponentPopupMenu(JPopupMenu arg0) { (*javaClass->invokeMethod<void>(this->object, "setComponentPopupMenu", "(Ljavax.swing.JPopupMenu;)V", arg0)); }

    void paintForceDoubleBuffered(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintForceDoubleBuffered", "(Ljava.awt.Graphics;)V", arg0)); }

    bool isPaintingTile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPaintingTile", "()Z", )); }

    bool isPaintingForPrint() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPaintingForPrint", "()Z", )); }

    void setRequestFocusEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRequestFocusEnabled", "(Z)V", arg0)); }

    bool isRequestFocusEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRequestFocusEnabled", "()Z", )); }

    void grabFocus() { (*javaClass->invokeMethod<void>(this->object, "grabFocus", "()V", )); }

    void setVerifyInputWhenFocusTarget(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVerifyInputWhenFocusTarget", "(Z)V", arg0)); }

    bool getVerifyInputWhenFocusTarget() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getVerifyInputWhenFocusTarget", "()Z", )); }

    void setBorder(Border arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorder", "(Ljavax.swing.border.Border;)V", arg0)); }

    void setAlignmentY(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setAlignmentY", "(F)V", arg0)); }

    void setAlignmentX(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setAlignmentX", "(F)V", arg0)); }

    void setInputVerifier(InputVerifier arg0) { (*javaClass->invokeMethod<void>(this->object, "setInputVerifier", "(Ljavax.swing.InputVerifier;)V", arg0)); }

    InputVerifier getInputVerifier() { return InputVerifier(*javaClass->invokeMethod<jobject>(this->object, "getInputVerifier", "()Ljavax.swing.InputVerifier;", )); }

    void setDebugGraphicsOptions(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDebugGraphicsOptions", "(I)V", arg0)); }

    int getDebugGraphicsOptions() { return int(*javaClass->invokeMethod<int>(this->object, "getDebugGraphicsOptions", "()I", )); }

    void componentInputMapChanged(ComponentInputMap arg0) { (*javaClass->invokeMethod<void>(this->object, "componentInputMapChanged", "(Ljavax.swing.ComponentInputMap;)V", arg0)); }

    void unregisterKeyboardAction(KeyStroke arg0) { (*javaClass->invokeMethod<void>(this->object, "unregisterKeyboardAction", "(Ljavax.swing.KeyStroke;)V", arg0)); }

    int getConditionForKeyStroke(KeyStroke arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getConditionForKeyStroke", "(Ljavax.swing.KeyStroke;)I", arg0)); }

    ActionListener getActionForKeyStroke(KeyStroke arg0) { return ActionListener(*javaClass->invokeMethod<jobject>(this->object, "getActionForKeyStroke", "(Ljavax.swing.KeyStroke;)Ljava.awt.event.ActionListener;", arg0)); }

    void resetKeyboardActions() { (*javaClass->invokeMethod<void>(this->object, "resetKeyboardActions", "()V", )); }

    bool requestDefaultFocus() { return bool(*javaClass->invokeMethod<boolean>(this->object, "requestDefaultFocus", "()Z", )); }

    void setToolTipText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setToolTipText", "(Ljava.lang.String;)V", arg0)); }

    Point getToolTipLocation(MouseEvent arg0) { return Point(*javaClass->invokeMethod<jobject>(this->object, "getToolTipLocation", "(Ljava.awt.event.MouseEvent;)Ljava.awt.Point;", arg0)); }

    Point getPopupLocation(MouseEvent arg0) { return Point(*javaClass->invokeMethod<jobject>(this->object, "getPopupLocation", "(Ljava.awt.event.MouseEvent;)Ljava.awt.Point;", arg0)); }

    JToolTip createToolTip() { return JToolTip(*javaClass->invokeMethod<jobject>(this->object, "createToolTip", "()Ljavax.swing.JToolTip;", )); }

    bool getAutoscrolls() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAutoscrolls", "()Z", )); }

    void setTransferHandler(TransferHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransferHandler", "(Ljavax.swing.TransferHandler;)V", arg0)); }

    TransferHandler getTransferHandler() { return TransferHandler(*javaClass->invokeMethod<jobject>(this->object, "getTransferHandler", "()Ljavax.swing.TransferHandler;", )); }

    TransferHandler_DropLocation dropLocationForPoint(Point arg0) { return TransferHandler_DropLocation(*javaClass->invokeMethod<jobject>(this->object, "dropLocationForPoint", "(Ljava.awt.Point;)Ljavax.swing.TransferHandler$DropLocation;", arg0)); }

    Object setDropLocation(TransferHandler_DropLocation arg0, Object arg1, bool arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "setDropLocation", "(Ljavax.swing.TransferHandler$DropLocation;Ljava.lang.Object;Z)Ljava.lang.Object;", arg0, arg1, arg2)); }

    void dndDone() { (*javaClass->invokeMethod<void>(this->object, "dndDone", "()V", )); }

    void superProcessMouseMotionEvent(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "superProcessMouseMotionEvent", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void setUIProperty(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "setUIProperty", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    Rectangle getVisibleRect() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getVisibleRect", "()Ljava.awt.Rectangle;", )); }

    Container getTopLevelAncestor() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getTopLevelAncestor", "()Ljava.awt.Container;", )); }

    void paintToOffscreen(Graphics arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) { (*javaClass->invokeMethod<void>(this->object, "paintToOffscreen", "(Ljava.awt.Graphics;IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void setDoubleBuffered(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDoubleBuffered", "(Z)V", arg0)); }

    void lambda_revalidate_0() { (*javaClass->invokeMethod<void>(this->object, "lambda$revalidate$0", "()V", )); }

};


/**
 * Classpath: java.awt.AWTKeyStroke
 * Package name: java.awt
 */
class AWTKeyStroke : public Object {
protected:
    const inline static char *className = "java.awt.AWTKeyStroke";
public:
    STATICINITIALIZE;

    AWTKeyStroke(jobject object) : JavaObject(object) {}

    int getKeyCode() { return int(*javaClass->invokeMethod<int>(this->object, "getKeyCode", "()I", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

    static int mapOldModifiers(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "mapOldModifiers", "(I)I", arg0)); }

    static int mapNewModifiers(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "mapNewModifiers", "(I)I", arg0)); }

    static AWTKeyStroke getCachedStroke(char arg0, int arg1, int arg2, bool arg3) { return AWTKeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getCachedStroke", "(CIIZ)Ljava.awt.AWTKeyStroke;", arg0, arg1, arg2, arg3)); }

    static int getVKValue(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getVKValue", "(Ljava.lang.String;)I", arg0)); }

    static VKCollection getVKCollection() { return VKCollection(*javaClass->invokeStaticMethod<jobject>(this->object, "getVKCollection", "()Ljava.awt.VKCollection;", )); }

    static String getModifiersText(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getModifiersText", "(I)Ljava.lang.String;", arg0)); }

    static String getVKText(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getVKText", "(I)Ljava.lang.String;", arg0)); }

    static void registerSubclass(Class arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "registerSubclass", "(Ljava.lang.Class;)V", arg0)); }

    bool isOnKeyRelease() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOnKeyRelease", "()Z", )); }

    int getKeyEventType() { return int(*javaClass->invokeMethod<int>(this->object, "getKeyEventType", "()I", )); }

    char getKeyChar() { return char(*javaClass->invokeMethod<char>(this->object, "getKeyChar", "()C", )); }

    static AWTKeyStroke getAWTKeyStroke(String arg0) { return AWTKeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getAWTKeyStroke", "(Ljava.lang.String;)Ljava.awt.AWTKeyStroke;", arg0)); }

    static AWTKeyStroke getAWTKeyStroke(int arg0, int arg1) { return AWTKeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getAWTKeyStroke", "(II)Ljava.awt.AWTKeyStroke;", arg0, arg1)); }

    static AWTKeyStroke getAWTKeyStroke(int arg0, int arg1, bool arg2) { return AWTKeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getAWTKeyStroke", "(IIZ)Ljava.awt.AWTKeyStroke;", arg0, arg1, arg2)); }

    static AWTKeyStroke getAWTKeyStroke(Character arg0, int arg1) { return AWTKeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getAWTKeyStroke", "(Ljava.lang.Character;I)Ljava.awt.AWTKeyStroke;", arg0, arg1)); }

    static AWTKeyStroke getAWTKeyStroke(char arg0) { return AWTKeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getAWTKeyStroke", "(C)Ljava.awt.AWTKeyStroke;", arg0)); }

    static AWTKeyStroke getAWTKeyStrokeForEvent(KeyEvent arg0) { return AWTKeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getAWTKeyStrokeForEvent", "(Ljava.awt.event.KeyEvent;)Ljava.awt.AWTKeyStroke;", arg0)); }

};


/**
 * Classpath: java.awt.VKCollection
 * Package name: java.awt
 */
class VKCollection : public Object {
protected:
    const inline static char *className = "java.awt.VKCollection";
public:
    STATICINITIALIZE;

    VKCollection(jobject object) : JavaObject(object) {}

    void put(String arg0, Integer arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.String;Ljava.lang.Integer;)V", arg0, arg1)); }

    Integer findCode(String arg0) { return Integer(*javaClass->invokeMethod<jobject>(this->object, "findCode", "(Ljava.lang.String;)Ljava.lang.Integer;", arg0)); }

    String findName(Integer arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "findName", "(Ljava.lang.Integer;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: javax.swing.JPopupMenu
 * Package name: javax.swing
 */
class JPopupMenu : public JComponent {
protected:
    const inline static char *className = "javax.swing.JPopupMenu";
public:
    STATICINITIALIZE;

    JPopupMenu(jobject object) : JavaObject(object) {}

    JMenuItem add(Action arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljavax.swing.Action;)Ljavax.swing.JMenuItem;", arg0)); }

    JMenuItem add(String arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.String;)Ljavax.swing.JMenuItem;", arg0)); }

    JMenuItem add(JMenuItem arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljavax.swing.JMenuItem;)Ljavax.swing.JMenuItem;", arg0)); }

    void remove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(I)V", arg0)); }

    void insert(Action arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljavax.swing.Action;I)V", arg0, arg1)); }

    void insert(Component arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljava.awt.Component;I)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static bool getDefaultLightWeightPopupEnabled() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "getDefaultLightWeightPopupEnabled", "()Z", )); }

    GraphicsConfiguration getCurrentGraphicsConfiguration(Point arg0) { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getCurrentGraphicsConfiguration", "(Ljava.awt.Point;)Ljava.awt.GraphicsConfiguration;", arg0)); }

    static bool canPopupOverlapTaskBar() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "canPopupOverlapTaskBar", "()Z", )); }

    void showPopup() { (*javaClass->invokeMethod<void>(this->object, "showPopup", "()V", )); }

    void firePopupMenuCanceled() { (*javaClass->invokeMethod<void>(this->object, "firePopupMenuCanceled", "()V", )); }

    bool isPopupMenu() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPopupMenu", "()Z", )); }

    void firePopupMenuWillBecomeVisible() { (*javaClass->invokeMethod<void>(this->object, "firePopupMenuWillBecomeVisible", "()V", )); }

    void firePopupMenuWillBecomeInvisible() { (*javaClass->invokeMethod<void>(this->object, "firePopupMenuWillBecomeInvisible", "()V", )); }

    bool isLightWeightPopupEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLightWeightPopupEnabled", "()Z", )); }

    Point adjustPopupLocationToFitScreen(int arg0, int arg1) { return Point(*javaClass->invokeMethod<jobject>(this->object, "adjustPopupLocationToFitScreen", "(II)Ljava.awt.Point;", arg0, arg1)); }

    void setPopupSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setPopupSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void setPopupSize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setPopupSize", "(II)V", arg0, arg1)); }

    bool isSubPopupMenu(JPopupMenu arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSubPopupMenu", "(Ljavax.swing.JPopupMenu;)Z", arg0)); }

    static void setDefaultLightWeightPopupEnabled(bool arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setDefaultLightWeightPopupEnabled", "(Z)V", arg0)); }

    void setLightWeightPopupEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLightWeightPopupEnabled", "(Z)V", arg0)); }

    void addPopupMenuListener(PopupMenuListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addPopupMenuListener", "(Ljavax.swing.event.PopupMenuListener;)V", arg0)); }

    void removePopupMenuListener(PopupMenuListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removePopupMenuListener", "(Ljavax.swing.event.PopupMenuListener;)V", arg0)); }

    JPopupMenu getRootPopupMenu() { return JPopupMenu(*javaClass->invokeMethod<jobject>(this->object, "getRootPopupMenu", "()Ljavax.swing.JPopupMenu;", )); }

    void paintBorder(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintBorder", "(Ljava.awt.Graphics;)V", arg0)); }

    void setSelectionModel(SingleSelectionModel arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectionModel", "(Ljavax.swing.SingleSelectionModel;)V", arg0)); }

    void setUI(PopupMenuUI arg0) { (*javaClass->invokeMethod<void>(this->object, "setUI", "(Ljavax.swing.plaf.PopupMenuUI;)V", arg0)); }

    PopupMenuUI getUI() { return PopupMenuUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.PopupMenuUI;", )); }

    ComponentUI getUI() { return ComponentUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ComponentUI;", )); }

    Component getComponentAtIndex(int arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponentAtIndex", "(I)Ljava.awt.Component;", arg0)); }

    SingleSelectionModel getSelectionModel() { return SingleSelectionModel(*javaClass->invokeMethod<jobject>(this->object, "getSelectionModel", "()Ljavax.swing.SingleSelectionModel;", )); }

    int getComponentIndex(Component arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getComponentIndex", "(Ljava.awt.Component;)I", arg0)); }

    bool isBorderPainted() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBorderPainted", "()Z", )); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    void setSelected(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelected", "(Ljava.awt.Component;)V", arg0)); }

    void setBorderPainted(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderPainted", "(Z)V", arg0)); }

    Insets getMargin() { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getMargin", "()Ljava.awt.Insets;", )); }

    void menuSelectionChanged(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "menuSelectionChanged", "(Z)V", arg0)); }

    void setVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisible", "(Z)V", arg0)); }

    String getLabel() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLabel", "()Ljava.lang.String;", )); }

    void processKeyEvent(KeyEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    void processKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    bool isPopupTrigger(MouseEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPopupTrigger", "(Ljava.awt.event.MouseEvent;)Z", arg0)); }

    void processFocusEvent(FocusEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processFocusEvent", "(Ljava.awt.event.FocusEvent;)V", arg0)); }

    void processMouseEvent(MouseEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava.awt.event.MouseEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    void setLocation(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }

    static Frame getFrame(Component arg0) { return Frame(*javaClass->invokeStaticMethod<jobject>(this->object, "getFrame", "(Ljava.awt.Component;)Ljava.awt.Frame;", arg0)); }

    void show(Component arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "show", "(Ljava.awt.Component;II)V", arg0, arg1, arg2)); }

    bool isVisible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVisible", "()Z", )); }

    bool alwaysOnTop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "alwaysOnTop", "()Z", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    void pack() { (*javaClass->invokeMethod<void>(this->object, "pack", "()V", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void addSeparator() { (*javaClass->invokeMethod<void>(this->object, "addSeparator", "()V", )); }

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

    void setInvoker(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setInvoker", "(Ljava.awt.Component;)V", arg0)); }

    JMenuItem createActionComponent(Action arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "createActionComponent", "(Ljavax.swing.Action;)Ljavax.swing.JMenuItem;", arg0)); }

    Component getInvoker() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getInvoker", "()Ljava.awt.Component;", )); }

    PropertyChangeListener createActionChangeListener(JMenuItem arg0) { return PropertyChangeListener(*javaClass->invokeMethod<jobject>(this->object, "createActionChangeListener", "(Ljavax.swing.JMenuItem;)Ljava.beans.PropertyChangeListener;", arg0)); }

    void processMenuKeyEvent(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMenuKeyEvent", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void fireMenuKeyPressed(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuKeyPressed", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void fireMenuKeyReleased(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuKeyReleased", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void fireMenuKeyTyped(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuKeyTyped", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void addMenuKeyListener(MenuKeyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addMenuKeyListener", "(Ljavax.swing.event.MenuKeyListener;)V", arg0)); }

    void removeMenuKeyListener(MenuKeyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeMenuKeyListener", "(Ljavax.swing.event.MenuKeyListener;)V", arg0)); }

};


/**
 * Classpath: javax.swing.event.PopupMenuListener
 * Package name: javax.swing.event
 */
class PopupMenuListener : public JavaObject {
protected:
    const inline static char *className = "javax.swing.event.PopupMenuListener";
public:
    STATICINITIALIZE;

    PopupMenuListener(jobject object) : JavaObject(object) {}

    void popupMenuWillBecomeVisible(PopupMenuEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "popupMenuWillBecomeVisible", "(Ljavax.swing.event.PopupMenuEvent;)V", arg0)); }

    void popupMenuWillBecomeInvisible(PopupMenuEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "popupMenuWillBecomeInvisible", "(Ljavax.swing.event.PopupMenuEvent;)V", arg0)); }

    void popupMenuCanceled(PopupMenuEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "popupMenuCanceled", "(Ljavax.swing.event.PopupMenuEvent;)V", arg0)); }

};


/**
 * Classpath: javax.swing.event.PopupMenuEvent
 * Package name: javax.swing.event
 */
class PopupMenuEvent : public EventObject {
protected:
    const inline static char *className = "javax.swing.event.PopupMenuEvent";
public:
    STATICINITIALIZE;

    PopupMenuEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.SingleSelectionModel
 * Package name: javax.swing
 */
class SingleSelectionModel : public JavaObject {
protected:
    const inline static char *className = "javax.swing.SingleSelectionModel";
public:
    STATICINITIALIZE;

    SingleSelectionModel(jobject object) : JavaObject(object) {}

    bool isSelected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelected", "()Z", )); }

    void setSelectedIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectedIndex", "(I)V", arg0)); }

    int getSelectedIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getSelectedIndex", "()I", )); }

    void removeChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    void addChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    void clearSelection() { (*javaClass->invokeMethod<void>(this->object, "clearSelection", "()V", )); }

};


/**
 * Classpath: javax.swing.event.ChangeListener
 * Package name: javax.swing.event
 */
class ChangeListener : public JavaObject {
protected:
    const inline static char *className = "javax.swing.event.ChangeListener";
public:
    STATICINITIALIZE;

    ChangeListener(jobject object) : JavaObject(object) {}

    void stateChanged(ChangeEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "stateChanged", "(Ljavax.swing.event.ChangeEvent;)V", arg0)); }

};


/**
 * Classpath: javax.swing.event.ChangeEvent
 * Package name: javax.swing.event
 */
class ChangeEvent : public EventObject {
protected:
    const inline static char *className = "javax.swing.event.ChangeEvent";
public:
    STATICINITIALIZE;

    ChangeEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.plaf.PopupMenuUI
 * Package name: javax.swing.plaf
 */
class PopupMenuUI : public ComponentUI {
protected:
    const inline static char *className = "javax.swing.plaf.PopupMenuUI";
public:
    STATICINITIALIZE;

    PopupMenuUI(jobject object) : JavaObject(object) {}

    Popup getPopup(JPopupMenu arg0, int arg1, int arg2) { return Popup(*javaClass->invokeMethod<jobject>(this->object, "getPopup", "(Ljavax.swing.JPopupMenu;II)Ljavax.swing.Popup;", arg0, arg1, arg2)); }

    bool isPopupTrigger(MouseEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPopupTrigger", "(Ljava.awt.event.MouseEvent;)Z", arg0)); }

};


/**
 * Classpath: javax.swing.Popup
 * Package name: javax.swing
 */
class Popup : public Object {
protected:
    const inline static char *className = "javax.swing.Popup";
public:
    STATICINITIALIZE;

    Popup(jobject object) : JavaObject(object) {}

    void reset(Component arg0, Component arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "reset", "(Ljava.awt.Component;Ljava.awt.Component;II)V", arg0, arg1, arg2, arg3)); }

    Window getParentWindow(Component arg0) { return Window(*javaClass->invokeMethod<jobject>(this->object, "getParentWindow", "(Ljava.awt.Component;)Ljava.awt.Window;", arg0)); }

    Component createComponent(Component arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "createComponent", "(Ljava.awt.Component;)Ljava.awt.Component;", arg0)); }

    void show() { (*javaClass->invokeMethod<void>(this->object, "show", "()V", )); }

    void hide() { (*javaClass->invokeMethod<void>(this->object, "hide", "()V", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    void pack() { (*javaClass->invokeMethod<void>(this->object, "pack", "()V", )); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: [Ljavax.swing.MenuElement;
 */
class MenuElement_interface : public Object {
protected:
    const inline static char *className = "[Ljavax.swing.MenuElement;";
public:
    STATICINITIALIZE;

    MenuElement_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.MenuSelectionManager
 * Package name: javax.swing
 */
class MenuSelectionManager : public Object {
protected:
    const inline static char *className = "javax.swing.MenuSelectionManager";
public:
    STATICINITIALIZE;

    MenuSelectionManager(jobject object) : JavaObject(object) {}

    void printMenuElementArray(MenuElement_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "printMenuElementArray", "([Ljavax.swing.MenuElement;)V", arg0)); }

    void printMenuElementArray(MenuElement_interface arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "printMenuElementArray", "([Ljavax.swing.MenuElement;Z)V", arg0, arg1)); }

    bool isComponentPartOfCurrentMenu(MenuElement arg0, Component arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isComponentPartOfCurrentMenu", "(Ljavax.swing.MenuElement;Ljava.awt.Component;)Z", arg0, arg1)); }

    bool isComponentPartOfCurrentMenu(Component arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isComponentPartOfCurrentMenu", "(Ljava.awt.Component;)Z", arg0)); }

    void clearSelectedPath() { (*javaClass->invokeMethod<void>(this->object, "clearSelectedPath", "()V", )); }

    Component componentForPoint(Component arg0, Point arg1) { return Component(*javaClass->invokeMethod<jobject>(this->object, "componentForPoint", "(Ljava.awt.Component;Ljava.awt.Point;)Ljava.awt.Component;", arg0, arg1)); }

    void processKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    void processMouseEvent(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void removeChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    void addChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    static MenuSelectionManager defaultManager() { return MenuSelectionManager(*javaClass->invokeStaticMethod<jobject>(this->object, "defaultManager", "()Ljavax.swing.MenuSelectionManager;", )); }

    void setSelectedPath(MenuElement_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectedPath", "([Ljavax.swing.MenuElement;)V", arg0)); }

    void fireStateChanged() { (*javaClass->invokeMethod<void>(this->object, "fireStateChanged", "()V", )); }

};


/**
 * Classpath: javax.swing.MenuElement
 * Package name: javax.swing
 */
class MenuElement : public JavaObject {
protected:
    const inline static char *className = "javax.swing.MenuElement";
public:
    STATICINITIALIZE;

    MenuElement(jobject object) : JavaObject(object) {}

    void menuSelectionChanged(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "menuSelectionChanged", "(Z)V", arg0)); }

    void processKeyEvent(KeyEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    void processMouseEvent(MouseEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava.awt.event.MouseEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

};


/**
 * Classpath: javax.swing.event.MenuKeyListener
 * Package name: javax.swing.event
 */
class MenuKeyListener : public JavaObject {
protected:
    const inline static char *className = "javax.swing.event.MenuKeyListener";
public:
    STATICINITIALIZE;

    MenuKeyListener(jobject object) : JavaObject(object) {}

    void menuKeyPressed(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuKeyPressed", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void menuKeyReleased(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuKeyReleased", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void menuKeyTyped(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuKeyTyped", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.Component$BaselineResizeBehavior
 * Enclosing class: java.awt.Component
 * Package name: java.awt
 */
class Component_BaselineResizeBehavior : public Enum {
protected:
    const inline static char *className = "java.awt.Component$BaselineResizeBehavior";
public:
    STATICINITIALIZE;

    Component_BaselineResizeBehavior(jobject object) : JavaObject(object) {}

    static Component_BaselineResizeBehavior valueOf(String arg0) { return Component_BaselineResizeBehavior(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.Component$BaselineResizeBehavior;", arg0)); }

};


/**
 * Classpath: javax.swing.JRootPane
 * Package name: javax.swing
 */
class JRootPane : public JComponent {
protected:
    const inline static char *className = "javax.swing.JRootPane";
public:
    STATICINITIALIZE;

    JRootPane(jobject object) : JavaObject(object) {}

    void setMenuBar(JMenuBar arg0) { (*javaClass->invokeMethod<void>(this->object, "setMenuBar", "(Ljavax.swing.JMenuBar;)V", arg0)); }

    JMenuBar getMenuBar() { return JMenuBar(*javaClass->invokeMethod<jobject>(this->object, "getMenuBar", "()Ljavax.swing.JMenuBar;", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Component createGlassPane() { return Component(*javaClass->invokeMethod<jobject>(this->object, "createGlassPane", "()Ljava.awt.Component;", )); }

    void setGlassPane(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setGlassPane", "(Ljava.awt.Component;)V", arg0)); }

    JLayeredPane createLayeredPane() { return JLayeredPane(*javaClass->invokeMethod<jobject>(this->object, "createLayeredPane", "()Ljavax.swing.JLayeredPane;", )); }

    void setLayeredPane(JLayeredPane arg0) { (*javaClass->invokeMethod<void>(this->object, "setLayeredPane", "(Ljavax.swing.JLayeredPane;)V", arg0)); }

    Container createContentPane() { return Container(*javaClass->invokeMethod<jobject>(this->object, "createContentPane", "()Ljava.awt.Container;", )); }

    void setContentPane(Container arg0) { (*javaClass->invokeMethod<void>(this->object, "setContentPane", "(Ljava.awt.Container;)V", arg0)); }

    LayoutManager createRootLayout() { return LayoutManager(*javaClass->invokeMethod<jobject>(this->object, "createRootLayout", "()Ljava.awt.LayoutManager;", )); }

    int getWindowDecorationStyle() { return int(*javaClass->invokeMethod<int>(this->object, "getWindowDecorationStyle", "()I", )); }

    void setWindowDecorationStyle(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setWindowDecorationStyle", "(I)V", arg0)); }

    void setJMenuBar(JMenuBar arg0) { (*javaClass->invokeMethod<void>(this->object, "setJMenuBar", "(Ljavax.swing.JMenuBar;)V", arg0)); }

    JMenuBar getJMenuBar() { return JMenuBar(*javaClass->invokeMethod<jobject>(this->object, "getJMenuBar", "()Ljavax.swing.JMenuBar;", )); }

    Component getGlassPane() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getGlassPane", "()Ljava.awt.Component;", )); }

    void setDefaultButton(JButton arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultButton", "(Ljavax.swing.JButton;)V", arg0)); }

    JButton getDefaultButton() { return JButton(*javaClass->invokeMethod<jobject>(this->object, "getDefaultButton", "()Ljavax.swing.JButton;", )); }

    void setUseTrueDoubleBuffering(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setUseTrueDoubleBuffering", "(Z)V", arg0)); }

    bool getUseTrueDoubleBuffering() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getUseTrueDoubleBuffering", "()Z", )); }

    void setUI(RootPaneUI arg0) { (*javaClass->invokeMethod<void>(this->object, "setUI", "(Ljavax.swing.plaf.RootPaneUI;)V", arg0)); }

    ComponentUI getUI() { return ComponentUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ComponentUI;", )); }

    RootPaneUI getUI() { return RootPaneUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.RootPaneUI;", )); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    void disableTrueDoubleBuffering() { (*javaClass->invokeMethod<void>(this->object, "disableTrueDoubleBuffering", "()V", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    JLayeredPane getLayeredPane() { return JLayeredPane(*javaClass->invokeMethod<jobject>(this->object, "getLayeredPane", "()Ljavax.swing.JLayeredPane;", )); }

    Container getContentPane() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getContentPane", "()Ljava.awt.Container;", )); }

    bool isValidateRoot() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isValidateRoot", "()Z", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void addImpl(Component arg0, Object arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "addImpl", "(Ljava.awt.Component;Ljava.lang.Object;I)V", arg0, arg1, arg2)); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

    bool isOptimizedDrawingEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOptimizedDrawingEnabled", "()Z", )); }

    void setDoubleBuffered(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDoubleBuffered", "(Z)V", arg0)); }

};


/**
 * Classpath: javax.swing.JLayeredPane
 * Package name: javax.swing
 */
class JLayeredPane : public JComponent {
protected:
    const inline static char *className = "javax.swing.JLayeredPane";
public:
    STATICINITIALIZE;

    JLayeredPane(jobject object) : JavaObject(object) {}

    void setPosition(Component arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setPosition", "(Ljava.awt.Component;I)V", arg0, arg1)); }

    void remove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(I)V", arg0)); }

    int getLayer(Component arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getLayer", "(Ljava.awt.Component;)I", arg0)); }

    static int getLayer(JComponent arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getLayer", "(Ljavax.swing.JComponent;)I", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void removeAll() { (*javaClass->invokeMethod<void>(this->object, "removeAll", "()V", )); }

    void setLayer(Component arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setLayer", "(Ljava.awt.Component;I)V", arg0, arg1)); }

    void setLayer(Component arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setLayer", "(Ljava.awt.Component;II)V", arg0, arg1, arg2)); }

    int insertIndexForLayer(Component arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "insertIndexForLayer", "(Ljava.awt.Component;II)I", arg0, arg1, arg2)); }

    int insertIndexForLayer(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "insertIndexForLayer", "(II)I", arg0, arg1)); }

    void validateOptimizedDrawing() { (*javaClass->invokeMethod<void>(this->object, "validateOptimizedDrawing", "()V", )); }

    Hashtable getComponentToLayer() { return Hashtable(*javaClass->invokeMethod<jobject>(this->object, "getComponentToLayer", "()Ljava.util.Hashtable;", )); }

    Integer getObjectForLayer(int arg0) { return Integer(*javaClass->invokeMethod<jobject>(this->object, "getObjectForLayer", "(I)Ljava.lang.Integer;", arg0)); }

    int getIndexOf(Component arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getIndexOf", "(Ljava.awt.Component;)I", arg0)); }

    int getComponentCountInLayer(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getComponentCountInLayer", "(I)I", arg0)); }

    static void putLayer(JComponent arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "putLayer", "(Ljavax.swing.JComponent;I)V", arg0, arg1)); }

    static JLayeredPane getLayeredPaneAbove(Component arg0) { return JLayeredPane(*javaClass->invokeStaticMethod<jobject>(this->object, "getLayeredPaneAbove", "(Ljava.awt.Component;)Ljavax.swing.JLayeredPane;", arg0)); }

    void moveToFront(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "moveToFront", "(Ljava.awt.Component;)V", arg0)); }

    void moveToBack(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "moveToBack", "(Ljava.awt.Component;)V", arg0)); }

    int highestLayer() { return int(*javaClass->invokeMethod<int>(this->object, "highestLayer", "()I", )); }

    int lowestLayer() { return int(*javaClass->invokeMethod<int>(this->object, "lowestLayer", "()I", )); }

    void paint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paint", "(Ljava.awt.Graphics;)V", arg0)); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void addImpl(Component arg0, Object arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "addImpl", "(Ljava.awt.Component;Ljava.lang.Object;I)V", arg0, arg1, arg2)); }

    bool isOptimizedDrawingEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOptimizedDrawingEnabled", "()Z", )); }

    int getPosition(Component arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getPosition", "(Ljava.awt.Component;)I", arg0)); }

};


/**
 * Classpath: java.awt.Container$EventTargetFilter
 * Enclosing class: java.awt.Container
 * Package name: java.awt
 */
class Container_EventTargetFilter : public JavaObject {
protected:
    const inline static char *className = "java.awt.Container$EventTargetFilter";
public:
    STATICINITIALIZE;

    Container_EventTargetFilter(jobject object) : JavaObject(object) {}

    bool accept(Component arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accept", "(Ljava.awt.Component;)Z", arg0)); }

};


/**
 * Classpath: java.awt.event.ContainerListener
 * Package name: java.awt.event
 */
class ContainerListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.ContainerListener";
public:
    STATICINITIALIZE;

    ContainerListener(jobject object) : JavaObject(object) {}

    void componentAdded(ContainerEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentAdded", "(Ljava.awt.event.ContainerEvent;)V", arg0)); }

    void componentRemoved(ContainerEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentRemoved", "(Ljava.awt.event.ContainerEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.LayoutManager
 * Package name: java.awt
 */
class LayoutManager : public JavaObject {
protected:
    const inline static char *className = "java.awt.LayoutManager";
public:
    STATICINITIALIZE;

    LayoutManager(jobject object) : JavaObject(object) {}

    void addLayoutComponent(String arg0, Component arg1) { (*javaClass->invokeMethod<void>(this->object, "addLayoutComponent", "(Ljava.lang.String;Ljava.awt.Component;)V", arg0, arg1)); }

    void layoutContainer(Container arg0) { (*javaClass->invokeMethod<void>(this->object, "layoutContainer", "(Ljava.awt.Container;)V", arg0)); }

    Dimension preferredLayoutSize(Container arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "preferredLayoutSize", "(Ljava.awt.Container;)Ljava.awt.Dimension;", arg0)); }

    Dimension minimumLayoutSize(Container arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "minimumLayoutSize", "(Ljava.awt.Container;)Ljava.awt.Dimension;", arg0)); }

    void removeLayoutComponent(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "removeLayoutComponent", "(Ljava.awt.Component;)V", arg0)); }

};


/**
 * Classpath: java.awt.FocusTraversalPolicy
 * Package name: java.awt
 */
class FocusTraversalPolicy : public Object {
protected:
    const inline static char *className = "java.awt.FocusTraversalPolicy";
public:
    STATICINITIALIZE;

    FocusTraversalPolicy(jobject object) : JavaObject(object) {}

    Component getFirstComponent(Container arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getFirstComponent", "(Ljava.awt.Container;)Ljava.awt.Component;", arg0)); }

    Component getLastComponent(Container arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getLastComponent", "(Ljava.awt.Container;)Ljava.awt.Component;", arg0)); }

    Component getComponentAfter(Container arg0, Component arg1) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponentAfter", "(Ljava.awt.Container;Ljava.awt.Component;)Ljava.awt.Component;", arg0, arg1)); }

    Component getComponentBefore(Container arg0, Component arg1) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponentBefore", "(Ljava.awt.Container;Ljava.awt.Component;)Ljava.awt.Component;", arg0, arg1)); }

    Component getInitialComponent(Window arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getInitialComponent", "(Ljava.awt.Window;)Ljava.awt.Component;", arg0)); }

    Component getDefaultComponent(Container arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getDefaultComponent", "(Ljava.awt.Container;)Ljava.awt.Component;", arg0)); }

};


/**
 * Classpath: java.awt.ComponentOrientation
 * Package name: java.awt
 */
class ComponentOrientation : public Object {
protected:
    const inline static char *className = "java.awt.ComponentOrientation";
public:
    STATICINITIALIZE;

    ComponentOrientation(jobject object) : JavaObject(object) {}

    bool isHorizontal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHorizontal", "()Z", )); }

    static ComponentOrientation getOrientation(Locale arg0) { return ComponentOrientation(*javaClass->invokeStaticMethod<jobject>(this->object, "getOrientation", "(Ljava.util.Locale;)Ljava.awt.ComponentOrientation;", arg0)); }

    static ComponentOrientation getOrientation(ResourceBundle arg0) { return ComponentOrientation(*javaClass->invokeStaticMethod<jobject>(this->object, "getOrientation", "(Ljava.util.ResourceBundle;)Ljava.awt.ComponentOrientation;", arg0)); }

    bool isLeftToRight() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeftToRight", "()Z", )); }

};


/**
 * Classpath: javax.swing.AbstractButton
 * Package name: javax.swing
 */
class AbstractButton : public JComponent {
protected:
    const inline static char *className = "javax.swing.AbstractButton";
public:
    STATICINITIALIZE;

    AbstractButton(jobject object) : JavaObject(object) {}

    static AccessibleContext access_000(AbstractButton arg0) { return AccessibleContext(*javaClass->invokeStaticMethod<jobject>(this->object, "access$000", "(Ljavax.swing.AbstractButton;)Ljavax.accessibility.AccessibleContext;", arg0)); }

    Action getAction() { return Action(*javaClass->invokeMethod<jobject>(this->object, "getAction", "()Ljavax.swing.Action;", )); }

    void setText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setText", "(Ljava.lang.String;)V", arg0)); }

    void setIcon(Icon arg0) { (*javaClass->invokeMethod<void>(this->object, "setIcon", "(Ljavax.swing.Icon;)V", arg0)); }

    String getText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getText", "()Ljava.lang.String;", )); }

    bool isSelected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelected", "()Z", )); }

    ButtonModel getModel() { return ButtonModel(*javaClass->invokeMethod<jobject>(this->object, "getModel", "()Ljavax.swing.ButtonModel;", )); }

    void init(String arg0, Icon arg1) { (*javaClass->invokeMethod<void>(this->object, "init", "(Ljava.lang.String;Ljavax.swing.Icon;)V", arg0, arg1)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void paintBorder(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintBorder", "(Ljava.awt.Graphics;)V", arg0)); }

    void setUI(ButtonUI arg0) { (*javaClass->invokeMethod<void>(this->object, "setUI", "(Ljavax.swing.plaf.ButtonUI;)V", arg0)); }

    ButtonUI getUI() { return ButtonUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ButtonUI;", )); }

    ComponentUI getUI() { return ComponentUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ComponentUI;", )); }

    bool isBorderPainted() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBorderPainted", "()Z", )); }

    void setSelected(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelected", "(Z)V", arg0)); }

    void setBorderPainted(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderPainted", "(Z)V", arg0)); }

    void setMargin(Insets arg0) { (*javaClass->invokeMethod<void>(this->object, "setMargin", "(Ljava.awt.Insets;)V", arg0)); }

    Insets getMargin() { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getMargin", "()Ljava.awt.Insets;", )); }

    String getLabel() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLabel", "()Ljava.lang.String;", )); }

    String getActionCommand() { return String(*javaClass->invokeMethod<jobject>(this->object, "getActionCommand", "()Ljava.lang.String;", )); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    bool imageUpdate(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { return bool(*javaClass->invokeMethod<boolean>(this->object, "imageUpdate", "(Ljava.awt.Image;IIIII)Z", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void setLayout(LayoutManager arg0) { (*javaClass->invokeMethod<void>(this->object, "setLayout", "(Ljava.awt.LayoutManager;)V", arg0)); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    void addImpl(Component arg0, Object arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "addImpl", "(Ljava.awt.Component;Ljava.lang.Object;I)V", arg0, arg1, arg2)); }

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

    void addActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    void setActionCommand(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setActionCommand", "(Ljava.lang.String;)V", arg0)); }

    void removeActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

    void addItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void removeItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void clientPropertyChanged(Object arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "clientPropertyChanged", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    void setUIProperty(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "setUIProperty", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    void setAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "setAction", "(Ljavax.swing.Action;)V", arg0)); }

    void setModel(ButtonModel arg0) { (*javaClass->invokeMethod<void>(this->object, "setModel", "(Ljavax.swing.ButtonModel;)V", arg0)); }

    void removeChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    void addChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    void setHorizontalTextPosition(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorizontalTextPosition", "(I)V", arg0)); }

    void setVerticalTextPosition(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setVerticalTextPosition", "(I)V", arg0)); }

    PropertyChangeListener createActionPropertyChangeListener0(Action arg0) { return PropertyChangeListener(*javaClass->invokeMethod<jobject>(this->object, "createActionPropertyChangeListener0", "(Ljavax.swing.Action;)Ljava.beans.PropertyChangeListener;", arg0)); }

    void doClick(int arg0) { (*javaClass->invokeMethod<void>(this->object, "doClick", "(I)V", arg0)); }

    void doClick() { (*javaClass->invokeMethod<void>(this->object, "doClick", "()V", )); }

    void setMnemonic(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMnemonic", "(I)V", arg0)); }

    void setMnemonic(char arg0) { (*javaClass->invokeMethod<void>(this->object, "setMnemonic", "(C)V", arg0)); }

    void setFocusPainted(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setFocusPainted", "(Z)V", arg0)); }

    void setHorizontalAlignment(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorizontalAlignment", "(I)V", arg0)); }

    void configurePropertiesFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "configurePropertiesFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void setIconFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void actionPropertyChanged(Action arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "actionPropertyChanged", "(Ljavax.swing.Action;Ljava.lang.String;)V", arg0, arg1)); }

    void largeIconChanged(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "largeIconChanged", "(Ljavax.swing.Action;)V", arg0)); }

    void smallIconChanged(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "smallIconChanged", "(Ljavax.swing.Action;)V", arg0)); }

    void setTextFromAction(Action arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setTextFromAction", "(Ljavax.swing.Action;Z)V", arg0, arg1)); }

    int getMnemonic() { return int(*javaClass->invokeMethod<int>(this->object, "getMnemonic", "()I", )); }

    void updateDisplayedMnemonicIndex(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "updateDisplayedMnemonicIndex", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void setRolloverEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRolloverEnabled", "(Z)V", arg0)); }

    Icon getIcon() { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getIcon", "()Ljavax.swing.Icon;", )); }

    Icon getDisabledIcon() { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getDisabledIcon", "()Ljavax.swing.Icon;", )); }

    Icon getSelectedIcon() { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getSelectedIcon", "()Ljavax.swing.Icon;", )); }

    Icon getDisabledSelectedIcon() { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getDisabledSelectedIcon", "()Ljavax.swing.Icon;", )); }

    int checkVerticalKey(int arg0, String arg1) { return int(*javaClass->invokeMethod<int>(this->object, "checkVerticalKey", "(ILjava.lang.String;)I", arg0, arg1)); }

    int checkHorizontalKey(int arg0, String arg1) { return int(*javaClass->invokeMethod<int>(this->object, "checkHorizontalKey", "(ILjava.lang.String;)I", arg0, arg1)); }

    bool isRolloverEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRolloverEnabled", "()Z", )); }

    bool isListener(Class arg0, ActionListener arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isListener", "(Ljava.lang.Class;Ljava.awt.event.ActionListener;)Z", arg0, arg1)); }

    PropertyChangeListener createActionPropertyChangeListener(Action arg0) { return PropertyChangeListener(*javaClass->invokeMethod<jobject>(this->object, "createActionPropertyChangeListener", "(Ljavax.swing.Action;)Ljava.beans.PropertyChangeListener;", arg0)); }

    void setMnemonicFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "setMnemonicFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void setActionCommandFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "setActionCommandFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    bool shouldUpdateSelectedStateFromAction() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldUpdateSelectedStateFromAction", "()Z", )); }

    void setSelectedFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectedFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void setDisplayedMnemonicIndexFromAction(Action arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setDisplayedMnemonicIndexFromAction", "(Ljavax.swing.Action;Z)V", arg0, arg1)); }

    bool getHideActionText() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHideActionText", "()Z", )); }

    void setHideActionText(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHideActionText", "(Z)V", arg0)); }

    void setDisplayedMnemonicIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisplayedMnemonicIndex", "(I)V", arg0)); }

    void updateMnemonicProperties() { (*javaClass->invokeMethod<void>(this->object, "updateMnemonicProperties", "()V", )); }

    ChangeListener createChangeListener() { return ChangeListener(*javaClass->invokeMethod<jobject>(this->object, "createChangeListener", "()Ljavax.swing.event.ChangeListener;", )); }

    ActionListener createActionListener() { return ActionListener(*javaClass->invokeMethod<jobject>(this->object, "createActionListener", "()Ljava.awt.event.ActionListener;", )); }

    ItemListener createItemListener() { return ItemListener(*javaClass->invokeMethod<jobject>(this->object, "createItemListener", "()Ljava.awt.event.ItemListener;", )); }

    void setDisabledIcon(Icon arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisabledIcon", "(Ljavax.swing.Icon;)V", arg0)); }

    void setDisabledSelectedIcon(Icon arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisabledSelectedIcon", "(Ljavax.swing.Icon;)V", arg0)); }

    Icon getPressedIcon() { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getPressedIcon", "()Ljavax.swing.Icon;", )); }

    Icon getRolloverSelectedIcon() { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getRolloverSelectedIcon", "()Ljavax.swing.Icon;", )); }

    Icon getRolloverIcon() { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getRolloverIcon", "()Ljavax.swing.Icon;", )); }

    void setIconTextGap(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconTextGap", "(I)V", arg0)); }

    void setContentAreaFilled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setContentAreaFilled", "(Z)V", arg0)); }

    void setPressedIcon(Icon arg0) { (*javaClass->invokeMethod<void>(this->object, "setPressedIcon", "(Ljavax.swing.Icon;)V", arg0)); }

    void setSelectedIcon(Icon arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectedIcon", "(Ljavax.swing.Icon;)V", arg0)); }

    void setRolloverIcon(Icon arg0) { (*javaClass->invokeMethod<void>(this->object, "setRolloverIcon", "(Ljavax.swing.Icon;)V", arg0)); }

    void setRolloverSelectedIcon(Icon arg0) { (*javaClass->invokeMethod<void>(this->object, "setRolloverSelectedIcon", "(Ljavax.swing.Icon;)V", arg0)); }

    int getVerticalAlignment() { return int(*javaClass->invokeMethod<int>(this->object, "getVerticalAlignment", "()I", )); }

    void setVerticalAlignment(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setVerticalAlignment", "(I)V", arg0)); }

    int getHorizontalAlignment() { return int(*javaClass->invokeMethod<int>(this->object, "getHorizontalAlignment", "()I", )); }

    int getVerticalTextPosition() { return int(*javaClass->invokeMethod<int>(this->object, "getVerticalTextPosition", "()I", )); }

    int getHorizontalTextPosition() { return int(*javaClass->invokeMethod<int>(this->object, "getHorizontalTextPosition", "()I", )); }

    int getIconTextGap() { return int(*javaClass->invokeMethod<int>(this->object, "getIconTextGap", "()I", )); }

    bool isFocusPainted() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFocusPainted", "()Z", )); }

    bool isContentAreaFilled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isContentAreaFilled", "()Z", )); }

    int getDisplayedMnemonicIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getDisplayedMnemonicIndex", "()I", )); }

    void setMultiClickThreshhold(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setMultiClickThreshhold", "(J)V", arg0)); }

    long getMultiClickThreshhold() { return long(*javaClass->invokeMethod<long>(this->object, "getMultiClickThreshhold", "()J", )); }

    void fireStateChanged() { (*javaClass->invokeMethod<void>(this->object, "fireStateChanged", "()V", )); }

    void fireActionPerformed(ActionEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireActionPerformed", "(Ljava.awt.event.ActionEvent;)V", arg0)); }

    void fireItemStateChanged(ItemEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireItemStateChanged", "(Ljava.awt.event.ItemEvent;)V", arg0)); }

    AbstractButton_Handler getHandler() { return AbstractButton_Handler(*javaClass->invokeMethod<jobject>(this->object, "getHandler", "()Ljavax.swing.AbstractButton$Handler;", )); }

};


/**
 * Classpath: javax.swing.ButtonModel
 * Package name: javax.swing
 */
class ButtonModel : public JavaObject {
protected:
    const inline static char *className = "javax.swing.ButtonModel";
public:
    STATICINITIALIZE;

    ButtonModel(jobject object) : JavaObject(object) {}

    bool isPressed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPressed", "()Z", )); }

    bool isSelected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelected", "()Z", )); }

    void setGroup(ButtonGroup arg0) { (*javaClass->invokeMethod<void>(this->object, "setGroup", "(Ljavax.swing.ButtonGroup;)V", arg0)); }

    void setSelected(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelected", "(Z)V", arg0)); }

    String getActionCommand() { return String(*javaClass->invokeMethod<jobject>(this->object, "getActionCommand", "()Ljava.lang.String;", )); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    void addActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    void setActionCommand(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setActionCommand", "(Ljava.lang.String;)V", arg0)); }

    void removeActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    void addItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void removeItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void removeChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    void addChangeListener(ChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addChangeListener", "(Ljavax.swing.event.ChangeListener;)V", arg0)); }

    void setMnemonic(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMnemonic", "(I)V", arg0)); }

    bool isArmed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isArmed", "()Z", )); }

    void setArmed(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setArmed", "(Z)V", arg0)); }

    int getMnemonic() { return int(*javaClass->invokeMethod<int>(this->object, "getMnemonic", "()I", )); }

    void setPressed(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setPressed", "(Z)V", arg0)); }

    void setRollover(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRollover", "(Z)V", arg0)); }

    ButtonGroup getGroup() { return ButtonGroup(*javaClass->invokeMethod<jobject>(this->object, "getGroup", "()Ljavax.swing.ButtonGroup;", )); }

    bool isRollover() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRollover", "()Z", )); }

    bool isEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnabled", "()Z", )); }

};


/**
 * Classpath: javax.swing.ButtonGroup
 * Package name: javax.swing
 */
class ButtonGroup : public Object {
protected:
    const inline static char *className = "javax.swing.ButtonGroup";
public:
    STATICINITIALIZE;

    ButtonGroup(jobject object) : JavaObject(object) {}

    Enumeration getElements() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getElements", "()Ljava.util.Enumeration;", )); }

    bool isSelected(ButtonModel arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelected", "(Ljavax.swing.ButtonModel;)Z", arg0)); }

    void add(AbstractButton arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljavax.swing.AbstractButton;)V", arg0)); }

    void remove(AbstractButton arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljavax.swing.AbstractButton;)V", arg0)); }

    ButtonModel getSelection() { return ButtonModel(*javaClass->invokeMethod<jobject>(this->object, "getSelection", "()Ljavax.swing.ButtonModel;", )); }

    int getButtonCount() { return int(*javaClass->invokeMethod<int>(this->object, "getButtonCount", "()I", )); }

    void setSelected(ButtonModel arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setSelected", "(Ljavax.swing.ButtonModel;Z)V", arg0, arg1)); }

    void clearSelection() { (*javaClass->invokeMethod<void>(this->object, "clearSelection", "()V", )); }

};


/**
 * Classpath: java.awt.event.ItemListener
 * Package name: java.awt.event
 */
class ItemListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.ItemListener";
public:
    STATICINITIALIZE;

    ItemListener(jobject object) : JavaObject(object) {}

    void itemStateChanged(ItemEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "itemStateChanged", "(Ljava.awt.event.ItemEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.ItemEvent
 * Package name: java.awt.event
 */
class ItemEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.ItemEvent";
public:
    STATICINITIALIZE;

    ItemEvent(jobject object) : JavaObject(object) {}

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Object getItem() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getItem", "()Ljava.lang.Object;", )); }

    ItemSelectable getItemSelectable() { return ItemSelectable(*javaClass->invokeMethod<jobject>(this->object, "getItemSelectable", "()Ljava.awt.ItemSelectable;", )); }

    int getStateChange() { return int(*javaClass->invokeMethod<int>(this->object, "getStateChange", "()I", )); }

};


/**
 * Classpath: java.awt.ItemSelectable
 * Package name: java.awt
 */
class ItemSelectable : public JavaObject {
protected:
    const inline static char *className = "java.awt.ItemSelectable";
public:
    STATICINITIALIZE;

    ItemSelectable(jobject object) : JavaObject(object) {}

    void addItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void removeItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

};


/**
 * Classpath: javax.swing.plaf.ButtonUI
 * Package name: javax.swing.plaf
 */
class ButtonUI : public ComponentUI {
protected:
    const inline static char *className = "javax.swing.plaf.ButtonUI";
public:
    STATICINITIALIZE;

    ButtonUI(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.AbstractButton$Handler
 * Enclosing class: javax.swing.AbstractButton
 * Package name: javax.swing
 */
class AbstractButton_Handler : public Object {
protected:
    const inline static char *className = "javax.swing.AbstractButton$Handler";
public:
    STATICINITIALIZE;

    AbstractButton_Handler(jobject object) : JavaObject(object) {}

    void actionPerformed(ActionEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "actionPerformed", "(Ljava.awt.event.ActionEvent;)V", arg0)); }

    void itemStateChanged(ItemEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "itemStateChanged", "(Ljava.awt.event.ItemEvent;)V", arg0)); }

    void stateChanged(ChangeEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "stateChanged", "(Ljavax.swing.event.ChangeEvent;)V", arg0)); }

};


/**
 * Classpath: javax.swing.plaf.RootPaneUI
 * Package name: javax.swing.plaf
 */
class RootPaneUI : public ComponentUI {
protected:
    const inline static char *className = "javax.swing.plaf.RootPaneUI";
public:
    STATICINITIALIZE;

    RootPaneUI(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.border.Border
 * Package name: javax.swing.border
 */
class Border : public JavaObject {
protected:
    const inline static char *className = "javax.swing.border.Border";
public:
    STATICINITIALIZE;

    Border(jobject object) : JavaObject(object) {}

    bool isBorderOpaque() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBorderOpaque", "()Z", )); }

    void paintBorder(Component arg0, Graphics arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "paintBorder", "(Ljava.awt.Component;Ljava.awt.Graphics;IIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Insets getBorderInsets(Component arg0) { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getBorderInsets", "(Ljava.awt.Component;)Ljava.awt.Insets;", arg0)); }

};


/**
 * Classpath: javax.swing.InputMap
 * Package name: javax.swing
 */
class InputMap : public Object {
protected:
    const inline static char *className = "javax.swing.InputMap";
public:
    STATICINITIALIZE;

    InputMap(jobject object) : JavaObject(object) {}

    void remove(KeyStroke arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljavax.swing.KeyStroke;)V", arg0)); }

    Object get(KeyStroke arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljavax.swing.KeyStroke;)Ljava.lang.Object;", arg0)); }

    void put(KeyStroke arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljavax.swing.KeyStroke;Ljava.lang.Object;)V", arg0, arg1)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    InputMap getParent() { return InputMap(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljavax.swing.InputMap;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void setParent(InputMap arg0) { (*javaClass->invokeMethod<void>(this->object, "setParent", "(Ljavax.swing.InputMap;)V", arg0)); }

};


/**
 * Classpath: javax.swing.ActionMap
 * Package name: javax.swing
 */
class ActionMap : public Object {
protected:
    const inline static char *className = "javax.swing.ActionMap";
public:
    STATICINITIALIZE;

    ActionMap(jobject object) : JavaObject(object) {}

    void remove(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.lang.Object;)V", arg0)); }

    Action get(Object arg0) { return Action(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljavax.swing.Action;", arg0)); }

    void put(Object arg0, Action arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.Object;Ljavax.swing.Action;)V", arg0, arg1)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    ActionMap getParent() { return ActionMap(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljavax.swing.ActionMap;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void setParent(ActionMap arg0) { (*javaClass->invokeMethod<void>(this->object, "setParent", "(Ljavax.swing.ActionMap;)V", arg0)); }

};


/**
 * Classpath: javax.swing.ArrayTable
 * Package name: javax.swing
 */
class ArrayTable : public Object {
protected:
    const inline static char *className = "javax.swing.ArrayTable";
public:
    STATICINITIALIZE;

    ArrayTable(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    void put(Object arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1)); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    bool isArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isArray", "()Z", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    void grow() { (*javaClass->invokeMethod<void>(this->object, "grow", "()V", )); }

    void shrink() { (*javaClass->invokeMethod<void>(this->object, "shrink", "()V", )); }

    static void writeArrayTable(ObjectOutputStream arg0, ArrayTable arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "writeArrayTable", "(Ljava.io.ObjectOutputStream;Ljavax.swing.ArrayTable;)V", arg0, arg1)); }

};


/**
 * Classpath: java.beans.VetoableChangeListener
 * Package name: java.beans
 */
class VetoableChangeListener : public JavaObject {
protected:
    const inline static char *className = "java.beans.VetoableChangeListener";
public:
    STATICINITIALIZE;

    VetoableChangeListener(jobject object) : JavaObject(object) {}

    void vetoableChange(PropertyChangeEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "vetoableChange", "(Ljava.beans.PropertyChangeEvent;)V", arg0)); }

};


/**
 * Classpath: javax.swing.AncestorNotifier
 * Package name: javax.swing
 */
class AncestorNotifier : public Object {
protected:
    const inline static char *className = "javax.swing.AncestorNotifier";
public:
    STATICINITIALIZE;

    AncestorNotifier(jobject object) : JavaObject(object) {}

    void addListeners(Component arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "addListeners", "(Ljava.awt.Component;Z)V", arg0, arg1)); }

    void removeListeners(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "removeListeners", "(Ljava.awt.Component;)V", arg0)); }

    void fireAncestorMoved(JComponent arg0, int arg1, Container arg2, Container arg3) { (*javaClass->invokeMethod<void>(this->object, "fireAncestorMoved", "(Ljavax.swing.JComponent;ILjava.awt.Container;Ljava.awt.Container;)V", arg0, arg1, arg2, arg3)); }

    void fireAncestorAdded(JComponent arg0, int arg1, Container arg2, Container arg3) { (*javaClass->invokeMethod<void>(this->object, "fireAncestorAdded", "(Ljavax.swing.JComponent;ILjava.awt.Container;Ljava.awt.Container;)V", arg0, arg1, arg2, arg3)); }

    void fireAncestorRemoved(JComponent arg0, int arg1, Container arg2, Container arg3) { (*javaClass->invokeMethod<void>(this->object, "fireAncestorRemoved", "(Ljavax.swing.JComponent;ILjava.awt.Container;Ljava.awt.Container;)V", arg0, arg1, arg2, arg3)); }

    void propertyChange(PropertyChangeEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "propertyChange", "(Ljava.beans.PropertyChangeEvent;)V", arg0)); }

    void componentResized(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentResized", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void componentMoved(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentMoved", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void componentShown(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentShown", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void componentHidden(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentHidden", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void addAncestorListener(AncestorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addAncestorListener", "(Ljavax.swing.event.AncestorListener;)V", arg0)); }

    void removeAncestorListener(AncestorListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAncestorListener", "(Ljavax.swing.event.AncestorListener;)V", arg0)); }

    void removeAllListeners() { (*javaClass->invokeMethod<void>(this->object, "removeAllListeners", "()V", )); }

};


/**
 * Classpath: javax.swing.event.AncestorListener
 * Package name: javax.swing.event
 */
class AncestorListener : public JavaObject {
protected:
    const inline static char *className = "javax.swing.event.AncestorListener";
public:
    STATICINITIALIZE;

    AncestorListener(jobject object) : JavaObject(object) {}

    void ancestorAdded(AncestorEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "ancestorAdded", "(Ljavax.swing.event.AncestorEvent;)V", arg0)); }

    void ancestorRemoved(AncestorEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "ancestorRemoved", "(Ljavax.swing.event.AncestorEvent;)V", arg0)); }

    void ancestorMoved(AncestorEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "ancestorMoved", "(Ljavax.swing.event.AncestorEvent;)V", arg0)); }

};


/**
 * Classpath: javax.swing.event.AncestorEvent
 * Package name: javax.swing.event
 */
class AncestorEvent : public AWTEvent {
protected:
    const inline static char *className = "javax.swing.event.AncestorEvent";
public:
    STATICINITIALIZE;

    AncestorEvent(jobject object) : JavaObject(object) {}

    Container getAncestor() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getAncestor", "()Ljava.awt.Container;", )); }

    Container getAncestorParent() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getAncestorParent", "()Ljava.awt.Container;", )); }

    JComponent getComponent() { return JComponent(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljavax.swing.JComponent;", )); }

};


/**
 * Classpath: javax.swing.InputVerifier
 * Package name: javax.swing
 */
class InputVerifier : public Object {
protected:
    const inline static char *className = "javax.swing.InputVerifier";
public:
    STATICINITIALIZE;

    InputVerifier(jobject object) : JavaObject(object) {}

    bool shouldYieldFocus(JComponent arg0, JComponent arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldYieldFocus", "(Ljavax.swing.JComponent;Ljavax.swing.JComponent;)Z", arg0, arg1)); }

    bool shouldYieldFocus(JComponent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldYieldFocus", "(Ljavax.swing.JComponent;)Z", arg0)); }

    bool verifyTarget(JComponent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "verifyTarget", "(Ljavax.swing.JComponent;)Z", arg0)); }

    bool verify(JComponent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "verify", "(Ljavax.swing.JComponent;)Z", arg0)); }

};


/**
 * Classpath: javax.swing.ComponentInputMap
 * Package name: javax.swing
 */
class ComponentInputMap : public InputMap {
protected:
    const inline static char *className = "javax.swing.ComponentInputMap";
public:
    STATICINITIALIZE;

    ComponentInputMap(jobject object) : JavaObject(object) {}

    void remove(KeyStroke arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljavax.swing.KeyStroke;)V", arg0)); }

    void put(KeyStroke arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "put", "(Ljavax.swing.KeyStroke;Ljava.lang.Object;)V", arg0, arg1)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    void setParent(InputMap arg0) { (*javaClass->invokeMethod<void>(this->object, "setParent", "(Ljavax.swing.InputMap;)V", arg0)); }

    JComponent getComponent() { return JComponent(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljavax.swing.JComponent;", )); }

};


/**
 * Classpath: javax.swing.JToolTip
 * Package name: javax.swing
 */
class JToolTip : public JComponent {
protected:
    const inline static char *className = "javax.swing.JToolTip";
public:
    STATICINITIALIZE;

    JToolTip(jobject object) : JavaObject(object) {}

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void setTipText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTipText", "(Ljava.lang.String;)V", arg0)); }

    String getTipText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTipText", "()Ljava.lang.String;", )); }

    ComponentUI getUI() { return ComponentUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ComponentUI;", )); }

    ToolTipUI getUI() { return ToolTipUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ToolTipUI;", )); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    void setComponent(JComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "setComponent", "(Ljavax.swing.JComponent;)V", arg0)); }

    bool alwaysOnTop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "alwaysOnTop", "()Z", )); }

    JComponent getComponent() { return JComponent(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljavax.swing.JComponent;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

};


/**
 * Classpath: javax.swing.plaf.ToolTipUI
 * Package name: javax.swing.plaf
 */
class ToolTipUI : public ComponentUI {
protected:
    const inline static char *className = "javax.swing.plaf.ToolTipUI";
public:
    STATICINITIALIZE;

    ToolTipUI(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.TransferHandler
 * Package name: javax.swing
 */
class TransferHandler : public Object {
protected:
    const inline static char *className = "javax.swing.TransferHandler";
public:
    STATICINITIALIZE;

    TransferHandler(jobject object) : JavaObject(object) {}

    int getSourceActions(JComponent arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getSourceActions", "(Ljavax.swing.JComponent;)I", arg0)); }

    void exportDone(JComponent arg0, Transferable arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "exportDone", "(Ljavax.swing.JComponent;Ljava.awt.datatransfer.Transferable;I)V", arg0, arg1, arg2)); }

    Transferable createTransferable(JComponent arg0) { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "createTransferable", "(Ljavax.swing.JComponent;)Ljava.awt.datatransfer.Transferable;", arg0)); }

    bool importData(TransferHandler_TransferSupport arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "importData", "(Ljavax.swing.TransferHandler$TransferSupport;)Z", arg0)); }

    bool importData(JComponent arg0, Transferable arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "importData", "(Ljavax.swing.JComponent;Ljava.awt.datatransfer.Transferable;)Z", arg0, arg1)); }

    PropertyDescriptor getPropertyDescriptor(JComponent arg0) { return PropertyDescriptor(*javaClass->invokeMethod<jobject>(this->object, "getPropertyDescriptor", "(Ljavax.swing.JComponent;)Ljava.beans.PropertyDescriptor;", arg0)); }

    DataFlavor getPropertyDataFlavor(Class arg0, DataFlavor_interface arg1) { return DataFlavor(*javaClass->invokeMethod<jobject>(this->object, "getPropertyDataFlavor", "(Ljava.lang.Class;[Ljava.awt.datatransfer.DataFlavor;)Ljava.awt.datatransfer.DataFlavor;", arg0, arg1)); }

    bool canImport(JComponent arg0, DataFlavor_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canImport", "(Ljavax.swing.JComponent;[Ljava.awt.datatransfer.DataFlavor;)Z", arg0, arg1)); }

    bool canImport(TransferHandler_TransferSupport arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canImport", "(Ljavax.swing.TransferHandler$TransferSupport;)Z", arg0)); }

    static Action getCutAction() { return Action(*javaClass->invokeStaticMethod<jobject>(this->object, "getCutAction", "()Ljavax.swing.Action;", )); }

    static Action getCopyAction() { return Action(*javaClass->invokeStaticMethod<jobject>(this->object, "getCopyAction", "()Ljavax.swing.Action;", )); }

    static Action getPasteAction() { return Action(*javaClass->invokeStaticMethod<jobject>(this->object, "getPasteAction", "()Ljavax.swing.Action;", )); }

    void setDragImage(Image arg0) { (*javaClass->invokeMethod<void>(this->object, "setDragImage", "(Ljava.awt.Image;)V", arg0)); }

    Image getDragImage() { return Image(*javaClass->invokeMethod<jobject>(this->object, "getDragImage", "()Ljava.awt.Image;", )); }

    void setDragImageOffset(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "setDragImageOffset", "(Ljava.awt.Point;)V", arg0)); }

    Point getDragImageOffset() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getDragImageOffset", "()Ljava.awt.Point;", )); }

    void exportAsDrag(JComponent arg0, InputEvent arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "exportAsDrag", "(Ljavax.swing.JComponent;Ljava.awt.event.InputEvent;I)V", arg0, arg1, arg2)); }

    void exportToClipboard(JComponent arg0, Clipboard arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "exportToClipboard", "(Ljavax.swing.JComponent;Ljava.awt.datatransfer.Clipboard;I)V", arg0, arg1, arg2)); }

    Icon getVisualRepresentation(Transferable arg0) { return Icon(*javaClass->invokeMethod<jobject>(this->object, "getVisualRepresentation", "(Ljava.awt.datatransfer.Transferable;)Ljavax.swing.Icon;", arg0)); }

    static DropTargetListener getDropTargetListener() { return DropTargetListener(*javaClass->invokeStaticMethod<jobject>(this->object, "getDropTargetListener", "()Ljava.awt.dnd.DropTargetListener;", )); }

};


/**
 * Classpath: javax.swing.TransferHandler$TransferSupport
 * Enclosing class: javax.swing.TransferHandler
 * Package name: javax.swing
 */
class TransferHandler_TransferSupport : public Object {
protected:
    const inline static char *className = "javax.swing.TransferHandler$TransferSupport";
public:
    STATICINITIALIZE;

    TransferHandler_TransferSupport(jobject object) : JavaObject(object) {}

    bool isDataFlavorSupported(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDataFlavorSupported", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    Transferable getTransferable() { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava.awt.datatransfer.Transferable;", )); }

    bool isDrop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDrop", "()Z", )); }

    void setDNDVariables(Component arg0, DropTargetEvent arg1) { (*javaClass->invokeMethod<void>(this->object, "setDNDVariables", "(Ljava.awt.Component;Ljava.awt.dnd.DropTargetEvent;)V", arg0, arg1)); }

    void assureIsDrop() { (*javaClass->invokeMethod<void>(this->object, "assureIsDrop", "()V", )); }

    int getSourceDropActions() { return int(*javaClass->invokeMethod<int>(this->object, "getSourceDropActions", "()I", )); }

    int getUserDropAction() { return int(*javaClass->invokeMethod<int>(this->object, "getUserDropAction", "()I", )); }

    int getDropAction() { return int(*javaClass->invokeMethod<int>(this->object, "getDropAction", "()I", )); }

    TransferHandler_DropLocation getDropLocation() { return TransferHandler_DropLocation(*javaClass->invokeMethod<jobject>(this->object, "getDropLocation", "()Ljavax.swing.TransferHandler$DropLocation;", )); }

    void setShowDropLocation(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setShowDropLocation", "(Z)V", arg0)); }

    void setDropAction(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDropAction", "(I)V", arg0)); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

};


/**
 * Classpath: java.awt.dnd.DropTargetEvent
 * Package name: java.awt.dnd
 */
class DropTargetEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.dnd.DropTargetEvent";
public:
    STATICINITIALIZE;

    DropTargetEvent(jobject object) : JavaObject(object) {}

    DropTargetContext getDropTargetContext() { return DropTargetContext(*javaClass->invokeMethod<jobject>(this->object, "getDropTargetContext", "()Ljava.awt.dnd.DropTargetContext;", )); }

};


/**
 * Classpath: java.awt.dnd.DropTargetContext
 * Package name: java.awt.dnd
 */
class DropTargetContext : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DropTargetContext";
public:
    STATICINITIALIZE;

    DropTargetContext(jobject object) : JavaObject(object) {}

    bool isDataFlavorSupported(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDataFlavorSupported", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    Transferable getTransferable() { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava.awt.datatransfer.Transferable;", )); }

    DropTargetContextPeer getDropTargetContextPeer() { return DropTargetContextPeer(*javaClass->invokeMethod<jobject>(this->object, "getDropTargetContextPeer", "()Ljava.awt.dnd.peer.DropTargetContextPeer;", )); }

    int getTargetActions() { return int(*javaClass->invokeMethod<int>(this->object, "getTargetActions", "()I", )); }

    void dropComplete(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "dropComplete", "(Z)V", arg0)); }

    void acceptDrag(int arg0) { (*javaClass->invokeMethod<void>(this->object, "acceptDrag", "(I)V", arg0)); }

    void rejectDrag() { (*javaClass->invokeMethod<void>(this->object, "rejectDrag", "()V", )); }

    void acceptDrop(int arg0) { (*javaClass->invokeMethod<void>(this->object, "acceptDrop", "(I)V", arg0)); }

    List getCurrentDataFlavorsAsList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getCurrentDataFlavorsAsList", "()Ljava.util.List;", )); }

    Transferable createTransferableProxy(Transferable arg0, bool arg1) { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "createTransferableProxy", "(Ljava.awt.datatransfer.Transferable;Z)Ljava.awt.datatransfer.Transferable;", arg0, arg1)); }

    void setDropTargetContextPeer(DropTargetContextPeer arg0) { (*javaClass->invokeMethod<void>(this->object, "setDropTargetContextPeer", "(Ljava.awt.dnd.peer.DropTargetContextPeer;)V", arg0)); }

    DropTarget getDropTarget() { return DropTarget(*javaClass->invokeMethod<jobject>(this->object, "getDropTarget", "()Ljava.awt.dnd.DropTarget;", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    void setTargetActions(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setTargetActions", "(I)V", arg0)); }

    void rejectDrop() { (*javaClass->invokeMethod<void>(this->object, "rejectDrop", "()V", )); }

};


/**
 * Classpath: java.awt.dnd.peer.DropTargetContextPeer
 * Package name: java.awt.dnd.peer
 */
class DropTargetContextPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.peer.DropTargetContextPeer";
public:
    STATICINITIALIZE;

    DropTargetContextPeer(jobject object) : JavaObject(object) {}

    Transferable getTransferable() { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava.awt.datatransfer.Transferable;", )); }

    int getTargetActions() { return int(*javaClass->invokeMethod<int>(this->object, "getTargetActions", "()I", )); }

    void dropComplete(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "dropComplete", "(Z)V", arg0)); }

    void acceptDrag(int arg0) { (*javaClass->invokeMethod<void>(this->object, "acceptDrag", "(I)V", arg0)); }

    void rejectDrag() { (*javaClass->invokeMethod<void>(this->object, "rejectDrag", "()V", )); }

    void acceptDrop(int arg0) { (*javaClass->invokeMethod<void>(this->object, "acceptDrop", "(I)V", arg0)); }

    bool isTransferableJVMLocal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTransferableJVMLocal", "()Z", )); }

    DropTarget getDropTarget() { return DropTarget(*javaClass->invokeMethod<jobject>(this->object, "getDropTarget", "()Ljava.awt.dnd.DropTarget;", )); }

    void setTargetActions(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setTargetActions", "(I)V", arg0)); }

    void rejectDrop() { (*javaClass->invokeMethod<void>(this->object, "rejectDrop", "()V", )); }

};


/**
 * Classpath: java.awt.dnd.DropTarget
 * Package name: java.awt.dnd
 */
class DropTarget : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DropTarget";
public:
    STATICINITIALIZE;

    DropTarget(jobject object) : JavaObject(object) {}

    void dragEnter(DropTargetDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragEnter", "(Ljava.awt.dnd.DropTargetDragEvent;)V", arg0)); }

    void dragOver(DropTargetDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragOver", "(Ljava.awt.dnd.DropTargetDragEvent;)V", arg0)); }

    void dropActionChanged(DropTargetDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dropActionChanged", "(Ljava.awt.dnd.DropTargetDragEvent;)V", arg0)); }

    void dragExit(DropTargetEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragExit", "(Ljava.awt.dnd.DropTargetEvent;)V", arg0)); }

    FlavorMap getFlavorMap() { return FlavorMap(*javaClass->invokeMethod<jobject>(this->object, "getFlavorMap", "()Ljava.awt.datatransfer.FlavorMap;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool isActive() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isActive", "()Z", )); }

    void setComponent(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setComponent", "(Ljava.awt.Component;)V", arg0)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    DropTargetContext createDropTargetContext() { return DropTargetContext(*javaClass->invokeMethod<jobject>(this->object, "createDropTargetContext", "()Ljava.awt.dnd.DropTargetContext;", )); }

    void setDefaultActions(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultActions", "(I)V", arg0)); }

    void addDropTargetListener(DropTargetListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addDropTargetListener", "(Ljava.awt.dnd.DropTargetListener;)V", arg0)); }

    void setActive(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setActive", "(Z)V", arg0)); }

    void clearAutoscroll() { (*javaClass->invokeMethod<void>(this->object, "clearAutoscroll", "()V", )); }

    DropTargetContext getDropTargetContext() { return DropTargetContext(*javaClass->invokeMethod<jobject>(this->object, "getDropTargetContext", "()Ljava.awt.dnd.DropTargetContext;", )); }

    void initializeAutoscrolling(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "initializeAutoscrolling", "(Ljava.awt.Point;)V", arg0)); }

    void updateAutoscroll(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "updateAutoscroll", "(Ljava.awt.Point;)V", arg0)); }

    DropTarget_DropTargetAutoScroller createDropTargetAutoScroller(Component arg0, Point arg1) { return DropTarget_DropTargetAutoScroller(*javaClass->invokeMethod<jobject>(this->object, "createDropTargetAutoScroller", "(Ljava.awt.Component;Ljava.awt.Point;)Ljava.awt.dnd.DropTarget$DropTargetAutoScroller;", arg0, arg1)); }

    void doSetDefaultActions(int arg0) { (*javaClass->invokeMethod<void>(this->object, "doSetDefaultActions", "(I)V", arg0)); }

    int getDefaultActions() { return int(*javaClass->invokeMethod<int>(this->object, "getDefaultActions", "()I", )); }

    void removeDropTargetListener(DropTargetListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeDropTargetListener", "(Ljava.awt.dnd.DropTargetListener;)V", arg0)); }

    void setFlavorMap(FlavorMap arg0) { (*javaClass->invokeMethod<void>(this->object, "setFlavorMap", "(Ljava.awt.datatransfer.FlavorMap;)V", arg0)); }

    void drop(DropTargetDropEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "drop", "(Ljava.awt.dnd.DropTargetDropEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DropTargetDragEvent
 * Package name: java.awt.dnd
 */
class DropTargetDragEvent : public DropTargetEvent {
protected:
    const inline static char *className = "java.awt.dnd.DropTargetDragEvent";
public:
    STATICINITIALIZE;

    DropTargetDragEvent(jobject object) : JavaObject(object) {}

    bool isDataFlavorSupported(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDataFlavorSupported", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    int getSourceActions() { return int(*javaClass->invokeMethod<int>(this->object, "getSourceActions", "()I", )); }

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    Transferable getTransferable() { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava.awt.datatransfer.Transferable;", )); }

    int getDropAction() { return int(*javaClass->invokeMethod<int>(this->object, "getDropAction", "()I", )); }

    void acceptDrag(int arg0) { (*javaClass->invokeMethod<void>(this->object, "acceptDrag", "(I)V", arg0)); }

    void rejectDrag() { (*javaClass->invokeMethod<void>(this->object, "rejectDrag", "()V", )); }

    List getCurrentDataFlavorsAsList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getCurrentDataFlavorsAsList", "()Ljava.util.List;", )); }

};


/**
 * Classpath: java.awt.datatransfer.FlavorMap
 * Package name: java.awt.datatransfer
 */
class FlavorMap : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.FlavorMap";
public:
    STATICINITIALIZE;

    FlavorMap(jobject object) : JavaObject(object) {}

    Map getNativesForFlavors(DataFlavor_interface arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getNativesForFlavors", "([Ljava.awt.datatransfer.DataFlavor;)Ljava.util.Map;", arg0)); }

    Map getFlavorsForNatives(String_interface arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getFlavorsForNatives", "([Ljava.lang.String;)Ljava.util.Map;", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DropTargetListener
 * Package name: java.awt.dnd
 */
class DropTargetListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DropTargetListener";
public:
    STATICINITIALIZE;

    DropTargetListener(jobject object) : JavaObject(object) {}

    void dragEnter(DropTargetDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragEnter", "(Ljava.awt.dnd.DropTargetDragEvent;)V", arg0)); }

    void dragOver(DropTargetDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragOver", "(Ljava.awt.dnd.DropTargetDragEvent;)V", arg0)); }

    void dropActionChanged(DropTargetDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dropActionChanged", "(Ljava.awt.dnd.DropTargetDragEvent;)V", arg0)); }

    void dragExit(DropTargetEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragExit", "(Ljava.awt.dnd.DropTargetEvent;)V", arg0)); }

    void drop(DropTargetDropEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "drop", "(Ljava.awt.dnd.DropTargetDropEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DropTargetDropEvent
 * Package name: java.awt.dnd
 */
class DropTargetDropEvent : public DropTargetEvent {
protected:
    const inline static char *className = "java.awt.dnd.DropTargetDropEvent";
public:
    STATICINITIALIZE;

    DropTargetDropEvent(jobject object) : JavaObject(object) {}

    bool isDataFlavorSupported(DataFlavor arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDataFlavorSupported", "(Ljava.awt.datatransfer.DataFlavor;)Z", arg0)); }

    int getSourceActions() { return int(*javaClass->invokeMethod<int>(this->object, "getSourceActions", "()I", )); }

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    Transferable getTransferable() { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava.awt.datatransfer.Transferable;", )); }

    int getDropAction() { return int(*javaClass->invokeMethod<int>(this->object, "getDropAction", "()I", )); }

    void dropComplete(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "dropComplete", "(Z)V", arg0)); }

    void acceptDrop(int arg0) { (*javaClass->invokeMethod<void>(this->object, "acceptDrop", "(I)V", arg0)); }

    List getCurrentDataFlavorsAsList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getCurrentDataFlavorsAsList", "()Ljava.util.List;", )); }

    bool isLocalTransfer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLocalTransfer", "()Z", )); }

    void rejectDrop() { (*javaClass->invokeMethod<void>(this->object, "rejectDrop", "()V", )); }

};


/**
 * Classpath: java.awt.dnd.DropTarget$DropTargetAutoScroller
 * Enclosing class: java.awt.dnd.DropTarget
 * Package name: java.awt.dnd
 */
class DropTarget_DropTargetAutoScroller : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DropTarget$DropTargetAutoScroller";
public:
    STATICINITIALIZE;

    DropTarget_DropTargetAutoScroller(jobject object) : JavaObject(object) {}

    void actionPerformed(ActionEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "actionPerformed", "(Ljava.awt.event.ActionEvent;)V", arg0)); }

    void stop() { (*javaClass->invokeMethod<void>(this->object, "stop", "()V", )); }

    void updateRegion() { (*javaClass->invokeMethod<void>(this->object, "updateRegion", "()V", )); }

    void updateLocation(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "updateLocation", "(Ljava.awt.Point;)V", arg0)); }

};


/**
 * Classpath: javax.swing.TransferHandler$DropLocation
 * Enclosing class: javax.swing.TransferHandler
 * Package name: javax.swing
 */
class TransferHandler_DropLocation : public Object {
protected:
    const inline static char *className = "javax.swing.TransferHandler$DropLocation";
public:
    STATICINITIALIZE;

    TransferHandler_DropLocation(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Point getDropPoint() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getDropPoint", "()Ljava.awt.Point;", )); }

};


/**
 * Classpath: java.beans.PropertyEditor
 * Package name: java.beans
 */
class PropertyEditor : public JavaObject {
protected:
    const inline static char *className = "java.beans.PropertyEditor";
public:
    STATICINITIALIZE;

    PropertyEditor(jobject object) : JavaObject(object) {}

    Object getValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.Object;", )); }

    void setValue(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "setValue", "(Ljava.lang.Object;)V", arg0)); }

    bool isPaintable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPaintable", "()Z", )); }

    void paintValue(Graphics arg0, Rectangle arg1) { (*javaClass->invokeMethod<void>(this->object, "paintValue", "(Ljava.awt.Graphics;Ljava.awt.Rectangle;)V", arg0, arg1)); }

    String getJavaInitializationString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getJavaInitializationString", "()Ljava.lang.String;", )); }

    String getAsText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAsText", "()Ljava.lang.String;", )); }

    void setAsText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setAsText", "(Ljava.lang.String;)V", arg0)); }

    Component getCustomEditor() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getCustomEditor", "()Ljava.awt.Component;", )); }

    bool supportsCustomEditor() { return bool(*javaClass->invokeMethod<boolean>(this->object, "supportsCustomEditor", "()Z", )); }

    void removePropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

    void addPropertyChangeListener(PropertyChangeListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.beans.PropertyChangeListener;)V", arg0)); }

};


/**
 * Classpath: java.beans.FeatureDescriptor
 * Package name: java.beans
 */
class FeatureDescriptor : public Object {
protected:
    const inline static char *className = "java.beans.FeatureDescriptor";
public:
    STATICINITIALIZE;

    FeatureDescriptor(jobject object) : JavaObject(object) {}

    void setDisplayName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisplayName", "(Ljava.lang.String;)V", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool isHidden() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHidden", "()Z", )); }

    Object getValue(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    static Class getReturnType(Class arg0, Method arg1) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "getReturnType", "(Ljava.lang.Class;Ljava.lang.reflect.Method;)Ljava.lang.Class;", arg0, arg1)); }

    void setName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setName", "(Ljava.lang.String;)V", arg0)); }

    void setValue(String arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "setValue", "(Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1)); }

    void appendTo(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "appendTo", "(Ljava.lang.StringBuilder;)V", arg0)); }

    static void appendTo(StringBuilder arg0, String arg1, bool arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "appendTo", "(Ljava.lang.StringBuilder;Ljava.lang.String;Z)V", arg0, arg1, arg2)); }

    static void appendTo(StringBuilder arg0, String arg1, Reference arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "appendTo", "(Ljava.lang.StringBuilder;Ljava.lang.String;Ljava.lang.ref.Reference;)V", arg0, arg1, arg2)); }

    static void appendTo(StringBuilder arg0, String arg1, Object arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "appendTo", "(Ljava.lang.StringBuilder;Ljava.lang.String;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    bool isTransient() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTransient", "()Z", )); }

    void setClass0(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "setClass0", "(Ljava.lang.Class;)V", arg0)); }

    void setExpert(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setExpert", "(Z)V", arg0)); }

    void setHidden(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHidden", "(Z)V", arg0)); }

    void setPreferred(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setPreferred", "(Z)V", arg0)); }

    void setShortDescription(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setShortDescription", "(Ljava.lang.String;)V", arg0)); }

    static Reference getWeakReference(Object arg0) { return Reference(*javaClass->invokeStaticMethod<jobject>(this->object, "getWeakReference", "(Ljava.lang.Object;)Ljava.lang.ref.Reference;", arg0)); }

    Class getClass0() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getClass0", "()Ljava.lang.Class;", )); }

    void setTransient(Transient arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransient", "(Ljava.beans.Transient;)V", arg0)); }

    bool isExpert() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isExpert", "()Z", )); }

    void addTable(Hashtable arg0) { (*javaClass->invokeMethod<void>(this->object, "addTable", "(Ljava.util.Hashtable;)V", arg0)); }

    bool isPreferred() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPreferred", "()Z", )); }

    String getShortDescription() { return String(*javaClass->invokeMethod<jobject>(this->object, "getShortDescription", "()Ljava.lang.String;", )); }

    Enumeration attributeNames() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "attributeNames", "()Ljava.util.Enumeration;", )); }

    static Reference getSoftReference(Object arg0) { return Reference(*javaClass->invokeStaticMethod<jobject>(this->object, "getSoftReference", "(Ljava.lang.Object;)Ljava.lang.ref.Reference;", arg0)); }

    Hashtable getTable() { return Hashtable(*javaClass->invokeMethod<jobject>(this->object, "getTable", "()Ljava.util.Hashtable;", )); }

    String getDisplayName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.beans.Transient
 * Package name: java.beans
 */
class Transient : public JavaObject {
protected:
    const inline static char *className = "java.beans.Transient";
public:
    STATICINITIALIZE;

    Transient(jobject object) : JavaObject(object) {}

    bool value() { return bool(*javaClass->invokeMethod<boolean>(this->object, "value", "()Z", )); }

};


/**
 * Classpath: javax.swing.event.MenuDragMouseListener
 * Package name: javax.swing.event
 */
class MenuDragMouseListener : public JavaObject {
protected:
    const inline static char *className = "javax.swing.event.MenuDragMouseListener";
public:
    STATICINITIALIZE;

    MenuDragMouseListener(jobject object) : JavaObject(object) {}

    void menuDragMouseEntered(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuDragMouseEntered", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void menuDragMouseExited(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuDragMouseExited", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void menuDragMouseDragged(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuDragMouseDragged", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void menuDragMouseReleased(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuDragMouseReleased", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.WindowAdapter
 * Package name: java.awt.event
 */
class WindowAdapter : public Object {
protected:
    const inline static char *className = "java.awt.event.WindowAdapter";
public:
    STATICINITIALIZE;

    WindowAdapter(jobject object) : JavaObject(object) {}

    void windowOpened(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowOpened", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowClosing(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowClosing", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowClosed(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowClosed", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowIconified(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowIconified", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowDeiconified(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowDeiconified", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowActivated(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowActivated", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowDeactivated(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowDeactivated", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowGainedFocus(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowGainedFocus", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowLostFocus(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowLostFocus", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowStateChanged(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowStateChanged", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

};


/**
 * Classpath: javax.swing.event.MenuListener
 * Package name: javax.swing.event
 */
class MenuListener : public JavaObject {
protected:
    const inline static char *className = "javax.swing.event.MenuListener";
public:
    STATICINITIALIZE;

    MenuListener(jobject object) : JavaObject(object) {}

    void menuSelected(MenuEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuSelected", "(Ljavax.swing.event.MenuEvent;)V", arg0)); }

    void menuDeselected(MenuEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuDeselected", "(Ljavax.swing.event.MenuEvent;)V", arg0)); }

    void menuCanceled(MenuEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "menuCanceled", "(Ljavax.swing.event.MenuEvent;)V", arg0)); }

};


/**
 * Classpath: javax.swing.event.MenuEvent
 * Package name: javax.swing.event
 */
class MenuEvent : public EventObject {
protected:
    const inline static char *className = "javax.swing.event.MenuEvent";
public:
    STATICINITIALIZE;

    MenuEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.plaf.MenuBarUI
 * Package name: javax.swing.plaf
 */
class MenuBarUI : public ComponentUI {
protected:
    const inline static char *className = "javax.swing.plaf.MenuBarUI";
public:
    STATICINITIALIZE;

    MenuBarUI(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.peer.DesktopPeer
 * Package name: java.awt.peer
 */
class DesktopPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.DesktopPeer";
public:
    STATICINITIALIZE;

    DesktopPeer(jobject object) : JavaObject(object) {}

    void browse(URI arg0) { (*javaClass->invokeMethod<void>(this->object, "browse", "(Ljava.net.URI;)V", arg0)); }

    void print(File arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.io.File;)V", arg0)); }

    void open(File arg0) { (*javaClass->invokeMethod<void>(this->object, "open", "(Ljava.io.File;)V", arg0)); }

    bool isSupported(Desktop_Action arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.awt.Desktop$Action;)Z", arg0)); }

    void edit(File arg0) { (*javaClass->invokeMethod<void>(this->object, "edit", "(Ljava.io.File;)V", arg0)); }

    void mail(URI arg0) { (*javaClass->invokeMethod<void>(this->object, "mail", "(Ljava.net.URI;)V", arg0)); }

    void addAppEventListener(SystemEventListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addAppEventListener", "(Ljava.awt.desktop.SystemEventListener;)V", arg0)); }

    void removeAppEventListener(SystemEventListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAppEventListener", "(Ljava.awt.desktop.SystemEventListener;)V", arg0)); }

    void setAboutHandler(AboutHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setAboutHandler", "(Ljava.awt.desktop.AboutHandler;)V", arg0)); }

    void setPreferencesHandler(PreferencesHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setPreferencesHandler", "(Ljava.awt.desktop.PreferencesHandler;)V", arg0)); }

    void setOpenFileHandler(OpenFilesHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpenFileHandler", "(Ljava.awt.desktop.OpenFilesHandler;)V", arg0)); }

    void setPrintFileHandler(PrintFilesHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setPrintFileHandler", "(Ljava.awt.desktop.PrintFilesHandler;)V", arg0)); }

    void setOpenURIHandler(OpenURIHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setOpenURIHandler", "(Ljava.awt.desktop.OpenURIHandler;)V", arg0)); }

    void setQuitHandler(QuitHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setQuitHandler", "(Ljava.awt.desktop.QuitHandler;)V", arg0)); }

    void setQuitStrategy(QuitStrategy arg0) { (*javaClass->invokeMethod<void>(this->object, "setQuitStrategy", "(Ljava.awt.desktop.QuitStrategy;)V", arg0)); }

    void enableSuddenTermination() { (*javaClass->invokeMethod<void>(this->object, "enableSuddenTermination", "()V", )); }

    void disableSuddenTermination() { (*javaClass->invokeMethod<void>(this->object, "disableSuddenTermination", "()V", )); }

    void requestForeground(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "requestForeground", "(Z)V", arg0)); }

    void openHelpViewer() { (*javaClass->invokeMethod<void>(this->object, "openHelpViewer", "()V", )); }

    void setDefaultMenuBar(JMenuBar arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultMenuBar", "(Ljavax.swing.JMenuBar;)V", arg0)); }

    bool browseFileDirectory(File arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "browseFileDirectory", "(Ljava.io.File;)Z", arg0)); }

    bool moveToTrash(File arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "moveToTrash", "(Ljava.io.File;)Z", arg0)); }

};


/**
 * Classpath: java.awt.Taskbar
 * Package name: java.awt
 */
class Taskbar : public Object {
protected:
    const inline static char *className = "java.awt.Taskbar";
public:
    STATICINITIALIZE;

    Taskbar(jobject object) : JavaObject(object) {}

    Image getIconImage() { return Image(*javaClass->invokeMethod<jobject>(this->object, "getIconImage", "()Ljava.awt.Image;", )); }

    bool isSupported(Taskbar_Feature arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.awt.Taskbar$Feature;)Z", arg0)); }

    void setIconImage(Image arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconImage", "(Ljava.awt.Image;)V", arg0)); }

    PopupMenu getMenu() { return PopupMenu(*javaClass->invokeMethod<jobject>(this->object, "getMenu", "()Ljava.awt.PopupMenu;", )); }

    void checkEventsProcessingPermission() { (*javaClass->invokeMethod<void>(this->object, "checkEventsProcessingPermission", "()V", )); }

    static bool isTaskbarSupported() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isTaskbarSupported", "()Z", )); }

    void checkFeatureSupport(Taskbar_Feature arg0) { (*javaClass->invokeMethod<void>(this->object, "checkFeatureSupport", "(Ljava.awt.Taskbar$Feature;)V", arg0)); }

    void requestUserAttention(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "requestUserAttention", "(ZZ)V", arg0, arg1)); }

    void requestWindowUserAttention(Window arg0) { (*javaClass->invokeMethod<void>(this->object, "requestWindowUserAttention", "(Ljava.awt.Window;)V", arg0)); }

    void setMenu(PopupMenu arg0) { (*javaClass->invokeMethod<void>(this->object, "setMenu", "(Ljava.awt.PopupMenu;)V", arg0)); }

    void setIconBadge(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconBadge", "(Ljava.lang.String;)V", arg0)); }

    void setWindowIconBadge(Window arg0, Image arg1) { (*javaClass->invokeMethod<void>(this->object, "setWindowIconBadge", "(Ljava.awt.Window;Ljava.awt.Image;)V", arg0, arg1)); }

    void setProgressValue(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setProgressValue", "(I)V", arg0)); }

    void setWindowProgressValue(Window arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setWindowProgressValue", "(Ljava.awt.Window;I)V", arg0, arg1)); }

    void setWindowProgressState(Window arg0, Taskbar_State arg1) { (*javaClass->invokeMethod<void>(this->object, "setWindowProgressState", "(Ljava.awt.Window;Ljava.awt.Taskbar$State;)V", arg0, arg1)); }

    static Taskbar getTaskbar() { return Taskbar(*javaClass->invokeStaticMethod<jobject>(this->object, "getTaskbar", "()Ljava.awt.Taskbar;", )); }

};


/**
 * Classpath: java.awt.Taskbar$Feature
 * Enclosing class: java.awt.Taskbar
 * Package name: java.awt
 */
class Taskbar_Feature : public Enum {
protected:
    const inline static char *className = "java.awt.Taskbar$Feature";
public:
    STATICINITIALIZE;

    Taskbar_Feature(jobject object) : JavaObject(object) {}

    static Taskbar_Feature valueOf(String arg0) { return Taskbar_Feature(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.Taskbar$Feature;", arg0)); }

};


/**
 * Classpath: java.awt.Taskbar$State
 * Enclosing class: java.awt.Taskbar
 * Package name: java.awt
 */
class Taskbar_State : public Enum {
protected:
    const inline static char *className = "java.awt.Taskbar$State";
public:
    STATICINITIALIZE;

    Taskbar_State(jobject object) : JavaObject(object) {}

    static Taskbar_State valueOf(String arg0) { return Taskbar_State(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.Taskbar$State;", arg0)); }

};


/**
 * Classpath: java.awt.peer.TaskbarPeer
 * Package name: java.awt.peer
 */
class TaskbarPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.TaskbarPeer";
public:
    STATICINITIALIZE;

    TaskbarPeer(jobject object) : JavaObject(object) {}

    Image getIconImage() { return Image(*javaClass->invokeMethod<jobject>(this->object, "getIconImage", "()Ljava.awt.Image;", )); }

    bool isSupported(Taskbar_Feature arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSupported", "(Ljava.awt.Taskbar$Feature;)Z", arg0)); }

    void setIconImage(Image arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconImage", "(Ljava.awt.Image;)V", arg0)); }

    PopupMenu getMenu() { return PopupMenu(*javaClass->invokeMethod<jobject>(this->object, "getMenu", "()Ljava.awt.PopupMenu;", )); }

    void requestUserAttention(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "requestUserAttention", "(ZZ)V", arg0, arg1)); }

    void requestWindowUserAttention(Window arg0) { (*javaClass->invokeMethod<void>(this->object, "requestWindowUserAttention", "(Ljava.awt.Window;)V", arg0)); }

    void setMenu(PopupMenu arg0) { (*javaClass->invokeMethod<void>(this->object, "setMenu", "(Ljava.awt.PopupMenu;)V", arg0)); }

    void setIconBadge(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconBadge", "(Ljava.lang.String;)V", arg0)); }

    void setWindowIconBadge(Window arg0, Image arg1) { (*javaClass->invokeMethod<void>(this->object, "setWindowIconBadge", "(Ljava.awt.Window;Ljava.awt.Image;)V", arg0, arg1)); }

    void setProgressValue(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setProgressValue", "(I)V", arg0)); }

    void setWindowProgressValue(Window arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setWindowProgressValue", "(Ljava.awt.Window;I)V", arg0, arg1)); }

    void setWindowProgressState(Window arg0, Taskbar_State arg1) { (*javaClass->invokeMethod<void>(this->object, "setWindowProgressState", "(Ljava.awt.Window;Ljava.awt.Taskbar$State;)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.Button
 * Package name: java.awt
 */
class Button : public Component {
protected:
    const inline static char *className = "java.awt.Button";
public:
    STATICINITIALIZE;

    Button(jobject object) : JavaObject(object) {}

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    String getLabel() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLabel", "()Ljava.lang.String;", )); }

    String getActionCommand() { return String(*javaClass->invokeMethod<jobject>(this->object, "getActionCommand", "()Ljava.lang.String;", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

    void processActionEvent(ActionEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processActionEvent", "(Ljava.awt.event.ActionEvent;)V", arg0)); }

    void addActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    void setActionCommand(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setActionCommand", "(Ljava.lang.String;)V", arg0)); }

    void removeActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.ButtonPeer
 * Package name: java.awt.peer
 */
class ButtonPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ButtonPeer";
public:
    STATICINITIALIZE;

    ButtonPeer(jobject object) : JavaObject(object) {}

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: java.awt.TextComponent
 * Package name: java.awt
 */
class TextComponent : public Component {
protected:
    const inline static char *className = "java.awt.TextComponent";
public:
    STATICINITIALIZE;

    TextComponent(jobject object) : JavaObject(object) {}

    void setEditable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEditable", "(Z)V", arg0)); }

    bool isEditable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEditable", "()Z", )); }

    void setText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setText", "(Ljava.lang.String;)V", arg0)); }

    String getText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getText", "()Ljava.lang.String;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    bool areInputMethodsEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "areInputMethodsEnabled", "()Z", )); }

    void enableInputMethods(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "enableInputMethods", "(Z)V", arg0)); }

    InputMethodRequests getInputMethodRequests() { return InputMethodRequests(*javaClass->invokeMethod<jobject>(this->object, "getInputMethodRequests", "()Ljava.awt.im.InputMethodRequests;", )); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    Color getBackground() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getBackground", "()Ljava.awt.Color;", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    String getSelectedText() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSelectedText", "()Ljava.lang.String;", )); }

    void enableInputMethodsIfNecessary() { (*javaClass->invokeMethod<void>(this->object, "enableInputMethodsIfNecessary", "()V", )); }

    int getSelectionStart() { return int(*javaClass->invokeMethod<int>(this->object, "getSelectionStart", "()I", )); }

    int getSelectionEnd() { return int(*javaClass->invokeMethod<int>(this->object, "getSelectionEnd", "()I", )); }

    void select(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "select", "(II)V", arg0, arg1)); }

    void setCaretPosition(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setCaretPosition", "(I)V", arg0)); }

    int getCaretPosition() { return int(*javaClass->invokeMethod<int>(this->object, "getCaretPosition", "()I", )); }

    void processTextEvent(TextEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processTextEvent", "(Ljava.awt.event.TextEvent;)V", arg0)); }

    void addTextListener(TextListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addTextListener", "(Ljava.awt.event.TextListener;)V", arg0)); }

    void setSelectionStart(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectionStart", "(I)V", arg0)); }

    void setSelectionEnd(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectionEnd", "(I)V", arg0)); }

    void selectAll() { (*javaClass->invokeMethod<void>(this->object, "selectAll", "()V", )); }

    void removeTextListener(TextListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeTextListener", "(Ljava.awt.event.TextListener;)V", arg0)); }

    bool canAccessClipboard() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAccessClipboard", "()Z", )); }

};


/**
 * Classpath: java.awt.im.InputMethodRequests
 * Package name: java.awt.im
 */
class InputMethodRequests : public JavaObject {
protected:
    const inline static char *className = "java.awt.im.InputMethodRequests";
public:
    STATICINITIALIZE;

    InputMethodRequests(jobject object) : JavaObject(object) {}

    Rectangle getTextLocation(TextHitInfo arg0) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getTextLocation", "(Ljava.awt.font.TextHitInfo;)Ljava.awt.Rectangle;", arg0)); }

    TextHitInfo getLocationOffset(int arg0, int arg1) { return TextHitInfo(*javaClass->invokeMethod<jobject>(this->object, "getLocationOffset", "(II)Ljava.awt.font.TextHitInfo;", arg0, arg1)); }

    int getInsertPositionOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getInsertPositionOffset", "()I", )); }

    AttributedCharacterIterator getCommittedText(int arg0, int arg1, AttributedCharacterIterator_Attribute_interface arg2) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "getCommittedText", "(II[Ljava.text.AttributedCharacterIterator$Attribute;)Ljava.text.AttributedCharacterIterator;", arg0, arg1, arg2)); }

    int getCommittedTextLength() { return int(*javaClass->invokeMethod<int>(this->object, "getCommittedTextLength", "()I", )); }

    AttributedCharacterIterator cancelLatestCommittedText(AttributedCharacterIterator_Attribute_interface arg0) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "cancelLatestCommittedText", "([Ljava.text.AttributedCharacterIterator$Attribute;)Ljava.text.AttributedCharacterIterator;", arg0)); }

    AttributedCharacterIterator getSelectedText(AttributedCharacterIterator_Attribute_interface arg0) { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "getSelectedText", "([Ljava.text.AttributedCharacterIterator$Attribute;)Ljava.text.AttributedCharacterIterator;", arg0)); }

};


/**
 * Classpath: java.awt.font.TextHitInfo
 * Package name: java.awt.font
 */
class TextHitInfo : public Object {
protected:
    const inline static char *className = "java.awt.font.TextHitInfo";
public:
    STATICINITIALIZE;

    TextHitInfo(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(TextHitInfo arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.awt.font.TextHitInfo;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isLeadingEdge() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeadingEdge", "()Z", )); }

    static TextHitInfo trailing(int arg0) { return TextHitInfo(*javaClass->invokeStaticMethod<jobject>(this->object, "trailing", "(I)Ljava.awt.font.TextHitInfo;", arg0)); }

    int getCharIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getCharIndex", "()I", )); }

    int getInsertionIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getInsertionIndex", "()I", )); }

    static TextHitInfo beforeOffset(int arg0) { return TextHitInfo(*javaClass->invokeStaticMethod<jobject>(this->object, "beforeOffset", "(I)Ljava.awt.font.TextHitInfo;", arg0)); }

    static TextHitInfo afterOffset(int arg0) { return TextHitInfo(*javaClass->invokeStaticMethod<jobject>(this->object, "afterOffset", "(I)Ljava.awt.font.TextHitInfo;", arg0)); }

    TextHitInfo getOtherHit() { return TextHitInfo(*javaClass->invokeMethod<jobject>(this->object, "getOtherHit", "()Ljava.awt.font.TextHitInfo;", )); }

    TextHitInfo getOffsetHit(int arg0) { return TextHitInfo(*javaClass->invokeMethod<jobject>(this->object, "getOffsetHit", "(I)Ljava.awt.font.TextHitInfo;", arg0)); }

    static TextHitInfo leading(int arg0) { return TextHitInfo(*javaClass->invokeStaticMethod<jobject>(this->object, "leading", "(I)Ljava.awt.font.TextHitInfo;", arg0)); }

};


/**
 * Classpath: [Ljava.text.AttributedCharacterIterator$Attribute;
 */
class AttributedCharacterIterator_Attribute_interface : public Object {
protected:
    const inline static char *className = "[Ljava.text.AttributedCharacterIterator$Attribute;";
public:
    STATICINITIALIZE;

    AttributedCharacterIterator_Attribute_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.event.TextEvent
 * Package name: java.awt.event
 */
class TextEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.TextEvent";
public:
    STATICINITIALIZE;

    TextEvent(jobject object) : JavaObject(object) {}

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.awt.event.TextListener
 * Package name: java.awt.event
 */
class TextListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.TextListener";
public:
    STATICINITIALIZE;

    TextListener(jobject object) : JavaObject(object) {}

    void textValueChanged(TextEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "textValueChanged", "(Ljava.awt.event.TextEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.TextFieldPeer
 * Package name: java.awt.peer
 */
class TextFieldPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.TextFieldPeer";
public:
    STATICINITIALIZE;

    TextFieldPeer(jobject object) : JavaObject(object) {}

    Dimension getPreferredSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "(I)Ljava.awt.Dimension;", arg0)); }

    Dimension getMinimumSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "(I)Ljava.awt.Dimension;", arg0)); }

    void setEchoChar(char arg0) { (*javaClass->invokeMethod<void>(this->object, "setEchoChar", "(C)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.ListPeer
 * Package name: java.awt.peer
 */
class ListPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ListPeer";
public:
    STATICINITIALIZE;

    ListPeer(jobject object) : JavaObject(object) {}

    void add(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void removeAll() { (*javaClass->invokeMethod<void>(this->object, "removeAll", "()V", )); }

    Dimension getPreferredSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "(I)Ljava.awt.Dimension;", arg0)); }

    Dimension getMinimumSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "(I)Ljava.awt.Dimension;", arg0)); }

    void select(int arg0) { (*javaClass->invokeMethod<void>(this->object, "select", "(I)V", arg0)); }

    void delItems(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "delItems", "(II)V", arg0, arg1)); }

    void deselect(int arg0) { (*javaClass->invokeMethod<void>(this->object, "deselect", "(I)V", arg0)); }

    void setMultipleMode(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setMultipleMode", "(Z)V", arg0)); }

    void makeVisible(int arg0) { (*javaClass->invokeMethod<void>(this->object, "makeVisible", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.Checkbox
 * Package name: java.awt
 */
class Checkbox : public Component {
protected:
    const inline static char *className = "java.awt.Checkbox";
public:
    STATICINITIALIZE;

    Checkbox(jobject object) : JavaObject(object) {}

    void setState(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setState", "(Z)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool getState() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getState", "()Z", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    String getLabel() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLabel", "()Ljava.lang.String;", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

    void processItemEvent(ItemEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processItemEvent", "(Ljava.awt.event.ItemEvent;)V", arg0)); }

    void addItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void removeItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void setStateInternal(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setStateInternal", "(Z)V", arg0)); }

    void setCheckboxGroup(CheckboxGroup arg0) { (*javaClass->invokeMethod<void>(this->object, "setCheckboxGroup", "(Ljava.awt.CheckboxGroup;)V", arg0)); }

    CheckboxGroup getCheckboxGroup() { return CheckboxGroup(*javaClass->invokeMethod<jobject>(this->object, "getCheckboxGroup", "()Ljava.awt.CheckboxGroup;", )); }

};


/**
 * Classpath: java.awt.CheckboxGroup
 * Package name: java.awt
 */
class CheckboxGroup : public Object {
protected:
    const inline static char *className = "java.awt.CheckboxGroup";
public:
    STATICINITIALIZE;

    CheckboxGroup(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Checkbox getCurrent() { return Checkbox(*javaClass->invokeMethod<jobject>(this->object, "getCurrent", "()Ljava.awt.Checkbox;", )); }

    void setCurrent(Checkbox arg0) { (*javaClass->invokeMethod<void>(this->object, "setCurrent", "(Ljava.awt.Checkbox;)V", arg0)); }

    void setSelectedCheckbox(Checkbox arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectedCheckbox", "(Ljava.awt.Checkbox;)V", arg0)); }

    Checkbox getSelectedCheckbox() { return Checkbox(*javaClass->invokeMethod<jobject>(this->object, "getSelectedCheckbox", "()Ljava.awt.Checkbox;", )); }

};


/**
 * Classpath: java.awt.peer.CheckboxPeer
 * Package name: java.awt.peer
 */
class CheckboxPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.CheckboxPeer";
public:
    STATICINITIALIZE;

    CheckboxPeer(jobject object) : JavaObject(object) {}

    void setState(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setState", "(Z)V", arg0)); }

    void setLabel(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setLabel", "(Ljava.lang.String;)V", arg0)); }

    void setCheckboxGroup(CheckboxGroup arg0) { (*javaClass->invokeMethod<void>(this->object, "setCheckboxGroup", "(Ljava.awt.CheckboxGroup;)V", arg0)); }

};


/**
 * Classpath: java.awt.Scrollbar
 * Package name: java.awt
 */
class Scrollbar : public Component {
protected:
    const inline static char *className = "java.awt.Scrollbar";
public:
    STATICINITIALIZE;

    Scrollbar(jobject object) : JavaObject(object) {}

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void setValue(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setValue", "(I)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void removeAdjustmentListener(AdjustmentListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAdjustmentListener", "(Ljava.awt.event.AdjustmentListener;)V", arg0)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    bool getValueIsAdjusting() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getValueIsAdjusting", "()Z", )); }

    int getMinimum() { return int(*javaClass->invokeMethod<int>(this->object, "getMinimum", "()I", )); }

    int getMaximum() { return int(*javaClass->invokeMethod<int>(this->object, "getMaximum", "()I", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    int getOrientation() { return int(*javaClass->invokeMethod<int>(this->object, "getOrientation", "()I", )); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void setValues(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setValues", "(IIII)V", arg0, arg1, arg2, arg3)); }

    int getVisible() { return int(*javaClass->invokeMethod<int>(this->object, "getVisible", "()I", )); }

    void setLineIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLineIncrement", "(I)V", arg0)); }

    int getLineIncrement() { return int(*javaClass->invokeMethod<int>(this->object, "getLineIncrement", "()I", )); }

    void setPageIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPageIncrement", "(I)V", arg0)); }

    int getPageIncrement() { return int(*javaClass->invokeMethod<int>(this->object, "getPageIncrement", "()I", )); }

    void processAdjustmentEvent(AdjustmentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processAdjustmentEvent", "(Ljava.awt.event.AdjustmentEvent;)V", arg0)); }

    void addAdjustmentListener(AdjustmentListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addAdjustmentListener", "(Ljava.awt.event.AdjustmentListener;)V", arg0)); }

    void setOrientation(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setOrientation", "(I)V", arg0)); }

    void setMinimum(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinimum", "(I)V", arg0)); }

    void setMaximum(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaximum", "(I)V", arg0)); }

    int getVisibleAmount() { return int(*javaClass->invokeMethod<int>(this->object, "getVisibleAmount", "()I", )); }

    void setVisibleAmount(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisibleAmount", "(I)V", arg0)); }

    void setUnitIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setUnitIncrement", "(I)V", arg0)); }

    int getUnitIncrement() { return int(*javaClass->invokeMethod<int>(this->object, "getUnitIncrement", "()I", )); }

    void setBlockIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBlockIncrement", "(I)V", arg0)); }

    int getBlockIncrement() { return int(*javaClass->invokeMethod<int>(this->object, "getBlockIncrement", "()I", )); }

    void setValueIsAdjusting(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setValueIsAdjusting", "(Z)V", arg0)); }

};


/**
 * Classpath: java.awt.event.AdjustmentListener
 * Package name: java.awt.event
 */
class AdjustmentListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.AdjustmentListener";
public:
    STATICINITIALIZE;

    AdjustmentListener(jobject object) : JavaObject(object) {}

    void adjustmentValueChanged(AdjustmentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "adjustmentValueChanged", "(Ljava.awt.event.AdjustmentEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.AdjustmentEvent
 * Package name: java.awt.event
 */
class AdjustmentEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.AdjustmentEvent";
public:
    STATICINITIALIZE;

    AdjustmentEvent(jobject object) : JavaObject(object) {}

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Adjustable getAdjustable() { return Adjustable(*javaClass->invokeMethod<jobject>(this->object, "getAdjustable", "()Ljava.awt.Adjustable;", )); }

    int getAdjustmentType() { return int(*javaClass->invokeMethod<int>(this->object, "getAdjustmentType", "()I", )); }

    bool getValueIsAdjusting() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getValueIsAdjusting", "()Z", )); }

};


/**
 * Classpath: java.awt.Adjustable
 * Package name: java.awt
 */
class Adjustable : public JavaObject {
protected:
    const inline static char *className = "java.awt.Adjustable";
public:
    STATICINITIALIZE;

    Adjustable(jobject object) : JavaObject(object) {}

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    void setValue(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setValue", "(I)V", arg0)); }

    void removeAdjustmentListener(AdjustmentListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeAdjustmentListener", "(Ljava.awt.event.AdjustmentListener;)V", arg0)); }

    int getMinimum() { return int(*javaClass->invokeMethod<int>(this->object, "getMinimum", "()I", )); }

    int getMaximum() { return int(*javaClass->invokeMethod<int>(this->object, "getMaximum", "()I", )); }

    int getOrientation() { return int(*javaClass->invokeMethod<int>(this->object, "getOrientation", "()I", )); }

    void addAdjustmentListener(AdjustmentListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addAdjustmentListener", "(Ljava.awt.event.AdjustmentListener;)V", arg0)); }

    void setMinimum(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinimum", "(I)V", arg0)); }

    void setMaximum(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaximum", "(I)V", arg0)); }

    int getVisibleAmount() { return int(*javaClass->invokeMethod<int>(this->object, "getVisibleAmount", "()I", )); }

    void setVisibleAmount(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setVisibleAmount", "(I)V", arg0)); }

    void setUnitIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setUnitIncrement", "(I)V", arg0)); }

    int getUnitIncrement() { return int(*javaClass->invokeMethod<int>(this->object, "getUnitIncrement", "()I", )); }

    void setBlockIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setBlockIncrement", "(I)V", arg0)); }

    int getBlockIncrement() { return int(*javaClass->invokeMethod<int>(this->object, "getBlockIncrement", "()I", )); }

};


/**
 * Classpath: java.awt.peer.ScrollbarPeer
 * Package name: java.awt.peer
 */
class ScrollbarPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ScrollbarPeer";
public:
    STATICINITIALIZE;

    ScrollbarPeer(jobject object) : JavaObject(object) {}

    void setValues(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setValues", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void setLineIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLineIncrement", "(I)V", arg0)); }

    void setPageIncrement(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPageIncrement", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.ScrollPane
 * Package name: java.awt
 */
class ScrollPane : public Container {
protected:
    const inline static char *className = "java.awt.ScrollPane";
public:
    STATICINITIALIZE;

    ScrollPane(jobject object) : JavaObject(object) {}

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void setWheelScrollingEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setWheelScrollingEnabled", "(Z)V", arg0)); }

    void addToPanel(Component arg0, Object arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "addToPanel", "(Ljava.awt.Component;Ljava.lang.Object;I)V", arg0, arg1, arg2)); }

    int getHScrollbarHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHScrollbarHeight", "()I", )); }

    int getVScrollbarWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getVScrollbarWidth", "()I", )); }

    void setScrollPosition(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "setScrollPosition", "(Ljava.awt.Point;)V", arg0)); }

    void setScrollPosition(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setScrollPosition", "(II)V", arg0, arg1)); }

    Point getScrollPosition() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getScrollPosition", "()Ljava.awt.Point;", )); }

    Dimension calculateChildSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "calculateChildSize", "()Ljava.awt.Dimension;", )); }

    Dimension getViewportSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getViewportSize", "()Ljava.awt.Dimension;", )); }

    bool isWheelScrollingEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWheelScrollingEnabled", "()Z", )); }

    int getScrollbarDisplayPolicy() { return int(*javaClass->invokeMethod<int>(this->object, "getScrollbarDisplayPolicy", "()I", )); }

    Adjustable getVAdjustable() { return Adjustable(*javaClass->invokeMethod<jobject>(this->object, "getVAdjustable", "()Ljava.awt.Adjustable;", )); }

    Adjustable getHAdjustable() { return Adjustable(*javaClass->invokeMethod<jobject>(this->object, "getHAdjustable", "()Ljava.awt.Adjustable;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void layout() { (*javaClass->invokeMethod<void>(this->object, "layout", "()V", )); }

    void doLayout() { (*javaClass->invokeMethod<void>(this->object, "doLayout", "()V", )); }

    void printComponents(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "printComponents", "(Ljava.awt.Graphics;)V", arg0)); }

    bool eventTypeEnabled(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventTypeEnabled", "(I)Z", arg0)); }

    void autoProcessMouseWheel(MouseWheelEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "autoProcessMouseWheel", "(Ljava.awt.event.MouseWheelEvent;)V", arg0)); }

    void processMouseWheelEvent(MouseWheelEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMouseWheelEvent", "(Ljava.awt.event.MouseWheelEvent;)V", arg0)); }

    void setLayout(LayoutManager arg0) { (*javaClass->invokeMethod<void>(this->object, "setLayout", "(Ljava.awt.LayoutManager;)V", arg0)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void addImpl(Component arg0, Object arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "addImpl", "(Ljava.awt.Component;Ljava.lang.Object;I)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.awt.peer.ScrollPanePeer
 * Package name: java.awt.peer
 */
class ScrollPanePeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ScrollPanePeer";
public:
    STATICINITIALIZE;

    ScrollPanePeer(jobject object) : JavaObject(object) {}

    void setValue(Adjustable arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setValue", "(Ljava.awt.Adjustable;I)V", arg0, arg1)); }

    int getHScrollbarHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHScrollbarHeight", "()I", )); }

    int getVScrollbarWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getVScrollbarWidth", "()I", )); }

    void setScrollPosition(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setScrollPosition", "(II)V", arg0, arg1)); }

    void childResized(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "childResized", "(II)V", arg0, arg1)); }

    void setUnitIncrement(Adjustable arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setUnitIncrement", "(Ljava.awt.Adjustable;I)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.TextArea
 * Package name: java.awt
 */
class TextArea : public TextComponent {
protected:
    const inline static char *className = "java.awt.TextArea";
public:
    STATICINITIALIZE;

    TextArea(jobject object) : JavaObject(object) {}

    void appendText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "appendText", "(Ljava.lang.String;)V", arg0)); }

    void append(String arg0) { (*javaClass->invokeMethod<void>(this->object, "append", "(Ljava.lang.String;)V", arg0)); }

    void insert(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void insertText(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insertText", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void replaceText(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "replaceText", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void replaceRange(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "replaceRange", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void setRows(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setRows", "(I)V", arg0)); }

    int getScrollbarVisibility() { return int(*javaClass->invokeMethod<int>(this->object, "getScrollbarVisibility", "()I", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Dimension preferredSize(int arg0, int arg1) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "preferredSize", "(II)Ljava.awt.Dimension;", arg0, arg1)); }

    Dimension preferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "preferredSize", "()Ljava.awt.Dimension;", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    Dimension getPreferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "()Ljava.awt.Dimension;", )); }

    Dimension getPreferredSize(int arg0, int arg1) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "(II)Ljava.awt.Dimension;", arg0, arg1)); }

    Dimension getMinimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "()Ljava.awt.Dimension;", )); }

    Dimension getMinimumSize(int arg0, int arg1) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "(II)Ljava.awt.Dimension;", arg0, arg1)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    Dimension minimumSize(int arg0, int arg1) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "minimumSize", "(II)Ljava.awt.Dimension;", arg0, arg1)); }

    Dimension minimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "minimumSize", "()Ljava.awt.Dimension;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    int getColumns() { return int(*javaClass->invokeMethod<int>(this->object, "getColumns", "()I", )); }

    void setColumns(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setColumns", "(I)V", arg0)); }

    int getRows() { return int(*javaClass->invokeMethod<int>(this->object, "getRows", "()I", )); }

};


/**
 * Classpath: java.awt.peer.TextAreaPeer
 * Package name: java.awt.peer
 */
class TextAreaPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.TextAreaPeer";
public:
    STATICINITIALIZE;

    TextAreaPeer(jobject object) : JavaObject(object) {}

    void insert(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void replaceRange(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "replaceRange", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    Dimension getPreferredSize(int arg0, int arg1) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "(II)Ljava.awt.Dimension;", arg0, arg1)); }

    Dimension getMinimumSize(int arg0, int arg1) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "(II)Ljava.awt.Dimension;", arg0, arg1)); }

};


/**
 * Classpath: java.awt.Choice
 * Package name: java.awt
 */
class Choice : public Component {
protected:
    const inline static char *className = "java.awt.Choice";
public:
    STATICINITIALIZE;

    Choice(jobject object) : JavaObject(object) {}

    void add(String arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.String;)V", arg0)); }

    void remove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(I)V", arg0)); }

    void remove(String arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.lang.String;)V", arg0)); }

    void insert(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void removeAll() { (*javaClass->invokeMethod<void>(this->object, "removeAll", "()V", )); }

    String getItem(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getItem", "(I)Ljava.lang.String;", arg0)); }

    int getItemCount() { return int(*javaClass->invokeMethod<int>(this->object, "getItemCount", "()I", )); }

    void insertNoInvalidate(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insertNoInvalidate", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void removeNoInvalidate(int arg0) { (*javaClass->invokeMethod<void>(this->object, "removeNoInvalidate", "(I)V", arg0)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    int countItems() { return int(*javaClass->invokeMethod<int>(this->object, "countItems", "()I", )); }

    String getItemImpl(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getItemImpl", "(I)Ljava.lang.String;", arg0)); }

    void addItem(String arg0) { (*javaClass->invokeMethod<void>(this->object, "addItem", "(Ljava.lang.String;)V", arg0)); }

    void select(int arg0) { (*javaClass->invokeMethod<void>(this->object, "select", "(I)V", arg0)); }

    void select(String arg0) { (*javaClass->invokeMethod<void>(this->object, "select", "(Ljava.lang.String;)V", arg0)); }

    int getSelectedIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getSelectedIndex", "()I", )); }

    void processItemEvent(ItemEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processItemEvent", "(Ljava.awt.event.ItemEvent;)V", arg0)); }

    String getSelectedItem() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSelectedItem", "()Ljava.lang.String;", )); }

    void addItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void removeItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.ChoicePeer
 * Package name: java.awt.peer
 */
class ChoicePeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.ChoicePeer";
public:
    STATICINITIALIZE;

    ChoicePeer(jobject object) : JavaObject(object) {}

    void add(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void remove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(I)V", arg0)); }

    void removeAll() { (*javaClass->invokeMethod<void>(this->object, "removeAll", "()V", )); }

    void select(int arg0) { (*javaClass->invokeMethod<void>(this->object, "select", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.Canvas
 * Package name: java.awt
 */
class Canvas : public Component {
protected:
    const inline static char *className = "java.awt.Canvas";
public:
    STATICINITIALIZE;

    Canvas(jobject object) : JavaObject(object) {}

    void update(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "update", "(Ljava.awt.Graphics;)V", arg0)); }

    void setGraphicsConfiguration(GraphicsConfiguration arg0) { (*javaClass->invokeMethod<void>(this->object, "setGraphicsConfiguration", "(Ljava.awt.GraphicsConfiguration;)V", arg0)); }

    bool postsOldMouseEvents() { return bool(*javaClass->invokeMethod<boolean>(this->object, "postsOldMouseEvents", "()Z", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void createBufferStrategy(int arg0) { (*javaClass->invokeMethod<void>(this->object, "createBufferStrategy", "(I)V", arg0)); }

    void createBufferStrategy(int arg0, BufferCapabilities arg1) { (*javaClass->invokeMethod<void>(this->object, "createBufferStrategy", "(ILjava.awt.BufferCapabilities;)V", arg0, arg1)); }

    BufferStrategy getBufferStrategy() { return BufferStrategy(*javaClass->invokeMethod<jobject>(this->object, "getBufferStrategy", "()Ljava.awt.image.BufferStrategy;", )); }

    void paint(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paint", "(Ljava.awt.Graphics;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

};


/**
 * Classpath: java.awt.image.BufferStrategy
 * Package name: java.awt.image
 */
class BufferStrategy : public Object {
protected:
    const inline static char *className = "java.awt.image.BufferStrategy";
public:
    STATICINITIALIZE;

    BufferStrategy(jobject object) : JavaObject(object) {}

    BufferCapabilities getCapabilities() { return BufferCapabilities(*javaClass->invokeMethod<jobject>(this->object, "getCapabilities", "()Ljava.awt.BufferCapabilities;", )); }

    bool contentsLost() { return bool(*javaClass->invokeMethod<boolean>(this->object, "contentsLost", "()Z", )); }

    Graphics getDrawGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getDrawGraphics", "()Ljava.awt.Graphics;", )); }

    bool contentsRestored() { return bool(*javaClass->invokeMethod<boolean>(this->object, "contentsRestored", "()Z", )); }

    void show() { (*javaClass->invokeMethod<void>(this->object, "show", "()V", )); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: java.awt.peer.CanvasPeer
 * Package name: java.awt.peer
 */
class CanvasPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.CanvasPeer";
public:
    STATICINITIALIZE;

    CanvasPeer(jobject object) : JavaObject(object) {}

    GraphicsConfiguration getAppropriateGraphicsConfiguration(GraphicsConfiguration arg0) { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getAppropriateGraphicsConfiguration", "(Ljava.awt.GraphicsConfiguration;)Ljava.awt.GraphicsConfiguration;", arg0)); }

};


/**
 * Classpath: java.awt.Panel
 * Package name: java.awt
 */
class Panel : public Container {
protected:
    const inline static char *className = "java.awt.Panel";
public:
    STATICINITIALIZE;

    Panel(jobject object) : JavaObject(object) {}

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

};


/**
 * Classpath: java.awt.peer.PanelPeer
 * Package name: java.awt.peer
 */
class PanelPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.PanelPeer";
public:
    STATICINITIALIZE;

    PanelPeer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.FileDialog
 * Package name: java.awt
 */
class FileDialog : public Dialog {
protected:
    const inline static char *className = "java.awt.FileDialog";
public:
    STATICINITIALIZE;

    FileDialog(jobject object) : JavaObject(object) {}

    int getMode() { return int(*javaClass->invokeMethod<int>(this->object, "getMode", "()I", )); }

    void setTitle(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTitle", "(Ljava.lang.String;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    String getFile() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFile", "()Ljava.lang.String;", )); }

    void setMode(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMode", "(I)V", arg0)); }

    void setDirectory(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setDirectory", "(Ljava.lang.String;)V", arg0)); }

    void setFile(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setFile", "(Ljava.lang.String;)V", arg0)); }

    void setFilenameFilter(FilenameFilter arg0) { (*javaClass->invokeMethod<void>(this->object, "setFilenameFilter", "(Ljava.io.FilenameFilter;)V", arg0)); }

    String getDirectory() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDirectory", "()Ljava.lang.String;", )); }

    void setFiles(File_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setFiles", "([Ljava.io.File;)V", arg0)); }

    FilenameFilter getFilenameFilter() { return FilenameFilter(*javaClass->invokeMethod<jobject>(this->object, "getFilenameFilter", "()Ljava.io.FilenameFilter;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    bool postsOldMouseEvents() { return bool(*javaClass->invokeMethod<boolean>(this->object, "postsOldMouseEvents", "()Z", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    bool isMultipleMode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMultipleMode", "()Z", )); }

    void setMultipleMode(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setMultipleMode", "(Z)V", arg0)); }

};


/**
 * Classpath: java.io.FilenameFilter
 * Package name: java.io
 */
class FilenameFilter : public JavaObject {
protected:
    const inline static char *className = "java.io.FilenameFilter";
public:
    STATICINITIALIZE;

    FilenameFilter(jobject object) : JavaObject(object) {}

    bool accept(File arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "accept", "(Ljava.io.File;Ljava.lang.String;)Z", arg0, arg1)); }

};


/**
 * Classpath: [Ljava.io.File;
 */
class File_interface : public Object {
protected:
    const inline static char *className = "[Ljava.io.File;";
public:
    STATICINITIALIZE;

    File_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.peer.FileDialogPeer
 * Package name: java.awt.peer
 */
class FileDialogPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.FileDialogPeer";
public:
    STATICINITIALIZE;

    FileDialogPeer(jobject object) : JavaObject(object) {}

    void setDirectory(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setDirectory", "(Ljava.lang.String;)V", arg0)); }

    void setFile(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setFile", "(Ljava.lang.String;)V", arg0)); }

    void setFilenameFilter(FilenameFilter arg0) { (*javaClass->invokeMethod<void>(this->object, "setFilenameFilter", "(Ljava.io.FilenameFilter;)V", arg0)); }

};


/**
 * Classpath: java.awt.CheckboxMenuItem
 * Package name: java.awt
 */
class CheckboxMenuItem : public MenuItem {
protected:
    const inline static char *className = "java.awt.CheckboxMenuItem";
public:
    STATICINITIALIZE;

    CheckboxMenuItem(jobject object) : JavaObject(object) {}

    void setState(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setState", "(Z)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    bool getState() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getState", "()Z", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void doMenuEvent(long arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "doMenuEvent", "(JI)V", arg0, arg1)); }

    void processItemEvent(ItemEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processItemEvent", "(Ljava.awt.event.ItemEvent;)V", arg0)); }

    void addItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

    void removeItemListener(ItemListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeItemListener", "(Ljava.awt.event.ItemListener;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.CheckboxMenuItemPeer
 * Package name: java.awt.peer
 */
class CheckboxMenuItemPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.CheckboxMenuItemPeer";
public:
    STATICINITIALIZE;

    CheckboxMenuItemPeer(jobject object) : JavaObject(object) {}

    void setState(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setState", "(Z)V", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DragGestureEvent
 * Package name: java.awt.dnd
 */
class DragGestureEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.dnd.DragGestureEvent";
public:
    STATICINITIALIZE;

    DragGestureEvent(jobject object) : JavaObject(object) {}

    void startDrag(Cursor arg0, Transferable arg1) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;)V", arg0, arg1)); }

    void startDrag(Cursor arg0, Image arg1, Point arg2, Transferable arg3, DragSourceListener arg4) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V", arg0, arg1, arg2, arg3, arg4)); }

    void startDrag(Cursor arg0, Transferable arg1, DragSourceListener arg2) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V", arg0, arg1, arg2)); }

    DragSource getDragSource() { return DragSource(*javaClass->invokeMethod<jobject>(this->object, "getDragSource", "()Ljava.awt.dnd.DragSource;", )); }

    InputEvent getTriggerEvent() { return InputEvent(*javaClass->invokeMethod<jobject>(this->object, "getTriggerEvent", "()Ljava.awt.event.InputEvent;", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    DragGestureRecognizer getSourceAsDragGestureRecognizer() { return DragGestureRecognizer(*javaClass->invokeMethod<jobject>(this->object, "getSourceAsDragGestureRecognizer", "()Ljava.awt.dnd.DragGestureRecognizer;", )); }

    Point getDragOrigin() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getDragOrigin", "()Ljava.awt.Point;", )); }

    int getDragAction() { return int(*javaClass->invokeMethod<int>(this->object, "getDragAction", "()I", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

};


/**
 * Classpath: java.awt.dnd.DragSourceListener
 * Package name: java.awt.dnd
 */
class DragSourceListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceListener";
public:
    STATICINITIALIZE;

    DragSourceListener(jobject object) : JavaObject(object) {}

    void dragEnter(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragEnter", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void dragOver(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragOver", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void dropActionChanged(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dropActionChanged", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void dragExit(DragSourceEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragExit", "(Ljava.awt.dnd.DragSourceEvent;)V", arg0)); }

    void dragDropEnd(DragSourceDropEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragDropEnd", "(Ljava.awt.dnd.DragSourceDropEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DragSourceEvent
 * Package name: java.awt.dnd
 */
class DragSourceEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceEvent";
public:
    STATICINITIALIZE;

    DragSourceEvent(jobject object) : JavaObject(object) {}

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    DragSourceContext getDragSourceContext() { return DragSourceContext(*javaClass->invokeMethod<jobject>(this->object, "getDragSourceContext", "()Ljava.awt.dnd.DragSourceContext;", )); }

};


/**
 * Classpath: java.awt.dnd.DragSourceContext
 * Package name: java.awt.dnd
 */
class DragSourceContext : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceContext";
public:
    STATICINITIALIZE;

    DragSourceContext(jobject object) : JavaObject(object) {}

    void dragEnter(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragEnter", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void dragOver(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragOver", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void dropActionChanged(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dropActionChanged", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void dragExit(DragSourceEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragExit", "(Ljava.awt.dnd.DragSourceEvent;)V", arg0)); }

    void dragDropEnd(DragSourceDropEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragDropEnd", "(Ljava.awt.dnd.DragSourceDropEvent;)V", arg0)); }

    void dragMouseMoved(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragMouseMoved", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void addDragSourceListener(DragSourceListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addDragSourceListener", "(Ljava.awt.dnd.DragSourceListener;)V", arg0)); }

    void removeDragSourceListener(DragSourceListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeDragSourceListener", "(Ljava.awt.dnd.DragSourceListener;)V", arg0)); }

    DragSource getDragSource() { return DragSource(*javaClass->invokeMethod<jobject>(this->object, "getDragSource", "()Ljava.awt.dnd.DragSource;", )); }

    int getSourceActions() { return int(*javaClass->invokeMethod<int>(this->object, "getSourceActions", "()I", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    Transferable getTransferable() { return Transferable(*javaClass->invokeMethod<jobject>(this->object, "getTransferable", "()Ljava.awt.datatransfer.Transferable;", )); }

    void updateCurrentCursor(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "updateCurrentCursor", "(III)V", arg0, arg1, arg2)); }

    void setCursorImpl(Cursor arg0) { (*javaClass->invokeMethod<void>(this->object, "setCursorImpl", "(Ljava.awt.Cursor;)V", arg0)); }

    DragGestureEvent getTrigger() { return DragGestureEvent(*javaClass->invokeMethod<jobject>(this->object, "getTrigger", "()Ljava.awt.dnd.DragGestureEvent;", )); }

    void transferablesFlavorsChanged() { (*javaClass->invokeMethod<void>(this->object, "transferablesFlavorsChanged", "()V", )); }

    Cursor getCursor() { return Cursor(*javaClass->invokeMethod<jobject>(this->object, "getCursor", "()Ljava.awt.Cursor;", )); }

    void setCursor(Cursor arg0) { (*javaClass->invokeMethod<void>(this->object, "setCursor", "(Ljava.awt.Cursor;)V", arg0)); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    static DragSourceContextPeer lambda_static_0(DragSourceContext arg0) { return DragSourceContextPeer(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$static$0", "(Ljava.awt.dnd.DragSourceContext;)Ljava.awt.dnd.peer.DragSourceContextPeer;", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DragSourceDropEvent
 * Package name: java.awt.dnd
 */
class DragSourceDropEvent : public DragSourceEvent {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceDropEvent";
public:
    STATICINITIALIZE;

    DragSourceDropEvent(jobject object) : JavaObject(object) {}

    int getDropAction() { return int(*javaClass->invokeMethod<int>(this->object, "getDropAction", "()I", )); }

    bool getDropSuccess() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getDropSuccess", "()Z", )); }

};


/**
 * Classpath: java.awt.dnd.DragSource
 * Package name: java.awt.dnd
 */
class DragSource : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DragSource";
public:
    STATICINITIALIZE;

    DragSource(jobject object) : JavaObject(object) {}

    DragSourceContext createDragSourceContext(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5) { return DragSourceContext(*javaClass->invokeMethod<jobject>(this->object, "createDragSourceContext", "(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)Ljava.awt.dnd.DragSourceContext;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void startDrag(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5, FlavorMap arg6) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;Ljava.awt.datatransfer.FlavorMap;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void startDrag(DragGestureEvent arg0, Cursor arg1, Transferable arg2, DragSourceListener arg3, FlavorMap arg4) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;Ljava.awt.datatransfer.FlavorMap;)V", arg0, arg1, arg2, arg3, arg4)); }

    void startDrag(DragGestureEvent arg0, Cursor arg1, Image arg2, Point arg3, Transferable arg4, DragSourceListener arg5) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void startDrag(DragGestureEvent arg0, Cursor arg1, Transferable arg2, DragSourceListener arg3) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.dnd.DragGestureEvent;Ljava.awt.Cursor;Ljava.awt.datatransfer.Transferable;Ljava.awt.dnd.DragSourceListener;)V", arg0, arg1, arg2, arg3)); }

    void addDragSourceListener(DragSourceListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addDragSourceListener", "(Ljava.awt.dnd.DragSourceListener;)V", arg0)); }

    void addDragSourceMotionListener(DragSourceMotionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addDragSourceMotionListener", "(Ljava.awt.dnd.DragSourceMotionListener;)V", arg0)); }

    static DragSource getDefaultDragSource() { return DragSource(*javaClass->invokeStaticMethod<jobject>(this->object, "getDefaultDragSource", "()Ljava.awt.dnd.DragSource;", )); }

    static bool isDragImageSupported() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isDragImageSupported", "()Z", )); }

    FlavorMap getFlavorMap() { return FlavorMap(*javaClass->invokeMethod<jobject>(this->object, "getFlavorMap", "()Ljava.awt.datatransfer.FlavorMap;", )); }

    DragGestureRecognizer createDefaultDragGestureRecognizer(Component arg0, int arg1, DragGestureListener arg2) { return DragGestureRecognizer(*javaClass->invokeMethod<jobject>(this->object, "createDefaultDragGestureRecognizer", "(Ljava.awt.Component;ILjava.awt.dnd.DragGestureListener;)Ljava.awt.dnd.DragGestureRecognizer;", arg0, arg1, arg2)); }

    void removeDragSourceListener(DragSourceListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeDragSourceListener", "(Ljava.awt.dnd.DragSourceListener;)V", arg0)); }

    void removeDragSourceMotionListener(DragSourceMotionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeDragSourceMotionListener", "(Ljava.awt.dnd.DragSourceMotionListener;)V", arg0)); }

    void processDragEnter(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processDragEnter", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void processDragOver(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processDragOver", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void processDropActionChanged(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processDropActionChanged", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    void processDragExit(DragSourceEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processDragExit", "(Ljava.awt.dnd.DragSourceEvent;)V", arg0)); }

    void processDragDropEnd(DragSourceDropEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processDragDropEnd", "(Ljava.awt.dnd.DragSourceDropEvent;)V", arg0)); }

    void processDragMouseMoved(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processDragMouseMoved", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

    static int getDragThreshold() { return int(*javaClass->invokeStaticMethod<int>(this->object, "getDragThreshold", "()I", )); }

    static Cursor load(String arg0) { return Cursor(*javaClass->invokeStaticMethod<jobject>(this->object, "load", "(Ljava.lang.String;)Ljava.awt.Cursor;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    DragGestureRecognizer createDragGestureRecognizer(Class arg0, Component arg1, int arg2, DragGestureListener arg3) { return DragGestureRecognizer(*javaClass->invokeMethod<jobject>(this->object, "createDragGestureRecognizer", "(Ljava.lang.Class;Ljava.awt.Component;ILjava.awt.dnd.DragGestureListener;)Ljava.awt.dnd.DragGestureRecognizer;", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.awt.dnd.DragSourceMotionListener
 * Package name: java.awt.dnd
 */
class DragSourceMotionListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceMotionListener";
public:
    STATICINITIALIZE;

    DragSourceMotionListener(jobject object) : JavaObject(object) {}

    void dragMouseMoved(DragSourceDragEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragMouseMoved", "(Ljava.awt.dnd.DragSourceDragEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DragGestureListener
 * Package name: java.awt.dnd
 */
class DragGestureListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.DragGestureListener";
public:
    STATICINITIALIZE;

    DragGestureListener(jobject object) : JavaObject(object) {}

    void dragGestureRecognized(DragGestureEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dragGestureRecognized", "(Ljava.awt.dnd.DragGestureEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DragGestureRecognizer
 * Package name: java.awt.dnd
 */
class DragGestureRecognizer : public Object {
protected:
    const inline static char *className = "java.awt.dnd.DragGestureRecognizer";
public:
    STATICINITIALIZE;

    DragGestureRecognizer(jobject object) : JavaObject(object) {}

    void addDragGestureListener(DragGestureListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addDragGestureListener", "(Ljava.awt.dnd.DragGestureListener;)V", arg0)); }

    void unregisterListeners() { (*javaClass->invokeMethod<void>(this->object, "unregisterListeners", "()V", )); }

    void registerListeners() { (*javaClass->invokeMethod<void>(this->object, "registerListeners", "()V", )); }

    DragSource getDragSource() { return DragSource(*javaClass->invokeMethod<jobject>(this->object, "getDragSource", "()Ljava.awt.dnd.DragSource;", )); }

    int getSourceActions() { return int(*javaClass->invokeMethod<int>(this->object, "getSourceActions", "()I", )); }

    void setSourceActions(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSourceActions", "(I)V", arg0)); }

    InputEvent getTriggerEvent() { return InputEvent(*javaClass->invokeMethod<jobject>(this->object, "getTriggerEvent", "()Ljava.awt.event.InputEvent;", )); }

    void resetRecognizer() { (*javaClass->invokeMethod<void>(this->object, "resetRecognizer", "()V", )); }

    void removeDragGestureListener(DragGestureListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeDragGestureListener", "(Ljava.awt.dnd.DragGestureListener;)V", arg0)); }

    void fireDragGestureRecognized(int arg0, Point arg1) { (*javaClass->invokeMethod<void>(this->object, "fireDragGestureRecognized", "(ILjava.awt.Point;)V", arg0, arg1)); }

    void appendEvent(InputEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "appendEvent", "(Ljava.awt.event.InputEvent;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void setComponent(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setComponent", "(Ljava.awt.Component;)V", arg0)); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

};


/**
 * Classpath: java.awt.dnd.peer.DragSourceContextPeer
 * Package name: java.awt.dnd.peer
 */
class DragSourceContextPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.dnd.peer.DragSourceContextPeer";
public:
    STATICINITIALIZE;

    DragSourceContextPeer(jobject object) : JavaObject(object) {}

    void startDrag(DragSourceContext arg0, Cursor arg1, Image arg2, Point arg3) { (*javaClass->invokeMethod<void>(this->object, "startDrag", "(Ljava.awt.dnd.DragSourceContext;Ljava.awt.Cursor;Ljava.awt.Image;Ljava.awt.Point;)V", arg0, arg1, arg2, arg3)); }

    void transferablesFlavorsChanged() { (*javaClass->invokeMethod<void>(this->object, "transferablesFlavorsChanged", "()V", )); }

    Cursor getCursor() { return Cursor(*javaClass->invokeMethod<jobject>(this->object, "getCursor", "()Ljava.awt.Cursor;", )); }

    void setCursor(Cursor arg0) { (*javaClass->invokeMethod<void>(this->object, "setCursor", "(Ljava.awt.Cursor;)V", arg0)); }

};


/**
 * Classpath: java.awt.peer.RobotPeer
 * Package name: java.awt.peer
 */
class RobotPeer : public JavaObject {
protected:
    const inline static char *className = "java.awt.peer.RobotPeer";
public:
    STATICINITIALIZE;

    RobotPeer(jobject object) : JavaObject(object) {}

    void mousePress(int arg0) { (*javaClass->invokeMethod<void>(this->object, "mousePress", "(I)V", arg0)); }

    void mouseRelease(int arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseRelease", "(I)V", arg0)); }

    void mouseWheel(int arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseWheel", "(I)V", arg0)); }

    void keyPress(int arg0) { (*javaClass->invokeMethod<void>(this->object, "keyPress", "(I)V", arg0)); }

    void keyRelease(int arg0) { (*javaClass->invokeMethod<void>(this->object, "keyRelease", "(I)V", arg0)); }

    int getRGBPixel(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getRGBPixel", "(II)I", arg0, arg1)); }

    bool useAbsoluteCoordinates() { return bool(*javaClass->invokeMethod<boolean>(this->object, "useAbsoluteCoordinates", "()Z", )); }

    void mouseMove(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "mouseMove", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: sun.awt.datatransfer.DataTransferer
 * Package name: sun.awt.datatransfer
 */
class DataTransferer : public Object {
protected:
    const inline static char *className = "sun.awt.datatransfer.DataTransferer";
public:
    STATICINITIALIZE;

    DataTransferer(jobject object) : JavaObject(object) {}

    static DataTransferer getInstance() { return DataTransferer(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "()Lsun.awt.datatransfer.DataTransferer;", )); }

    Long getFormatForNativeAsLong(String arg0) { return Long(*javaClass->invokeMethod<jobject>(this->object, "getFormatForNativeAsLong", "(Ljava.lang.String;)Ljava.lang.Long;", arg0)); }

    SortedMap getFormatsForFlavors(DataFlavor_interface arg0, FlavorTable arg1) { return SortedMap(*javaClass->invokeMethod<jobject>(this->object, "getFormatsForFlavors", "([Ljava.awt.datatransfer.DataFlavor;Ljava.awt.datatransfer.FlavorTable;)Ljava.util.SortedMap;", arg0, arg1)); }

    SortedMap getFormatsForTransferable(Transferable arg0, FlavorTable arg1) { return SortedMap(*javaClass->invokeMethod<jobject>(this->object, "getFormatsForTransferable", "(Ljava.awt.datatransfer.Transferable;Ljava.awt.datatransfer.FlavorTable;)Ljava.util.SortedMap;", arg0, arg1)); }

    String getNativeForFormat(long arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getNativeForFormat", "(J)Ljava.lang.String;", arg0)); }

    Set getFlavorsForFormatsAsSet(arr_J arg0, FlavorTable arg1) { return Set(*javaClass->invokeMethod<jobject>(this->object, "getFlavorsForFormatsAsSet", "([JLjava.awt.datatransfer.FlavorTable;)Ljava.util.Set;", arg0, arg1)); }

    bool isLocaleDependentTextFormat(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLocaleDependentTextFormat", "(J)Z", arg0)); }

    String getCharsetForTextFormat(Long arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getCharsetForTextFormat", "(Ljava.lang.Long;)Ljava.lang.String;", arg0)); }

    String getBestCharsetForTextFormat(Long arg0, Transferable arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getBestCharsetForTextFormat", "(Ljava.lang.Long;Ljava.awt.datatransfer.Transferable;)Ljava.lang.String;", arg0, arg1)); }

    bool isTextFormat(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTextFormat", "(J)Z", arg0)); }

    String removeSuspectedData(DataFlavor arg0, Transferable arg1, String arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "removeSuspectedData", "(Ljava.awt.datatransfer.DataFlavor;Ljava.awt.datatransfer.Transferable;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1, arg2)); }

    bool isImageFormat(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isImageFormat", "(J)Z", arg0)); }

    bool isFileFormat(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFileFormat", "(J)Z", arg0)); }

    static ProtectionDomain getUserProtectionDomain(Transferable arg0) { return ProtectionDomain(*javaClass->invokeStaticMethod<jobject>(this->object, "getUserProtectionDomain", "(Ljava.awt.datatransfer.Transferable;)Ljava.security.ProtectionDomain;", arg0)); }

    ArrayList castToFiles(List arg0, ProtectionDomain arg1) { return ArrayList(*javaClass->invokeMethod<jobject>(this->object, "castToFiles", "(Ljava.util.List;Ljava.security.ProtectionDomain;)Ljava.util.ArrayList;", arg0, arg1)); }

    ByteArrayOutputStream convertFileListToBytes(ArrayList arg0) { return ByteArrayOutputStream(*javaClass->invokeMethod<jobject>(this->object, "convertFileListToBytes", "(Ljava.util.ArrayList;)Ljava.io.ByteArrayOutputStream;", arg0)); }

    bool isURIListFormat(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isURIListFormat", "(J)Z", arg0)); }

    String translateBytesToString(arr_B arg0, long arg1, Transferable arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "translateBytesToString", "([BJLjava.awt.datatransfer.Transferable;)Ljava.lang.String;", arg0, arg1, arg2)); }

    Object translateStream(InputStream arg0, DataFlavor arg1, long arg2, Transferable arg3) { return Object(*javaClass->invokeMethod<jobject>(this->object, "translateStream", "(Ljava.io.InputStream;Ljava.awt.datatransfer.DataFlavor;JLjava.awt.datatransfer.Transferable;)Ljava.lang.Object;", arg0, arg1, arg2, arg3)); }

    Object constructFlavoredObject(Object arg0, DataFlavor arg1, Class arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "constructFlavoredObject", "(Ljava.lang.Object;Ljava.awt.datatransfer.DataFlavor;Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Image platformImageBytesToImage(arr_B arg0, long arg1) { return Image(*javaClass->invokeMethod<jobject>(this->object, "platformImageBytesToImage", "([BJ)Ljava.awt.Image;", arg0, arg1)); }

    Object translateStreamToInputStream(InputStream arg0, DataFlavor arg1, long arg2, Transferable arg3) { return Object(*javaClass->invokeMethod<jobject>(this->object, "translateStreamToInputStream", "(Ljava.io.InputStream;Ljava.awt.datatransfer.DataFlavor;JLjava.awt.datatransfer.Transferable;)Ljava.lang.Object;", arg0, arg1, arg2, arg3)); }

    ToolkitThreadBlockedHandler getToolkitThreadBlockedHandler() { return ToolkitThreadBlockedHandler(*javaClass->invokeMethod<jobject>(this->object, "getToolkitThreadBlockedHandler", "()Lsun.awt.datatransfer.ToolkitThreadBlockedHandler;", )); }

    File castToFile(Object arg0) { return File(*javaClass->invokeMethod<jobject>(this->object, "castToFile", "(Ljava.lang.Object;)Ljava.io.File;", arg0)); }

    static bool isFileInWebstartedCache(File arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isFileInWebstartedCache", "(Ljava.io.File;)Z", arg0)); }

    bool isForbiddenToRead(File arg0, ProtectionDomain arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isForbiddenToRead", "(Ljava.io.File;Ljava.security.ProtectionDomain;)Z", arg0, arg1)); }

    static FlavorTable adaptFlavorMap(FlavorMap arg0) { return FlavorTable(*javaClass->invokeStaticMethod<jobject>(this->object, "adaptFlavorMap", "(Ljava.awt.datatransfer.FlavorMap;)Ljava.awt.datatransfer.FlavorTable;", arg0)); }

    void registerTextFlavorProperties(String arg0, String arg1, String arg2, String arg3) { (*javaClass->invokeMethod<void>(this->object, "registerTextFlavorProperties", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2, arg3)); }

    Map getFlavorsForFormats(arr_J arg0, FlavorTable arg1) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getFlavorsForFormats", "([JLjava.awt.datatransfer.FlavorTable;)Ljava.util.Map;", arg0, arg1)); }

    Object translateBytes(arr_B arg0, DataFlavor arg1, long arg2, Transferable arg3) { return Object(*javaClass->invokeMethod<jobject>(this->object, "translateBytes", "([BLjava.awt.datatransfer.DataFlavor;JLjava.awt.datatransfer.Transferable;)Ljava.lang.Object;", arg0, arg1, arg2, arg3)); }

    Image standardImageBytesToImage(arr_B arg0, String arg1) { return Image(*javaClass->invokeMethod<jobject>(this->object, "standardImageBytesToImage", "([BLjava.lang.String;)Ljava.awt.Image;", arg0, arg1)); }

    Object concatData(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "concatData", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void processDataConversionRequests() { (*javaClass->invokeMethod<void>(this->object, "processDataConversionRequests", "()V", )); }

    LinkedHashSet getPlatformMappingsForNative(String arg0) { return LinkedHashSet(*javaClass->invokeMethod<jobject>(this->object, "getPlatformMappingsForNative", "(Ljava.lang.String;)Ljava.util.LinkedHashSet;", arg0)); }

    LinkedHashSet getPlatformMappingsForFlavor(DataFlavor arg0) { return LinkedHashSet(*javaClass->invokeMethod<jobject>(this->object, "getPlatformMappingsForFlavor", "(Ljava.awt.datatransfer.DataFlavor;)Ljava.util.LinkedHashSet;", arg0)); }

    static IOException lambda_constructFlavoredObject_4(Class arg0, Class arg1) { return IOException(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$constructFlavoredObject$4", "(Ljava.lang.Class;Ljava.lang.Class;)Ljava.io.IOException;", arg0, arg1)); }

    static bool lambda_constructFlavoredObject_3(Class arg0, Constructor arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$constructFlavoredObject$3", "(Ljava.lang.Class;Ljava.lang.reflect.Constructor;)Z", arg0, arg1)); }

    static bool lambda_constructFlavoredObject_2(Constructor arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$constructFlavoredObject$2", "(Ljava.lang.reflect.Constructor;)Z", arg0)); }

    ArrayList lambda_castToFiles_1(List arg0, ProtectionDomain arg1) { return ArrayList(*javaClass->invokeMethod<jobject>(this->object, "lambda$castToFiles$1", "(Ljava.util.List;Ljava.security.ProtectionDomain;)Ljava.util.ArrayList;", arg0, arg1)); }

    String lambda_removeSuspectedData_0(String arg0, ProtectionDomain arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "lambda$removeSuspectedData$0", "(Ljava.lang.String;Ljava.security.ProtectionDomain;)Ljava.lang.String;", arg0, arg1)); }

    String getDefaultUnicodeEncoding() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDefaultUnicodeEncoding", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.awt.datatransfer.FlavorTable
 * Package name: java.awt.datatransfer
 */
class FlavorTable : public JavaObject {
protected:
    const inline static char *className = "java.awt.datatransfer.FlavorTable";
public:
    STATICINITIALIZE;

    FlavorTable(jobject object) : JavaObject(object) {}

    List getNativesForFlavor(DataFlavor arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getNativesForFlavor", "(Ljava.awt.datatransfer.DataFlavor;)Ljava.util.List;", arg0)); }

    List getFlavorsForNative(String arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "getFlavorsForNative", "(Ljava.lang.String;)Ljava.util.List;", arg0)); }

};


/**
 * Classpath: java.io.ByteArrayOutputStream
 * Package name: java.io
 */
class ByteArrayOutputStream : public OutputStream {
protected:
    const inline static char *className = "java.io.ByteArrayOutputStream";
public:
    STATICINITIALIZE;

    ByteArrayOutputStream(jobject object) : JavaObject(object) {}

    String toString(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String toString(Charset arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(Ljava.nio.charset.Charset;)Ljava.lang.String;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String toString(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(I)Ljava.lang.String;", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void write(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    void writeTo(OutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeTo", "(Ljava.io.OutputStream;)V", arg0)); }

    void writeBytes(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "writeBytes", "([B)V", arg0)); }

};


/**
 * Classpath: sun.awt.datatransfer.ToolkitThreadBlockedHandler
 * Package name: sun.awt.datatransfer
 */
class ToolkitThreadBlockedHandler : public JavaObject {
protected:
    const inline static char *className = "sun.awt.datatransfer.ToolkitThreadBlockedHandler";
public:
    STATICINITIALIZE;

    ToolkitThreadBlockedHandler(jobject object) : JavaObject(object) {}

    void exit() { (*javaClass->invokeMethod<void>(this->object, "exit", "()V", )); }

    void lock() { (*javaClass->invokeMethod<void>(this->object, "lock", "()V", )); }

    void unlock() { (*javaClass->invokeMethod<void>(this->object, "unlock", "()V", )); }

    void enter() { (*javaClass->invokeMethod<void>(this->object, "enter", "()V", )); }

};


/**
 * Classpath: java.awt.PointerInfo
 * Package name: java.awt
 */
class PointerInfo : public Object {
protected:
    const inline static char *className = "java.awt.PointerInfo";
public:
    STATICINITIALIZE;

    PointerInfo(jobject object) : JavaObject(object) {}

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    GraphicsDevice getDevice() { return GraphicsDevice(*javaClass->invokeMethod<jobject>(this->object, "getDevice", "()Ljava.awt.GraphicsDevice;", )); }

};


/**
 * Classpath: java.awt.event.InputMethodEvent
 * Package name: java.awt.event
 */
class InputMethodEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.InputMethodEvent";
public:
    STATICINITIALIZE;

    InputMethodEvent(jobject object) : JavaObject(object) {}

    AttributedCharacterIterator getText() { return AttributedCharacterIterator(*javaClass->invokeMethod<jobject>(this->object, "getText", "()Ljava.text.AttributedCharacterIterator;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    bool isConsumed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConsumed", "()Z", )); }

    long getWhen() { return long(*javaClass->invokeMethod<long>(this->object, "getWhen", "()J", )); }

    void consume() { (*javaClass->invokeMethod<void>(this->object, "consume", "()V", )); }

    static long getMostRecentEventTimeForSource(Object arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "getMostRecentEventTimeForSource", "(Ljava.lang.Object;)J", arg0)); }

    int getCommittedCharacterCount() { return int(*javaClass->invokeMethod<int>(this->object, "getCommittedCharacterCount", "()I", )); }

    TextHitInfo getCaret() { return TextHitInfo(*javaClass->invokeMethod<jobject>(this->object, "getCaret", "()Ljava.awt.font.TextHitInfo;", )); }

    TextHitInfo getVisiblePosition() { return TextHitInfo(*javaClass->invokeMethod<jobject>(this->object, "getVisiblePosition", "()Ljava.awt.font.TextHitInfo;", )); }

};


/**
 * Classpath: java.awt.event.HierarchyEvent
 * Package name: java.awt.event
 */
class HierarchyEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.HierarchyEvent";
public:
    STATICINITIALIZE;

    HierarchyEvent(jobject object) : JavaObject(object) {}

    Component getChanged() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getChanged", "()Ljava.awt.Component;", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    Container getChangedParent() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getChangedParent", "()Ljava.awt.Container;", )); }

    long getChangeFlags() { return long(*javaClass->invokeMethod<long>(this->object, "getChangeFlags", "()J", )); }

};


/**
 * Classpath: java.awt.event.ComponentListener
 * Package name: java.awt.event
 */
class ComponentListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.ComponentListener";
public:
    STATICINITIALIZE;

    ComponentListener(jobject object) : JavaObject(object) {}

    void componentResized(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentResized", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void componentMoved(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentMoved", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void componentShown(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentShown", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

    void componentHidden(ComponentEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "componentHidden", "(Ljava.awt.event.ComponentEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.KeyListener
 * Package name: java.awt.event
 */
class KeyListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.KeyListener";
public:
    STATICINITIALIZE;

    KeyListener(jobject object) : JavaObject(object) {}

    void keyTyped(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "keyTyped", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    void keyPressed(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "keyPressed", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    void keyReleased(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "keyReleased", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.MouseListener
 * Package name: java.awt.event
 */
class MouseListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.MouseListener";
public:
    STATICINITIALIZE;

    MouseListener(jobject object) : JavaObject(object) {}

    void mouseClicked(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseClicked", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void mousePressed(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mousePressed", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void mouseReleased(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseReleased", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void mouseExited(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseExited", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void mouseEntered(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseEntered", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.MouseMotionListener
 * Package name: java.awt.event
 */
class MouseMotionListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.MouseMotionListener";
public:
    STATICINITIALIZE;

    MouseMotionListener(jobject object) : JavaObject(object) {}

    void mouseMoved(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseMoved", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

    void mouseDragged(MouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseDragged", "(Ljava.awt.event.MouseEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.InputMethodListener
 * Package name: java.awt.event
 */
class InputMethodListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.InputMethodListener";
public:
    STATICINITIALIZE;

    InputMethodListener(jobject object) : JavaObject(object) {}

    void inputMethodTextChanged(InputMethodEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "inputMethodTextChanged", "(Ljava.awt.event.InputMethodEvent;)V", arg0)); }

    void caretPositionChanged(InputMethodEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "caretPositionChanged", "(Ljava.awt.event.InputMethodEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.HierarchyListener
 * Package name: java.awt.event
 */
class HierarchyListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.HierarchyListener";
public:
    STATICINITIALIZE;

    HierarchyListener(jobject object) : JavaObject(object) {}

    void hierarchyChanged(HierarchyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "hierarchyChanged", "(Ljava.awt.event.HierarchyEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.HierarchyBoundsListener
 * Package name: java.awt.event
 */
class HierarchyBoundsListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.HierarchyBoundsListener";
public:
    STATICINITIALIZE;

    HierarchyBoundsListener(jobject object) : JavaObject(object) {}

    void ancestorMoved(HierarchyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "ancestorMoved", "(Ljava.awt.event.HierarchyEvent;)V", arg0)); }

    void ancestorResized(HierarchyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "ancestorResized", "(Ljava.awt.event.HierarchyEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.MouseWheelListener
 * Package name: java.awt.event
 */
class MouseWheelListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.MouseWheelListener";
public:
    STATICINITIALIZE;

    MouseWheelListener(jobject object) : JavaObject(object) {}

    void mouseWheelMoved(MouseWheelEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "mouseWheelMoved", "(Ljava.awt.event.MouseWheelEvent;)V", arg0)); }

};


/**
 * Classpath: sun.awt.RequestFocusController
 * Package name: sun.awt
 */
class RequestFocusController : public JavaObject {
protected:
    const inline static char *className = "sun.awt.RequestFocusController";
public:
    STATICINITIALIZE;

    RequestFocusController(jobject object) : JavaObject(object) {}

    bool acceptRequestFocus(Component arg0, Component arg1, bool arg2, bool arg3, FocusEvent_Cause arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "acceptRequestFocus", "(Ljava.awt.Component;Ljava.awt.Component;ZZLjava.awt.event.FocusEvent$Cause;)Z", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: java.awt.im.InputContext
 * Package name: java.awt.im
 */
class InputContext : public Object {
protected:
    const inline static char *className = "java.awt.im.InputContext";
public:
    STATICINITIALIZE;

    InputContext(jobject object) : JavaObject(object) {}

    static InputContext getInstance() { return InputContext(*javaClass->invokeStaticMethod<jobject>(this->object, "getInstance", "()Ljava.awt.im.InputContext;", )); }

    bool selectInputMethod(Locale arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "selectInputMethod", "(Ljava.util.Locale;)Z", arg0)); }

    void setCharacterSubsets(Character_Subset_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setCharacterSubsets", "([Ljava.lang.Character$Subset;)V", arg0)); }

    void setCompositionEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCompositionEnabled", "(Z)V", arg0)); }

    bool isCompositionEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCompositionEnabled", "()Z", )); }

    void reconvert() { (*javaClass->invokeMethod<void>(this->object, "reconvert", "()V", )); }

    Object getInputMethodControlObject() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getInputMethodControlObject", "()Ljava.lang.Object;", )); }

    void endComposition() { (*javaClass->invokeMethod<void>(this->object, "endComposition", "()V", )); }

    Locale getLocale() { return Locale(*javaClass->invokeMethod<jobject>(this->object, "getLocale", "()Ljava.util.Locale;", )); }

    void removeNotify(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "(Ljava.awt.Component;)V", arg0)); }

    void dispatchEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: [Ljava.lang.Character$Subset;
 */
class Character_Subset_interface : public Object {
protected:
    const inline static char *className = "[Ljava.lang.Character$Subset;";
public:
    STATICINITIALIZE;

    Character_Subset_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.JobAttributes
 * Package name: java.awt
 */
class JobAttributes : public Object {
protected:
    const inline static char *className = "java.awt.JobAttributes";
public:
    STATICINITIALIZE;

    JobAttributes(jobject object) : JavaObject(object) {}

    void setCopiesToDefault() { (*javaClass->invokeMethod<void>(this->object, "setCopiesToDefault", "()V", )); }

    void setDefaultSelection(JobAttributes_DefaultSelectionType arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultSelection", "(Ljava.awt.JobAttributes$DefaultSelectionType;)V", arg0)); }

    void setDestination(JobAttributes_DestinationType arg0) { (*javaClass->invokeMethod<void>(this->object, "setDestination", "(Ljava.awt.JobAttributes$DestinationType;)V", arg0)); }

    void setDialog(JobAttributes_DialogType arg0) { (*javaClass->invokeMethod<void>(this->object, "setDialog", "(Ljava.awt.JobAttributes$DialogType;)V", arg0)); }

    void setMaxPage(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMaxPage", "(I)V", arg0)); }

    void setMinPage(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMinPage", "(I)V", arg0)); }

    void setMultipleDocumentHandlingToDefault() { (*javaClass->invokeMethod<void>(this->object, "setMultipleDocumentHandlingToDefault", "()V", )); }

    void setSidesToDefault() { (*javaClass->invokeMethod<void>(this->object, "setSidesToDefault", "()V", )); }

    void setCopies(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setCopies", "(I)V", arg0)); }

    void setFileName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setFileName", "(Ljava.lang.String;)V", arg0)); }

    void setMultipleDocumentHandling(JobAttributes_MultipleDocumentHandlingType arg0) { (*javaClass->invokeMethod<void>(this->object, "setMultipleDocumentHandling", "(Ljava.awt.JobAttributes$MultipleDocumentHandlingType;)V", arg0)); }

    void setPageRanges(arr_arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "setPageRanges", "([[I)V", arg0)); }

    void setPrinter(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setPrinter", "(Ljava.lang.String;)V", arg0)); }

    void setSides(JobAttributes_SidesType arg0) { (*javaClass->invokeMethod<void>(this->object, "setSides", "(Ljava.awt.JobAttributes$SidesType;)V", arg0)); }

    int getMinPage() { return int(*javaClass->invokeMethod<int>(this->object, "getMinPage", "()I", )); }

    int getFromPage() { return int(*javaClass->invokeMethod<int>(this->object, "getFromPage", "()I", )); }

    int getToPage() { return int(*javaClass->invokeMethod<int>(this->object, "getToPage", "()I", )); }

    int getCopies() { return int(*javaClass->invokeMethod<int>(this->object, "getCopies", "()I", )); }

    JobAttributes_DefaultSelectionType getDefaultSelection() { return JobAttributes_DefaultSelectionType(*javaClass->invokeMethod<jobject>(this->object, "getDefaultSelection", "()Ljava.awt.JobAttributes$DefaultSelectionType;", )); }

    JobAttributes_DestinationType getDestination() { return JobAttributes_DestinationType(*javaClass->invokeMethod<jobject>(this->object, "getDestination", "()Ljava.awt.JobAttributes$DestinationType;", )); }

    JobAttributes_DialogType getDialog() { return JobAttributes_DialogType(*javaClass->invokeMethod<jobject>(this->object, "getDialog", "()Ljava.awt.JobAttributes$DialogType;", )); }

    int getMaxPage() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxPage", "()I", )); }

    JobAttributes_MultipleDocumentHandlingType getMultipleDocumentHandling() { return JobAttributes_MultipleDocumentHandlingType(*javaClass->invokeMethod<jobject>(this->object, "getMultipleDocumentHandling", "()Ljava.awt.JobAttributes$MultipleDocumentHandlingType;", )); }

    String getPrinter() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPrinter", "()Ljava.lang.String;", )); }

    JobAttributes_SidesType getSides() { return JobAttributes_SidesType(*javaClass->invokeMethod<jobject>(this->object, "getSides", "()Ljava.awt.JobAttributes$SidesType;", )); }

    void setFromPage(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setFromPage", "(I)V", arg0)); }

    void setToPage(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setToPage", "(I)V", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void set(JobAttributes arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.awt.JobAttributes;)V", arg0)); }

    String getFileName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getFileName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.awt.JobAttributes$DefaultSelectionType
 * Enclosing class: java.awt.JobAttributes
 * Package name: java.awt
 */
class JobAttributes_DefaultSelectionType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$DefaultSelectionType";
public:
    STATICINITIALIZE;

    JobAttributes_DefaultSelectionType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.JobAttributes$DestinationType
 * Enclosing class: java.awt.JobAttributes
 * Package name: java.awt
 */
class JobAttributes_DestinationType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$DestinationType";
public:
    STATICINITIALIZE;

    JobAttributes_DestinationType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.JobAttributes$DialogType
 * Enclosing class: java.awt.JobAttributes
 * Package name: java.awt
 */
class JobAttributes_DialogType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$DialogType";
public:
    STATICINITIALIZE;

    JobAttributes_DialogType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.JobAttributes$MultipleDocumentHandlingType
 * Enclosing class: java.awt.JobAttributes
 * Package name: java.awt
 */
class JobAttributes_MultipleDocumentHandlingType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$MultipleDocumentHandlingType";
public:
    STATICINITIALIZE;

    JobAttributes_MultipleDocumentHandlingType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: [[I
 */
class arr_arr_I : public Object {
protected:
    const inline static char *className = "[[I";
public:
    STATICINITIALIZE;

    arr_arr_I(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.JobAttributes$SidesType
 * Enclosing class: java.awt.JobAttributes
 * Package name: java.awt
 */
class JobAttributes_SidesType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.JobAttributes$SidesType";
public:
    STATICINITIALIZE;

    JobAttributes_SidesType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.PageAttributes
 * Package name: java.awt
 */
class PageAttributes : public Object {
protected:
    const inline static char *className = "java.awt.PageAttributes";
public:
    STATICINITIALIZE;

    PageAttributes(jobject object) : JavaObject(object) {}

    PageAttributes_ColorType getColor() { return PageAttributes_ColorType(*javaClass->invokeMethod<jobject>(this->object, "getColor", "()Ljava.awt.PageAttributes$ColorType;", )); }

    void setColor(PageAttributes_ColorType arg0) { (*javaClass->invokeMethod<void>(this->object, "setColor", "(Ljava.awt.PageAttributes$ColorType;)V", arg0)); }

    void setMediaToDefault() { (*javaClass->invokeMethod<void>(this->object, "setMediaToDefault", "()V", )); }

    void setOrientationRequestedToDefault() { (*javaClass->invokeMethod<void>(this->object, "setOrientationRequestedToDefault", "()V", )); }

    void setOrigin(PageAttributes_OriginType arg0) { (*javaClass->invokeMethod<void>(this->object, "setOrigin", "(Ljava.awt.PageAttributes$OriginType;)V", arg0)); }

    void setPrintQualityToDefault() { (*javaClass->invokeMethod<void>(this->object, "setPrintQualityToDefault", "()V", )); }

    void setPrinterResolutionToDefault() { (*javaClass->invokeMethod<void>(this->object, "setPrinterResolutionToDefault", "()V", )); }

    void setMedia(PageAttributes_MediaType arg0) { (*javaClass->invokeMethod<void>(this->object, "setMedia", "(Ljava.awt.PageAttributes$MediaType;)V", arg0)); }

    void setOrientationRequested(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setOrientationRequested", "(I)V", arg0)); }

    void setOrientationRequested(PageAttributes_OrientationRequestedType arg0) { (*javaClass->invokeMethod<void>(this->object, "setOrientationRequested", "(Ljava.awt.PageAttributes$OrientationRequestedType;)V", arg0)); }

    void setPrintQuality(PageAttributes_PrintQualityType arg0) { (*javaClass->invokeMethod<void>(this->object, "setPrintQuality", "(Ljava.awt.PageAttributes$PrintQualityType;)V", arg0)); }

    void setPrintQuality(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPrintQuality", "(I)V", arg0)); }

    void setPrinterResolution(arr_I arg0) { (*javaClass->invokeMethod<void>(this->object, "setPrinterResolution", "([I)V", arg0)); }

    void setPrinterResolution(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setPrinterResolution", "(I)V", arg0)); }

    PageAttributes_MediaType getMedia() { return PageAttributes_MediaType(*javaClass->invokeMethod<jobject>(this->object, "getMedia", "()Ljava.awt.PageAttributes$MediaType;", )); }

    PageAttributes_OrientationRequestedType getOrientationRequested() { return PageAttributes_OrientationRequestedType(*javaClass->invokeMethod<jobject>(this->object, "getOrientationRequested", "()Ljava.awt.PageAttributes$OrientationRequestedType;", )); }

    PageAttributes_OriginType getOrigin() { return PageAttributes_OriginType(*javaClass->invokeMethod<jobject>(this->object, "getOrigin", "()Ljava.awt.PageAttributes$OriginType;", )); }

    PageAttributes_PrintQualityType getPrintQuality() { return PageAttributes_PrintQualityType(*javaClass->invokeMethod<jobject>(this->object, "getPrintQuality", "()Ljava.awt.PageAttributes$PrintQualityType;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void set(PageAttributes arg0) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.awt.PageAttributes;)V", arg0)); }

};


/**
 * Classpath: java.awt.PageAttributes$ColorType
 * Enclosing class: java.awt.PageAttributes
 * Package name: java.awt
 */
class PageAttributes_ColorType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$ColorType";
public:
    STATICINITIALIZE;

    PageAttributes_ColorType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.PageAttributes$OriginType
 * Enclosing class: java.awt.PageAttributes
 * Package name: java.awt
 */
class PageAttributes_OriginType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$OriginType";
public:
    STATICINITIALIZE;

    PageAttributes_OriginType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.PageAttributes$MediaType
 * Enclosing class: java.awt.PageAttributes
 * Package name: java.awt
 */
class PageAttributes_MediaType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$MediaType";
public:
    STATICINITIALIZE;

    PageAttributes_MediaType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.PageAttributes$OrientationRequestedType
 * Enclosing class: java.awt.PageAttributes
 * Package name: java.awt
 */
class PageAttributes_OrientationRequestedType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$OrientationRequestedType";
public:
    STATICINITIALIZE;

    PageAttributes_OrientationRequestedType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.PageAttributes$PrintQualityType
 * Enclosing class: java.awt.PageAttributes
 * Package name: java.awt
 */
class PageAttributes_PrintQualityType : public AttributeValue {
protected:
    const inline static char *className = "java.awt.PageAttributes$PrintQualityType";
public:
    STATICINITIALIZE;

    PageAttributes_PrintQualityType(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.PrintJob
 * Package name: java.awt
 */
class PrintJob : public Object {
protected:
    const inline static char *className = "java.awt.PrintJob";
public:
    STATICINITIALIZE;

    PrintJob(jobject object) : JavaObject(object) {}

    Dimension getPageDimension() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPageDimension", "()Ljava.awt.Dimension;", )); }

    int getPageResolution() { return int(*javaClass->invokeMethod<int>(this->object, "getPageResolution", "()I", )); }

    bool lastPageFirst() { return bool(*javaClass->invokeMethod<boolean>(this->object, "lastPageFirst", "()Z", )); }

    void finalize() { (*javaClass->invokeMethod<void>(this->object, "finalize", "()V", )); }

    void end() { (*javaClass->invokeMethod<void>(this->object, "end", "()V", )); }

    Graphics getGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava.awt.Graphics;", )); }

};


/**
 * Classpath: java.util.Properties$LineReader
 * Enclosing class: java.util.Properties
 * Package name: java.util
 */
class Properties_LineReader : public Object {
protected:
    const inline static char *className = "java.util.Properties$LineReader";
public:
    STATICINITIALIZE;

    Properties_LineReader(jobject object) : JavaObject(object) {}

    int readLine() { return int(*javaClass->invokeMethod<int>(this->object, "readLine", "()I", )); }

};


/**
 * Classpath: java.io.BufferedWriter
 * Package name: java.io
 */
class BufferedWriter : public Writer {
protected:
    const inline static char *className = "java.io.BufferedWriter";
public:
    STATICINITIALIZE;

    BufferedWriter(jobject object) : JavaObject(object) {}

    int min(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "min", "(II)I", arg0, arg1)); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void write(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([CII)V", arg0, arg1, arg2)); }

    void write(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void newLine() { (*javaClass->invokeMethod<void>(this->object, "newLine", "()V", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void ensureOpen() { (*javaClass->invokeMethod<void>(this->object, "ensureOpen", "()V", )); }

    void flushBuffer() { (*javaClass->invokeMethod<void>(this->object, "flushBuffer", "()V", )); }

};


/**
 * Classpath: java.awt.EventQueue
 * Package name: java.awt
 */
class EventQueue : public Object {
protected:
    const inline static char *className = "java.awt.EventQueue";
public:
    STATICINITIALIZE;

    EventQueue(jobject object) : JavaObject(object) {}

    void postEventPrivate(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "postEventPrivate", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void initDispatchThread() { (*javaClass->invokeMethod<void>(this->object, "initDispatchThread", "()V", )); }

    bool coalesceEvent(AWTEvent arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "coalesceEvent", "(Ljava.awt.AWTEvent;I)Z", arg0, arg1)); }

    void cacheEQItem(EventQueueItem arg0) { (*javaClass->invokeMethod<void>(this->object, "cacheEQItem", "(Lsun.awt.EventQueueItem;)V", arg0)); }

    bool noEvents() { return bool(*javaClass->invokeMethod<boolean>(this->object, "noEvents", "()Z", )); }

    bool coalescePaintEvent(PaintEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "coalescePaintEvent", "(Ljava.awt.event.PaintEvent;)Z", arg0)); }

    static int eventToCacheIndex(AWTEvent arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "eventToCacheIndex", "(Ljava.awt.AWTEvent;)I", arg0)); }

    PaintEvent mergePaintEvents(PaintEvent arg0, PaintEvent arg1) { return PaintEvent(*javaClass->invokeMethod<jobject>(this->object, "mergePaintEvents", "(Ljava.awt.event.PaintEvent;Ljava.awt.event.PaintEvent;)Ljava.awt.event.PaintEvent;", arg0, arg1)); }

    bool coalescePeerEvent(PeerEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "coalescePeerEvent", "(Lsun.awt.PeerEvent;)Z", arg0)); }

    bool coalesceOtherEvent(AWTEvent arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "coalesceOtherEvent", "(Ljava.awt.AWTEvent;I)Z", arg0, arg1)); }

    bool coalesceMouseEvent(MouseEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "coalesceMouseEvent", "(Ljava.awt.event.MouseEvent;)Z", arg0)); }

    AWTEvent getNextEventPrivate() { return AWTEvent(*javaClass->invokeMethod<jobject>(this->object, "getNextEventPrivate", "()Ljava.awt.AWTEvent;", )); }

    void uncacheEQItem(EventQueueItem arg0) { (*javaClass->invokeMethod<void>(this->object, "uncacheEQItem", "(Lsun.awt.EventQueueItem;)V", arg0)); }

    static AccessControlContext getAccessControlContextFrom(Object arg0) { return AccessControlContext(*javaClass->invokeStaticMethod<jobject>(this->object, "getAccessControlContextFrom", "(Ljava.lang.Object;)Ljava.security.AccessControlContext;", arg0)); }

    void setCurrentEventAndMostRecentTimeImpl(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "setCurrentEventAndMostRecentTimeImpl", "(Ljava.awt.AWTEvent;)V", arg0)); }

    static PlatformLogger getEventLog() { return PlatformLogger(*javaClass->invokeStaticMethod<jobject>(this->object, "getEventLog", "()Lsun.util.logging.PlatformLogger;", )); }

    long getMostRecentEventTimeImpl() { return long(*javaClass->invokeMethod<long>(this->object, "getMostRecentEventTimeImpl", "()J", )); }

    AWTEvent getCurrentEventImpl() { return AWTEvent(*javaClass->invokeMethod<jobject>(this->object, "getCurrentEventImpl", "()Ljava.awt.AWTEvent;", )); }

    AWTEvent peekEvent() { return AWTEvent(*javaClass->invokeMethod<jobject>(this->object, "peekEvent", "()Ljava.awt.AWTEvent;", )); }

    AWTEvent peekEvent(int arg0) { return AWTEvent(*javaClass->invokeMethod<jobject>(this->object, "peekEvent", "(I)Ljava.awt.AWTEvent;", arg0)); }

    bool isDispatchThreadImpl() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDispatchThreadImpl", "()Z", )); }

    void wakeup(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "wakeup", "(Z)V", arg0)); }

    void setFwDispatcher(FwDispatcher arg0) { (*javaClass->invokeMethod<void>(this->object, "setFwDispatcher", "(Lsun.awt.FwDispatcher;)V", arg0)); }

    AWTEvent getNextEvent() { return AWTEvent(*javaClass->invokeMethod<jobject>(this->object, "getNextEvent", "()Ljava.awt.AWTEvent;", )); }

    AWTEvent getNextEvent(int arg0) { return AWTEvent(*javaClass->invokeMethod<jobject>(this->object, "getNextEvent", "(I)Ljava.awt.AWTEvent;", arg0)); }

    static long getMostRecentEventTime() { return long(*javaClass->invokeStaticMethod<long>(this->object, "getMostRecentEventTime", "()J", )); }

    long getMostRecentEventTimeEx() { return long(*javaClass->invokeMethod<long>(this->object, "getMostRecentEventTimeEx", "()J", )); }

    void detachDispatchThread(EventDispatchThread arg0) { (*javaClass->invokeMethod<void>(this->object, "detachDispatchThread", "(Ljava.awt.EventDispatchThread;)V", arg0)); }

    static int getPriority(AWTEvent arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getPriority", "(Ljava.awt.AWTEvent;)I", arg0)); }

    EventDispatchThread getDispatchThread() { return EventDispatchThread(*javaClass->invokeMethod<jobject>(this->object, "getDispatchThread", "()Ljava.awt.EventDispatchThread;", )); }

    SecondaryLoop createSecondaryLoop() { return SecondaryLoop(*javaClass->invokeMethod<jobject>(this->object, "createSecondaryLoop", "()Ljava.awt.SecondaryLoop;", )); }

    SecondaryLoop createSecondaryLoop(Conditional arg0, EventFilter arg1, long arg2) { return SecondaryLoop(*javaClass->invokeMethod<jobject>(this->object, "createSecondaryLoop", "(Ljava.awt.Conditional;Ljava.awt.EventFilter;J)Ljava.awt.SecondaryLoop;", arg0, arg1, arg2)); }

    long getMostRecentKeyEventTime() { return long(*javaClass->invokeMethod<long>(this->object, "getMostRecentKeyEventTime", "()J", )); }

    static void invokeLater(Runnable arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "invokeLater", "(Ljava.lang.Runnable;)V", arg0)); }

    static void setCurrentEventAndMostRecentTime(AWTEvent arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setCurrentEventAndMostRecentTime", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void removeSourceEvents(Object arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "removeSourceEvents", "(Ljava.lang.Object;Z)V", arg0, arg1)); }

    static AWTEvent getCurrentEvent() { return AWTEvent(*javaClass->invokeStaticMethod<jobject>(this->object, "getCurrentEvent", "()Ljava.awt.AWTEvent;", )); }

    void postEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "postEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void postEvent(AWTEvent arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "postEvent", "(Ljava.awt.AWTEvent;I)V", arg0, arg1)); }

    static bool isDispatchThread() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isDispatchThread", "()Z", )); }

    static void invokeAndWait(Object arg0, Runnable arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "invokeAndWait", "(Ljava.lang.Object;Ljava.lang.Runnable;)V", arg0, arg1)); }

    static void invokeAndWait(Runnable arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "invokeAndWait", "(Ljava.lang.Runnable;)V", arg0)); }

    void dispatchEventImpl(AWTEvent arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "dispatchEventImpl", "(Ljava.awt.AWTEvent;Ljava.lang.Object;)V", arg0, arg1)); }

    void dispatchEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "dispatchEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    void push(EventQueue arg0) { (*javaClass->invokeMethod<void>(this->object, "push", "(Ljava.awt.EventQueue;)V", arg0)); }

    void pop() { (*javaClass->invokeMethod<void>(this->object, "pop", "()V", )); }

};


/**
 * Classpath: sun.awt.EventQueueItem
 * Package name: sun.awt
 */
class EventQueueItem : public Object {
protected:
    const inline static char *className = "sun.awt.EventQueueItem";
public:
    STATICINITIALIZE;

    EventQueueItem(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.event.InvocationEvent
 * Package name: java.awt.event
 */
class InvocationEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.InvocationEvent";
public:
    STATICINITIALIZE;

    InvocationEvent(jobject object) : JavaObject(object) {}

    bool isDispatched() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDispatched", "()Z", )); }

    Throwable getThrowable() { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "getThrowable", "()Ljava.lang.Throwable;", )); }

    void finishedDispatching(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "finishedDispatching", "(Z)V", arg0)); }

    void dispatch() { (*javaClass->invokeMethod<void>(this->object, "dispatch", "()V", )); }

    Exception getException() { return Exception(*javaClass->invokeMethod<jobject>(this->object, "getException", "()Ljava.lang.Exception;", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    long getWhen() { return long(*javaClass->invokeMethod<long>(this->object, "getWhen", "()J", )); }

};


/**
 * Classpath: sun.util.logging.PlatformLogger
 * Package name: sun.util.logging
 */
class PlatformLogger : public Object {
protected:
    const inline static char *className = "sun.util.logging.PlatformLogger";
public:
    STATICINITIALIZE;

    PlatformLogger(jobject object) : JavaObject(object) {}

    void severe(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "severe", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void severe(String arg0) { (*javaClass->invokeMethod<void>(this->object, "severe", "(Ljava.lang.String;)V", arg0)); }

    void severe(String arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "severe", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    static PlatformLogger_Level toPlatformLevel(System_Logger_Level arg0) { return PlatformLogger_Level(*javaClass->invokeStaticMethod<jobject>(this->object, "toPlatformLevel", "(Ljava.lang.System$Logger$Level;)Lsun.util.logging.PlatformLogger$Level;", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void info(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "info", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void info(String arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "info", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    void info(String arg0) { (*javaClass->invokeMethod<void>(this->object, "info", "(Ljava.lang.String;)V", arg0)); }

    static PlatformLogger getLogger(String arg0) { return PlatformLogger(*javaClass->invokeStaticMethod<jobject>(this->object, "getLogger", "(Ljava.lang.String;)Lsun.util.logging.PlatformLogger;", arg0)); }

    void config(String arg0) { (*javaClass->invokeMethod<void>(this->object, "config", "(Ljava.lang.String;)V", arg0)); }

    void config(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "config", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void config(String arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "config", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    PlatformLogger_Level level() { return PlatformLogger_Level(*javaClass->invokeMethod<jobject>(this->object, "level", "()Lsun.util.logging.PlatformLogger$Level;", )); }

    void warning(String arg0) { (*javaClass->invokeMethod<void>(this->object, "warning", "(Ljava.lang.String;)V", arg0)); }

    void warning(String arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "warning", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    void warning(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "warning", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void fine(String arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "fine", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    void fine(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "fine", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void fine(String arg0) { (*javaClass->invokeMethod<void>(this->object, "fine", "(Ljava.lang.String;)V", arg0)); }

    void finest(String arg0) { (*javaClass->invokeMethod<void>(this->object, "finest", "(Ljava.lang.String;)V", arg0)); }

    void finest(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "finest", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void finest(String arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "finest", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    bool isLoggable(PlatformLogger_Level arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLoggable", "(Lsun.util.logging.PlatformLogger$Level;)Z", arg0)); }

    void finer(String arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "finer", "(Ljava.lang.String;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void finer(String arg0) { (*javaClass->invokeMethod<void>(this->object, "finer", "(Ljava.lang.String;)V", arg0)); }

    void finer(String arg0, Object_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "finer", "(Ljava.lang.String;[Ljava.lang.Object;)V", arg0, arg1)); }

    bool isEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnabled", "()Z", )); }

    void setLevel(PlatformLogger_Level arg0) { (*javaClass->invokeMethod<void>(this->object, "setLevel", "(Lsun.util.logging.PlatformLogger$Level;)V", arg0)); }

};


/**
 * Classpath: java.lang.System$Logger$Level
 * Enclosing class: java.lang.System$Logger
 * Package name: java.lang
 */
class System_Logger_Level : public Enum {
protected:
    const inline static char *className = "java.lang.System$Logger$Level";
public:
    STATICINITIALIZE;

    System_Logger_Level(jobject object) : JavaObject(object) {}

    int getSeverity() { return int(*javaClass->invokeMethod<int>(this->object, "getSeverity", "()I", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    static System_Logger_Level valueOf(String arg0) { return System_Logger_Level(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.System$Logger$Level;", arg0)); }

};


/**
 * Classpath: sun.util.logging.PlatformLogger$Level
 * Enclosing class: sun.util.logging.PlatformLogger
 * Package name: sun.util.logging
 */
class PlatformLogger_Level : public Enum {
protected:
    const inline static char *className = "sun.util.logging.PlatformLogger$Level";
public:
    STATICINITIALIZE;

    PlatformLogger_Level(jobject object) : JavaObject(object) {}

    System_Logger_Level systemLevel() { return System_Logger_Level(*javaClass->invokeMethod<jobject>(this->object, "systemLevel", "()Ljava.lang.System$Logger$Level;", )); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    static PlatformLogger_Level valueOf(String arg0) { return PlatformLogger_Level(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lsun.util.logging.PlatformLogger$Level;", arg0)); }

    static PlatformLogger_Level valueOf(int arg0) { return PlatformLogger_Level(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(I)Lsun.util.logging.PlatformLogger$Level;", arg0)); }

};


/**
 * Classpath: sun.awt.FwDispatcher
 * Package name: sun.awt
 */
class FwDispatcher : public JavaObject {
protected:
    const inline static char *className = "sun.awt.FwDispatcher";
public:
    STATICINITIALIZE;

    FwDispatcher(jobject object) : JavaObject(object) {}

    void scheduleDispatch(Runnable arg0) { (*javaClass->invokeMethod<void>(this->object, "scheduleDispatch", "(Ljava.lang.Runnable;)V", arg0)); }

    SecondaryLoop createSecondaryLoop() { return SecondaryLoop(*javaClass->invokeMethod<jobject>(this->object, "createSecondaryLoop", "()Ljava.awt.SecondaryLoop;", )); }

    bool isDispatchThread() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDispatchThread", "()Z", )); }

};


/**
 * Classpath: java.awt.SecondaryLoop
 * Package name: java.awt
 */
class SecondaryLoop : public JavaObject {
protected:
    const inline static char *className = "java.awt.SecondaryLoop";
public:
    STATICINITIALIZE;

    SecondaryLoop(jobject object) : JavaObject(object) {}

    bool exit() { return bool(*javaClass->invokeMethod<boolean>(this->object, "exit", "()Z", )); }

    bool enter() { return bool(*javaClass->invokeMethod<boolean>(this->object, "enter", "()Z", )); }

};


/**
 * Classpath: java.awt.EventDispatchThread
 * Package name: java.awt
 */
class EventDispatchThread : public Thread {
protected:
    const inline static char *className = "java.awt.EventDispatchThread";
public:
    STATICINITIALIZE;

    EventDispatchThread(jobject object) : JavaObject(object) {}

    void stopDispatching() { (*javaClass->invokeMethod<void>(this->object, "stopDispatching", "()V", )); }

    void setEventQueue(EventQueue arg0) { (*javaClass->invokeMethod<void>(this->object, "setEventQueue", "(Ljava.awt.EventQueue;)V", arg0)); }

    void pumpEvents(Conditional arg0) { (*javaClass->invokeMethod<void>(this->object, "pumpEvents", "(Ljava.awt.Conditional;)V", arg0)); }

    void pumpEvents(int arg0, Conditional arg1) { (*javaClass->invokeMethod<void>(this->object, "pumpEvents", "(ILjava.awt.Conditional;)V", arg0, arg1)); }

    void pumpEventsForFilter(int arg0, Conditional arg1, EventFilter arg2) { (*javaClass->invokeMethod<void>(this->object, "pumpEventsForFilter", "(ILjava.awt.Conditional;Ljava.awt.EventFilter;)V", arg0, arg1, arg2)); }

    void pumpEventsForFilter(Conditional arg0, EventFilter arg1) { (*javaClass->invokeMethod<void>(this->object, "pumpEventsForFilter", "(Ljava.awt.Conditional;Ljava.awt.EventFilter;)V", arg0, arg1)); }

    void pumpOneEventForFilters(int arg0) { (*javaClass->invokeMethod<void>(this->object, "pumpOneEventForFilters", "(I)V", arg0)); }

    bool filterAndCheckEvent(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "filterAndCheckEvent", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processException(Throwable arg0) { (*javaClass->invokeMethod<void>(this->object, "processException", "(Ljava.lang.Throwable;)V", arg0)); }

    void run() { (*javaClass->invokeMethod<void>(this->object, "run", "()V", )); }

    void addEventFilter(EventFilter arg0) { (*javaClass->invokeMethod<void>(this->object, "addEventFilter", "(Ljava.awt.EventFilter;)V", arg0)); }

    void removeEventFilter(EventFilter arg0) { (*javaClass->invokeMethod<void>(this->object, "removeEventFilter", "(Ljava.awt.EventFilter;)V", arg0)); }

    void pumpEventsForHierarchy(Conditional arg0, Component arg1) { (*javaClass->invokeMethod<void>(this->object, "pumpEventsForHierarchy", "(Ljava.awt.Conditional;Ljava.awt.Component;)V", arg0, arg1)); }

    void pumpEventsForHierarchy(int arg0, Conditional arg1, Component arg2) { (*javaClass->invokeMethod<void>(this->object, "pumpEventsForHierarchy", "(ILjava.awt.Conditional;Ljava.awt.Component;)V", arg0, arg1, arg2)); }

    EventQueue getEventQueue() { return EventQueue(*javaClass->invokeMethod<jobject>(this->object, "getEventQueue", "()Ljava.awt.EventQueue;", )); }

};


/**
 * Classpath: java.awt.Conditional
 * Package name: java.awt
 */
class Conditional : public JavaObject {
protected:
    const inline static char *className = "java.awt.Conditional";
public:
    STATICINITIALIZE;

    Conditional(jobject object) : JavaObject(object) {}

    bool evaluate() { return bool(*javaClass->invokeMethod<boolean>(this->object, "evaluate", "()Z", )); }

};


/**
 * Classpath: java.awt.EventFilter
 * Package name: java.awt
 */
class EventFilter : public JavaObject {
protected:
    const inline static char *className = "java.awt.EventFilter";
public:
    STATICINITIALIZE;

    EventFilter(jobject object) : JavaObject(object) {}

    EventFilter_FilterAction acceptEvent(AWTEvent arg0) { return EventFilter_FilterAction(*javaClass->invokeMethod<jobject>(this->object, "acceptEvent", "(Ljava.awt.AWTEvent;)Ljava.awt.EventFilter$FilterAction;", arg0)); }

};


/**
 * Classpath: java.awt.EventFilter$FilterAction
 * Enclosing class: java.awt.EventFilter
 * Package name: java.awt
 */
class EventFilter_FilterAction : public Enum {
protected:
    const inline static char *className = "java.awt.EventFilter$FilterAction";
public:
    STATICINITIALIZE;

    EventFilter_FilterAction(jobject object) : JavaObject(object) {}

    static EventFilter_FilterAction valueOf(String arg0) { return EventFilter_FilterAction(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.EventFilter$FilterAction;", arg0)); }

};


/**
 * Classpath: java.awt.event.AWTEventListener
 * Package name: java.awt.event
 */
class AWTEventListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.AWTEventListener";
public:
    STATICINITIALIZE;

    AWTEventListener(jobject object) : JavaObject(object) {}

    void eventDispatched(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "eventDispatched", "(Ljava.awt.AWTEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.Dialog$ModalExclusionType
 * Enclosing class: java.awt.Dialog
 * Package name: java.awt
 */
class Dialog_ModalExclusionType : public Enum {
protected:
    const inline static char *className = "java.awt.Dialog$ModalExclusionType";
public:
    STATICINITIALIZE;

    Dialog_ModalExclusionType(jobject object) : JavaObject(object) {}

    static Dialog_ModalExclusionType valueOf(String arg0) { return Dialog_ModalExclusionType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.Dialog$ModalExclusionType;", arg0)); }

};


/**
 * Classpath: java.lang.ref.WeakReference
 * Package name: java.lang.ref
 */
class WeakReference : public Reference {
protected:
    const inline static char *className = "java.lang.ref.WeakReference";
public:
    STATICINITIALIZE;

    WeakReference(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.awt.AppContext
 * Package name: sun.awt
 */
class AppContext : public Object {
protected:
    const inline static char *className = "sun.awt.AppContext";
public:
    STATICINITIALIZE;

    AppContext(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    ThreadGroup getThreadGroup() { return ThreadGroup(*javaClass->invokeMethod<jobject>(this->object, "getThreadGroup", "()Ljava.lang.ThreadGroup;", )); }

    ClassLoader getContextClassLoader() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getContextClassLoader", "()Ljava.lang.ClassLoader;", )); }

    static AppContext getAppContext() { return AppContext(*javaClass->invokeStaticMethod<jobject>(this->object, "getAppContext", "()Lsun.awt.AppContext;", )); }

    static Set getAppContexts() { return Set(*javaClass->invokeStaticMethod<jobject>(this->object, "getAppContexts", "()Ljava.util.Set;", )); }

    bool isDisposed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDisposed", "()Z", )); }

    static void initMainAppContext() { (*javaClass->invokeStaticMethod<void>(this->object, "initMainAppContext", "()V", )); }

    static bool isMainContext(AppContext arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMainContext", "(Lsun.awt.AppContext;)Z", arg0)); }

    static void stopEventDispatchThreads() { (*javaClass->invokeStaticMethod<void>(this->object, "stopEventDispatchThreads", "()V", )); }

    static Object getSoftReferenceValue(Object arg0, Supplier arg1) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "getSoftReferenceValue", "(Ljava.lang.Object;Ljava.util.function.Supplier;)Ljava.lang.Object;", arg0, arg1)); }

    Void lambda_dispose_0() { return Void(*javaClass->invokeMethod<jobject>(this->object, "lambda$dispose$0", "()Ljava.lang.Void;", )); }

    void removePropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "removePropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    void addPropertyChangeListener(String arg0, PropertyChangeListener arg1) { (*javaClass->invokeMethod<void>(this->object, "addPropertyChangeListener", "(Ljava.lang.String;Ljava.beans.PropertyChangeListener;)V", arg0, arg1)); }

    void dispose() { (*javaClass->invokeMethod<void>(this->object, "dispose", "()V", )); }

};


/**
 * Classpath: java.awt.event.WindowListener
 * Package name: java.awt.event
 */
class WindowListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.WindowListener";
public:
    STATICINITIALIZE;

    WindowListener(jobject object) : JavaObject(object) {}

    void windowOpened(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowOpened", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowClosing(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowClosing", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowClosed(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowClosed", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowIconified(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowIconified", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowDeiconified(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowDeiconified", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowActivated(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowActivated", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowDeactivated(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowDeactivated", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.WindowFocusListener
 * Package name: java.awt.event
 */
class WindowFocusListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.WindowFocusListener";
public:
    STATICINITIALIZE;

    WindowFocusListener(jobject object) : JavaObject(object) {}

    void windowGainedFocus(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowGainedFocus", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

    void windowLostFocus(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowLostFocus", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.WindowStateListener
 * Package name: java.awt.event
 */
class WindowStateListener : public JavaObject {
protected:
    const inline static char *className = "java.awt.event.WindowStateListener";
public:
    STATICINITIALIZE;

    WindowStateListener(jobject object) : JavaObject(object) {}

    void windowStateChanged(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowStateChanged", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

};


/**
 * Classpath: sun.awt.util.IdentityArrayList
 * Package name: sun.awt.util
 */
class IdentityArrayList : public AbstractList {
protected:
    const inline static char *className = "sun.awt.util.IdentityArrayList";
public:
    STATICINITIALIZE;

    IdentityArrayList(jobject object) : JavaObject(object) {}

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    void add(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(ILjava.lang.Object;)V", arg0, arg1)); }

    Object remove(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(I)Ljava.lang.Object;", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    Object get(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Ljava.lang.Object;", arg0)); }

    int indexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.Object;)I", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    void rangeCheck(int arg0) { (*javaClass->invokeMethod<void>(this->object, "rangeCheck", "(I)V", arg0)); }

    int lastIndexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.Object;)I", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool addAll(int arg0, Collection arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(ILjava.util.Collection;)Z", arg0, arg1)); }

    Object set(int arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "set", "(ILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    void rangeCheckForAdd(int arg0) { (*javaClass->invokeMethod<void>(this->object, "rangeCheckForAdd", "(I)V", arg0)); }

    void fastRemove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "fastRemove", "(I)V", arg0)); }

    String outOfBoundsMsg(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "outOfBoundsMsg", "(I)Ljava.lang.String;", arg0)); }

    void removeRange(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "removeRange", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.GraphicsDevice$WindowTranslucency
 * Enclosing class: java.awt.GraphicsDevice
 * Package name: java.awt
 */
class GraphicsDevice_WindowTranslucency : public Enum {
protected:
    const inline static char *className = "java.awt.GraphicsDevice$WindowTranslucency";
public:
    STATICINITIALIZE;

    GraphicsDevice_WindowTranslucency(jobject object) : JavaObject(object) {}

    static GraphicsDevice_WindowTranslucency valueOf(String arg0) { return GraphicsDevice_WindowTranslucency(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.awt.GraphicsDevice$WindowTranslucency;", arg0)); }

};


/**
 * Classpath: java.awt.image.TileObserver
 * Package name: java.awt.image
 */
class TileObserver : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.TileObserver";
public:
    STATICINITIALIZE;

    TileObserver(jobject object) : JavaObject(object) {}

    void tileUpdate(WritableRenderedImage arg0, int arg1, int arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "tileUpdate", "(Ljava.awt.image.WritableRenderedImage;IIZ)V", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.awt.image.WritableRenderedImage
 * Package name: java.awt.image
 */
class WritableRenderedImage : public JavaObject {
protected:
    const inline static char *className = "java.awt.image.WritableRenderedImage";
public:
    STATICINITIALIZE;

    WritableRenderedImage(jobject object) : JavaObject(object) {}

    void setData(Raster arg0) { (*javaClass->invokeMethod<void>(this->object, "setData", "(Ljava.awt.image.Raster;)V", arg0)); }

    void addTileObserver(TileObserver arg0) { (*javaClass->invokeMethod<void>(this->object, "addTileObserver", "(Ljava.awt.image.TileObserver;)V", arg0)); }

    void removeTileObserver(TileObserver arg0) { (*javaClass->invokeMethod<void>(this->object, "removeTileObserver", "(Ljava.awt.image.TileObserver;)V", arg0)); }

    bool isTileWritable(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTileWritable", "(II)Z", arg0, arg1)); }

    bool hasTileWriters() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasTileWriters", "()Z", )); }

    WritableRaster getWritableTile(int arg0, int arg1) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "getWritableTile", "(II)Ljava.awt.image.WritableRaster;", arg0, arg1)); }

    void releaseWritableTile(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "releaseWritableTile", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.SimpleTexture
 * Package name: net.minecraft.client.renderer.texture
 */
class SimpleTexture : public AbstractTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.SimpleTexture";
public:
    STATICINITIALIZE;

    SimpleTexture(jobject object) : JavaObject(object) {}

    void loadTexture(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "loadTexture", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.model.ModelBase
 * Package name: net.minecraft.client.model
 */
class ModelBase : public Object {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelBase";
public:
    STATICINITIALIZE;

    ModelBase(jobject object) : JavaObject(object) {}

    ModelRenderer getRandomModelBox(Random arg0) { return ModelRenderer(*javaClass->invokeMethod<jobject>(this->object, "getRandomModelBox", "(Ljava.util.Random;)Lnet.minecraft.client.model.ModelRenderer;", arg0)); }

    void setTextureOffset(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setTextureOffset", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    TextureOffset getTextureOffset(String arg0) { return TextureOffset(*javaClass->invokeMethod<jobject>(this->object, "getTextureOffset", "(Ljava.lang.String;)Lnet.minecraft.client.model.TextureOffset;", arg0)); }

    static void copyModelAngles(ModelRenderer arg0, ModelRenderer arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "copyModelAngles", "(Lnet.minecraft.client.model.ModelRenderer;Lnet.minecraft.client.model.ModelRenderer;)V", arg0, arg1)); }

    void setModelAttributes(ModelBase arg0) { (*javaClass->invokeMethod<void>(this->object, "setModelAttributes", "(Lnet.minecraft.client.model.ModelBase;)V", arg0)); }

    void setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6) { (*javaClass->invokeMethod<void>(this->object, "setRotationAngles", "(FFFFFFLnet.minecraft.entity.Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void setLivingAnimations(EntityLivingBase arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "setLivingAnimations", "(Lnet.minecraft.entity.EntityLivingBase;FFF)V", arg0, arg1, arg2, arg3)); }

    void render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (*javaClass->invokeMethod<void>(this->object, "render", "(Lnet.minecraft.entity.Entity;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

};


/**
 * Classpath: net.minecraft.client.model.ModelRenderer
 * Package name: net.minecraft.client.model
 */
class ModelRenderer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelRenderer";
public:
    STATICINITIALIZE;

    ModelRenderer(jobject object) : JavaObject(object) {}

    ModelRenderer setTextureOffset(int arg0, int arg1) { return ModelRenderer(*javaClass->invokeMethod<jobject>(this->object, "setTextureOffset", "(II)Lnet.minecraft.client.model.ModelRenderer;", arg0, arg1)); }

    void compileDisplayList(float arg0) { (*javaClass->invokeMethod<void>(this->object, "compileDisplayList", "(F)V", arg0)); }

    void setRotationPoint(float arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "setRotationPoint", "(FFF)V", arg0, arg1, arg2)); }

    void renderWithRotation(float arg0) { (*javaClass->invokeMethod<void>(this->object, "renderWithRotation", "(F)V", arg0)); }

    ModelRenderer setTextureSize(int arg0, int arg1) { return ModelRenderer(*javaClass->invokeMethod<jobject>(this->object, "setTextureSize", "(II)Lnet.minecraft.client.model.ModelRenderer;", arg0, arg1)); }

    void addChild(ModelRenderer arg0) { (*javaClass->invokeMethod<void>(this->object, "addChild", "(Lnet.minecraft.client.model.ModelRenderer;)V", arg0)); }

    void addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5, float arg6) { (*javaClass->invokeMethod<void>(this->object, "addBox", "(FFFIIIF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    ModelRenderer addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5, bool arg6) { return ModelRenderer(*javaClass->invokeMethod<jobject>(this->object, "addBox", "(FFFIIIZ)Lnet.minecraft.client.model.ModelRenderer;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    ModelRenderer addBox(float arg0, float arg1, float arg2, int arg3, int arg4, int arg5) { return ModelRenderer(*javaClass->invokeMethod<jobject>(this->object, "addBox", "(FFFIII)Lnet.minecraft.client.model.ModelRenderer;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    ModelRenderer addBox(String arg0, float arg1, float arg2, float arg3, int arg4, int arg5, int arg6) { return ModelRenderer(*javaClass->invokeMethod<jobject>(this->object, "addBox", "(Ljava.lang.String;FFFIII)Lnet.minecraft.client.model.ModelRenderer;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void postRender(float arg0) { (*javaClass->invokeMethod<void>(this->object, "postRender", "(F)V", arg0)); }

    void render(float arg0) { (*javaClass->invokeMethod<void>(this->object, "render", "(F)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.model.TextureOffset
 * Package name: net.minecraft.client.model
 */
class TextureOffset : public Object {
protected:
    const inline static char *className = "net.minecraft.client.model.TextureOffset";
public:
    STATICINITIALIZE;

    TextureOffset(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.renderer.entity.RendererLivingEntity
 * Package name: net.minecraft.client.renderer.entity
 */
class RendererLivingEntity : public Render {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RendererLivingEntity";
public:
    STATICINITIALIZE;

    RendererLivingEntity(jobject object) : JavaObject(object) {}

    bool canRenderName(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRenderName", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    bool canRenderName(EntityLivingBase arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRenderName", "(Lnet.minecraft.entity.EntityLivingBase;)Z", arg0)); }

    ModelBase getMainModel() { return ModelBase(*javaClass->invokeMethod<jobject>(this->object, "getMainModel", "()Lnet.minecraft.client.model.ModelBase;", )); }

    void preRenderCallback(EntityLivingBase arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "preRenderCallback", "(Lnet.minecraft.entity.EntityLivingBase;F)V", arg0, arg1)); }

    void renderLivingAt(EntityLivingBase arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "renderLivingAt", "(Lnet.minecraft.entity.EntityLivingBase;DDD)V", arg0, arg1, arg2, arg3)); }

    void rotateCorpse(EntityLivingBase arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "rotateCorpse", "(Lnet.minecraft.entity.EntityLivingBase;FFF)V", arg0, arg1, arg2, arg3)); }

    float getDeathMaxRotation(EntityLivingBase arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getDeathMaxRotation", "(Lnet.minecraft.entity.EntityLivingBase;)F", arg0)); }

    bool removeLayer(LayerRenderer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeLayer", "(Lnet.minecraft.client.renderer.entity.layers.LayerRenderer;)Z", arg0)); }

    float interpolateRotation(float arg0, float arg1, float arg2) { return float(*javaClass->invokeMethod<float>(this->object, "interpolateRotation", "(FFF)F", arg0, arg1, arg2)); }

    float handleRotationFloat(EntityLivingBase arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "handleRotationFloat", "(Lnet.minecraft.entity.EntityLivingBase;F)F", arg0, arg1)); }

    bool setScoreTeamColor(EntityLivingBase arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setScoreTeamColor", "(Lnet.minecraft.entity.EntityLivingBase;)Z", arg0)); }

    void unsetScoreTeamColor() { (*javaClass->invokeMethod<void>(this->object, "unsetScoreTeamColor", "()V", )); }

    bool setDoRenderBrightness(EntityLivingBase arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setDoRenderBrightness", "(Lnet.minecraft.entity.EntityLivingBase;F)Z", arg0, arg1)); }

    void unsetBrightness() { (*javaClass->invokeMethod<void>(this->object, "unsetBrightness", "()V", )); }

    void renderLayers(EntityLivingBase arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7) { (*javaClass->invokeMethod<void>(this->object, "renderLayers", "(Lnet.minecraft.entity.EntityLivingBase;FFFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    bool setBrightness(EntityLivingBase arg0, float arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setBrightness", "(Lnet.minecraft.entity.EntityLivingBase;FZ)Z", arg0, arg1, arg2)); }

    int getColorMultiplier(EntityLivingBase arg0, float arg1, float arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getColorMultiplier", "(Lnet.minecraft.entity.EntityLivingBase;FF)I", arg0, arg1, arg2)); }

    void renderModel(EntityLivingBase arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (*javaClass->invokeMethod<void>(this->object, "renderModel", "(Lnet.minecraft.entity.EntityLivingBase;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void setRenderOutlines(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRenderOutlines", "(Z)V", arg0)); }

    float getSwingProgress(EntityLivingBase arg0, float arg1) { return float(*javaClass->invokeMethod<float>(this->object, "getSwingProgress", "(Lnet.minecraft.entity.EntityLivingBase;F)F", arg0, arg1)); }

    bool addLayer(LayerRenderer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addLayer", "(Lnet.minecraft.client.renderer.entity.layers.LayerRenderer;)Z", arg0)); }

    void renderName(Entity arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "renderName", "(Lnet.minecraft.entity.Entity;DDD)V", arg0, arg1, arg2, arg3)); }

    void renderName(EntityLivingBase arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "renderName", "(Lnet.minecraft.entity.EntityLivingBase;DDD)V", arg0, arg1, arg2, arg3)); }

    void doRender(EntityLivingBase arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "doRender", "(Lnet.minecraft.entity.EntityLivingBase;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void doRender(Entity arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "doRender", "(Lnet.minecraft.entity.Entity;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void transformHeldFull3DItemLayer() { (*javaClass->invokeMethod<void>(this->object, "transformHeldFull3DItemLayer", "()V", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.entity.layers.LayerRenderer
 * Package name: net.minecraft.client.renderer.entity.layers
 */
class LayerRenderer : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.layers.LayerRenderer";
public:
    STATICINITIALIZE;

    LayerRenderer(jobject object) : JavaObject(object) {}

    bool shouldCombineTextures() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldCombineTextures", "()Z", )); }

    void doRenderLayer(EntityLivingBase arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7) { (*javaClass->invokeMethod<void>(this->object, "doRenderLayer", "(Lnet.minecraft.entity.EntityLivingBase;FFFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

};


/**
 * Classpath: net.minecraft.util.FrameTimer
 * Package name: net.minecraft.util
 */
class FrameTimer : public Object {
protected:
    const inline static char *className = "net.minecraft.util.FrameTimer";
public:
    STATICINITIALIZE;

    FrameTimer(jobject object) : JavaObject(object) {}

    int func_181751_b(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "func_181751_b", "(I)I", arg0)); }

    int func_181748_a(long arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "func_181748_a", "(JI)I", arg0, arg1)); }

    int func_181749_a() { return int(*javaClass->invokeMethod<int>(this->object, "func_181749_a", "()I", )); }

    int func_181750_b() { return int(*javaClass->invokeMethod<int>(this->object, "func_181750_b", "()I", )); }

    void func_181747_a(long arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181747_a", "(J)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.audio.MusicTicker
 * Package name: net.minecraft.client.audio
 */
class MusicTicker : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.MusicTicker";
public:
    STATICINITIALIZE;

    MusicTicker(jobject object) : JavaObject(object) {}

    void func_181558_a(MusicTicker_MusicType arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181558_a", "(Lnet.minecraft.client.audio.MusicTicker$MusicType;)V", arg0)); }

    void func_181557_a() { (*javaClass->invokeMethod<void>(this->object, "func_181557_a", "()V", )); }

    void update() { (*javaClass->invokeMethod<void>(this->object, "update", "()V", )); }

};


/**
 * Classpath: net.minecraft.client.audio.MusicTicker$MusicType
 * Enclosing class: net.minecraft.client.audio.MusicTicker
 * Package name: net.minecraft.client.audio
 */
class MusicTicker_MusicType : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.audio.MusicTicker$MusicType";
public:
    STATICINITIALIZE;

    MusicTicker_MusicType(jobject object) : JavaObject(object) {}

    ResourceLocation getMusicLocation() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getMusicLocation", "()Lnet.minecraft.util.ResourceLocation;", )); }

    int getMinDelay() { return int(*javaClass->invokeMethod<int>(this->object, "getMinDelay", "()I", )); }

    int getMaxDelay() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxDelay", "()I", )); }

    static MusicTicker_MusicType valueOf(String arg0) { return MusicTicker_MusicType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.audio.MusicTicker$MusicType;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.network.NetHandlerPlayClient
 * Package name: net.minecraft.client.network
 */
class NetHandlerPlayClient : public Object {
protected:
    const inline static char *className = "net.minecraft.client.network.NetHandlerPlayClient";
public:
    STATICINITIALIZE;

    NetHandlerPlayClient(jobject object) : JavaObject(object) {}

    void handleJoinGame(S01PacketJoinGame arg0) { (*javaClass->invokeMethod<void>(this->object, "handleJoinGame", "(Lnet.minecraft.network.play.server.S01PacketJoinGame;)V", arg0)); }

    void handleSpawnObject(S0EPacketSpawnObject arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnObject", "(Lnet.minecraft.network.play.server.S0EPacketSpawnObject;)V", arg0)); }

    void handleSpawnExperienceOrb(S11PacketSpawnExperienceOrb arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnExperienceOrb", "(Lnet.minecraft.network.play.server.S11PacketSpawnExperienceOrb;)V", arg0)); }

    void handleSpawnGlobalEntity(S2CPacketSpawnGlobalEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnGlobalEntity", "(Lnet.minecraft.network.play.server.S2CPacketSpawnGlobalEntity;)V", arg0)); }

    void handleSpawnPainting(S10PacketSpawnPainting arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnPainting", "(Lnet.minecraft.network.play.server.S10PacketSpawnPainting;)V", arg0)); }

    void handleEntityVelocity(S12PacketEntityVelocity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityVelocity", "(Lnet.minecraft.network.play.server.S12PacketEntityVelocity;)V", arg0)); }

    void handleEntityMetadata(S1CPacketEntityMetadata arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityMetadata", "(Lnet.minecraft.network.play.server.S1CPacketEntityMetadata;)V", arg0)); }

    void handleSpawnPlayer(S0CPacketSpawnPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnPlayer", "(Lnet.minecraft.network.play.server.S0CPacketSpawnPlayer;)V", arg0)); }

    void handleEntityTeleport(S18PacketEntityTeleport arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityTeleport", "(Lnet.minecraft.network.play.server.S18PacketEntityTeleport;)V", arg0)); }

    void handleHeldItemChange(S09PacketHeldItemChange arg0) { (*javaClass->invokeMethod<void>(this->object, "handleHeldItemChange", "(Lnet.minecraft.network.play.server.S09PacketHeldItemChange;)V", arg0)); }

    void handleEntityMovement(S14PacketEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityMovement", "(Lnet.minecraft.network.play.server.S14PacketEntity;)V", arg0)); }

    NetworkManager getNetworkManager() { return NetworkManager(*javaClass->invokeMethod<jobject>(this->object, "getNetworkManager", "()Lnet.minecraft.network.NetworkManager;", )); }

    void onDisconnect(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "onDisconnect", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    void handleEntityHeadLook(S19PacketEntityHeadLook arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityHeadLook", "(Lnet.minecraft.network.play.server.S19PacketEntityHeadLook;)V", arg0)); }

    void handleDestroyEntities(S13PacketDestroyEntities arg0) { (*javaClass->invokeMethod<void>(this->object, "handleDestroyEntities", "(Lnet.minecraft.network.play.server.S13PacketDestroyEntities;)V", arg0)); }

    void handlePlayerPosLook(S08PacketPlayerPosLook arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerPosLook", "(Lnet.minecraft.network.play.server.S08PacketPlayerPosLook;)V", arg0)); }

    void handleMultiBlockChange(S22PacketMultiBlockChange arg0) { (*javaClass->invokeMethod<void>(this->object, "handleMultiBlockChange", "(Lnet.minecraft.network.play.server.S22PacketMultiBlockChange;)V", arg0)); }

    void handleChunkData(S21PacketChunkData arg0) { (*javaClass->invokeMethod<void>(this->object, "handleChunkData", "(Lnet.minecraft.network.play.server.S21PacketChunkData;)V", arg0)); }

    void handleBlockChange(S23PacketBlockChange arg0) { (*javaClass->invokeMethod<void>(this->object, "handleBlockChange", "(Lnet.minecraft.network.play.server.S23PacketBlockChange;)V", arg0)); }

    void handleDisconnect(S40PacketDisconnect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleDisconnect", "(Lnet.minecraft.network.play.server.S40PacketDisconnect;)V", arg0)); }

    void handleCollectItem(S0DPacketCollectItem arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCollectItem", "(Lnet.minecraft.network.play.server.S0DPacketCollectItem;)V", arg0)); }

    void handleAnimation(S0BPacketAnimation arg0) { (*javaClass->invokeMethod<void>(this->object, "handleAnimation", "(Lnet.minecraft.network.play.server.S0BPacketAnimation;)V", arg0)); }

    void handleUseBed(S0APacketUseBed arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUseBed", "(Lnet.minecraft.network.play.server.S0APacketUseBed;)V", arg0)); }

    void handleSpawnMob(S0FPacketSpawnMob arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnMob", "(Lnet.minecraft.network.play.server.S0FPacketSpawnMob;)V", arg0)); }

    void handleTimeUpdate(S03PacketTimeUpdate arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTimeUpdate", "(Lnet.minecraft.network.play.server.S03PacketTimeUpdate;)V", arg0)); }

    void handleSpawnPosition(S05PacketSpawnPosition arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnPosition", "(Lnet.minecraft.network.play.server.S05PacketSpawnPosition;)V", arg0)); }

    void handleEntityAttach(S1BPacketEntityAttach arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityAttach", "(Lnet.minecraft.network.play.server.S1BPacketEntityAttach;)V", arg0)); }

    void handleEntityStatus(S19PacketEntityStatus arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityStatus", "(Lnet.minecraft.network.play.server.S19PacketEntityStatus;)V", arg0)); }

    void handleUpdateHealth(S06PacketUpdateHealth arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateHealth", "(Lnet.minecraft.network.play.server.S06PacketUpdateHealth;)V", arg0)); }

    void handleSetExperience(S1FPacketSetExperience arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSetExperience", "(Lnet.minecraft.network.play.server.S1FPacketSetExperience;)V", arg0)); }

    void handleRespawn(S07PacketRespawn arg0) { (*javaClass->invokeMethod<void>(this->object, "handleRespawn", "(Lnet.minecraft.network.play.server.S07PacketRespawn;)V", arg0)); }

    void handleExplosion(S27PacketExplosion arg0) { (*javaClass->invokeMethod<void>(this->object, "handleExplosion", "(Lnet.minecraft.network.play.server.S27PacketExplosion;)V", arg0)); }

    void handleOpenWindow(S2DPacketOpenWindow arg0) { (*javaClass->invokeMethod<void>(this->object, "handleOpenWindow", "(Lnet.minecraft.network.play.server.S2DPacketOpenWindow;)V", arg0)); }

    void handleSetSlot(S2FPacketSetSlot arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSetSlot", "(Lnet.minecraft.network.play.server.S2FPacketSetSlot;)V", arg0)); }

    void handleConfirmTransaction(S32PacketConfirmTransaction arg0) { (*javaClass->invokeMethod<void>(this->object, "handleConfirmTransaction", "(Lnet.minecraft.network.play.server.S32PacketConfirmTransaction;)V", arg0)); }

    void handleWindowItems(S30PacketWindowItems arg0) { (*javaClass->invokeMethod<void>(this->object, "handleWindowItems", "(Lnet.minecraft.network.play.server.S30PacketWindowItems;)V", arg0)); }

    void handleSignEditorOpen(S36PacketSignEditorOpen arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSignEditorOpen", "(Lnet.minecraft.network.play.server.S36PacketSignEditorOpen;)V", arg0)); }

    void handleUpdateSign(S33PacketUpdateSign arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateSign", "(Lnet.minecraft.network.play.server.S33PacketUpdateSign;)V", arg0)); }

    void handleUpdateTileEntity(S35PacketUpdateTileEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateTileEntity", "(Lnet.minecraft.network.play.server.S35PacketUpdateTileEntity;)V", arg0)); }

    void handleWindowProperty(S31PacketWindowProperty arg0) { (*javaClass->invokeMethod<void>(this->object, "handleWindowProperty", "(Lnet.minecraft.network.play.server.S31PacketWindowProperty;)V", arg0)); }

    void handleEntityEquipment(S04PacketEntityEquipment arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityEquipment", "(Lnet.minecraft.network.play.server.S04PacketEntityEquipment;)V", arg0)); }

    void handleCloseWindow(S2EPacketCloseWindow arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCloseWindow", "(Lnet.minecraft.network.play.server.S2EPacketCloseWindow;)V", arg0)); }

    void handleBlockAction(S24PacketBlockAction arg0) { (*javaClass->invokeMethod<void>(this->object, "handleBlockAction", "(Lnet.minecraft.network.play.server.S24PacketBlockAction;)V", arg0)); }

    void handleBlockBreakAnim(S25PacketBlockBreakAnim arg0) { (*javaClass->invokeMethod<void>(this->object, "handleBlockBreakAnim", "(Lnet.minecraft.network.play.server.S25PacketBlockBreakAnim;)V", arg0)); }

    void handleMapChunkBulk(S26PacketMapChunkBulk arg0) { (*javaClass->invokeMethod<void>(this->object, "handleMapChunkBulk", "(Lnet.minecraft.network.play.server.S26PacketMapChunkBulk;)V", arg0)); }

    void handleChangeGameState(S2BPacketChangeGameState arg0) { (*javaClass->invokeMethod<void>(this->object, "handleChangeGameState", "(Lnet.minecraft.network.play.server.S2BPacketChangeGameState;)V", arg0)); }

    void handleEffect(S28PacketEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEffect", "(Lnet.minecraft.network.play.server.S28PacketEffect;)V", arg0)); }

    void handleStatistics(S37PacketStatistics arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatistics", "(Lnet.minecraft.network.play.server.S37PacketStatistics;)V", arg0)); }

    void handleEntityEffect(S1DPacketEntityEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityEffect", "(Lnet.minecraft.network.play.server.S1DPacketEntityEffect;)V", arg0)); }

    void handleCombatEvent(S42PacketCombatEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCombatEvent", "(Lnet.minecraft.network.play.server.S42PacketCombatEvent;)V", arg0)); }

    void handleServerDifficulty(S41PacketServerDifficulty arg0) { (*javaClass->invokeMethod<void>(this->object, "handleServerDifficulty", "(Lnet.minecraft.network.play.server.S41PacketServerDifficulty;)V", arg0)); }

    void handleCamera(S43PacketCamera arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCamera", "(Lnet.minecraft.network.play.server.S43PacketCamera;)V", arg0)); }

    void handleWorldBorder(S44PacketWorldBorder arg0) { (*javaClass->invokeMethod<void>(this->object, "handleWorldBorder", "(Lnet.minecraft.network.play.server.S44PacketWorldBorder;)V", arg0)); }

    void handleTitle(S45PacketTitle arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTitle", "(Lnet.minecraft.network.play.server.S45PacketTitle;)V", arg0)); }

    void handleSetCompressionLevel(S46PacketSetCompressionLevel arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSetCompressionLevel", "(Lnet.minecraft.network.play.server.S46PacketSetCompressionLevel;)V", arg0)); }

    void handleRemoveEntityEffect(S1EPacketRemoveEntityEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleRemoveEntityEffect", "(Lnet.minecraft.network.play.server.S1EPacketRemoveEntityEffect;)V", arg0)); }

    void handlePlayerListItem(S38PacketPlayerListItem arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerListItem", "(Lnet.minecraft.network.play.server.S38PacketPlayerListItem;)V", arg0)); }

    void handleKeepAlive(S00PacketKeepAlive arg0) { (*javaClass->invokeMethod<void>(this->object, "handleKeepAlive", "(Lnet.minecraft.network.play.server.S00PacketKeepAlive;)V", arg0)); }

    void handlePlayerAbilities(S39PacketPlayerAbilities arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerAbilities", "(Lnet.minecraft.network.play.server.S39PacketPlayerAbilities;)V", arg0)); }

    void handleTabComplete(S3APacketTabComplete arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTabComplete", "(Lnet.minecraft.network.play.server.S3APacketTabComplete;)V", arg0)); }

    void handleSoundEffect(S29PacketSoundEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSoundEffect", "(Lnet.minecraft.network.play.server.S29PacketSoundEffect;)V", arg0)); }

    void handleResourcePack(S48PacketResourcePackSend arg0) { (*javaClass->invokeMethod<void>(this->object, "handleResourcePack", "(Lnet.minecraft.network.play.server.S48PacketResourcePackSend;)V", arg0)); }

    void handleEntityNBT(S49PacketUpdateEntityNBT arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityNBT", "(Lnet.minecraft.network.play.server.S49PacketUpdateEntityNBT;)V", arg0)); }

    void handleCustomPayload(S3FPacketCustomPayload arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCustomPayload", "(Lnet.minecraft.network.play.server.S3FPacketCustomPayload;)V", arg0)); }

    void handleScoreboardObjective(S3BPacketScoreboardObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "handleScoreboardObjective", "(Lnet.minecraft.network.play.server.S3BPacketScoreboardObjective;)V", arg0)); }

    void handleUpdateScore(S3CPacketUpdateScore arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateScore", "(Lnet.minecraft.network.play.server.S3CPacketUpdateScore;)V", arg0)); }

    void handleDisplayScoreboard(S3DPacketDisplayScoreboard arg0) { (*javaClass->invokeMethod<void>(this->object, "handleDisplayScoreboard", "(Lnet.minecraft.network.play.server.S3DPacketDisplayScoreboard;)V", arg0)); }

    void handleTeams(S3EPacketTeams arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTeams", "(Lnet.minecraft.network.play.server.S3EPacketTeams;)V", arg0)); }

    void handleParticles(S2APacketParticles arg0) { (*javaClass->invokeMethod<void>(this->object, "handleParticles", "(Lnet.minecraft.network.play.server.S2APacketParticles;)V", arg0)); }

    void handleEntityProperties(S20PacketEntityProperties arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityProperties", "(Lnet.minecraft.network.play.server.S20PacketEntityProperties;)V", arg0)); }

    Collection getPlayerInfoMap() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getPlayerInfoMap", "()Ljava.util.Collection;", )); }

    NetworkPlayerInfo getPlayerInfo(String arg0) { return NetworkPlayerInfo(*javaClass->invokeMethod<jobject>(this->object, "getPlayerInfo", "(Ljava.lang.String;)Lnet.minecraft.client.network.NetworkPlayerInfo;", arg0)); }

    NetworkPlayerInfo getPlayerInfo(UUID arg0) { return NetworkPlayerInfo(*javaClass->invokeMethod<jobject>(this->object, "getPlayerInfo", "(Ljava.util.UUID;)Lnet.minecraft.client.network.NetworkPlayerInfo;", arg0)); }

    void addToSendQueue(Packet arg0) { (*javaClass->invokeMethod<void>(this->object, "addToSendQueue", "(Lnet.minecraft.network.Packet;)V", arg0)); }

    GameProfile getGameProfile() { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom.mojang.authlib.GameProfile;", )); }

    void handleChat(S02PacketChat arg0) { (*javaClass->invokeMethod<void>(this->object, "handleChat", "(Lnet.minecraft.network.play.server.S02PacketChat;)V", arg0)); }

    void handleMaps(S34PacketMaps arg0) { (*javaClass->invokeMethod<void>(this->object, "handleMaps", "(Lnet.minecraft.network.play.server.S34PacketMaps;)V", arg0)); }

    void handlePlayerListHeaderFooter(S47PacketPlayerListHeaderFooter arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerListHeaderFooter", "(Lnet.minecraft.network.play.server.S47PacketPlayerListHeaderFooter;)V", arg0)); }

    void cleanup() { (*javaClass->invokeMethod<void>(this->object, "cleanup", "()V", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S01PacketJoinGame
 * Package name: net.minecraft.network.play.server
 */
class S01PacketJoinGame : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S01PacketJoinGame";
public:
    STATICINITIALIZE;

    S01PacketJoinGame(jobject object) : JavaObject(object) {}

    bool isHardcoreMode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHardcoreMode", "()Z", )); }

    int getDimension() { return int(*javaClass->invokeMethod<int>(this->object, "getDimension", "()I", )); }

    int getMaxPlayers() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxPlayers", "()I", )); }

    bool isReducedDebugInfo() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReducedDebugInfo", "()Z", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    WorldType getWorldType() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "getWorldType", "()Lnet.minecraft.world.WorldType;", )); }

    WorldSettings_GameType getGameType() { return WorldSettings_GameType(*javaClass->invokeMethod<jobject>(this->object, "getGameType", "()Lnet.minecraft.world.WorldSettings$GameType;", )); }

    EnumDifficulty getDifficulty() { return EnumDifficulty(*javaClass->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet.minecraft.world.EnumDifficulty;", )); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.INetHandlerPlayClient
 * Package name: net.minecraft.network.play
 */
class INetHandlerPlayClient : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.network.play.INetHandlerPlayClient";
public:
    STATICINITIALIZE;

    INetHandlerPlayClient(jobject object) : JavaObject(object) {}

    void handleJoinGame(S01PacketJoinGame arg0) { (*javaClass->invokeMethod<void>(this->object, "handleJoinGame", "(Lnet.minecraft.network.play.server.S01PacketJoinGame;)V", arg0)); }

    void handleSpawnObject(S0EPacketSpawnObject arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnObject", "(Lnet.minecraft.network.play.server.S0EPacketSpawnObject;)V", arg0)); }

    void handleSpawnExperienceOrb(S11PacketSpawnExperienceOrb arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnExperienceOrb", "(Lnet.minecraft.network.play.server.S11PacketSpawnExperienceOrb;)V", arg0)); }

    void handleSpawnGlobalEntity(S2CPacketSpawnGlobalEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnGlobalEntity", "(Lnet.minecraft.network.play.server.S2CPacketSpawnGlobalEntity;)V", arg0)); }

    void handleSpawnPainting(S10PacketSpawnPainting arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnPainting", "(Lnet.minecraft.network.play.server.S10PacketSpawnPainting;)V", arg0)); }

    void handleEntityVelocity(S12PacketEntityVelocity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityVelocity", "(Lnet.minecraft.network.play.server.S12PacketEntityVelocity;)V", arg0)); }

    void handleEntityMetadata(S1CPacketEntityMetadata arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityMetadata", "(Lnet.minecraft.network.play.server.S1CPacketEntityMetadata;)V", arg0)); }

    void handleSpawnPlayer(S0CPacketSpawnPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnPlayer", "(Lnet.minecraft.network.play.server.S0CPacketSpawnPlayer;)V", arg0)); }

    void handleEntityTeleport(S18PacketEntityTeleport arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityTeleport", "(Lnet.minecraft.network.play.server.S18PacketEntityTeleport;)V", arg0)); }

    void handleHeldItemChange(S09PacketHeldItemChange arg0) { (*javaClass->invokeMethod<void>(this->object, "handleHeldItemChange", "(Lnet.minecraft.network.play.server.S09PacketHeldItemChange;)V", arg0)); }

    void handleEntityMovement(S14PacketEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityMovement", "(Lnet.minecraft.network.play.server.S14PacketEntity;)V", arg0)); }

    void handleEntityHeadLook(S19PacketEntityHeadLook arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityHeadLook", "(Lnet.minecraft.network.play.server.S19PacketEntityHeadLook;)V", arg0)); }

    void handleDestroyEntities(S13PacketDestroyEntities arg0) { (*javaClass->invokeMethod<void>(this->object, "handleDestroyEntities", "(Lnet.minecraft.network.play.server.S13PacketDestroyEntities;)V", arg0)); }

    void handlePlayerPosLook(S08PacketPlayerPosLook arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerPosLook", "(Lnet.minecraft.network.play.server.S08PacketPlayerPosLook;)V", arg0)); }

    void handleMultiBlockChange(S22PacketMultiBlockChange arg0) { (*javaClass->invokeMethod<void>(this->object, "handleMultiBlockChange", "(Lnet.minecraft.network.play.server.S22PacketMultiBlockChange;)V", arg0)); }

    void handleChunkData(S21PacketChunkData arg0) { (*javaClass->invokeMethod<void>(this->object, "handleChunkData", "(Lnet.minecraft.network.play.server.S21PacketChunkData;)V", arg0)); }

    void handleBlockChange(S23PacketBlockChange arg0) { (*javaClass->invokeMethod<void>(this->object, "handleBlockChange", "(Lnet.minecraft.network.play.server.S23PacketBlockChange;)V", arg0)); }

    void handleDisconnect(S40PacketDisconnect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleDisconnect", "(Lnet.minecraft.network.play.server.S40PacketDisconnect;)V", arg0)); }

    void handleCollectItem(S0DPacketCollectItem arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCollectItem", "(Lnet.minecraft.network.play.server.S0DPacketCollectItem;)V", arg0)); }

    void handleAnimation(S0BPacketAnimation arg0) { (*javaClass->invokeMethod<void>(this->object, "handleAnimation", "(Lnet.minecraft.network.play.server.S0BPacketAnimation;)V", arg0)); }

    void handleUseBed(S0APacketUseBed arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUseBed", "(Lnet.minecraft.network.play.server.S0APacketUseBed;)V", arg0)); }

    void handleSpawnMob(S0FPacketSpawnMob arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnMob", "(Lnet.minecraft.network.play.server.S0FPacketSpawnMob;)V", arg0)); }

    void handleTimeUpdate(S03PacketTimeUpdate arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTimeUpdate", "(Lnet.minecraft.network.play.server.S03PacketTimeUpdate;)V", arg0)); }

    void handleSpawnPosition(S05PacketSpawnPosition arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSpawnPosition", "(Lnet.minecraft.network.play.server.S05PacketSpawnPosition;)V", arg0)); }

    void handleEntityAttach(S1BPacketEntityAttach arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityAttach", "(Lnet.minecraft.network.play.server.S1BPacketEntityAttach;)V", arg0)); }

    void handleEntityStatus(S19PacketEntityStatus arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityStatus", "(Lnet.minecraft.network.play.server.S19PacketEntityStatus;)V", arg0)); }

    void handleUpdateHealth(S06PacketUpdateHealth arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateHealth", "(Lnet.minecraft.network.play.server.S06PacketUpdateHealth;)V", arg0)); }

    void handleSetExperience(S1FPacketSetExperience arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSetExperience", "(Lnet.minecraft.network.play.server.S1FPacketSetExperience;)V", arg0)); }

    void handleRespawn(S07PacketRespawn arg0) { (*javaClass->invokeMethod<void>(this->object, "handleRespawn", "(Lnet.minecraft.network.play.server.S07PacketRespawn;)V", arg0)); }

    void handleExplosion(S27PacketExplosion arg0) { (*javaClass->invokeMethod<void>(this->object, "handleExplosion", "(Lnet.minecraft.network.play.server.S27PacketExplosion;)V", arg0)); }

    void handleOpenWindow(S2DPacketOpenWindow arg0) { (*javaClass->invokeMethod<void>(this->object, "handleOpenWindow", "(Lnet.minecraft.network.play.server.S2DPacketOpenWindow;)V", arg0)); }

    void handleSetSlot(S2FPacketSetSlot arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSetSlot", "(Lnet.minecraft.network.play.server.S2FPacketSetSlot;)V", arg0)); }

    void handleConfirmTransaction(S32PacketConfirmTransaction arg0) { (*javaClass->invokeMethod<void>(this->object, "handleConfirmTransaction", "(Lnet.minecraft.network.play.server.S32PacketConfirmTransaction;)V", arg0)); }

    void handleWindowItems(S30PacketWindowItems arg0) { (*javaClass->invokeMethod<void>(this->object, "handleWindowItems", "(Lnet.minecraft.network.play.server.S30PacketWindowItems;)V", arg0)); }

    void handleSignEditorOpen(S36PacketSignEditorOpen arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSignEditorOpen", "(Lnet.minecraft.network.play.server.S36PacketSignEditorOpen;)V", arg0)); }

    void handleUpdateSign(S33PacketUpdateSign arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateSign", "(Lnet.minecraft.network.play.server.S33PacketUpdateSign;)V", arg0)); }

    void handleUpdateTileEntity(S35PacketUpdateTileEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateTileEntity", "(Lnet.minecraft.network.play.server.S35PacketUpdateTileEntity;)V", arg0)); }

    void handleWindowProperty(S31PacketWindowProperty arg0) { (*javaClass->invokeMethod<void>(this->object, "handleWindowProperty", "(Lnet.minecraft.network.play.server.S31PacketWindowProperty;)V", arg0)); }

    void handleEntityEquipment(S04PacketEntityEquipment arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityEquipment", "(Lnet.minecraft.network.play.server.S04PacketEntityEquipment;)V", arg0)); }

    void handleCloseWindow(S2EPacketCloseWindow arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCloseWindow", "(Lnet.minecraft.network.play.server.S2EPacketCloseWindow;)V", arg0)); }

    void handleBlockAction(S24PacketBlockAction arg0) { (*javaClass->invokeMethod<void>(this->object, "handleBlockAction", "(Lnet.minecraft.network.play.server.S24PacketBlockAction;)V", arg0)); }

    void handleBlockBreakAnim(S25PacketBlockBreakAnim arg0) { (*javaClass->invokeMethod<void>(this->object, "handleBlockBreakAnim", "(Lnet.minecraft.network.play.server.S25PacketBlockBreakAnim;)V", arg0)); }

    void handleMapChunkBulk(S26PacketMapChunkBulk arg0) { (*javaClass->invokeMethod<void>(this->object, "handleMapChunkBulk", "(Lnet.minecraft.network.play.server.S26PacketMapChunkBulk;)V", arg0)); }

    void handleChangeGameState(S2BPacketChangeGameState arg0) { (*javaClass->invokeMethod<void>(this->object, "handleChangeGameState", "(Lnet.minecraft.network.play.server.S2BPacketChangeGameState;)V", arg0)); }

    void handleEffect(S28PacketEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEffect", "(Lnet.minecraft.network.play.server.S28PacketEffect;)V", arg0)); }

    void handleStatistics(S37PacketStatistics arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatistics", "(Lnet.minecraft.network.play.server.S37PacketStatistics;)V", arg0)); }

    void handleEntityEffect(S1DPacketEntityEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityEffect", "(Lnet.minecraft.network.play.server.S1DPacketEntityEffect;)V", arg0)); }

    void handleCombatEvent(S42PacketCombatEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCombatEvent", "(Lnet.minecraft.network.play.server.S42PacketCombatEvent;)V", arg0)); }

    void handleServerDifficulty(S41PacketServerDifficulty arg0) { (*javaClass->invokeMethod<void>(this->object, "handleServerDifficulty", "(Lnet.minecraft.network.play.server.S41PacketServerDifficulty;)V", arg0)); }

    void handleCamera(S43PacketCamera arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCamera", "(Lnet.minecraft.network.play.server.S43PacketCamera;)V", arg0)); }

    void handleWorldBorder(S44PacketWorldBorder arg0) { (*javaClass->invokeMethod<void>(this->object, "handleWorldBorder", "(Lnet.minecraft.network.play.server.S44PacketWorldBorder;)V", arg0)); }

    void handleTitle(S45PacketTitle arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTitle", "(Lnet.minecraft.network.play.server.S45PacketTitle;)V", arg0)); }

    void handleSetCompressionLevel(S46PacketSetCompressionLevel arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSetCompressionLevel", "(Lnet.minecraft.network.play.server.S46PacketSetCompressionLevel;)V", arg0)); }

    void handleRemoveEntityEffect(S1EPacketRemoveEntityEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleRemoveEntityEffect", "(Lnet.minecraft.network.play.server.S1EPacketRemoveEntityEffect;)V", arg0)); }

    void handlePlayerListItem(S38PacketPlayerListItem arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerListItem", "(Lnet.minecraft.network.play.server.S38PacketPlayerListItem;)V", arg0)); }

    void handleKeepAlive(S00PacketKeepAlive arg0) { (*javaClass->invokeMethod<void>(this->object, "handleKeepAlive", "(Lnet.minecraft.network.play.server.S00PacketKeepAlive;)V", arg0)); }

    void handlePlayerAbilities(S39PacketPlayerAbilities arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerAbilities", "(Lnet.minecraft.network.play.server.S39PacketPlayerAbilities;)V", arg0)); }

    void handleTabComplete(S3APacketTabComplete arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTabComplete", "(Lnet.minecraft.network.play.server.S3APacketTabComplete;)V", arg0)); }

    void handleSoundEffect(S29PacketSoundEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "handleSoundEffect", "(Lnet.minecraft.network.play.server.S29PacketSoundEffect;)V", arg0)); }

    void handleResourcePack(S48PacketResourcePackSend arg0) { (*javaClass->invokeMethod<void>(this->object, "handleResourcePack", "(Lnet.minecraft.network.play.server.S48PacketResourcePackSend;)V", arg0)); }

    void handleEntityNBT(S49PacketUpdateEntityNBT arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityNBT", "(Lnet.minecraft.network.play.server.S49PacketUpdateEntityNBT;)V", arg0)); }

    void handleCustomPayload(S3FPacketCustomPayload arg0) { (*javaClass->invokeMethod<void>(this->object, "handleCustomPayload", "(Lnet.minecraft.network.play.server.S3FPacketCustomPayload;)V", arg0)); }

    void handleScoreboardObjective(S3BPacketScoreboardObjective arg0) { (*javaClass->invokeMethod<void>(this->object, "handleScoreboardObjective", "(Lnet.minecraft.network.play.server.S3BPacketScoreboardObjective;)V", arg0)); }

    void handleUpdateScore(S3CPacketUpdateScore arg0) { (*javaClass->invokeMethod<void>(this->object, "handleUpdateScore", "(Lnet.minecraft.network.play.server.S3CPacketUpdateScore;)V", arg0)); }

    void handleDisplayScoreboard(S3DPacketDisplayScoreboard arg0) { (*javaClass->invokeMethod<void>(this->object, "handleDisplayScoreboard", "(Lnet.minecraft.network.play.server.S3DPacketDisplayScoreboard;)V", arg0)); }

    void handleTeams(S3EPacketTeams arg0) { (*javaClass->invokeMethod<void>(this->object, "handleTeams", "(Lnet.minecraft.network.play.server.S3EPacketTeams;)V", arg0)); }

    void handleParticles(S2APacketParticles arg0) { (*javaClass->invokeMethod<void>(this->object, "handleParticles", "(Lnet.minecraft.network.play.server.S2APacketParticles;)V", arg0)); }

    void handleEntityProperties(S20PacketEntityProperties arg0) { (*javaClass->invokeMethod<void>(this->object, "handleEntityProperties", "(Lnet.minecraft.network.play.server.S20PacketEntityProperties;)V", arg0)); }

    void handleChat(S02PacketChat arg0) { (*javaClass->invokeMethod<void>(this->object, "handleChat", "(Lnet.minecraft.network.play.server.S02PacketChat;)V", arg0)); }

    void handleMaps(S34PacketMaps arg0) { (*javaClass->invokeMethod<void>(this->object, "handleMaps", "(Lnet.minecraft.network.play.server.S34PacketMaps;)V", arg0)); }

    void handlePlayerListHeaderFooter(S47PacketPlayerListHeaderFooter arg0) { (*javaClass->invokeMethod<void>(this->object, "handlePlayerListHeaderFooter", "(Lnet.minecraft.network.play.server.S47PacketPlayerListHeaderFooter;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S0EPacketSpawnObject
 * Package name: net.minecraft.network.play.server
 */
class S0EPacketSpawnObject : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S0EPacketSpawnObject";
public:
    STATICINITIALIZE;

    S0EPacketSpawnObject(jobject object) : JavaObject(object) {}

    int func_149009_m() { return int(*javaClass->invokeMethod<int>(this->object, "func_149009_m", "()I", )); }

    void func_149002_g(int arg0) { (*javaClass->invokeMethod<void>(this->object, "func_149002_g", "(I)V", arg0)); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

    void setX(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setX", "(I)V", arg0)); }

    void setY(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setY", "(I)V", arg0)); }

    void setZ(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setZ", "(I)V", arg0)); }

    void setSpeedX(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpeedX", "(I)V", arg0)); }

    void setSpeedY(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpeedY", "(I)V", arg0)); }

    void setSpeedZ(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpeedZ", "(I)V", arg0)); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    int getZ() { return int(*javaClass->invokeMethod<int>(this->object, "getZ", "()I", )); }

    int getSpeedX() { return int(*javaClass->invokeMethod<int>(this->object, "getSpeedX", "()I", )); }

    int getSpeedY() { return int(*javaClass->invokeMethod<int>(this->object, "getSpeedY", "()I", )); }

    int getSpeedZ() { return int(*javaClass->invokeMethod<int>(this->object, "getSpeedZ", "()I", )); }

    int getPitch() { return int(*javaClass->invokeMethod<int>(this->object, "getPitch", "()I", )); }

    int getYaw() { return int(*javaClass->invokeMethod<int>(this->object, "getYaw", "()I", )); }

    int getType() { return int(*javaClass->invokeMethod<int>(this->object, "getType", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S11PacketSpawnExperienceOrb
 * Package name: net.minecraft.network.play.server
 */
class S11PacketSpawnExperienceOrb : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S11PacketSpawnExperienceOrb";
public:
    STATICINITIALIZE;

    S11PacketSpawnExperienceOrb(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    int getZ() { return int(*javaClass->invokeMethod<int>(this->object, "getZ", "()I", )); }

    int getXPValue() { return int(*javaClass->invokeMethod<int>(this->object, "getXPValue", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S2CPacketSpawnGlobalEntity
 * Package name: net.minecraft.network.play.server
 */
class S2CPacketSpawnGlobalEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S2CPacketSpawnGlobalEntity";
public:
    STATICINITIALIZE;

    S2CPacketSpawnGlobalEntity(jobject object) : JavaObject(object) {}

    int func_149051_d() { return int(*javaClass->invokeMethod<int>(this->object, "func_149051_d", "()I", )); }

    int func_149050_e() { return int(*javaClass->invokeMethod<int>(this->object, "func_149050_e", "()I", )); }

    int func_149049_f() { return int(*javaClass->invokeMethod<int>(this->object, "func_149049_f", "()I", )); }

    int func_149053_g() { return int(*javaClass->invokeMethod<int>(this->object, "func_149053_g", "()I", )); }

    int func_149052_c() { return int(*javaClass->invokeMethod<int>(this->object, "func_149052_c", "()I", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S10PacketSpawnPainting
 * Package name: net.minecraft.network.play.server
 */
class S10PacketSpawnPainting : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S10PacketSpawnPainting";
public:
    STATICINITIALIZE;

    S10PacketSpawnPainting(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

    EnumFacing getFacing() { return EnumFacing(*javaClass->invokeMethod<jobject>(this->object, "getFacing", "()Lnet.minecraft.util.EnumFacing;", )); }

    String getTitle() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTitle", "()Ljava.lang.String;", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S12PacketEntityVelocity
 * Package name: net.minecraft.network.play.server
 */
class S12PacketEntityVelocity : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S12PacketEntityVelocity";
public:
    STATICINITIALIZE;

    S12PacketEntityVelocity(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

    int getMotionX() { return int(*javaClass->invokeMethod<int>(this->object, "getMotionX", "()I", )); }

    int getMotionY() { return int(*javaClass->invokeMethod<int>(this->object, "getMotionY", "()I", )); }

    int getMotionZ() { return int(*javaClass->invokeMethod<int>(this->object, "getMotionZ", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S1CPacketEntityMetadata
 * Package name: net.minecraft.network.play.server
 */
class S1CPacketEntityMetadata : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S1CPacketEntityMetadata";
public:
    STATICINITIALIZE;

    S1CPacketEntityMetadata(jobject object) : JavaObject(object) {}

    List func_149376_c() { return List(*javaClass->invokeMethod<jobject>(this->object, "func_149376_c", "()Ljava.util.List;", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S0CPacketSpawnPlayer
 * Package name: net.minecraft.network.play.server
 */
class S0CPacketSpawnPlayer : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S0CPacketSpawnPlayer";
public:
    STATICINITIALIZE;

    S0CPacketSpawnPlayer(jobject object) : JavaObject(object) {}

    int getCurrentItemID() { return int(*javaClass->invokeMethod<int>(this->object, "getCurrentItemID", "()I", )); }

    List func_148944_c() { return List(*javaClass->invokeMethod<jobject>(this->object, "func_148944_c", "()Ljava.util.List;", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    int getZ() { return int(*javaClass->invokeMethod<int>(this->object, "getZ", "()I", )); }

    byte getPitch() { return byte(*javaClass->invokeMethod<byte>(this->object, "getPitch", "()B", )); }

    byte getYaw() { return byte(*javaClass->invokeMethod<byte>(this->object, "getYaw", "()B", )); }

    UUID getPlayer() { return UUID(*javaClass->invokeMethod<jobject>(this->object, "getPlayer", "()Ljava.util.UUID;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S18PacketEntityTeleport
 * Package name: net.minecraft.network.play.server
 */
class S18PacketEntityTeleport : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S18PacketEntityTeleport";
public:
    STATICINITIALIZE;

    S18PacketEntityTeleport(jobject object) : JavaObject(object) {}

    bool getOnGround() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getOnGround", "()Z", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    int getZ() { return int(*javaClass->invokeMethod<int>(this->object, "getZ", "()I", )); }

    byte getPitch() { return byte(*javaClass->invokeMethod<byte>(this->object, "getPitch", "()B", )); }

    byte getYaw() { return byte(*javaClass->invokeMethod<byte>(this->object, "getYaw", "()B", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S09PacketHeldItemChange
 * Package name: net.minecraft.network.play.server
 */
class S09PacketHeldItemChange : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S09PacketHeldItemChange";
public:
    STATICINITIALIZE;

    S09PacketHeldItemChange(jobject object) : JavaObject(object) {}

    int getHeldItemHotbarIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getHeldItemHotbarIndex", "()I", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S14PacketEntity
 * Package name: net.minecraft.network.play.server
 */
class S14PacketEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S14PacketEntity";
public:
    STATICINITIALIZE;

    S14PacketEntity(jobject object) : JavaObject(object) {}

    bool getOnGround() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getOnGround", "()Z", )); }

    byte func_149062_c() { return byte(*javaClass->invokeMethod<byte>(this->object, "func_149062_c", "()B", )); }

    byte func_149061_d() { return byte(*javaClass->invokeMethod<byte>(this->object, "func_149061_d", "()B", )); }

    byte func_149064_e() { return byte(*javaClass->invokeMethod<byte>(this->object, "func_149064_e", "()B", )); }

    bool func_149060_h() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_149060_h", "()Z", )); }

    byte func_149066_f() { return byte(*javaClass->invokeMethod<byte>(this->object, "func_149066_f", "()B", )); }

    byte func_149063_g() { return byte(*javaClass->invokeMethod<byte>(this->object, "func_149063_g", "()B", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    Entity getEntity(World arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntity", "(Lnet.minecraft.world.World;)Lnet.minecraft.entity.Entity;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S19PacketEntityHeadLook
 * Package name: net.minecraft.network.play.server
 */
class S19PacketEntityHeadLook : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S19PacketEntityHeadLook";
public:
    STATICINITIALIZE;

    S19PacketEntityHeadLook(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    Entity getEntity(World arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntity", "(Lnet.minecraft.world.World;)Lnet.minecraft.entity.Entity;", arg0)); }

    byte getYaw() { return byte(*javaClass->invokeMethod<byte>(this->object, "getYaw", "()B", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S13PacketDestroyEntities
 * Package name: net.minecraft.network.play.server
 */
class S13PacketDestroyEntities : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S13PacketDestroyEntities";
public:
    STATICINITIALIZE;

    S13PacketDestroyEntities(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S08PacketPlayerPosLook
 * Package name: net.minecraft.network.play.server
 */
class S08PacketPlayerPosLook : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S08PacketPlayerPosLook";
public:
    STATICINITIALIZE;

    S08PacketPlayerPosLook(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    Set func_179834_f() { return Set(*javaClass->invokeMethod<jobject>(this->object, "func_179834_f", "()Ljava.util.Set;", )); }

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    double getZ() { return double(*javaClass->invokeMethod<double>(this->object, "getZ", "()D", )); }

    float getPitch() { return float(*javaClass->invokeMethod<float>(this->object, "getPitch", "()F", )); }

    float getYaw() { return float(*javaClass->invokeMethod<float>(this->object, "getYaw", "()F", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S22PacketMultiBlockChange
 * Package name: net.minecraft.network.play.server
 */
class S22PacketMultiBlockChange : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S22PacketMultiBlockChange";
public:
    STATICINITIALIZE;

    S22PacketMultiBlockChange(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S21PacketChunkData
 * Package name: net.minecraft.network.play.server
 */
class S21PacketChunkData : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S21PacketChunkData";
public:
    STATICINITIALIZE;

    S21PacketChunkData(jobject object) : JavaObject(object) {}

    static S21PacketChunkData_Extracted func_179756_a(Chunk arg0, bool arg1, bool arg2, int arg3) { return S21PacketChunkData_Extracted(*javaClass->invokeStaticMethod<jobject>(this->object, "func_179756_a", "(Lnet.minecraft.world.chunk.Chunk;ZZI)Lnet.minecraft.network.play.server.S21PacketChunkData$Extracted;", arg0, arg1, arg2, arg3)); }

    static int func_180737_a(int arg0, bool arg1, bool arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "func_180737_a", "(IZZ)I", arg0, arg1, arg2)); }

    static int func_179757_a(arr_B arg0, arr_B arg1, int arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "func_179757_a", "([B[BI)I", arg0, arg1, arg2)); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    bool func_149274_i() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_149274_i", "()Z", )); }

    int getExtractedSize() { return int(*javaClass->invokeMethod<int>(this->object, "getExtractedSize", "()I", )); }

    int getChunkX() { return int(*javaClass->invokeMethod<int>(this->object, "getChunkX", "()I", )); }

    int getChunkZ() { return int(*javaClass->invokeMethod<int>(this->object, "getChunkZ", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S21PacketChunkData$Extracted
 * Enclosing class: net.minecraft.network.play.server.S21PacketChunkData
 * Package name: net.minecraft.network.play.server
 */
class S21PacketChunkData_Extracted : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S21PacketChunkData$Extracted";
public:
    STATICINITIALIZE;

    S21PacketChunkData_Extracted(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.network.play.server.S23PacketBlockChange
 * Package name: net.minecraft.network.play.server
 */
class S23PacketBlockChange : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S23PacketBlockChange";
public:
    STATICINITIALIZE;

    S23PacketBlockChange(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    BlockPos getBlockPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getBlockPosition", "()Lnet.minecraft.util.BlockPos;", )); }

    IBlockState getBlockState() { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getBlockState", "()Lnet.minecraft.block.state.IBlockState;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S40PacketDisconnect
 * Package name: net.minecraft.network.play.server
 */
class S40PacketDisconnect : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S40PacketDisconnect";
public:
    STATICINITIALIZE;

    S40PacketDisconnect(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    IChatComponent getReason() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getReason", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S0DPacketCollectItem
 * Package name: net.minecraft.network.play.server
 */
class S0DPacketCollectItem : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S0DPacketCollectItem";
public:
    STATICINITIALIZE;

    S0DPacketCollectItem(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getCollectedItemEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getCollectedItemEntityID", "()I", )); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S0BPacketAnimation
 * Package name: net.minecraft.network.play.server
 */
class S0BPacketAnimation : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S0BPacketAnimation";
public:
    STATICINITIALIZE;

    S0BPacketAnimation(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getAnimationType() { return int(*javaClass->invokeMethod<int>(this->object, "getAnimationType", "()I", )); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S0APacketUseBed
 * Package name: net.minecraft.network.play.server
 */
class S0APacketUseBed : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S0APacketUseBed";
public:
    STATICINITIALIZE;

    S0APacketUseBed(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    BlockPos getBedPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getBedPosition", "()Lnet.minecraft.util.BlockPos;", )); }

    EntityPlayer getPlayer(World arg0) { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getPlayer", "(Lnet.minecraft.world.World;)Lnet.minecraft.entity.player.EntityPlayer;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S0FPacketSpawnMob
 * Package name: net.minecraft.network.play.server
 */
class S0FPacketSpawnMob : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S0FPacketSpawnMob";
public:
    STATICINITIALIZE;

    S0FPacketSpawnMob(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getEntityType() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityType", "()I", )); }

    byte getHeadPitch() { return byte(*javaClass->invokeMethod<byte>(this->object, "getHeadPitch", "()B", )); }

    int getVelocityX() { return int(*javaClass->invokeMethod<int>(this->object, "getVelocityX", "()I", )); }

    int getVelocityY() { return int(*javaClass->invokeMethod<int>(this->object, "getVelocityY", "()I", )); }

    int getVelocityZ() { return int(*javaClass->invokeMethod<int>(this->object, "getVelocityZ", "()I", )); }

    List func_149027_c() { return List(*javaClass->invokeMethod<jobject>(this->object, "func_149027_c", "()Ljava.util.List;", )); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    int getZ() { return int(*javaClass->invokeMethod<int>(this->object, "getZ", "()I", )); }

    byte getPitch() { return byte(*javaClass->invokeMethod<byte>(this->object, "getPitch", "()B", )); }

    byte getYaw() { return byte(*javaClass->invokeMethod<byte>(this->object, "getYaw", "()B", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S03PacketTimeUpdate
 * Package name: net.minecraft.network.play.server
 */
class S03PacketTimeUpdate : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S03PacketTimeUpdate";
public:
    STATICINITIALIZE;

    S03PacketTimeUpdate(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    long getWorldTime() { return long(*javaClass->invokeMethod<long>(this->object, "getWorldTime", "()J", )); }

    long getTotalWorldTime() { return long(*javaClass->invokeMethod<long>(this->object, "getTotalWorldTime", "()J", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S05PacketSpawnPosition
 * Package name: net.minecraft.network.play.server
 */
class S05PacketSpawnPosition : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S05PacketSpawnPosition";
public:
    STATICINITIALIZE;

    S05PacketSpawnPosition(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    BlockPos getSpawnPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getSpawnPos", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S1BPacketEntityAttach
 * Package name: net.minecraft.network.play.server
 */
class S1BPacketEntityAttach : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S1BPacketEntityAttach";
public:
    STATICINITIALIZE;

    S1BPacketEntityAttach(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getVehicleEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getVehicleEntityId", "()I", )); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

    int getLeash() { return int(*javaClass->invokeMethod<int>(this->object, "getLeash", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S19PacketEntityStatus
 * Package name: net.minecraft.network.play.server
 */
class S19PacketEntityStatus : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S19PacketEntityStatus";
public:
    STATICINITIALIZE;

    S19PacketEntityStatus(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    Entity getEntity(World arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntity", "(Lnet.minecraft.world.World;)Lnet.minecraft.entity.Entity;", arg0)); }

    byte getOpCode() { return byte(*javaClass->invokeMethod<byte>(this->object, "getOpCode", "()B", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S06PacketUpdateHealth
 * Package name: net.minecraft.network.play.server
 */
class S06PacketUpdateHealth : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S06PacketUpdateHealth";
public:
    STATICINITIALIZE;

    S06PacketUpdateHealth(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getFoodLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getFoodLevel", "()I", )); }

    float getSaturationLevel() { return float(*javaClass->invokeMethod<float>(this->object, "getSaturationLevel", "()F", )); }

    float getHealth() { return float(*javaClass->invokeMethod<float>(this->object, "getHealth", "()F", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S1FPacketSetExperience
 * Package name: net.minecraft.network.play.server
 */
class S1FPacketSetExperience : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S1FPacketSetExperience";
public:
    STATICINITIALIZE;

    S1FPacketSetExperience(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    float func_149397_c() { return float(*javaClass->invokeMethod<float>(this->object, "func_149397_c", "()F", )); }

    int getTotalExperience() { return int(*javaClass->invokeMethod<int>(this->object, "getTotalExperience", "()I", )); }

    int getLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getLevel", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S07PacketRespawn
 * Package name: net.minecraft.network.play.server
 */
class S07PacketRespawn : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S07PacketRespawn";
public:
    STATICINITIALIZE;

    S07PacketRespawn(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    WorldType getWorldType() { return WorldType(*javaClass->invokeMethod<jobject>(this->object, "getWorldType", "()Lnet.minecraft.world.WorldType;", )); }

    int getDimensionID() { return int(*javaClass->invokeMethod<int>(this->object, "getDimensionID", "()I", )); }

    WorldSettings_GameType getGameType() { return WorldSettings_GameType(*javaClass->invokeMethod<jobject>(this->object, "getGameType", "()Lnet.minecraft.world.WorldSettings$GameType;", )); }

    EnumDifficulty getDifficulty() { return EnumDifficulty(*javaClass->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet.minecraft.world.EnumDifficulty;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S27PacketExplosion
 * Package name: net.minecraft.network.play.server
 */
class S27PacketExplosion : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S27PacketExplosion";
public:
    STATICINITIALIZE;

    S27PacketExplosion(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    float getStrength() { return float(*javaClass->invokeMethod<float>(this->object, "getStrength", "()F", )); }

    List getAffectedBlockPositions() { return List(*javaClass->invokeMethod<jobject>(this->object, "getAffectedBlockPositions", "()Ljava.util.List;", )); }

    float func_149149_c() { return float(*javaClass->invokeMethod<float>(this->object, "func_149149_c", "()F", )); }

    float func_149144_d() { return float(*javaClass->invokeMethod<float>(this->object, "func_149144_d", "()F", )); }

    float func_149147_e() { return float(*javaClass->invokeMethod<float>(this->object, "func_149147_e", "()F", )); }

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    double getZ() { return double(*javaClass->invokeMethod<double>(this->object, "getZ", "()D", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S2DPacketOpenWindow
 * Package name: net.minecraft.network.play.server
 */
class S2DPacketOpenWindow : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S2DPacketOpenWindow";
public:
    STATICINITIALIZE;

    S2DPacketOpenWindow(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    IChatComponent getWindowTitle() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getWindowTitle", "()Lnet.minecraft.util.IChatComponent;", )); }

    int getSlotCount() { return int(*javaClass->invokeMethod<int>(this->object, "getSlotCount", "()I", )); }

    int getWindowId() { return int(*javaClass->invokeMethod<int>(this->object, "getWindowId", "()I", )); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

    String getGuiId() { return String(*javaClass->invokeMethod<jobject>(this->object, "getGuiId", "()Ljava.lang.String;", )); }

    bool hasSlots() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasSlots", "()Z", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S2FPacketSetSlot
 * Package name: net.minecraft.network.play.server
 */
class S2FPacketSetSlot : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S2FPacketSetSlot";
public:
    STATICINITIALIZE;

    S2FPacketSetSlot(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int func_149175_c() { return int(*javaClass->invokeMethod<int>(this->object, "func_149175_c", "()I", )); }

    ItemStack func_149174_e() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "func_149174_e", "()Lnet.minecraft.item.ItemStack;", )); }

    int func_149173_d() { return int(*javaClass->invokeMethod<int>(this->object, "func_149173_d", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S32PacketConfirmTransaction
 * Package name: net.minecraft.network.play.server
 */
class S32PacketConfirmTransaction : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S32PacketConfirmTransaction";
public:
    STATICINITIALIZE;

    S32PacketConfirmTransaction(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getWindowId() { return int(*javaClass->invokeMethod<int>(this->object, "getWindowId", "()I", )); }

    bool func_148888_e() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_148888_e", "()Z", )); }

    short getActionNumber() { return short(*javaClass->invokeMethod<short>(this->object, "getActionNumber", "()S", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S30PacketWindowItems
 * Package name: net.minecraft.network.play.server
 */
class S30PacketWindowItems : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S30PacketWindowItems";
public:
    STATICINITIALIZE;

    S30PacketWindowItems(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int func_148911_c() { return int(*javaClass->invokeMethod<int>(this->object, "func_148911_c", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S36PacketSignEditorOpen
 * Package name: net.minecraft.network.play.server
 */
class S36PacketSignEditorOpen : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S36PacketSignEditorOpen";
public:
    STATICINITIALIZE;

    S36PacketSignEditorOpen(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    BlockPos getSignPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getSignPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S33PacketUpdateSign
 * Package name: net.minecraft.network.play.server
 */
class S33PacketUpdateSign : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S33PacketUpdateSign";
public:
    STATICINITIALIZE;

    S33PacketUpdateSign(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    BlockPos getPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPos", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S35PacketUpdateTileEntity
 * Package name: net.minecraft.network.play.server
 */
class S35PacketUpdateTileEntity : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S35PacketUpdateTileEntity";
public:
    STATICINITIALIZE;

    S35PacketUpdateTileEntity(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getTileEntityType() { return int(*javaClass->invokeMethod<int>(this->object, "getTileEntityType", "()I", )); }

    NBTTagCompound getNbtCompound() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getNbtCompound", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    BlockPos getPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPos", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S31PacketWindowProperty
 * Package name: net.minecraft.network.play.server
 */
class S31PacketWindowProperty : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S31PacketWindowProperty";
public:
    STATICINITIALIZE;

    S31PacketWindowProperty(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getWindowId() { return int(*javaClass->invokeMethod<int>(this->object, "getWindowId", "()I", )); }

    int getVarIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getVarIndex", "()I", )); }

    int getVarValue() { return int(*javaClass->invokeMethod<int>(this->object, "getVarValue", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S04PacketEntityEquipment
 * Package name: net.minecraft.network.play.server
 */
class S04PacketEntityEquipment : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S04PacketEntityEquipment";
public:
    STATICINITIALIZE;

    S04PacketEntityEquipment(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getEquipmentSlot() { return int(*javaClass->invokeMethod<int>(this->object, "getEquipmentSlot", "()I", )); }

    ItemStack getItemStack() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getItemStack", "()Lnet.minecraft.item.ItemStack;", )); }

    int getEntityID() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityID", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S2EPacketCloseWindow
 * Package name: net.minecraft.network.play.server
 */
class S2EPacketCloseWindow : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S2EPacketCloseWindow";
public:
    STATICINITIALIZE;

    S2EPacketCloseWindow(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S24PacketBlockAction
 * Package name: net.minecraft.network.play.server
 */
class S24PacketBlockAction : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S24PacketBlockAction";
public:
    STATICINITIALIZE;

    S24PacketBlockAction(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    BlockPos getBlockPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getBlockPosition", "()Lnet.minecraft.util.BlockPos;", )); }

    Block getBlockType() { return Block(*javaClass->invokeMethod<jobject>(this->object, "getBlockType", "()Lnet.minecraft.block.Block;", )); }

    int getData1() { return int(*javaClass->invokeMethod<int>(this->object, "getData1", "()I", )); }

    int getData2() { return int(*javaClass->invokeMethod<int>(this->object, "getData2", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S25PacketBlockBreakAnim
 * Package name: net.minecraft.network.play.server
 */
class S25PacketBlockBreakAnim : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S25PacketBlockBreakAnim";
public:
    STATICINITIALIZE;

    S25PacketBlockBreakAnim(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getBreakerId() { return int(*javaClass->invokeMethod<int>(this->object, "getBreakerId", "()I", )); }

    int getProgress() { return int(*javaClass->invokeMethod<int>(this->object, "getProgress", "()I", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S26PacketMapChunkBulk
 * Package name: net.minecraft.network.play.server
 */
class S26PacketMapChunkBulk : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S26PacketMapChunkBulk";
public:
    STATICINITIALIZE;

    S26PacketMapChunkBulk(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getChunkSize(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getChunkSize", "(I)I", arg0)); }

    int getChunkCount() { return int(*javaClass->invokeMethod<int>(this->object, "getChunkCount", "()I", )); }

    int getChunkX(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getChunkX", "(I)I", arg0)); }

    int getChunkZ(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getChunkZ", "(I)I", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S2BPacketChangeGameState
 * Package name: net.minecraft.network.play.server
 */
class S2BPacketChangeGameState : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S2BPacketChangeGameState";
public:
    STATICINITIALIZE;

    S2BPacketChangeGameState(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int getGameState() { return int(*javaClass->invokeMethod<int>(this->object, "getGameState", "()I", )); }

    float func_149137_d() { return float(*javaClass->invokeMethod<float>(this->object, "func_149137_d", "()F", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S28PacketEffect
 * Package name: net.minecraft.network.play.server
 */
class S28PacketEffect : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S28PacketEffect";
public:
    STATICINITIALIZE;

    S28PacketEffect(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    bool isSoundServerwide() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSoundServerwide", "()Z", )); }

    int getSoundType() { return int(*javaClass->invokeMethod<int>(this->object, "getSoundType", "()I", )); }

    BlockPos getSoundPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getSoundPos", "()Lnet.minecraft.util.BlockPos;", )); }

    int getSoundData() { return int(*javaClass->invokeMethod<int>(this->object, "getSoundData", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S37PacketStatistics
 * Package name: net.minecraft.network.play.server
 */
class S37PacketStatistics : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S37PacketStatistics";
public:
    STATICINITIALIZE;

    S37PacketStatistics(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    Map func_148974_c() { return Map(*javaClass->invokeMethod<jobject>(this->object, "func_148974_c", "()Ljava.util.Map;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S1DPacketEntityEffect
 * Package name: net.minecraft.network.play.server
 */
class S1DPacketEntityEffect : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S1DPacketEntityEffect";
public:
    STATICINITIALIZE;

    S1DPacketEntityEffect(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    byte getAmplifier() { return byte(*javaClass->invokeMethod<byte>(this->object, "getAmplifier", "()B", )); }

    int getDuration() { return int(*javaClass->invokeMethod<int>(this->object, "getDuration", "()I", )); }

    byte getEffectId() { return byte(*javaClass->invokeMethod<byte>(this->object, "getEffectId", "()B", )); }

    bool func_179707_f() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_179707_f", "()Z", )); }

    bool func_149429_c() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_149429_c", "()Z", )); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S42PacketCombatEvent
 * Package name: net.minecraft.network.play.server
 */
class S42PacketCombatEvent : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S42PacketCombatEvent";
public:
    STATICINITIALIZE;

    S42PacketCombatEvent(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S41PacketServerDifficulty
 * Package name: net.minecraft.network.play.server
 */
class S41PacketServerDifficulty : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S41PacketServerDifficulty";
public:
    STATICINITIALIZE;

    S41PacketServerDifficulty(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    bool isDifficultyLocked() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDifficultyLocked", "()Z", )); }

    EnumDifficulty getDifficulty() { return EnumDifficulty(*javaClass->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet.minecraft.world.EnumDifficulty;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S43PacketCamera
 * Package name: net.minecraft.network.play.server
 */
class S43PacketCamera : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S43PacketCamera";
public:
    STATICINITIALIZE;

    S43PacketCamera(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    Entity getEntity(World arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntity", "(Lnet.minecraft.world.World;)Lnet.minecraft.entity.Entity;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S44PacketWorldBorder
 * Package name: net.minecraft.network.play.server
 */
class S44PacketWorldBorder : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S44PacketWorldBorder";
public:
    STATICINITIALIZE;

    S44PacketWorldBorder(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void func_179788_a(WorldBorder arg0) { (*javaClass->invokeMethod<void>(this->object, "func_179788_a", "(Lnet.minecraft.world.border.WorldBorder;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S45PacketTitle
 * Package name: net.minecraft.network.play.server
 */
class S45PacketTitle : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S45PacketTitle";
public:
    STATICINITIALIZE;

    S45PacketTitle(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getFadeInTime() { return int(*javaClass->invokeMethod<int>(this->object, "getFadeInTime", "()I", )); }

    int getDisplayTime() { return int(*javaClass->invokeMethod<int>(this->object, "getDisplayTime", "()I", )); }

    int getFadeOutTime() { return int(*javaClass->invokeMethod<int>(this->object, "getFadeOutTime", "()I", )); }

    IChatComponent getMessage() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getMessage", "()Lnet.minecraft.util.IChatComponent;", )); }

    S45PacketTitle_Type getType() { return S45PacketTitle_Type(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Lnet.minecraft.network.play.server.S45PacketTitle$Type;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S45PacketTitle$Type
 * Enclosing class: net.minecraft.network.play.server.S45PacketTitle
 * Package name: net.minecraft.network.play.server
 */
class S45PacketTitle_Type : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S45PacketTitle$Type";
public:
    STATICINITIALIZE;

    S45PacketTitle_Type(jobject object) : JavaObject(object) {}

    static S45PacketTitle_Type byName(String arg0) { return S45PacketTitle_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "byName", "(Ljava.lang.String;)Lnet.minecraft.network.play.server.S45PacketTitle$Type;", arg0)); }

    static S45PacketTitle_Type valueOf(String arg0) { return S45PacketTitle_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.play.server.S45PacketTitle$Type;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S46PacketSetCompressionLevel
 * Package name: net.minecraft.network.play.server
 */
class S46PacketSetCompressionLevel : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S46PacketSetCompressionLevel";
public:
    STATICINITIALIZE;

    S46PacketSetCompressionLevel(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int func_179760_a() { return int(*javaClass->invokeMethod<int>(this->object, "func_179760_a", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S1EPacketRemoveEntityEffect
 * Package name: net.minecraft.network.play.server
 */
class S1EPacketRemoveEntityEffect : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S1EPacketRemoveEntityEffect";
public:
    STATICINITIALIZE;

    S1EPacketRemoveEntityEffect(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getEffectId() { return int(*javaClass->invokeMethod<int>(this->object, "getEffectId", "()I", )); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S38PacketPlayerListItem
 * Package name: net.minecraft.network.play.server
 */
class S38PacketPlayerListItem : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S38PacketPlayerListItem";
public:
    STATICINITIALIZE;

    S38PacketPlayerListItem(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    List func_179767_a() { return List(*javaClass->invokeMethod<jobject>(this->object, "func_179767_a", "()Ljava.util.List;", )); }

    S38PacketPlayerListItem_Action func_179768_b() { return S38PacketPlayerListItem_Action(*javaClass->invokeMethod<jobject>(this->object, "func_179768_b", "()Lnet.minecraft.network.play.server.S38PacketPlayerListItem$Action;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S38PacketPlayerListItem$Action
 * Enclosing class: net.minecraft.network.play.server.S38PacketPlayerListItem
 * Package name: net.minecraft.network.play.server
 */
class S38PacketPlayerListItem_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S38PacketPlayerListItem$Action";
public:
    STATICINITIALIZE;

    S38PacketPlayerListItem_Action(jobject object) : JavaObject(object) {}

    static S38PacketPlayerListItem_Action valueOf(String arg0) { return S38PacketPlayerListItem_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.play.server.S38PacketPlayerListItem$Action;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S00PacketKeepAlive
 * Package name: net.minecraft.network.play.server
 */
class S00PacketKeepAlive : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S00PacketKeepAlive";
public:
    STATICINITIALIZE;

    S00PacketKeepAlive(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int func_149134_c() { return int(*javaClass->invokeMethod<int>(this->object, "func_149134_c", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S39PacketPlayerAbilities
 * Package name: net.minecraft.network.play.server
 */
class S39PacketPlayerAbilities : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S39PacketPlayerAbilities";
public:
    STATICINITIALIZE;

    S39PacketPlayerAbilities(jobject object) : JavaObject(object) {}

    void setInvulnerable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setInvulnerable", "(Z)V", arg0)); }

    void setAllowFlying(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAllowFlying", "(Z)V", arg0)); }

    void setCreativeMode(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setCreativeMode", "(Z)V", arg0)); }

    void setWalkSpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setWalkSpeed", "(F)V", arg0)); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    float getWalkSpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getWalkSpeed", "()F", )); }

    bool isInvulnerable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvulnerable", "()Z", )); }

    bool isAllowFlying() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAllowFlying", "()Z", )); }

    float getFlySpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getFlySpeed", "()F", )); }

    void setFlySpeed(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setFlySpeed", "(F)V", arg0)); }

    bool isCreativeMode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCreativeMode", "()Z", )); }

    void setFlying(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setFlying", "(Z)V", arg0)); }

    bool isFlying() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFlying", "()Z", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S3APacketTabComplete
 * Package name: net.minecraft.network.play.server
 */
class S3APacketTabComplete : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S3APacketTabComplete";
public:
    STATICINITIALIZE;

    S3APacketTabComplete(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S29PacketSoundEffect
 * Package name: net.minecraft.network.play.server
 */
class S29PacketSoundEffect : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S29PacketSoundEffect";
public:
    STATICINITIALIZE;

    S29PacketSoundEffect(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    String getSoundName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSoundName", "()Ljava.lang.String;", )); }

    float getVolume() { return float(*javaClass->invokeMethod<float>(this->object, "getVolume", "()F", )); }

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    double getZ() { return double(*javaClass->invokeMethod<double>(this->object, "getZ", "()D", )); }

    float getPitch() { return float(*javaClass->invokeMethod<float>(this->object, "getPitch", "()F", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S48PacketResourcePackSend
 * Package name: net.minecraft.network.play.server
 */
class S48PacketResourcePackSend : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S48PacketResourcePackSend";
public:
    STATICINITIALIZE;

    S48PacketResourcePackSend(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    String getHash() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHash", "()Ljava.lang.String;", )); }

    String getURL() { return String(*javaClass->invokeMethod<jobject>(this->object, "getURL", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S49PacketUpdateEntityNBT
 * Package name: net.minecraft.network.play.server
 */
class S49PacketUpdateEntityNBT : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S49PacketUpdateEntityNBT";
public:
    STATICINITIALIZE;

    S49PacketUpdateEntityNBT(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    NBTTagCompound getTagCompound() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getTagCompound", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    Entity getEntity(World arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntity", "(Lnet.minecraft.world.World;)Lnet.minecraft.entity.Entity;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S3FPacketCustomPayload
 * Package name: net.minecraft.network.play.server
 */
class S3FPacketCustomPayload : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S3FPacketCustomPayload";
public:
    STATICINITIALIZE;

    S3FPacketCustomPayload(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    String getChannelName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getChannelName", "()Ljava.lang.String;", )); }

    PacketBuffer getBufferData() { return PacketBuffer(*javaClass->invokeMethod<jobject>(this->object, "getBufferData", "()Lnet.minecraft.network.PacketBuffer;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S3BPacketScoreboardObjective
 * Package name: net.minecraft.network.play.server
 */
class S3BPacketScoreboardObjective : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S3BPacketScoreboardObjective";
public:
    STATICINITIALIZE;

    S3BPacketScoreboardObjective(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int func_149338_e() { return int(*javaClass->invokeMethod<int>(this->object, "func_149338_e", "()I", )); }

    String func_149339_c() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_149339_c", "()Ljava.lang.String;", )); }

    String func_149337_d() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_149337_d", "()Ljava.lang.String;", )); }

    IScoreObjectiveCriteria_EnumRenderType func_179817_d() { return IScoreObjectiveCriteria_EnumRenderType(*javaClass->invokeMethod<jobject>(this->object, "func_179817_d", "()Lnet.minecraft.scoreboard.IScoreObjectiveCriteria$EnumRenderType;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S3CPacketUpdateScore
 * Package name: net.minecraft.network.play.server
 */
class S3CPacketUpdateScore : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S3CPacketUpdateScore";
public:
    STATICINITIALIZE;

    S3CPacketUpdateScore(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    String getObjectiveName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectiveName", "()Ljava.lang.String;", )); }

    S3CPacketUpdateScore_Action getScoreAction() { return S3CPacketUpdateScore_Action(*javaClass->invokeMethod<jobject>(this->object, "getScoreAction", "()Lnet.minecraft.network.play.server.S3CPacketUpdateScore$Action;", )); }

    String getPlayerName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPlayerName", "()Ljava.lang.String;", )); }

    int getScoreValue() { return int(*javaClass->invokeMethod<int>(this->object, "getScoreValue", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S3CPacketUpdateScore$Action
 * Enclosing class: net.minecraft.network.play.server.S3CPacketUpdateScore
 * Package name: net.minecraft.network.play.server
 */
class S3CPacketUpdateScore_Action : public Enum {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S3CPacketUpdateScore$Action";
public:
    STATICINITIALIZE;

    S3CPacketUpdateScore_Action(jobject object) : JavaObject(object) {}

    static S3CPacketUpdateScore_Action valueOf(String arg0) { return S3CPacketUpdateScore_Action(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.network.play.server.S3CPacketUpdateScore$Action;", arg0)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S3DPacketDisplayScoreboard
 * Package name: net.minecraft.network.play.server
 */
class S3DPacketDisplayScoreboard : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S3DPacketDisplayScoreboard";
public:
    STATICINITIALIZE;

    S3DPacketDisplayScoreboard(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    String func_149370_d() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_149370_d", "()Ljava.lang.String;", )); }

    int func_149371_c() { return int(*javaClass->invokeMethod<int>(this->object, "func_149371_c", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S3EPacketTeams
 * Package name: net.minecraft.network.play.server
 */
class S3EPacketTeams : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S3EPacketTeams";
public:
    STATICINITIALIZE;

    S3EPacketTeams(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    int func_149307_h() { return int(*javaClass->invokeMethod<int>(this->object, "func_149307_h", "()I", )); }

    String func_149312_c() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_149312_c", "()Ljava.lang.String;", )); }

    String func_149306_d() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_149306_d", "()Ljava.lang.String;", )); }

    String func_149311_e() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_149311_e", "()Ljava.lang.String;", )); }

    String func_149309_f() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_149309_f", "()Ljava.lang.String;", )); }

    int func_179813_h() { return int(*javaClass->invokeMethod<int>(this->object, "func_179813_h", "()I", )); }

    int func_149308_i() { return int(*javaClass->invokeMethod<int>(this->object, "func_149308_i", "()I", )); }

    String func_179814_i() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_179814_i", "()Ljava.lang.String;", )); }

    Collection func_149310_g() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "func_149310_g", "()Ljava.util.Collection;", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S2APacketParticles
 * Package name: net.minecraft.network.play.server
 */
class S2APacketParticles : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S2APacketParticles";
public:
    STATICINITIALIZE;

    S2APacketParticles(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    int getParticleCount() { return int(*javaClass->invokeMethod<int>(this->object, "getParticleCount", "()I", )); }

    float getParticleSpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getParticleSpeed", "()F", )); }

    EnumParticleTypes getParticleType() { return EnumParticleTypes(*javaClass->invokeMethod<jobject>(this->object, "getParticleType", "()Lnet.minecraft.util.EnumParticleTypes;", )); }

    bool isLongDistance() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLongDistance", "()Z", )); }

    double getXCoordinate() { return double(*javaClass->invokeMethod<double>(this->object, "getXCoordinate", "()D", )); }

    double getYCoordinate() { return double(*javaClass->invokeMethod<double>(this->object, "getYCoordinate", "()D", )); }

    double getZCoordinate() { return double(*javaClass->invokeMethod<double>(this->object, "getZCoordinate", "()D", )); }

    float getYOffset() { return float(*javaClass->invokeMethod<float>(this->object, "getYOffset", "()F", )); }

    float getXOffset() { return float(*javaClass->invokeMethod<float>(this->object, "getXOffset", "()F", )); }

    float getZOffset() { return float(*javaClass->invokeMethod<float>(this->object, "getZOffset", "()F", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S20PacketEntityProperties
 * Package name: net.minecraft.network.play.server
 */
class S20PacketEntityProperties : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S20PacketEntityProperties";
public:
    STATICINITIALIZE;

    S20PacketEntityProperties(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    List func_149441_d() { return List(*javaClass->invokeMethod<jobject>(this->object, "func_149441_d", "()Ljava.util.List;", )); }

    int getEntityId() { return int(*javaClass->invokeMethod<int>(this->object, "getEntityId", "()I", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S02PacketChat
 * Package name: net.minecraft.network.play.server
 */
class S02PacketChat : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S02PacketChat";
public:
    STATICINITIALIZE;

    S02PacketChat(jobject object) : JavaObject(object) {}

    IChatComponent getChatComponent() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getChatComponent", "()Lnet.minecraft.util.IChatComponent;", )); }

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    bool isChat() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isChat", "()Z", )); }

    byte getType() { return byte(*javaClass->invokeMethod<byte>(this->object, "getType", "()B", )); }

};


/**
 * Classpath: net.minecraft.network.play.server.S34PacketMaps
 * Package name: net.minecraft.network.play.server
 */
class S34PacketMaps : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S34PacketMaps";
public:
    STATICINITIALIZE;

    S34PacketMaps(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    void setMapdataTo(MapData arg0) { (*javaClass->invokeMethod<void>(this->object, "setMapdataTo", "(Lnet.minecraft.world.storage.MapData;)V", arg0)); }

    int getMapId() { return int(*javaClass->invokeMethod<int>(this->object, "getMapId", "()I", )); }

};


/**
 * Classpath: net.minecraft.world.storage.MapData
 * Package name: net.minecraft.world.storage
 */
class MapData : public WorldSavedData {
protected:
    const inline static char *className = "net.minecraft.world.storage.MapData";
public:
    STATICINITIALIZE;

    MapData(jobject object) : JavaObject(object) {}

    void updateMapData(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "updateMapData", "(II)V", arg0, arg1)); }

    void updateVisiblePlayers(EntityPlayer arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "updateVisiblePlayers", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    Packet getMapPacket(ItemStack arg0, World arg1, EntityPlayer arg2) { return Packet(*javaClass->invokeMethod<jobject>(this->object, "getMapPacket", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.world.World;Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.network.Packet;", arg0, arg1, arg2)); }

    void calculateMapCenter(double arg0, double arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "calculateMapCenter", "(DDI)V", arg0, arg1, arg2)); }

    void updateDecorations(int arg0, World arg1, String arg2, double arg3, double arg4, double arg5) { (*javaClass->invokeMethod<void>(this->object, "updateDecorations", "(ILnet.minecraft.world.World;Ljava.lang.String;DDD)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    MapData_MapInfo getMapInfo(EntityPlayer arg0) { return MapData_MapInfo(*javaClass->invokeMethod<jobject>(this->object, "getMapInfo", "(Lnet.minecraft.entity.player.EntityPlayer;)Lnet.minecraft.world.storage.MapData$MapInfo;", arg0)); }

    void writeToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.world.storage.MapData$MapInfo
 * Enclosing class: net.minecraft.world.storage.MapData
 * Package name: net.minecraft.world.storage
 */
class MapData_MapInfo : public Object {
protected:
    const inline static char *className = "net.minecraft.world.storage.MapData$MapInfo";
public:
    STATICINITIALIZE;

    MapData_MapInfo(jobject object) : JavaObject(object) {}

    Packet getPacket(ItemStack arg0) { return Packet(*javaClass->invokeMethod<jobject>(this->object, "getPacket", "(Lnet.minecraft.item.ItemStack;)Lnet.minecraft.network.Packet;", arg0)); }

    void update(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "update", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.network.play.server.S47PacketPlayerListHeaderFooter
 * Package name: net.minecraft.network.play.server
 */
class S47PacketPlayerListHeaderFooter : public Object {
protected:
    const inline static char *className = "net.minecraft.network.play.server.S47PacketPlayerListHeaderFooter";
public:
    STATICINITIALIZE;

    S47PacketPlayerListHeaderFooter(jobject object) : JavaObject(object) {}

    void readPacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "readPacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void writePacketData(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writePacketData", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

    void processPacket(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void processPacket(INetHandlerPlayClient arg0) { (*javaClass->invokeMethod<void>(this->object, "processPacket", "(Lnet.minecraft.network.play.INetHandlerPlayClient;)V", arg0)); }

    IChatComponent getHeader() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getHeader", "()Lnet.minecraft.util.IChatComponent;", )); }

    IChatComponent getFooter() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getFooter", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.client.multiplayer.ServerData
 * Package name: net.minecraft.client.multiplayer
 */
class ServerData : public Object {
protected:
    const inline static char *className = "net.minecraft.client.multiplayer.ServerData";
public:
    STATICINITIALIZE;

    ServerData(jobject object) : JavaObject(object) {}

    ServerData_ServerResourceMode getResourceMode() { return ServerData_ServerResourceMode(*javaClass->invokeMethod<jobject>(this->object, "getResourceMode", "()Lnet.minecraft.client.multiplayer.ServerData$ServerResourceMode;", )); }

    NBTTagCompound getNBTCompound() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getNBTCompound", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    void setResourceMode(ServerData_ServerResourceMode arg0) { (*javaClass->invokeMethod<void>(this->object, "setResourceMode", "(Lnet.minecraft.client.multiplayer.ServerData$ServerResourceMode;)V", arg0)); }

    void setBase64EncodedIconData(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setBase64EncodedIconData", "(Ljava.lang.String;)V", arg0)); }

    String getBase64EncodedIconData() { return String(*javaClass->invokeMethod<jobject>(this->object, "getBase64EncodedIconData", "()Ljava.lang.String;", )); }

    bool func_181041_d() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181041_d", "()Z", )); }

    static ServerData getServerDataFromNBTCompound(NBTTagCompound arg0) { return ServerData(*javaClass->invokeStaticMethod<jobject>(this->object, "getServerDataFromNBTCompound", "(Lnet.minecraft.nbt.NBTTagCompound;)Lnet.minecraft.client.multiplayer.ServerData;", arg0)); }

    void copyFrom(ServerData arg0) { (*javaClass->invokeMethod<void>(this->object, "copyFrom", "(Lnet.minecraft.client.multiplayer.ServerData;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.multiplayer.ServerData$ServerResourceMode
 * Enclosing class: net.minecraft.client.multiplayer.ServerData
 * Package name: net.minecraft.client.multiplayer
 */
class ServerData_ServerResourceMode : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.multiplayer.ServerData$ServerResourceMode";
public:
    STATICINITIALIZE;

    ServerData_ServerResourceMode(jobject object) : JavaObject(object) {}

    IChatComponent getMotd() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getMotd", "()Lnet.minecraft.util.IChatComponent;", )); }

    static ServerData_ServerResourceMode valueOf(String arg0) { return ServerData_ServerResourceMode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.multiplayer.ServerData$ServerResourceMode;", arg0)); }

};


/**
 * Classpath: net.minecraft.server.integrated.IntegratedServer
 * Package name: net.minecraft.server.integrated
 */
class IntegratedServer : public MinecraftServer {
protected:
    const inline static char *className = "net.minecraft.server.integrated.IntegratedServer";
public:
    STATICINITIALIZE;

    IntegratedServer(jobject object) : JavaObject(object) {}

    ServerCommandManager createNewCommandManager() { return ServerCommandManager(*javaClass->invokeMethod<jobject>(this->object, "createNewCommandManager", "()Lnet.minecraft.command.ServerCommandManager;", )); }

    void loadAllWorlds(String arg0, String arg1, long arg2, WorldType arg3, String arg4) { (*javaClass->invokeMethod<void>(this->object, "loadAllWorlds", "(Ljava.lang.String;Ljava.lang.String;JLnet.minecraft.world.WorldType;Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4)); }

    void setDifficultyForAllWorlds(EnumDifficulty arg0) { (*javaClass->invokeMethod<void>(this->object, "setDifficultyForAllWorlds", "(Lnet.minecraft.world.EnumDifficulty;)V", arg0)); }

    bool startServer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "startServer", "()Z", )); }

    bool canStructuresSpawn() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canStructuresSpawn", "()Z", )); }

    bool func_181034_q() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181034_q", "()Z", )); }

    bool func_183002_r() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_183002_r", "()Z", )); }

    File getDataDirectory() { return File(*javaClass->invokeMethod<jobject>(this->object, "getDataDirectory", "()Ljava.io.File;", )); }

    bool isDedicatedServer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDedicatedServer", "()Z", )); }

    bool func_181035_ah() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181035_ah", "()Z", )); }

    CrashReport addServerInfoToCrashReport(CrashReport arg0) { return CrashReport(*javaClass->invokeMethod<jobject>(this->object, "addServerInfoToCrashReport", "(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReport;", arg0)); }

    bool isCommandBlockEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCommandBlockEnabled", "()Z", )); }

    int getOpPermissionLevel() { return int(*javaClass->invokeMethod<int>(this->object, "getOpPermissionLevel", "()I", )); }

    WorldSettings_GameType getGameType() { return WorldSettings_GameType(*javaClass->invokeMethod<jobject>(this->object, "getGameType", "()Lnet.minecraft.world.WorldSettings$GameType;", )); }

    void setGameType(WorldSettings_GameType arg0) { (*javaClass->invokeMethod<void>(this->object, "setGameType", "(Lnet.minecraft.world.WorldSettings$GameType;)V", arg0)); }

    EnumDifficulty getDifficulty() { return EnumDifficulty(*javaClass->invokeMethod<jobject>(this->object, "getDifficulty", "()Lnet.minecraft.world.EnumDifficulty;", )); }

    void initiateShutdown() { (*javaClass->invokeMethod<void>(this->object, "initiateShutdown", "()V", )); }

    void setStaticInstance() { (*javaClass->invokeMethod<void>(this->object, "setStaticInstance", "()V", )); }

    void addServerStatsToSnooper(PlayerUsageSnooper arg0) { (*javaClass->invokeMethod<void>(this->object, "addServerStatsToSnooper", "(Lnet.minecraft.profiler.PlayerUsageSnooper;)V", arg0)); }

    bool isSnooperEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSnooperEnabled", "()Z", )); }

    void stopServer() { (*javaClass->invokeMethod<void>(this->object, "stopServer", "()V", )); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

    bool getPublic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getPublic", "()Z", )); }

    bool isHardcore() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHardcore", "()Z", )); }

    void finalTick(CrashReport arg0) { (*javaClass->invokeMethod<void>(this->object, "finalTick", "(Lnet.minecraft.crash.CrashReport;)V", arg0)); }

    String shareToLAN(WorldSettings_GameType arg0, bool arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "shareToLAN", "(Lnet.minecraft.world.WorldSettings$GameType;Z)Ljava.lang.String;", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.TextureManager
 * Package name: net.minecraft.client.renderer.texture
 */
class TextureManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.TextureManager";
public:
    STATICINITIALIZE;

    TextureManager(jobject object) : JavaObject(object) {}

    void onResourceManagerReload(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "onResourceManagerReload", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    bool loadTexture(ResourceLocation arg0, ITextureObject arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "loadTexture", "(Lnet.minecraft.util.ResourceLocation;Lnet.minecraft.client.renderer.texture.ITextureObject;)Z", arg0, arg1)); }

    ResourceLocation getDynamicTextureLocation(String arg0, DynamicTexture arg1) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getDynamicTextureLocation", "(Ljava.lang.String;Lnet.minecraft.client.renderer.texture.DynamicTexture;)Lnet.minecraft.util.ResourceLocation;", arg0, arg1)); }

    bool loadTickableTexture(ResourceLocation arg0, ITickableTextureObject arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "loadTickableTexture", "(Lnet.minecraft.util.ResourceLocation;Lnet.minecraft.client.renderer.texture.ITickableTextureObject;)Z", arg0, arg1)); }

    void bindTexture(ResourceLocation arg0) { (*javaClass->invokeMethod<void>(this->object, "bindTexture", "(Lnet.minecraft.util.ResourceLocation;)V", arg0)); }

    void deleteTexture(ResourceLocation arg0) { (*javaClass->invokeMethod<void>(this->object, "deleteTexture", "(Lnet.minecraft.util.ResourceLocation;)V", arg0)); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

    ITextureObject getTexture(ResourceLocation arg0) { return ITextureObject(*javaClass->invokeMethod<jobject>(this->object, "getTexture", "(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.renderer.texture.ITextureObject;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.ITextureObject
 * Package name: net.minecraft.client.renderer.texture
 */
class ITextureObject : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.ITextureObject";
public:
    STATICINITIALIZE;

    ITextureObject(jobject object) : JavaObject(object) {}

    void loadTexture(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "loadTexture", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    void setBlurMipmap(bool arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setBlurMipmap", "(ZZ)V", arg0, arg1)); }

    void restoreLastBlurMipmap() { (*javaClass->invokeMethod<void>(this->object, "restoreLastBlurMipmap", "()V", )); }

    int getGlTextureId() { return int(*javaClass->invokeMethod<int>(this->object, "getGlTextureId", "()I", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.DynamicTexture
 * Package name: net.minecraft.client.renderer.texture
 */
class DynamicTexture : public AbstractTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.DynamicTexture";
public:
    STATICINITIALIZE;

    DynamicTexture(jobject object) : JavaObject(object) {}

    void updateDynamicTexture() { (*javaClass->invokeMethod<void>(this->object, "updateDynamicTexture", "()V", )); }

    void loadTexture(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "loadTexture", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.ITickableTextureObject
 * Package name: net.minecraft.client.renderer.texture
 */
class ITickableTextureObject : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.ITickableTextureObject";
public:
    STATICINITIALIZE;

    ITickableTextureObject(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.resources.ResourcePackRepository
 * Package name: net.minecraft.client.resources
 */
class ResourcePackRepository : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.ResourcePackRepository";
public:
    STATICINITIALIZE;

    ResourcePackRepository(jobject object) : JavaObject(object) {}

    void fixDirResourcepacks() { (*javaClass->invokeMethod<void>(this->object, "fixDirResourcepacks", "()V", )); }

    void updateRepositoryEntriesAll() { (*javaClass->invokeMethod<void>(this->object, "updateRepositoryEntriesAll", "()V", )); }

    List getResourcePackFiles() { return List(*javaClass->invokeMethod<jobject>(this->object, "getResourcePackFiles", "()Ljava.util.List;", )); }

    List getRepositoryEntriesAll() { return List(*javaClass->invokeMethod<jobject>(this->object, "getRepositoryEntriesAll", "()Ljava.util.List;", )); }

    File getDirResourcepacks() { return File(*javaClass->invokeMethod<jobject>(this->object, "getDirResourcepacks", "()Ljava.io.File;", )); }

    void func_183028_i() { (*javaClass->invokeMethod<void>(this->object, "func_183028_i", "()V", )); }

    ListenableFuture setResourcePackInstance(File arg0) { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "setResourcePackInstance", "(Ljava.io.File;)Lcom.google.common.util.concurrent.ListenableFuture;", arg0)); }

    ListenableFuture downloadResourcePack(String arg0, String arg1) { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "downloadResourcePack", "(Ljava.lang.String;Ljava.lang.String;)Lcom.google.common.util.concurrent.ListenableFuture;", arg0, arg1)); }

    void func_148529_f() { (*javaClass->invokeMethod<void>(this->object, "func_148529_f", "()V", )); }

    List getRepositoryEntries() { return List(*javaClass->invokeMethod<jobject>(this->object, "getRepositoryEntries", "()Ljava.util.List;", )); }

    IResourcePack getResourcePackInstance() { return IResourcePack(*javaClass->invokeMethod<jobject>(this->object, "getResourcePackInstance", "()Lnet.minecraft.client.resources.IResourcePack;", )); }

    void setRepositories(List arg0) { (*javaClass->invokeMethod<void>(this->object, "setRepositories", "(Ljava.util.List;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.client.resources.IResourcePack
 * Package name: net.minecraft.client.resources
 */
class IResourcePack : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.IResourcePack";
public:
    STATICINITIALIZE;

    IResourcePack(jobject object) : JavaObject(object) {}

    Set getResourceDomains() { return Set(*javaClass->invokeMethod<jobject>(this->object, "getResourceDomains", "()Ljava.util.Set;", )); }

    bool resourceExists(ResourceLocation arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "resourceExists", "(Lnet.minecraft.util.ResourceLocation;)Z", arg0)); }

    IMetadataSection getPackMetadata(IMetadataSerializer arg0, String arg1) { return IMetadataSection(*javaClass->invokeMethod<jobject>(this->object, "getPackMetadata", "(Lnet.minecraft.client.resources.data.IMetadataSerializer;Ljava.lang.String;)Lnet.minecraft.client.resources.data.IMetadataSection;", arg0, arg1)); }

    BufferedImage getPackImage() { return BufferedImage(*javaClass->invokeMethod<jobject>(this->object, "getPackImage", "()Ljava.awt.image.BufferedImage;", )); }

    String getPackName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPackName", "()Ljava.lang.String;", )); }

    InputStream getInputStream(ResourceLocation arg0) { return InputStream(*javaClass->invokeMethod<jobject>(this->object, "getInputStream", "(Lnet.minecraft.util.ResourceLocation;)Ljava.io.InputStream;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.resources.data.IMetadataSerializer
 * Package name: net.minecraft.client.resources.data
 */
class IMetadataSerializer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.data.IMetadataSerializer";
public:
    STATICINITIALIZE;

    IMetadataSerializer(jobject object) : JavaObject(object) {}

    IMetadataSection parseMetadataSection(String arg0, JsonObject arg1) { return IMetadataSection(*javaClass->invokeMethod<jobject>(this->object, "parseMetadataSection", "(Ljava.lang.String;Lcom.google.gson.JsonObject;)Lnet.minecraft.client.resources.data.IMetadataSection;", arg0, arg1)); }

    Gson getGson() { return Gson(*javaClass->invokeMethod<jobject>(this->object, "getGson", "()Lcom.google.gson.Gson;", )); }

    void registerMetadataSectionType(IMetadataSectionSerializer arg0, Class arg1) { (*javaClass->invokeMethod<void>(this->object, "registerMetadataSectionType", "(Lnet.minecraft.client.resources.data.IMetadataSectionSerializer;Ljava.lang.Class;)V", arg0, arg1)); }

};


/**
 * Classpath: com.google.gson.Gson
 * Package name: com.google.gson
 */
class Gson : public Object {
protected:
    const inline static char *className = "com.google.gson.Gson";
public:
    STATICINITIALIZE;

    Gson(jobject object) : JavaObject(object) {}

    TypeAdapter doubleAdapter(bool arg0) { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "doubleAdapter", "(Z)Lcom.google.gson.TypeAdapter;", arg0)); }

    TypeAdapter floatAdapter(bool arg0) { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "floatAdapter", "(Z)Lcom.google.gson.TypeAdapter;", arg0)); }

    void checkValidFloatingPoint(double arg0) { (*javaClass->invokeMethod<void>(this->object, "checkValidFloatingPoint", "(D)V", arg0)); }

    TypeAdapter longAdapter(LongSerializationPolicy arg0) { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "longAdapter", "(Lcom.google.gson.LongSerializationPolicy;)Lcom.google.gson.TypeAdapter;", arg0)); }

    TypeAdapter getDelegateAdapter(TypeAdapterFactory arg0, TypeToken arg1) { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "getDelegateAdapter", "(Lcom.google.gson.TypeAdapterFactory;Lcom.google.gson.reflect.TypeToken;)Lcom.google.gson.TypeAdapter;", arg0, arg1)); }

    JsonWriter newJsonWriter(Writer arg0) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "newJsonWriter", "(Ljava.io.Writer;)Lcom.google.gson.stream.JsonWriter;", arg0)); }

    static void assertFullConsumption(Object arg0, JsonReader arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "assertFullConsumption", "(Ljava.lang.Object;Lcom.google.gson.stream.JsonReader;)V", arg0, arg1)); }

    JsonElement toJsonTree(Object arg0) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "toJsonTree", "(Ljava.lang.Object;)Lcom.google.gson.JsonElement;", arg0)); }

    JsonElement toJsonTree(Object arg0, Type arg1) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "toJsonTree", "(Ljava.lang.Object;Ljava.lang.reflect.Type;)Lcom.google.gson.JsonElement;", arg0, arg1)); }

    void toJson(Object arg0, Appendable arg1) { (*javaClass->invokeMethod<void>(this->object, "toJson", "(Ljava.lang.Object;Ljava.lang.Appendable;)V", arg0, arg1)); }

    void toJson(Object arg0, Type arg1, Appendable arg2) { (*javaClass->invokeMethod<void>(this->object, "toJson", "(Ljava.lang.Object;Ljava.lang.reflect.Type;Ljava.lang.Appendable;)V", arg0, arg1, arg2)); }

    void toJson(JsonElement arg0, Appendable arg1) { (*javaClass->invokeMethod<void>(this->object, "toJson", "(Lcom.google.gson.JsonElement;Ljava.lang.Appendable;)V", arg0, arg1)); }

    String toJson(JsonElement arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toJson", "(Lcom.google.gson.JsonElement;)Ljava.lang.String;", arg0)); }

    void toJson(JsonElement arg0, JsonWriter arg1) { (*javaClass->invokeMethod<void>(this->object, "toJson", "(Lcom.google.gson.JsonElement;Lcom.google.gson.stream.JsonWriter;)V", arg0, arg1)); }

    void toJson(Object arg0, Type arg1, JsonWriter arg2) { (*javaClass->invokeMethod<void>(this->object, "toJson", "(Ljava.lang.Object;Ljava.lang.reflect.Type;Lcom.google.gson.stream.JsonWriter;)V", arg0, arg1, arg2)); }

    String toJson(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toJson", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    String toJson(Object arg0, Type arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "toJson", "(Ljava.lang.Object;Ljava.lang.reflect.Type;)Ljava.lang.String;", arg0, arg1)); }

    static void access_000(Gson arg0, double arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "access$000", "(Lcom.google.gson.Gson;D)V", arg0, arg1)); }

    Object fromJson(JsonReader arg0, Type arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Lcom.google.gson.stream.JsonReader;Ljava.lang.reflect.Type;)Ljava.lang.Object;", arg0, arg1)); }

    Object fromJson(Reader arg0, Type arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Ljava.io.Reader;Ljava.lang.reflect.Type;)Ljava.lang.Object;", arg0, arg1)); }

    Object fromJson(Reader arg0, Class arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Ljava.io.Reader;Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1)); }

    Object fromJson(JsonElement arg0, Class arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Lcom.google.gson.JsonElement;Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1)); }

    Object fromJson(JsonElement arg0, Type arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Lcom.google.gson.JsonElement;Ljava.lang.reflect.Type;)Ljava.lang.Object;", arg0, arg1)); }

    Object fromJson(String arg0, Type arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Ljava.lang.String;Ljava.lang.reflect.Type;)Ljava.lang.Object;", arg0, arg1)); }

    Object fromJson(String arg0, Class arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Ljava.lang.String;Ljava.lang.Class;)Ljava.lang.Object;", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    TypeAdapter getAdapter(Class arg0) { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "getAdapter", "(Ljava.lang.Class;)Lcom.google.gson.TypeAdapter;", arg0)); }

    TypeAdapter getAdapter(TypeToken arg0) { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "getAdapter", "(Lcom.google.gson.reflect.TypeToken;)Lcom.google.gson.TypeAdapter;", arg0)); }

};


/**
 * Classpath: com.google.gson.TypeAdapter
 * Package name: com.google.gson
 */
class TypeAdapter : public Object {
protected:
    const inline static char *className = "com.google.gson.TypeAdapter";
public:
    STATICINITIALIZE;

    TypeAdapter(jobject object) : JavaObject(object) {}

    Object fromJsonTree(JsonElement arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJsonTree", "(Lcom.google.gson.JsonElement;)Ljava.lang.Object;", arg0)); }

    JsonElement toJsonTree(Object arg0) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "toJsonTree", "(Ljava.lang.Object;)Lcom.google.gson.JsonElement;", arg0)); }

    TypeAdapter nullSafe() { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "nullSafe", "()Lcom.google.gson.TypeAdapter;", )); }

    String toJson(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toJson", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    void toJson(Writer arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "toJson", "(Ljava.io.Writer;Ljava.lang.Object;)V", arg0, arg1)); }

    Object fromJson(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Object fromJson(Reader arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "fromJson", "(Ljava.io.Reader;)Ljava.lang.Object;", arg0)); }

    void write(JsonWriter arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "write", "(Lcom.google.gson.stream.JsonWriter;Ljava.lang.Object;)V", arg0, arg1)); }

    Object read(JsonReader arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "read", "(Lcom.google.gson.stream.JsonReader;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: com.google.gson.stream.JsonWriter
 * Package name: com.google.gson.stream
 */
class JsonWriter : public Object {
protected:
    const inline static char *className = "com.google.gson.stream.JsonWriter";
public:
    STATICINITIALIZE;

    JsonWriter(jobject object) : JavaObject(object) {}

    void setHtmlSafe(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHtmlSafe", "(Z)V", arg0)); }

    bool getSerializeNulls() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getSerializeNulls", "()Z", )); }

    void setSerializeNulls(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSerializeNulls", "(Z)V", arg0)); }

    JsonWriter beginObject() { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "beginObject", "()Lcom.google.gson.stream.JsonWriter;", )); }

    void writeDeferredName() { (*javaClass->invokeMethod<void>(this->object, "writeDeferredName", "()V", )); }

    void beforeValue(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "beforeValue", "(Z)V", arg0)); }

    bool isHtmlSafe() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHtmlSafe", "()Z", )); }

    void setIndent(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setIndent", "(Ljava.lang.String;)V", arg0)); }

    JsonWriter beginArray() { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "beginArray", "()Lcom.google.gson.stream.JsonWriter;", )); }

    JsonWriter endArray() { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "endArray", "()Lcom.google.gson.stream.JsonWriter;", )); }

    JsonWriter endObject() { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "endObject", "()Lcom.google.gson.stream.JsonWriter;", )); }

    void replaceTop(int arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceTop", "(I)V", arg0)); }

    JsonWriter nullValue() { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "nullValue", "()Lcom.google.gson.stream.JsonWriter;", )); }

    void newline() { (*javaClass->invokeMethod<void>(this->object, "newline", "()V", )); }

    void beforeName() { (*javaClass->invokeMethod<void>(this->object, "beforeName", "()V", )); }

    JsonWriter name(String arg0) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "name", "(Ljava.lang.String;)Lcom.google.gson.stream.JsonWriter;", arg0)); }

    JsonWriter value(double arg0) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "value", "(D)Lcom.google.gson.stream.JsonWriter;", arg0)); }

    JsonWriter value(bool arg0) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "value", "(Z)Lcom.google.gson.stream.JsonWriter;", arg0)); }

    JsonWriter value(long arg0) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "value", "(J)Lcom.google.gson.stream.JsonWriter;", arg0)); }

    JsonWriter value(Number arg0) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "value", "(Ljava.lang.Number;)Lcom.google.gson.stream.JsonWriter;", arg0)); }

    JsonWriter value(String arg0) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "value", "(Ljava.lang.String;)Lcom.google.gson.stream.JsonWriter;", arg0)); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    JsonWriter close(int arg0, int arg1, String arg2) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "close", "(IILjava.lang.String;)Lcom.google.gson.stream.JsonWriter;", arg0, arg1, arg2)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    JsonWriter open(int arg0, String arg1) { return JsonWriter(*javaClass->invokeMethod<jobject>(this->object, "open", "(ILjava.lang.String;)Lcom.google.gson.stream.JsonWriter;", arg0, arg1)); }

    int peek() { return int(*javaClass->invokeMethod<int>(this->object, "peek", "()I", )); }

    void string(String arg0) { (*javaClass->invokeMethod<void>(this->object, "string", "(Ljava.lang.String;)V", arg0)); }

    void setLenient(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLenient", "(Z)V", arg0)); }

    bool isLenient() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLenient", "()Z", )); }

    void push(int arg0) { (*javaClass->invokeMethod<void>(this->object, "push", "(I)V", arg0)); }

};


/**
 * Classpath: com.google.gson.stream.JsonReader
 * Package name: com.google.gson.stream
 */
class JsonReader : public Object {
protected:
    const inline static char *className = "com.google.gson.stream.JsonReader";
public:
    STATICINITIALIZE;

    JsonReader(jobject object) : JavaObject(object) {}

    void beginObject() { (*javaClass->invokeMethod<void>(this->object, "beginObject", "()V", )); }

    int peekKeyword() { return int(*javaClass->invokeMethod<int>(this->object, "peekKeyword", "()I", )); }

    String nextQuotedValue(char arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "nextQuotedValue", "(C)Ljava.lang.String;", arg0)); }

    String nextUnquotedValue() { return String(*javaClass->invokeMethod<jobject>(this->object, "nextUnquotedValue", "()Ljava.lang.String;", )); }

    void skipQuotedValue(char arg0) { (*javaClass->invokeMethod<void>(this->object, "skipQuotedValue", "(C)V", arg0)); }

    void skipUnquotedValue() { (*javaClass->invokeMethod<void>(this->object, "skipUnquotedValue", "()V", )); }

    int getColumnNumber() { return int(*javaClass->invokeMethod<int>(this->object, "getColumnNumber", "()I", )); }

    int nextNonWhitespace(bool arg0) { return int(*javaClass->invokeMethod<int>(this->object, "nextNonWhitespace", "(Z)I", arg0)); }

    void checkLenient() { (*javaClass->invokeMethod<void>(this->object, "checkLenient", "()V", )); }

    void skipToEndOfLine() { (*javaClass->invokeMethod<void>(this->object, "skipToEndOfLine", "()V", )); }

    char readEscapeCharacter() { return char(*javaClass->invokeMethod<char>(this->object, "readEscapeCharacter", "()C", )); }

    IOException syntaxError(String arg0) { return IOException(*javaClass->invokeMethod<jobject>(this->object, "syntaxError", "(Ljava.lang.String;)Ljava.io.IOException;", arg0)); }

    void consumeNonExecutePrefix() { (*javaClass->invokeMethod<void>(this->object, "consumeNonExecutePrefix", "()V", )); }

    void beginArray() { (*javaClass->invokeMethod<void>(this->object, "beginArray", "()V", )); }

    void endArray() { (*javaClass->invokeMethod<void>(this->object, "endArray", "()V", )); }

    void endObject() { (*javaClass->invokeMethod<void>(this->object, "endObject", "()V", )); }

    int doPeek() { return int(*javaClass->invokeMethod<int>(this->object, "doPeek", "()I", )); }

    int peekNumber() { return int(*javaClass->invokeMethod<int>(this->object, "peekNumber", "()I", )); }

    bool isLiteral(char arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLiteral", "(C)Z", arg0)); }

    String nextName() { return String(*javaClass->invokeMethod<jobject>(this->object, "nextName", "()Ljava.lang.String;", )); }

    String nextString() { return String(*javaClass->invokeMethod<jobject>(this->object, "nextString", "()Ljava.lang.String;", )); }

    void nextNull() { (*javaClass->invokeMethod<void>(this->object, "nextNull", "()V", )); }

    void skipValue() { (*javaClass->invokeMethod<void>(this->object, "skipValue", "()V", )); }

    bool fillBuffer(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "fillBuffer", "(I)Z", arg0)); }

    bool skipTo(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "skipTo", "(Ljava.lang.String;)Z", arg0)); }

    static int access_002(JsonReader arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "access$002", "(Lcom.google.gson.stream.JsonReader;I)I", arg0, arg1)); }

    static int access_200(JsonReader arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "access$200", "(Lcom.google.gson.stream.JsonReader;)I", arg0)); }

    static int access_300(JsonReader arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "access$300", "(Lcom.google.gson.stream.JsonReader;)I", arg0)); }

    static int access_100(JsonReader arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "access$100", "(Lcom.google.gson.stream.JsonReader;)I", arg0)); }

    static int access_000(JsonReader arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "access$000", "(Lcom.google.gson.stream.JsonReader;)I", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool hasNext() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNext", "()Z", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    JsonToken peek() { return JsonToken(*javaClass->invokeMethod<jobject>(this->object, "peek", "()Lcom.google.gson.stream.JsonToken;", )); }

    int getLineNumber() { return int(*javaClass->invokeMethod<int>(this->object, "getLineNumber", "()I", )); }

    bool nextBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "nextBoolean", "()Z", )); }

    long nextLong() { return long(*javaClass->invokeMethod<long>(this->object, "nextLong", "()J", )); }

    double nextDouble() { return double(*javaClass->invokeMethod<double>(this->object, "nextDouble", "()D", )); }

    int nextInt() { return int(*javaClass->invokeMethod<int>(this->object, "nextInt", "()I", )); }

    void setLenient(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setLenient", "(Z)V", arg0)); }

    bool isLenient() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLenient", "()Z", )); }

    void push(int arg0) { (*javaClass->invokeMethod<void>(this->object, "push", "(I)V", arg0)); }

};


/**
 * Classpath: com.google.gson.stream.JsonToken
 * Package name: com.google.gson.stream
 */
class JsonToken : public Enum {
protected:
    const inline static char *className = "com.google.gson.stream.JsonToken";
public:
    STATICINITIALIZE;

    JsonToken(jobject object) : JavaObject(object) {}

    static JsonToken valueOf(String arg0) { return JsonToken(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lcom.google.gson.stream.JsonToken;", arg0)); }

};


/**
 * Classpath: com.google.gson.LongSerializationPolicy
 * Package name: com.google.gson
 */
class LongSerializationPolicy : public Enum {
protected:
    const inline static char *className = "com.google.gson.LongSerializationPolicy";
public:
    STATICINITIALIZE;

    LongSerializationPolicy(jobject object) : JavaObject(object) {}

    JsonElement serialize(Long arg0) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "serialize", "(Ljava.lang.Long;)Lcom.google.gson.JsonElement;", arg0)); }

    static LongSerializationPolicy valueOf(String arg0) { return LongSerializationPolicy(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lcom.google.gson.LongSerializationPolicy;", arg0)); }

};


/**
 * Classpath: com.google.gson.TypeAdapterFactory
 * Package name: com.google.gson
 */
class TypeAdapterFactory : public JavaObject {
protected:
    const inline static char *className = "com.google.gson.TypeAdapterFactory";
public:
    STATICINITIALIZE;

    TypeAdapterFactory(jobject object) : JavaObject(object) {}

    TypeAdapter create(Gson arg0, TypeToken arg1) { return TypeAdapter(*javaClass->invokeMethod<jobject>(this->object, "create", "(Lcom.google.gson.Gson;Lcom.google.gson.reflect.TypeToken;)Lcom.google.gson.TypeAdapter;", arg0, arg1)); }

};


/**
 * Classpath: com.google.gson.reflect.TypeToken
 * Package name: com.google.gson.reflect
 */
class TypeToken : public Object {
protected:
    const inline static char *className = "com.google.gson.reflect.TypeToken";
public:
    STATICINITIALIZE;

    TypeToken(jobject object) : JavaObject(object) {}

    static Type getSuperclassTypeParameter(Class arg0) { return Type(*javaClass->invokeStaticMethod<jobject>(this->object, "getSuperclassTypeParameter", "(Ljava.lang.Class;)Ljava.lang.reflect.Type;", arg0)); }

    static AssertionError buildUnexpectedTypeError(Type arg0, Class_interface arg1) { return AssertionError(*javaClass->invokeStaticMethod<jobject>(this->object, "buildUnexpectedTypeError", "(Ljava.lang.reflect.Type;[Ljava.lang.Class;)Ljava.lang.AssertionError;", arg0, arg1)); }

    static bool typeEquals(ParameterizedType arg0, ParameterizedType arg1, Map arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "typeEquals", "(Ljava.lang.reflect.ParameterizedType;Ljava.lang.reflect.ParameterizedType;Ljava.util.Map;)Z", arg0, arg1, arg2)); }

    static TypeToken get(Class arg0) { return TypeToken(*javaClass->invokeStaticMethod<jobject>(this->object, "get", "(Ljava.lang.Class;)Lcom.google.gson.reflect.TypeToken;", arg0)); }

    static TypeToken get(Type arg0) { return TypeToken(*javaClass->invokeStaticMethod<jobject>(this->object, "get", "(Ljava.lang.reflect.Type;)Lcom.google.gson.reflect.TypeToken;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static bool isAssignableFrom(Type arg0, ParameterizedType arg1, Map arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isAssignableFrom", "(Ljava.lang.reflect.Type;Ljava.lang.reflect.ParameterizedType;Ljava.util.Map;)Z", arg0, arg1, arg2)); }

    bool isAssignableFrom(TypeToken arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAssignableFrom", "(Lcom.google.gson.reflect.TypeToken;)Z", arg0)); }

    bool isAssignableFrom(Type arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAssignableFrom", "(Ljava.lang.reflect.Type;)Z", arg0)); }

    bool isAssignableFrom(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAssignableFrom", "(Ljava.lang.Class;)Z", arg0)); }

    static bool isAssignableFrom(Type arg0, GenericArrayType arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isAssignableFrom", "(Ljava.lang.reflect.Type;Ljava.lang.reflect.GenericArrayType;)Z", arg0, arg1)); }

    static bool matches(Type arg0, Type arg1, Map arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "matches", "(Ljava.lang.reflect.Type;Ljava.lang.reflect.Type;Ljava.util.Map;)Z", arg0, arg1, arg2)); }

    Type getType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Ljava.lang.reflect.Type;", )); }

    Class getRawType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getRawType", "()Ljava.lang.Class;", )); }

};


/**
 * Classpath: java.lang.AssertionError
 * Package name: java.lang
 */
class AssertionError : public Error {
protected:
    const inline static char *className = "java.lang.AssertionError";
public:
    STATICINITIALIZE;

    AssertionError(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.reflect.GenericArrayType
 * Package name: java.lang.reflect
 */
class GenericArrayType : public JavaObject {
protected:
    const inline static char *className = "java.lang.reflect.GenericArrayType";
public:
    STATICINITIALIZE;

    GenericArrayType(jobject object) : JavaObject(object) {}

    Type getGenericComponentType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getGenericComponentType", "()Ljava.lang.reflect.Type;", )); }

};


/**
 * Classpath: net.minecraft.client.resources.data.IMetadataSectionSerializer
 * Package name: net.minecraft.client.resources.data
 */
class IMetadataSectionSerializer : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.resources.data.IMetadataSectionSerializer";
public:
    STATICINITIALIZE;

    IMetadataSectionSerializer(jobject object) : JavaObject(object) {}

    String getSectionName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSectionName", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.client.resources.LanguageManager
 * Package name: net.minecraft.client.resources
 */
class LanguageManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.LanguageManager";
public:
    STATICINITIALIZE;

    LanguageManager(jobject object) : JavaObject(object) {}

    void onResourceManagerReload(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "onResourceManagerReload", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    SortedSet getLanguages() { return SortedSet(*javaClass->invokeMethod<jobject>(this->object, "getLanguages", "()Ljava.util.SortedSet;", )); }

    Language getCurrentLanguage() { return Language(*javaClass->invokeMethod<jobject>(this->object, "getCurrentLanguage", "()Lnet.minecraft.client.resources.Language;", )); }

    void setCurrentLanguage(Language arg0) { (*javaClass->invokeMethod<void>(this->object, "setCurrentLanguage", "(Lnet.minecraft.client.resources.Language;)V", arg0)); }

    void parseLanguageMetadata(List arg0) { (*javaClass->invokeMethod<void>(this->object, "parseLanguageMetadata", "(Ljava.util.List;)V", arg0)); }

    bool isCurrentLocaleUnicode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCurrentLocaleUnicode", "()Z", )); }

    bool isCurrentLanguageBidirectional() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCurrentLanguageBidirectional", "()Z", )); }

};


/**
 * Classpath: java.util.SortedSet
 * Package name: java.util
 */
class SortedSet : public JavaObject {
protected:
    const inline static char *className = "java.util.SortedSet";
public:
    STATICINITIALIZE;

    SortedSet(jobject object) : JavaObject(object) {}

    Object last() { return Object(*javaClass->invokeMethod<jobject>(this->object, "last", "()Ljava.lang.Object;", )); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    Object first() { return Object(*javaClass->invokeMethod<jobject>(this->object, "first", "()Ljava.lang.Object;", )); }

    Comparator comparator() { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "comparator", "()Ljava.util.Comparator;", )); }

    SortedSet subSet(Object arg0, Object arg1) { return SortedSet(*javaClass->invokeMethod<jobject>(this->object, "subSet", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.util.SortedSet;", arg0, arg1)); }

    SortedSet headSet(Object arg0) { return SortedSet(*javaClass->invokeMethod<jobject>(this->object, "headSet", "(Ljava.lang.Object;)Ljava.util.SortedSet;", arg0)); }

    SortedSet tailSet(Object arg0) { return SortedSet(*javaClass->invokeMethod<jobject>(this->object, "tailSet", "(Ljava.lang.Object;)Ljava.util.SortedSet;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.resources.Language
 * Package name: net.minecraft.client.resources
 */
class Language : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.Language";
public:
    STATICINITIALIZE;

    Language(jobject object) : JavaObject(object) {}

    String getLanguageCode() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLanguageCode", "()Ljava.lang.String;", )); }

    bool isBidirectional() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBidirectional", "()Z", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(Language arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lnet.minecraft.client.resources.Language;)I", arg0)); }

};


/**
 * Classpath: net.minecraft.client.audio.SoundHandler
 * Package name: net.minecraft.client.audio
 */
class SoundHandler : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundHandler";
public:
    STATICINITIALIZE;

    SoundHandler(jobject object) : JavaObject(object) {}

    void playDelayedSound(ISound arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "playDelayedSound", "(Lnet.minecraft.client.audio.ISound;I)V", arg0, arg1)); }

    void onResourceManagerReload(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "onResourceManagerReload", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    Map getSoundMap(InputStream arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "getSoundMap", "(Ljava.io.InputStream;)Ljava.util.Map;", arg0)); }

    void loadSoundResource(ResourceLocation arg0, SoundList arg1) { (*javaClass->invokeMethod<void>(this->object, "loadSoundResource", "(Lnet.minecraft.util.ResourceLocation;Lnet.minecraft.client.audio.SoundList;)V", arg0, arg1)); }

    void setSoundLevel(SoundCategory arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setSoundLevel", "(Lnet.minecraft.client.audio.SoundCategory;F)V", arg0, arg1)); }

    bool isSoundPlaying(ISound arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSoundPlaying", "(Lnet.minecraft.client.audio.ISound;)Z", arg0)); }

    void resumeSounds() { (*javaClass->invokeMethod<void>(this->object, "resumeSounds", "()V", )); }

    void unloadSounds() { (*javaClass->invokeMethod<void>(this->object, "unloadSounds", "()V", )); }

    void setListener(EntityPlayer arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setListener", "(Lnet.minecraft.entity.player.EntityPlayer;F)V", arg0, arg1)); }

    void pauseSounds() { (*javaClass->invokeMethod<void>(this->object, "pauseSounds", "()V", )); }

    void playSound(ISound arg0) { (*javaClass->invokeMethod<void>(this->object, "playSound", "(Lnet.minecraft.client.audio.ISound;)V", arg0)); }

    void stopSounds() { (*javaClass->invokeMethod<void>(this->object, "stopSounds", "()V", )); }

    SoundEventAccessorComposite getSound(ResourceLocation arg0) { return SoundEventAccessorComposite(*javaClass->invokeMethod<jobject>(this->object, "getSound", "(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.audio.SoundEventAccessorComposite;", arg0)); }

    void stopSound(ISound arg0) { (*javaClass->invokeMethod<void>(this->object, "stopSound", "(Lnet.minecraft.client.audio.ISound;)V", arg0)); }

    SoundEventAccessorComposite getRandomSoundFromCategories(SoundCategory_interface arg0) { return SoundEventAccessorComposite(*javaClass->invokeMethod<jobject>(this->object, "getRandomSoundFromCategories", "([Lnet.minecraft.client.audio.SoundCategory;)Lnet.minecraft.client.audio.SoundEventAccessorComposite;", arg0)); }

    void update() { (*javaClass->invokeMethod<void>(this->object, "update", "()V", )); }

};


/**
 * Classpath: net.minecraft.client.audio.ISound
 * Package name: net.minecraft.client.audio
 */
class ISound : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.audio.ISound";
public:
    STATICINITIALIZE;

    ISound(jobject object) : JavaObject(object) {}

    int getRepeatDelay() { return int(*javaClass->invokeMethod<int>(this->object, "getRepeatDelay", "()I", )); }

    ISound_AttenuationType getAttenuationType() { return ISound_AttenuationType(*javaClass->invokeMethod<jobject>(this->object, "getAttenuationType", "()Lnet.minecraft.client.audio.ISound$AttenuationType;", )); }

    ResourceLocation getSoundLocation() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getSoundLocation", "()Lnet.minecraft.util.ResourceLocation;", )); }

    bool canRepeat() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canRepeat", "()Z", )); }

    float getXPosF() { return float(*javaClass->invokeMethod<float>(this->object, "getXPosF", "()F", )); }

    float getYPosF() { return float(*javaClass->invokeMethod<float>(this->object, "getYPosF", "()F", )); }

    float getZPosF() { return float(*javaClass->invokeMethod<float>(this->object, "getZPosF", "()F", )); }

    float getVolume() { return float(*javaClass->invokeMethod<float>(this->object, "getVolume", "()F", )); }

    float getPitch() { return float(*javaClass->invokeMethod<float>(this->object, "getPitch", "()F", )); }

};


/**
 * Classpath: net.minecraft.client.audio.ISound$AttenuationType
 * Enclosing class: net.minecraft.client.audio.ISound
 * Package name: net.minecraft.client.audio
 */
class ISound_AttenuationType : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.audio.ISound$AttenuationType";
public:
    STATICINITIALIZE;

    ISound_AttenuationType(jobject object) : JavaObject(object) {}

    int getTypeInt() { return int(*javaClass->invokeMethod<int>(this->object, "getTypeInt", "()I", )); }

    static ISound_AttenuationType valueOf(String arg0) { return ISound_AttenuationType(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.audio.ISound$AttenuationType;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.audio.SoundList
 * Package name: net.minecraft.client.audio
 */
class SoundList : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundList";
public:
    STATICINITIALIZE;

    SoundList(jobject object) : JavaObject(object) {}

    void setSoundCategory(SoundCategory arg0) { (*javaClass->invokeMethod<void>(this->object, "setSoundCategory", "(Lnet.minecraft.client.audio.SoundCategory;)V", arg0)); }

    void setReplaceExisting(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setReplaceExisting", "(Z)V", arg0)); }

    bool canReplaceExisting() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canReplaceExisting", "()Z", )); }

    SoundCategory getSoundCategory() { return SoundCategory(*javaClass->invokeMethod<jobject>(this->object, "getSoundCategory", "()Lnet.minecraft.client.audio.SoundCategory;", )); }

    List getSoundList() { return List(*javaClass->invokeMethod<jobject>(this->object, "getSoundList", "()Ljava.util.List;", )); }

};


/**
 * Classpath: net.minecraft.client.audio.SoundEventAccessorComposite
 * Package name: net.minecraft.client.audio
 */
class SoundEventAccessorComposite : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundEventAccessorComposite";
public:
    STATICINITIALIZE;

    SoundEventAccessorComposite(jobject object) : JavaObject(object) {}

    ResourceLocation getSoundEventLocation() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getSoundEventLocation", "()Lnet.minecraft.util.ResourceLocation;", )); }

    SoundCategory getSoundCategory() { return SoundCategory(*javaClass->invokeMethod<jobject>(this->object, "getSoundCategory", "()Lnet.minecraft.client.audio.SoundCategory;", )); }

    void addSoundToEventPool(ISoundEventAccessor arg0) { (*javaClass->invokeMethod<void>(this->object, "addSoundToEventPool", "(Lnet.minecraft.client.audio.ISoundEventAccessor;)V", arg0)); }

    Object cloneEntry() { return Object(*javaClass->invokeMethod<jobject>(this->object, "cloneEntry", "()Ljava.lang.Object;", )); }

    SoundPoolEntry cloneEntry() { return SoundPoolEntry(*javaClass->invokeMethod<jobject>(this->object, "cloneEntry", "()Lnet.minecraft.client.audio.SoundPoolEntry;", )); }

    int getWeight() { return int(*javaClass->invokeMethod<int>(this->object, "getWeight", "()I", )); }

};


/**
 * Classpath: net.minecraft.client.audio.ISoundEventAccessor
 * Package name: net.minecraft.client.audio
 */
class ISoundEventAccessor : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.audio.ISoundEventAccessor";
public:
    STATICINITIALIZE;

    ISoundEventAccessor(jobject object) : JavaObject(object) {}

    Object cloneEntry() { return Object(*javaClass->invokeMethod<jobject>(this->object, "cloneEntry", "()Ljava.lang.Object;", )); }

    int getWeight() { return int(*javaClass->invokeMethod<int>(this->object, "getWeight", "()I", )); }

};


/**
 * Classpath: net.minecraft.client.audio.SoundPoolEntry
 * Package name: net.minecraft.client.audio
 */
class SoundPoolEntry : public Object {
protected:
    const inline static char *className = "net.minecraft.client.audio.SoundPoolEntry";
public:
    STATICINITIALIZE;

    SoundPoolEntry(jobject object) : JavaObject(object) {}

    ResourceLocation getSoundPoolEntryLocation() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getSoundPoolEntryLocation", "()Lnet.minecraft.util.ResourceLocation;", )); }

    bool isStreamingSound() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isStreamingSound", "()Z", )); }

    void setPitch(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setPitch", "(D)V", arg0)); }

    void setVolume(double arg0) { (*javaClass->invokeMethod<void>(this->object, "setVolume", "(D)V", arg0)); }

    double getVolume() { return double(*javaClass->invokeMethod<double>(this->object, "getVolume", "()D", )); }

    double getPitch() { return double(*javaClass->invokeMethod<double>(this->object, "getPitch", "()D", )); }

};


/**
 * Classpath: [Lnet.minecraft.client.audio.SoundCategory;
 */
class SoundCategory_interface : public Object {
protected:
    const inline static char *className = "[Lnet.minecraft.client.audio.SoundCategory;";
public:
    STATICINITIALIZE;

    SoundCategory_interface(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.stream.IStream
 * Package name: net.minecraft.client.stream
 */
class IStream : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.stream.IStream";
public:
    STATICINITIALIZE;

    IStream(jobject object) : JavaObject(object) {}

    void func_152911_a(Metadata arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "func_152911_a", "(Lnet.minecraft.client.stream.Metadata;J)V", arg0, arg1)); }

    void func_176026_a(Metadata arg0, long arg1, long arg2) { (*javaClass->invokeMethod<void>(this->object, "func_176026_a", "(Lnet.minecraft.client.stream.Metadata;JJ)V", arg0, arg1, arg2)); }

    void updateStreamVolume() { (*javaClass->invokeMethod<void>(this->object, "updateStreamVolume", "()V", )); }

    void func_152930_t() { (*javaClass->invokeMethod<void>(this->object, "func_152930_t", "()V", )); }

    void func_152909_x() { (*javaClass->invokeMethod<void>(this->object, "func_152909_x", "()V", )); }

    IngestServerTester func_152932_y() { return IngestServerTester(*javaClass->invokeMethod<jobject>(this->object, "func_152932_y", "()Lnet.minecraft.client.stream.IngestServerTester;", )); }

    bool func_152908_z() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_152908_z", "()Z", )); }

    int func_152920_A() { return int(*javaClass->invokeMethod<int>(this->object, "func_152920_A", "()I", )); }

    bool func_152927_B() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_152927_B", "()Z", )); }

    String func_152921_C() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_152921_C", "()Ljava.lang.String;", )); }

    void func_152917_b(String arg0) { (*javaClass->invokeMethod<void>(this->object, "func_152917_b", "(Ljava.lang.String;)V", arg0)); }

    ErrorCode func_152912_E() { return ErrorCode(*javaClass->invokeMethod<jobject>(this->object, "func_152912_E", "()Ltv.twitch.ErrorCode;", )); }

    bool func_152913_F() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_152913_F", "()Z", )); }

    bool func_152929_G() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_152929_G", "()Z", )); }

    IStream_AuthFailureReason func_152918_H() { return IStream_AuthFailureReason(*javaClass->invokeMethod<jobject>(this->object, "func_152918_H", "()Lnet.minecraft.client.stream.IStream$AuthFailureReason;", )); }

    void muteMicrophone(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "muteMicrophone", "(Z)V", arg0)); }

    ChatUserInfo func_152926_a(String arg0) { return ChatUserInfo(*javaClass->invokeMethod<jobject>(this->object, "func_152926_a", "(Ljava.lang.String;)Ltv.twitch.chat.ChatUserInfo;", arg0)); }

    void requestCommercial() { (*javaClass->invokeMethod<void>(this->object, "requestCommercial", "()V", )); }

    void shutdownStream() { (*javaClass->invokeMethod<void>(this->object, "shutdownStream", "()V", )); }

    void func_152935_j() { (*javaClass->invokeMethod<void>(this->object, "func_152935_j", "()V", )); }

    void func_152922_k() { (*javaClass->invokeMethod<void>(this->object, "func_152922_k", "()V", )); }

    bool isBroadcasting() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBroadcasting", "()Z", )); }

    void stopBroadcasting() { (*javaClass->invokeMethod<void>(this->object, "stopBroadcasting", "()V", )); }

    bool isReadyToBroadcast() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadyToBroadcast", "()Z", )); }

    bool func_152928_D() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_152928_D", "()Z", )); }

    bool func_152936_l() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_152936_l", "()Z", )); }

    bool isPaused() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPaused", "()Z", )); }

    void unpause() { (*javaClass->invokeMethod<void>(this->object, "unpause", "()V", )); }

    void pause() { (*javaClass->invokeMethod<void>(this->object, "pause", "()V", )); }

};


/**
 * Classpath: net.minecraft.client.stream.Metadata
 * Package name: net.minecraft.client.stream
 */
class Metadata : public Object {
protected:
    const inline static char *className = "net.minecraft.client.stream.Metadata";
public:
    STATICINITIALIZE;

    Metadata(jobject object) : JavaObject(object) {}

    String func_152809_a() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_152809_a", "()Ljava.lang.String;", )); }

    void func_152808_a(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "func_152808_a", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    String func_152806_b() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_152806_b", "()Ljava.lang.String;", )); }

    String func_152810_c() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_152810_c", "()Ljava.lang.String;", )); }

    void func_152807_a(String arg0) { (*javaClass->invokeMethod<void>(this->object, "func_152807_a", "(Ljava.lang.String;)V", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.client.stream.IngestServerTester
 * Package name: net.minecraft.client.stream
 */
class IngestServerTester : public Object {
protected:
    const inline static char *className = "net.minecraft.client.stream.IngestServerTester";
public:
    STATICINITIALIZE;

    IngestServerTester(jobject object) : JavaObject(object) {}

    long func_153037_m() { return long(*javaClass->invokeMethod<long>(this->object, "func_153037_m", "()J", )); }

    void func_176004_j() { (*javaClass->invokeMethod<void>(this->object, "func_176004_j", "()V", )); }

    void func_153031_o() { (*javaClass->invokeMethod<void>(this->object, "func_153031_o", "()V", )); }

    void func_153034_a(IngestServerTester_IngestTestState arg0) { (*javaClass->invokeMethod<void>(this->object, "func_153034_a", "(Lnet.minecraft.client.stream.IngestServerTester$IngestTestState;)V", arg0)); }

    void func_153041_j() { (*javaClass->invokeMethod<void>(this->object, "func_153041_j", "()V", )); }

    void func_153035_b(IngestServer arg0) { (*javaClass->invokeMethod<void>(this->object, "func_153035_b", "(Ltv.twitch.broadcast.IngestServer;)V", arg0)); }

    bool func_153036_a(IngestServer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_153036_a", "(Ltv.twitch.broadcast.IngestServer;)Z", arg0)); }

    bool func_153029_c(IngestServer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_153029_c", "(Ltv.twitch.broadcast.IngestServer;)Z", arg0)); }

    void func_153038_n() { (*javaClass->invokeMethod<void>(this->object, "func_153038_n", "()V", )); }

    void func_153039_l() { (*javaClass->invokeMethod<void>(this->object, "func_153039_l", "()V", )); }

    IngestServer func_153040_c() { return IngestServer(*javaClass->invokeMethod<jobject>(this->object, "func_153040_c", "()Ltv.twitch.broadcast.IngestServer;", )); }

    void func_153042_a(IngestServerTester_IngestTestListener arg0) { (*javaClass->invokeMethod<void>(this->object, "func_153042_a", "(Lnet.minecraft.client.stream.IngestServerTester$IngestTestListener;)V", arg0)); }

    int func_153028_p() { return int(*javaClass->invokeMethod<int>(this->object, "func_153028_p", "()I", )); }

    bool func_153032_e() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_153032_e", "()Z", )); }

    float func_153030_h() { return float(*javaClass->invokeMethod<float>(this->object, "func_153030_h", "()F", )); }

};


/**
 * Classpath: net.minecraft.client.stream.IngestServerTester$IngestTestState
 * Enclosing class: net.minecraft.client.stream.IngestServerTester
 * Package name: net.minecraft.client.stream
 */
class IngestServerTester_IngestTestState : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.stream.IngestServerTester$IngestTestState";
public:
    STATICINITIALIZE;

    IngestServerTester_IngestTestState(jobject object) : JavaObject(object) {}

    static IngestServerTester_IngestTestState valueOf(String arg0) { return IngestServerTester_IngestTestState(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.stream.IngestServerTester$IngestTestState;", arg0)); }

};


/**
 * Classpath: tv.twitch.broadcast.IngestServer
 * Package name: tv.twitch.broadcast
 */
class IngestServer : public Object {
protected:
    const inline static char *className = "tv.twitch.broadcast.IngestServer";
public:
    STATICINITIALIZE;

    IngestServer(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.stream.IngestServerTester$IngestTestListener
 * Enclosing class: net.minecraft.client.stream.IngestServerTester
 * Package name: net.minecraft.client.stream
 */
class IngestServerTester_IngestTestListener : public JavaObject {
protected:
    const inline static char *className = "net.minecraft.client.stream.IngestServerTester$IngestTestListener";
public:
    STATICINITIALIZE;

    IngestServerTester_IngestTestListener(jobject object) : JavaObject(object) {}

    void func_152907_a(IngestServerTester arg0, IngestServerTester_IngestTestState arg1) { (*javaClass->invokeMethod<void>(this->object, "func_152907_a", "(Lnet.minecraft.client.stream.IngestServerTester;Lnet.minecraft.client.stream.IngestServerTester$IngestTestState;)V", arg0, arg1)); }

};


/**
 * Classpath: tv.twitch.ErrorCode
 * Package name: tv.twitch
 */
class ErrorCode : public Enum {
protected:
    const inline static char *className = "tv.twitch.ErrorCode";
public:
    STATICINITIALIZE;

    ErrorCode(jobject object) : JavaObject(object) {}

    static ErrorCode lookupValue(int arg0) { return ErrorCode(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupValue", "(I)Ltv.twitch.ErrorCode;", arg0)); }

    static bool succeeded(ErrorCode arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "succeeded", "(Ltv.twitch.ErrorCode;)Z", arg0)); }

    static ErrorCode valueOf(String arg0) { return ErrorCode(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ltv.twitch.ErrorCode;", arg0)); }

    int getValue() { return int(*javaClass->invokeMethod<int>(this->object, "getValue", "()I", )); }

    static bool failed(ErrorCode arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "failed", "(Ltv.twitch.ErrorCode;)Z", arg0)); }

    static String getString(ErrorCode arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getString", "(Ltv.twitch.ErrorCode;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.stream.IStream$AuthFailureReason
 * Enclosing class: net.minecraft.client.stream.IStream
 * Package name: net.minecraft.client.stream
 */
class IStream_AuthFailureReason : public Enum {
protected:
    const inline static char *className = "net.minecraft.client.stream.IStream$AuthFailureReason";
public:
    STATICINITIALIZE;

    IStream_AuthFailureReason(jobject object) : JavaObject(object) {}

    static IStream_AuthFailureReason valueOf(String arg0) { return IStream_AuthFailureReason(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.client.stream.IStream$AuthFailureReason;", arg0)); }

};


/**
 * Classpath: tv.twitch.chat.ChatUserInfo
 * Package name: tv.twitch.chat
 */
class ChatUserInfo : public Object {
protected:
    const inline static char *className = "tv.twitch.chat.ChatUserInfo";
public:
    STATICINITIALIZE;

    ChatUserInfo(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.gui.Gui
 * Package name: net.minecraft.client.gui
 */
class Gui : public Object {
protected:
    const inline static char *className = "net.minecraft.client.gui.Gui";
public:
    STATICINITIALIZE;

    Gui(jobject object) : JavaObject(object) {}

    void drawGradientRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "drawGradientRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void drawHorizontalLine(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "drawHorizontalLine", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void drawVerticalLine(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "drawVerticalLine", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void drawCenteredString(FontRenderer arg0, String arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "drawCenteredString", "(Lnet.minecraft.client.gui.FontRenderer;Ljava.lang.String;III)V", arg0, arg1, arg2, arg3, arg4)); }

    void drawTexturedModalRect(int arg0, int arg1, TextureAtlasSprite arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "drawTexturedModalRect", "(IILnet.minecraft.client.renderer.texture.TextureAtlasSprite;II)V", arg0, arg1, arg2, arg3, arg4)); }

    void drawTexturedModalRect(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "drawTexturedModalRect", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void drawTexturedModalRect(float arg0, float arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "drawTexturedModalRect", "(FFIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static void drawRect(int arg0, int arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeStaticMethod<void>(this->object, "drawRect", "(IIIII)V", arg0, arg1, arg2, arg3, arg4)); }

    void drawString(FontRenderer arg0, String arg1, int arg2, int arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "drawString", "(Lnet.minecraft.client.gui.FontRenderer;Ljava.lang.String;III)V", arg0, arg1, arg2, arg3, arg4)); }

    static void drawModalRectWithCustomSizedTexture(int arg0, int arg1, float arg2, float arg3, int arg4, int arg5, float arg6, float arg7) { (*javaClass->invokeStaticMethod<void>(this->object, "drawModalRectWithCustomSizedTexture", "(IIFFIIFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static void drawScaledCustomSizeModalRect(int arg0, int arg1, float arg2, float arg3, int arg4, int arg5, int arg6, int arg7, float arg8, float arg9) { (*javaClass->invokeStaticMethod<void>(this->object, "drawScaledCustomSizeModalRect", "(IIFFIIIIFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

};


/**
 * Classpath: net.minecraft.client.shader.Framebuffer
 * Package name: net.minecraft.client.shader
 */
class Framebuffer : public Object {
protected:
    const inline static char *className = "net.minecraft.client.shader.Framebuffer";
public:
    STATICINITIALIZE;

    Framebuffer(jobject object) : JavaObject(object) {}

    void deleteFramebuffer() { (*javaClass->invokeMethod<void>(this->object, "deleteFramebuffer", "()V", )); }

    void createFramebuffer(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "createFramebuffer", "(II)V", arg0, arg1)); }

    void checkFramebufferComplete() { (*javaClass->invokeMethod<void>(this->object, "checkFramebufferComplete", "()V", )); }

    void unbindFramebufferTexture() { (*javaClass->invokeMethod<void>(this->object, "unbindFramebufferTexture", "()V", )); }

    void framebufferClear() { (*javaClass->invokeMethod<void>(this->object, "framebufferClear", "()V", )); }

    void setFramebufferFilter(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setFramebufferFilter", "(I)V", arg0)); }

    void bindFramebufferTexture() { (*javaClass->invokeMethod<void>(this->object, "bindFramebufferTexture", "()V", )); }

    void framebufferRenderExt(int arg0, int arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "framebufferRenderExt", "(IIZ)V", arg0, arg1, arg2)); }

    void bindFramebuffer(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "bindFramebuffer", "(Z)V", arg0)); }

    void unbindFramebuffer() { (*javaClass->invokeMethod<void>(this->object, "unbindFramebuffer", "()V", )); }

    void framebufferRender(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "framebufferRender", "(II)V", arg0, arg1)); }

    void createBindFramebuffer(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "createBindFramebuffer", "(II)V", arg0, arg1)); }

    void setFramebufferColor(float arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "setFramebufferColor", "(FFFF)V", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: net.minecraft.client.multiplayer.WorldClient
 * Package name: net.minecraft.client.multiplayer
 */
class WorldClient : public World {
protected:
    const inline static char *className = "net.minecraft.client.multiplayer.WorldClient";
public:
    STATICINITIALIZE;

    WorldClient(jobject object) : JavaObject(object) {}

    void addEntityToWorld(int arg0, Entity arg1) { (*javaClass->invokeMethod<void>(this->object, "addEntityToWorld", "(ILnet.minecraft.entity.Entity;)V", arg0, arg1)); }

    Entity removeEntityFromWorld(int arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "removeEntityFromWorld", "(I)Lnet.minecraft.entity.Entity;", arg0)); }

    void playSoundAtPos(BlockPos arg0, String arg1, float arg2, float arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "playSoundAtPos", "(Lnet.minecraft.util.BlockPos;Ljava.lang.String;FFZ)V", arg0, arg1, arg2, arg3, arg4)); }

    void setWorldScoreboard(Scoreboard arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldScoreboard", "(Lnet.minecraft.scoreboard.Scoreboard;)V", arg0)); }

    IChunkProvider createChunkProvider() { return IChunkProvider(*javaClass->invokeMethod<jobject>(this->object, "createChunkProvider", "()Lnet.minecraft.world.chunk.IChunkProvider;", )); }

    void onEntityAdded(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityAdded", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onEntityRemoved(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEntityRemoved", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void updateWeather() { (*javaClass->invokeMethod<void>(this->object, "updateWeather", "()V", )); }

    int getRenderDistanceChunks() { return int(*javaClass->invokeMethod<int>(this->object, "getRenderDistanceChunks", "()I", )); }

    void updateBlocks() { (*javaClass->invokeMethod<void>(this->object, "updateBlocks", "()V", )); }

    Entity getEntityByID(int arg0) { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getEntityByID", "(I)Lnet.minecraft.entity.Entity;", arg0)); }

    void setWorldTime(long arg0) { (*javaClass->invokeMethod<void>(this->object, "setWorldTime", "(J)V", arg0)); }

    void makeFireworks(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, NBTTagCompound arg6) { (*javaClass->invokeMethod<void>(this->object, "makeFireworks", "(DDDDDDLnet.minecraft.nbt.NBTTagCompound;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    CrashReportCategory addWorldInfoToCrashReport(CrashReport arg0) { return CrashReportCategory(*javaClass->invokeMethod<jobject>(this->object, "addWorldInfoToCrashReport", "(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReportCategory;", arg0)); }

    void doVoidFogParticles(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "doVoidFogParticles", "(III)V", arg0, arg1, arg2)); }

    bool spawnEntityInWorld(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "spawnEntityInWorld", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    void removeAllEntities() { (*javaClass->invokeMethod<void>(this->object, "removeAllEntities", "()V", )); }

    void removeEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "removeEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void playSound(double arg0, double arg1, double arg2, String arg3, float arg4, float arg5, bool arg6) { (*javaClass->invokeMethod<void>(this->object, "playSound", "(DDDLjava.lang.String;FFZ)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

    void doPreChunk(int arg0, int arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "doPreChunk", "(IIZ)V", arg0, arg1, arg2)); }

    void sendQuittingDisconnectingPacket() { (*javaClass->invokeMethod<void>(this->object, "sendQuittingDisconnectingPacket", "()V", )); }

    void invalidateBlockReceiveRegion(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) { (*javaClass->invokeMethod<void>(this->object, "invalidateBlockReceiveRegion", "(IIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    bool invalidateRegionAndSetBlock(BlockPos arg0, IBlockState arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "invalidateRegionAndSetBlock", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.state.IBlockState;)Z", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.util.Session
 * Package name: net.minecraft.util
 */
class Session : public Object {
protected:
    const inline static char *className = "net.minecraft.util.Session";
public:
    STATICINITIALIZE;

    Session(jobject object) : JavaObject(object) {}

    String getPlayerID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPlayerID", "()Ljava.lang.String;", )); }

    Session_Type getSessionType() { return Session_Type(*javaClass->invokeMethod<jobject>(this->object, "getSessionType", "()Lnet.minecraft.util.Session$Type;", )); }

    String getUsername() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUsername", "()Ljava.lang.String;", )); }

    String getSessionID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSessionID", "()Ljava.lang.String;", )); }

    GameProfile getProfile() { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getProfile", "()Lcom.mojang.authlib.GameProfile;", )); }

    String getToken() { return String(*javaClass->invokeMethod<jobject>(this->object, "getToken", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.util.Session$Type
 * Enclosing class: net.minecraft.util.Session
 * Package name: net.minecraft.util
 */
class Session_Type : public Enum {
protected:
    const inline static char *className = "net.minecraft.util.Session$Type";
public:
    STATICINITIALIZE;

    Session_Type(jobject object) : JavaObject(object) {}

    static Session_Type setSessionType(String arg0) { return Session_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "setSessionType", "(Ljava.lang.String;)Lnet.minecraft.util.Session$Type;", arg0)); }

    static Session_Type valueOf(String arg0) { return Session_Type(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lnet.minecraft.util.Session$Type;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.Minecraft$Test
 * Enclosing class: net.minecraft.client.Minecraft
 * Package name: net.minecraft.client
 */
class Minecraft_Test : public Object {
protected:
    const inline static char *className = "net.minecraft.client.Minecraft$Test";
public:
    STATICINITIALIZE;

    Minecraft_Test(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: net.minecraft.client.Minecraft
 * Package name: net.minecraft.client
 */
class Minecraft : public Object {
protected:
    const inline static char *className = "net.minecraft.client.Minecraft";
public:
    STATICINITIALIZE;

    Minecraft(jobject object) : JavaObject(object) {}

    SkinManager getSkinManager() { return SkinManager(*javaClass->invokeMethod<jobject>(this->object, "getSkinManager", "()Lnet.minecraft.client.resources.SkinManager;", )); }

    void setRenderViewEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "setRenderViewEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    BlockRendererDispatcher getBlockRendererDispatcher() { return BlockRendererDispatcher(*javaClass->invokeMethod<jobject>(this->object, "getBlockRendererDispatcher", "()Lnet.minecraft.client.renderer.BlockRendererDispatcher;", )); }

    RenderManager getRenderManager() { return RenderManager(*javaClass->invokeMethod<jobject>(this->object, "getRenderManager", "()Lnet.minecraft.client.renderer.entity.RenderManager;", )); }

    RenderItem getRenderItem() { return RenderItem(*javaClass->invokeMethod<jobject>(this->object, "getRenderItem", "()Lnet.minecraft.client.renderer.entity.RenderItem;", )); }

    ItemRenderer getItemRenderer() { return ItemRenderer(*javaClass->invokeMethod<jobject>(this->object, "getItemRenderer", "()Lnet.minecraft.client.renderer.ItemRenderer;", )); }

    static int getDebugFPS() { return int(*javaClass->invokeStaticMethod<int>(this->object, "getDebugFPS", "()I", )); }

    FrameTimer func_181539_aj() { return FrameTimer(*javaClass->invokeMethod<jobject>(this->object, "func_181539_aj", "()Lnet.minecraft.util.FrameTimer;", )); }

    static Map getSessionInfo() { return Map(*javaClass->invokeStaticMethod<jobject>(this->object, "getSessionInfo", "()Ljava.util.Map;", )); }

    bool func_181540_al() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181540_al", "()Z", )); }

    void func_181537_a(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "func_181537_a", "(Z)V", arg0)); }

    void func_181536_a(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) { (*javaClass->invokeMethod<void>(this->object, "func_181536_a", "(IIIIIIIIII)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    void updateDisplay() { (*javaClass->invokeMethod<void>(this->object, "updateDisplay", "()V", )); }

    ISaveFormat getSaveLoader() { return ISaveFormat(*javaClass->invokeMethod<jobject>(this->object, "getSaveLoader", "()Lnet.minecraft.world.storage.ISaveFormat;", )); }

    void setIngameNotInFocus() { (*javaClass->invokeMethod<void>(this->object, "setIngameNotInFocus", "()V", )); }

    void setIngameFocus() { (*javaClass->invokeMethod<void>(this->object, "setIngameFocus", "()V", )); }

    void displayDebugInfo(long arg0) { (*javaClass->invokeMethod<void>(this->object, "displayDebugInfo", "(J)V", arg0)); }

    bool isSingleplayer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSingleplayer", "()Z", )); }

    bool isFramerateLimitBelowMax() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFramerateLimitBelowMax", "()Z", )); }

    int getLimitFramerate() { return int(*javaClass->invokeMethod<int>(this->object, "getLimitFramerate", "()I", )); }

    void checkWindowResize() { (*javaClass->invokeMethod<void>(this->object, "checkWindowResize", "()V", )); }

    void updateDebugProfilerName(int arg0) { (*javaClass->invokeMethod<void>(this->object, "updateDebugProfilerName", "(I)V", arg0)); }

    void displayInGameMenu() { (*javaClass->invokeMethod<void>(this->object, "displayInGameMenu", "()V", )); }

    void sendClickBlockToController(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "sendClickBlockToController", "(Z)V", arg0)); }

    void rightClickMouse() { (*javaClass->invokeMethod<void>(this->object, "rightClickMouse", "()V", )); }

    void updateFramebufferSize() { (*javaClass->invokeMethod<void>(this->object, "updateFramebufferSize", "()V", )); }

    MusicTicker func_181535_r() { return MusicTicker(*javaClass->invokeMethod<jobject>(this->object, "func_181535_r", "()Lnet.minecraft.client.audio.MusicTicker;", )); }

    void dispatchKeypresses() { (*javaClass->invokeMethod<void>(this->object, "dispatchKeypresses", "()V", )); }

    Entity getRenderViewEntity() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getRenderViewEntity", "()Lnet.minecraft.entity.Entity;", )); }

    NetHandlerPlayClient getNetHandler() { return NetHandlerPlayClient(*javaClass->invokeMethod<jobject>(this->object, "getNetHandler", "()Lnet.minecraft.client.network.NetHandlerPlayClient;", )); }

    void middleClickMouse() { (*javaClass->invokeMethod<void>(this->object, "middleClickMouse", "()V", )); }

    void launchIntegratedServer(String arg0, String arg1, WorldSettings arg2) { (*javaClass->invokeMethod<void>(this->object, "launchIntegratedServer", "(Ljava.lang.String;Ljava.lang.String;Lnet.minecraft.world.WorldSettings;)V", arg0, arg1, arg2)); }

    void setServerData(ServerData arg0) { (*javaClass->invokeMethod<void>(this->object, "setServerData", "(Lnet.minecraft.client.multiplayer.ServerData;)V", arg0)); }

    void setDimensionAndSpawnPlayer(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDimensionAndSpawnPlayer", "(I)V", arg0)); }

    static bool isGuiEnabled() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isGuiEnabled", "()Z", )); }

    static bool isFancyGraphicsEnabled() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isFancyGraphicsEnabled", "()Z", )); }

    static bool isAmbientOcclusionEnabled() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isAmbientOcclusionEnabled", "()Z", )); }

    ItemStack func_181036_a(Item arg0, int arg1, TileEntity arg2) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "func_181036_a", "(Lnet.minecraft.item.Item;ILnet.minecraft.tileentity.TileEntity;)Lnet.minecraft.item.ItemStack;", arg0, arg1, arg2)); }

    ListenableFuture scheduleResourcesRefresh() { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "scheduleResourcesRefresh", "()Lcom.google.common.util.concurrent.ListenableFuture;", )); }

    ListenableFuture addScheduledTask(Runnable arg0) { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "addScheduledTask", "(Ljava.lang.Runnable;)Lcom.google.common.util.concurrent.ListenableFuture;", arg0)); }

    ListenableFuture addScheduledTask(Callable arg0) { return ListenableFuture(*javaClass->invokeMethod<jobject>(this->object, "addScheduledTask", "(Ljava.util.concurrent.Callable;)Lcom.google.common.util.concurrent.ListenableFuture;", arg0)); }

    void addServerStatsToSnooper(PlayerUsageSnooper arg0) { (*javaClass->invokeMethod<void>(this->object, "addServerStatsToSnooper", "(Lnet.minecraft.profiler.PlayerUsageSnooper;)V", arg0)); }

    String func_181538_aA() { return String(*javaClass->invokeMethod<jobject>(this->object, "func_181538_aA", "()Ljava.lang.String;", )); }

    PlayerUsageSnooper getPlayerUsageSnooper() { return PlayerUsageSnooper(*javaClass->invokeMethod<jobject>(this->object, "getPlayerUsageSnooper", "()Lnet.minecraft.profiler.PlayerUsageSnooper;", )); }

    void addServerTypeToSnooper(PlayerUsageSnooper arg0) { (*javaClass->invokeMethod<void>(this->object, "addServerTypeToSnooper", "(Lnet.minecraft.profiler.PlayerUsageSnooper;)V", arg0)); }

    static int getGLMaximumTextureSize() { return int(*javaClass->invokeStaticMethod<int>(this->object, "getGLMaximumTextureSize", "()I", )); }

    bool isSnooperEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSnooperEnabled", "()Z", )); }

    ServerData getCurrentServerData() { return ServerData(*javaClass->invokeMethod<jobject>(this->object, "getCurrentServerData", "()Lnet.minecraft.client.multiplayer.ServerData;", )); }

    bool isIntegratedServerRunning() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isIntegratedServerRunning", "()Z", )); }

    IntegratedServer getIntegratedServer() { return IntegratedServer(*javaClass->invokeMethod<jobject>(this->object, "getIntegratedServer", "()Lnet.minecraft.server.integrated.IntegratedServer;", )); }

    static void stopIntegratedServer() { (*javaClass->invokeStaticMethod<void>(this->object, "stopIntegratedServer", "()V", )); }

    bool isFullScreen() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isFullScreen", "()Z", )); }

    PropertyMap getTwitchDetails() { return PropertyMap(*javaClass->invokeMethod<jobject>(this->object, "getTwitchDetails", "()Lcom.mojang.authlib.properties.PropertyMap;", )); }

    PropertyMap func_181037_M() { return PropertyMap(*javaClass->invokeMethod<jobject>(this->object, "func_181037_M", "()Lcom.mojang.authlib.properties.PropertyMap;", )); }

    MinecraftSessionService getSessionService() { return MinecraftSessionService(*javaClass->invokeMethod<jobject>(this->object, "getSessionService", "()Lcom.mojang.authlib.minecraft.MinecraftSessionService;", )); }

    TextureManager getTextureManager() { return TextureManager(*javaClass->invokeMethod<jobject>(this->object, "getTextureManager", "()Lnet.minecraft.client.renderer.texture.TextureManager;", )); }

    IResourceManager getResourceManager() { return IResourceManager(*javaClass->invokeMethod<jobject>(this->object, "getResourceManager", "()Lnet.minecraft.client.resources.IResourceManager;", )); }

    ResourcePackRepository getResourcePackRepository() { return ResourcePackRepository(*javaClass->invokeMethod<jobject>(this->object, "getResourcePackRepository", "()Lnet.minecraft.client.resources.ResourcePackRepository;", )); }

    LanguageManager getLanguageManager() { return LanguageManager(*javaClass->invokeMethod<jobject>(this->object, "getLanguageManager", "()Lnet.minecraft.client.resources.LanguageManager;", )); }

    TextureMap getTextureMapBlocks() { return TextureMap(*javaClass->invokeMethod<jobject>(this->object, "getTextureMapBlocks", "()Lnet.minecraft.client.renderer.texture.TextureMap;", )); }

    bool isJava64bit() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isJava64bit", "()Z", )); }

    SoundHandler getSoundHandler() { return SoundHandler(*javaClass->invokeMethod<jobject>(this->object, "getSoundHandler", "()Lnet.minecraft.client.audio.SoundHandler;", )); }

    MusicTicker_MusicType getAmbientMusicType() { return MusicTicker_MusicType(*javaClass->invokeMethod<jobject>(this->object, "getAmbientMusicType", "()Lnet.minecraft.client.audio.MusicTicker$MusicType;", )); }

    IStream getTwitchStream() { return IStream(*javaClass->invokeMethod<jobject>(this->object, "getTwitchStream", "()Lnet.minecraft.client.stream.IStream;", )); }

    bool isGamePaused() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isGamePaused", "()Z", )); }

    static long getSystemTime() { return long(*javaClass->invokeStaticMethod<long>(this->object, "getSystemTime", "()J", )); }

    void displayCrashReport(CrashReport arg0) { (*javaClass->invokeMethod<void>(this->object, "displayCrashReport", "(Lnet.minecraft.crash.CrashReport;)V", arg0)); }

    void runGameLoop() { (*javaClass->invokeMethod<void>(this->object, "runGameLoop", "()V", )); }

    void displayGuiScreen(GuiScreen arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGuiScreen", "(Lnet.minecraft.client.gui.GuiScreen;)V", arg0)); }

    void shutdownMinecraftApplet() { (*javaClass->invokeMethod<void>(this->object, "shutdownMinecraftApplet", "()V", )); }

    void startTimerHackThread() { (*javaClass->invokeMethod<void>(this->object, "startTimerHackThread", "()V", )); }

    void setWindowIcon() { (*javaClass->invokeMethod<void>(this->object, "setWindowIcon", "()V", )); }

    void setInitialDisplayMode() { (*javaClass->invokeMethod<void>(this->object, "setInitialDisplayMode", "()V", )); }

    void createDisplay() { (*javaClass->invokeMethod<void>(this->object, "createDisplay", "()V", )); }

    void refreshResources() { (*javaClass->invokeMethod<void>(this->object, "refreshResources", "()V", )); }

    void drawSplashScreen(TextureManager arg0) { (*javaClass->invokeMethod<void>(this->object, "drawSplashScreen", "(Lnet.minecraft.client.renderer.texture.TextureManager;)V", arg0)); }

    void checkGLError(String arg0) { (*javaClass->invokeMethod<void>(this->object, "checkGLError", "(Ljava.lang.String;)V", arg0)); }

    void toggleFullscreen() { (*javaClass->invokeMethod<void>(this->object, "toggleFullscreen", "()V", )); }

    void updateDisplayMode() { (*javaClass->invokeMethod<void>(this->object, "updateDisplayMode", "()V", )); }

    ByteBuffer readImageToBuffer(InputStream arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "readImageToBuffer", "(Ljava.io.InputStream;)Ljava.nio.ByteBuffer;", arg0)); }

    Framebuffer getFramebuffer() { return Framebuffer(*javaClass->invokeMethod<jobject>(this->object, "getFramebuffer", "()Lnet.minecraft.client.shader.Framebuffer;", )); }

    static Minecraft getMinecraft() { return Minecraft(*javaClass->invokeStaticMethod<jobject>(this->object, "getMinecraft", "()Lnet.minecraft.client.Minecraft;", )); }

    Proxy getProxy() { return Proxy(*javaClass->invokeMethod<jobject>(this->object, "getProxy", "()Ljava.net.Proxy;", )); }

    void crashed(CrashReport arg0) { (*javaClass->invokeMethod<void>(this->object, "crashed", "(Lnet.minecraft.crash.CrashReport;)V", arg0)); }

    void loadWorld(WorldClient arg0) { (*javaClass->invokeMethod<void>(this->object, "loadWorld", "(Lnet.minecraft.client.multiplayer.WorldClient;)V", arg0)); }

    void loadWorld(WorldClient arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "loadWorld", "(Lnet.minecraft.client.multiplayer.WorldClient;Ljava.lang.String;)V", arg0, arg1)); }

    void runTick() { (*javaClass->invokeMethod<void>(this->object, "runTick", "()V", )); }

    void clickMouse() { (*javaClass->invokeMethod<void>(this->object, "clickMouse", "()V", )); }

    Session getSession() { return Session(*javaClass->invokeMethod<jobject>(this->object, "getSession", "()Lnet.minecraft.util.Session;", )); }

    bool isDemo() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDemo", "()Z", )); }

    static bool isJvm64bit() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isJvm64bit", "()Z", )); }

    void startGame() { (*javaClass->invokeMethod<void>(this->object, "startGame", "()V", )); }

    String getVersion() { return String(*javaClass->invokeMethod<jobject>(this->object, "getVersion", "()Ljava.lang.String;", )); }

    void initStream() { (*javaClass->invokeMethod<void>(this->object, "initStream", "()V", )); }

    bool isUnicode() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUnicode", "()Z", )); }

    bool isCallingFromMinecraftThread() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCallingFromMinecraftThread", "()Z", )); }

    CrashReport addGraphicsAndWorldToCrashReport(CrashReport arg0) { return CrashReport(*javaClass->invokeMethod<jobject>(this->object, "addGraphicsAndWorldToCrashReport", "(Lnet.minecraft.crash.CrashReport;)Lnet.minecraft.crash.CrashReport;", arg0)); }

    void registerMetadataSerializers() { (*javaClass->invokeMethod<void>(this->object, "registerMetadataSerializers", "()V", )); }

    void run() { (*javaClass->invokeMethod<void>(this->object, "run", "()V", )); }

    void shutdown() { (*javaClass->invokeMethod<void>(this->object, "shutdown", "()V", )); }

    Minecraft_Test test() { return Minecraft_Test(*javaClass->invokeMethod<jobject>(this->object, "test", "()Lnet.minecraft.client.Minecraft$Test;", )); }

    void freeMemory() { (*javaClass->invokeMethod<void>(this->object, "freeMemory", "()V", )); }

    void resize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "resize", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: net.minecraft.client.resources.SkinManager
 * Package name: net.minecraft.client.resources
 */
class SkinManager : public Object {
protected:
    const inline static char *className = "net.minecraft.client.resources.SkinManager";
public:
    STATICINITIALIZE;

    SkinManager(jobject object) : JavaObject(object) {}

    void loadProfileTextures(GameProfile arg0, SkinManager_SkinAvailableCallback arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "loadProfileTextures", "(Lcom.mojang.authlib.GameProfile;Lnet.minecraft.client.resources.SkinManager$SkinAvailableCallback;Z)V", arg0, arg1, arg2)); }

    Map loadSkinFromCache(GameProfile arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "loadSkinFromCache", "(Lcom.mojang.authlib.GameProfile;)Ljava.util.Map;", arg0)); }

    ResourceLocation loadSkin(MinecraftProfileTexture arg0, MinecraftProfileTexture_Type arg1, SkinManager_SkinAvailableCallback arg2) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "loadSkin", "(Lcom.mojang.authlib.minecraft.MinecraftProfileTexture;Lcom.mojang.authlib.minecraft.MinecraftProfileTexture$Type;Lnet.minecraft.client.resources.SkinManager$SkinAvailableCallback;)Lnet.minecraft.util.ResourceLocation;", arg0, arg1, arg2)); }

    ResourceLocation loadSkin(MinecraftProfileTexture arg0, MinecraftProfileTexture_Type arg1) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "loadSkin", "(Lcom.mojang.authlib.minecraft.MinecraftProfileTexture;Lcom.mojang.authlib.minecraft.MinecraftProfileTexture$Type;)Lnet.minecraft.util.ResourceLocation;", arg0, arg1)); }

};


/**
 * Classpath: com.mojang.authlib.GameProfile
 * Package name: com.mojang.authlib
 */
class GameProfile : public Object {
protected:
    const inline static char *className = "com.mojang.authlib.GameProfile";
public:
    STATICINITIALIZE;

    GameProfile(jobject object) : JavaObject(object) {}

    bool isComplete() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isComplete", "()Z", )); }

    bool isLegacy() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLegacy", "()Z", )); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    PropertyMap getProperties() { return PropertyMap(*javaClass->invokeMethod<jobject>(this->object, "getProperties", "()Lcom.mojang.authlib.properties.PropertyMap;", )); }

    UUID getId() { return UUID(*javaClass->invokeMethod<jobject>(this->object, "getId", "()Ljava.util.UUID;", )); }

};


/**
 * Classpath: java.lang.String
 * Package name: java.lang
 */
class String : public Object {
protected:
    const inline static char *className = "java.lang.String";
public:
    STATICINITIALIZE;

    String(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void getChars(int arg0, int arg1, arr_C arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "getChars", "(II[CI)V", arg0, arg1, arg2, arg3)); }

    int compareTo(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.String;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int indexOf(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(I)I", arg0)); }

    int indexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;)I", arg0)); }

    static int indexOf(arr_B arg0, byte arg1, int arg2, String arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "indexOf", "([BBILjava.lang.String;I)I", arg0, arg1, arg2, arg3, arg4)); }

    int indexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    int indexOf(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(II)I", arg0, arg1)); }

    static void checkIndex(int arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkIndex", "(II)V", arg0, arg1)); }

    static String valueOf(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(I)Ljava.lang.String;", arg0)); }

    static String valueOf(arr_C arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "([C)Ljava.lang.String;", arg0)); }

    static String valueOf(Object arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    static String valueOf(bool arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Z)Ljava.lang.String;", arg0)); }

    static String valueOf(arr_C arg0, int arg1, int arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "([CII)Ljava.lang.String;", arg0, arg1, arg2)); }

    static String valueOf(char arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(C)Ljava.lang.String;", arg0)); }

    static String valueOf(double arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(D)Ljava.lang.String;", arg0)); }

    static String valueOf(float arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(F)Ljava.lang.String;", arg0)); }

    static String valueOf(long arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(J)Ljava.lang.String;", arg0)); }

    byte coder() { return byte(*javaClass->invokeMethod<byte>(this->object, "coder", "()B", )); }

    static Void rangeCheck(arr_C arg0, int arg1, int arg2) { return Void(*javaClass->invokeStaticMethod<jobject>(this->object, "rangeCheck", "([CII)Ljava.lang.Void;", arg0, arg1, arg2)); }

    static void checkBoundsOffCount(int arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "checkBoundsOffCount", "(III)V", arg0, arg1, arg2)); }

    static Charset lookupCharset(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "lookupCharset", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    static bool isNotContinuation(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isNotContinuation", "(I)Z", arg0)); }

    static char decode2(int arg0, int arg1) { return char(*javaClass->invokeStaticMethod<char>(this->object, "decode2", "(II)C", arg0, arg1)); }

    static int decodeUTF8_UTF16(arr_B arg0, int arg1, int arg2, arr_B arg3, int arg4, bool arg5) { return int(*javaClass->invokeStaticMethod<int>(this->object, "decodeUTF8_UTF16", "([BII[BIZ)I", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static int scale(int arg0, float arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "scale", "(IF)I", arg0, arg1)); }

    static int decodeWithDecoder(CharsetDecoder arg0, arr_C arg1, arr_B arg2, int arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "decodeWithDecoder", "(Ljava.nio.charset.CharsetDecoder;[C[BII)I", arg0, arg1, arg2, arg3, arg4)); }

    static String newStringNoRepl1(arr_B arg0, Charset arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "newStringNoRepl1", "([BLjava.nio.charset.Charset;)Ljava.lang.String;", arg0, arg1)); }

    static String newStringUTF8NoRepl(arr_B arg0, int arg1, int arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "newStringUTF8NoRepl", "([BII)Ljava.lang.String;", arg0, arg1, arg2)); }

    static void throwMalformed(int arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "throwMalformed", "(II)V", arg0, arg1)); }

    static void throwMalformed(arr_B arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "throwMalformed", "([B)V", arg0)); }

    static bool isASCII(arr_B arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isASCII", "([B)Z", arg0)); }

    static void throwUnmappable(int arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "throwUnmappable", "(I)V", arg0)); }

    static void throwUnmappable(arr_B arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "throwUnmappable", "([B)V", arg0)); }

    static bool isMalformed3(int arg0, int arg1, int arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMalformed3", "(III)Z", arg0, arg1, arg2)); }

    static int malformed3(arr_B arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "malformed3", "([BI)I", arg0, arg1)); }

    static char decode3(int arg0, int arg1, int arg2) { return char(*javaClass->invokeStaticMethod<char>(this->object, "decode3", "(III)C", arg0, arg1, arg2)); }

    static bool isMalformed3_2(int arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMalformed3_2", "(II)Z", arg0, arg1)); }

    static int decode4(int arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "decode4", "(IIII)I", arg0, arg1, arg2, arg3)); }

    static bool isMalformed4(int arg0, int arg1, int arg2) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMalformed4", "(III)Z", arg0, arg1, arg2)); }

    static int malformed4(arr_B arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "malformed4", "([BI)I", arg0, arg1)); }

    static bool isMalformed4_2(int arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMalformed4_2", "(II)Z", arg0, arg1)); }

    static bool isMalformed4_3(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isMalformed4_3", "(I)Z", arg0)); }

    bool isLatin1() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLatin1", "()Z", )); }

    char charAt(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "charAt", "(I)C", arg0)); }

    int codePointAt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointAt", "(I)I", arg0)); }

    int codePointBefore(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointBefore", "(I)I", arg0)); }

    int codePointCount(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "codePointCount", "(II)I", arg0, arg1)); }

    int offsetByCodePoints(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "offsetByCodePoints", "(II)I", arg0, arg1)); }

    static void checkBoundsBeginEnd(int arg0, int arg1, int arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "checkBoundsBeginEnd", "(III)V", arg0, arg1, arg2)); }

    void getBytes(arr_B arg0, int arg1, byte arg2) { (*javaClass->invokeMethod<void>(this->object, "getBytes", "([BIB)V", arg0, arg1, arg2)); }

    void getBytes(int arg0, int arg1, arr_B arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "getBytes", "(II[BI)V", arg0, arg1, arg2, arg3)); }

    void getBytes(arr_B arg0, int arg1, int arg2, byte arg3, int arg4) { (*javaClass->invokeMethod<void>(this->object, "getBytes", "([BIIBI)V", arg0, arg1, arg2, arg3, arg4)); }

    bool contentEquals(CharSequence arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contentEquals", "(Ljava.lang.CharSequence;)Z", arg0)); }

    bool contentEquals(StringBuffer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contentEquals", "(Ljava.lang.StringBuffer;)Z", arg0)); }

    bool nonSyncContentEquals(AbstractStringBuilder arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "nonSyncContentEquals", "(Ljava.lang.AbstractStringBuilder;)Z", arg0)); }

    bool regionMatches(bool arg0, int arg1, String arg2, int arg3, int arg4) { return bool(*javaClass->invokeMethod<boolean>(this->object, "regionMatches", "(ZILjava.lang.String;II)Z", arg0, arg1, arg2, arg3, arg4)); }

    bool regionMatches(int arg0, String arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "regionMatches", "(ILjava.lang.String;II)Z", arg0, arg1, arg2, arg3)); }

    bool startsWith(String arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "startsWith", "(Ljava.lang.String;I)Z", arg0, arg1)); }

    bool startsWith(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "startsWith", "(Ljava.lang.String;)Z", arg0)); }

    int lastIndexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;)I", arg0)); }

    static int lastIndexOf(arr_B arg0, byte arg1, int arg2, String arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lastIndexOf", "([BBILjava.lang.String;I)I", arg0, arg1, arg2, arg3, arg4)); }

    int lastIndexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    int lastIndexOf(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(II)I", arg0, arg1)); }

    int lastIndexOf(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(I)I", arg0)); }

    String substring(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(II)Ljava.lang.String;", arg0, arg1)); }

    String substring(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(I)Ljava.lang.String;", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    String replace(char arg0, char arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "replace", "(CC)Ljava.lang.String;", arg0, arg1)); }

    String replace(CharSequence arg0, CharSequence arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.CharSequence;Ljava.lang.CharSequence;)Ljava.lang.String;", arg0, arg1)); }

    bool matches(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "matches", "(Ljava.lang.String;)Z", arg0)); }

    String replaceFirst(String arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "replaceFirst", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    String replaceAll(String arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "replaceAll", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    static String join(CharSequence arg0, CharSequence_interface arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "join", "(Ljava.lang.CharSequence;[Ljava.lang.CharSequence;)Ljava.lang.String;", arg0, arg1)); }

    static String join(String arg0, String arg1, String arg2, String_interface arg3, int arg4) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "join", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;I)Ljava.lang.String;", arg0, arg1, arg2, arg3, arg4)); }

    static String join(CharSequence arg0, Iterable arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "join", "(Ljava.lang.CharSequence;Ljava.lang.Iterable;)Ljava.lang.String;", arg0, arg1)); }

    String toLowerCase() { return String(*javaClass->invokeMethod<jobject>(this->object, "toLowerCase", "()Ljava.lang.String;", )); }

    String toLowerCase(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toLowerCase", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String toUpperCase() { return String(*javaClass->invokeMethod<jobject>(this->object, "toUpperCase", "()Ljava.lang.String;", )); }

    String toUpperCase(Locale arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toUpperCase", "(Ljava.util.Locale;)Ljava.lang.String;", arg0)); }

    String trim() { return String(*javaClass->invokeMethod<jobject>(this->object, "trim", "()Ljava.lang.String;", )); }

    String strip() { return String(*javaClass->invokeMethod<jobject>(this->object, "strip", "()Ljava.lang.String;", )); }

    String stripLeading() { return String(*javaClass->invokeMethod<jobject>(this->object, "stripLeading", "()Ljava.lang.String;", )); }

    String stripTrailing() { return String(*javaClass->invokeMethod<jobject>(this->object, "stripTrailing", "()Ljava.lang.String;", )); }

    int indexOfNonWhitespace() { return int(*javaClass->invokeMethod<int>(this->object, "indexOfNonWhitespace", "()I", )); }

    Stream lines() { return Stream(*javaClass->invokeMethod<jobject>(this->object, "lines", "()Ljava.util.stream.Stream;", )); }

    String repeat(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "repeat", "(I)Ljava.lang.String;", arg0)); }

    int lastIndexOfNonWhitespace() { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOfNonWhitespace", "()I", )); }

    static int outdent(List arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "outdent", "(Ljava.util.List;)I", arg0)); }

    bool isBlank() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlank", "()Z", )); }

    static String format(String arg0, Object_interface arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "format", "(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;", arg0, arg1)); }

    static String format(Locale arg0, String arg1, Object_interface arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "format", "(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;", arg0, arg1, arg2)); }

    Object resolveConstantDesc(MethodHandles_Lookup arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Object;", arg0)); }

    String resolveConstantDesc(MethodHandles_Lookup arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.String;", arg0)); }

    IntStream codePoints() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "codePoints", "()Ljava.util.stream.IntStream;", )); }

    static String newStringNoRepl(arr_B arg0, Charset arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "newStringNoRepl", "([BLjava.nio.charset.Charset;)Ljava.lang.String;", arg0, arg1)); }

    static int decodeASCII(arr_B arg0, int arg1, arr_C arg2, int arg3, int arg4) { return int(*javaClass->invokeStaticMethod<int>(this->object, "decodeASCII", "([BI[CII)I", arg0, arg1, arg2, arg3, arg4)); }

    bool equalsIgnoreCase(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equalsIgnoreCase", "(Ljava.lang.String;)Z", arg0)); }

    int compareToIgnoreCase(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareToIgnoreCase", "(Ljava.lang.String;)I", arg0)); }

    bool endsWith(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "endsWith", "(Ljava.lang.String;)Z", arg0)); }

    CharSequence subSequence(int arg0, int arg1) { return CharSequence(*javaClass->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava.lang.CharSequence;", arg0, arg1)); }

    String concat(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "concat", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    bool contains(CharSequence arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.CharSequence;)Z", arg0)); }

    String indent(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "indent", "(I)Ljava.lang.String;", arg0)); }

    String stripIndent() { return String(*javaClass->invokeMethod<jobject>(this->object, "stripIndent", "()Ljava.lang.String;", )); }

    String translateEscapes() { return String(*javaClass->invokeMethod<jobject>(this->object, "translateEscapes", "()Ljava.lang.String;", )); }

    IntStream chars() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "chars", "()Ljava.util.stream.IntStream;", )); }

    Object transform(Function arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "transform", "(Ljava.util.function.Function;)Ljava.lang.Object;", arg0)); }

    String formatted(Object_interface arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "formatted", "([Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    static String copyValueOf(arr_C arg0, int arg1, int arg2) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "copyValueOf", "([CII)Ljava.lang.String;", arg0, arg1, arg2)); }

    static String copyValueOf(arr_C arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "copyValueOf", "([C)Ljava.lang.String;", arg0)); }

    String intern() { return String(*javaClass->invokeMethod<jobject>(this->object, "intern", "()Ljava.lang.String;", )); }

    static void checkOffset(int arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "checkOffset", "(II)V", arg0, arg1)); }

    static String valueOfCodePoint(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOfCodePoint", "(I)Ljava.lang.String;", arg0)); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    static String lambda_stripIndent_3(int arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$stripIndent$3", "(ILjava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    static String lambda_indent_2(int arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$indent$2", "(ILjava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    static String lambda_indent_1(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$indent$1", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static String lambda_indent_0(String arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$indent$0", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

};


/**
 * Classpath: java.lang.Double
 * Package name: java.lang
 */
class Double : public Number {
protected:
    const inline static char *className = "java.lang.Double";
public:
    STATICINITIALIZE;

    Double(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    static String toString(double arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(D)Ljava.lang.String;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static int hashCode(double arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashCode", "(D)I", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static double min(double arg0, double arg1) { return double(*javaClass->invokeStaticMethod<double>(this->object, "min", "(DD)D", arg0, arg1)); }

    static double max(double arg0, double arg1) { return double(*javaClass->invokeStaticMethod<double>(this->object, "max", "(DD)D", arg0, arg1)); }

    static long doubleToRawLongBits(double arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "doubleToRawLongBits", "(D)J", arg0)); }

    static long doubleToLongBits(double arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "doubleToLongBits", "(D)J", arg0)); }

    static double longBitsToDouble(long arg0) { return double(*javaClass->invokeStaticMethod<double>(this->object, "longBitsToDouble", "(J)D", arg0)); }

    int compareTo(Double arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Double;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static int compare(double arg0, double arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(DD)I", arg0, arg1)); }

    byte byteValue() { return byte(*javaClass->invokeMethod<byte>(this->object, "byteValue", "()B", )); }

    short shortValue() { return short(*javaClass->invokeMethod<short>(this->object, "shortValue", "()S", )); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    long longValue() { return long(*javaClass->invokeMethod<long>(this->object, "longValue", "()J", )); }

    float floatValue() { return float(*javaClass->invokeMethod<float>(this->object, "floatValue", "()F", )); }

    double doubleValue() { return double(*javaClass->invokeMethod<double>(this->object, "doubleValue", "()D", )); }

    static Double valueOf(String arg0) { return Double(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.Double;", arg0)); }

    static Double valueOf(double arg0) { return Double(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(D)Ljava.lang.Double;", arg0)); }

    static String toHexString(double arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toHexString", "(D)Ljava.lang.String;", arg0)); }

    Object resolveConstantDesc(MethodHandles_Lookup arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Object;", arg0)); }

    Double resolveConstantDesc(MethodHandles_Lookup arg0) { return Double(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Double;", arg0)); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    bool isNaN() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNaN", "()Z", )); }

    static bool isNaN(double arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isNaN", "(D)Z", arg0)); }

    static double sum(double arg0, double arg1) { return double(*javaClass->invokeStaticMethod<double>(this->object, "sum", "(DD)D", arg0, arg1)); }

    bool isInfinite() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInfinite", "()Z", )); }

    static bool isInfinite(double arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isInfinite", "(D)Z", arg0)); }

    static bool isFinite(double arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isFinite", "(D)Z", arg0)); }

    static double parseDouble(String arg0) { return double(*javaClass->invokeStaticMethod<double>(this->object, "parseDouble", "(Ljava.lang.String;)D", arg0)); }

};


/**
 * Classpath: java.io.ObjectInputStream
 * Package name: java.io
 */
class ObjectInputStream : public InputStream {
protected:
    const inline static char *className = "java.io.ObjectInputStream";
public:
    STATICINITIALIZE;

    ObjectInputStream(jobject object) : JavaObject(object) {}

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    static Object cloneArray(Object arg0) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "cloneArray", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Class resolveClass(ObjectStreamClass arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "resolveClass", "(Ljava.io.ObjectStreamClass;)Ljava.lang.Class;", arg0)); }

    void defaultReadObject() { (*javaClass->invokeMethod<void>(this->object, "defaultReadObject", "()V", )); }

    Object readObject() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readObject", "()Ljava.lang.Object;", )); }

    Object readObject(Class arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "readObject", "(Ljava.lang.Class;)Ljava.lang.Object;", arg0)); }

    int read(arr_B arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "read", "([BII)I", arg0, arg1, arg2)); }

    int read() { return int(*javaClass->invokeMethod<int>(this->object, "read", "()I", )); }

    ObjectInputStream_GetField readFields() { return ObjectInputStream_GetField(*javaClass->invokeMethod<jobject>(this->object, "readFields", "()Ljava.io.ObjectInputStream$GetField;", )); }

    static Boolean auditSubclass(Class arg0) { return Boolean(*javaClass->invokeStaticMethod<jobject>(this->object, "auditSubclass", "(Ljava.lang.Class;)Ljava.lang.Boolean;", arg0)); }

    String readLine() { return String(*javaClass->invokeMethod<jobject>(this->object, "readLine", "()Ljava.lang.String;", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    int readInt() { return int(*javaClass->invokeMethod<int>(this->object, "readInt", "()I", )); }

    void checkArray(Class arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "checkArray", "(Ljava.lang.Class;I)V", arg0, arg1)); }

    int available() { return int(*javaClass->invokeMethod<int>(this->object, "available", "()I", )); }

    String readUTF() { return String(*javaClass->invokeMethod<jobject>(this->object, "readUTF", "()Ljava.lang.String;", )); }

    void freeze() { (*javaClass->invokeMethod<void>(this->object, "freeze", "()V", )); }

    int readUnsignedShort() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedShort", "()I", )); }

    Class readClass(bool arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "readClass", "(Z)Ljava.lang.Class;", arg0)); }

    long readLong() { return long(*javaClass->invokeMethod<long>(this->object, "readLong", "()J", )); }

    byte readByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "readByte", "()B", )); }

    char readChar() { return char(*javaClass->invokeMethod<char>(this->object, "readChar", "()C", )); }

    static ClassLoader latestUserDefinedLoader() { return ClassLoader(*javaClass->invokeStaticMethod<jobject>(this->object, "latestUserDefinedLoader", "()Ljava.lang.ClassLoader;", )); }

    short readShort() { return short(*javaClass->invokeMethod<short>(this->object, "readShort", "()S", )); }

    void verifySubclass() { (*javaClass->invokeMethod<void>(this->object, "verifySubclass", "()V", )); }

    void readStreamHeader() { (*javaClass->invokeMethod<void>(this->object, "readStreamHeader", "()V", )); }

    Object readObjectOverride() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readObjectOverride", "()Ljava.lang.Object;", )); }

    Object readObject0(Class arg0, bool arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "readObject0", "(Ljava.lang.Class;Z)Ljava.lang.Object;", arg0, arg1)); }

    void filterCheck(Class arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "filterCheck", "(Ljava.lang.Class;I)V", arg0, arg1)); }

    void handleReset() { (*javaClass->invokeMethod<void>(this->object, "handleReset", "()V", )); }

    Object readNull() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readNull", "()Ljava.lang.Object;", )); }

    Object readHandle(bool arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "readHandle", "(Z)Ljava.lang.Object;", arg0)); }

    ObjectStreamClass readClassDesc(bool arg0) { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "readClassDesc", "(Z)Ljava.io.ObjectStreamClass;", arg0)); }

    Object checkResolve(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "checkResolve", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object readArray(bool arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "readArray", "(Z)Ljava.lang.Object;", arg0)); }

    Enum readEnum(bool arg0) { return Enum(*javaClass->invokeMethod<jobject>(this->object, "readEnum", "(Z)Ljava.lang.Enum;", arg0)); }

    Object readOrdinaryObject(bool arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "readOrdinaryObject", "(Z)Ljava.lang.Object;", arg0)); }

    IOException readFatalException() { return IOException(*javaClass->invokeMethod<jobject>(this->object, "readFatalException", "()Ljava.io.IOException;", )); }

    Object resolveObject(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveObject", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    ObjectStreamClass readProxyDesc(bool arg0) { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "readProxyDesc", "(Z)Ljava.io.ObjectStreamClass;", arg0)); }

    ObjectStreamClass readNonProxyDesc(bool arg0) { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "readNonProxyDesc", "(Z)Ljava.io.ObjectStreamClass;", arg0)); }

    Class resolveProxyClass(String_interface arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "resolveProxyClass", "([Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    void skipCustomData() { (*javaClass->invokeMethod<void>(this->object, "skipCustomData", "()V", )); }

    ObjectStreamClass readClassDescriptor() { return ObjectStreamClass(*javaClass->invokeMethod<jobject>(this->object, "readClassDescriptor", "()Ljava.io.ObjectStreamClass;", )); }

    bool isCustomSubclass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCustomSubclass", "()Z", )); }

    Object readRecord(ObjectStreamClass arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "readRecord", "(Ljava.io.ObjectStreamClass;)Ljava.lang.Object;", arg0)); }

    void readExternalData(Externalizable arg0, ObjectStreamClass arg1) { (*javaClass->invokeMethod<void>(this->object, "readExternalData", "(Ljava.io.Externalizable;Ljava.io.ObjectStreamClass;)V", arg0, arg1)); }

    void readSerialData(Object arg0, ObjectStreamClass arg1) { (*javaClass->invokeMethod<void>(this->object, "readSerialData", "(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V", arg0, arg1)); }

    Object readUnshared() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readUnshared", "()Ljava.lang.Object;", )); }

    void registerValidation(ObjectInputValidation arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "registerValidation", "(Ljava.io.ObjectInputValidation;I)V", arg0, arg1)); }

    bool enableResolveObject(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "enableResolveObject", "(Z)Z", arg0)); }

    ObjectInputFilter getObjectInputFilter() { return ObjectInputFilter(*javaClass->invokeMethod<jobject>(this->object, "getObjectInputFilter", "()Ljava.io.ObjectInputFilter;", )); }

    void setObjectInputFilter(ObjectInputFilter arg0) { (*javaClass->invokeMethod<void>(this->object, "setObjectInputFilter", "(Ljava.io.ObjectInputFilter;)V", arg0)); }

    String readTypeString() { return String(*javaClass->invokeMethod<jobject>(this->object, "readTypeString", "()Ljava.lang.String;", )); }

    float readFloat() { return float(*javaClass->invokeMethod<float>(this->object, "readFloat", "()F", )); }

    void readFully(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "readFully", "([B)V", arg0)); }

    void readFully(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "readFully", "([BII)V", arg0, arg1, arg2)); }

    String readString(bool arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "readString", "(Z)Ljava.lang.String;", arg0)); }

    String readString() { return String(*javaClass->invokeMethod<jobject>(this->object, "readString", "()Ljava.lang.String;", )); }

    int skipBytes(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "skipBytes", "(I)I", arg0)); }

    bool readBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "readBoolean", "()Z", )); }

    int readUnsignedByte() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedByte", "()I", )); }

    double readDouble() { return double(*javaClass->invokeMethod<double>(this->object, "readDouble", "()D", )); }

};


/**
 * Classpath: java.lang.reflect.Field
 * Package name: java.lang.reflect
 */
class Field : public AccessibleObject {
protected:
    const inline static char *className = "java.lang.reflect.Field";
public:
    STATICINITIALIZE;

    Field(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    bool getBoolean(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(Ljava.lang.Object;)Z", arg0)); }

    byte getByte(Object arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(Ljava.lang.Object;)B", arg0)); }

    short getShort(Object arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(Ljava.lang.Object;)S", arg0)); }

    char getChar(Object arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "(Ljava.lang.Object;)C", arg0)); }

    int getInt(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(Ljava.lang.Object;)I", arg0)); }

    long getLong(Object arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(Ljava.lang.Object;)J", arg0)); }

    float getFloat(Object arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(Ljava.lang.Object;)F", arg0)); }

    double getDouble(Object arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(Ljava.lang.Object;)D", arg0)); }

    FieldRepository getGenericInfo() { return FieldRepository(*javaClass->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun.reflect.generics.repository.FieldRepository;", )); }

    GenericsFactory getFactory() { return GenericsFactory(*javaClass->invokeMethod<jobject>(this->object, "getFactory", "()Lsun.reflect.generics.factory.GenericsFactory;", )); }

    Map declaredAnnotations() { return Map(*javaClass->invokeMethod<jobject>(this->object, "declaredAnnotations", "()Ljava.util.Map;", )); }

    String toGenericString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava.lang.String;", )); }

    bool isSynthetic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSynthetic", "()Z", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    void set(Object arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "set", "(Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1)); }

    void setAccessible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }

    void checkAccess(Class arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "checkAccess", "(Ljava.lang.Class;Ljava.lang.Object;)V", arg0, arg1)); }

    void checkCanSetAccessible(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava.lang.Class;)V", arg0)); }

    String toShortString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toShortString", "()Ljava.lang.String;", )); }

    Field getRoot() { return Field(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.lang.reflect.Field;", )); }

    AccessibleObject getRoot() { return AccessibleObject(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.lang.reflect.AccessibleObject;", )); }

    String getGenericSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "getGenericSignature", "()Ljava.lang.String;", )); }

    Type getGenericType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getGenericType", "()Ljava.lang.reflect.Type;", )); }

    Class getType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getType", "()Ljava.lang.Class;", )); }

    FieldAccessor getFieldAccessor(Object arg0) { return FieldAccessor(*javaClass->invokeMethod<jobject>(this->object, "getFieldAccessor", "(Ljava.lang.Object;)Ljdk.internal.reflect.FieldAccessor;", arg0)); }

    FieldAccessor getFieldAccessor(bool arg0) { return FieldAccessor(*javaClass->invokeMethod<jobject>(this->object, "getFieldAccessor", "(Z)Ljdk.internal.reflect.FieldAccessor;", arg0)); }

    void setBoolean(Object arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setBoolean", "(Ljava.lang.Object;Z)V", arg0, arg1)); }

    void setByte(Object arg0, byte arg1) { (*javaClass->invokeMethod<void>(this->object, "setByte", "(Ljava.lang.Object;B)V", arg0, arg1)); }

    void setChar(Object arg0, char arg1) { (*javaClass->invokeMethod<void>(this->object, "setChar", "(Ljava.lang.Object;C)V", arg0, arg1)); }

    void setShort(Object arg0, short arg1) { (*javaClass->invokeMethod<void>(this->object, "setShort", "(Ljava.lang.Object;S)V", arg0, arg1)); }

    void setInt(Object arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setInt", "(Ljava.lang.Object;I)V", arg0, arg1)); }

    void setLong(Object arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "setLong", "(Ljava.lang.Object;J)V", arg0, arg1)); }

    void setFloat(Object arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setFloat", "(Ljava.lang.Object;F)V", arg0, arg1)); }

    void setDouble(Object arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setDouble", "(Ljava.lang.Object;D)V", arg0, arg1)); }

    FieldAccessor acquireFieldAccessor(bool arg0) { return FieldAccessor(*javaClass->invokeMethod<jobject>(this->object, "acquireFieldAccessor", "(Z)Ljdk.internal.reflect.FieldAccessor;", arg0)); }

    void setFieldAccessor(FieldAccessor arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setFieldAccessor", "(Ljdk.internal.reflect.FieldAccessor;Z)V", arg0, arg1)); }

    Field copy() { return Field(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Ljava.lang.reflect.Field;", )); }

    bool isEnumConstant() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnumConstant", "()Z", )); }

    bool isTrustedFinal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTrustedFinal", "()Z", )); }

    AnnotatedType getAnnotatedType() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedType", "()Ljava.lang.reflect.AnnotatedType;", )); }

};


/**
 * Classpath: sun.reflect.generics.repository.FieldRepository
 * Package name: sun.reflect.generics.repository
 */
class FieldRepository : public AbstractRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.FieldRepository";
public:
    STATICINITIALIZE;

    FieldRepository(jobject object) : JavaObject(object) {}

    static FieldRepository make(String arg0, GenericsFactory arg1) { return FieldRepository(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.FieldRepository;", arg0, arg1)); }

    Type getGenericType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getGenericType", "()Ljava.lang.reflect.Type;", )); }

    Type computeGenericType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "computeGenericType", "()Ljava.lang.reflect.Type;", )); }

    TypeSignature parse(String arg0) { return TypeSignature(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Lsun.reflect.generics.tree.TypeSignature;", arg0)); }

    Tree parse(String arg0) { return Tree(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Lsun.reflect.generics.tree.Tree;", arg0)); }

};


/**
 * Classpath: java.lang.StringBuilder
 * Package name: java.lang
 */
class StringBuilder : public AbstractStringBuilder {
protected:
    const inline static char *className = "java.lang.StringBuilder";
public:
    STATICINITIALIZE;

    StringBuilder(jobject object) : JavaObject(object) {}

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    AbstractStringBuilder append(StringBuffer arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.StringBuffer;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(CharSequence arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(CharSequence arg0, int arg1, int arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    AbstractStringBuilder append(arr_C arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([C)Ljava.lang.AbstractStringBuilder;", arg0)); }

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    AbstractStringBuilder append(Object arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.Object;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(String arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(long arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(J)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(float arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(F)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(double arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(D)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(char arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(bool arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Z)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(arr_C arg0, int arg1, int arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([CII)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    StringBuilder append(CharSequence arg0, int arg1, int arg2) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.StringBuilder;", arg0, arg1, arg2)); }

    StringBuilder append(arr_C arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([C)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(arr_C arg0, int arg1, int arg2) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([CII)Ljava.lang.StringBuilder;", arg0, arg1, arg2)); }

    StringBuilder append(bool arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Z)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(CharSequence arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(StringBuffer arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.StringBuffer;)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(String arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.String;)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(float arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(F)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(double arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(D)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(Object arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.Object;)Ljava.lang.StringBuilder;", arg0)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

    StringBuilder append(char arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(int arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(I)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder append(long arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(J)Ljava.lang.StringBuilder;", arg0)); }

    void getChars(int arg0, int arg1, arr_C arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "getChars", "(II[CI)V", arg0, arg1, arg2, arg3)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(StringBuilder arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.StringBuilder;)I", arg0)); }

    int indexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;)I", arg0)); }

    int indexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, float arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, float arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava.lang.StringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, long arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava.lang.StringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, int arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(II)Ljava.lang.StringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, String arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, Object arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.Object;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, arr_C arg1, int arg2, int arg3) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }

    StringBuilder insert(int arg0, arr_C arg1, int arg2, int arg3) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava.lang.StringBuilder;", arg0, arg1, arg2, arg3)); }

    StringBuilder insert(int arg0, CharSequence arg1, int arg2, int arg3) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;II)Ljava.lang.StringBuilder;", arg0, arg1, arg2, arg3)); }

    StringBuilder insert(int arg0, CharSequence arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;)Ljava.lang.StringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, arr_C arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava.lang.StringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, String arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.String;)Ljava.lang.StringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, bool arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava.lang.StringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, char arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava.lang.StringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, Object arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.Object;)Ljava.lang.StringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, double arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, CharSequence arg1, int arg2, int arg3) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }

    AbstractStringBuilder insert(int arg0, bool arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, char arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, int arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(II)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, long arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, arr_C arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, CharSequence arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    StringBuilder insert(int arg0, double arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava.lang.StringBuilder;", arg0, arg1)); }

    char charAt(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "charAt", "(I)C", arg0)); }

    int codePointAt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointAt", "(I)I", arg0)); }

    int codePointBefore(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointBefore", "(I)I", arg0)); }

    int codePointCount(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "codePointCount", "(II)I", arg0, arg1)); }

    int offsetByCodePoints(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "offsetByCodePoints", "(II)I", arg0, arg1)); }

    int lastIndexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    int lastIndexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;)I", arg0)); }

    String substring(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(II)Ljava.lang.String;", arg0, arg1)); }

    String substring(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(I)Ljava.lang.String;", arg0)); }

    AbstractStringBuilder replace(int arg0, int arg1, String arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "replace", "(IILjava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    StringBuilder replace(int arg0, int arg1, String arg2) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "replace", "(IILjava.lang.String;)Ljava.lang.StringBuilder;", arg0, arg1, arg2)); }

    IntStream codePoints() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "codePoints", "()Ljava.util.stream.IntStream;", )); }

    CharSequence subSequence(int arg0, int arg1) { return CharSequence(*javaClass->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava.lang.CharSequence;", arg0, arg1)); }

    IntStream chars() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "chars", "()Ljava.util.stream.IntStream;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    AbstractStringBuilder delete(int arg0, int arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "delete", "(II)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    StringBuilder delete(int arg0, int arg1) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "delete", "(II)Ljava.lang.StringBuilder;", arg0, arg1)); }

    void setLength(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLength", "(I)V", arg0)); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    void setCharAt(int arg0, char arg1) { (*javaClass->invokeMethod<void>(this->object, "setCharAt", "(IC)V", arg0, arg1)); }

    StringBuilder appendCodePoint(int arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava.lang.StringBuilder;", arg0)); }

    AbstractStringBuilder appendCodePoint(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder deleteCharAt(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    StringBuilder deleteCharAt(int arg0) { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava.lang.StringBuilder;", arg0)); }

    StringBuilder reverse() { return StringBuilder(*javaClass->invokeMethod<jobject>(this->object, "reverse", "()Ljava.lang.StringBuilder;", )); }

    AbstractStringBuilder reverse() { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "reverse", "()Ljava.lang.AbstractStringBuilder;", )); }

};


/**
 * Classpath: java.lang.StringBuffer
 * Package name: java.lang
 */
class StringBuffer : public AbstractStringBuilder {
protected:
    const inline static char *className = "java.lang.StringBuffer";
public:
    STATICINITIALIZE;

    StringBuffer(jobject object) : JavaObject(object) {}

    int length() { return int(*javaClass->invokeMethod<int>(this->object, "length", "()I", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    AbstractStringBuilder append(arr_C arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([C)Ljava.lang.AbstractStringBuilder;", arg0)); }

    StringBuffer append(int arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(I)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(long arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(J)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(float arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(F)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(arr_C arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "([C)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(arr_C arg0, int arg1, int arg2) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "([CII)Ljava.lang.StringBuffer;", arg0, arg1, arg2)); }

    StringBuffer append(bool arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Z)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(char arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.StringBuffer;", arg0)); }

    AbstractStringBuilder append(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(long arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(J)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(float arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(F)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(double arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(D)Ljava.lang.AbstractStringBuilder;", arg0)); }

    StringBuffer append(double arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(D)Ljava.lang.StringBuffer;", arg0)); }

    AbstractStringBuilder append(arr_C arg0, int arg1, int arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "([CII)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    AbstractStringBuilder append(bool arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Z)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(char arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(String arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(StringBuffer arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.StringBuffer;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(AbstractStringBuilder arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.AbstractStringBuilder;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    AbstractStringBuilder append(CharSequence arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

    AbstractStringBuilder append(Object arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.Object;)Ljava.lang.AbstractStringBuilder;", arg0)); }

    StringBuffer append(String arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.String;)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(StringBuffer arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.StringBuffer;)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(AbstractStringBuilder arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.AbstractStringBuilder;)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer append(CharSequence arg0, int arg1, int arg2) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.StringBuffer;", arg0, arg1, arg2)); }

    StringBuffer append(Object arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.Object;)Ljava.lang.StringBuffer;", arg0)); }

    AbstractStringBuilder append(CharSequence arg0, int arg1, int arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    StringBuffer append(CharSequence arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.StringBuffer;", arg0)); }

    void getChars(int arg0, int arg1, arr_C arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "getChars", "(II[CI)V", arg0, arg1, arg2, arg3)); }

    int compareTo(StringBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.StringBuffer;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int indexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;)I", arg0)); }

    int indexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, int arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(II)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, char arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, bool arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, CharSequence arg1, int arg2, int arg3) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;II)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }

    AbstractStringBuilder insert(int arg0, long arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, float arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, double arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, Object arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.Object;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, arr_C arg1, int arg2, int arg3) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2, arg3)); }

    StringBuffer insert(int arg0, arr_C arg1, int arg2, int arg3) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[CII)Ljava.lang.StringBuffer;", arg0, arg1, arg2, arg3)); }

    StringBuffer insert(int arg0, float arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IF)Ljava.lang.StringBuffer;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, String arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, arr_C arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    AbstractStringBuilder insert(int arg0, CharSequence arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    StringBuffer insert(int arg0, CharSequence arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, double arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ID)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, arr_C arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(I[C)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, String arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.String;)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, bool arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IZ)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, char arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IC)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, int arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(II)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, long arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(IJ)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, Object arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.Object;)Ljava.lang.StringBuffer;", arg0, arg1)); }

    StringBuffer insert(int arg0, CharSequence arg1, int arg2, int arg3) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "insert", "(ILjava.lang.CharSequence;II)Ljava.lang.StringBuffer;", arg0, arg1, arg2, arg3)); }

    char charAt(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "charAt", "(I)C", arg0)); }

    int codePointAt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointAt", "(I)I", arg0)); }

    int codePointBefore(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "codePointBefore", "(I)I", arg0)); }

    int codePointCount(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "codePointCount", "(II)I", arg0, arg1)); }

    int offsetByCodePoints(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "offsetByCodePoints", "(II)I", arg0, arg1)); }

    void getBytes(arr_B arg0, int arg1, byte arg2) { (*javaClass->invokeMethod<void>(this->object, "getBytes", "([BIB)V", arg0, arg1, arg2)); }

    int lastIndexOf(String arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;I)I", arg0, arg1)); }

    int lastIndexOf(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.String;)I", arg0)); }

    String substring(int arg0, int arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(II)Ljava.lang.String;", arg0, arg1)); }

    String substring(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "substring", "(I)Ljava.lang.String;", arg0)); }

    AbstractStringBuilder replace(int arg0, int arg1, String arg2) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "replace", "(IILjava.lang.String;)Ljava.lang.AbstractStringBuilder;", arg0, arg1, arg2)); }

    StringBuffer replace(int arg0, int arg1, String arg2) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "replace", "(IILjava.lang.String;)Ljava.lang.StringBuffer;", arg0, arg1, arg2)); }

    IntStream codePoints() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "codePoints", "()Ljava.util.stream.IntStream;", )); }

    CharSequence subSequence(int arg0, int arg1) { return CharSequence(*javaClass->invokeMethod<jobject>(this->object, "subSequence", "(II)Ljava.lang.CharSequence;", arg0, arg1)); }

    IntStream chars() { return IntStream(*javaClass->invokeMethod<jobject>(this->object, "chars", "()Ljava.util.stream.IntStream;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    AbstractStringBuilder delete(int arg0, int arg1) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "delete", "(II)Ljava.lang.AbstractStringBuilder;", arg0, arg1)); }

    StringBuffer delete(int arg0, int arg1) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "delete", "(II)Ljava.lang.StringBuffer;", arg0, arg1)); }

    void setLength(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setLength", "(I)V", arg0)); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    void setCharAt(int arg0, char arg1) { (*javaClass->invokeMethod<void>(this->object, "setCharAt", "(IC)V", arg0, arg1)); }

    AbstractStringBuilder appendCodePoint(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    StringBuffer appendCodePoint(int arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "appendCodePoint", "(I)Ljava.lang.StringBuffer;", arg0)); }

    StringBuffer deleteCharAt(int arg0) { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava.lang.StringBuffer;", arg0)); }

    AbstractStringBuilder deleteCharAt(int arg0) { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "deleteCharAt", "(I)Ljava.lang.AbstractStringBuilder;", arg0)); }

    StringBuffer reverse() { return StringBuffer(*javaClass->invokeMethod<jobject>(this->object, "reverse", "()Ljava.lang.StringBuffer;", )); }

    AbstractStringBuilder reverse() { return AbstractStringBuilder(*javaClass->invokeMethod<jobject>(this->object, "reverse", "()Ljava.lang.AbstractStringBuilder;", )); }

};


/**
 * Classpath: java.io.ObjectOutputStream
 * Package name: java.io
 */
class ObjectOutputStream : public OutputStream {
protected:
    const inline static char *className = "java.io.ObjectOutputStream";
public:
    STATICINITIALIZE;

    ObjectOutputStream(jobject object) : JavaObject(object) {}

    void writeByte(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeByte", "(I)V", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    void write(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void write(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }

    void defaultWriteObject() { (*javaClass->invokeMethod<void>(this->object, "defaultWriteObject", "()V", )); }

    void writeObject(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.lang.Object;)V", arg0)); }

    ObjectOutputStream_PutField putFields() { return ObjectOutputStream_PutField(*javaClass->invokeMethod<jobject>(this->object, "putFields", "()Ljava.io.ObjectOutputStream$PutField;", )); }

    void writeFields() { (*javaClass->invokeMethod<void>(this->object, "writeFields", "()V", )); }

    static Boolean auditSubclass(Class arg0) { return Boolean(*javaClass->invokeStaticMethod<jobject>(this->object, "auditSubclass", "(Ljava.lang.Class;)Ljava.lang.Boolean;", arg0)); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void writeInt(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeInt", "(I)V", arg0)); }

    void reset() { (*javaClass->invokeMethod<void>(this->object, "reset", "()V", )); }

    void writeUTF(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeUTF", "(Ljava.lang.String;)V", arg0)); }

    void writeChar(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeChar", "(I)V", arg0)); }

    void writeBytes(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeBytes", "(Ljava.lang.String;)V", arg0)); }

    void verifySubclass() { (*javaClass->invokeMethod<void>(this->object, "verifySubclass", "()V", )); }

    bool isCustomSubclass() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCustomSubclass", "()Z", )); }

    void writeStreamHeader() { (*javaClass->invokeMethod<void>(this->object, "writeStreamHeader", "()V", )); }

    void writeObjectOverride(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObjectOverride", "(Ljava.lang.Object;)V", arg0)); }

    void writeObject0(Object arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "writeObject0", "(Ljava.lang.Object;Z)V", arg0, arg1)); }

    void writeFatalException(IOException arg0) { (*javaClass->invokeMethod<void>(this->object, "writeFatalException", "(Ljava.io.IOException;)V", arg0)); }

    void defaultWriteFields(Object arg0, ObjectStreamClass arg1) { (*javaClass->invokeMethod<void>(this->object, "defaultWriteFields", "(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V", arg0, arg1)); }

    void drain() { (*javaClass->invokeMethod<void>(this->object, "drain", "()V", )); }

    void writeNull() { (*javaClass->invokeMethod<void>(this->object, "writeNull", "()V", )); }

    void writeHandle(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeHandle", "(I)V", arg0)); }

    void writeClass(Class arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "writeClass", "(Ljava.lang.Class;Z)V", arg0, arg1)); }

    void writeClassDesc(ObjectStreamClass arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "writeClassDesc", "(Ljava.io.ObjectStreamClass;Z)V", arg0, arg1)); }

    Object replaceObject(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "replaceObject", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    void writeArray(Object arg0, ObjectStreamClass arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "writeArray", "(Ljava.lang.Object;Ljava.io.ObjectStreamClass;Z)V", arg0, arg1, arg2)); }

    void writeEnum(Enum arg0, ObjectStreamClass arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "writeEnum", "(Ljava.lang.Enum;Ljava.io.ObjectStreamClass;Z)V", arg0, arg1, arg2)); }

    void writeOrdinaryObject(Object arg0, ObjectStreamClass arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "writeOrdinaryObject", "(Ljava.lang.Object;Ljava.io.ObjectStreamClass;Z)V", arg0, arg1, arg2)); }

    void writeProxyDesc(ObjectStreamClass arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "writeProxyDesc", "(Ljava.io.ObjectStreamClass;Z)V", arg0, arg1)); }

    void writeNonProxyDesc(ObjectStreamClass arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "writeNonProxyDesc", "(Ljava.io.ObjectStreamClass;Z)V", arg0, arg1)); }

    void annotateProxyClass(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "annotateProxyClass", "(Ljava.lang.Class;)V", arg0)); }

    void writeClassDescriptor(ObjectStreamClass arg0) { (*javaClass->invokeMethod<void>(this->object, "writeClassDescriptor", "(Ljava.io.ObjectStreamClass;)V", arg0)); }

    void annotateClass(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "annotateClass", "(Ljava.lang.Class;)V", arg0)); }

    void writeRecordData(Object arg0, ObjectStreamClass arg1) { (*javaClass->invokeMethod<void>(this->object, "writeRecordData", "(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V", arg0, arg1)); }

    void writeExternalData(Externalizable arg0) { (*javaClass->invokeMethod<void>(this->object, "writeExternalData", "(Ljava.io.Externalizable;)V", arg0)); }

    void writeSerialData(Object arg0, ObjectStreamClass arg1) { (*javaClass->invokeMethod<void>(this->object, "writeSerialData", "(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V", arg0, arg1)); }

    void useProtocolVersion(int arg0) { (*javaClass->invokeMethod<void>(this->object, "useProtocolVersion", "(I)V", arg0)); }

    void writeUnshared(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "writeUnshared", "(Ljava.lang.Object;)V", arg0)); }

    bool enableReplaceObject(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "enableReplaceObject", "(Z)Z", arg0)); }

    int getProtocolVersion() { return int(*javaClass->invokeMethod<int>(this->object, "getProtocolVersion", "()I", )); }

    void writeTypeString(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeTypeString", "(Ljava.lang.String;)V", arg0)); }

    void writeFloat(float arg0) { (*javaClass->invokeMethod<void>(this->object, "writeFloat", "(F)V", arg0)); }

    void writeString(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "writeString", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void writeLong(long arg0) { (*javaClass->invokeMethod<void>(this->object, "writeLong", "(J)V", arg0)); }

    void writeBoolean(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "writeBoolean", "(Z)V", arg0)); }

    void writeShort(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeShort", "(I)V", arg0)); }

    void writeDouble(double arg0) { (*javaClass->invokeMethod<void>(this->object, "writeDouble", "(D)V", arg0)); }

    void writeChars(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeChars", "(Ljava.lang.String;)V", arg0)); }

};


/**
 * Classpath: java.io.IOException
 * Package name: java.io
 */
class IOException : public Exception {
protected:
    const inline static char *className = "java.io.IOException";
public:
    STATICINITIALIZE;

    IOException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.io.PrintStream
 * Package name: java.io
 */
class PrintStream : public FilterOutputStream {
protected:
    const inline static char *className = "java.io.PrintStream";
public:
    STATICINITIALIZE;

    PrintStream(jobject object) : JavaObject(object) {}

    void println(String arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Ljava.lang.String;)V", arg0)); }

    void println(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Ljava.lang.Object;)V", arg0)); }

    void println(float arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(F)V", arg0)); }

    void println(double arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(D)V", arg0)); }

    void println(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "([C)V", arg0)); }

    void println(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Z)V", arg0)); }

    void println() { (*javaClass->invokeMethod<void>(this->object, "println", "()V", )); }

    void println(char arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(C)V", arg0)); }

    void println(int arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(I)V", arg0)); }

    void println(long arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(J)V", arg0)); }

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

    PrintStream append(CharSequence arg0) { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.io.PrintStream;", arg0)); }

    PrintStream append(CharSequence arg0, int arg1, int arg2) { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.io.PrintStream;", arg0, arg1, arg2)); }

    PrintStream append(char arg0) { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.io.PrintStream;", arg0)); }

    static Object requireNonNull(Object arg0, String arg1) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "requireNonNull", "(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;", arg0, arg1)); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    PrintStream format(String arg0, Object_interface arg1) { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;", arg0, arg1)); }

    PrintStream format(Locale arg0, String arg1, Object_interface arg2) { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;", arg0, arg1, arg2)); }

    PrintStream printf(Locale arg0, String arg1, Object_interface arg2) { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "printf", "(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;", arg0, arg1, arg2)); }

    PrintStream printf(String arg0, Object_interface arg1) { return PrintStream(*javaClass->invokeMethod<jobject>(this->object, "printf", "(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;", arg0, arg1)); }

    void write(arr_B arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([BII)V", arg0, arg1, arg2)); }

    void write(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([C)V", arg0)); }

    void write(String arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.lang.String;)V", arg0)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void write(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([B)V", arg0)); }

    void print(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Z)V", arg0)); }

    void print(String arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.lang.String;)V", arg0)); }

    void print(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "([C)V", arg0)); }

    void print(long arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(J)V", arg0)); }

    void print(double arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(D)V", arg0)); }

    void print(float arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(F)V", arg0)); }

    void print(char arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(C)V", arg0)); }

    void print(int arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(I)V", arg0)); }

    void print(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.lang.Object;)V", arg0)); }

    void newLine() { (*javaClass->invokeMethod<void>(this->object, "newLine", "()V", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    void writeBytes(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "writeBytes", "([B)V", arg0)); }

    static Charset toCharset(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "toCharset", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    void ensureOpen() { (*javaClass->invokeMethod<void>(this->object, "ensureOpen", "()V", )); }

    bool checkError() { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkError", "()Z", )); }

    void writeln(String arg0) { (*javaClass->invokeMethod<void>(this->object, "writeln", "(Ljava.lang.String;)V", arg0)); }

    void writeln(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "writeln", "([C)V", arg0)); }

    void setError() { (*javaClass->invokeMethod<void>(this->object, "setError", "()V", )); }

    void clearError() { (*javaClass->invokeMethod<void>(this->object, "clearError", "()V", )); }

};


/**
 * Classpath: java.util.Locale$Category
 * Enclosing class: java.util.Locale
 * Package name: java.util
 */
class Locale_Category : public Enum {
protected:
    const inline static char *className = "java.util.Locale$Category";
public:
    STATICINITIALIZE;

    Locale_Category(jobject object) : JavaObject(object) {}

    static Locale_Category valueOf(String arg0) { return Locale_Category(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.util.Locale$Category;", arg0)); }

};


/**
 * Classpath: java.lang.Enum$EnumDesc
 * Enclosing class: java.lang.Enum
 * Package name: java.lang
 */
class Enum_EnumDesc : public DynamicConstantDesc {
protected:
    const inline static char *className = "java.lang.Enum$EnumDesc";
public:
    STATICINITIALIZE;

    Enum_EnumDesc(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static Enum_EnumDesc of(ClassDesc arg0, String arg1) { return Enum_EnumDesc(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.constant.ClassDesc;Ljava.lang.String;)Ljava.lang.Enum$EnumDesc;", arg0, arg1)); }

    Object resolveConstantDesc(MethodHandles_Lookup arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Object;", arg0)); }

    Enum resolveConstantDesc(MethodHandles_Lookup arg0) { return Enum(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Enum;", arg0)); }

};


/**
 * Classpath: java.nio.ByteBuffer
 * Package name: java.nio
 */
class ByteBuffer : public Buffer {
protected:
    const inline static char *className = "java.nio.ByteBuffer";
public:
    STATICINITIALIZE;

    ByteBuffer(jobject object) : JavaObject(object) {}

    Object base() { return Object(*javaClass->invokeMethod<jobject>(this->object, "base", "()Ljava.lang.Object;", )); }

    ByteBuffer get(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[BII)Ljava.nio.ByteBuffer;", arg0, arg1, arg2, arg3)); }

    byte get(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "get", "(I)B", arg0)); }

    ByteBuffer get(arr_B arg0, int arg1, int arg2) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([BII)Ljava.nio.ByteBuffer;", arg0, arg1, arg2)); }

    byte get() { return byte(*javaClass->invokeMethod<byte>(this->object, "get", "()B", )); }

    ByteBuffer get(int arg0, arr_B arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "(I[B)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer get(arr_B arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "get", "([B)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer put(ByteBuffer arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.nio.ByteBuffer;)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer put(int arg0, byte arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(IB)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer put(int arg0, ByteBuffer arg1, int arg2, int arg3) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(ILjava.nio.ByteBuffer;II)Ljava.nio.ByteBuffer;", arg0, arg1, arg2, arg3)); }

    ByteBuffer put(arr_B arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([B)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer put(int arg0, arr_B arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[B)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer put(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(I[BII)Ljava.nio.ByteBuffer;", arg0, arg1, arg2, arg3)); }

    ByteBuffer put(byte arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "(B)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer put(arr_B arg0, int arg1, int arg2) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "put", "([BII)Ljava.nio.ByteBuffer;", arg0, arg1, arg2)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    int compareTo(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.nio.ByteBuffer;)I", arg0)); }

    short getShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }

    short getShort() { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "()S", )); }

    ByteBuffer putShort(short arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putShort", "(S)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer putShort(int arg0, short arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putShort", "(IS)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    char getChar() { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "()C", )); }

    char getChar(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }

    ByteBuffer putChar(int arg0, char arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putChar", "(IC)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer putChar(char arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putChar", "(C)Ljava.nio.ByteBuffer;", arg0)); }

    int getInt() { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "()I", )); }

    int getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }

    ByteBuffer putInt(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putInt", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer putInt(int arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putInt", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    long getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }

    long getLong() { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "()J", )); }

    ByteBuffer putLong(int arg0, long arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putLong", "(IJ)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer putLong(long arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putLong", "(J)Ljava.nio.ByteBuffer;", arg0)); }

    float getFloat(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }

    float getFloat() { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "()F", )); }

    ByteBuffer putFloat(float arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putFloat", "(F)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer putFloat(int arg0, float arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putFloat", "(IF)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    double getDouble() { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "()D", )); }

    double getDouble(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }

    ByteBuffer putDouble(int arg0, double arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putDouble", "(ID)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer putDouble(double arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putDouble", "(D)Ljava.nio.ByteBuffer;", arg0)); }

    static int compare(byte arg0, byte arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(BB)I", arg0, arg1)); }

    ByteBuffer clear() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.ByteBuffer;", )); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    static ByteBuffer wrap(arr_B arg0) { return ByteBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([B)Ljava.nio.ByteBuffer;", arg0)); }

    static ByteBuffer wrap(arr_B arg0, int arg1, int arg2) { return ByteBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "wrap", "([BII)Ljava.nio.ByteBuffer;", arg0, arg1, arg2)); }

    ByteBuffer position(int arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    ByteBuffer limit(int arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    Object array() { return Object(*javaClass->invokeMethod<jobject>(this->object, "array", "()Ljava.lang.Object;", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    ByteBuffer mark() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuffer reset() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.ByteBuffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    ByteBuffer flip() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.ByteBuffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    ByteBuffer rewind() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuffer slice() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuffer slice(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    ByteBuffer duplicate() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.ByteBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    ByteBuffer order(ByteOrder arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "order", "(Ljava.nio.ByteOrder;)Ljava.nio.ByteBuffer;", arg0)); }

    int mismatch(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "mismatch", "(Ljava.nio.ByteBuffer;)I", arg0)); }

    static ByteBuffer allocate(int arg0) { return ByteBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocate", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer getArray(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "getArray", "(I[BII)Ljava.nio.ByteBuffer;", arg0, arg1, arg2, arg3)); }

    void putBuffer(int arg0, ByteBuffer arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "putBuffer", "(ILjava.nio.ByteBuffer;II)V", arg0, arg1, arg2, arg3)); }

    ByteBuffer putArray(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "putArray", "(I[BII)Ljava.nio.ByteBuffer;", arg0, arg1, arg2, arg3)); }

    int alignmentOffset(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "alignmentOffset", "(II)I", arg0, arg1)); }

    static ByteBuffer allocateDirect(int arg0) { return ByteBuffer(*javaClass->invokeStaticMethod<jobject>(this->object, "allocateDirect", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    ByteBuffer asReadOnlyBuffer() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "asReadOnlyBuffer", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuffer compact() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuffer alignedSlice(int arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "alignedSlice", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    CharBuffer asCharBuffer() { return CharBuffer(*javaClass->invokeMethod<jobject>(this->object, "asCharBuffer", "()Ljava.nio.CharBuffer;", )); }

    ShortBuffer asShortBuffer() { return ShortBuffer(*javaClass->invokeMethod<jobject>(this->object, "asShortBuffer", "()Ljava.nio.ShortBuffer;", )); }

    IntBuffer asIntBuffer() { return IntBuffer(*javaClass->invokeMethod<jobject>(this->object, "asIntBuffer", "()Ljava.nio.IntBuffer;", )); }

    LongBuffer asLongBuffer() { return LongBuffer(*javaClass->invokeMethod<jobject>(this->object, "asLongBuffer", "()Ljava.nio.LongBuffer;", )); }

    FloatBuffer asFloatBuffer() { return FloatBuffer(*javaClass->invokeMethod<jobject>(this->object, "asFloatBuffer", "()Ljava.nio.FloatBuffer;", )); }

    DoubleBuffer asDoubleBuffer() { return DoubleBuffer(*javaClass->invokeMethod<jobject>(this->object, "asDoubleBuffer", "()Ljava.nio.DoubleBuffer;", )); }

};


/**
 * Classpath: java.lang.RuntimeException
 * Package name: java.lang
 */
class RuntimeException : public Exception {
protected:
    const inline static char *className = "java.lang.RuntimeException";
public:
    STATICINITIALIZE;

    RuntimeException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.LayerInstantiationException
 * Package name: java.lang
 */
class LayerInstantiationException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.LayerInstantiationException";
public:
    STATICINITIALIZE;

    LayerInstantiationException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: jdk.internal.loader.Loader
 * Package name: jdk.internal.loader
 */
class Loader : public SecureClassLoader {
protected:
    const inline static char *className = "jdk.internal.loader.Loader";
public:
    STATICINITIALIZE;

    Loader(jobject object) : JavaObject(object) {}

    Class loadClass(String arg0, bool arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "loadClass", "(Ljava.lang.String;Z)Ljava.lang.Class;", arg0, arg1)); }

    String packageName(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "packageName", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    URL findResource(String arg0, String arg1) { return URL(*javaClass->invokeMethod<jobject>(this->object, "findResource", "(Ljava.lang.String;Ljava.lang.String;)Ljava.net.URL;", arg0, arg1)); }

    URL findResource(String arg0) { return URL(*javaClass->invokeMethod<jobject>(this->object, "findResource", "(Ljava.lang.String;)Ljava.net.URL;", arg0)); }

    URL getResource(String arg0) { return URL(*javaClass->invokeMethod<jobject>(this->object, "getResource", "(Ljava.lang.String;)Ljava.net.URL;", arg0)); }

    bool isOpen(ModuleReference arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpen", "(Ljava.lang.module.ModuleReference;Ljava.lang.String;)Z", arg0, arg1)); }

    Class findClass(String arg0) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findClass", "(Ljava.lang.String;)Ljava.lang.Class;", arg0)); }

    Class findClass(String arg0, String arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findClass", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1)); }

    Class defineClass(String arg0, Loader_LoadedModule arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "defineClass", "(Ljava.lang.String;Ljdk.internal.loader.Loader$LoadedModule;)Ljava.lang.Class;", arg0, arg1)); }

    Enumeration getResources(String arg0) { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getResources", "(Ljava.lang.String;)Ljava.util.Enumeration;", arg0)); }

    Enumeration findResources(String arg0) { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "findResources", "(Ljava.lang.String;)Ljava.util.Enumeration;", arg0)); }

    PermissionCollection getPermissions(CodeSource arg0) { return PermissionCollection(*javaClass->invokeMethod<jobject>(this->object, "getPermissions", "(Ljava.security.CodeSource;)Ljava.security.PermissionCollection;", arg0)); }

    Loader_LoadedModule findLoadedModule(String arg0) { return Loader_LoadedModule(*javaClass->invokeMethod<jobject>(this->object, "findLoadedModule", "(Ljava.lang.String;)Ljdk.internal.loader.Loader$LoadedModule;", arg0)); }

    ModuleReader moduleReaderFor(ModuleReference arg0) { return ModuleReader(*javaClass->invokeMethod<jobject>(this->object, "moduleReaderFor", "(Ljava.lang.module.ModuleReference;)Ljava.lang.module.ModuleReader;", arg0)); }

    Class findClassInModuleOrNull(Loader_LoadedModule arg0, String arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findClassInModuleOrNull", "(Ljdk.internal.loader.Loader$LoadedModule;Ljava.lang.String;)Ljava.lang.Class;", arg0, arg1)); }

    static void lambda_new_0(Map arg0, Loader_LoadedModule arg1, String arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "lambda$new$0", "(Ljava.util.Map;Ljdk.internal.loader.Loader$LoadedModule;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    void remotePackage(String arg0, ClassLoader arg1) { (*javaClass->invokeMethod<void>(this->object, "remotePackage", "(Ljava.lang.String;Ljava.lang.ClassLoader;)V", arg0, arg1)); }

    List findResourcesAsList(String arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "findResourcesAsList", "(Ljava.lang.String;)Ljava.util.List;", arg0)); }

    ModuleReader createModuleReader(ModuleReference arg0) { return ModuleReader(*javaClass->invokeMethod<jobject>(this->object, "createModuleReader", "(Ljava.lang.module.ModuleReference;)Ljava.lang.module.ModuleReader;", arg0)); }

    Optional findModuleLayer(ModuleLayer arg0, Configuration arg1) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "findModuleLayer", "(Ljava.lang.ModuleLayer;Ljava.lang.module.Configuration;)Ljava.util.Optional;", arg0, arg1)); }

    ModuleReader lambda_moduleReaderFor_7(ModuleReference arg0, ModuleReference arg1) { return ModuleReader(*javaClass->invokeMethod<jobject>(this->object, "lambda$moduleReaderFor$7", "(Ljava.lang.module.ModuleReference;Ljava.lang.module.ModuleReference;)Ljava.lang.module.ModuleReader;", arg0, arg1)); }

    Class lambda_findClassInModuleOrNull_6(String arg0, Loader_LoadedModule arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "lambda$findClassInModuleOrNull$6", "(Ljava.lang.String;Ljdk.internal.loader.Loader$LoadedModule;)Ljava.lang.Class;", arg0, arg1)); }

    static bool lambda_findModuleLayer_5(Configuration arg0, ModuleLayer arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "lambda$findModuleLayer$5", "(Ljava.lang.module.Configuration;Ljava.lang.ModuleLayer;)Z", arg0, arg1)); }

    void lambda_initRemotePackageMap_4(ClassLoader arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "lambda$initRemotePackageMap$4", "(Ljava.lang.ClassLoader;Ljava.lang.String;)V", arg0, arg1)); }

    static InternalError lambda_initRemotePackageMap_3() { return InternalError(*javaClass->invokeStaticMethod<jobject>(this->object, "lambda$initRemotePackageMap$3", "()Ljava.lang.InternalError;", )); }

    Optional lambda_initRemotePackageMap_2(ResolvedModule arg0, ModuleLayer arg1) { return Optional(*javaClass->invokeMethod<jobject>(this->object, "lambda$initRemotePackageMap$2", "(Ljava.lang.module.ResolvedModule;Ljava.lang.ModuleLayer;)Ljava.util.Optional;", arg0, arg1)); }

    static void lambda_new_1(ModuleReference arg0, Map arg1, String arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "lambda$new$1", "(Ljava.lang.module.ModuleReference;Ljava.util.Map;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    Loader initRemotePackageMap(Configuration arg0, List arg1) { return Loader(*javaClass->invokeMethod<jobject>(this->object, "initRemotePackageMap", "(Ljava.lang.module.Configuration;Ljava.util.List;)Ljdk.internal.loader.Loader;", arg0, arg1)); }

    LoaderPool pool() { return LoaderPool(*javaClass->invokeMethod<jobject>(this->object, "pool", "()Ljdk.internal.loader.LoaderPool;", )); }

};


/**
 * Classpath: java.lang.Integer
 * Package name: java.lang
 */
class Integer : public Number {
protected:
    const inline static char *className = "java.lang.Integer";
public:
    STATICINITIALIZE;

    Integer(jobject object) : JavaObject(object) {}

    static int numberOfLeadingZeros(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "numberOfLeadingZeros", "(I)I", arg0)); }

    static int numberOfTrailingZeros(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "numberOfTrailingZeros", "(I)I", arg0)); }

    static int bitCount(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "bitCount", "(I)I", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    static String toString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(I)Ljava.lang.String;", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    static String toString(int arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toString", "(II)Ljava.lang.String;", arg0, arg1)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static int hashCode(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "hashCode", "(I)I", arg0)); }

    static int min(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "min", "(II)I", arg0, arg1)); }

    static int max(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "max", "(II)I", arg0, arg1)); }

    static int signum(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "signum", "(I)I", arg0)); }

    static int reverseBytes(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "reverseBytes", "(I)I", arg0)); }

    static int getChars(int arg0, int arg1, arr_B arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getChars", "(II[B)I", arg0, arg1, arg2)); }

    int compareTo(Integer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Integer;)I", arg0)); }

    int compareTo(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Ljava.lang.Object;)I", arg0)); }

    static int compare(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compare", "(II)I", arg0, arg1)); }

    byte byteValue() { return byte(*javaClass->invokeMethod<byte>(this->object, "byteValue", "()B", )); }

    short shortValue() { return short(*javaClass->invokeMethod<short>(this->object, "shortValue", "()S", )); }

    int intValue() { return int(*javaClass->invokeMethod<int>(this->object, "intValue", "()I", )); }

    long longValue() { return long(*javaClass->invokeMethod<long>(this->object, "longValue", "()J", )); }

    float floatValue() { return float(*javaClass->invokeMethod<float>(this->object, "floatValue", "()F", )); }

    double doubleValue() { return double(*javaClass->invokeMethod<double>(this->object, "doubleValue", "()D", )); }

    static Integer valueOf(String arg0, int arg1) { return Integer(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;I)Ljava.lang.Integer;", arg0, arg1)); }

    static Integer valueOf(String arg0) { return Integer(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Ljava.lang.Integer;", arg0)); }

    static Integer valueOf(int arg0) { return Integer(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(I)Ljava.lang.Integer;", arg0)); }

    static String toHexString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toHexString", "(I)Ljava.lang.String;", arg0)); }

    static Integer decode(String arg0) { return Integer(*javaClass->invokeStaticMethod<jobject>(this->object, "decode", "(Ljava.lang.String;)Ljava.lang.Integer;", arg0)); }

    Object resolveConstantDesc(MethodHandles_Lookup arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Object;", arg0)); }

    Integer resolveConstantDesc(MethodHandles_Lookup arg0) { return Integer(*javaClass->invokeMethod<jobject>(this->object, "resolveConstantDesc", "(Ljava.lang.invoke.MethodHandles$Lookup;)Ljava.lang.Integer;", arg0)); }

    Optional describeConstable() { return Optional(*javaClass->invokeMethod<jobject>(this->object, "describeConstable", "()Ljava.util.Optional;", )); }

    static int reverse(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "reverse", "(I)I", arg0)); }

    static int stringSize(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "stringSize", "(I)I", arg0)); }

    static long toUnsignedLong(int arg0) { return long(*javaClass->invokeStaticMethod<long>(this->object, "toUnsignedLong", "(I)J", arg0)); }

    static int sum(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "sum", "(II)I", arg0, arg1)); }

    static int parseInt(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseInt", "(Ljava.lang.CharSequence;III)I", arg0, arg1, arg2, arg3)); }

    static int parseInt(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseInt", "(Ljava.lang.String;)I", arg0)); }

    static int parseInt(String arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseInt", "(Ljava.lang.String;I)I", arg0, arg1)); }

    static int compareUnsigned(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareUnsigned", "(II)I", arg0, arg1)); }

    static String toStringUTF16(int arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toStringUTF16", "(II)Ljava.lang.String;", arg0, arg1)); }

    static String toUnsignedString(int arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toUnsignedString", "(II)Ljava.lang.String;", arg0, arg1)); }

    static String toUnsignedString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toUnsignedString", "(I)Ljava.lang.String;", arg0)); }

    static String toUnsignedString0(int arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toUnsignedString0", "(II)Ljava.lang.String;", arg0, arg1)); }

    static void formatUnsignedInt(int arg0, int arg1, arr_B arg2, int arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "formatUnsignedInt", "(II[BI)V", arg0, arg1, arg2, arg3)); }

    static void formatUnsignedIntUTF16(int arg0, int arg1, arr_B arg2, int arg3) { (*javaClass->invokeStaticMethod<void>(this->object, "formatUnsignedIntUTF16", "(II[BI)V", arg0, arg1, arg2, arg3)); }

    static int parseUnsignedInt(String arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseUnsignedInt", "(Ljava.lang.String;I)I", arg0, arg1)); }

    static int parseUnsignedInt(CharSequence arg0, int arg1, int arg2, int arg3) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseUnsignedInt", "(Ljava.lang.CharSequence;III)I", arg0, arg1, arg2, arg3)); }

    static int parseUnsignedInt(String arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "parseUnsignedInt", "(Ljava.lang.String;)I", arg0)); }

    static Integer getInteger(String arg0, Integer arg1) { return Integer(*javaClass->invokeStaticMethod<jobject>(this->object, "getInteger", "(Ljava.lang.String;Ljava.lang.Integer;)Ljava.lang.Integer;", arg0, arg1)); }

    static Integer getInteger(String arg0) { return Integer(*javaClass->invokeStaticMethod<jobject>(this->object, "getInteger", "(Ljava.lang.String;)Ljava.lang.Integer;", arg0)); }

    static Integer getInteger(String arg0, int arg1) { return Integer(*javaClass->invokeStaticMethod<jobject>(this->object, "getInteger", "(Ljava.lang.String;I)Ljava.lang.Integer;", arg0, arg1)); }

    static String toOctalString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toOctalString", "(I)Ljava.lang.String;", arg0)); }

    static String toBinaryString(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "toBinaryString", "(I)Ljava.lang.String;", arg0)); }

    static int divideUnsigned(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "divideUnsigned", "(II)I", arg0, arg1)); }

    static int remainderUnsigned(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "remainderUnsigned", "(II)I", arg0, arg1)); }

    static int highestOneBit(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "highestOneBit", "(I)I", arg0)); }

    static int lowestOneBit(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "lowestOneBit", "(I)I", arg0)); }

    static int rotateLeft(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "rotateLeft", "(II)I", arg0, arg1)); }

    static int rotateRight(int arg0, int arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "rotateRight", "(II)I", arg0, arg1)); }

};


/**
 * Classpath: java.lang.VirtualMachineError
 * Package name: java.lang
 */
class VirtualMachineError : public Error {
protected:
    const inline static char *className = "java.lang.VirtualMachineError";
public:
    STATICINITIALIZE;

    VirtualMachineError(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.Package
 * Package name: java.lang
 */
class Package : public NamedPackage {
protected:
    const inline static char *className = "java.lang.Package";
public:
    STATICINITIALIZE;

    Package(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool isAnnotationPresent(Class arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAnnotationPresent", "(Ljava.lang.Class;)Z", arg0)); }

    static Package getPackage(String arg0) { return Package(*javaClass->invokeStaticMethod<jobject>(this->object, "getPackage", "(Ljava.lang.String;)Ljava.lang.Package;", arg0)); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    Annotation getDeclaredAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getDeclaredAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    bool isSealed(URL arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSealed", "(Ljava.net.URL;)Z", arg0)); }

    bool isSealed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSealed", "()Z", )); }

    Class getPackageInfo() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getPackageInfo", "()Ljava.lang.Class;", )); }

    String getSpecificationTitle() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSpecificationTitle", "()Ljava.lang.String;", )); }

    String getSpecificationVersion() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSpecificationVersion", "()Ljava.lang.String;", )); }

    String getSpecificationVendor() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSpecificationVendor", "()Ljava.lang.String;", )); }

    String getImplementationTitle() { return String(*javaClass->invokeMethod<jobject>(this->object, "getImplementationTitle", "()Ljava.lang.String;", )); }

    String getImplementationVersion() { return String(*javaClass->invokeMethod<jobject>(this->object, "getImplementationVersion", "()Ljava.lang.String;", )); }

    String getImplementationVendor() { return String(*javaClass->invokeMethod<jobject>(this->object, "getImplementationVendor", "()Ljava.lang.String;", )); }

    bool isCompatibleWith(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCompatibleWith", "(Ljava.lang.String;)Z", arg0)); }

};


/**
 * Classpath: java.time.chrono.IsoChronology
 * Package name: java.time.chrono
 */
class IsoChronology : public AbstractChronology {
protected:
    const inline static char *className = "java.time.chrono.IsoChronology";
public:
    STATICINITIALIZE;

    IsoChronology(jobject object) : JavaObject(object) {}

    bool isLeapYear(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "(J)Z", arg0)); }

    Era eraOf(int arg0) { return Era(*javaClass->invokeMethod<jobject>(this->object, "eraOf", "(I)Ljava.time.chrono.Era;", arg0)); }

    IsoEra eraOf(int arg0) { return IsoEra(*javaClass->invokeMethod<jobject>(this->object, "eraOf", "(I)Ljava.time.chrono.IsoEra;", arg0)); }

    int prolepticYear(Era arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "prolepticYear", "(Ljava.time.chrono.Era;I)I", arg0, arg1)); }

    ChronoLocalDate dateYearDay(Era arg0, int arg1, int arg2) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateYearDay", "(Ljava.time.chrono.Era;II)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1, arg2)); }

    LocalDate dateYearDay(int arg0, int arg1) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateYearDay", "(II)Ljava.time.LocalDate;", arg0, arg1)); }

    ChronoLocalDate dateYearDay(int arg0, int arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateYearDay", "(II)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    LocalDate dateYearDay(Era arg0, int arg1, int arg2) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateYearDay", "(Ljava.time.chrono.Era;II)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    LocalDate dateNow(Clock arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "(Ljava.time.Clock;)Ljava.time.LocalDate;", arg0)); }

    LocalDate dateNow() { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "()Ljava.time.LocalDate;", )); }

    LocalDate dateNow(ZoneId arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "(Ljava.time.ZoneId;)Ljava.time.LocalDate;", arg0)); }

    ChronoLocalDate dateNow() { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "()Ljava.time.chrono.ChronoLocalDate;", )); }

    ChronoLocalDate dateNow(Clock arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "(Ljava.time.Clock;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    ChronoLocalDate dateNow(ZoneId arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateNow", "(Ljava.time.ZoneId;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    ChronoLocalDate dateEpochDay(long arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateEpochDay", "(J)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    LocalDate dateEpochDay(long arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "dateEpochDay", "(J)Ljava.time.LocalDate;", arg0)); }

    List eras() { return List(*javaClass->invokeMethod<jobject>(this->object, "eras", "()Ljava.util.List;", )); }

    ChronoLocalDate resolveDate(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveDate", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    LocalDate resolveDate(Map arg0, ResolverStyle arg1) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveDate", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.LocalDate;", arg0, arg1)); }

    Period period(int arg0, int arg1, int arg2) { return Period(*javaClass->invokeMethod<jobject>(this->object, "period", "(III)Ljava.time.Period;", arg0, arg1, arg2)); }

    ChronoPeriod period(int arg0, int arg1, int arg2) { return ChronoPeriod(*javaClass->invokeMethod<jobject>(this->object, "period", "(III)Ljava.time.chrono.ChronoPeriod;", arg0, arg1, arg2)); }

    int numberOfDaysOfMonth(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "numberOfDaysOfMonth", "(II)I", arg0, arg1)); }

    ChronoLocalDate resolveYMD(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYMD", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    LocalDate resolveYMD(Map arg0, ResolverStyle arg1) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYMD", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.LocalDate;", arg0, arg1)); }

    LocalDate resolveYearOfEra(Map arg0, ResolverStyle arg1) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYearOfEra", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.LocalDate;", arg0, arg1)); }

    ChronoLocalDate resolveYearOfEra(Map arg0, ResolverStyle arg1) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "resolveYearOfEra", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1)); }

    void resolveProlepticMonth(Map arg0, ResolverStyle arg1) { (*javaClass->invokeMethod<void>(this->object, "resolveProlepticMonth", "(Ljava.util.Map;Ljava.time.format.ResolverStyle;)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String getId() { return String(*javaClass->invokeMethod<jobject>(this->object, "getId", "()Ljava.lang.String;", )); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    ValueRange range(ChronoField arg0) { return ValueRange(*javaClass->invokeMethod<jobject>(this->object, "range", "(Ljava.time.temporal.ChronoField;)Ljava.time.temporal.ValueRange;", arg0)); }

    LocalDate date(Era arg0, int arg1, int arg2, int arg3) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(Ljava.time.chrono.Era;III)Ljava.time.LocalDate;", arg0, arg1, arg2, arg3)); }

    ChronoLocalDate date(TemporalAccessor arg0) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoLocalDate;", arg0)); }

    LocalDate date(int arg0, int arg1, int arg2) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(III)Ljava.time.LocalDate;", arg0, arg1, arg2)); }

    ChronoLocalDate date(int arg0, int arg1, int arg2) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(III)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1, arg2)); }

    ChronoLocalDate date(Era arg0, int arg1, int arg2, int arg3) { return ChronoLocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(Ljava.time.chrono.Era;III)Ljava.time.chrono.ChronoLocalDate;", arg0, arg1, arg2, arg3)); }

    LocalDate date(TemporalAccessor arg0) { return LocalDate(*javaClass->invokeMethod<jobject>(this->object, "date", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDate;", arg0)); }

    String getCalendarType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getCalendarType", "()Ljava.lang.String;", )); }

    long epochSecond(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, ZoneOffset arg6) { return long(*javaClass->invokeMethod<long>(this->object, "epochSecond", "(IIIIIILjava.time.ZoneOffset;)J", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    LocalDateTime localDateTime(TemporalAccessor arg0) { return LocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "localDateTime", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.LocalDateTime;", arg0)); }

    ChronoLocalDateTime localDateTime(TemporalAccessor arg0) { return ChronoLocalDateTime(*javaClass->invokeMethod<jobject>(this->object, "localDateTime", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoLocalDateTime;", arg0)); }

    ZonedDateTime zonedDateTime(Instant arg0, ZoneId arg1) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.ZonedDateTime;", arg0, arg1)); }

    ZonedDateTime zonedDateTime(TemporalAccessor arg0) { return ZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.ZonedDateTime;", arg0)); }

    ChronoZonedDateTime zonedDateTime(TemporalAccessor arg0) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava.time.temporal.TemporalAccessor;)Ljava.time.chrono.ChronoZonedDateTime;", arg0)); }

    ChronoZonedDateTime zonedDateTime(Instant arg0, ZoneId arg1) { return ChronoZonedDateTime(*javaClass->invokeMethod<jobject>(this->object, "zonedDateTime", "(Ljava.time.Instant;Ljava.time.ZoneId;)Ljava.time.chrono.ChronoZonedDateTime;", arg0, arg1)); }

};


/**
 * Classpath: java.time.DateTimeException
 * Package name: java.time
 */
class DateTimeException : public RuntimeException {
protected:
    const inline static char *className = "java.time.DateTimeException";
public:
    STATICINITIALIZE;

    DateTimeException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.time.format.DateTimeParseException
 * Package name: java.time.format
 */
class DateTimeParseException : public DateTimeException {
protected:
    const inline static char *className = "java.time.format.DateTimeParseException";
public:
    STATICINITIALIZE;

    DateTimeParseException(jobject object) : JavaObject(object) {}

    int getErrorIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getErrorIndex", "()I", )); }

    String getParsedString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getParsedString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: java.nio.channels.FileChannel
 * Package name: java.nio.channels
 */
class FileChannel : public AbstractInterruptibleChannel {
protected:
    const inline static char *className = "java.nio.channels.FileChannel";
public:
    STATICINITIALIZE;

    FileChannel(jobject object) : JavaObject(object) {}

    FileLock lock() { return FileLock(*javaClass->invokeMethod<jobject>(this->object, "lock", "()Ljava.nio.channels.FileLock;", )); }

    FileLock lock(long arg0, long arg1, bool arg2) { return FileLock(*javaClass->invokeMethod<jobject>(this->object, "lock", "(JJZ)Ljava.nio.channels.FileLock;", arg0, arg1, arg2)); }

    SeekableByteChannel position(long arg0) { return SeekableByteChannel(*javaClass->invokeMethod<jobject>(this->object, "position", "(J)Ljava.nio.channels.SeekableByteChannel;", arg0)); }

    long position() { return long(*javaClass->invokeMethod<long>(this->object, "position", "()J", )); }

    FileChannel position(long arg0) { return FileChannel(*javaClass->invokeMethod<jobject>(this->object, "position", "(J)Ljava.nio.channels.FileChannel;", arg0)); }

    long size() { return long(*javaClass->invokeMethod<long>(this->object, "size", "()J", )); }

    MappedByteBuffer map(FileChannel_MapMode arg0, long arg1, long arg2) { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "map", "(Ljava.nio.channels.FileChannel$MapMode;JJ)Ljava.nio.MappedByteBuffer;", arg0, arg1, arg2)); }

    int write(ByteBuffer arg0, long arg1) { return int(*javaClass->invokeMethod<int>(this->object, "write", "(Ljava.nio.ByteBuffer;J)I", arg0, arg1)); }

    int write(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "write", "(Ljava.nio.ByteBuffer;)I", arg0)); }

    long write(ByteBuffer_interface arg0, int arg1, int arg2) { return long(*javaClass->invokeMethod<long>(this->object, "write", "([Ljava.nio.ByteBuffer;II)J", arg0, arg1, arg2)); }

    long write(ByteBuffer_interface arg0) { return long(*javaClass->invokeMethod<long>(this->object, "write", "([Ljava.nio.ByteBuffer;)J", arg0)); }

    int read(ByteBuffer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "read", "(Ljava.nio.ByteBuffer;)I", arg0)); }

    int read(ByteBuffer arg0, long arg1) { return int(*javaClass->invokeMethod<int>(this->object, "read", "(Ljava.nio.ByteBuffer;J)I", arg0, arg1)); }

    long read(ByteBuffer_interface arg0) { return long(*javaClass->invokeMethod<long>(this->object, "read", "([Ljava.nio.ByteBuffer;)J", arg0)); }

    long read(ByteBuffer_interface arg0, int arg1, int arg2) { return long(*javaClass->invokeMethod<long>(this->object, "read", "([Ljava.nio.ByteBuffer;II)J", arg0, arg1, arg2)); }

    static FileChannel open(Path arg0, Set arg1, FileAttribute_interface arg2) { return FileChannel(*javaClass->invokeStaticMethod<jobject>(this->object, "open", "(Ljava.nio.file.Path;Ljava.util.Set;[Ljava.nio.file.attribute.FileAttribute;)Ljava.nio.channels.FileChannel;", arg0, arg1, arg2)); }

    static FileChannel open(Path arg0, OpenOption_interface arg1) { return FileChannel(*javaClass->invokeStaticMethod<jobject>(this->object, "open", "(Ljava.nio.file.Path;[Ljava.nio.file.OpenOption;)Ljava.nio.channels.FileChannel;", arg0, arg1)); }

    long transferTo(long arg0, long arg1, WritableByteChannel arg2) { return long(*javaClass->invokeMethod<long>(this->object, "transferTo", "(JJLjava.nio.channels.WritableByteChannel;)J", arg0, arg1, arg2)); }

    FileLock tryLock(long arg0, long arg1, bool arg2) { return FileLock(*javaClass->invokeMethod<jobject>(this->object, "tryLock", "(JJZ)Ljava.nio.channels.FileLock;", arg0, arg1, arg2)); }

    FileLock tryLock() { return FileLock(*javaClass->invokeMethod<jobject>(this->object, "tryLock", "()Ljava.nio.channels.FileLock;", )); }

    FileChannel truncate(long arg0) { return FileChannel(*javaClass->invokeMethod<jobject>(this->object, "truncate", "(J)Ljava.nio.channels.FileChannel;", arg0)); }

    SeekableByteChannel truncate(long arg0) { return SeekableByteChannel(*javaClass->invokeMethod<jobject>(this->object, "truncate", "(J)Ljava.nio.channels.SeekableByteChannel;", arg0)); }

    long transferFrom(ReadableByteChannel arg0, long arg1, long arg2) { return long(*javaClass->invokeMethod<long>(this->object, "transferFrom", "(Ljava.nio.channels.ReadableByteChannel;JJ)J", arg0, arg1, arg2)); }

    void force(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "force", "(Z)V", arg0)); }

};


/**
 * Classpath: java.nio.MappedByteBuffer
 * Package name: java.nio
 */
class MappedByteBuffer : public ByteBuffer {
protected:
    const inline static char *className = "java.nio.MappedByteBuffer";
public:
    STATICINITIALIZE;

    MappedByteBuffer(jobject object) : JavaObject(object) {}

    MappedByteBuffer load() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "load", "()Ljava.nio.MappedByteBuffer;", )); }

    Buffer clear() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.Buffer;", )); }

    MappedByteBuffer clear() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.MappedByteBuffer;", )); }

    ByteBuffer clear() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuffer position(int arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    MappedByteBuffer position(int arg0) { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.MappedByteBuffer;", arg0)); }

    Buffer position(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "position", "(I)Ljava.nio.Buffer;", arg0)); }

    Buffer limit(int arg0) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.Buffer;", arg0)); }

    ByteBuffer limit(int arg0) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.ByteBuffer;", arg0)); }

    MappedByteBuffer limit(int arg0) { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "limit", "(I)Ljava.nio.MappedByteBuffer;", arg0)); }

    MappedByteBuffer mark() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.MappedByteBuffer;", )); }

    ByteBuffer mark() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.ByteBuffer;", )); }

    Buffer mark() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "mark", "()Ljava.nio.Buffer;", )); }

    Buffer reset() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.Buffer;", )); }

    MappedByteBuffer reset() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.MappedByteBuffer;", )); }

    ByteBuffer reset() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "reset", "()Ljava.nio.ByteBuffer;", )); }

    Buffer flip() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.Buffer;", )); }

    ByteBuffer flip() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.ByteBuffer;", )); }

    MappedByteBuffer flip() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "flip", "()Ljava.nio.MappedByteBuffer;", )); }

    MappedByteBuffer rewind() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.MappedByteBuffer;", )); }

    Buffer rewind() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.Buffer;", )); }

    ByteBuffer rewind() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "rewind", "()Ljava.nio.ByteBuffer;", )); }

    ByteBuffer slice(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    Buffer slice(int arg0, int arg1) { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.Buffer;", arg0, arg1)); }

    ByteBuffer slice() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.ByteBuffer;", )); }

    MappedByteBuffer slice() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.MappedByteBuffer;", )); }

    Buffer slice() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Ljava.nio.Buffer;", )); }

    MappedByteBuffer slice(int arg0, int arg1) { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Ljava.nio.MappedByteBuffer;", arg0, arg1)); }

    MappedByteBuffer duplicate() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.MappedByteBuffer;", )); }

    Buffer duplicate() { return Buffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.Buffer;", )); }

    ByteBuffer duplicate() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Ljava.nio.ByteBuffer;", )); }

    MappedByteBuffer compact() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.MappedByteBuffer;", )); }

    ByteBuffer compact() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "compact", "()Ljava.nio.ByteBuffer;", )); }

    bool isLoaded() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLoaded", "()Z", )); }

    MappedByteBuffer force() { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "force", "()Ljava.nio.MappedByteBuffer;", )); }

    MappedByteBuffer force(int arg0, int arg1) { return MappedByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "force", "(II)Ljava.nio.MappedByteBuffer;", arg0, arg1)); }

    bool isSync() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSync", "()Z", )); }

    FileDescriptor fileDescriptor() { return FileDescriptor(*javaClass->invokeMethod<jobject>(this->object, "fileDescriptor", "()Ljava.io.FileDescriptor;", )); }

    UnmapperProxy unmapper() { return UnmapperProxy(*javaClass->invokeMethod<jobject>(this->object, "unmapper", "()Ljdk.internal.access.foreign.UnmapperProxy;", )); }

};


/**
 * Classpath: jdk.internal.ref.PhantomCleanable
 * Package name: jdk.internal.ref
 */
class PhantomCleanable : public PhantomReference {
protected:
    const inline static char *className = "jdk.internal.ref.PhantomCleanable";
public:
    STATICINITIALIZE;

    PhantomCleanable(jobject object) : JavaObject(object) {}

    bool remove() { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "()Z", )); }

    void insert() { (*javaClass->invokeMethod<void>(this->object, "insert", "()V", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool enqueue() { return bool(*javaClass->invokeMethod<boolean>(this->object, "enqueue", "()Z", )); }

    void clean() { (*javaClass->invokeMethod<void>(this->object, "clean", "()V", )); }

    bool isEnqueued() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEnqueued", "()Z", )); }

    void performCleanup() { (*javaClass->invokeMethod<void>(this->object, "performCleanup", "()V", )); }

    bool isListEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isListEmpty", "()Z", )); }

};


/**
 * Classpath: java.util.concurrent.ConcurrentHashMap
 * Package name: java.util.concurrent
 */
class ConcurrentHashMap : public AbstractMap {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap";
public:
    STATICINITIALIZE;

    ConcurrentHashMap(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    Object replace(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool replace(Object arg0, Object arg1, Object arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1, arg2)); }

    void replaceAll(BiFunction arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.BiFunction;)V", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Enumeration elements() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "elements", "()Ljava.util.Enumeration;", )); }

    Object merge(Object arg0, Object arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    void putAll(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "putAll", "(Ljava.util.Map;)V", arg0)); }

    Object putIfAbsent(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "putIfAbsent", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object compute(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compute", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void forEach(long arg0, BiConsumer arg1) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(JLjava.util.function.BiConsumer;)V", arg0, arg1)); }

    void forEach(long arg0, BiFunction arg1, Consumer arg2) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(JLjava.util.function.BiFunction;Ljava.util.function.Consumer;)V", arg0, arg1, arg2)); }

    void forEach(BiConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.BiConsumer;)V", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Object computeIfAbsent(Object arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfAbsent", "(Ljava.lang.Object;Ljava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    Enumeration keys() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Ljava.util.Enumeration;", )); }

    ConcurrentHashMap_KeySetView keySet(Object arg0) { return ConcurrentHashMap_KeySetView(*javaClass->invokeMethod<jobject>(this->object, "keySet", "(Ljava.lang.Object;)Ljava.util.concurrent.ConcurrentHashMap$KeySetView;", arg0)); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    ConcurrentHashMap_KeySetView keySet() { return ConcurrentHashMap_KeySetView(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.concurrent.ConcurrentHashMap$KeySetView;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Object getOrDefault(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOrDefault", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object computeIfPresent(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfPresent", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    static int tableSizeFor(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "tableSizeFor", "(I)I", arg0)); }

    long sumCount() { return long(*javaClass->invokeMethod<long>(this->object, "sumCount", "()J", )); }

    static int spread(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "spread", "(I)I", arg0)); }

    static ConcurrentHashMap_Node tabAt(ConcurrentHashMap_Node_interface arg0, int arg1) { return ConcurrentHashMap_Node(*javaClass->invokeStaticMethod<jobject>(this->object, "tabAt", "([Ljava.util.concurrent.ConcurrentHashMap$Node;I)Ljava.util.concurrent.ConcurrentHashMap$Node;", arg0, arg1)); }

    Object putVal(Object arg0, Object arg1, bool arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "putVal", "(Ljava.lang.Object;Ljava.lang.Object;Z)Ljava.lang.Object;", arg0, arg1, arg2)); }

    static bool casTabAt(ConcurrentHashMap_Node_interface arg0, int arg1, ConcurrentHashMap_Node arg2, ConcurrentHashMap_Node arg3) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "casTabAt", "([Ljava.util.concurrent.ConcurrentHashMap$Node;ILjava.util.concurrent.ConcurrentHashMap$Node;Ljava.util.concurrent.ConcurrentHashMap$Node;)Z", arg0, arg1, arg2, arg3)); }

    void treeifyBin(ConcurrentHashMap_Node_interface arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "treeifyBin", "([Ljava.util.concurrent.ConcurrentHashMap$Node;I)V", arg0, arg1)); }

    void addCount(long arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addCount", "(JI)V", arg0, arg1)); }

    void tryPresize(int arg0) { (*javaClass->invokeMethod<void>(this->object, "tryPresize", "(I)V", arg0)); }

    Object replaceNode(Object arg0, Object arg1, Object arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "replaceNode", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    static void setTabAt(ConcurrentHashMap_Node_interface arg0, int arg1, ConcurrentHashMap_Node arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "setTabAt", "([Ljava.util.concurrent.ConcurrentHashMap$Node;ILjava.util.concurrent.ConcurrentHashMap$Node;)V", arg0, arg1, arg2)); }

    static ConcurrentHashMap_Node untreeify(ConcurrentHashMap_Node arg0) { return ConcurrentHashMap_Node(*javaClass->invokeStaticMethod<jobject>(this->object, "untreeify", "(Ljava.util.concurrent.ConcurrentHashMap$Node;)Ljava.util.concurrent.ConcurrentHashMap$Node;", arg0)); }

    void fullAddCount(long arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "fullAddCount", "(JZ)V", arg0, arg1)); }

    static int resizeStamp(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "resizeStamp", "(I)I", arg0)); }

    void transfer(ConcurrentHashMap_Node_interface arg0, ConcurrentHashMap_Node_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "transfer", "([Ljava.util.concurrent.ConcurrentHashMap$Node;[Ljava.util.concurrent.ConcurrentHashMap$Node;)V", arg0, arg1)); }

    int batchFor(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "batchFor", "(J)I", arg0)); }

    static Class comparableClassFor(Object arg0) { return Class(*javaClass->invokeStaticMethod<jobject>(this->object, "comparableClassFor", "(Ljava.lang.Object;)Ljava.lang.Class;", arg0)); }

    static int compareComparables(Class arg0, Object arg1, Object arg2) { return int(*javaClass->invokeStaticMethod<int>(this->object, "compareComparables", "(Ljava.lang.Class;Ljava.lang.Object;Ljava.lang.Object;)I", arg0, arg1, arg2)); }

    bool removeEntryIf(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeEntryIf", "(Ljava.util.function.Predicate;)Z", arg0)); }

    bool removeValueIf(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeValueIf", "(Ljava.util.function.Predicate;)Z", arg0)); }

    long mappingCount() { return long(*javaClass->invokeMethod<long>(this->object, "mappingCount", "()J", )); }

    static ConcurrentHashMap_KeySetView newKeySet(int arg0) { return ConcurrentHashMap_KeySetView(*javaClass->invokeStaticMethod<jobject>(this->object, "newKeySet", "(I)Ljava.util.concurrent.ConcurrentHashMap$KeySetView;", arg0)); }

    static ConcurrentHashMap_KeySetView newKeySet() { return ConcurrentHashMap_KeySetView(*javaClass->invokeStaticMethod<jobject>(this->object, "newKeySet", "()Ljava.util.concurrent.ConcurrentHashMap$KeySetView;", )); }

    Object search(long arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "search", "(JLjava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    Object reduce(long arg0, BiFunction arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduce", "(JLjava.util.function.BiFunction;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    double reduceToDouble(long arg0, ToDoubleBiFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*javaClass->invokeMethod<double>(this->object, "reduceToDouble", "(JLjava.util.function.ToDoubleBiFunction;DLjava.util.function.DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }

    long reduceToLong(long arg0, ToLongBiFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*javaClass->invokeMethod<long>(this->object, "reduceToLong", "(JLjava.util.function.ToLongBiFunction;JLjava.util.function.LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }

    int reduceToInt(long arg0, ToIntBiFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*javaClass->invokeMethod<int>(this->object, "reduceToInt", "(JLjava.util.function.ToIntBiFunction;ILjava.util.function.IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }

    void forEachKey(long arg0, Consumer arg1) { (*javaClass->invokeMethod<void>(this->object, "forEachKey", "(JLjava.util.function.Consumer;)V", arg0, arg1)); }

    void forEachKey(long arg0, Function arg1, Consumer arg2) { (*javaClass->invokeMethod<void>(this->object, "forEachKey", "(JLjava.util.function.Function;Ljava.util.function.Consumer;)V", arg0, arg1, arg2)); }

    Object searchKeys(long arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "searchKeys", "(JLjava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    Object reduceKeys(long arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduceKeys", "(JLjava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    Object reduceKeys(long arg0, Function arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduceKeys", "(JLjava.util.function.Function;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    double reduceKeysToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*javaClass->invokeMethod<double>(this->object, "reduceKeysToDouble", "(JLjava.util.function.ToDoubleFunction;DLjava.util.function.DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }

    long reduceKeysToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*javaClass->invokeMethod<long>(this->object, "reduceKeysToLong", "(JLjava.util.function.ToLongFunction;JLjava.util.function.LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }

    int reduceKeysToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*javaClass->invokeMethod<int>(this->object, "reduceKeysToInt", "(JLjava.util.function.ToIntFunction;ILjava.util.function.IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }

    void forEachValue(long arg0, Function arg1, Consumer arg2) { (*javaClass->invokeMethod<void>(this->object, "forEachValue", "(JLjava.util.function.Function;Ljava.util.function.Consumer;)V", arg0, arg1, arg2)); }

    void forEachValue(long arg0, Consumer arg1) { (*javaClass->invokeMethod<void>(this->object, "forEachValue", "(JLjava.util.function.Consumer;)V", arg0, arg1)); }

    Object searchValues(long arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "searchValues", "(JLjava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    Object reduceValues(long arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduceValues", "(JLjava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    Object reduceValues(long arg0, Function arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduceValues", "(JLjava.util.function.Function;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    double reduceValuesToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*javaClass->invokeMethod<double>(this->object, "reduceValuesToDouble", "(JLjava.util.function.ToDoubleFunction;DLjava.util.function.DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }

    long reduceValuesToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*javaClass->invokeMethod<long>(this->object, "reduceValuesToLong", "(JLjava.util.function.ToLongFunction;JLjava.util.function.LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }

    int reduceValuesToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*javaClass->invokeMethod<int>(this->object, "reduceValuesToInt", "(JLjava.util.function.ToIntFunction;ILjava.util.function.IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }

    void forEachEntry(long arg0, Consumer arg1) { (*javaClass->invokeMethod<void>(this->object, "forEachEntry", "(JLjava.util.function.Consumer;)V", arg0, arg1)); }

    void forEachEntry(long arg0, Function arg1, Consumer arg2) { (*javaClass->invokeMethod<void>(this->object, "forEachEntry", "(JLjava.util.function.Function;Ljava.util.function.Consumer;)V", arg0, arg1, arg2)); }

    Object searchEntries(long arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "searchEntries", "(JLjava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    Map_Entry reduceEntries(long arg0, BiFunction arg1) { return Map_Entry(*javaClass->invokeMethod<jobject>(this->object, "reduceEntries", "(JLjava.util.function.BiFunction;)Ljava.util.Map$Entry;", arg0, arg1)); }

    Object reduceEntries(long arg0, Function arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "reduceEntries", "(JLjava.util.function.Function;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    double reduceEntriesToDouble(long arg0, ToDoubleFunction arg1, double arg2, DoubleBinaryOperator arg3) { return double(*javaClass->invokeMethod<double>(this->object, "reduceEntriesToDouble", "(JLjava.util.function.ToDoubleFunction;DLjava.util.function.DoubleBinaryOperator;)D", arg0, arg1, arg2, arg3)); }

    long reduceEntriesToLong(long arg0, ToLongFunction arg1, long arg2, LongBinaryOperator arg3) { return long(*javaClass->invokeMethod<long>(this->object, "reduceEntriesToLong", "(JLjava.util.function.ToLongFunction;JLjava.util.function.LongBinaryOperator;)J", arg0, arg1, arg2, arg3)); }

    int reduceEntriesToInt(long arg0, ToIntFunction arg1, int arg2, IntBinaryOperator arg3) { return int(*javaClass->invokeMethod<int>(this->object, "reduceEntriesToInt", "(JLjava.util.function.ToIntFunction;ILjava.util.function.IntBinaryOperator;)I", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.util.concurrent.ConcurrentHashMap$KeySetView
 * Enclosing class: java.util.concurrent.ConcurrentHashMap
 * Package name: java.util.concurrent
 */
class ConcurrentHashMap_KeySetView : public ConcurrentHashMap_CollectionView {
protected:
    const inline static char *className = "java.util.concurrent.ConcurrentHashMap$KeySetView";
public:
    STATICINITIALIZE;

    ConcurrentHashMap_KeySetView(jobject object) : JavaObject(object) {}

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    void forEach(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.Consumer;)V", arg0)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    Object getMappedValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getMappedValue", "()Ljava.lang.Object;", )); }

    ConcurrentHashMap getMap() { return ConcurrentHashMap(*javaClass->invokeMethod<jobject>(this->object, "getMap", "()Ljava.util.concurrent.ConcurrentHashMap;", )); }

};


/**
 * Classpath: java.lang.reflect.Constructor
 * Package name: java.lang.reflect
 */
class Constructor : public Executable {
protected:
    const inline static char *className = "java.lang.reflect.Constructor";
public:
    STATICINITIALIZE;

    Constructor(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    Object newInstance(Object_interface arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "newInstance", "([Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    ConstructorRepository getGenericInfo() { return ConstructorRepository(*javaClass->invokeMethod<jobject>(this->object, "getGenericInfo", "()Lsun.reflect.generics.repository.ConstructorRepository;", )); }

    GenericsFactory getFactory() { return GenericsFactory(*javaClass->invokeMethod<jobject>(this->object, "getFactory", "()Lsun.reflect.generics.factory.GenericsFactory;", )); }

    String toGenericString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toGenericString", "()Ljava.lang.String;", )); }

    bool isSynthetic() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSynthetic", "()Z", )); }

    Class getDeclaringClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getDeclaringClass", "()Ljava.lang.Class;", )); }

    Annotation getAnnotation(Class arg0) { return Annotation(*javaClass->invokeMethod<jobject>(this->object, "getAnnotation", "(Ljava.lang.Class;)Ljava.lang.annotation.Annotation;", arg0)); }

    void setAccessible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccessible", "(Z)V", arg0)); }

    void checkCanSetAccessible(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "checkCanSetAccessible", "(Ljava.lang.Class;)V", arg0)); }

    String toShortString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toShortString", "()Ljava.lang.String;", )); }

    AccessibleObject getRoot() { return AccessibleObject(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.lang.reflect.AccessibleObject;", )); }

    Constructor getRoot() { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "getRoot", "()Ljava.lang.reflect.Constructor;", )); }

    Constructor copy() { return Constructor(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Ljava.lang.reflect.Constructor;", )); }

    bool isVarArgs() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isVarArgs", "()Z", )); }

    int getParameterCount() { return int(*javaClass->invokeMethod<int>(this->object, "getParameterCount", "()I", )); }

    bool hasGenericInformation() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasGenericInformation", "()Z", )); }

    void specificToStringHeader(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "specificToStringHeader", "(Ljava.lang.StringBuilder;)V", arg0)); }

    void specificToGenericStringHeader(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "specificToGenericStringHeader", "(Ljava.lang.StringBuilder;)V", arg0)); }

    AnnotatedType getAnnotatedReturnType() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedReturnType", "()Ljava.lang.reflect.AnnotatedType;", )); }

    bool handleParameterNumberMismatch(int arg0, Class_interface arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleParameterNumberMismatch", "(I[Ljava.lang.Class;)Z", arg0, arg1)); }

    AnnotatedType getAnnotatedReceiverType() { return AnnotatedType(*javaClass->invokeMethod<jobject>(this->object, "getAnnotatedReceiverType", "()Ljava.lang.reflect.AnnotatedType;", )); }

    String getSignature() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSignature", "()Ljava.lang.String;", )); }

    Object newInstanceWithCaller(Object_interface arg0, bool arg1, Class arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "newInstanceWithCaller", "([Ljava.lang.Object;ZLjava.lang.Class;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    ConstructorAccessor acquireConstructorAccessor() { return ConstructorAccessor(*javaClass->invokeMethod<jobject>(this->object, "acquireConstructorAccessor", "()Ljdk.internal.reflect.ConstructorAccessor;", )); }

    ConstructorAccessor getConstructorAccessor() { return ConstructorAccessor(*javaClass->invokeMethod<jobject>(this->object, "getConstructorAccessor", "()Ljdk.internal.reflect.ConstructorAccessor;", )); }

    void setConstructorAccessor(ConstructorAccessor arg0) { (*javaClass->invokeMethod<void>(this->object, "setConstructorAccessor", "(Ljdk.internal.reflect.ConstructorAccessor;)V", arg0)); }

    int getSlot() { return int(*javaClass->invokeMethod<int>(this->object, "getSlot", "()I", )); }

};


/**
 * Classpath: sun.reflect.generics.repository.ConstructorRepository
 * Package name: sun.reflect.generics.repository
 */
class ConstructorRepository : public GenericDeclRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.ConstructorRepository";
public:
    STATICINITIALIZE;

    ConstructorRepository(jobject object) : JavaObject(object) {}

    static ConstructorRepository make(String arg0, GenericsFactory arg1) { return ConstructorRepository(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.ConstructorRepository;", arg0, arg1)); }

    Tree parse(String arg0) { return Tree(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Lsun.reflect.generics.tree.Tree;", arg0)); }

    MethodTypeSignature parse(String arg0) { return MethodTypeSignature(*javaClass->invokeMethod<jobject>(this->object, "parse", "(Ljava.lang.String;)Lsun.reflect.generics.tree.MethodTypeSignature;", arg0)); }

};


/**
 * Classpath: sun.reflect.generics.repository.MethodRepository
 * Package name: sun.reflect.generics.repository
 */
class MethodRepository : public ConstructorRepository {
protected:
    const inline static char *className = "sun.reflect.generics.repository.MethodRepository";
public:
    STATICINITIALIZE;

    MethodRepository(jobject object) : JavaObject(object) {}

    static MethodRepository make(String arg0, GenericsFactory arg1) { return MethodRepository(*javaClass->invokeStaticMethod<jobject>(this->object, "make", "(Ljava.lang.String;Lsun.reflect.generics.factory.GenericsFactory;)Lsun.reflect.generics.repository.MethodRepository;", arg0, arg1)); }

    Type getReturnType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "getReturnType", "()Ljava.lang.reflect.Type;", )); }

    Type computeReturnType() { return Type(*javaClass->invokeMethod<jobject>(this->object, "computeReturnType", "()Ljava.lang.reflect.Type;", )); }

};


/**
 * Classpath: sun.util.calendar.BaseCalendar$Date
 * Enclosing class: sun.util.calendar.BaseCalendar
 * Package name: sun.util.calendar
 */
class BaseCalendar_Date : public CalendarDate {
protected:
    const inline static char *className = "sun.util.calendar.BaseCalendar$Date";
public:
    STATICINITIALIZE;

    BaseCalendar_Date(jobject object) : JavaObject(object) {}

    BaseCalendar_Date setNormalizedDate(int arg0, int arg1, int arg2) { return BaseCalendar_Date(*javaClass->invokeMethod<jobject>(this->object, "setNormalizedDate", "(III)Lsun.util.calendar.BaseCalendar$Date;", arg0, arg1, arg2)); }

    void setNormalizedYear(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setNormalizedYear", "(I)V", arg0)); }

    int getNormalizedYear() { return int(*javaClass->invokeMethod<int>(this->object, "getNormalizedYear", "()I", )); }

    bool hit(long arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hit", "(J)Z", arg0)); }

    bool hit(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hit", "(I)Z", arg0)); }

    int getCachedYear() { return int(*javaClass->invokeMethod<int>(this->object, "getCachedYear", "()I", )); }

    long getCachedJan1() { return long(*javaClass->invokeMethod<long>(this->object, "getCachedJan1", "()J", )); }

    void setCache(int arg0, long arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setCache", "(IJI)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: sun.util.calendar.AbstractCalendar
 * Package name: sun.util.calendar
 */
class AbstractCalendar : public CalendarSystem {
protected:
    const inline static char *className = "sun.util.calendar.AbstractCalendar";
public:
    STATICINITIALIZE;

    AbstractCalendar(jobject object) : JavaObject(object) {}

    long getTime(CalendarDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getTime", "(Lsun.util.calendar.CalendarDate;)J", arg0)); }

    bool isLeapYear(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    Era getEra(String arg0) { return Era(*javaClass->invokeMethod<jobject>(this->object, "getEra", "(Ljava.lang.String;)Lsun.util.calendar.Era;", arg0)); }

    CalendarDate setTimeOfDay(CalendarDate arg0, int arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "setTimeOfDay", "(Lsun.util.calendar.CalendarDate;I)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

    CalendarDate getCalendarDate(long arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(J)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate getCalendarDate(long arg0, CalendarDate arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

    CalendarDate getCalendarDate(long arg0, TimeZone arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLjava.util.TimeZone;)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

    CalendarDate getCalendarDate() { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun.util.calendar.CalendarDate;", )); }

    void setEras(Era_interface arg0) { (*javaClass->invokeMethod<void>(this->object, "setEras", "([Lsun.util.calendar.Era;)V", arg0)); }

    void setEra(CalendarDate arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "setEra", "(Lsun.util.calendar.CalendarDate;Ljava.lang.String;)V", arg0, arg1)); }

    long getTimeOfDay(CalendarDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getTimeOfDay", "(Lsun.util.calendar.CalendarDate;)J", arg0)); }

    bool validateTime(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "validateTime", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    int normalizeTime(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "normalizeTime", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

    long getFixedDate(CalendarDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getFixedDate", "(Lsun.util.calendar.CalendarDate;)J", arg0)); }

    void getCalendarDateFromFixedDate(CalendarDate arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "getCalendarDateFromFixedDate", "(Lsun.util.calendar.CalendarDate;J)V", arg0, arg1)); }

    long getTimeOfDayValue(CalendarDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getTimeOfDayValue", "(Lsun.util.calendar.CalendarDate;)J", arg0)); }

    static long getDayOfWeekDateBefore(long arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "getDayOfWeekDateBefore", "(JI)J", arg0, arg1)); }

    static long getDayOfWeekDateAfter(long arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "getDayOfWeekDateAfter", "(JI)J", arg0, arg1)); }

    static long getDayOfWeekDateOnOrBefore(long arg0, int arg1) { return long(*javaClass->invokeStaticMethod<long>(this->object, "getDayOfWeekDateOnOrBefore", "(JI)J", arg0, arg1)); }

    int getWeekLength() { return int(*javaClass->invokeMethod<int>(this->object, "getWeekLength", "()I", )); }

    CalendarDate getNthDayOfWeek(int arg0, int arg1, CalendarDate arg2) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getNthDayOfWeek", "(IILsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;", arg0, arg1, arg2)); }

};


/**
 * Classpath: sun.util.calendar.Gregorian$Date
 * Enclosing class: sun.util.calendar.Gregorian
 * Package name: sun.util.calendar
 */
class Gregorian_Date : public BaseCalendar_Date {
protected:
    const inline static char *className = "sun.util.calendar.Gregorian$Date";
public:
    STATICINITIALIZE;

    Gregorian_Date(jobject object) : JavaObject(object) {}

    void setNormalizedYear(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setNormalizedYear", "(I)V", arg0)); }

    int getNormalizedYear() { return int(*javaClass->invokeMethod<int>(this->object, "getNormalizedYear", "()I", )); }

};


/**
 * Classpath: sun.util.resources.TimeZoneNamesBundle
 * Package name: sun.util.resources
 */
class TimeZoneNamesBundle : public OpenListResourceBundle {
protected:
    const inline static char *className = "sun.util.resources.TimeZoneNamesBundle";
public:
    STATICINITIALIZE;

    TimeZoneNamesBundle(jobject object) : JavaObject(object) {}

    Set createSet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "createSet", "()Ljava.util.Set;", )); }

    Object handleGetObject(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "handleGetObject", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Map createMap(int arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "createMap", "(I)Ljava.util.Map;", arg0)); }

};


/**
 * Classpath: java.io.PrintWriter
 * Package name: java.io
 */
class PrintWriter : public Writer {
protected:
    const inline static char *className = "java.io.PrintWriter";
public:
    STATICINITIALIZE;

    PrintWriter(jobject object) : JavaObject(object) {}

    void println(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "([C)V", arg0)); }

    void println() { (*javaClass->invokeMethod<void>(this->object, "println", "()V", )); }

    void println(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Z)V", arg0)); }

    void println(String arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Ljava.lang.String;)V", arg0)); }

    void println(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(Ljava.lang.Object;)V", arg0)); }

    void println(double arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(D)V", arg0)); }

    void println(float arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(F)V", arg0)); }

    void println(long arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(J)V", arg0)); }

    void println(int arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(I)V", arg0)); }

    void println(char arg0) { (*javaClass->invokeMethod<void>(this->object, "println", "(C)V", arg0)); }

    PrintWriter append(CharSequence arg0, int arg1, int arg2) { return PrintWriter(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.io.PrintWriter;", arg0, arg1, arg2)); }

    PrintWriter append(char arg0) { return PrintWriter(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.io.PrintWriter;", arg0)); }

    PrintWriter append(CharSequence arg0) { return PrintWriter(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.io.PrintWriter;", arg0)); }

    Appendable append(CharSequence arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.lang.Appendable;", arg0)); }

    Appendable append(char arg0) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.lang.Appendable;", arg0)); }

    Writer append(char arg0) { return Writer(*javaClass->invokeMethod<jobject>(this->object, "append", "(C)Ljava.io.Writer;", arg0)); }

    Writer append(CharSequence arg0) { return Writer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;)Ljava.io.Writer;", arg0)); }

    Appendable append(CharSequence arg0, int arg1, int arg2) { return Appendable(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.lang.Appendable;", arg0, arg1, arg2)); }

    Writer append(CharSequence arg0, int arg1, int arg2) { return Writer(*javaClass->invokeMethod<jobject>(this->object, "append", "(Ljava.lang.CharSequence;II)Ljava.io.Writer;", arg0, arg1, arg2)); }

    void flush() { (*javaClass->invokeMethod<void>(this->object, "flush", "()V", )); }

    PrintWriter format(String arg0, Object_interface arg1) { return PrintWriter(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;", arg0, arg1)); }

    PrintWriter format(Locale arg0, String arg1, Object_interface arg2) { return PrintWriter(*javaClass->invokeMethod<jobject>(this->object, "format", "(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;", arg0, arg1, arg2)); }

    PrintWriter printf(String arg0, Object_interface arg1) { return PrintWriter(*javaClass->invokeMethod<jobject>(this->object, "printf", "(Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;", arg0, arg1)); }

    PrintWriter printf(Locale arg0, String arg1, Object_interface arg2) { return PrintWriter(*javaClass->invokeMethod<jobject>(this->object, "printf", "(Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintWriter;", arg0, arg1, arg2)); }

    void write(arr_C arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "([CII)V", arg0, arg1, arg2)); }

    void write(String arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.lang.String;)V", arg0)); }

    void write(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void write(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "([C)V", arg0)); }

    void write(int arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(I)V", arg0)); }

    void print(float arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(F)V", arg0)); }

    void print(long arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(J)V", arg0)); }

    void print(int arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(I)V", arg0)); }

    void print(char arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(C)V", arg0)); }

    void print(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Z)V", arg0)); }

    void print(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.lang.Object;)V", arg0)); }

    void print(String arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(Ljava.lang.String;)V", arg0)); }

    void print(arr_C arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "([C)V", arg0)); }

    void print(double arg0) { (*javaClass->invokeMethod<void>(this->object, "print", "(D)V", arg0)); }

    void newLine() { (*javaClass->invokeMethod<void>(this->object, "newLine", "()V", )); }

    void close() { (*javaClass->invokeMethod<void>(this->object, "close", "()V", )); }

    static Charset toCharset(String arg0) { return Charset(*javaClass->invokeStaticMethod<jobject>(this->object, "toCharset", "(Ljava.lang.String;)Ljava.nio.charset.Charset;", arg0)); }

    void ensureOpen() { (*javaClass->invokeMethod<void>(this->object, "ensureOpen", "()V", )); }

    bool checkError() { return bool(*javaClass->invokeMethod<boolean>(this->object, "checkError", "()Z", )); }

    void setError() { (*javaClass->invokeMethod<void>(this->object, "setError", "()V", )); }

    void clearError() { (*javaClass->invokeMethod<void>(this->object, "clearError", "()V", )); }

};


/**
 * Classpath: java.lang.ClassNotFoundException
 * Package name: java.lang
 */
class ClassNotFoundException : public ReflectiveOperationException {
protected:
    const inline static char *className = "java.lang.ClassNotFoundException";
public:
    STATICINITIALIZE;

    ClassNotFoundException(jobject object) : JavaObject(object) {}

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    Throwable getException() { return Throwable(*javaClass->invokeMethod<jobject>(this->object, "getException", "()Ljava.lang.Throwable;", )); }

};


/**
 * Classpath: java.lang.ClassCastException
 * Package name: java.lang
 */
class ClassCastException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.ClassCastException";
public:
    STATICINITIALIZE;

    ClassCastException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.invoke.BoundMethodHandle$SpeciesData
 * Enclosing class: java.lang.invoke.BoundMethodHandle
 * Package name: java.lang.invoke
 */
class BoundMethodHandle_SpeciesData : public ClassSpecializer_SpeciesData {
protected:
    const inline static char *className = "java.lang.invoke.BoundMethodHandle$SpeciesData";
public:
    STATICINITIALIZE;

    BoundMethodHandle_SpeciesData(jobject object) : JavaObject(object) {}

    BoundMethodHandle_SpeciesData extendWith(byte arg0) { return BoundMethodHandle_SpeciesData(*javaClass->invokeMethod<jobject>(this->object, "extendWith", "(B)Ljava.lang.invoke.BoundMethodHandle$SpeciesData;", arg0)); }

    String deriveTypeString() { return String(*javaClass->invokeMethod<jobject>(this->object, "deriveTypeString", "()Ljava.lang.String;", )); }

    bool verifyTHAargs(MemberName arg0, int arg1, List arg2, List arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "verifyTHAargs", "(Ljava.lang.invoke.MemberName;ILjava.util.List;Ljava.util.List;)Z", arg0, arg1, arg2, arg3)); }

    List deriveFieldTypes(String arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "deriveFieldTypes", "(Ljava.lang.String;)Ljava.util.List;", arg0)); }

    List deriveFieldTypes(Object arg0) { return List(*javaClass->invokeMethod<jobject>(this->object, "deriveFieldTypes", "(Ljava.lang.Object;)Ljava.util.List;", arg0)); }

    String deriveClassName() { return String(*javaClass->invokeMethod<jobject>(this->object, "deriveClassName", "()Ljava.lang.String;", )); }

    MethodHandle deriveTransformHelper(MemberName arg0, int arg1) { return MethodHandle(*javaClass->invokeMethod<jobject>(this->object, "deriveTransformHelper", "(Ljava.lang.invoke.MemberName;I)Ljava.lang.invoke.MethodHandle;", arg0, arg1)); }

    List deriveTransformHelperArguments(MemberName arg0, int arg1, List arg2, List arg3) { return List(*javaClass->invokeMethod<jobject>(this->object, "deriveTransformHelperArguments", "(Ljava.lang.invoke.MemberName;ILjava.util.List;Ljava.util.List;)Ljava.util.List;", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.ClassWriter
 * Package name: jdk.internal.org.objectweb.asm
 */
class ClassWriter : public ClassVisitor {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.ClassWriter";
public:
    STATICINITIALIZE;

    ClassWriter(jobject object) : JavaObject(object) {}

    ClassLoader getClassLoader() { return ClassLoader(*javaClass->invokeMethod<jobject>(this->object, "getClassLoader", "()Ljava.lang.ClassLoader;", )); }

    void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String_interface arg5) { (*javaClass->invokeMethod<void>(this->object, "visit", "(IILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void visitSource(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "visitSource", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String_interface arg4) { return MethodVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitMethod", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;[Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.MethodVisitor;", arg0, arg1, arg2, arg3, arg4)); }

    void visitEnd() { (*javaClass->invokeMethod<void>(this->object, "visitEnd", "()V", )); }

    FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) { return FieldVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitField", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Ljava.lang.Object;)Ljdk.internal.org.objectweb.asm.FieldVisitor;", arg0, arg1, arg2, arg3, arg4)); }

    AnnotationVisitor visitAnnotation(String arg0, bool arg1) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitAnnotation", "(Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1)); }

    int newHandle(int arg0, String arg1, String arg2, String arg3) { return int(*javaClass->invokeMethod<int>(this->object, "newHandle", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;)I", arg0, arg1, arg2, arg3)); }

    int newHandle(int arg0, String arg1, String arg2, String arg3, bool arg4) { return int(*javaClass->invokeMethod<int>(this->object, "newHandle", "(ILjava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)I", arg0, arg1, arg2, arg3, arg4)); }

    ModuleVisitor visitModule(String arg0, int arg1, String arg2) { return ModuleVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitModule", "(Ljava.lang.String;ILjava.lang.String;)Ljdk.internal.org.objectweb.asm.ModuleVisitor;", arg0, arg1, arg2)); }

    void visitNestHost(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitNestHost", "(Ljava.lang.String;)V", arg0)); }

    void visitOuterClass(String arg0, String arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "visitOuterClass", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    AnnotationVisitor visitTypeAnnotation(int arg0, TypePath arg1, String arg2, bool arg3) { return AnnotationVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitTypeAnnotation", "(ILjdk.internal.org.objectweb.asm.TypePath;Ljava.lang.String;Z)Ljdk.internal.org.objectweb.asm.AnnotationVisitor;", arg0, arg1, arg2, arg3)); }

    void visitAttribute(Attribute arg0) { (*javaClass->invokeMethod<void>(this->object, "visitAttribute", "(Ljdk.internal.org.objectweb.asm.Attribute;)V", arg0)); }

    void visitNestMember(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitNestMember", "(Ljava.lang.String;)V", arg0)); }

    void visitPermittedSubclassExperimental(String arg0) { (*javaClass->invokeMethod<void>(this->object, "visitPermittedSubclassExperimental", "(Ljava.lang.String;)V", arg0)); }

    void visitInnerClass(String arg0, String arg1, String arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "visitInnerClass", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;I)V", arg0, arg1, arg2, arg3)); }

    RecordComponentVisitor visitRecordComponent(String arg0, String arg1, String arg2) { return RecordComponentVisitor(*javaClass->invokeMethod<jobject>(this->object, "visitRecordComponent", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljdk.internal.org.objectweb.asm.RecordComponentVisitor;", arg0, arg1, arg2)); }

    int newConst(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "newConst", "(Ljava.lang.Object;)I", arg0)); }

    int newUTF8(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "newUTF8", "(Ljava.lang.String;)I", arg0)); }

    int newClass(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "newClass", "(Ljava.lang.String;)I", arg0)); }

    int newMethodType(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "newMethodType", "(Ljava.lang.String;)I", arg0)); }

    int newPackage(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "newPackage", "(Ljava.lang.String;)I", arg0)); }

    int newConstantDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return int(*javaClass->invokeMethod<int>(this->object, "newConstantDynamic", "(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)I", arg0, arg1, arg2, arg3)); }

    int newInvokeDynamic(String arg0, String arg1, Handle arg2, Object_interface arg3) { return int(*javaClass->invokeMethod<int>(this->object, "newInvokeDynamic", "(Ljava.lang.String;Ljava.lang.String;Ljdk.internal.org.objectweb.asm.Handle;[Ljava.lang.Object;)I", arg0, arg1, arg2, arg3)); }

    int newField(String arg0, String arg1, String arg2) { return int(*javaClass->invokeMethod<int>(this->object, "newField", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)I", arg0, arg1, arg2)); }

    int newMethod(String arg0, String arg1, String arg2, bool arg3) { return int(*javaClass->invokeMethod<int>(this->object, "newMethod", "(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;Z)I", arg0, arg1, arg2, arg3)); }

    int newNameType(String arg0, String arg1) { return int(*javaClass->invokeMethod<int>(this->object, "newNameType", "(Ljava.lang.String;Ljava.lang.String;)I", arg0, arg1)); }

    String getCommonSuperClass(String arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getCommonSuperClass", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    int newModule(String arg0) { return int(*javaClass->invokeMethod<int>(this->object, "newModule", "(Ljava.lang.String;)I", arg0)); }

};


/**
 * Classpath: jdk.internal.org.objectweb.asm.SymbolTable$Entry
 * Enclosing class: jdk.internal.org.objectweb.asm.SymbolTable
 * Package name: jdk.internal.org.objectweb.asm
 */
class SymbolTable_Entry : public Symbol {
protected:
    const inline static char *className = "jdk.internal.org.objectweb.asm.SymbolTable$Entry";
public:
    STATICINITIALIZE;

    SymbolTable_Entry(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.invoke.LambdaFormEditor$Transform
 * Enclosing class: java.lang.invoke.LambdaFormEditor
 * Package name: java.lang.invoke
 */
class LambdaFormEditor_Transform : public SoftReference {
protected:
    const inline static char *className = "java.lang.invoke.LambdaFormEditor$Transform";
public:
    STATICINITIALIZE;

    LambdaFormEditor_Transform(jobject object) : JavaObject(object) {}

    bool equals(LambdaFormEditor_Transform arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.LambdaFormEditor$Transform;)Z", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    bool equals(LambdaFormEditor_TransformKey arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.invoke.LambdaFormEditor$TransformKey;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.lang.invoke.WrongMethodTypeException
 * Package name: java.lang.invoke
 */
class WrongMethodTypeException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.invoke.WrongMethodTypeException";
public:
    STATICINITIALIZE;

    WrongMethodTypeException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.IndexOutOfBoundsException
 * Package name: java.lang
 */
class IndexOutOfBoundsException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.IndexOutOfBoundsException";
public:
    STATICINITIALIZE;

    IndexOutOfBoundsException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: com.google.common.collect.ForwardingMultimap
 * Package name: com.google.common.collect
 */
class ForwardingMultimap : public ForwardingObject {
protected:
    const inline static char *className = "com.google.common.collect.ForwardingMultimap";
public:
    STATICINITIALIZE;

    ForwardingMultimap(jobject object) : JavaObject(object) {}

    bool containsEntry(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsEntry", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Collection replaceValues(Object arg0, Iterable arg1) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Ljava.util.Collection;", arg0, arg1)); }

    Map asMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "asMap", "()Ljava.util.Map;", )); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Collection get(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

    bool put(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool putAll(Multimap arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Lcom.google.common.collect.Multimap;)Z", arg0)); }

    bool putAll(Object arg0, Iterable arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Ljava.lang.Object;Ljava.lang.Iterable;)Z", arg0, arg1)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Multiset keys() { return Multiset(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Lcom.google.common.collect.Multiset;", )); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Collection entries() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Ljava.util.Collection;", )); }

    Collection removeAll(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

    Multimap delegate() { return Multimap(*javaClass->invokeMethod<jobject>(this->object, "delegate", "()Lcom.google.common.collect.Multimap;", )); }

    Object delegate() { return Object(*javaClass->invokeMethod<jobject>(this->object, "delegate", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: net.minecraft.util.BlockPos
 * Package name: net.minecraft.util
 */
class BlockPos : public Vec3i {
protected:
    const inline static char *className = "net.minecraft.util.BlockPos";
public:
    STATICINITIALIZE;

    BlockPos(jobject object) : JavaObject(object) {}

    BlockPos crossProduct(Vec3i arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "crossProduct", "(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.BlockPos;", arg0)); }

    Vec3i crossProduct(Vec3i arg0) { return Vec3i(*javaClass->invokeMethod<jobject>(this->object, "crossProduct", "(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.Vec3i;", arg0)); }

    static Iterable getAllInBox(BlockPos arg0, BlockPos arg1) { return Iterable(*javaClass->invokeStaticMethod<jobject>(this->object, "getAllInBox", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Ljava.lang.Iterable;", arg0, arg1)); }

    static Iterable getAllInBoxMutable(BlockPos arg0, BlockPos arg1) { return Iterable(*javaClass->invokeStaticMethod<jobject>(this->object, "getAllInBoxMutable", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.BlockPos;)Ljava.lang.Iterable;", arg0, arg1)); }

    static BlockPos fromLong(long arg0) { return BlockPos(*javaClass->invokeStaticMethod<jobject>(this->object, "fromLong", "(J)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos west() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "west", "()Lnet.minecraft.util.BlockPos;", )); }

    BlockPos west(int arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "west", "(I)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos east() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "east", "()Lnet.minecraft.util.BlockPos;", )); }

    BlockPos east(int arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "east", "(I)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos north() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "north", "()Lnet.minecraft.util.BlockPos;", )); }

    BlockPos north(int arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "north", "(I)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos south() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "south", "()Lnet.minecraft.util.BlockPos;", )); }

    BlockPos south(int arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "south", "(I)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos add(double arg0, double arg1, double arg2) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "add", "(DDD)Lnet.minecraft.util.BlockPos;", arg0, arg1, arg2)); }

    BlockPos add(int arg0, int arg1, int arg2) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "add", "(III)Lnet.minecraft.util.BlockPos;", arg0, arg1, arg2)); }

    BlockPos add(Vec3i arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "add", "(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos offset(EnumFacing arg0, int arg1) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "offset", "(Lnet.minecraft.util.EnumFacing;I)Lnet.minecraft.util.BlockPos;", arg0, arg1)); }

    BlockPos offset(EnumFacing arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "offset", "(Lnet.minecraft.util.EnumFacing;)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos up() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "up", "()Lnet.minecraft.util.BlockPos;", )); }

    BlockPos up(int arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "up", "(I)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos down() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "down", "()Lnet.minecraft.util.BlockPos;", )); }

    BlockPos down(int arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "down", "(I)Lnet.minecraft.util.BlockPos;", arg0)); }

    BlockPos subtract(Vec3i arg0) { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "subtract", "(Lnet.minecraft.util.Vec3i;)Lnet.minecraft.util.BlockPos;", arg0)); }

    long toLong() { return long(*javaClass->invokeMethod<long>(this->object, "toLong", "()J", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableSet
 * Package name: com.google.common.collect
 */
class ImmutableSet : public ImmutableCollection {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableSet";
public:
    STATICINITIALIZE;

    ImmutableSet(jobject object) : JavaObject(object) {}

    static ImmutableSet copyOfEnumSet(EnumSet arg0) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOfEnumSet", "(Ljava.util.EnumSet;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    bool isHashCodeFast() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHashCodeFast", "()Z", )); }

    static int chooseTableSize(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "chooseTableSize", "(I)I", arg0)); }

    static ImmutableSet access_000(int arg0, Object_interface arg1) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "access$000", "(I[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1)); }

    static ImmutableSet construct(int arg0, Object_interface arg1) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "construct", "(I[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ImmutableSet copyOf(Iterator arg0) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    static ImmutableSet copyOf(Iterable arg0) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    static ImmutableSet copyOf(Collection arg0) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Collection;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    static ImmutableSet copyOf(Object_interface arg0) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    UnmodifiableIterator iterator() { return UnmodifiableIterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Lcom.google.common.collect.UnmodifiableIterator;", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    static ImmutableSet of() { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Lcom.google.common.collect.ImmutableSet;", )); }

    static ImmutableSet of(Object arg0) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    static ImmutableSet of(Object arg0, Object arg1) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1)); }

    static ImmutableSet of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1, arg2, arg3, arg4)); }

    static ImmutableSet of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object_interface arg6) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;[Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    static ImmutableSet of(Object arg0, Object arg1, Object arg2) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1, arg2)); }

    static ImmutableSet of(Object arg0, Object arg1, Object arg2, Object arg3) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1, arg2, arg3)); }

    static ImmutableSet_Builder builder() { return ImmutableSet_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Lcom.google.common.collect.ImmutableSet$Builder;", )); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.util.AbstractSet
 * Package name: java.util
 */
class AbstractSet : public AbstractCollection {
protected:
    const inline static char *className = "java.util.AbstractSet";
public:
    STATICINITIALIZE;

    AbstractSet(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableSet$Builder
 * Enclosing class: com.google.common.collect.ImmutableSet
 * Package name: com.google.common.collect
 */
class ImmutableSet_Builder : public ImmutableCollection_ArrayBasedBuilder {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableSet$Builder";
public:
    STATICINITIALIZE;

    ImmutableSet_Builder(jobject object) : JavaObject(object) {}

    ImmutableCollection_Builder add(Object_interface arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder add(Object arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_ArrayBasedBuilder add(Object arg0) { return ImmutableCollection_ArrayBasedBuilder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$ArrayBasedBuilder;", arg0)); }

    ImmutableSet_Builder add(Object_interface arg0) { return ImmutableSet_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet$Builder;", arg0)); }

    ImmutableSet_Builder add(Object arg0) { return ImmutableSet_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterator arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableSet_Builder addAll(Iterator arg0) { return ImmutableSet_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableSet$Builder;", arg0)); }

    ImmutableSet_Builder addAll(Iterable arg0) { return ImmutableSet_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableSet$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterable arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection build() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    ImmutableSet build() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableSet;", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableList$Builder
 * Enclosing class: com.google.common.collect.ImmutableList
 * Package name: com.google.common.collect
 */
class ImmutableList_Builder : public ImmutableCollection_ArrayBasedBuilder {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableList$Builder";
public:
    STATICINITIALIZE;

    ImmutableList_Builder(jobject object) : JavaObject(object) {}

    ImmutableCollection_Builder add(Object_interface arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder add(Object arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_ArrayBasedBuilder add(Object arg0) { return ImmutableCollection_ArrayBasedBuilder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection$ArrayBasedBuilder;", arg0)); }

    ImmutableList_Builder add(Object arg0) { return ImmutableList_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList$Builder;", arg0)); }

    ImmutableList_Builder add(Object_interface arg0) { return ImmutableList_Builder(*javaClass->invokeMethod<jobject>(this->object, "add", "([Ljava.lang.Object;)Lcom.google.common.collect.ImmutableList$Builder;", arg0)); }

    ImmutableList_Builder addAll(Iterator arg0) { return ImmutableList_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableList$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterator arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.util.Iterator;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableCollection_Builder addAll(Iterable arg0) { return ImmutableCollection_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection$Builder;", arg0)); }

    ImmutableList_Builder addAll(Iterable arg0) { return ImmutableList_Builder(*javaClass->invokeMethod<jobject>(this->object, "addAll", "(Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableList$Builder;", arg0)); }

    ImmutableCollection build() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    ImmutableList build() { return ImmutableList(*javaClass->invokeMethod<jobject>(this->object, "build", "()Lcom.google.common.collect.ImmutableList;", )); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMultimap
 * Package name: com.google.common.collect
 */
class ImmutableMultimap : public AbstractMultimap {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMultimap";
public:
    STATICINITIALIZE;

    ImmutableMultimap(jobject object) : JavaObject(object) {}

    Iterator valueIterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "valueIterator", "()Ljava.util.Iterator;", )); }

    UnmodifiableIterator valueIterator() { return UnmodifiableIterator(*javaClass->invokeMethod<jobject>(this->object, "valueIterator", "()Lcom.google.common.collect.UnmodifiableIterator;", )); }

    Map createAsMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "createAsMap", "()Ljava.util.Map;", )); }

    ImmutableCollection createEntries() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "createEntries", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    Collection createEntries() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "createEntries", "()Ljava.util.Collection;", )); }

    UnmodifiableIterator entryIterator() { return UnmodifiableIterator(*javaClass->invokeMethod<jobject>(this->object, "entryIterator", "()Lcom.google.common.collect.UnmodifiableIterator;", )); }

    Iterator entryIterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "entryIterator", "()Ljava.util.Iterator;", )); }

    Collection createValues() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "createValues", "()Ljava.util.Collection;", )); }

    ImmutableCollection createValues() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "createValues", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    bool isPartialView() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPartialView", "()Z", )); }

    bool containsEntry(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsEntry", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Collection replaceValues(Object arg0, Iterable arg1) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Ljava.util.Collection;", arg0, arg1)); }

    ImmutableCollection replaceValues(Object arg0, Iterable arg1) { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection;", arg0, arg1)); }

    Multiset createKeys() { return Multiset(*javaClass->invokeMethod<jobject>(this->object, "createKeys", "()Lcom.google.common.collect.Multiset;", )); }

    ImmutableMultiset createKeys() { return ImmutableMultiset(*javaClass->invokeMethod<jobject>(this->object, "createKeys", "()Lcom.google.common.collect.ImmutableMultiset;", )); }

    ImmutableMultimap inverse() { return ImmutableMultimap(*javaClass->invokeMethod<jobject>(this->object, "inverse", "()Lcom.google.common.collect.ImmutableMultimap;", )); }

    ImmutableMap asMap() { return ImmutableMap(*javaClass->invokeMethod<jobject>(this->object, "asMap", "()Lcom.google.common.collect.ImmutableMap;", )); }

    Map asMap() { return Map(*javaClass->invokeMethod<jobject>(this->object, "asMap", "()Ljava.util.Map;", )); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    ImmutableCollection get(Object arg0) { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection;", arg0)); }

    Collection get(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

    bool put(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    ImmutableCollection values() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    static ImmutableMultimap copyOf(Multimap arg0) { return ImmutableMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Lcom.google.common.collect.Multimap;)Lcom.google.common.collect.ImmutableMultimap;", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    static ImmutableMultimap of(Object arg0, Object arg1) { return ImmutableMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap;", arg0, arg1)); }

    static ImmutableMultimap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return ImmutableMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static ImmutableMultimap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return ImmutableMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static ImmutableMultimap of(Object arg0, Object arg1, Object arg2, Object arg3) { return ImmutableMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap;", arg0, arg1, arg2, arg3)); }

    static ImmutableMultimap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return ImmutableMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableMultimap;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static ImmutableMultimap of() { return ImmutableMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Lcom.google.common.collect.ImmutableMultimap;", )); }

    static ImmutableMultimap_Builder builder() { return ImmutableMultimap_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Lcom.google.common.collect.ImmutableMultimap$Builder;", )); }

    bool putAll(Multimap arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Lcom.google.common.collect.Multimap;)Z", arg0)); }

    bool putAll(Object arg0, Iterable arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "putAll", "(Ljava.lang.Object;Ljava.lang.Iterable;)Z", arg0, arg1)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Multiset keys() { return Multiset(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Lcom.google.common.collect.Multiset;", )); }

    ImmutableMultiset keys() { return ImmutableMultiset(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Lcom.google.common.collect.ImmutableMultiset;", )); }

    ImmutableSet keySet() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Lcom.google.common.collect.ImmutableSet;", )); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Collection entries() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Ljava.util.Collection;", )); }

    ImmutableCollection entries() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    Collection removeAll(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

    ImmutableCollection removeAll(Object arg0) { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection;", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableEntry
 * Package name: com.google.common.collect
 */
class ImmutableEntry : public AbstractMapEntry {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableEntry";
public:
    STATICINITIALIZE;

    ImmutableEntry(jobject object) : JavaObject(object) {}

    Object getValue() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getValue", "()Ljava.lang.Object;", )); }

    Object getKey() { return Object(*javaClass->invokeMethod<jobject>(this->object, "getKey", "()Ljava.lang.Object;", )); }

    Object setValue(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "setValue", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

};


/**
 * Classpath: net.minecraft.nbt.NBTTagIntArray
 * Package name: net.minecraft.nbt
 */
class NBTTagIntArray : public NBTBase {
protected:
    const inline static char *className = "net.minecraft.nbt.NBTTagIntArray";
public:
    STATICINITIALIZE;

    NBTTagIntArray(jobject object) : JavaObject(object) {}

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void write(DataOutput arg0) { (*javaClass->invokeMethod<void>(this->object, "write", "(Ljava.io.DataOutput;)V", arg0)); }

    void read(DataInput arg0, int arg1, NBTSizeTracker arg2) { (*javaClass->invokeMethod<void>(this->object, "read", "(Ljava.io.DataInput;ILnet.minecraft.nbt.NBTSizeTracker;)V", arg0, arg1, arg2)); }

    byte getId() { return byte(*javaClass->invokeMethod<byte>(this->object, "getId", "()B", )); }

    NBTBase copy() { return NBTBase(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lnet.minecraft.nbt.NBTBase;", )); }

};


/**
 * Classpath: net.minecraft.block.BlockFlower
 * Package name: net.minecraft.block
 */
class BlockFlower : public BlockBush {
protected:
    const inline static char *className = "net.minecraft.block.BlockFlower";
public:
    STATICINITIALIZE;

    BlockFlower(jobject object) : JavaObject(object) {}

    int getMetaFromState(IBlockState arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMetaFromState", "(Lnet.minecraft.block.state.IBlockState;)I", arg0)); }

    BlockFlower_EnumFlowerColor getBlockType() { return BlockFlower_EnumFlowerColor(*javaClass->invokeMethod<jobject>(this->object, "getBlockType", "()Lnet.minecraft.block.BlockFlower$EnumFlowerColor;", )); }

    IBlockState getStateFromMeta(int arg0) { return IBlockState(*javaClass->invokeMethod<jobject>(this->object, "getStateFromMeta", "(I)Lnet.minecraft.block.state.IBlockState;", arg0)); }

    BlockState createBlockState() { return BlockState(*javaClass->invokeMethod<jobject>(this->object, "createBlockState", "()Lnet.minecraft.block.state.BlockState;", )); }

    int damageDropped(IBlockState arg0) { return int(*javaClass->invokeMethod<int>(this->object, "damageDropped", "(Lnet.minecraft.block.state.IBlockState;)I", arg0)); }

    void getSubBlocks(Item arg0, CreativeTabs arg1, List arg2) { (*javaClass->invokeMethod<void>(this->object, "getSubBlocks", "(Lnet.minecraft.item.Item;Lnet.minecraft.creativetab.CreativeTabs;Ljava.util.List;)V", arg0, arg1, arg2)); }

    Block_EnumOffsetType getOffsetType() { return Block_EnumOffsetType(*javaClass->invokeMethod<jobject>(this->object, "getOffsetType", "()Lnet.minecraft.block.Block$EnumOffsetType;", )); }

    IProperty getTypeProperty() { return IProperty(*javaClass->invokeMethod<jobject>(this->object, "getTypeProperty", "()Lnet.minecraft.block.properties.IProperty;", )); }

};


/**
 * Classpath: net.minecraft.entity.player.EntityPlayer
 * Package name: net.minecraft.entity.player
 */
class EntityPlayer : public EntityLivingBase {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayer";
public:
    STATICINITIALIZE;

    EntityPlayer(jobject object) : JavaObject(object) {}

    void applyEntityAttributes() { (*javaClass->invokeMethod<void>(this->object, "applyEntityAttributes", "()V", )); }

    ItemStack getItemInUse() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getItemInUse", "()Lnet.minecraft.item.ItemStack;", )); }

    int getItemInUseCount() { return int(*javaClass->invokeMethod<int>(this->object, "getItemInUseCount", "()I", )); }

    int getItemInUseDuration() { return int(*javaClass->invokeMethod<int>(this->object, "getItemInUseDuration", "()I", )); }

    void stopUsingItem() { (*javaClass->invokeMethod<void>(this->object, "stopUsingItem", "()V", )); }

    void clearItemInUse() { (*javaClass->invokeMethod<void>(this->object, "clearItemInUse", "()V", )); }

    void updateItemUse(ItemStack arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "updateItemUse", "(Lnet.minecraft.item.ItemStack;I)V", arg0, arg1)); }

    void onItemUseFinish() { (*javaClass->invokeMethod<void>(this->object, "onItemUseFinish", "()V", )); }

    void wakeUpPlayer(bool arg0, bool arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "wakeUpPlayer", "(ZZZ)V", arg0, arg1, arg2)); }

    void closeScreen() { (*javaClass->invokeMethod<void>(this->object, "closeScreen", "()V", )); }

    void triggerAchievement(StatBase arg0) { (*javaClass->invokeMethod<void>(this->object, "triggerAchievement", "(Lnet.minecraft.stats.StatBase;)V", arg0)); }

    int getMaxInPortalTime() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxInPortalTime", "()I", )); }

    String getSwimSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSwimSound", "()Ljava.lang.String;", )); }

    String getSplashSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSplashSound", "()Ljava.lang.String;", )); }

    int getPortalCooldown() { return int(*javaClass->invokeMethod<int>(this->object, "getPortalCooldown", "()I", )); }

    float getEyeHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getEyeHeight", "()F", )); }

    void handleStatusUpdate(byte arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }

    bool isMovementBlocked() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMovementBlocked", "()Z", )); }

    void updateRidden() { (*javaClass->invokeMethod<void>(this->object, "updateRidden", "()V", )); }

    void addMountedMovementStat(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "addMountedMovementStat", "(DDD)V", arg0, arg1, arg2)); }

    void updateEntityActionState() { (*javaClass->invokeMethod<void>(this->object, "updateEntityActionState", "()V", )); }

    void onLivingUpdate() { (*javaClass->invokeMethod<void>(this->object, "onLivingUpdate", "()V", )); }

    void collideWithPlayer(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "collideWithPlayer", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void func_175145_a(StatBase arg0) { (*javaClass->invokeMethod<void>(this->object, "func_175145_a", "(Lnet.minecraft.stats.StatBase;)V", arg0)); }

    String getHurtSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHurtSound", "()Ljava.lang.String;", )); }

    String getDeathSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDeathSound", "()Ljava.lang.String;", )); }

    void addToPlayerScore(Entity arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addToPlayerScore", "(Lnet.minecraft.entity.Entity;I)V", arg0, arg1)); }

    Scoreboard getWorldScoreboard() { return Scoreboard(*javaClass->invokeMethod<jobject>(this->object, "getWorldScoreboard", "()Lnet.minecraft.scoreboard.Scoreboard;", )); }

    Collection func_175137_e(Entity arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "func_175137_e", "(Lnet.minecraft.entity.Entity;)Ljava.util.Collection;", arg0)); }

    void joinEntityItemWithWorld(EntityItem arg0) { (*javaClass->invokeMethod<void>(this->object, "joinEntityItemWithWorld", "(Lnet.minecraft.entity.item.EntityItem;)V", arg0)); }

    float getToolDigEfficiency(Block arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getToolDigEfficiency", "(Lnet.minecraft.block.Block;)F", arg0)); }

    bool canHarvestBlock(Block arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canHarvestBlock", "(Lnet.minecraft.block.Block;)Z", arg0)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    bool canAttackPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAttackPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void damageArmor(float arg0) { (*javaClass->invokeMethod<void>(this->object, "damageArmor", "(F)V", arg0)); }

    int getTotalArmorValue() { return int(*javaClass->invokeMethod<int>(this->object, "getTotalArmorValue", "()I", )); }

    float getArmorVisibility() { return float(*javaClass->invokeMethod<float>(this->object, "getArmorVisibility", "()F", )); }

    void damageEntity(DamageSource arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "damageEntity", "(Lnet.minecraft.util.DamageSource;F)V", arg0, arg1)); }

    float getAbsorptionAmount() { return float(*javaClass->invokeMethod<float>(this->object, "getAbsorptionAmount", "()F", )); }

    void setAbsorptionAmount(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setAbsorptionAmount", "(F)V", arg0)); }

    void addExhaustion(float arg0) { (*javaClass->invokeMethod<void>(this->object, "addExhaustion", "(F)V", arg0)); }

    void openEditSign(TileEntitySign arg0) { (*javaClass->invokeMethod<void>(this->object, "openEditSign", "(Lnet.minecraft.tileentity.TileEntitySign;)V", arg0)); }

    void openEditCommandBlock(CommandBlockLogic arg0) { (*javaClass->invokeMethod<void>(this->object, "openEditCommandBlock", "(Lnet.minecraft.command.server.CommandBlockLogic;)V", arg0)); }

    void displayVillagerTradeGui(IMerchant arg0) { (*javaClass->invokeMethod<void>(this->object, "displayVillagerTradeGui", "(Lnet.minecraft.entity.IMerchant;)V", arg0)); }

    void moveEntityWithHeading(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "moveEntityWithHeading", "(FF)V", arg0, arg1)); }

    void addMovementStat(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "addMovementStat", "(DDD)V", arg0, arg1, arg2)); }

    float getAIMoveSpeed() { return float(*javaClass->invokeMethod<float>(this->object, "getAIMoveSpeed", "()F", )); }

    void resetHeight() { (*javaClass->invokeMethod<void>(this->object, "resetHeight", "()V", )); }

    String getFallSoundString(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getFallSoundString", "(I)Ljava.lang.String;", arg0)); }

    void onKillEntity(EntityLivingBase arg0) { (*javaClass->invokeMethod<void>(this->object, "onKillEntity", "(Lnet.minecraft.entity.EntityLivingBase;)V", arg0)); }

    ItemStack getCurrentArmor(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getCurrentArmor", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void addExperience(int arg0) { (*javaClass->invokeMethod<void>(this->object, "addExperience", "(I)V", arg0)); }

    void addExperienceLevel(int arg0) { (*javaClass->invokeMethod<void>(this->object, "addExperienceLevel", "(I)V", arg0)); }

    void removeExperienceLevel(int arg0) { (*javaClass->invokeMethod<void>(this->object, "removeExperienceLevel", "(I)V", arg0)); }

    FoodStats getFoodStats() { return FoodStats(*javaClass->invokeMethod<jobject>(this->object, "getFoodStats", "()Lnet.minecraft.util.FoodStats;", )); }

    void setItemInUse(ItemStack arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setItemInUse", "(Lnet.minecraft.item.ItemStack;I)V", arg0, arg1)); }

    bool isAllowEdit() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAllowEdit", "()Z", )); }

    bool canPlayerEdit(BlockPos arg0, EnumFacing arg1, ItemStack arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPlayerEdit", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.util.EnumFacing;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1, arg2)); }

    int getExperiencePoints(EntityPlayer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet.minecraft.entity.player.EntityPlayer;)I", arg0)); }

    void clonePlayer(EntityPlayer arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "clonePlayer", "(Lnet.minecraft.entity.player.EntityPlayer;Z)V", arg0, arg1)); }

    bool canTriggerWalking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canTriggerWalking", "()Z", )); }

    void sendPlayerAbilities() { (*javaClass->invokeMethod<void>(this->object, "sendPlayerAbilities", "()V", )); }

    void setGameType(WorldSettings_GameType arg0) { (*javaClass->invokeMethod<void>(this->object, "setGameType", "(Lnet.minecraft.world.WorldSettings$GameType;)V", arg0)); }

    InventoryEnderChest getInventoryEnderChest() { return InventoryEnderChest(*javaClass->invokeMethod<jobject>(this->object, "getInventoryEnderChest", "()Lnet.minecraft.inventory.InventoryEnderChest;", )); }

    ItemStack getEquipmentInSlot(int arg0) { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getEquipmentInSlot", "(I)Lnet.minecraft.item.ItemStack;", arg0)); }

    void setCurrentItemOrArmor(int arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "setCurrentItemOrArmor", "(ILnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    bool isInvisibleToPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInvisibleToPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    bool isPushedByWater() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPushedByWater", "()Z", )); }

    static UUID getOfflineUUID(String arg0) { return UUID(*javaClass->invokeStaticMethod<jobject>(this->object, "getOfflineUUID", "(Ljava.lang.String;)Ljava.util.UUID;", arg0)); }

    bool sendCommandFeedback() { return bool(*javaClass->invokeMethod<boolean>(this->object, "sendCommandFeedback", "()Z", )); }

    bool replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replaceItemInInventory", "(ILnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    bool isEntityInsideOpaqueBlock() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEntityInsideOpaqueBlock", "()Z", )); }

    bool isUsingItem() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUsingItem", "()Z", )); }

    bool isPlayerSleeping() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlayerSleeping", "()Z", )); }

    bool isSpectator() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSpectator", "()Z", )); }

    EntityItem dropOneItem(bool arg0) { return EntityItem(*javaClass->invokeMethod<jobject>(this->object, "dropOneItem", "(Z)Lnet.minecraft.entity.item.EntityItem;", arg0)); }

    void preparePlayerToSpawn() { (*javaClass->invokeMethod<void>(this->object, "preparePlayerToSpawn", "()V", )); }

    bool hasReducedDebug() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasReducedDebug", "()Z", )); }

    void setReducedDebug(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setReducedDebug", "(Z)V", arg0)); }

    void displayGUIChest(IInventory arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGUIChest", "(Lnet.minecraft.inventory.IInventory;)V", arg0)); }

    void displayGUIHorse(EntityHorse arg0, IInventory arg1) { (*javaClass->invokeMethod<void>(this->object, "displayGUIHorse", "(Lnet.minecraft.entity.passive.EntityHorse;Lnet.minecraft.inventory.IInventory;)V", arg0, arg1)); }

    void displayGUIBook(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGUIBook", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    bool interactWith(Entity arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interactWith", "(Lnet.minecraft.entity.Entity;)Z", arg0)); }

    ItemStack getCurrentEquippedItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getCurrentEquippedItem", "()Lnet.minecraft.item.ItemStack;", )); }

    void destroyCurrentEquippedItem() { (*javaClass->invokeMethod<void>(this->object, "destroyCurrentEquippedItem", "()V", )); }

    ItemStack getHeldItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getHeldItem", "()Lnet.minecraft.item.ItemStack;", )); }

    void onCriticalHit(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onCriticalHit", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onEnchantmentCritical(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEnchantmentCritical", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void respawnPlayer() { (*javaClass->invokeMethod<void>(this->object, "respawnPlayer", "()V", )); }

    GameProfile getGameProfile() { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "getGameProfile", "()Lcom.mojang.authlib.GameProfile;", )); }

    void func_175139_a(EnumFacing arg0) { (*javaClass->invokeMethod<void>(this->object, "func_175139_a", "(Lnet.minecraft.util.EnumFacing;)V", arg0)); }

    void setSpawnPoint(BlockPos arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setSpawnPoint", "(Lnet.minecraft.util.BlockPos;Z)V", arg0, arg1)); }

    static BlockPos getBedSpawnLocation(World arg0, BlockPos arg1, bool arg2) { return BlockPos(*javaClass->invokeStaticMethod<jobject>(this->object, "getBedSpawnLocation", "(Lnet.minecraft.world.World;Lnet.minecraft.util.BlockPos;Z)Lnet.minecraft.util.BlockPos;", arg0, arg1, arg2)); }

    float getBedOrientationInDegrees() { return float(*javaClass->invokeMethod<float>(this->object, "getBedOrientationInDegrees", "()F", )); }

    bool isPlayerFullyAsleep() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlayerFullyAsleep", "()Z", )); }

    int getSleepTimer() { return int(*javaClass->invokeMethod<int>(this->object, "getSleepTimer", "()I", )); }

    void addChatComponentMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatComponentMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    BlockPos getBedLocation() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getBedLocation", "()Lnet.minecraft.util.BlockPos;", )); }

    bool isSpawnForced() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSpawnForced", "()Z", )); }

    Team getTeam() { return Team(*javaClass->invokeMethod<jobject>(this->object, "getTeam", "()Lnet.minecraft.scoreboard.Team;", )); }

    void addStat(StatBase arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addStat", "(Lnet.minecraft.stats.StatBase;I)V", arg0, arg1)); }

    static UUID getUUID(GameProfile arg0) { return UUID(*javaClass->invokeStaticMethod<jobject>(this->object, "getUUID", "(Lcom.mojang.authlib.GameProfile;)Ljava.util.UUID;", arg0)); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    bool isBlocking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBlocking", "()Z", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    bool isInBed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInBed", "()Z", )); }

    void playSound(String arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "playSound", "(Ljava.lang.String;FF)V", arg0, arg1, arg2)); }

    int getScore() { return int(*javaClass->invokeMethod<int>(this->object, "getScore", "()I", )); }

    void setScore(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setScore", "(I)V", arg0)); }

    void addScore(int arg0) { (*javaClass->invokeMethod<void>(this->object, "addScore", "(I)V", arg0)); }

    void onDeath(DamageSource arg0) { (*javaClass->invokeMethod<void>(this->object, "onDeath", "(Lnet.minecraft.util.DamageSource;)V", arg0)); }

    EntityItem dropItem(ItemStack arg0, bool arg1, bool arg2) { return EntityItem(*javaClass->invokeMethod<jobject>(this->object, "dropItem", "(Lnet.minecraft.item.ItemStack;ZZ)Lnet.minecraft.entity.item.EntityItem;", arg0, arg1, arg2)); }

    void displayGui(IInteractionObject arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGui", "(Lnet.minecraft.world.IInteractionObject;)V", arg0)); }

    double getYOffset() { return double(*javaClass->invokeMethod<double>(this->object, "getYOffset", "()D", )); }

    void setDead() { (*javaClass->invokeMethod<void>(this->object, "setDead", "()V", )); }

    bool isUser() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUser", "()Z", )); }

    EntityPlayer_EnumStatus trySleep(BlockPos arg0) { return EntityPlayer_EnumStatus(*javaClass->invokeMethod<jobject>(this->object, "trySleep", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.entity.player.EntityPlayer$EnumStatus;", arg0)); }

    void fall(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }

    void setInWeb() { (*javaClass->invokeMethod<void>(this->object, "setInWeb", "()V", )); }

    int xpBarCap() { return int(*javaClass->invokeMethod<int>(this->object, "xpBarCap", "()I", )); }

    int getXPSeed() { return int(*javaClass->invokeMethod<int>(this->object, "getXPSeed", "()I", )); }

    bool canEat(bool arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canEat", "(Z)Z", arg0)); }

    bool shouldHeal() { return bool(*javaClass->invokeMethod<boolean>(this->object, "shouldHeal", "()Z", )); }

    bool isPlayer() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPlayer", "()Z", )); }

    bool canOpen(LockCode arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canOpen", "(Lnet.minecraft.world.LockCode;)Z", arg0)); }

    bool isWearing(EnumPlayerModelParts arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWearing", "(Lnet.minecraft.entity.player.EnumPlayerModelParts;)Z", arg0)); }

    bool getAlwaysRenderNameTagForRender() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAlwaysRenderNameTagForRender", "()Z", )); }

    EntityItem dropPlayerItemWithRandomChoice(ItemStack arg0, bool arg1) { return EntityItem(*javaClass->invokeMethod<jobject>(this->object, "dropPlayerItemWithRandomChoice", "(Lnet.minecraft.item.ItemStack;Z)Lnet.minecraft.entity.item.EntityItem;", arg0, arg1)); }

    void attackTargetEntityWithCurrentItem(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "attackTargetEntityWithCurrentItem", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    void jump() { (*javaClass->invokeMethod<void>(this->object, "jump", "()V", )); }

    IChatComponent getDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

};


/**
 * Classpath: net.minecraft.scoreboard.ScorePlayerTeam
 * Package name: net.minecraft.scoreboard
 */
class ScorePlayerTeam : public Team {
protected:
    const inline static char *className = "net.minecraft.scoreboard.ScorePlayerTeam";
public:
    STATICINITIALIZE;

    ScorePlayerTeam(jobject object) : JavaObject(object) {}

    EnumChatFormatting getChatFormat() { return EnumChatFormatting(*javaClass->invokeMethod<jobject>(this->object, "getChatFormat", "()Lnet.minecraft.util.EnumChatFormatting;", )); }

    bool getAllowFriendlyFire() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAllowFriendlyFire", "()Z", )); }

    Team_EnumVisible getDeathMessageVisibility() { return Team_EnumVisible(*javaClass->invokeMethod<jobject>(this->object, "getDeathMessageVisibility", "()Lnet.minecraft.scoreboard.Team$EnumVisible;", )); }

    void setTeamName(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setTeamName", "(Ljava.lang.String;)V", arg0)); }

    void setNamePrefix(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setNamePrefix", "(Ljava.lang.String;)V", arg0)); }

    void setNameSuffix(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setNameSuffix", "(Ljava.lang.String;)V", arg0)); }

    void setChatFormat(EnumChatFormatting arg0) { (*javaClass->invokeMethod<void>(this->object, "setChatFormat", "(Lnet.minecraft.util.EnumChatFormatting;)V", arg0)); }

    void func_98298_a(int arg0) { (*javaClass->invokeMethod<void>(this->object, "func_98298_a", "(I)V", arg0)); }

    void setNameTagVisibility(Team_EnumVisible arg0) { (*javaClass->invokeMethod<void>(this->object, "setNameTagVisibility", "(Lnet.minecraft.scoreboard.Team$EnumVisible;)V", arg0)); }

    Team_EnumVisible getNameTagVisibility() { return Team_EnumVisible(*javaClass->invokeMethod<jobject>(this->object, "getNameTagVisibility", "()Lnet.minecraft.scoreboard.Team$EnumVisible;", )); }

    String getTeamName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getTeamName", "()Ljava.lang.String;", )); }

    String getColorPrefix() { return String(*javaClass->invokeMethod<jobject>(this->object, "getColorPrefix", "()Ljava.lang.String;", )); }

    String getColorSuffix() { return String(*javaClass->invokeMethod<jobject>(this->object, "getColorSuffix", "()Ljava.lang.String;", )); }

    void setAllowFriendlyFire(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setAllowFriendlyFire", "(Z)V", arg0)); }

    void setDeathMessageVisibility(Team_EnumVisible arg0) { (*javaClass->invokeMethod<void>(this->object, "setDeathMessageVisibility", "(Lnet.minecraft.scoreboard.Team$EnumVisible;)V", arg0)); }

    int func_98299_i() { return int(*javaClass->invokeMethod<int>(this->object, "func_98299_i", "()I", )); }

    String getRegisteredName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getRegisteredName", "()Ljava.lang.String;", )); }

    Collection getMembershipCollection() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "getMembershipCollection", "()Ljava.util.Collection;", )); }

    String formatString(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "formatString", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    static String formatPlayerName(Team arg0, String arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "formatPlayerName", "(Lnet.minecraft.scoreboard.Team;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    bool getSeeFriendlyInvisiblesEnabled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getSeeFriendlyInvisiblesEnabled", "()Z", )); }

    void setSeeFriendlyInvisiblesEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSeeFriendlyInvisiblesEnabled", "(Z)V", arg0)); }

};


/**
 * Classpath: net.minecraft.tileentity.TileEntitySign
 * Package name: net.minecraft.tileentity
 */
class TileEntitySign : public TileEntity {
protected:
    const inline static char *className = "net.minecraft.tileentity.TileEntitySign";
public:
    STATICINITIALIZE;

    TileEntitySign(jobject object) : JavaObject(object) {}

    void readFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool getIsEditable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsEditable", "()Z", )); }

    Packet getDescriptionPacket() { return Packet(*javaClass->invokeMethod<jobject>(this->object, "getDescriptionPacket", "()Lnet.minecraft.network.Packet;", )); }

    bool func_183000_F() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_183000_F", "()Z", )); }

    void setEditable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEditable", "(Z)V", arg0)); }

    bool executeCommand(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "executeCommand", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    CommandResultStats getStats() { return CommandResultStats(*javaClass->invokeMethod<jobject>(this->object, "getStats", "()Lnet.minecraft.command.CommandResultStats;", )); }

    void setPlayer(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void writeToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    EntityPlayer getPlayer() { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getPlayer", "()Lnet.minecraft.entity.player.EntityPlayer;", )); }

};


/**
 * Classpath: net.minecraft.network.PacketBuffer
 * Package name: net.minecraft.network
 */
class PacketBuffer : public ByteBuf {
protected:
    const inline static char *className = "net.minecraft.network.PacketBuffer";
public:
    STATICINITIALIZE;

    PacketBuffer(jobject object) : JavaObject(object) {}

    void writeByteArray(arr_B arg0) { (*javaClass->invokeMethod<void>(this->object, "writeByteArray", "([B)V", arg0)); }

    static int getVarIntSize(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getVarIntSize", "(I)I", arg0)); }

    void writeVarIntToBuffer(int arg0) { (*javaClass->invokeMethod<void>(this->object, "writeVarIntToBuffer", "(I)V", arg0)); }

    int readVarIntFromBuffer() { return int(*javaClass->invokeMethod<int>(this->object, "readVarIntFromBuffer", "()I", )); }

    BlockPos readBlockPos() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "readBlockPos", "()Lnet.minecraft.util.BlockPos;", )); }

    void writeBlockPos(BlockPos arg0) { (*javaClass->invokeMethod<void>(this->object, "writeBlockPos", "(Lnet.minecraft.util.BlockPos;)V", arg0)); }

    IChatComponent readChatComponent() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "readChatComponent", "()Lnet.minecraft.util.IChatComponent;", )); }

    void writeChatComponent(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "writeChatComponent", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    Enum readEnumValue(Class arg0) { return Enum(*javaClass->invokeMethod<jobject>(this->object, "readEnumValue", "(Ljava.lang.Class;)Ljava.lang.Enum;", arg0)); }

    void writeEnumValue(Enum arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEnumValue", "(Ljava.lang.Enum;)V", arg0)); }

    long readVarLong() { return long(*javaClass->invokeMethod<long>(this->object, "readVarLong", "()J", )); }

    void writeVarLong(long arg0) { (*javaClass->invokeMethod<void>(this->object, "writeVarLong", "(J)V", arg0)); }

    ByteBuf readerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "readerIndex", "()I", )); }

    int maxCapacity() { return int(*javaClass->invokeMethod<int>(this->object, "maxCapacity", "()I", )); }

    ByteBuf writerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int writerIndex() { return int(*javaClass->invokeMethod<int>(this->object, "writerIndex", "()I", )); }

    int readableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "readableBytes", "()I", )); }

    int writableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "writableBytes", "()I", )); }

    int maxWritableBytes() { return int(*javaClass->invokeMethod<int>(this->object, "maxWritableBytes", "()I", )); }

    ByteBuf markReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf markWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf resetWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf discardSomeReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    int ensureWritable(int arg0, bool arg1) { return int(*javaClass->invokeMethod<int>(this->object, "ensureWritable", "(IZ)I", arg0, arg1)); }

    ByteBuf ensureWritable(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    short getUnsignedByte(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getUnsignedByte", "(I)S", arg0)); }

    int getUnsignedShort(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedShort", "(I)I", arg0)); }

    int getUnsignedMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getUnsignedMedium", "(I)I", arg0)); }

    long getUnsignedInt(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getUnsignedInt", "(I)J", arg0)); }

    int readUnsignedMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedMedium", "()I", )); }

    long readUnsignedInt() { return long(*javaClass->invokeMethod<long>(this->object, "readUnsignedInt", "()J", )); }

    ByteBuf writeMedium(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int bytesBefore(byte arg0) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(B)I", arg0)); }

    int bytesBefore(int arg0, byte arg1) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IB)I", arg0, arg1)); }

    int bytesBefore(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "bytesBefore", "(IIB)I", arg0, arg1, arg2)); }

    int forEachByte(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int forEachByte(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByte", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int forEachByteDesc(ByteBufProcessor arg0) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(Lio.netty.buffer.ByteBufProcessor;)I", arg0)); }

    int forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2) { return int(*javaClass->invokeMethod<int>(this->object, "forEachByteDesc", "(IILio.netty.buffer.ByteBufProcessor;)I", arg0, arg1, arg2)); }

    int nioBufferCount() { return int(*javaClass->invokeMethod<int>(this->object, "nioBufferCount", "()I", )); }

    ByteBuffer internalNioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "internalNioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    bool hasMemoryAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasMemoryAddress", "()Z", )); }

    long memoryAddress() { return long(*javaClass->invokeMethod<long>(this->object, "memoryAddress", "()J", )); }

    String readStringFromBuffer(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "readStringFromBuffer", "(I)Ljava.lang.String;", arg0)); }

    void writeItemStackToBuffer(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "writeItemStackToBuffer", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    ItemStack readItemStackFromBuffer() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "readItemStackFromBuffer", "()Lnet.minecraft.item.ItemStack;", )); }

    void writeUuid(UUID arg0) { (*javaClass->invokeMethod<void>(this->object, "writeUuid", "(Ljava.util.UUID;)V", arg0)); }

    UUID readUuid() { return UUID(*javaClass->invokeMethod<jobject>(this->object, "readUuid", "()Ljava.util.UUID;", )); }

    ByteBufAllocator alloc() { return ByteBufAllocator(*javaClass->invokeMethod<jobject>(this->object, "alloc", "()Lio.netty.buffer.ByteBufAllocator;", )); }

    int getMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMedium", "(I)I", arg0)); }

    ByteBuf setMedium(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int setBytes(int arg0, InputStream arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.io.InputStream;I)I", arg0, arg1, arg2)); }

    int setBytes(int arg0, ScatteringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf setBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf setZero(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setZero", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    int readMedium() { return int(*javaClass->invokeMethod<int>(this->object, "readMedium", "()I", )); }

    ByteBuf readSlice(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readSlice", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeZero(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuffer nioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    ByteBuffer nioBuffer() { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "()Ljava.nio.ByteBuffer;", )); }

    ReferenceCounted retain() { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.util.ReferenceCounted;", )); }

    ByteBuf retain(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ReferenceCounted retain(int arg0) { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.util.ReferenceCounted;", arg0)); }

    ByteBuf retain() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.buffer.ByteBuf;", )); }

    int refCnt() { return int(*javaClass->invokeMethod<int>(this->object, "refCnt", "()I", )); }

    ByteBuf writeByte(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    void writeNBTTagCompoundToBuffer(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeNBTTagCompoundToBuffer", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    NBTTagCompound readNBTTagCompoundFromBuffer() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "readNBTTagCompoundFromBuffer", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    ByteBuf setIndex(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    String toString(Charset arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(Ljava.nio.charset.Charset;)Ljava.lang.String;", arg0)); }

    String toString(int arg0, int arg1, Charset arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "(IILjava.nio.charset.Charset;)Ljava.lang.String;", arg0, arg1, arg2)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    int compareTo(ByteBuf arg0) { return int(*javaClass->invokeMethod<int>(this->object, "compareTo", "(Lio.netty.buffer.ByteBuf;)I", arg0)); }

    int indexOf(int arg0, int arg1, byte arg2) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(IIB)I", arg0, arg1, arg2)); }

    bool getBoolean(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getBoolean", "(I)Z", arg0)); }

    byte getByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(I)B", arg0)); }

    short getShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "getShort", "(I)S", arg0)); }

    char getChar(int arg0) { return char(*javaClass->invokeMethod<char>(this->object, "getChar", "(I)C", arg0)); }

    int getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getInt", "(I)I", arg0)); }

    long getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getLong", "(I)J", arg0)); }

    float getFloat(int arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getFloat", "(I)F", arg0)); }

    double getDouble(int arg0) { return double(*javaClass->invokeMethod<double>(this->object, "getDouble", "(I)D", arg0)); }

    ByteBuf clear() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf getBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    int getBytes(int arg0, GatheringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getBytes", "(ILjava.nio.channels.GatheringByteChannel;I)I", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf getBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, OutputStream arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    ByteBuf writeInt(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    int readInt() { return int(*javaClass->invokeMethod<int>(this->object, "readInt", "()I", )); }

    ByteBuf setBoolean(int arg0, bool arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setByte(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setByte", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setChar(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setChar", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setShort(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setShort", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setInt(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setInt", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setLong(int arg0, long arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setFloat(int arg0, float arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setDouble(int arg0, double arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf copy(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf copy() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf unwrap() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "unwrap", "()Lio.netty.buffer.ByteBuf;", )); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    ByteBuf capacity(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "capacity", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    bool release(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "(I)Z", arg0)); }

    bool release() { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "()Z", )); }

    ByteBuf slice(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf slice() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "slice", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf duplicate() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "duplicate", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf order(ByteOrder arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "order", "(Ljava.nio.ByteOrder;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    int readUnsignedShort() { return int(*javaClass->invokeMethod<int>(this->object, "readUnsignedShort", "()I", )); }

    long readLong() { return long(*javaClass->invokeMethod<long>(this->object, "readLong", "()J", )); }

    byte readByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "readByte", "()B", )); }

    ByteBuf writeChar(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    char readChar() { return char(*javaClass->invokeMethod<char>(this->object, "readChar", "()C", )); }

    int readBytes(GatheringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "readBytes", "(Ljava.nio.channels.GatheringByteChannel;I)I", arg0, arg1)); }

    ByteBuf readBytes(OutputStream arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf readBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    int writeBytes(ScatteringByteChannel arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1)); }

    int writeBytes(InputStream arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "writeBytes", "(Ljava.io.InputStream;I)I", arg0, arg1)); }

    ByteBuf writeBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    short readShort() { return short(*javaClass->invokeMethod<short>(this->object, "readShort", "()S", )); }

    ByteBuf writeFloat(float arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio.netty.buffer.ByteBuf;", arg0)); }

    float readFloat() { return float(*javaClass->invokeMethod<float>(this->object, "readFloat", "()F", )); }

    PacketBuffer writeString(String arg0) { return PacketBuffer(*javaClass->invokeMethod<jobject>(this->object, "writeString", "(Ljava.lang.String;)Lnet.minecraft.network.PacketBuffer;", arg0)); }

    bool isReadable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "(I)Z", arg0)); }

    bool isReadable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isReadable", "()Z", )); }

    bool isWritable(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "(I)Z", arg0)); }

    bool isWritable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWritable", "()Z", )); }

    ByteBuf writeLong(long arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf skipBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    bool readBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "readBoolean", "()Z", )); }

    short readUnsignedByte() { return short(*javaClass->invokeMethod<short>(this->object, "readUnsignedByte", "()S", )); }

    double readDouble() { return double(*javaClass->invokeMethod<double>(this->object, "readDouble", "()D", )); }

    ByteBuf writeBoolean(bool arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeShort(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeDouble(double arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio.netty.buffer.ByteBuf;", arg0)); }

};


/**
 * Classpath: io.netty.buffer.AbstractReferenceCountedByteBuf
 * Package name: io.netty.buffer
 */
class AbstractReferenceCountedByteBuf : public AbstractByteBuf {
protected:
    const inline static char *className = "io.netty.buffer.AbstractReferenceCountedByteBuf";
public:
    STATICINITIALIZE;

    AbstractReferenceCountedByteBuf(jobject object) : JavaObject(object) {}

    void deallocate() { (*javaClass->invokeMethod<void>(this->object, "deallocate", "()V", )); }

    void setRefCnt(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setRefCnt", "(I)V", arg0)); }

    ReferenceCounted retain(int arg0) { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.util.ReferenceCounted;", arg0)); }

    ReferenceCounted retain() { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.util.ReferenceCounted;", )); }

    ByteBuf retain(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf retain() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.buffer.ByteBuf;", )); }

    int refCnt() { return int(*javaClass->invokeMethod<int>(this->object, "refCnt", "()I", )); }

    bool release(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "(I)Z", arg0)); }

    bool release() { return bool(*javaClass->invokeMethod<boolean>(this->object, "release", "()Z", )); }

};


/**
 * Classpath: java.util.ArrayList
 * Package name: java.util
 */
class ArrayList : public AbstractList {
protected:
    const inline static char *className = "java.util.ArrayList";
public:
    STATICINITIALIZE;

    ArrayList(jobject object) : JavaObject(object) {}

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    void add(Object arg0, Object_interface arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.Object;[Ljava.lang.Object;I)V", arg0, arg1, arg2)); }

    void add(int arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(ILjava.lang.Object;)V", arg0, arg1)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    Object remove(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(I)Ljava.lang.Object;", arg0)); }

    Object get(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(I)Ljava.lang.Object;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    int indexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "indexOf", "(Ljava.lang.Object;)I", arg0)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    int lastIndexOf(Object arg0) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOf", "(Ljava.lang.Object;)I", arg0)); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    void replaceAll(UnaryOperator arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.UnaryOperator;)V", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    List subList(int arg0, int arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "subList", "(II)Ljava.util.List;", arg0, arg1)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    bool addAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool addAll(int arg0, Collection arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "addAll", "(ILjava.util.Collection;)Z", arg0, arg1)); }

    Object set(int arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "set", "(ILjava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void forEach(Consumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.Consumer;)V", arg0)); }

    void ensureCapacity(int arg0) { (*javaClass->invokeMethod<void>(this->object, "ensureCapacity", "(I)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    Object elementData(int arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "elementData", "(I)Ljava.lang.Object;", arg0)); }

    int indexOfRange(Object arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "indexOfRange", "(Ljava.lang.Object;II)I", arg0, arg1, arg2)); }

    int lastIndexOfRange(Object arg0, int arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "lastIndexOfRange", "(Ljava.lang.Object;II)I", arg0, arg1, arg2)); }

    void rangeCheckForAdd(int arg0) { (*javaClass->invokeMethod<void>(this->object, "rangeCheckForAdd", "(I)V", arg0)); }

    void fastRemove(Object_interface arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "fastRemove", "([Ljava.lang.Object;I)V", arg0, arg1)); }

    bool equalsArrayList(ArrayList arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equalsArrayList", "(Ljava.util.ArrayList;)Z", arg0)); }

    bool equalsRange(List arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equalsRange", "(Ljava.util.List;II)Z", arg0, arg1, arg2)); }

    void checkForComodification(int arg0) { (*javaClass->invokeMethod<void>(this->object, "checkForComodification", "(I)V", arg0)); }

    int hashCodeRange(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "hashCodeRange", "(II)I", arg0, arg1)); }

    static String outOfBoundsMsg(int arg0, int arg1) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "outOfBoundsMsg", "(II)Ljava.lang.String;", arg0, arg1)); }

    String outOfBoundsMsg(int arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "outOfBoundsMsg", "(I)Ljava.lang.String;", arg0)); }

    void shiftTailOverGap(Object_interface arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "shiftTailOverGap", "([Ljava.lang.Object;II)V", arg0, arg1, arg2)); }

    bool batchRemove(Collection arg0, bool arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "batchRemove", "(Ljava.util.Collection;ZII)Z", arg0, arg1, arg2, arg3)); }

    static Object elementAt(Object_interface arg0, int arg1) { return Object(*javaClass->invokeStaticMethod<jobject>(this->object, "elementAt", "([Ljava.lang.Object;I)Ljava.lang.Object;", arg0, arg1)); }

    bool removeIf(Predicate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeIf", "(Ljava.util.function.Predicate;)Z", arg0)); }

    bool removeIf(Predicate arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeIf", "(Ljava.util.function.Predicate;II)Z", arg0, arg1, arg2)); }

    static void setBit(arr_J arg0, int arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "setBit", "([JI)V", arg0, arg1)); }

    static bool isClear(arr_J arg0, int arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isClear", "([JI)Z", arg0, arg1)); }

    void replaceAllRange(UnaryOperator arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "replaceAllRange", "(Ljava.util.function.UnaryOperator;II)V", arg0, arg1, arg2)); }

    void sort(Comparator arg0) { (*javaClass->invokeMethod<void>(this->object, "sort", "(Ljava.util.Comparator;)V", arg0)); }

    void removeRange(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "removeRange", "(II)V", arg0, arg1)); }

    bool removeAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "removeAll", "(Ljava.util.Collection;)Z", arg0)); }

    bool retainAll(Collection arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "retainAll", "(Ljava.util.Collection;)Z", arg0)); }

    ListIterator listIterator() { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "()Ljava.util.ListIterator;", )); }

    ListIterator listIterator(int arg0) { return ListIterator(*javaClass->invokeMethod<jobject>(this->object, "listIterator", "(I)Ljava.util.ListIterator;", arg0)); }

    void checkInvariants() { (*javaClass->invokeMethod<void>(this->object, "checkInvariants", "()V", )); }

};


/**
 * Classpath: net.minecraft.inventory.InventoryEnderChest
 * Package name: net.minecraft.inventory
 */
class InventoryEnderChest : public InventoryBasic {
protected:
    const inline static char *className = "net.minecraft.inventory.InventoryEnderChest";
public:
    STATICINITIALIZE;

    InventoryEnderChest(jobject object) : JavaObject(object) {}

    void loadInventoryFromNBT(NBTTagList arg0) { (*javaClass->invokeMethod<void>(this->object, "loadInventoryFromNBT", "(Lnet.minecraft.nbt.NBTTagList;)V", arg0)); }

    NBTTagList saveInventoryToNBT() { return NBTTagList(*javaClass->invokeMethod<jobject>(this->object, "saveInventoryToNBT", "()Lnet.minecraft.nbt.NBTTagList;", )); }

    void setChestTileEntity(TileEntityEnderChest arg0) { (*javaClass->invokeMethod<void>(this->object, "setChestTileEntity", "(Lnet.minecraft.tileentity.TileEntityEnderChest;)V", arg0)); }

    bool isUseableByPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUseableByPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void closeInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "closeInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void openInventory(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "openInventory", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.EntityCreature
 * Package name: net.minecraft.entity
 */
class EntityCreature : public EntityLiving {
protected:
    const inline static char *className = "net.minecraft.entity.EntityCreature";
public:
    STATICINITIALIZE;

    EntityCreature(jobject object) : JavaObject(object) {}

    void func_142017_o(float arg0) { (*javaClass->invokeMethod<void>(this->object, "func_142017_o", "(F)V", arg0)); }

    bool getCanSpawnHere() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanSpawnHere", "()Z", )); }

    float getBlockPathWeight(BlockPos arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getBlockPathWeight", "(Lnet.minecraft.util.BlockPos;)F", arg0)); }

    void setHomePosAndDistance(BlockPos arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setHomePosAndDistance", "(Lnet.minecraft.util.BlockPos;I)V", arg0, arg1)); }

    BlockPos getHomePosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getHomePosition", "()Lnet.minecraft.util.BlockPos;", )); }

    float getMaximumHomeDistance() { return float(*javaClass->invokeMethod<float>(this->object, "getMaximumHomeDistance", "()F", )); }

    void updateLeashedState() { (*javaClass->invokeMethod<void>(this->object, "updateLeashedState", "()V", )); }

    bool hasPath() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPath", "()Z", )); }

    void detachHome() { (*javaClass->invokeMethod<void>(this->object, "detachHome", "()V", )); }

    bool hasHome() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasHome", "()Z", )); }

    bool isWithinHomeDistanceFromPosition(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWithinHomeDistanceFromPosition", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    bool isWithinHomeDistanceCurrentPosition() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isWithinHomeDistanceCurrentPosition", "()Z", )); }

};


/**
 * Classpath: net.minecraft.entity.item.EntityItemFrame
 * Package name: net.minecraft.entity.item
 */
class EntityItemFrame : public EntityHanging {
protected:
    const inline static char *className = "net.minecraft.entity.item.EntityItemFrame";
public:
    STATICINITIALIZE;

    EntityItemFrame(jobject object) : JavaObject(object) {}

    bool isInRangeToRenderDist(double arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInRangeToRenderDist", "(D)Z", arg0)); }

    float getCollisionBorderSize() { return float(*javaClass->invokeMethod<float>(this->object, "getCollisionBorderSize", "()F", )); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    int func_174866_q() { return int(*javaClass->invokeMethod<int>(this->object, "func_174866_q", "()I", )); }

    void dropItemOrSelf(Entity arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "dropItemOrSelf", "(Lnet.minecraft.entity.Entity;Z)V", arg0, arg1)); }

    void setDisplayedItem(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "setDisplayedItem", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    int getWidthPixels() { return int(*javaClass->invokeMethod<int>(this->object, "getWidthPixels", "()I", )); }

    int getHeightPixels() { return int(*javaClass->invokeMethod<int>(this->object, "getHeightPixels", "()I", )); }

    void removeFrameFromMap(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "removeFrameFromMap", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void setDisplayedItemWithUpdate(ItemStack arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setDisplayedItemWithUpdate", "(Lnet.minecraft.item.ItemStack;Z)V", arg0, arg1)); }

    int getRotation() { return int(*javaClass->invokeMethod<int>(this->object, "getRotation", "()I", )); }

    void setItemRotation(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setItemRotation", "(I)V", arg0)); }

    void func_174865_a(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "func_174865_a", "(IZ)V", arg0, arg1)); }

    ItemStack getDisplayedItem() { return ItemStack(*javaClass->invokeMethod<jobject>(this->object, "getDisplayedItem", "()Lnet.minecraft.item.ItemStack;", )); }

    bool interactFirst(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interactFirst", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void onBroken(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onBroken", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

};


/**
 * Classpath: net.minecraft.entity.effect.EntityLightningBolt
 * Package name: net.minecraft.entity.effect
 */
class EntityLightningBolt : public EntityWeatherEffect {
protected:
    const inline static char *className = "net.minecraft.entity.effect.EntityLightningBolt";
public:
    STATICINITIALIZE;

    EntityLightningBolt(jobject object) : JavaObject(object) {}

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

};


/**
 * Classpath: net.minecraft.entity.player.EntityPlayerMP
 * Package name: net.minecraft.entity.player
 */
class EntityPlayerMP : public EntityPlayer {
protected:
    const inline static char *className = "net.minecraft.entity.player.EntityPlayerMP";
public:
    STATICINITIALIZE;

    EntityPlayerMP(jobject object) : JavaObject(object) {}

    void travelToDimension(int arg0) { (*javaClass->invokeMethod<void>(this->object, "travelToDimension", "(I)V", arg0)); }

    bool isSpectatedByPlayer(EntityPlayerMP arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSpectatedByPlayer", "(Lnet.minecraft.entity.player.EntityPlayerMP;)Z", arg0)); }

    void addChatMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    bool canCommandSenderUseCommand(int arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCommandSenderUseCommand", "(ILjava.lang.String;)Z", arg0, arg1)); }

    void onItemUseFinish() { (*javaClass->invokeMethod<void>(this->object, "onItemUseFinish", "()V", )); }

    void wakeUpPlayer(bool arg0, bool arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "wakeUpPlayer", "(ZZZ)V", arg0, arg1, arg2)); }

    void closeScreen() { (*javaClass->invokeMethod<void>(this->object, "closeScreen", "()V", )); }

    void mountEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "mountEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void func_175145_a(StatBase arg0) { (*javaClass->invokeMethod<void>(this->object, "func_175145_a", "(Lnet.minecraft.stats.StatBase;)V", arg0)); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    bool canAttackPlayer(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAttackPlayer", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void openEditSign(TileEntitySign arg0) { (*javaClass->invokeMethod<void>(this->object, "openEditSign", "(Lnet.minecraft.tileentity.TileEntitySign;)V", arg0)); }

    void displayVillagerTradeGui(IMerchant arg0) { (*javaClass->invokeMethod<void>(this->object, "displayVillagerTradeGui", "(Lnet.minecraft.entity.IMerchant;)V", arg0)); }

    void updateFallState(double arg0, bool arg1, Block arg2, BlockPos arg3) { (*javaClass->invokeMethod<void>(this->object, "updateFallState", "(DZLnet.minecraft.block.Block;Lnet.minecraft.util.BlockPos;)V", arg0, arg1, arg2, arg3)); }

    void onFinishedPotionEffect(PotionEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "onFinishedPotionEffect", "(Lnet.minecraft.potion.PotionEffect;)V", arg0)); }

    void onChangedPotionEffect(PotionEffect arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "onChangedPotionEffect", "(Lnet.minecraft.potion.PotionEffect;Z)V", arg0, arg1)); }

    void updatePotionMetadata() { (*javaClass->invokeMethod<void>(this->object, "updatePotionMetadata", "()V", )); }

    void onNewPotionEffect(PotionEffect arg0) { (*javaClass->invokeMethod<void>(this->object, "onNewPotionEffect", "(Lnet.minecraft.potion.PotionEffect;)V", arg0)); }

    void setPositionAndUpdate(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "setPositionAndUpdate", "(DDD)V", arg0, arg1, arg2)); }

    void sendTileEntityUpdate(TileEntity arg0) { (*javaClass->invokeMethod<void>(this->object, "sendTileEntityUpdate", "(Lnet.minecraft.tileentity.TileEntity;)V", arg0)); }

    WorldServer getServerForPlayer() { return WorldServer(*javaClass->invokeMethod<jobject>(this->object, "getServerForPlayer", "()Lnet.minecraft.world.WorldServer;", )); }

    Entity getSpectatingEntity() { return Entity(*javaClass->invokeMethod<jobject>(this->object, "getSpectatingEntity", "()Lnet.minecraft.entity.Entity;", )); }

    void setSpectatingEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "setSpectatingEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onUpdateEntity() { (*javaClass->invokeMethod<void>(this->object, "onUpdateEntity", "()V", )); }

    StatisticsFile getStatFile() { return StatisticsFile(*javaClass->invokeMethod<jobject>(this->object, "getStatFile", "()Lnet.minecraft.stats.StatisticsFile;", )); }

    void updateBiomesExplored() { (*javaClass->invokeMethod<void>(this->object, "updateBiomesExplored", "()V", )); }

    bool canPlayersAttack() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canPlayersAttack", "()Z", )); }

    void handleFalling(double arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "handleFalling", "(DZ)V", arg0, arg1)); }

    void getNextWindowId() { (*javaClass->invokeMethod<void>(this->object, "getNextWindowId", "()V", )); }

    void sendSlotContents(Container arg0, int arg1, ItemStack arg2) { (*javaClass->invokeMethod<void>(this->object, "sendSlotContents", "(Lnet.minecraft.inventory.Container;ILnet.minecraft.item.ItemStack;)V", arg0, arg1, arg2)); }

    void sendContainerToPlayer(Container arg0) { (*javaClass->invokeMethod<void>(this->object, "sendContainerToPlayer", "(Lnet.minecraft.inventory.Container;)V", arg0)); }

    void updateCraftingInventory(Container arg0, List arg1) { (*javaClass->invokeMethod<void>(this->object, "updateCraftingInventory", "(Lnet.minecraft.inventory.Container;Ljava.util.List;)V", arg0, arg1)); }

    void sendProgressBarUpdate(Container arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "sendProgressBarUpdate", "(Lnet.minecraft.inventory.Container;II)V", arg0, arg1, arg2)); }

    void func_175173_a(Container arg0, IInventory arg1) { (*javaClass->invokeMethod<void>(this->object, "func_175173_a", "(Lnet.minecraft.inventory.Container;Lnet.minecraft.inventory.IInventory;)V", arg0, arg1)); }

    void closeContainer() { (*javaClass->invokeMethod<void>(this->object, "closeContainer", "()V", )); }

    void updateHeldItem() { (*javaClass->invokeMethod<void>(this->object, "updateHeldItem", "()V", )); }

    void setEntityActionState(float arg0, float arg1, bool arg2, bool arg3) { (*javaClass->invokeMethod<void>(this->object, "setEntityActionState", "(FFZZ)V", arg0, arg1, arg2, arg3)); }

    void mountEntityAndWakeUp() { (*javaClass->invokeMethod<void>(this->object, "mountEntityAndWakeUp", "()V", )); }

    void setPlayerHealthUpdated() { (*javaClass->invokeMethod<void>(this->object, "setPlayerHealthUpdated", "()V", )); }

    String getPlayerIP() { return String(*javaClass->invokeMethod<jobject>(this->object, "getPlayerIP", "()Ljava.lang.String;", )); }

    void handleClientSettings(C15PacketClientSettings arg0) { (*javaClass->invokeMethod<void>(this->object, "handleClientSettings", "(Lnet.minecraft.network.play.client.C15PacketClientSettings;)V", arg0)); }

    EntityPlayer_EnumChatVisibility getChatVisibility() { return EntityPlayer_EnumChatVisibility(*javaClass->invokeMethod<jobject>(this->object, "getChatVisibility", "()Lnet.minecraft.entity.player.EntityPlayer$EnumChatVisibility;", )); }

    void loadResourcePack(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "loadResourcePack", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    void markPlayerActive() { (*javaClass->invokeMethod<void>(this->object, "markPlayerActive", "()V", )); }

    long getLastActiveTime() { return long(*javaClass->invokeMethod<long>(this->object, "getLastActiveTime", "()J", )); }

    IChatComponent getTabListDisplayName() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getTabListDisplayName", "()Lnet.minecraft.util.IChatComponent;", )); }

    void onItemPickup(Entity arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "onItemPickup", "(Lnet.minecraft.entity.Entity;I)V", arg0, arg1)); }

    void sendEnterCombat() { (*javaClass->invokeMethod<void>(this->object, "sendEnterCombat", "()V", )); }

    void sendEndCombat() { (*javaClass->invokeMethod<void>(this->object, "sendEndCombat", "()V", )); }

    void addExperienceLevel(int arg0) { (*javaClass->invokeMethod<void>(this->object, "addExperienceLevel", "(I)V", arg0)); }

    void removeExperienceLevel(int arg0) { (*javaClass->invokeMethod<void>(this->object, "removeExperienceLevel", "(I)V", arg0)); }

    void setItemInUse(ItemStack arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setItemInUse", "(Lnet.minecraft.item.ItemStack;I)V", arg0, arg1)); }

    void clonePlayer(EntityPlayer arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "clonePlayer", "(Lnet.minecraft.entity.player.EntityPlayer;Z)V", arg0, arg1)); }

    void sendPlayerAbilities() { (*javaClass->invokeMethod<void>(this->object, "sendPlayerAbilities", "()V", )); }

    void setGameType(WorldSettings_GameType arg0) { (*javaClass->invokeMethod<void>(this->object, "setGameType", "(Lnet.minecraft.world.WorldSettings$GameType;)V", arg0)); }

    bool isSpectator() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSpectator", "()Z", )); }

    void removeEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "removeEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void displayGUIChest(IInventory arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGUIChest", "(Lnet.minecraft.inventory.IInventory;)V", arg0)); }

    void displayGUIHorse(EntityHorse arg0, IInventory arg1) { (*javaClass->invokeMethod<void>(this->object, "displayGUIHorse", "(Lnet.minecraft.entity.passive.EntityHorse;Lnet.minecraft.inventory.IInventory;)V", arg0, arg1)); }

    void displayGUIBook(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGUIBook", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void onCriticalHit(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onCriticalHit", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onEnchantmentCritical(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEnchantmentCritical", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void addChatComponentMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatComponentMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    void addStat(StatBase arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addStat", "(Lnet.minecraft.stats.StatBase;I)V", arg0, arg1)); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void onDeath(DamageSource arg0) { (*javaClass->invokeMethod<void>(this->object, "onDeath", "(Lnet.minecraft.util.DamageSource;)V", arg0)); }

    void displayGui(IInteractionObject arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGui", "(Lnet.minecraft.world.IInteractionObject;)V", arg0)); }

    EntityPlayer_EnumStatus trySleep(BlockPos arg0) { return EntityPlayer_EnumStatus(*javaClass->invokeMethod<jobject>(this->object, "trySleep", "(Lnet.minecraft.util.BlockPos;)Lnet.minecraft.entity.player.EntityPlayer$EnumStatus;", arg0)); }

    void attackTargetEntityWithCurrentItem(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "attackTargetEntityWithCurrentItem", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void addSelfToInternalCraftingInventory() { (*javaClass->invokeMethod<void>(this->object, "addSelfToInternalCraftingInventory", "()V", )); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.server.management.UserListBans
 * Package name: net.minecraft.server.management
 */
class UserListBans : public UserList {
protected:
    const inline static char *className = "net.minecraft.server.management.UserListBans";
public:
    STATICINITIALIZE;

    UserListBans(jobject object) : JavaObject(object) {}

    UserListEntry createEntry(JsonObject arg0) { return UserListEntry(*javaClass->invokeMethod<jobject>(this->object, "createEntry", "(Lcom.google.gson.JsonObject;)Lnet.minecraft.server.management.UserListEntry;", arg0)); }

    String getObjectKey(GameProfile arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectKey", "(Lcom.mojang.authlib.GameProfile;)Ljava.lang.String;", arg0)); }

    String getObjectKey(Object arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getObjectKey", "(Ljava.lang.Object;)Ljava.lang.String;", arg0)); }

    GameProfile isUsernameBanned(String arg0) { return GameProfile(*javaClass->invokeMethod<jobject>(this->object, "isUsernameBanned", "(Ljava.lang.String;)Lcom.mojang.authlib.GameProfile;", arg0)); }

    bool isBanned(GameProfile arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBanned", "(Lcom.mojang.authlib.GameProfile;)Z", arg0)); }

};


/**
 * Classpath: com.google.gson.JsonObject
 * Package name: com.google.gson
 */
class JsonObject : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonObject";
public:
    STATICINITIALIZE;

    JsonObject(jobject object) : JavaObject(object) {}

    JsonObject getAsJsonObject(String arg0) { return JsonObject(*javaClass->invokeMethod<jobject>(this->object, "getAsJsonObject", "(Ljava.lang.String;)Lcom.google.gson.JsonObject;", arg0)); }

    JsonPrimitive getAsJsonPrimitive(String arg0) { return JsonPrimitive(*javaClass->invokeMethod<jobject>(this->object, "getAsJsonPrimitive", "(Ljava.lang.String;)Lcom.google.gson.JsonPrimitive;", arg0)); }

    void addProperty(String arg0, Boolean arg1) { (*javaClass->invokeMethod<void>(this->object, "addProperty", "(Ljava.lang.String;Ljava.lang.Boolean;)V", arg0, arg1)); }

    void addProperty(String arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "addProperty", "(Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1)); }

    void addProperty(String arg0, Character arg1) { (*javaClass->invokeMethod<void>(this->object, "addProperty", "(Ljava.lang.String;Ljava.lang.Character;)V", arg0, arg1)); }

    void addProperty(String arg0, Number arg1) { (*javaClass->invokeMethod<void>(this->object, "addProperty", "(Ljava.lang.String;Ljava.lang.Number;)V", arg0, arg1)); }

    JsonElement createJsonElement(Object arg0) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "createJsonElement", "(Ljava.lang.Object;)Lcom.google.gson.JsonElement;", arg0)); }

    JsonArray getAsJsonArray(String arg0) { return JsonArray(*javaClass->invokeMethod<jobject>(this->object, "getAsJsonArray", "(Ljava.lang.String;)Lcom.google.gson.JsonArray;", arg0)); }

    JsonElement deepCopy() { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonElement;", )); }

    JsonObject deepCopy() { return JsonObject(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonObject;", )); }

    bool has(String arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "has", "(Ljava.lang.String;)Z", arg0)); }

    void add(String arg0, JsonElement arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.String;Lcom.google.gson.JsonElement;)V", arg0, arg1)); }

    JsonElement remove(String arg0) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.String;)Lcom.google.gson.JsonElement;", arg0)); }

    JsonElement get(String arg0) { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.String;)Lcom.google.gson.JsonElement;", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

};


/**
 * Classpath: com.google.gson.JsonPrimitive
 * Package name: com.google.gson
 */
class JsonPrimitive : public JsonElement {
protected:
    const inline static char *className = "com.google.gson.JsonPrimitive";
public:
    STATICINITIALIZE;

    JsonPrimitive(jobject object) : JavaObject(object) {}

    static bool isPrimitiveOrString(Object arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isPrimitiveOrString", "(Ljava.lang.Object;)Z", arg0)); }

    String getAsString() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAsString", "()Ljava.lang.String;", )); }

    bool getAsBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getAsBoolean", "()Z", )); }

    Boolean getAsBooleanWrapper() { return Boolean(*javaClass->invokeMethod<jobject>(this->object, "getAsBooleanWrapper", "()Ljava.lang.Boolean;", )); }

    Number getAsNumber() { return Number(*javaClass->invokeMethod<jobject>(this->object, "getAsNumber", "()Ljava.lang.Number;", )); }

    char getAsCharacter() { return char(*javaClass->invokeMethod<char>(this->object, "getAsCharacter", "()C", )); }

    BigDecimal getAsBigDecimal() { return BigDecimal(*javaClass->invokeMethod<jobject>(this->object, "getAsBigDecimal", "()Ljava.math.BigDecimal;", )); }

    BigInteger getAsBigInteger() { return BigInteger(*javaClass->invokeMethod<jobject>(this->object, "getAsBigInteger", "()Ljava.math.BigInteger;", )); }

    JsonPrimitive deepCopy() { return JsonPrimitive(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonPrimitive;", )); }

    JsonElement deepCopy() { return JsonElement(*javaClass->invokeMethod<jobject>(this->object, "deepCopy", "()Lcom.google.gson.JsonElement;", )); }

    float getAsFloat() { return float(*javaClass->invokeMethod<float>(this->object, "getAsFloat", "()F", )); }

    byte getAsByte() { return byte(*javaClass->invokeMethod<byte>(this->object, "getAsByte", "()B", )); }

    short getAsShort() { return short(*javaClass->invokeMethod<short>(this->object, "getAsShort", "()S", )); }

    bool isBoolean() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBoolean", "()Z", )); }

    bool isString() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isString", "()Z", )); }

    bool isNumber() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isNumber", "()Z", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void setValue(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "setValue", "(Ljava.lang.Object;)V", arg0)); }

    static bool isIntegral(JsonPrimitive arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isIntegral", "(Lcom.google.gson.JsonPrimitive;)Z", arg0)); }

    double getAsDouble() { return double(*javaClass->invokeMethod<double>(this->object, "getAsDouble", "()D", )); }

    int getAsInt() { return int(*javaClass->invokeMethod<int>(this->object, "getAsInt", "()I", )); }

    long getAsLong() { return long(*javaClass->invokeMethod<long>(this->object, "getAsLong", "()J", )); }

};


/**
 * Classpath: net.minecraft.server.management.IPBanEntry
 * Package name: net.minecraft.server.management
 */
class IPBanEntry : public BanEntry {
protected:
    const inline static char *className = "net.minecraft.server.management.IPBanEntry";
public:
    STATICINITIALIZE;

    IPBanEntry(jobject object) : JavaObject(object) {}

    void onSerialization(JsonObject arg0) { (*javaClass->invokeMethod<void>(this->object, "onSerialization", "(Lcom.google.gson.JsonObject;)V", arg0)); }

    static String getIPFromJson(JsonObject arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getIPFromJson", "(Lcom.google.gson.JsonObject;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: net.minecraft.stats.StatisticsFile
 * Package name: net.minecraft.stats
 */
class StatisticsFile : public StatFileWriter {
protected:
    const inline static char *className = "net.minecraft.stats.StatisticsFile";
public:
    STATICINITIALIZE;

    StatisticsFile(jobject object) : JavaObject(object) {}

    bool func_150879_e() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_150879_e", "()Z", )); }

    void func_150876_a(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "func_150876_a", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    void unlockAchievement(EntityPlayer arg0, StatBase arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "unlockAchievement", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.stats.StatBase;I)V", arg0, arg1, arg2)); }

    void readStatFile() { (*javaClass->invokeMethod<void>(this->object, "readStatFile", "()V", )); }

    void saveStatFile() { (*javaClass->invokeMethod<void>(this->object, "saveStatFile", "()V", )); }

    Set func_150878_c() { return Set(*javaClass->invokeMethod<jobject>(this->object, "func_150878_c", "()Ljava.util.Set;", )); }

    void func_150877_d() { (*javaClass->invokeMethod<void>(this->object, "func_150877_d", "()V", )); }

    void sendAchievements(EntityPlayerMP arg0) { (*javaClass->invokeMethod<void>(this->object, "sendAchievements", "(Lnet.minecraft.entity.player.EntityPlayerMP;)V", arg0)); }

    Map parseJson(String arg0) { return Map(*javaClass->invokeMethod<jobject>(this->object, "parseJson", "(Ljava.lang.String;)Ljava.util.Map;", arg0)); }

    static String dumpJson(Map arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "dumpJson", "(Ljava.util.Map;)Ljava.lang.String;", arg0)); }

};


/**
 * Classpath: java.nio.channels.ClosedChannelException
 * Package name: java.nio.channels
 */
class ClosedChannelException : public IOException {
protected:
    const inline static char *className = "java.nio.channels.ClosedChannelException";
public:
    STATICINITIALIZE;

    ClosedChannelException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: io.netty.channel.ChannelOption
 * Package name: io.netty.channel
 */
class ChannelOption : public UniqueName {
protected:
    const inline static char *className = "io.netty.channel.ChannelOption";
public:
    STATICINITIALIZE;

    ChannelOption(jobject object) : JavaObject(object) {}

    static ChannelOption valueOf(String arg0) { return ChannelOption(*javaClass->invokeStaticMethod<jobject>(this->object, "valueOf", "(Ljava.lang.String;)Lio.netty.channel.ChannelOption;", arg0)); }

    void validate(Object arg0) { (*javaClass->invokeMethod<void>(this->object, "validate", "(Ljava.lang.Object;)V", arg0)); }

};


/**
 * Classpath: io.netty.channel.ChannelInboundHandlerAdapter
 * Package name: io.netty.channel
 */
class ChannelInboundHandlerAdapter : public ChannelHandlerAdapter {
protected:
    const inline static char *className = "io.netty.channel.ChannelInboundHandlerAdapter";
public:
    STATICINITIALIZE;

    ChannelInboundHandlerAdapter(jobject object) : JavaObject(object) {}

    void channelActive(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelActive", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void channelInactive(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelInactive", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void exceptionCaught(ChannelHandlerContext arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "exceptionCaught", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void channelRegistered(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelRegistered", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void channelRead(ChannelHandlerContext arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "channelRead", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Object;)V", arg0, arg1)); }

    void channelUnregistered(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelUnregistered", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void channelReadComplete(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelReadComplete", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void userEventTriggered(ChannelHandlerContext arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "userEventTriggered", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Object;)V", arg0, arg1)); }

    void channelWritabilityChanged(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelWritabilityChanged", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.command.ServerCommandManager
 * Package name: net.minecraft.command
 */
class ServerCommandManager : public CommandHandler {
protected:
    const inline static char *className = "net.minecraft.command.ServerCommandManager";
public:
    STATICINITIALIZE;

    ServerCommandManager(jobject object) : JavaObject(object) {}

    void notifyOperators(ICommandSender arg0, ICommand arg1, int arg2, String arg3, Object_interface arg4) { (*javaClass->invokeMethod<void>(this->object, "notifyOperators", "(Lnet.minecraft.command.ICommandSender;Lnet.minecraft.command.ICommand;ILjava.lang.String;[Ljava.lang.Object;)V", arg0, arg1, arg2, arg3, arg4)); }

};


/**
 * Classpath: net.minecraft.world.biome.BiomeGenBase$SpawnListEntry
 * Enclosing class: net.minecraft.world.biome.BiomeGenBase
 * Package name: net.minecraft.world.biome
 */
class BiomeGenBase_SpawnListEntry : public WeightedRandom_Item {
protected:
    const inline static char *className = "net.minecraft.world.biome.BiomeGenBase$SpawnListEntry";
public:
    STATICINITIALIZE;

    BiomeGenBase_SpawnListEntry(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.texture.TextureMap
 * Package name: net.minecraft.client.renderer.texture
 */
class TextureMap : public AbstractTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.texture.TextureMap";
public:
    STATICINITIALIZE;

    TextureMap(jobject object) : JavaObject(object) {}

    void initMissingImage() { (*javaClass->invokeMethod<void>(this->object, "initMissingImage", "()V", )); }

    void loadSprites(IResourceManager arg0, IIconCreator arg1) { (*javaClass->invokeMethod<void>(this->object, "loadSprites", "(Lnet.minecraft.client.resources.IResourceManager;Lnet.minecraft.client.renderer.texture.IIconCreator;)V", arg0, arg1)); }

    void loadTextureAtlas(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "loadTextureAtlas", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    ResourceLocation completeResourceLocation(ResourceLocation arg0, int arg1) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "completeResourceLocation", "(Lnet.minecraft.util.ResourceLocation;I)Lnet.minecraft.util.ResourceLocation;", arg0, arg1)); }

    void updateAnimations() { (*javaClass->invokeMethod<void>(this->object, "updateAnimations", "()V", )); }

    TextureAtlasSprite registerSprite(ResourceLocation arg0) { return TextureAtlasSprite(*javaClass->invokeMethod<jobject>(this->object, "registerSprite", "(Lnet.minecraft.util.ResourceLocation;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", arg0)); }

    TextureAtlasSprite getMissingSprite() { return TextureAtlasSprite(*javaClass->invokeMethod<jobject>(this->object, "getMissingSprite", "()Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", )); }

    void loadTexture(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "loadTexture", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    TextureAtlasSprite getAtlasSprite(String arg0) { return TextureAtlasSprite(*javaClass->invokeMethod<jobject>(this->object, "getAtlasSprite", "(Ljava.lang.String;)Lnet.minecraft.client.renderer.texture.TextureAtlasSprite;", arg0)); }

    void setMipmapLevels(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setMipmapLevels", "(I)V", arg0)); }

    void tick() { (*javaClass->invokeMethod<void>(this->object, "tick", "()V", )); }

};


/**
 * Classpath: net.minecraft.client.entity.AbstractClientPlayer
 * Package name: net.minecraft.client.entity
 */
class AbstractClientPlayer : public EntityPlayer {
protected:
    const inline static char *className = "net.minecraft.client.entity.AbstractClientPlayer";
public:
    STATICINITIALIZE;

    AbstractClientPlayer(jobject object) : JavaObject(object) {}

    NetworkPlayerInfo getPlayerInfo() { return NetworkPlayerInfo(*javaClass->invokeMethod<jobject>(this->object, "getPlayerInfo", "()Lnet.minecraft.client.network.NetworkPlayerInfo;", )); }

    bool hasPlayerInfo() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasPlayerInfo", "()Z", )); }

    static ResourceLocation getLocationSkin(String arg0) { return ResourceLocation(*javaClass->invokeStaticMethod<jobject>(this->object, "getLocationSkin", "(Ljava.lang.String;)Lnet.minecraft.util.ResourceLocation;", arg0)); }

    ResourceLocation getLocationSkin() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getLocationSkin", "()Lnet.minecraft.util.ResourceLocation;", )); }

    ResourceLocation getLocationCape() { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getLocationCape", "()Lnet.minecraft.util.ResourceLocation;", )); }

    static ThreadDownloadImageData getDownloadImageSkin(ResourceLocation arg0, String arg1) { return ThreadDownloadImageData(*javaClass->invokeStaticMethod<jobject>(this->object, "getDownloadImageSkin", "(Lnet.minecraft.util.ResourceLocation;Ljava.lang.String;)Lnet.minecraft.client.renderer.ThreadDownloadImageData;", arg0, arg1)); }

    String getSkinType() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSkinType", "()Ljava.lang.String;", )); }

    float getFovModifier() { return float(*javaClass->invokeMethod<float>(this->object, "getFovModifier", "()F", )); }

    bool isSpectator() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSpectator", "()Z", )); }

    bool hasSkin() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasSkin", "()Z", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.ThreadDownloadImageData
 * Package name: net.minecraft.client.renderer
 */
class ThreadDownloadImageData : public SimpleTexture {
protected:
    const inline static char *className = "net.minecraft.client.renderer.ThreadDownloadImageData";
public:
    STATICINITIALIZE;

    ThreadDownloadImageData(jobject object) : JavaObject(object) {}

    void checkTextureUploaded() { (*javaClass->invokeMethod<void>(this->object, "checkTextureUploaded", "()V", )); }

    void setBufferedImage(BufferedImage arg0) { (*javaClass->invokeMethod<void>(this->object, "setBufferedImage", "(Ljava.awt.image.BufferedImage;)V", arg0)); }

    void loadTextureFromServer() { (*javaClass->invokeMethod<void>(this->object, "loadTextureFromServer", "()V", )); }

    void loadTexture(IResourceManager arg0) { (*javaClass->invokeMethod<void>(this->object, "loadTexture", "(Lnet.minecraft.client.resources.IResourceManager;)V", arg0)); }

    int getGlTextureId() { return int(*javaClass->invokeMethod<int>(this->object, "getGlTextureId", "()I", )); }

};


/**
 * Classpath: java.awt.image.BufferedImage
 * Package name: java.awt.image
 */
class BufferedImage : public Image {
protected:
    const inline static char *className = "java.awt.image.BufferedImage";
public:
    STATICINITIALIZE;

    BufferedImage(jobject object) : JavaObject(object) {}

    Raster getData() { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getData", "()Ljava.awt.image.Raster;", )); }

    Raster getData(Rectangle arg0) { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getData", "(Ljava.awt.Rectangle;)Ljava.awt.image.Raster;", arg0)); }

    int getWidth(ImageObserver arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "(Ljava.awt.image.ImageObserver;)I", arg0)); }

    int getWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getWidth", "()I", )); }

    int getHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "()I", )); }

    int getHeight(ImageObserver arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getHeight", "(Ljava.awt.image.ImageObserver;)I", arg0)); }

    int getRGB(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getRGB", "(II)I", arg0, arg1)); }

    void setData(Raster arg0) { (*javaClass->invokeMethod<void>(this->object, "setData", "(Ljava.awt.image.Raster;)V", arg0)); }

    Object getProperty(String arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;)Ljava.lang.Object;", arg0)); }

    Object getProperty(String arg0, ImageObserver arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;Ljava.awt.image.ImageObserver;)Ljava.lang.Object;", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int getType() { return int(*javaClass->invokeMethod<int>(this->object, "getType", "()I", )); }

    ImageProducer getSource() { return ImageProducer(*javaClass->invokeMethod<jobject>(this->object, "getSource", "()Ljava.awt.image.ImageProducer;", )); }

    Vector getSources() { return Vector(*javaClass->invokeMethod<jobject>(this->object, "getSources", "()Ljava.util.Vector;", )); }

    ColorModel getColorModel() { return ColorModel(*javaClass->invokeMethod<jobject>(this->object, "getColorModel", "()Ljava.awt.image.ColorModel;", )); }

    SampleModel getSampleModel() { return SampleModel(*javaClass->invokeMethod<jobject>(this->object, "getSampleModel", "()Ljava.awt.image.SampleModel;", )); }

    int getMinX() { return int(*javaClass->invokeMethod<int>(this->object, "getMinX", "()I", )); }

    int getMinY() { return int(*javaClass->invokeMethod<int>(this->object, "getMinY", "()I", )); }

    int getNumXTiles() { return int(*javaClass->invokeMethod<int>(this->object, "getNumXTiles", "()I", )); }

    int getNumYTiles() { return int(*javaClass->invokeMethod<int>(this->object, "getNumYTiles", "()I", )); }

    int getMinTileX() { return int(*javaClass->invokeMethod<int>(this->object, "getMinTileX", "()I", )); }

    int getMinTileY() { return int(*javaClass->invokeMethod<int>(this->object, "getMinTileY", "()I", )); }

    int getTileWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getTileWidth", "()I", )); }

    int getTileHeight() { return int(*javaClass->invokeMethod<int>(this->object, "getTileHeight", "()I", )); }

    int getTileGridXOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getTileGridXOffset", "()I", )); }

    int getTileGridYOffset() { return int(*javaClass->invokeMethod<int>(this->object, "getTileGridYOffset", "()I", )); }

    Raster getTile(int arg0, int arg1) { return Raster(*javaClass->invokeMethod<jobject>(this->object, "getTile", "(II)Ljava.awt.image.Raster;", arg0, arg1)); }

    WritableRaster copyData(WritableRaster arg0) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "copyData", "(Ljava.awt.image.WritableRaster;)Ljava.awt.image.WritableRaster;", arg0)); }

    bool isAlphaPremultiplied() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAlphaPremultiplied", "()Z", )); }

    static bool isStandard(ColorModel arg0, WritableRaster arg1) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isStandard", "(Ljava.awt.image.ColorModel;Ljava.awt.image.WritableRaster;)Z", arg0, arg1)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void coerceData(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "coerceData", "(Z)V", arg0)); }

    WritableRaster getAlphaRaster() { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "getAlphaRaster", "()Ljava.awt.image.WritableRaster;", )); }

    Graphics2D createGraphics() { return Graphics2D(*javaClass->invokeMethod<jobject>(this->object, "createGraphics", "()Ljava.awt.Graphics2D;", )); }

    int getTransparency() { return int(*javaClass->invokeMethod<int>(this->object, "getTransparency", "()I", )); }

    WritableRaster getRaster() { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "getRaster", "()Ljava.awt.image.WritableRaster;", )); }

    void setRGB(int arg0, int arg1, int arg2, int arg3, arr_I arg4, int arg5, int arg6) { (*javaClass->invokeMethod<void>(this->object, "setRGB", "(IIII[III)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void setRGB(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setRGB", "(III)V", arg0, arg1, arg2)); }

    Graphics getGraphics() { return Graphics(*javaClass->invokeMethod<jobject>(this->object, "getGraphics", "()Ljava.awt.Graphics;", )); }

    BufferedImage getSubimage(int arg0, int arg1, int arg2, int arg3) { return BufferedImage(*javaClass->invokeMethod<jobject>(this->object, "getSubimage", "(IIII)Ljava.awt.image.BufferedImage;", arg0, arg1, arg2, arg3)); }

    void addTileObserver(TileObserver arg0) { (*javaClass->invokeMethod<void>(this->object, "addTileObserver", "(Ljava.awt.image.TileObserver;)V", arg0)); }

    void removeTileObserver(TileObserver arg0) { (*javaClass->invokeMethod<void>(this->object, "removeTileObserver", "(Ljava.awt.image.TileObserver;)V", arg0)); }

    bool isTileWritable(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTileWritable", "(II)Z", arg0, arg1)); }

    bool hasTileWriters() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasTileWriters", "()Z", )); }

    WritableRaster getWritableTile(int arg0, int arg1) { return WritableRaster(*javaClass->invokeMethod<jobject>(this->object, "getWritableTile", "(II)Ljava.awt.image.WritableRaster;", arg0, arg1)); }

    void releaseWritableTile(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "releaseWritableTile", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.Dimension
 * Package name: java.awt
 */
class Dimension : public Dimension2D {
protected:
    const inline static char *className = "java.awt.Dimension";
public:
    STATICINITIALIZE;

    Dimension(jobject object) : JavaObject(object) {}

    void setSize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }

    void setSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void setSize(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(DD)V", arg0, arg1)); }

    double getWidth() { return double(*javaClass->invokeMethod<double>(this->object, "getWidth", "()D", )); }

    double getHeight() { return double(*javaClass->invokeMethod<double>(this->object, "getHeight", "()D", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Dimension getSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getSize", "()Ljava.awt.Dimension;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

};


/**
 * Classpath: java.awt.Point
 * Package name: java.awt
 */
class Point : public Point2D {
protected:
    const inline static char *className = "java.awt.Point";
public:
    STATICINITIALIZE;

    Point(jobject object) : JavaObject(object) {}

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    void translate(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    void setLocation(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(Ljava.awt.Point;)V", arg0)); }

    void setLocation(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }

    void setLocation(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(DD)V", arg0, arg1)); }

    void move(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "move", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.geom.Rectangle2D
 * Package name: java.awt.geom
 */
class Rectangle2D : public RectangularShape {
protected:
    const inline static char *className = "java.awt.geom.Rectangle2D";
public:
    STATICINITIALIZE;

    Rectangle2D(jobject object) : JavaObject(object) {}

    static void union(Rectangle2D arg0, Rectangle2D arg1, Rectangle2D arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "union", "(Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;)V", arg0, arg1, arg2)); }

    void add(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(DD)V", arg0, arg1)); }

    void add(Point2D arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.awt.geom.Point2D;)V", arg0)); }

    void add(Rectangle2D arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.awt.geom.Rectangle2D;)V", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    bool contains(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool contains(double arg0, double arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(DD)Z", arg0, arg1)); }

    static void intersect(Rectangle2D arg0, Rectangle2D arg1, Rectangle2D arg2) { (*javaClass->invokeStaticMethod<void>(this->object, "intersect", "(Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;Ljava.awt.geom.Rectangle2D;)V", arg0, arg1, arg2)); }

    bool intersects(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    Rectangle2D getBounds2D() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava.awt.geom.Rectangle2D;", )); }

    void setRect(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void setRect(Rectangle2D arg0) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(Ljava.awt.geom.Rectangle2D;)V", arg0)); }

    int outcode(Point2D arg0) { return int(*javaClass->invokeMethod<int>(this->object, "outcode", "(Ljava.awt.geom.Point2D;)I", arg0)); }

    int outcode(double arg0, double arg1) { return int(*javaClass->invokeMethod<int>(this->object, "outcode", "(DD)I", arg0, arg1)); }

    Rectangle2D createIntersection(Rectangle2D arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "createIntersection", "(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    Rectangle2D createUnion(Rectangle2D arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "createUnion", "(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    PathIterator getPathIterator(AffineTransform arg0, double arg1) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;D)Ljava.awt.geom.PathIterator;", arg0, arg1)); }

    PathIterator getPathIterator(AffineTransform arg0) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.geom.PathIterator;", arg0)); }

    bool intersectsLine(double arg0, double arg1, double arg2, double arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsLine", "(DDDD)Z", arg0, arg1, arg2, arg3)); }

    bool intersectsLine(Line2D arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersectsLine", "(Ljava.awt.geom.Line2D;)Z", arg0)); }

    void setFrame(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setFrame", "(DDDD)V", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.util.Hashtable
 * Package name: java.util
 */
class Hashtable : public Dictionary {
protected:
    const inline static char *className = "java.util.Hashtable";
public:
    STATICINITIALIZE;

    Hashtable(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    Object replace(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    bool replace(Object arg0, Object arg1, Object arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1, arg2)); }

    void replaceAll(BiFunction arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.BiFunction;)V", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Enumeration elements() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "elements", "()Ljava.util.Enumeration;", )); }

    Object merge(Object arg0, Object arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    void putAll(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "putAll", "(Ljava.util.Map;)V", arg0)); }

    Object putIfAbsent(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "putIfAbsent", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object compute(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compute", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void forEach(BiConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.BiConsumer;)V", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Object computeIfAbsent(Object arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfAbsent", "(Ljava.lang.Object;Ljava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    Enumeration keys() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Ljava.util.Enumeration;", )); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Object getOrDefault(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOrDefault", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object computeIfPresent(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfPresent", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    Hashtable cloneHashtable() { return Hashtable(*javaClass->invokeMethod<jobject>(this->object, "cloneHashtable", "()Ljava.util.Hashtable;", )); }

    void defaultWriteHashtable(ObjectOutputStream arg0, int arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "defaultWriteHashtable", "(Ljava.io.ObjectOutputStream;IF)V", arg0, arg1, arg2)); }

    void rehash() { (*javaClass->invokeMethod<void>(this->object, "rehash", "()V", )); }

    void writeHashtable(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeHashtable", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void readHashtable(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readHashtable", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    Enumeration getEnumeration(int arg0) { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "getEnumeration", "(I)Ljava.util.Enumeration;", arg0)); }

    void addEntry(int arg0, Object arg1, Object arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "addEntry", "(ILjava.lang.Object;Ljava.lang.Object;I)V", arg0, arg1, arg2, arg3)); }

    void reconstitutionPut(Hashtable_Entry_interface arg0, Object arg1, Object arg2) { (*javaClass->invokeMethod<void>(this->object, "reconstitutionPut", "([Ljava.util.Hashtable$Entry;Ljava.lang.Object;Ljava.lang.Object;)V", arg0, arg1, arg2)); }

    Iterator getIterator(int arg0) { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "getIterator", "(I)Ljava.util.Iterator;", arg0)); }

};


/**
 * Classpath: java.awt.Graphics2D
 * Package name: java.awt
 */
class Graphics2D : public Graphics {
protected:
    const inline static char *className = "java.awt.Graphics2D";
public:
    STATICINITIALIZE;

    Graphics2D(jobject object) : JavaObject(object) {}

    AffineTransform getTransform() { return AffineTransform(*javaClass->invokeMethod<jobject>(this->object, "getTransform", "()Ljava.awt.geom.AffineTransform;", )); }

    void translate(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }

    void translate(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(DD)V", arg0, arg1)); }

    void draw(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "draw", "(Ljava.awt.Shape;)V", arg0)); }

    void drawString(AttributedCharacterIterator arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawString", "(Ljava.text.AttributedCharacterIterator;II)V", arg0, arg1, arg2)); }

    void drawString(AttributedCharacterIterator arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "drawString", "(Ljava.text.AttributedCharacterIterator;FF)V", arg0, arg1, arg2)); }

    void drawString(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawString", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

    void drawString(String arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "drawString", "(Ljava.lang.String;FF)V", arg0, arg1, arg2)); }

    void scale(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "scale", "(DD)V", arg0, arg1)); }

    void fill(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "fill", "(Ljava.awt.Shape;)V", arg0)); }

    void transform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "transform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    bool hit(Rectangle arg0, Shape arg1, bool arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "hit", "(Ljava.awt.Rectangle;Ljava.awt.Shape;Z)Z", arg0, arg1, arg2)); }

    void rotate(double arg0) { (*javaClass->invokeMethod<void>(this->object, "rotate", "(D)V", arg0)); }

    void rotate(double arg0, double arg1, double arg2) { (*javaClass->invokeMethod<void>(this->object, "rotate", "(DDD)V", arg0, arg1, arg2)); }

    void clip(Shape arg0) { (*javaClass->invokeMethod<void>(this->object, "clip", "(Ljava.awt.Shape;)V", arg0)); }

    Paint getPaint() { return Paint(*javaClass->invokeMethod<jobject>(this->object, "getPaint", "()Ljava.awt.Paint;", )); }

    void setPaint(Paint arg0) { (*javaClass->invokeMethod<void>(this->object, "setPaint", "(Ljava.awt.Paint;)V", arg0)); }

    void draw3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "draw3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }

    void fill3DRect(int arg0, int arg1, int arg2, int arg3, bool arg4) { (*javaClass->invokeMethod<void>(this->object, "fill3DRect", "(IIIIZ)V", arg0, arg1, arg2, arg3, arg4)); }

    bool drawImage(Image arg0, AffineTransform arg1, ImageObserver arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "drawImage", "(Ljava.awt.Image;Ljava.awt.geom.AffineTransform;Ljava.awt.image.ImageObserver;)Z", arg0, arg1, arg2)); }

    void drawImage(BufferedImage arg0, BufferedImageOp arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "drawImage", "(Ljava.awt.image.BufferedImage;Ljava.awt.image.BufferedImageOp;II)V", arg0, arg1, arg2, arg3)); }

    void drawRenderedImage(RenderedImage arg0, AffineTransform arg1) { (*javaClass->invokeMethod<void>(this->object, "drawRenderedImage", "(Ljava.awt.image.RenderedImage;Ljava.awt.geom.AffineTransform;)V", arg0, arg1)); }

    void drawRenderableImage(RenderableImage arg0, AffineTransform arg1) { (*javaClass->invokeMethod<void>(this->object, "drawRenderableImage", "(Ljava.awt.image.renderable.RenderableImage;Ljava.awt.geom.AffineTransform;)V", arg0, arg1)); }

    void drawGlyphVector(GlyphVector arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "drawGlyphVector", "(Ljava.awt.font.GlyphVector;FF)V", arg0, arg1, arg2)); }

    GraphicsConfiguration getDeviceConfiguration() { return GraphicsConfiguration(*javaClass->invokeMethod<jobject>(this->object, "getDeviceConfiguration", "()Ljava.awt.GraphicsConfiguration;", )); }

    void setComposite(Composite arg0) { (*javaClass->invokeMethod<void>(this->object, "setComposite", "(Ljava.awt.Composite;)V", arg0)); }

    void setStroke(Stroke arg0) { (*javaClass->invokeMethod<void>(this->object, "setStroke", "(Ljava.awt.Stroke;)V", arg0)); }

    void setRenderingHint(RenderingHints_Key arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "setRenderingHint", "(Ljava.awt.RenderingHints$Key;Ljava.lang.Object;)V", arg0, arg1)); }

    Object getRenderingHint(RenderingHints_Key arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getRenderingHint", "(Ljava.awt.RenderingHints$Key;)Ljava.lang.Object;", arg0)); }

    void setRenderingHints(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "setRenderingHints", "(Ljava.util.Map;)V", arg0)); }

    void addRenderingHints(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "addRenderingHints", "(Ljava.util.Map;)V", arg0)); }

    RenderingHints getRenderingHints() { return RenderingHints(*javaClass->invokeMethod<jobject>(this->object, "getRenderingHints", "()Ljava.awt.RenderingHints;", )); }

    void shear(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "shear", "(DD)V", arg0, arg1)); }

    void setTransform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "setTransform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    Composite getComposite() { return Composite(*javaClass->invokeMethod<jobject>(this->object, "getComposite", "()Ljava.awt.Composite;", )); }

    void setBackground(Color arg0) { (*javaClass->invokeMethod<void>(this->object, "setBackground", "(Ljava.awt.Color;)V", arg0)); }

    Color getBackground() { return Color(*javaClass->invokeMethod<jobject>(this->object, "getBackground", "()Ljava.awt.Color;", )); }

    Stroke getStroke() { return Stroke(*javaClass->invokeMethod<jobject>(this->object, "getStroke", "()Ljava.awt.Stroke;", )); }

    FontRenderContext getFontRenderContext() { return FontRenderContext(*javaClass->invokeMethod<jobject>(this->object, "getFontRenderContext", "()Ljava.awt.font.FontRenderContext;", )); }

};


/**
 * Classpath: java.awt.geom.Path2D$Float
 * Enclosing class: java.awt.geom.Path2D
 * Package name: java.awt.geom
 */
class Path2D_Float : public Path2D {
protected:
    const inline static char *className = "java.awt.geom.Path2D$Float";
public:
    STATICINITIALIZE;

    Path2D_Float(jobject object) : JavaObject(object) {}

    void append(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "append", "(DD)V", arg0, arg1)); }

    void append(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "append", "(FF)V", arg0, arg1)); }

    void append(PathIterator arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "append", "(Ljava.awt.geom.PathIterator;Z)V", arg0, arg1)); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void transform(AffineTransform arg0) { (*javaClass->invokeMethod<void>(this->object, "transform", "(Ljava.awt.geom.AffineTransform;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void trimToSize() { (*javaClass->invokeMethod<void>(this->object, "trimToSize", "()V", )); }

    Rectangle2D getBounds2D() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava.awt.geom.Rectangle2D;", )); }

    PathIterator getPathIterator(AffineTransform arg0) { return PathIterator(*javaClass->invokeMethod<jobject>(this->object, "getPathIterator", "(Ljava.awt.geom.AffineTransform;)Ljava.awt.geom.PathIterator;", arg0)); }

    void needRoom(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "needRoom", "(ZI)V", arg0, arg1)); }

    void moveTo(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "moveTo", "(DD)V", arg0, arg1)); }

    void moveTo(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "moveTo", "(FF)V", arg0, arg1)); }

    void lineTo(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "lineTo", "(FF)V", arg0, arg1)); }

    void lineTo(double arg0, double arg1) { (*javaClass->invokeMethod<void>(this->object, "lineTo", "(DD)V", arg0, arg1)); }

    void quadTo(float arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "quadTo", "(FFFF)V", arg0, arg1, arg2, arg3)); }

    void quadTo(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "quadTo", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void curveTo(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) { (*javaClass->invokeMethod<void>(this->object, "curveTo", "(DDDDDD)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void curveTo(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "curveTo", "(FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    Point2D getPoint(int arg0) { return Point2D(*javaClass->invokeMethod<jobject>(this->object, "getPoint", "(I)Ljava.awt.geom.Point2D;", arg0)); }

    int pointCrossings(double arg0, double arg1) { return int(*javaClass->invokeMethod<int>(this->object, "pointCrossings", "(DD)I", arg0, arg1)); }

    int rectCrossings(double arg0, double arg1, double arg2, double arg3) { return int(*javaClass->invokeMethod<int>(this->object, "rectCrossings", "(DDDD)I", arg0, arg1, arg2, arg3)); }

};


/**
 * Classpath: java.awt.geom.Rectangle2D$Float
 * Enclosing class: java.awt.geom.Rectangle2D
 * Package name: java.awt.geom
 */
class Rectangle2D_Float : public Rectangle2D {
protected:
    const inline static char *className = "java.awt.geom.Rectangle2D$Float";
public:
    STATICINITIALIZE;

    Rectangle2D_Float(jobject object) : JavaObject(object) {}

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    double getWidth() { return double(*javaClass->invokeMethod<double>(this->object, "getWidth", "()D", )); }

    double getHeight() { return double(*javaClass->invokeMethod<double>(this->object, "getHeight", "()D", )); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    Rectangle2D getBounds2D() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava.awt.geom.Rectangle2D;", )); }

    void setRect(float arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(FFFF)V", arg0, arg1, arg2, arg3)); }

    void setRect(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    void setRect(Rectangle2D arg0) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(Ljava.awt.geom.Rectangle2D;)V", arg0)); }

    int outcode(double arg0, double arg1) { return int(*javaClass->invokeMethod<int>(this->object, "outcode", "(DD)I", arg0, arg1)); }

    Rectangle2D createIntersection(Rectangle2D arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "createIntersection", "(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    Rectangle2D createUnion(Rectangle2D arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "createUnion", "(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;", arg0)); }

};


/**
 * Classpath: sun.font.FontLineMetrics
 * Package name: sun.font
 */
class FontLineMetrics : public LineMetrics {
protected:
    const inline static char *className = "sun.font.FontLineMetrics";
public:
    STATICINITIALIZE;

    FontLineMetrics(jobject object) : JavaObject(object) {}

    float getHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getHeight", "()F", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    float getAscent() { return float(*javaClass->invokeMethod<float>(this->object, "getAscent", "()F", )); }

    float getDescent() { return float(*javaClass->invokeMethod<float>(this->object, "getDescent", "()F", )); }

    float getLeading() { return float(*javaClass->invokeMethod<float>(this->object, "getLeading", "()F", )); }

    int getNumChars() { return int(*javaClass->invokeMethod<int>(this->object, "getNumChars", "()I", )); }

    int getBaselineIndex() { return int(*javaClass->invokeMethod<int>(this->object, "getBaselineIndex", "()I", )); }

    float getStrikethroughOffset() { return float(*javaClass->invokeMethod<float>(this->object, "getStrikethroughOffset", "()F", )); }

    float getStrikethroughThickness() { return float(*javaClass->invokeMethod<float>(this->object, "getStrikethroughThickness", "()F", )); }

    float getUnderlineOffset() { return float(*javaClass->invokeMethod<float>(this->object, "getUnderlineOffset", "()F", )); }

    float getUnderlineThickness() { return float(*javaClass->invokeMethod<float>(this->object, "getUnderlineThickness", "()F", )); }

};


/**
 * Classpath: java.awt.datatransfer.FlavorEvent
 * Package name: java.awt.datatransfer
 */
class FlavorEvent : public EventObject {
protected:
    const inline static char *className = "java.awt.datatransfer.FlavorEvent";
public:
    STATICINITIALIZE;

    FlavorEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.MenuBar
 * Package name: java.awt
 */
class MenuBar : public MenuComponent {
protected:
    const inline static char *className = "java.awt.MenuBar";
public:
    STATICINITIALIZE;

    MenuBar(jobject object) : JavaObject(object) {}

    bool handleShortcut(KeyEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleShortcut", "(Ljava.awt.event.KeyEvent;)Z", arg0)); }

    Menu add(Menu arg0) { return Menu(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.awt.Menu;)Ljava.awt.Menu;", arg0)); }

    void remove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(I)V", arg0)); }

    void remove(MenuComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.awt.MenuComponent;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    int getMenuCount() { return int(*javaClass->invokeMethod<int>(this->object, "getMenuCount", "()I", )); }

    Menu getMenu(int arg0) { return Menu(*javaClass->invokeMethod<jobject>(this->object, "getMenu", "(I)Ljava.awt.Menu;", arg0)); }

    int countMenus() { return int(*javaClass->invokeMethod<int>(this->object, "countMenus", "()I", )); }

    int getMenuCountImpl() { return int(*javaClass->invokeMethod<int>(this->object, "getMenuCountImpl", "()I", )); }

    Menu getMenuImpl(int arg0) { return Menu(*javaClass->invokeMethod<jobject>(this->object, "getMenuImpl", "(I)Ljava.awt.Menu;", arg0)); }

    Enumeration shortcuts() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "shortcuts", "()Ljava.util.Enumeration;", )); }

    MenuItem getShortcutMenuItem(MenuShortcut arg0) { return MenuItem(*javaClass->invokeMethod<jobject>(this->object, "getShortcutMenuItem", "(Ljava.awt.MenuShortcut;)Ljava.awt.MenuItem;", arg0)); }

    void deleteShortcut(MenuShortcut arg0) { (*javaClass->invokeMethod<void>(this->object, "deleteShortcut", "(Ljava.awt.MenuShortcut;)V", arg0)); }

    Menu getHelpMenu() { return Menu(*javaClass->invokeMethod<jobject>(this->object, "getHelpMenu", "()Ljava.awt.Menu;", )); }

    void setHelpMenu(Menu arg0) { (*javaClass->invokeMethod<void>(this->object, "setHelpMenu", "(Ljava.awt.Menu;)V", arg0)); }

    int getAccessibleChildIndex(MenuComponent arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleChildIndex", "(Ljava.awt.MenuComponent;)I", arg0)); }

};


/**
 * Classpath: java.awt.event.ComponentEvent
 * Package name: java.awt.event
 */
class ComponentEvent : public AWTEvent {
protected:
    const inline static char *className = "java.awt.event.ComponentEvent";
public:
    STATICINITIALIZE;

    ComponentEvent(jobject object) : JavaObject(object) {}

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

};


/**
 * Classpath: javax.accessibility.AccessibleState
 * Package name: javax.accessibility
 */
class AccessibleState : public AccessibleBundle {
protected:
    const inline static char *className = "javax.accessibility.AccessibleState";
public:
    STATICINITIALIZE;

    AccessibleState(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.event.FocusEvent
 * Package name: java.awt.event
 */
class FocusEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.FocusEvent";
public:
    STATICINITIALIZE;

    FocusEvent(jobject object) : JavaObject(object) {}

    FocusEvent_Cause getCause() { return FocusEvent_Cause(*javaClass->invokeMethod<jobject>(this->object, "getCause", "()Ljava.awt.event.FocusEvent$Cause;", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Object readResolve() { return Object(*javaClass->invokeMethod<jobject>(this->object, "readResolve", "()Ljava.lang.Object;", )); }

    Component getOppositeComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getOppositeComponent", "()Ljava.awt.Component;", )); }

    bool isTemporary() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTemporary", "()Z", )); }

};


/**
 * Classpath: java.awt.Menu
 * Package name: java.awt
 */
class Menu : public MenuItem {
protected:
    const inline static char *className = "java.awt.Menu";
public:
    STATICINITIALIZE;

    Menu(jobject object) : JavaObject(object) {}

    bool handleShortcut(KeyEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleShortcut", "(Ljava.awt.event.KeyEvent;)Z", arg0)); }

    void add(String arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.lang.String;)V", arg0)); }

    MenuItem add(MenuItem arg0) { return MenuItem(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.awt.MenuItem;)Ljava.awt.MenuItem;", arg0)); }

    void remove(MenuComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.awt.MenuComponent;)V", arg0)); }

    void remove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(I)V", arg0)); }

    void insert(MenuItem arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljava.awt.MenuItem;I)V", arg0, arg1)); }

    void insert(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljava.lang.String;I)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void removeAll() { (*javaClass->invokeMethod<void>(this->object, "removeAll", "()V", )); }

    MenuItem getItem(int arg0) { return MenuItem(*javaClass->invokeMethod<jobject>(this->object, "getItem", "(I)Ljava.awt.MenuItem;", arg0)); }

    int getItemCount() { return int(*javaClass->invokeMethod<int>(this->object, "getItemCount", "()I", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    Enumeration shortcuts() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "shortcuts", "()Ljava.util.Enumeration;", )); }

    MenuItem getShortcutMenuItem(MenuShortcut arg0) { return MenuItem(*javaClass->invokeMethod<jobject>(this->object, "getShortcutMenuItem", "(Ljava.awt.MenuShortcut;)Ljava.awt.MenuItem;", arg0)); }

    void deleteShortcut(MenuShortcut arg0) { (*javaClass->invokeMethod<void>(this->object, "deleteShortcut", "(Ljava.awt.MenuShortcut;)V", arg0)); }

    int getAccessibleChildIndex(MenuComponent arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getAccessibleChildIndex", "(Ljava.awt.MenuComponent;)I", arg0)); }

    int countItems() { return int(*javaClass->invokeMethod<int>(this->object, "countItems", "()I", )); }

    int countItemsImpl() { return int(*javaClass->invokeMethod<int>(this->object, "countItemsImpl", "()I", )); }

    MenuItem getItemImpl(int arg0) { return MenuItem(*javaClass->invokeMethod<jobject>(this->object, "getItemImpl", "(I)Ljava.awt.MenuItem;", arg0)); }

    void addSeparator() { (*javaClass->invokeMethod<void>(this->object, "addSeparator", "()V", )); }

    bool isTearOff() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTearOff", "()Z", )); }

    void insertSeparator(int arg0) { (*javaClass->invokeMethod<void>(this->object, "insertSeparator", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.event.PaintEvent
 * Package name: java.awt.event
 */
class PaintEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.PaintEvent";
public:
    STATICINITIALIZE;

    PaintEvent(jobject object) : JavaObject(object) {}

    Rectangle getUpdateRect() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getUpdateRect", "()Ljava.awt.Rectangle;", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void setUpdateRect(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "setUpdateRect", "(Ljava.awt.Rectangle;)V", arg0)); }

};


/**
 * Classpath: java.awt.BufferCapabilities$FlipContents
 * Enclosing class: java.awt.BufferCapabilities
 * Package name: java.awt
 */
class BufferCapabilities_FlipContents : public AttributeValue {
protected:
    const inline static char *className = "java.awt.BufferCapabilities$FlipContents";
public:
    STATICINITIALIZE;

    BufferCapabilities_FlipContents(jobject object) : JavaObject(object) {}

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

};


/**
 * Classpath: java.awt.desktop.AboutEvent
 * Package name: java.awt.desktop
 */
class AboutEvent : public AppEvent {
protected:
    const inline static char *className = "java.awt.desktop.AboutEvent";
public:
    STATICINITIALIZE;

    AboutEvent(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.desktop.OpenFilesEvent
 * Package name: java.awt.desktop
 */
class OpenFilesEvent : public FilesEvent {
protected:
    const inline static char *className = "java.awt.desktop.OpenFilesEvent";
public:
    STATICINITIALIZE;

    OpenFilesEvent(jobject object) : JavaObject(object) {}

    String getSearchTerm() { return String(*javaClass->invokeMethod<jobject>(this->object, "getSearchTerm", "()Ljava.lang.String;", )); }

};


/**
 * Classpath: javax.swing.JMenuBar
 * Package name: javax.swing
 */
class JMenuBar : public JComponent {
protected:
    const inline static char *className = "javax.swing.JMenuBar";
public:
    STATICINITIALIZE;

    JMenuBar(jobject object) : JavaObject(object) {}

    bool isSelected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelected", "()Z", )); }

    JMenu add(JMenu arg0) { return JMenu(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljavax.swing.JMenu;)Ljavax.swing.JMenu;", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void paintBorder(Graphics arg0) { (*javaClass->invokeMethod<void>(this->object, "paintBorder", "(Ljava.awt.Graphics;)V", arg0)); }

    void setSelectionModel(SingleSelectionModel arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelectionModel", "(Ljavax.swing.SingleSelectionModel;)V", arg0)); }

    void setUI(MenuBarUI arg0) { (*javaClass->invokeMethod<void>(this->object, "setUI", "(Ljavax.swing.plaf.MenuBarUI;)V", arg0)); }

    ComponentUI getUI() { return ComponentUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.ComponentUI;", )); }

    MenuBarUI getUI() { return MenuBarUI(*javaClass->invokeMethod<jobject>(this->object, "getUI", "()Ljavax.swing.plaf.MenuBarUI;", )); }

    Component getComponentAtIndex(int arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponentAtIndex", "(I)Ljava.awt.Component;", arg0)); }

    SingleSelectionModel getSelectionModel() { return SingleSelectionModel(*javaClass->invokeMethod<jobject>(this->object, "getSelectionModel", "()Ljavax.swing.SingleSelectionModel;", )); }

    int getComponentIndex(Component arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getComponentIndex", "(Ljava.awt.Component;)I", arg0)); }

    bool isBorderPainted() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBorderPainted", "()Z", )); }

    bool processKeyBinding(KeyStroke arg0, KeyEvent arg1, int arg2, bool arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "processKeyBinding", "(Ljavax.swing.KeyStroke;Ljava.awt.event.KeyEvent;IZ)Z", arg0, arg1, arg2, arg3)); }

    static bool processBindingForKeyStrokeRecursive(MenuElement arg0, KeyStroke arg1, KeyEvent arg2, int arg3, bool arg4) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "processBindingForKeyStrokeRecursive", "(Ljavax.swing.MenuElement;Ljavax.swing.KeyStroke;Ljava.awt.event.KeyEvent;IZ)Z", arg0, arg1, arg2, arg3, arg4)); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    void setSelected(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelected", "(Ljava.awt.Component;)V", arg0)); }

    void setBorderPainted(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setBorderPainted", "(Z)V", arg0)); }

    void setMargin(Insets arg0) { (*javaClass->invokeMethod<void>(this->object, "setMargin", "(Ljava.awt.Insets;)V", arg0)); }

    Insets getMargin() { return Insets(*javaClass->invokeMethod<jobject>(this->object, "getMargin", "()Ljava.awt.Insets;", )); }

    void menuSelectionChanged(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "menuSelectionChanged", "(Z)V", arg0)); }

    void processKeyEvent(KeyEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    void processMouseEvent(MouseEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava.awt.event.MouseEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    int getMenuCount() { return int(*javaClass->invokeMethod<int>(this->object, "getMenuCount", "()I", )); }

    JMenu getMenu(int arg0) { return JMenu(*javaClass->invokeMethod<jobject>(this->object, "getMenu", "(I)Ljavax.swing.JMenu;", arg0)); }

    JMenu getHelpMenu() { return JMenu(*javaClass->invokeMethod<jobject>(this->object, "getHelpMenu", "()Ljavax.swing.JMenu;", )); }

    void setHelpMenu(JMenu arg0) { (*javaClass->invokeMethod<void>(this->object, "setHelpMenu", "(Ljavax.swing.JMenu;)V", arg0)); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

};


/**
 * Classpath: javax.swing.JMenuItem
 * Package name: javax.swing
 */
class JMenuItem : public AbstractButton {
protected:
    const inline static char *className = "javax.swing.JMenuItem";
public:
    STATICINITIALIZE;

    JMenuItem(jobject object) : JavaObject(object) {}

    void init(String arg0, Icon arg1) { (*javaClass->invokeMethod<void>(this->object, "init", "(Ljava.lang.String;Ljavax.swing.Icon;)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void setUI(MenuItemUI arg0) { (*javaClass->invokeMethod<void>(this->object, "setUI", "(Ljavax.swing.plaf.MenuItemUI;)V", arg0)); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    void menuSelectionChanged(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "menuSelectionChanged", "(Z)V", arg0)); }

    void setEnabled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEnabled", "(Z)V", arg0)); }

    void processKeyEvent(KeyEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    void processMouseEvent(MouseEvent arg0, MenuElement_interface arg1, MenuSelectionManager arg2) { (*javaClass->invokeMethod<void>(this->object, "processMouseEvent", "(Ljava.awt.event.MouseEvent;[Ljavax.swing.MenuElement;Ljavax.swing.MenuSelectionManager;)V", arg0, arg1, arg2)); }

    bool alwaysOnTop() { return bool(*javaClass->invokeMethod<boolean>(this->object, "alwaysOnTop", "()Z", )); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

    void setModel(ButtonModel arg0) { (*javaClass->invokeMethod<void>(this->object, "setModel", "(Ljavax.swing.ButtonModel;)V", arg0)); }

    void initFocusability() { (*javaClass->invokeMethod<void>(this->object, "initFocusability", "()V", )); }

    void configureAcceleratorFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "configureAcceleratorFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void setAccelerator(KeyStroke arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccelerator", "(Ljavax.swing.KeyStroke;)V", arg0)); }

    bool isArmed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isArmed", "()Z", )); }

    void setArmed(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setArmed", "(Z)V", arg0)); }

    void configurePropertiesFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "configurePropertiesFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void setIconFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "setIconFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void actionPropertyChanged(Action arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "actionPropertyChanged", "(Ljavax.swing.Action;Ljava.lang.String;)V", arg0, arg1)); }

    void processMenuDragMouseEvent(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMenuDragMouseEvent", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void processMenuKeyEvent(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processMenuKeyEvent", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void fireMenuDragMouseEntered(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuDragMouseEntered", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void fireMenuDragMouseExited(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuDragMouseExited", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void fireMenuDragMouseDragged(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuDragMouseDragged", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void fireMenuDragMouseReleased(MenuDragMouseEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuDragMouseReleased", "(Ljavax.swing.event.MenuDragMouseEvent;)V", arg0)); }

    void fireMenuKeyPressed(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuKeyPressed", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void fireMenuKeyReleased(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuKeyReleased", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    void fireMenuKeyTyped(MenuKeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "fireMenuKeyTyped", "(Ljavax.swing.event.MenuKeyEvent;)V", arg0)); }

    KeyStroke getAccelerator() { return KeyStroke(*javaClass->invokeMethod<jobject>(this->object, "getAccelerator", "()Ljavax.swing.KeyStroke;", )); }

    void largeIconChanged(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "largeIconChanged", "(Ljavax.swing.Action;)V", arg0)); }

    void smallIconChanged(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "smallIconChanged", "(Ljavax.swing.Action;)V", arg0)); }

    void addMenuDragMouseListener(MenuDragMouseListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addMenuDragMouseListener", "(Ljavax.swing.event.MenuDragMouseListener;)V", arg0)); }

    void removeMenuDragMouseListener(MenuDragMouseListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeMenuDragMouseListener", "(Ljavax.swing.event.MenuDragMouseListener;)V", arg0)); }

    void addMenuKeyListener(MenuKeyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addMenuKeyListener", "(Ljavax.swing.event.MenuKeyListener;)V", arg0)); }

    void removeMenuKeyListener(MenuKeyListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeMenuKeyListener", "(Ljavax.swing.event.MenuKeyListener;)V", arg0)); }

};


/**
 * Classpath: javax.swing.plaf.MenuItemUI
 * Package name: javax.swing.plaf
 */
class MenuItemUI : public ButtonUI {
protected:
    const inline static char *className = "javax.swing.plaf.MenuItemUI";
public:
    STATICINITIALIZE;

    MenuItemUI(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: javax.swing.KeyStroke
 * Package name: javax.swing
 */
class KeyStroke : public AWTKeyStroke {
protected:
    const inline static char *className = "javax.swing.KeyStroke";
public:
    STATICINITIALIZE;

    KeyStroke(jobject object) : JavaObject(object) {}

    static KeyStroke getKeyStroke(int arg0, int arg1, bool arg2) { return KeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyStroke", "(IIZ)Ljavax.swing.KeyStroke;", arg0, arg1, arg2)); }

    static KeyStroke getKeyStroke(String arg0) { return KeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyStroke", "(Ljava.lang.String;)Ljavax.swing.KeyStroke;", arg0)); }

    static KeyStroke getKeyStroke(int arg0, int arg1) { return KeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyStroke", "(II)Ljavax.swing.KeyStroke;", arg0, arg1)); }

    static KeyStroke getKeyStroke(char arg0, bool arg1) { return KeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyStroke", "(CZ)Ljavax.swing.KeyStroke;", arg0, arg1)); }

    static KeyStroke getKeyStroke(Character arg0, int arg1) { return KeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyStroke", "(Ljava.lang.Character;I)Ljavax.swing.KeyStroke;", arg0, arg1)); }

    static KeyStroke getKeyStroke(char arg0) { return KeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyStroke", "(C)Ljavax.swing.KeyStroke;", arg0)); }

    static KeyStroke getKeyStrokeForEvent(KeyEvent arg0) { return KeyStroke(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyStrokeForEvent", "(Ljava.awt.event.KeyEvent;)Ljavax.swing.KeyStroke;", arg0)); }

};


/**
 * Classpath: java.awt.event.ContainerEvent
 * Package name: java.awt.event
 */
class ContainerEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.ContainerEvent";
public:
    STATICINITIALIZE;

    ContainerEvent(jobject object) : JavaObject(object) {}

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Component getChild() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getChild", "()Ljava.awt.Component;", )); }

    Container getContainer() { return Container(*javaClass->invokeMethod<jobject>(this->object, "getContainer", "()Ljava.awt.Container;", )); }

};


/**
 * Classpath: javax.swing.JButton
 * Package name: javax.swing
 */
class JButton : public AbstractButton {
protected:
    const inline static char *className = "javax.swing.JButton";
public:
    STATICINITIALIZE;

    JButton(jobject object) : JavaObject(object) {}

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    bool isDefaultButton() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDefaultButton", "()Z", )); }

    bool isDefaultCapable() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDefaultCapable", "()Z", )); }

    void setDefaultCapable(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setDefaultCapable", "(Z)V", arg0)); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    void removeNotify() { (*javaClass->invokeMethod<void>(this->object, "removeNotify", "()V", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

};


/**
 * Classpath: java.beans.PropertyDescriptor
 * Package name: java.beans
 */
class PropertyDescriptor : public FeatureDescriptor {
protected:
    const inline static char *className = "java.beans.PropertyDescriptor";
public:
    STATICINITIALIZE;

    PropertyDescriptor(jobject object) : JavaObject(object) {}

    String getBaseName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getBaseName", "()Ljava.lang.String;", )); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    void appendTo(StringBuilder arg0) { (*javaClass->invokeMethod<void>(this->object, "appendTo", "(Ljava.lang.StringBuilder;)V", arg0)); }

    Method getWriteMethod() { return Method(*javaClass->invokeMethod<jobject>(this->object, "getWriteMethod", "()Ljava.lang.reflect.Method;", )); }

    Method getReadMethod() { return Method(*javaClass->invokeMethod<jobject>(this->object, "getReadMethod", "()Ljava.lang.reflect.Method;", )); }

    void setClass0(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "setClass0", "(Ljava.lang.Class;)V", arg0)); }

    void setReadMethod(Method arg0) { (*javaClass->invokeMethod<void>(this->object, "setReadMethod", "(Ljava.lang.reflect.Method;)V", arg0)); }

    void setWriteMethod(Method arg0) { (*javaClass->invokeMethod<void>(this->object, "setWriteMethod", "(Ljava.lang.reflect.Method;)V", arg0)); }

    void setReadMethod0(Method arg0) { (*javaClass->invokeMethod<void>(this->object, "setReadMethod0", "(Ljava.lang.reflect.Method;)V", arg0)); }

    void setWriteMethod0(Method arg0) { (*javaClass->invokeMethod<void>(this->object, "setWriteMethod0", "(Ljava.lang.reflect.Method;)V", arg0)); }

    Class getPropertyType() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getPropertyType", "()Ljava.lang.Class;", )); }

    void setPropertyType(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "setPropertyType", "(Ljava.lang.Class;)V", arg0)); }

    bool isConstrained() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConstrained", "()Z", )); }

    void setConstrained(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setConstrained", "(Z)V", arg0)); }

    void setBound(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setBound", "(Z)V", arg0)); }

    Class getPropertyType0() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getPropertyType0", "()Ljava.lang.Class;", )); }

    Class findPropertyType(Method arg0, Method arg1) { return Class(*javaClass->invokeMethod<jobject>(this->object, "findPropertyType", "(Ljava.lang.reflect.Method;Ljava.lang.reflect.Method;)Ljava.lang.Class;", arg0, arg1)); }

    Class getPropertyEditorClass() { return Class(*javaClass->invokeMethod<jobject>(this->object, "getPropertyEditorClass", "()Ljava.lang.Class;", )); }

    bool compareMethods(Method arg0, Method arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "compareMethods", "(Ljava.lang.reflect.Method;Ljava.lang.reflect.Method;)Z", arg0, arg1)); }

    bool isBound() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBound", "()Z", )); }

    bool isAssignable(Method arg0, Method arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAssignable", "(Ljava.lang.reflect.Method;Ljava.lang.reflect.Method;)Z", arg0, arg1)); }

    void setPropertyEditorClass(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "setPropertyEditorClass", "(Ljava.lang.Class;)V", arg0)); }

    PropertyEditor createPropertyEditor(Object arg0) { return PropertyEditor(*javaClass->invokeMethod<jobject>(this->object, "createPropertyEditor", "(Ljava.lang.Object;)Ljava.beans.PropertyEditor;", arg0)); }

    void updateGenericsFor(Class arg0) { (*javaClass->invokeMethod<void>(this->object, "updateGenericsFor", "(Ljava.lang.Class;)V", arg0)); }

};


/**
 * Classpath: javax.swing.JMenu$WinListener
 * Enclosing class: javax.swing.JMenu
 * Package name: javax.swing
 */
class JMenu_WinListener : public WindowAdapter {
protected:
    const inline static char *className = "javax.swing.JMenu$WinListener";
public:
    STATICINITIALIZE;

    JMenu_WinListener(jobject object) : JavaObject(object) {}

    void windowClosing(WindowEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "windowClosing", "(Ljava.awt.event.WindowEvent;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.WindowEvent
 * Package name: java.awt.event
 */
class WindowEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.WindowEvent";
public:
    STATICINITIALIZE;

    WindowEvent(jobject object) : JavaObject(object) {}

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    Window getOppositeWindow() { return Window(*javaClass->invokeMethod<jobject>(this->object, "getOppositeWindow", "()Ljava.awt.Window;", )); }

    Window getWindow() { return Window(*javaClass->invokeMethod<jobject>(this->object, "getWindow", "()Ljava.awt.Window;", )); }

    int getOldState() { return int(*javaClass->invokeMethod<int>(this->object, "getOldState", "()I", )); }

    int getNewState() { return int(*javaClass->invokeMethod<int>(this->object, "getNewState", "()I", )); }

};


/**
 * Classpath: java.awt.TextField
 * Package name: java.awt
 */
class TextField : public TextComponent {
protected:
    const inline static char *className = "java.awt.TextField";
public:
    STATICINITIALIZE;

    TextField(jobject object) : JavaObject(object) {}

    void setText(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setText", "(Ljava.lang.String;)V", arg0)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Dimension preferredSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "preferredSize", "(I)Ljava.awt.Dimension;", arg0)); }

    Dimension preferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "preferredSize", "()Ljava.awt.Dimension;", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    Dimension getPreferredSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "(I)Ljava.awt.Dimension;", arg0)); }

    Dimension getPreferredSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getPreferredSize", "()Ljava.awt.Dimension;", )); }

    Dimension getMinimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "()Ljava.awt.Dimension;", )); }

    Dimension getMinimumSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getMinimumSize", "(I)Ljava.awt.Dimension;", arg0)); }

    bool eventEnabled(AWTEvent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "eventEnabled", "(Ljava.awt.AWTEvent;)Z", arg0)); }

    void processEvent(AWTEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processEvent", "(Ljava.awt.AWTEvent;)V", arg0)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    Dimension minimumSize(int arg0) { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "minimumSize", "(I)Ljava.awt.Dimension;", arg0)); }

    Dimension minimumSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "minimumSize", "()Ljava.awt.Dimension;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void processActionEvent(ActionEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processActionEvent", "(Ljava.awt.event.ActionEvent;)V", arg0)); }

    void addActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    void removeActionListener(ActionListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeActionListener", "(Ljava.awt.event.ActionListener;)V", arg0)); }

    static String replaceEOL(String arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "replaceEOL", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    void setEchoCharacter(char arg0) { (*javaClass->invokeMethod<void>(this->object, "setEchoCharacter", "(C)V", arg0)); }

    void setEchoChar(char arg0) { (*javaClass->invokeMethod<void>(this->object, "setEchoChar", "(C)V", arg0)); }

    char getEchoChar() { return char(*javaClass->invokeMethod<char>(this->object, "getEchoChar", "()C", )); }

    bool echoCharIsSet() { return bool(*javaClass->invokeMethod<boolean>(this->object, "echoCharIsSet", "()Z", )); }

    int getColumns() { return int(*javaClass->invokeMethod<int>(this->object, "getColumns", "()I", )); }

    void setColumns(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setColumns", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.dnd.DragSourceDragEvent
 * Package name: java.awt.dnd
 */
class DragSourceDragEvent : public DragSourceEvent {
protected:
    const inline static char *className = "java.awt.dnd.DragSourceDragEvent";
public:
    STATICINITIALIZE;

    DragSourceDragEvent(jobject object) : JavaObject(object) {}

    int getDropAction() { return int(*javaClass->invokeMethod<int>(this->object, "getDropAction", "()I", )); }

    int getTargetActions() { return int(*javaClass->invokeMethod<int>(this->object, "getTargetActions", "()I", )); }

    int getGestureModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getGestureModifiers", "()I", )); }

    int getGestureModifiersEx() { return int(*javaClass->invokeMethod<int>(this->object, "getGestureModifiersEx", "()I", )); }

    int getUserAction() { return int(*javaClass->invokeMethod<int>(this->object, "getUserAction", "()I", )); }

    void setNewModifiers() { (*javaClass->invokeMethod<void>(this->object, "setNewModifiers", "()V", )); }

    void setOldModifiers() { (*javaClass->invokeMethod<void>(this->object, "setOldModifiers", "()V", )); }

};


/**
 * Classpath: java.util.HashSet
 * Package name: java.util
 */
class HashSet : public AbstractSet {
protected:
    const inline static char *className = "java.util.HashSet";
public:
    STATICINITIALIZE;

    HashSet(jobject object) : JavaObject(object) {}

    bool add(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "add", "(Ljava.lang.Object;)Z", arg0)); }

    bool remove(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;)Z", arg0)); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

};


/**
 * Classpath: java.util.Properties
 * Package name: java.util
 */
class Properties : public Hashtable {
protected:
    const inline static char *className = "java.util.Properties";
public:
    STATICINITIALIZE;

    Properties(jobject object) : JavaObject(object) {}

    Object remove(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "remove", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    bool remove(Object arg0, Object arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "remove", "(Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1)); }

    Object get(Object arg0) { return Object(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.lang.Object;", arg0)); }

    Object put(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "put", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    String getProperty(String arg0) { return String(*javaClass->invokeMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;)Ljava.lang.String;", arg0)); }

    String getProperty(String arg0, String arg1) { return String(*javaClass->invokeMethod<jobject>(this->object, "getProperty", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;", arg0, arg1)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    Collection values() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "values", "()Ljava.util.Collection;", )); }

    int hashCode() { return int(*javaClass->invokeMethod<int>(this->object, "hashCode", "()I", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    void load(Reader arg0) { (*javaClass->invokeMethod<void>(this->object, "load", "(Ljava.io.Reader;)V", arg0)); }

    void load(InputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "load", "(Ljava.io.InputStream;)V", arg0)); }

    void store(OutputStream arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "store", "(Ljava.io.OutputStream;Ljava.lang.String;)V", arg0, arg1)); }

    void store(Writer arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "store", "(Ljava.io.Writer;Ljava.lang.String;)V", arg0, arg1)); }

    void clear() { (*javaClass->invokeMethod<void>(this->object, "clear", "()V", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    bool replace(Object arg0, Object arg1, Object arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Z", arg0, arg1, arg2)); }

    Object replace(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "replace", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    void replaceAll(BiFunction arg0) { (*javaClass->invokeMethod<void>(this->object, "replaceAll", "(Ljava.util.function.BiFunction;)V", arg0)); }

    int size() { return int(*javaClass->invokeMethod<int>(this->object, "size", "()I", )); }

    bool contains(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.lang.Object;)Z", arg0)); }

    void list(PrintStream arg0) { (*javaClass->invokeMethod<void>(this->object, "list", "(Ljava.io.PrintStream;)V", arg0)); }

    void list(PrintWriter arg0) { (*javaClass->invokeMethod<void>(this->object, "list", "(Ljava.io.PrintWriter;)V", arg0)); }

    Enumeration elements() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "elements", "()Ljava.util.Enumeration;", )); }

    Object merge(Object arg0, Object arg1, BiFunction arg2) { return Object(*javaClass->invokeMethod<jobject>(this->object, "merge", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1, arg2)); }

    Set entrySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entrySet", "()Ljava.util.Set;", )); }

    void putAll(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "putAll", "(Ljava.util.Map;)V", arg0)); }

    Object putIfAbsent(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "putIfAbsent", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object compute(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "compute", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    Object setProperty(String arg0, String arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "setProperty", "(Ljava.lang.String;Ljava.lang.String;)Ljava.lang.Object;", arg0, arg1)); }

    void load0(Properties_LineReader arg0) { (*javaClass->invokeMethod<void>(this->object, "load0", "(Ljava.util.Properties$LineReader;)V", arg0)); }

    void forEach(BiConsumer arg0) { (*javaClass->invokeMethod<void>(this->object, "forEach", "(Ljava.util.function.BiConsumer;)V", arg0)); }

    bool containsKey(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsKey", "(Ljava.lang.Object;)Z", arg0)); }

    Object computeIfAbsent(Object arg0, Function arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfAbsent", "(Ljava.lang.Object;Ljava.util.function.Function;)Ljava.lang.Object;", arg0, arg1)); }

    void enumerate(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "enumerate", "(Ljava.util.Map;)V", arg0)); }

    String loadConvert(arr_C arg0, int arg1, int arg2, StringBuilder arg3) { return String(*javaClass->invokeMethod<jobject>(this->object, "loadConvert", "([CIILjava.lang.StringBuilder;)Ljava.lang.String;", arg0, arg1, arg2, arg3)); }

    void store0(BufferedWriter arg0, String arg1, bool arg2) { (*javaClass->invokeMethod<void>(this->object, "store0", "(Ljava.io.BufferedWriter;Ljava.lang.String;Z)V", arg0, arg1, arg2)); }

    static void writeComments(BufferedWriter arg0, String arg1) { (*javaClass->invokeStaticMethod<void>(this->object, "writeComments", "(Ljava.io.BufferedWriter;Ljava.lang.String;)V", arg0, arg1)); }

    String saveConvert(String arg0, bool arg1, bool arg2) { return String(*javaClass->invokeMethod<jobject>(this->object, "saveConvert", "(Ljava.lang.String;ZZ)Ljava.lang.String;", arg0, arg1, arg2)); }

    void storeToXML(OutputStream arg0, String arg1, String arg2) { (*javaClass->invokeMethod<void>(this->object, "storeToXML", "(Ljava.io.OutputStream;Ljava.lang.String;Ljava.lang.String;)V", arg0, arg1, arg2)); }

    void storeToXML(OutputStream arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "storeToXML", "(Ljava.io.OutputStream;Ljava.lang.String;)V", arg0, arg1)); }

    void storeToXML(OutputStream arg0, String arg1, Charset arg2) { (*javaClass->invokeMethod<void>(this->object, "storeToXML", "(Ljava.io.OutputStream;Ljava.lang.String;Ljava.nio.charset.Charset;)V", arg0, arg1, arg2)); }

    Enumeration keys() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "keys", "()Ljava.util.Enumeration;", )); }

    void enumerateStringProperties(Map arg0) { (*javaClass->invokeMethod<void>(this->object, "enumerateStringProperties", "(Ljava.util.Map;)V", arg0)); }

    Set keySet() { return Set(*javaClass->invokeMethod<jobject>(this->object, "keySet", "()Ljava.util.Set;", )); }

    bool containsValue(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "containsValue", "(Ljava.lang.Object;)Z", arg0)); }

    Object getOrDefault(Object arg0, Object arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "getOrDefault", "(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;", arg0, arg1)); }

    Object computeIfPresent(Object arg0, BiFunction arg1) { return Object(*javaClass->invokeMethod<jobject>(this->object, "computeIfPresent", "(Ljava.lang.Object;Ljava.util.function.BiFunction;)Ljava.lang.Object;", arg0, arg1)); }

    void save(OutputStream arg0, String arg1) { (*javaClass->invokeMethod<void>(this->object, "save", "(Ljava.io.OutputStream;Ljava.lang.String;)V", arg0, arg1)); }

    void loadFromXML(InputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "loadFromXML", "(Ljava.io.InputStream;)V", arg0)); }

    Enumeration propertyNames() { return Enumeration(*javaClass->invokeMethod<jobject>(this->object, "propertyNames", "()Ljava.util.Enumeration;", )); }

    Set stringPropertyNames() { return Set(*javaClass->invokeMethod<jobject>(this->object, "stringPropertyNames", "()Ljava.util.Set;", )); }

    void rehash() { (*javaClass->invokeMethod<void>(this->object, "rehash", "()V", )); }

    void writeHashtable(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeHashtable", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    void readHashtable(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readHashtable", "(Ljava.io.ObjectInputStream;)V", arg0)); }

};


/**
 * Classpath: sun.awt.PeerEvent
 * Package name: sun.awt
 */
class PeerEvent : public InvocationEvent {
protected:
    const inline static char *className = "sun.awt.PeerEvent";
public:
    STATICINITIALIZE;

    PeerEvent(jobject object) : JavaObject(object) {}

    long getFlags() { return long(*javaClass->invokeMethod<long>(this->object, "getFlags", "()J", )); }

    PeerEvent coalesceEvents(PeerEvent arg0) { return PeerEvent(*javaClass->invokeMethod<jobject>(this->object, "coalesceEvents", "(Lsun.awt.PeerEvent;)Lsun.awt.PeerEvent;", arg0)); }

};


/**
 * Classpath: net.minecraft.client.entity.EntityPlayerSP
 * Package name: net.minecraft.client.entity
 */
class EntityPlayerSP : public AbstractClientPlayer {
protected:
    const inline static char *className = "net.minecraft.client.entity.EntityPlayerSP";
public:
    STATICINITIALIZE;

    EntityPlayerSP(jobject object) : JavaObject(object) {}

    bool pushOutOfBlocks(double arg0, double arg1, double arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "pushOutOfBlocks", "(DDD)Z", arg0, arg1, arg2)); }

    void addChatMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    bool canCommandSenderUseCommand(int arg0, String arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCommandSenderUseCommand", "(ILjava.lang.String;)Z", arg0, arg1)); }

    void sendChatMessage(String arg0) { (*javaClass->invokeMethod<void>(this->object, "sendChatMessage", "(Ljava.lang.String;)V", arg0)); }

    void closeScreen() { (*javaClass->invokeMethod<void>(this->object, "closeScreen", "()V", )); }

    void mountEntity(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "mountEntity", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void updateEntityActionState() { (*javaClass->invokeMethod<void>(this->object, "updateEntityActionState", "()V", )); }

    void onLivingUpdate() { (*javaClass->invokeMethod<void>(this->object, "onLivingUpdate", "()V", )); }

    void joinEntityItemWithWorld(EntityItem arg0) { (*javaClass->invokeMethod<void>(this->object, "joinEntityItemWithWorld", "(Lnet.minecraft.entity.item.EntityItem;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    void damageEntity(DamageSource arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "damageEntity", "(Lnet.minecraft.util.DamageSource;F)V", arg0, arg1)); }

    void openEditSign(TileEntitySign arg0) { (*javaClass->invokeMethod<void>(this->object, "openEditSign", "(Lnet.minecraft.tileentity.TileEntitySign;)V", arg0)); }

    void openEditCommandBlock(CommandBlockLogic arg0) { (*javaClass->invokeMethod<void>(this->object, "openEditCommandBlock", "(Lnet.minecraft.command.server.CommandBlockLogic;)V", arg0)); }

    void displayVillagerTradeGui(IMerchant arg0) { (*javaClass->invokeMethod<void>(this->object, "displayVillagerTradeGui", "(Lnet.minecraft.entity.IMerchant;)V", arg0)); }

    bool isServerWorld() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isServerWorld", "()Z", )); }

    void onUpdateWalkingPlayer() { (*javaClass->invokeMethod<void>(this->object, "onUpdateWalkingPlayer", "()V", )); }

    bool isCurrentViewEntity() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isCurrentViewEntity", "()Z", )); }

    void closeScreenAndDropStack() { (*javaClass->invokeMethod<void>(this->object, "closeScreenAndDropStack", "()V", )); }

    void setPlayerSPHealth(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setPlayerSPHealth", "(F)V", arg0)); }

    void sendHorseJump() { (*javaClass->invokeMethod<void>(this->object, "sendHorseJump", "()V", )); }

    float getHorseJumpPower() { return float(*javaClass->invokeMethod<float>(this->object, "getHorseJumpPower", "()F", )); }

    bool isOpenBlockSpace(BlockPos arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOpenBlockSpace", "(Lnet.minecraft.util.BlockPos;)Z", arg0)); }

    void sendPlayerAbilities() { (*javaClass->invokeMethod<void>(this->object, "sendPlayerAbilities", "()V", )); }

    bool isRidingHorse() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRidingHorse", "()Z", )); }

    void sendHorseInventory() { (*javaClass->invokeMethod<void>(this->object, "sendHorseInventory", "()V", )); }

    EntityItem dropOneItem(bool arg0) { return EntityItem(*javaClass->invokeMethod<jobject>(this->object, "dropOneItem", "(Z)Lnet.minecraft.entity.item.EntityItem;", arg0)); }

    String getClientBrand() { return String(*javaClass->invokeMethod<jobject>(this->object, "getClientBrand", "()Ljava.lang.String;", )); }

    StatFileWriter getStatFileWriter() { return StatFileWriter(*javaClass->invokeMethod<jobject>(this->object, "getStatFileWriter", "()Lnet.minecraft.stats.StatFileWriter;", )); }

    void setClientBrand(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setClientBrand", "(Ljava.lang.String;)V", arg0)); }

    void displayGUIChest(IInventory arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGUIChest", "(Lnet.minecraft.inventory.IInventory;)V", arg0)); }

    void displayGUIHorse(EntityHorse arg0, IInventory arg1) { (*javaClass->invokeMethod<void>(this->object, "displayGUIHorse", "(Lnet.minecraft.entity.passive.EntityHorse;Lnet.minecraft.inventory.IInventory;)V", arg0, arg1)); }

    void displayGUIBook(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGUIBook", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void setSprinting(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSprinting", "(Z)V", arg0)); }

    void onCriticalHit(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onCriticalHit", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void onEnchantmentCritical(Entity arg0) { (*javaClass->invokeMethod<void>(this->object, "onEnchantmentCritical", "(Lnet.minecraft.entity.Entity;)V", arg0)); }

    void respawnPlayer() { (*javaClass->invokeMethod<void>(this->object, "respawnPlayer", "()V", )); }

    void addChatComponentMessage(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "addChatComponentMessage", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    void addStat(StatBase arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "addStat", "(Lnet.minecraft.stats.StatBase;I)V", arg0, arg1)); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void playSound(String arg0, float arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "playSound", "(Ljava.lang.String;FF)V", arg0, arg1, arg2)); }

    bool isSneaking() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSneaking", "()Z", )); }

    void heal(float arg0) { (*javaClass->invokeMethod<void>(this->object, "heal", "(F)V", arg0)); }

    void swingItem() { (*javaClass->invokeMethod<void>(this->object, "swingItem", "()V", )); }

    void displayGui(IInteractionObject arg0) { (*javaClass->invokeMethod<void>(this->object, "displayGui", "(Lnet.minecraft.world.IInteractionObject;)V", arg0)); }

    bool isUser() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUser", "()Z", )); }

    void setXPStats(float arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setXPStats", "(FII)V", arg0, arg1, arg2)); }

    BlockPos getPosition() { return BlockPos(*javaClass->invokeMethod<jobject>(this->object, "getPosition", "()Lnet.minecraft.util.BlockPos;", )); }

};


/**
 * Classpath: net.minecraft.client.renderer.entity.RenderPlayer
 * Package name: net.minecraft.client.renderer.entity
 */
class RenderPlayer : public RendererLivingEntity {
protected:
    const inline static char *className = "net.minecraft.client.renderer.entity.RenderPlayer";
public:
    STATICINITIALIZE;

    RenderPlayer(jobject object) : JavaObject(object) {}

    void renderOffsetLivingLabel(AbstractClientPlayer arg0, double arg1, double arg2, double arg3, String arg4, float arg5, double arg6) { (*javaClass->invokeMethod<void>(this->object, "renderOffsetLivingLabel", "(Lnet.minecraft.client.entity.AbstractClientPlayer;DDDLjava.lang.String;FD)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void renderOffsetLivingLabel(Entity arg0, double arg1, double arg2, double arg3, String arg4, float arg5, double arg6) { (*javaClass->invokeMethod<void>(this->object, "renderOffsetLivingLabel", "(Lnet.minecraft.entity.Entity;DDDLjava.lang.String;FD)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    ResourceLocation getEntityTexture(AbstractClientPlayer arg0) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getEntityTexture", "(Lnet.minecraft.client.entity.AbstractClientPlayer;)Lnet.minecraft.util.ResourceLocation;", arg0)); }

    ResourceLocation getEntityTexture(Entity arg0) { return ResourceLocation(*javaClass->invokeMethod<jobject>(this->object, "getEntityTexture", "(Lnet.minecraft.entity.Entity;)Lnet.minecraft.util.ResourceLocation;", arg0)); }

    ModelPlayer getMainModel() { return ModelPlayer(*javaClass->invokeMethod<jobject>(this->object, "getMainModel", "()Lnet.minecraft.client.model.ModelPlayer;", )); }

    ModelBase getMainModel() { return ModelBase(*javaClass->invokeMethod<jobject>(this->object, "getMainModel", "()Lnet.minecraft.client.model.ModelBase;", )); }

    void setModelVisibilities(AbstractClientPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "setModelVisibilities", "(Lnet.minecraft.client.entity.AbstractClientPlayer;)V", arg0)); }

    void preRenderCallback(EntityLivingBase arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "preRenderCallback", "(Lnet.minecraft.entity.EntityLivingBase;F)V", arg0, arg1)); }

    void preRenderCallback(AbstractClientPlayer arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "preRenderCallback", "(Lnet.minecraft.client.entity.AbstractClientPlayer;F)V", arg0, arg1)); }

    void renderLivingAt(AbstractClientPlayer arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "renderLivingAt", "(Lnet.minecraft.client.entity.AbstractClientPlayer;DDD)V", arg0, arg1, arg2, arg3)); }

    void renderLivingAt(EntityLivingBase arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "renderLivingAt", "(Lnet.minecraft.entity.EntityLivingBase;DDD)V", arg0, arg1, arg2, arg3)); }

    void rotateCorpse(EntityLivingBase arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "rotateCorpse", "(Lnet.minecraft.entity.EntityLivingBase;FFF)V", arg0, arg1, arg2, arg3)); }

    void rotateCorpse(AbstractClientPlayer arg0, float arg1, float arg2, float arg3) { (*javaClass->invokeMethod<void>(this->object, "rotateCorpse", "(Lnet.minecraft.client.entity.AbstractClientPlayer;FFF)V", arg0, arg1, arg2, arg3)); }

    void renderRightArm(AbstractClientPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "renderRightArm", "(Lnet.minecraft.client.entity.AbstractClientPlayer;)V", arg0)); }

    void renderLeftArm(AbstractClientPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "renderLeftArm", "(Lnet.minecraft.client.entity.AbstractClientPlayer;)V", arg0)); }

    void doRender(AbstractClientPlayer arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "doRender", "(Lnet.minecraft.client.entity.AbstractClientPlayer;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void doRender(EntityLivingBase arg0, double arg1, double arg2, double arg3, float arg4, float arg5) { (*javaClass->invokeMethod<void>(this->object, "doRender", "(Lnet.minecraft.entity.EntityLivingBase;DDDFF)V", arg0, arg1, arg2, arg3, arg4, arg5)); }

    void transformHeldFull3DItemLayer() { (*javaClass->invokeMethod<void>(this->object, "transformHeldFull3DItemLayer", "()V", )); }

};


/**
 * Classpath: net.minecraft.client.model.ModelBiped
 * Package name: net.minecraft.client.model
 */
class ModelBiped : public ModelBase {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelBiped";
public:
    STATICINITIALIZE;

    ModelBiped(jobject object) : JavaObject(object) {}

    void setModelAttributes(ModelBase arg0) { (*javaClass->invokeMethod<void>(this->object, "setModelAttributes", "(Lnet.minecraft.client.model.ModelBase;)V", arg0)); }

    void setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6) { (*javaClass->invokeMethod<void>(this->object, "setRotationAngles", "(FFFFFFLnet.minecraft.entity.Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void postRenderArm(float arg0) { (*javaClass->invokeMethod<void>(this->object, "postRenderArm", "(F)V", arg0)); }

    void setInvisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setInvisible", "(Z)V", arg0)); }

    void render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (*javaClass->invokeMethod<void>(this->object, "render", "(Lnet.minecraft.entity.Entity;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

};


/**
 * Classpath: net.minecraft.client.gui.GuiScreen
 * Package name: net.minecraft.client.gui
 */
class GuiScreen : public Gui {
protected:
    const inline static char *className = "net.minecraft.client.gui.GuiScreen";
public:
    STATICINITIALIZE;

    GuiScreen(jobject object) : JavaObject(object) {}

    static String getClipboardString() { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getClipboardString", "()Ljava.lang.String;", )); }

    static void setClipboardString(String arg0) { (*javaClass->invokeStaticMethod<void>(this->object, "setClipboardString", "(Ljava.lang.String;)V", arg0)); }

    void renderToolTip(ItemStack arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "renderToolTip", "(Lnet.minecraft.item.ItemStack;II)V", arg0, arg1, arg2)); }

    void drawHoveringText(List arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawHoveringText", "(Ljava.util.List;II)V", arg0, arg1, arg2)); }

    void handleComponentHover(IChatComponent arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "handleComponentHover", "(Lnet.minecraft.util.IChatComponent;II)V", arg0, arg1, arg2)); }

    bool handleComponentClick(IChatComponent arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "handleComponentClick", "(Lnet.minecraft.util.IChatComponent;)Z", arg0)); }

    void openWebLink(URI arg0) { (*javaClass->invokeMethod<void>(this->object, "openWebLink", "(Ljava.net.URI;)V", arg0)); }

    void sendChatMessage(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "sendChatMessage", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void sendChatMessage(String arg0) { (*javaClass->invokeMethod<void>(this->object, "sendChatMessage", "(Ljava.lang.String;)V", arg0)); }

    void mouseClicked(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "mouseClicked", "(III)V", arg0, arg1, arg2)); }

    void actionPerformed(GuiButton arg0) { (*javaClass->invokeMethod<void>(this->object, "actionPerformed", "(Lnet.minecraft.client.gui.GuiButton;)V", arg0)); }

    void mouseReleased(int arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "mouseReleased", "(III)V", arg0, arg1, arg2)); }

    void mouseClickMove(int arg0, int arg1, int arg2, long arg3) { (*javaClass->invokeMethod<void>(this->object, "mouseClickMove", "(IIIJ)V", arg0, arg1, arg2, arg3)); }

    void drawDefaultBackground() { (*javaClass->invokeMethod<void>(this->object, "drawDefaultBackground", "()V", )); }

    void drawWorldBackground(int arg0) { (*javaClass->invokeMethod<void>(this->object, "drawWorldBackground", "(I)V", arg0)); }

    void drawBackground(int arg0) { (*javaClass->invokeMethod<void>(this->object, "drawBackground", "(I)V", arg0)); }

    void confirmClicked(bool arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "confirmClicked", "(ZI)V", arg0, arg1)); }

    static bool isKeyComboCtrlX(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isKeyComboCtrlX", "(I)Z", arg0)); }

    static bool isKeyComboCtrlV(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isKeyComboCtrlV", "(I)Z", arg0)); }

    static bool isKeyComboCtrlC(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isKeyComboCtrlC", "(I)Z", arg0)); }

    static bool isKeyComboCtrlA(int arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isKeyComboCtrlA", "(I)Z", arg0)); }

    void onGuiClosed() { (*javaClass->invokeMethod<void>(this->object, "onGuiClosed", "()V", )); }

    void setWorldAndResolution(Minecraft arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "setWorldAndResolution", "(Lnet.minecraft.client.Minecraft;II)V", arg0, arg1, arg2)); }

    bool doesGuiPauseGame() { return bool(*javaClass->invokeMethod<boolean>(this->object, "doesGuiPauseGame", "()Z", )); }

    void handleInput() { (*javaClass->invokeMethod<void>(this->object, "handleInput", "()V", )); }

    void updateScreen() { (*javaClass->invokeMethod<void>(this->object, "updateScreen", "()V", )); }

    void handleMouseInput() { (*javaClass->invokeMethod<void>(this->object, "handleMouseInput", "()V", )); }

    void handleKeyboardInput() { (*javaClass->invokeMethod<void>(this->object, "handleKeyboardInput", "()V", )); }

    static bool isShiftKeyDown() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isShiftKeyDown", "()Z", )); }

    static bool isAltKeyDown() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isAltKeyDown", "()Z", )); }

    static bool isCtrlKeyDown() { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isCtrlKeyDown", "()Z", )); }

    void drawScreen(int arg0, int arg1, float arg2) { (*javaClass->invokeMethod<void>(this->object, "drawScreen", "(IIF)V", arg0, arg1, arg2)); }

    void keyTyped(char arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "keyTyped", "(CI)V", arg0, arg1)); }

    void setText(String arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setText", "(Ljava.lang.String;Z)V", arg0, arg1)); }

    void initGui() { (*javaClass->invokeMethod<void>(this->object, "initGui", "()V", )); }

    void onResize(Minecraft arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "onResize", "(Lnet.minecraft.client.Minecraft;II)V", arg0, arg1, arg2)); }

    void drawCreativeTabHoveringText(String arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawCreativeTabHoveringText", "(Ljava.lang.String;II)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: net.minecraft.client.gui.GuiButton
 * Package name: net.minecraft.client.gui
 */
class GuiButton : public Gui {
protected:
    const inline static char *className = "net.minecraft.client.gui.GuiButton";
public:
    STATICINITIALIZE;

    GuiButton(jobject object) : JavaObject(object) {}

    bool isMouseOver() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMouseOver", "()Z", )); }

    void drawButtonForegroundLayer(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "drawButtonForegroundLayer", "(II)V", arg0, arg1)); }

    int getHoverState(bool arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getHoverState", "(Z)I", arg0)); }

    int getButtonWidth() { return int(*javaClass->invokeMethod<int>(this->object, "getButtonWidth", "()I", )); }

    bool mousePressed(Minecraft arg0, int arg1, int arg2) { return bool(*javaClass->invokeMethod<boolean>(this->object, "mousePressed", "(Lnet.minecraft.client.Minecraft;II)Z", arg0, arg1, arg2)); }

    void playPressSound(SoundHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "playPressSound", "(Lnet.minecraft.client.audio.SoundHandler;)V", arg0)); }

    void mouseReleased(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "mouseReleased", "(II)V", arg0, arg1)); }

    void drawButton(Minecraft arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "drawButton", "(Lnet.minecraft.client.Minecraft;II)V", arg0, arg1, arg2)); }

    void setWidth(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setWidth", "(I)V", arg0)); }

    void mouseDragged(Minecraft arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "mouseDragged", "(Lnet.minecraft.client.Minecraft;II)V", arg0, arg1, arg2)); }

};


/**
 * Classpath: java.lang.IllegalArgumentException
 * Package name: java.lang
 */
class IllegalArgumentException : public RuntimeException {
protected:
    const inline static char *className = "java.lang.IllegalArgumentException";
public:
    STATICINITIALIZE;

    IllegalArgumentException(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.lang.InternalError
 * Package name: java.lang
 */
class InternalError : public VirtualMachineError {
protected:
    const inline static char *className = "java.lang.InternalError";
public:
    STATICINITIALIZE;

    InternalError(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: sun.util.calendar.BaseCalendar
 * Package name: sun.util.calendar
 */
class BaseCalendar : public AbstractCalendar {
protected:
    const inline static char *className = "sun.util.calendar.BaseCalendar";
public:
    STATICINITIALIZE;

    BaseCalendar(jobject object) : JavaObject(object) {}

    bool isLeapYear(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    bool isLeapYear(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLeapYear", "(I)Z", arg0)); }

    bool validate(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "validate", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    bool normalize(CalendarDate arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "normalize", "(Lsun.util.calendar.CalendarDate;)Z", arg0)); }

    int getMonthLength(int arg0, int arg1) { return int(*javaClass->invokeMethod<int>(this->object, "getMonthLength", "(II)I", arg0, arg1)); }

    int getMonthLength(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getMonthLength", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

    void normalizeMonth(CalendarDate arg0) { (*javaClass->invokeMethod<void>(this->object, "normalizeMonth", "(Lsun.util.calendar.CalendarDate;)V", arg0)); }

    long getFixedDate(int arg0, int arg1, int arg2, BaseCalendar_Date arg3) { return long(*javaClass->invokeMethod<long>(this->object, "getFixedDate", "(IIILsun.util.calendar.BaseCalendar$Date;)J", arg0, arg1, arg2, arg3)); }

    long getFixedDate(CalendarDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getFixedDate", "(Lsun.util.calendar.CalendarDate;)J", arg0)); }

    void getCalendarDateFromFixedDate(CalendarDate arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "getCalendarDateFromFixedDate", "(Lsun.util.calendar.CalendarDate;J)V", arg0, arg1)); }

    int getGregorianYearFromFixedDate(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getGregorianYearFromFixedDate", "(J)I", arg0)); }

    static int getDayOfWeekFromFixedDate(long arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getDayOfWeekFromFixedDate", "(J)I", arg0)); }

    int getYearLength(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getYearLength", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

    int getYearLengthInMonths(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getYearLengthInMonths", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

    int getYearFromFixedDate(long arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getYearFromFixedDate", "(J)I", arg0)); }

    long getDayOfYear(int arg0, int arg1, int arg2) { return long(*javaClass->invokeMethod<long>(this->object, "getDayOfYear", "(III)J", arg0, arg1, arg2)); }

    long getDayOfYear(CalendarDate arg0) { return long(*javaClass->invokeMethod<long>(this->object, "getDayOfYear", "(Lsun.util.calendar.CalendarDate;)J", arg0)); }

    int getDayOfWeek(CalendarDate arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getDayOfWeek", "(Lsun.util.calendar.CalendarDate;)I", arg0)); }

};


/**
 * Classpath: sun.util.calendar.Gregorian
 * Package name: sun.util.calendar
 */
class Gregorian : public BaseCalendar {
protected:
    const inline static char *className = "sun.util.calendar.Gregorian";
public:
    STATICINITIALIZE;

    Gregorian(jobject object) : JavaObject(object) {}

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

    Gregorian_Date newCalendarDate(TimeZone arg0) { return Gregorian_Date(*javaClass->invokeMethod<jobject>(this->object, "newCalendarDate", "(Ljava.util.TimeZone;)Lsun.util.calendar.Gregorian$Date;", arg0)); }

    Gregorian_Date newCalendarDate() { return Gregorian_Date(*javaClass->invokeMethod<jobject>(this->object, "newCalendarDate", "()Lsun.util.calendar.Gregorian$Date;", )); }

    CalendarDate newCalendarDate(TimeZone arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "newCalendarDate", "(Ljava.util.TimeZone;)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate newCalendarDate() { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "newCalendarDate", "()Lsun.util.calendar.CalendarDate;", )); }

    CalendarDate getCalendarDate(long arg0) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(J)Lsun.util.calendar.CalendarDate;", arg0)); }

    CalendarDate getCalendarDate() { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun.util.calendar.CalendarDate;", )); }

    Gregorian_Date getCalendarDate(long arg0) { return Gregorian_Date(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(J)Lsun.util.calendar.Gregorian$Date;", arg0)); }

    Gregorian_Date getCalendarDate() { return Gregorian_Date(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "()Lsun.util.calendar.Gregorian$Date;", )); }

    Gregorian_Date getCalendarDate(long arg0, TimeZone arg1) { return Gregorian_Date(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLjava.util.TimeZone;)Lsun.util.calendar.Gregorian$Date;", arg0, arg1)); }

    Gregorian_Date getCalendarDate(long arg0, CalendarDate arg1) { return Gregorian_Date(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLsun.util.calendar.CalendarDate;)Lsun.util.calendar.Gregorian$Date;", arg0, arg1)); }

    CalendarDate getCalendarDate(long arg0, CalendarDate arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLsun.util.calendar.CalendarDate;)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

    CalendarDate getCalendarDate(long arg0, TimeZone arg1) { return CalendarDate(*javaClass->invokeMethod<jobject>(this->object, "getCalendarDate", "(JLjava.util.TimeZone;)Lsun.util.calendar.CalendarDate;", arg0, arg1)); }

};


/**
 * Classpath: com.mojang.authlib.properties.PropertyMap
 * Package name: com.mojang.authlib.properties
 */
class PropertyMap : public ForwardingMultimap {
protected:
    const inline static char *className = "com.mojang.authlib.properties.PropertyMap";
public:
    STATICINITIALIZE;

    PropertyMap(jobject object) : JavaObject(object) {}

    Multimap delegate() { return Multimap(*javaClass->invokeMethod<jobject>(this->object, "delegate", "()Lcom.google.common.collect.Multimap;", )); }

    Object delegate() { return Object(*javaClass->invokeMethod<jobject>(this->object, "delegate", "()Ljava.lang.Object;", )); }

};


/**
 * Classpath: java.util.EnumSet
 * Package name: java.util
 */
class EnumSet : public AbstractSet {
protected:
    const inline static char *className = "java.util.EnumSet";
public:
    STATICINITIALIZE;

    EnumSet(jobject object) : JavaObject(object) {}

    EnumSet clone() { return EnumSet(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.util.EnumSet;", )); }

    Object clone() { return Object(*javaClass->invokeMethod<jobject>(this->object, "clone", "()Ljava.lang.Object;", )); }

    static EnumSet copyOf(Collection arg0) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.Collection;)Ljava.util.EnumSet;", arg0)); }

    static EnumSet copyOf(EnumSet arg0) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Ljava.util.EnumSet;)Ljava.util.EnumSet;", arg0)); }

    static EnumSet of(Enum arg0, Enum arg1, Enum arg2) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Enum;Ljava.lang.Enum;Ljava.lang.Enum;)Ljava.util.EnumSet;", arg0, arg1, arg2)); }

    static EnumSet of(Enum arg0, Enum arg1) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Enum;Ljava.lang.Enum;)Ljava.util.EnumSet;", arg0, arg1)); }

    static EnumSet of(Enum arg0, Enum arg1, Enum arg2, Enum arg3) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Enum;Ljava.lang.Enum;Ljava.lang.Enum;Ljava.lang.Enum;)Ljava.util.EnumSet;", arg0, arg1, arg2, arg3)); }

    static EnumSet of(Enum arg0, Enum_interface arg1) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Enum;[Ljava.lang.Enum;)Ljava.util.EnumSet;", arg0, arg1)); }

    static EnumSet of(Enum arg0) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Enum;)Ljava.util.EnumSet;", arg0)); }

    static EnumSet of(Enum arg0, Enum arg1, Enum arg2, Enum arg3, Enum arg4) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Enum;Ljava.lang.Enum;Ljava.lang.Enum;Ljava.lang.Enum;Ljava.lang.Enum;)Ljava.util.EnumSet;", arg0, arg1, arg2, arg3, arg4)); }

    void addAll() { (*javaClass->invokeMethod<void>(this->object, "addAll", "()V", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void complement() { (*javaClass->invokeMethod<void>(this->object, "complement", "()V", )); }

    static EnumSet noneOf(Class arg0) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "noneOf", "(Ljava.lang.Class;)Ljava.util.EnumSet;", arg0)); }

    Object writeReplace() { return Object(*javaClass->invokeMethod<jobject>(this->object, "writeReplace", "()Ljava.lang.Object;", )); }

    void readObjectNoData() { (*javaClass->invokeMethod<void>(this->object, "readObjectNoData", "()V", )); }

    static EnumSet range(Enum arg0, Enum arg1) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "range", "(Ljava.lang.Enum;Ljava.lang.Enum;)Ljava.util.EnumSet;", arg0, arg1)); }

    void typeCheck(Enum arg0) { (*javaClass->invokeMethod<void>(this->object, "typeCheck", "(Ljava.lang.Enum;)V", arg0)); }

    void addRange(Enum arg0, Enum arg1) { (*javaClass->invokeMethod<void>(this->object, "addRange", "(Ljava.lang.Enum;Ljava.lang.Enum;)V", arg0, arg1)); }

    static EnumSet allOf(Class arg0) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "allOf", "(Ljava.lang.Class;)Ljava.util.EnumSet;", arg0)); }

    static EnumSet complementOf(EnumSet arg0) { return EnumSet(*javaClass->invokeStaticMethod<jobject>(this->object, "complementOf", "(Ljava.util.EnumSet;)Ljava.util.EnumSet;", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableSetMultimap
 * Package name: com.google.common.collect
 */
class ImmutableSetMultimap : public ImmutableMultimap {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableSetMultimap";
public:
    STATICINITIALIZE;

    ImmutableSetMultimap(jobject object) : JavaObject(object) {}

    Comparator valueComparator() { return Comparator(*javaClass->invokeMethod<jobject>(this->object, "valueComparator", "()Ljava.util.Comparator;", )); }

    Collection replaceValues(Object arg0, Iterable arg1) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Ljava.util.Collection;", arg0, arg1)); }

    ImmutableCollection replaceValues(Object arg0, Iterable arg1) { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableCollection;", arg0, arg1)); }

    Set replaceValues(Object arg0, Iterable arg1) { return Set(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Ljava.util.Set;", arg0, arg1)); }

    ImmutableSet replaceValues(Object arg0, Iterable arg1) { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "replaceValues", "(Ljava.lang.Object;Ljava.lang.Iterable;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1)); }

    static ImmutableSetMultimap access_000(Multimap arg0, Comparator arg1) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "access$000", "(Lcom.google.common.collect.Multimap;Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0, arg1)); }

    ImmutableSetMultimap inverse() { return ImmutableSetMultimap(*javaClass->invokeMethod<jobject>(this->object, "inverse", "()Lcom.google.common.collect.ImmutableSetMultimap;", )); }

    ImmutableMultimap inverse() { return ImmutableMultimap(*javaClass->invokeMethod<jobject>(this->object, "inverse", "()Lcom.google.common.collect.ImmutableMultimap;", )); }

    ImmutableSetMultimap invert() { return ImmutableSetMultimap(*javaClass->invokeMethod<jobject>(this->object, "invert", "()Lcom.google.common.collect.ImmutableSetMultimap;", )); }

    static ImmutableSet valueSet(Comparator arg0, Collection arg1) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "valueSet", "(Ljava.util.Comparator;Ljava.util.Collection;)Lcom.google.common.collect.ImmutableSet;", arg0, arg1)); }

    ImmutableCollection get(Object arg0) { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection;", arg0)); }

    Collection get(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

    Set get(Object arg0) { return Set(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Ljava.util.Set;", arg0)); }

    ImmutableSet get(Object arg0) { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "get", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    static ImmutableSetMultimap copyOf(Multimap arg0) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Lcom.google.common.collect.Multimap;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0)); }

    static ImmutableSetMultimap copyOf(Multimap arg0, Comparator arg1) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "copyOf", "(Lcom.google.common.collect.Multimap;Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0, arg1)); }

    static ImmutableSetMultimap of() { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "()Lcom.google.common.collect.ImmutableSetMultimap;", )); }

    static ImmutableSetMultimap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }

    static ImmutableSetMultimap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0, arg1, arg2, arg3, arg4, arg5)); }

    static ImmutableSetMultimap of(Object arg0, Object arg1, Object arg2, Object arg3) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0, arg1, arg2, arg3)); }

    static ImmutableSetMultimap of(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }

    static ImmutableSetMultimap of(Object arg0, Object arg1) { return ImmutableSetMultimap(*javaClass->invokeStaticMethod<jobject>(this->object, "of", "(Ljava.lang.Object;Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSetMultimap;", arg0, arg1)); }

    static ImmutableSetMultimap_Builder builder() { return ImmutableSetMultimap_Builder(*javaClass->invokeStaticMethod<jobject>(this->object, "builder", "()Lcom.google.common.collect.ImmutableSetMultimap$Builder;", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    Set entries() { return Set(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Ljava.util.Set;", )); }

    ImmutableSet entries() { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Lcom.google.common.collect.ImmutableSet;", )); }

    ImmutableCollection entries() { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Lcom.google.common.collect.ImmutableCollection;", )); }

    Collection entries() { return Collection(*javaClass->invokeMethod<jobject>(this->object, "entries", "()Ljava.util.Collection;", )); }

    Set removeAll(Object arg0) { return Set(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Ljava.util.Set;", arg0)); }

    ImmutableCollection removeAll(Object arg0) { return ImmutableCollection(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableCollection;", arg0)); }

    ImmutableSet removeAll(Object arg0) { return ImmutableSet(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

    Collection removeAll(Object arg0) { return Collection(*javaClass->invokeMethod<jobject>(this->object, "removeAll", "(Ljava.lang.Object;)Ljava.util.Collection;", arg0)); }

    static ImmutableSet emptySet(Comparator arg0) { return ImmutableSet(*javaClass->invokeStaticMethod<jobject>(this->object, "emptySet", "(Ljava.util.Comparator;)Lcom.google.common.collect.ImmutableSet;", arg0)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMapEntry
 * Package name: com.google.common.collect
 */
class ImmutableMapEntry : public ImmutableEntry {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMapEntry";
public:
    STATICINITIALIZE;

    ImmutableMapEntry(jobject object) : JavaObject(object) {}

    ImmutableMapEntry getNextInKeyBucket() { return ImmutableMapEntry(*javaClass->invokeMethod<jobject>(this->object, "getNextInKeyBucket", "()Lcom.google.common.collect.ImmutableMapEntry;", )); }

    ImmutableMapEntry getNextInValueBucket() { return ImmutableMapEntry(*javaClass->invokeMethod<jobject>(this->object, "getNextInValueBucket", "()Lcom.google.common.collect.ImmutableMapEntry;", )); }

};


/**
 * Classpath: io.netty.buffer.CompositeByteBuf
 * Package name: io.netty.buffer
 */
class CompositeByteBuf : public AbstractReferenceCountedByteBuf {
protected:
    const inline static char *className = "io.netty.buffer.CompositeByteBuf";
public:
    STATICINITIALIZE;

    CompositeByteBuf(jobject object) : JavaObject(object) {}

    CompositeByteBuf readerIndex(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf readerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writerIndex(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writerIndex(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writerIndex", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf markReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    CompositeByteBuf markReaderIndex() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markReaderIndex", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    ByteBuf resetReaderIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    CompositeByteBuf resetReaderIndex() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetReaderIndex", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    ByteBuf markWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    CompositeByteBuf markWriterIndex() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "markWriterIndex", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    ByteBuf resetWriterIndex() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio.netty.buffer.ByteBuf;", )); }

    CompositeByteBuf resetWriterIndex() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "resetWriterIndex", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    CompositeByteBuf discardReadBytes() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    ByteBuf discardReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    CompositeByteBuf discardSomeReadBytes() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    ByteBuf discardSomeReadBytes() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardSomeReadBytes", "()Lio.netty.buffer.ByteBuf;", )); }

    ByteBuf ensureWritable(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf ensureWritable(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "ensureWritable", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf writeMedium(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeMedium(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeMedium", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    int nioBufferCount() { return int(*javaClass->invokeMethod<int>(this->object, "nioBufferCount", "()I", )); }

    ByteBuffer internalNioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "internalNioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    bool hasMemoryAddress() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasMemoryAddress", "()Z", )); }

    long memoryAddress() { return long(*javaClass->invokeMethod<long>(this->object, "memoryAddress", "()J", )); }

    int maxNumComponents() { return int(*javaClass->invokeMethod<int>(this->object, "maxNumComponents", "()I", )); }

    CompositeByteBuf addComponent(int arg0, ByteBuf arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "addComponent", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf addComponent(ByteBuf arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "addComponent", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf addComponents(int arg0, Iterable arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "addComponents", "(ILjava.lang.Iterable;)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf addComponents(int arg0, ByteBuf_interface arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "addComponents", "(I[Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf addComponents(Iterable arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "addComponents", "(Ljava.lang.Iterable;)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf addComponents(ByteBuf_interface arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "addComponents", "([Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    int addComponent0(int arg0, ByteBuf arg1) { return int(*javaClass->invokeMethod<int>(this->object, "addComponent0", "(ILio.netty.buffer.ByteBuf;)I", arg0, arg1)); }

    int addComponents0(int arg0, Iterable arg1) { return int(*javaClass->invokeMethod<int>(this->object, "addComponents0", "(ILjava.lang.Iterable;)I", arg0, arg1)); }

    int addComponents0(int arg0, ByteBuf_interface arg1) { return int(*javaClass->invokeMethod<int>(this->object, "addComponents0", "(I[Lio.netty.buffer.ByteBuf;)I", arg0, arg1)); }

    void consolidateIfNeeded() { (*javaClass->invokeMethod<void>(this->object, "consolidateIfNeeded", "()V", )); }

    int numComponents() { return int(*javaClass->invokeMethod<int>(this->object, "numComponents", "()I", )); }

    void checkComponentIndex(int arg0) { (*javaClass->invokeMethod<void>(this->object, "checkComponentIndex", "(I)V", arg0)); }

    void checkComponentIndex(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "checkComponentIndex", "(II)V", arg0, arg1)); }

    void updateComponentOffsets(int arg0) { (*javaClass->invokeMethod<void>(this->object, "updateComponentOffsets", "(I)V", arg0)); }

    CompositeByteBuf removeComponent(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "removeComponent", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf removeComponents(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "removeComponents", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    int toComponentIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "toComponentIndex", "(I)I", arg0)); }

    int toByteIndex(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "toByteIndex", "(I)I", arg0)); }

    int _getUnsignedMedium(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "_getUnsignedMedium", "(I)I", arg0)); }

    ByteBuf componentAtOffset(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "componentAtOffset", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf internalComponent(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "internalComponent", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf internalComponentAtOffset(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "internalComponentAtOffset", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf_Component findComponent(int arg0) { return CompositeByteBuf_Component(*javaClass->invokeMethod<jobject>(this->object, "findComponent", "(I)Lio.netty.buffer.CompositeByteBuf$Component;", arg0)); }

    CompositeByteBuf consolidate() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "consolidate", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    CompositeByteBuf consolidate(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "consolidate", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf discardReadComponents() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "discardReadComponents", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    ByteBuf allocBuffer(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "allocBuffer", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    List decompose(int arg0, int arg1) { return List(*javaClass->invokeMethod<jobject>(this->object, "decompose", "(II)Ljava.util.List;", arg0, arg1)); }

    byte _getByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "_getByte", "(I)B", arg0)); }

    short _getShort(int arg0) { return short(*javaClass->invokeMethod<short>(this->object, "_getShort", "(I)S", arg0)); }

    int _getInt(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "_getInt", "(I)I", arg0)); }

    long _getLong(int arg0) { return long(*javaClass->invokeMethod<long>(this->object, "_getLong", "(I)J", arg0)); }

    void _setByte(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setByte", "(II)V", arg0, arg1)); }

    void _setShort(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setShort", "(II)V", arg0, arg1)); }

    void _setMedium(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setMedium", "(II)V", arg0, arg1)); }

    void _setInt(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "_setInt", "(II)V", arg0, arg1)); }

    void _setLong(int arg0, long arg1) { (*javaClass->invokeMethod<void>(this->object, "_setLong", "(IJ)V", arg0, arg1)); }

    void deallocate() { (*javaClass->invokeMethod<void>(this->object, "deallocate", "()V", )); }

    ByteBufAllocator alloc() { return ByteBufAllocator(*javaClass->invokeMethod<jobject>(this->object, "alloc", "()Lio.netty.buffer.ByteBufAllocator;", )); }

    ByteBuf setMedium(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setMedium(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setMedium", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf setBytes(int arg0, ByteBuf arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf setBytes(int arg0, ByteBuf arg1, int arg2) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2, arg3)); }

    CompositeByteBuf setBytes(int arg0, ByteBuffer arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setBytes(int arg0, arr_B arg1, int arg2, int arg3) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[BII)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf setBytes(int arg0, arr_B arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[B)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf setBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    int setBytes(int arg0, InputStream arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.io.InputStream;I)I", arg0, arg1, arg2)); }

    int setBytes(int arg0, ScatteringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "setBytes", "(ILjava.nio.channels.ScatteringByteChannel;I)I", arg0, arg1, arg2)); }

    ByteBuf setBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setZero(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setZero", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setZero(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setZero", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf writeZero(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeZero(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeZero", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuffer nioBuffer(int arg0, int arg1) { return ByteBuffer(*javaClass->invokeMethod<jobject>(this->object, "nioBuffer", "(II)Ljava.nio.ByteBuffer;", arg0, arg1)); }

    CompositeByteBuf retain(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf retain(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ReferenceCounted retain(int arg0) { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "(I)Lio.netty.util.ReferenceCounted;", arg0)); }

    ReferenceCounted retain() { return ReferenceCounted(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.util.ReferenceCounted;", )); }

    ByteBuf retain() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.buffer.ByteBuf;", )); }

    CompositeByteBuf retain() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "retain", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    CompositeByteBuf writeByte(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf writeByte(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeByte", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf setIndex(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setIndex(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setIndex", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    byte getByte(int arg0) { return byte(*javaClass->invokeMethod<byte>(this->object, "getByte", "(I)B", arg0)); }

    ByteBuf clear() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Lio.netty.buffer.ByteBuf;", )); }

    CompositeByteBuf clear() { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "clear", "()Lio.netty.buffer.CompositeByteBuf;", )); }

    CompositeByteBuf getBytes(int arg0, ByteBuf arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf getBytes(int arg0, ByteBuf arg1, int arg2) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf getBytes(int arg0, arr_B arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf getBytes(int arg0, arr_B arg1, int arg2, int arg3) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[BII)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2, arg3)); }

    CompositeByteBuf getBytes(int arg0, OutputStream arg1, int arg2) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.io.OutputStream;I)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf getBytes(int arg0, ByteBuffer arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    int getBytes(int arg0, GatheringByteChannel arg1, int arg2) { return int(*javaClass->invokeMethod<int>(this->object, "getBytes", "(ILjava.nio.channels.GatheringByteChannel;I)I", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, arr_B arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[B)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, OutputStream arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf getBytes(int arg0, ByteBuffer arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILjava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(ILio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    ByteBuf getBytes(int arg0, arr_B arg1, int arg2, int arg3) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "getBytes", "(I[BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2, arg3)); }

    Iterator iterator() { return Iterator(*javaClass->invokeMethod<jobject>(this->object, "iterator", "()Ljava.util.Iterator;", )); }

    ByteBuf component(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "component", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    bool isDirect() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isDirect", "()Z", )); }

    bool hasArray() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasArray", "()Z", )); }

    int arrayOffset() { return int(*javaClass->invokeMethod<int>(this->object, "arrayOffset", "()I", )); }

    ByteBuf writeInt(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeInt(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeInt", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf setBoolean(int arg0, bool arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setBoolean(int arg0, bool arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setBoolean", "(IZ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setByte(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setByte", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setByte(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setByte", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setChar(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setChar", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setChar(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setChar", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setShort(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setShort", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setShort(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setShort", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setInt(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setInt", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setInt(int arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setInt", "(II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setLong(int arg0, long arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setLong(int arg0, long arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setLong", "(IJ)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf setFloat(int arg0, float arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf setFloat(int arg0, float arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setFloat", "(IF)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf setDouble(int arg0, double arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    CompositeByteBuf setDouble(int arg0, double arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "setDouble", "(ID)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf copy(int arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "copy", "(II)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf unwrap() { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "unwrap", "()Lio.netty.buffer.ByteBuf;", )); }

    int capacity() { return int(*javaClass->invokeMethod<int>(this->object, "capacity", "()I", )); }

    ByteBuf capacity(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "capacity", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf capacity(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "capacity", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteOrder order() { return ByteOrder(*javaClass->invokeMethod<jobject>(this->object, "order", "()Ljava.nio.ByteOrder;", )); }

    ByteBuf writeChar(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeChar(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeChar", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    void copyTo(int arg0, int arg1, int arg2, ByteBuf arg3) { (*javaClass->invokeMethod<void>(this->object, "copyTo", "(IIILio.netty.buffer.ByteBuf;)V", arg0, arg1, arg2, arg3)); }

    CompositeByteBuf readBytes(arr_B arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf readBytes(ByteBuf arg0, int arg1, int arg2) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf readBytes(ByteBuf arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf readBytes(ByteBuf arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf readBytes(arr_B arg0, int arg1, int arg2) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf readBytes(ByteBuffer arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf readBytes(OutputStream arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.io.OutputStream;I)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf readBytes(OutputStream arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.io.OutputStream;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf readBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "readBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf writeBytes(arr_B arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf writeBytes(arr_B arg0, int arg1, int arg2) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf writeBytes(ByteBuffer arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1, arg2)); }

    CompositeByteBuf writeBytes(ByteBuf arg0, int arg1) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.CompositeByteBuf;", arg0, arg1)); }

    CompositeByteBuf writeBytes(ByteBuf arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf writeBytes(arr_B arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([BII)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(arr_B arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "([B)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuf arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuffer arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Ljava.nio.ByteBuffer;)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;II)Lio.netty.buffer.ByteBuf;", arg0, arg1, arg2)); }

    ByteBuf writeBytes(ByteBuf arg0, int arg1) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBytes", "(Lio.netty.buffer.ByteBuf;I)Lio.netty.buffer.ByteBuf;", arg0, arg1)); }

    ByteBuf writeFloat(float arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeFloat(float arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeFloat", "(F)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf writeLong(long arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeLong(long arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeLong", "(J)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf skipBytes(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf skipBytes(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "skipBytes", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    ByteBuf writeBoolean(bool arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeBoolean(bool arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeBoolean", "(Z)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    CompositeByteBuf writeShort(int arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf writeShort(int arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeShort", "(I)Lio.netty.buffer.ByteBuf;", arg0)); }

    CompositeByteBuf writeDouble(double arg0) { return CompositeByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio.netty.buffer.CompositeByteBuf;", arg0)); }

    ByteBuf writeDouble(double arg0) { return ByteBuf(*javaClass->invokeMethod<jobject>(this->object, "writeDouble", "(D)Lio.netty.buffer.ByteBuf;", arg0)); }

};


/**
 * Classpath: net.minecraft.village.MerchantRecipeList
 * Package name: net.minecraft.village
 */
class MerchantRecipeList : public ArrayList {
protected:
    const inline static char *className = "net.minecraft.village.MerchantRecipeList";
public:
    STATICINITIALIZE;

    MerchantRecipeList(jobject object) : JavaObject(object) {}

    void readRecipiesFromTags(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readRecipiesFromTags", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    MerchantRecipe canRecipeBeUsed(ItemStack arg0, ItemStack arg1, int arg2) { return MerchantRecipe(*javaClass->invokeMethod<jobject>(this->object, "canRecipeBeUsed", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;I)Lnet.minecraft.village.MerchantRecipe;", arg0, arg1, arg2)); }

    bool func_181078_a(ItemStack arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_181078_a", "(Lnet.minecraft.item.ItemStack;Lnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    NBTTagCompound getRecipiesAsTags() { return NBTTagCompound(*javaClass->invokeMethod<jobject>(this->object, "getRecipiesAsTags", "()Lnet.minecraft.nbt.NBTTagCompound;", )); }

    static MerchantRecipeList readFromBuf(PacketBuffer arg0) { return MerchantRecipeList(*javaClass->invokeStaticMethod<jobject>(this->object, "readFromBuf", "(Lnet.minecraft.network.PacketBuffer;)Lnet.minecraft.village.MerchantRecipeList;", arg0)); }

    void writeToBuf(PacketBuffer arg0) { (*javaClass->invokeMethod<void>(this->object, "writeToBuf", "(Lnet.minecraft.network.PacketBuffer;)V", arg0)); }

};


/**
 * Classpath: net.minecraft.entity.EntityAgeable
 * Package name: net.minecraft.entity
 */
class EntityAgeable : public EntityCreature {
protected:
    const inline static char *className = "net.minecraft.entity.EntityAgeable";
public:
    STATICINITIALIZE;

    EntityAgeable(jobject object) : JavaObject(object) {}

    void setScaleForAge(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setScaleForAge", "(Z)V", arg0)); }

    int getGrowingAge() { return int(*javaClass->invokeMethod<int>(this->object, "getGrowingAge", "()I", )); }

    EntityAgeable createChild(EntityAgeable arg0) { return EntityAgeable(*javaClass->invokeMethod<jobject>(this->object, "createChild", "(Lnet.minecraft.entity.EntityAgeable;)Lnet.minecraft.entity.EntityAgeable;", arg0)); }

    void setGrowingAge(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setGrowingAge", "(I)V", arg0)); }

    void func_175501_a(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "func_175501_a", "(IZ)V", arg0, arg1)); }

    void onGrowingAdult() { (*javaClass->invokeMethod<void>(this->object, "onGrowingAdult", "()V", )); }

    void onLivingUpdate() { (*javaClass->invokeMethod<void>(this->object, "onLivingUpdate", "()V", )); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool interact(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interact", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void addGrowth(int arg0) { (*javaClass->invokeMethod<void>(this->object, "addGrowth", "(I)V", arg0)); }

    bool isChild() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isChild", "()Z", )); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void setSize(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(FF)V", arg0, arg1)); }

    void setScale(float arg0) { (*javaClass->invokeMethod<void>(this->object, "setScale", "(F)V", arg0)); }

};


/**
 * Classpath: io.netty.channel.SimpleChannelInboundHandler
 * Package name: io.netty.channel
 */
class SimpleChannelInboundHandler : public ChannelInboundHandlerAdapter {
protected:
    const inline static char *className = "io.netty.channel.SimpleChannelInboundHandler";
public:
    STATICINITIALIZE;

    SimpleChannelInboundHandler(jobject object) : JavaObject(object) {}

    void channelRead0(ChannelHandlerContext arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "channelRead0", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Object;)V", arg0, arg1)); }

    bool acceptInboundMessage(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "acceptInboundMessage", "(Ljava.lang.Object;)Z", arg0)); }

    void channelRead(ChannelHandlerContext arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "channelRead", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Object;)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.Rectangle
 * Package name: java.awt
 */
class Rectangle : public Rectangle2D {
protected:
    const inline static char *className = "java.awt.Rectangle";
public:
    STATICINITIALIZE;

    Rectangle(jobject object) : JavaObject(object) {}

    double getX() { return double(*javaClass->invokeMethod<double>(this->object, "getX", "()D", )); }

    double getY() { return double(*javaClass->invokeMethod<double>(this->object, "getY", "()D", )); }

    void setSize(Dimension arg0) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(Ljava.awt.Dimension;)V", arg0)); }

    void setSize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setSize", "(II)V", arg0, arg1)); }

    Rectangle union(Rectangle arg0) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "union", "(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;", arg0)); }

    double getWidth() { return double(*javaClass->invokeMethod<double>(this->object, "getWidth", "()D", )); }

    double getHeight() { return double(*javaClass->invokeMethod<double>(this->object, "getHeight", "()D", )); }

    void translate(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "translate", "(II)V", arg0, arg1)); }

    void add(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "add", "(II)V", arg0, arg1)); }

    void add(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.awt.Point;)V", arg0)); }

    void add(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "add", "(Ljava.awt.Rectangle;)V", arg0)); }

    bool equals(Object arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "equals", "(Ljava.lang.Object;)Z", arg0)); }

    String toString() { return String(*javaClass->invokeMethod<jobject>(this->object, "toString", "()Ljava.lang.String;", )); }

    bool isEmpty() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEmpty", "()Z", )); }

    bool contains(Point arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.Point;)Z", arg0)); }

    bool contains(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(II)Z", arg0, arg1)); }

    bool contains(int arg0, int arg1, int arg2, int arg3) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(IIII)Z", arg0, arg1, arg2, arg3)); }

    bool contains(Rectangle arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "contains", "(Ljava.awt.Rectangle;)Z", arg0)); }

    Rectangle getBounds() { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "getBounds", "()Ljava.awt.Rectangle;", )); }

    Point getLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocation", "()Ljava.awt.Point;", )); }

    Dimension getSize() { return Dimension(*javaClass->invokeMethod<jobject>(this->object, "getSize", "()Ljava.awt.Dimension;", )); }

    void grow(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "grow", "(II)V", arg0, arg1)); }

    void resize(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "resize", "(II)V", arg0, arg1)); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    Rectangle intersection(Rectangle arg0) { return Rectangle(*javaClass->invokeMethod<jobject>(this->object, "intersection", "(Ljava.awt.Rectangle;)Ljava.awt.Rectangle;", arg0)); }

    bool intersects(Rectangle arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "intersects", "(Ljava.awt.Rectangle;)Z", arg0)); }

    void setBounds(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(IIII)V", arg0, arg1, arg2, arg3)); }

    void setBounds(Rectangle arg0) { (*javaClass->invokeMethod<void>(this->object, "setBounds", "(Ljava.awt.Rectangle;)V", arg0)); }

    void reshape(int arg0, int arg1, int arg2, int arg3) { (*javaClass->invokeMethod<void>(this->object, "reshape", "(IIII)V", arg0, arg1, arg2, arg3)); }

    static int clip(double arg0, bool arg1) { return int(*javaClass->invokeStaticMethod<int>(this->object, "clip", "(DZ)I", arg0, arg1)); }

    void setLocation(Point arg0) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(Ljava.awt.Point;)V", arg0)); }

    void setLocation(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setLocation", "(II)V", arg0, arg1)); }

    bool inside(int arg0, int arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "inside", "(II)Z", arg0, arg1)); }

    Rectangle2D getBounds2D() { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "getBounds2D", "()Ljava.awt.geom.Rectangle2D;", )); }

    void setRect(double arg0, double arg1, double arg2, double arg3) { (*javaClass->invokeMethod<void>(this->object, "setRect", "(DDDD)V", arg0, arg1, arg2, arg3)); }

    int outcode(double arg0, double arg1) { return int(*javaClass->invokeMethod<int>(this->object, "outcode", "(DD)I", arg0, arg1)); }

    Rectangle2D createIntersection(Rectangle2D arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "createIntersection", "(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    Rectangle2D createUnion(Rectangle2D arg0) { return Rectangle2D(*javaClass->invokeMethod<jobject>(this->object, "createUnion", "(Ljava.awt.geom.Rectangle2D;)Ljava.awt.geom.Rectangle2D;", arg0)); }

    void move(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "move", "(II)V", arg0, arg1)); }

};


/**
 * Classpath: java.awt.geom.GeneralPath
 * Package name: java.awt.geom
 */
class GeneralPath : public Path2D_Float {
protected:
    const inline static char *className = "java.awt.geom.GeneralPath";
public:
    STATICINITIALIZE;

    GeneralPath(jobject object) : JavaObject(object) {}

};


/**
 * Classpath: java.awt.event.InputEvent
 * Package name: java.awt.event
 */
class InputEvent : public ComponentEvent {
protected:
    const inline static char *className = "java.awt.event.InputEvent";
public:
    STATICINITIALIZE;

    InputEvent(jobject object) : JavaObject(object) {}

    static int getMaskForButton(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getMaskForButton", "(I)I", arg0)); }

    bool isMetaDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMetaDown", "()Z", )); }

    bool isAltDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAltDown", "()Z", )); }

    bool isAltGraphDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAltGraphDown", "()Z", )); }

    int getModifiers() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiers", "()I", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    bool canAccessSystemClipboard() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canAccessSystemClipboard", "()Z", )); }

    int getModifiersEx() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiersEx", "()I", )); }

    static String getModifiersExText(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getModifiersExText", "(I)Ljava.lang.String;", arg0)); }

    bool isConsumed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isConsumed", "()Z", )); }

    long getWhen() { return long(*javaClass->invokeMethod<long>(this->object, "getWhen", "()J", )); }

    bool isControlDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isControlDown", "()Z", )); }

    bool isShiftDown() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isShiftDown", "()Z", )); }

    void consume() { (*javaClass->invokeMethod<void>(this->object, "consume", "()V", )); }

};


/**
 * Classpath: java.awt.PopupMenu
 * Package name: java.awt
 */
class PopupMenu : public Menu {
protected:
    const inline static char *className = "java.awt.PopupMenu";
public:
    STATICINITIALIZE;

    PopupMenu(jobject object) : JavaObject(object) {}

    MenuContainer getParent() { return MenuContainer(*javaClass->invokeMethod<jobject>(this->object, "getParent", "()Ljava.awt.MenuContainer;", )); }

    void addNotify() { (*javaClass->invokeMethod<void>(this->object, "addNotify", "()V", )); }

    void show(Component arg0, int arg1, int arg2) { (*javaClass->invokeMethod<void>(this->object, "show", "(Ljava.awt.Component;II)V", arg0, arg1, arg2)); }

    String constructComponentName() { return String(*javaClass->invokeMethod<jobject>(this->object, "constructComponentName", "()Ljava.lang.String;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

};


/**
 * Classpath: javax.swing.JMenu
 * Package name: javax.swing
 */
class JMenu : public JMenuItem {
protected:
    const inline static char *className = "javax.swing.JMenu";
public:
    STATICINITIALIZE;

    JMenu(jobject object) : JavaObject(object) {}

    int getDelay() { return int(*javaClass->invokeMethod<int>(this->object, "getDelay", "()I", )); }

    bool isSelected() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSelected", "()Z", )); }

    JMenuItem add(Action arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljavax.swing.Action;)Ljavax.swing.JMenuItem;", arg0)); }

    JMenuItem add(JMenuItem arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljavax.swing.JMenuItem;)Ljavax.swing.JMenuItem;", arg0)); }

    Component add(Component arg0, int arg1) { return Component(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.awt.Component;I)Ljava.awt.Component;", arg0, arg1)); }

    Component add(Component arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.awt.Component;)Ljava.awt.Component;", arg0)); }

    JMenuItem add(String arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "add", "(Ljava.lang.String;)Ljavax.swing.JMenuItem;", arg0)); }

    void remove(Component arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljava.awt.Component;)V", arg0)); }

    void remove(JMenuItem arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(Ljavax.swing.JMenuItem;)V", arg0)); }

    void remove(int arg0) { (*javaClass->invokeMethod<void>(this->object, "remove", "(I)V", arg0)); }

    JMenuItem insert(JMenuItem arg0, int arg1) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "insert", "(Ljavax.swing.JMenuItem;I)Ljavax.swing.JMenuItem;", arg0, arg1)); }

    void insert(String arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "insert", "(Ljava.lang.String;I)V", arg0, arg1)); }

    JMenuItem insert(Action arg0, int arg1) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "insert", "(Ljavax.swing.Action;I)Ljavax.swing.JMenuItem;", arg0, arg1)); }

    void writeObject(ObjectOutputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "writeObject", "(Ljava.io.ObjectOutputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    void removeAll() { (*javaClass->invokeMethod<void>(this->object, "removeAll", "()V", )); }

    JMenuItem getItem(int arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "getItem", "(I)Ljavax.swing.JMenuItem;", arg0)); }

    int getItemCount() { return int(*javaClass->invokeMethod<int>(this->object, "getItemCount", "()I", )); }

    String getUIClassID() { return String(*javaClass->invokeMethod<jobject>(this->object, "getUIClassID", "()Ljava.lang.String;", )); }

    void setSelected(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setSelected", "(Z)V", arg0)); }

    void menuSelectionChanged(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "menuSelectionChanged", "(Z)V", arg0)); }

    void processKeyEvent(KeyEvent arg0) { (*javaClass->invokeMethod<void>(this->object, "processKeyEvent", "(Ljava.awt.event.KeyEvent;)V", arg0)); }

    void setComponentOrientation(ComponentOrientation arg0) { (*javaClass->invokeMethod<void>(this->object, "setComponentOrientation", "(Ljava.awt.ComponentOrientation;)V", arg0)); }

    void applyComponentOrientation(ComponentOrientation arg0) { (*javaClass->invokeMethod<void>(this->object, "applyComponentOrientation", "(Ljava.awt.ComponentOrientation;)V", arg0)); }

    Component getComponent() { return Component(*javaClass->invokeMethod<jobject>(this->object, "getComponent", "()Ljava.awt.Component;", )); }

    AccessibleContext getAccessibleContext() { return AccessibleContext(*javaClass->invokeMethod<jobject>(this->object, "getAccessibleContext", "()Ljavax.accessibility.AccessibleContext;", )); }

    void addSeparator() { (*javaClass->invokeMethod<void>(this->object, "addSeparator", "()V", )); }

    bool isTearOff() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTearOff", "()Z", )); }

    void insertSeparator(int arg0) { (*javaClass->invokeMethod<void>(this->object, "insertSeparator", "(I)V", arg0)); }

    void updateUI() { (*javaClass->invokeMethod<void>(this->object, "updateUI", "()V", )); }

    void setModel(ButtonModel arg0) { (*javaClass->invokeMethod<void>(this->object, "setModel", "(Ljavax.swing.ButtonModel;)V", arg0)); }

    ChangeListener createMenuChangeListener() { return ChangeListener(*javaClass->invokeMethod<jobject>(this->object, "createMenuChangeListener", "()Ljavax.swing.event.ChangeListener;", )); }

    void ensurePopupMenuCreated() { (*javaClass->invokeMethod<void>(this->object, "ensurePopupMenuCreated", "()V", )); }

    bool isPopupMenuVisible() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPopupMenuVisible", "()Z", )); }

    Point getCustomMenuLocation() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getCustomMenuLocation", "()Ljava.awt.Point;", )); }

    Point getPopupMenuOrigin() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getPopupMenuOrigin", "()Ljava.awt.Point;", )); }

    JPopupMenu getPopupMenu() { return JPopupMenu(*javaClass->invokeMethod<jobject>(this->object, "getPopupMenu", "()Ljavax.swing.JPopupMenu;", )); }

    JMenu_WinListener createWinListener(JPopupMenu arg0) { return JMenu_WinListener(*javaClass->invokeMethod<jobject>(this->object, "createWinListener", "(Ljavax.swing.JPopupMenu;)Ljavax.swing.JMenu$WinListener;", arg0)); }

    JMenuItem createActionComponent(Action arg0) { return JMenuItem(*javaClass->invokeMethod<jobject>(this->object, "createActionComponent", "(Ljavax.swing.Action;)Ljavax.swing.JMenuItem;", arg0)); }

    Component getMenuComponent(int arg0) { return Component(*javaClass->invokeMethod<jobject>(this->object, "getMenuComponent", "(I)Ljava.awt.Component;", arg0)); }

    int getMenuComponentCount() { return int(*javaClass->invokeMethod<int>(this->object, "getMenuComponentCount", "()I", )); }

    bool isMenuComponent(Component arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMenuComponent", "(Ljava.awt.Component;)Z", arg0)); }

    Point translateToPopupMenu(int arg0, int arg1) { return Point(*javaClass->invokeMethod<jobject>(this->object, "translateToPopupMenu", "(II)Ljava.awt.Point;", arg0, arg1)); }

    Point translateToPopupMenu(Point arg0) { return Point(*javaClass->invokeMethod<jobject>(this->object, "translateToPopupMenu", "(Ljava.awt.Point;)Ljava.awt.Point;", arg0)); }

    void initFocusability() { (*javaClass->invokeMethod<void>(this->object, "initFocusability", "()V", )); }

    void setPopupMenuVisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setPopupMenuVisible", "(Z)V", arg0)); }

    void setDelay(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setDelay", "(I)V", arg0)); }

    void setMenuLocation(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "setMenuLocation", "(II)V", arg0, arg1)); }

    PropertyChangeListener createActionChangeListener(JMenuItem arg0) { return PropertyChangeListener(*javaClass->invokeMethod<jobject>(this->object, "createActionChangeListener", "(Ljavax.swing.JMenuItem;)Ljava.beans.PropertyChangeListener;", arg0)); }

    bool isTopLevelMenu() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTopLevelMenu", "()Z", )); }

    void addMenuListener(MenuListener arg0) { (*javaClass->invokeMethod<void>(this->object, "addMenuListener", "(Ljavax.swing.event.MenuListener;)V", arg0)); }

    void removeMenuListener(MenuListener arg0) { (*javaClass->invokeMethod<void>(this->object, "removeMenuListener", "(Ljavax.swing.event.MenuListener;)V", arg0)); }

    void fireMenuSelected() { (*javaClass->invokeMethod<void>(this->object, "fireMenuSelected", "()V", )); }

    void fireMenuDeselected() { (*javaClass->invokeMethod<void>(this->object, "fireMenuDeselected", "()V", )); }

    void fireMenuCanceled() { (*javaClass->invokeMethod<void>(this->object, "fireMenuCanceled", "()V", )); }

    void configureAcceleratorFromAction(Action arg0) { (*javaClass->invokeMethod<void>(this->object, "configureAcceleratorFromAction", "(Ljavax.swing.Action;)V", arg0)); }

    void setAccelerator(KeyStroke arg0) { (*javaClass->invokeMethod<void>(this->object, "setAccelerator", "(Ljavax.swing.KeyStroke;)V", arg0)); }

    void doClick(int arg0) { (*javaClass->invokeMethod<void>(this->object, "doClick", "(I)V", arg0)); }

};


/**
 * Classpath: java.awt.event.MouseEvent
 * Package name: java.awt.event
 */
class MouseEvent : public InputEvent {
protected:
    const inline static char *className = "java.awt.event.MouseEvent";
public:
    STATICINITIALIZE;

    MouseEvent(jobject object) : JavaObject(object) {}

    int getButton() { return int(*javaClass->invokeMethod<int>(this->object, "getButton", "()I", )); }

    int getX() { return int(*javaClass->invokeMethod<int>(this->object, "getX", "()I", )); }

    int getY() { return int(*javaClass->invokeMethod<int>(this->object, "getY", "()I", )); }

    static String getMouseModifiersText(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getMouseModifiersText", "(I)Ljava.lang.String;", arg0)); }

    void translatePoint(int arg0, int arg1) { (*javaClass->invokeMethod<void>(this->object, "translatePoint", "(II)V", arg0, arg1)); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    int getModifiersEx() { return int(*javaClass->invokeMethod<int>(this->object, "getModifiersEx", "()I", )); }

    void setNewModifiers() { (*javaClass->invokeMethod<void>(this->object, "setNewModifiers", "()V", )); }

    void setOldModifiers() { (*javaClass->invokeMethod<void>(this->object, "setOldModifiers", "()V", )); }

    int getXOnScreen() { return int(*javaClass->invokeMethod<int>(this->object, "getXOnScreen", "()I", )); }

    int getYOnScreen() { return int(*javaClass->invokeMethod<int>(this->object, "getYOnScreen", "()I", )); }

    int getClickCount() { return int(*javaClass->invokeMethod<int>(this->object, "getClickCount", "()I", )); }

    bool isPopupTrigger() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isPopupTrigger", "()Z", )); }

    Point getPoint() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getPoint", "()Ljava.awt.Point;", )); }

    Point getLocationOnScreen() { return Point(*javaClass->invokeMethod<jobject>(this->object, "getLocationOnScreen", "()Ljava.awt.Point;", )); }

};


/**
 * Classpath: javax.swing.event.MenuDragMouseEvent
 * Package name: javax.swing.event
 */
class MenuDragMouseEvent : public MouseEvent {
protected:
    const inline static char *className = "javax.swing.event.MenuDragMouseEvent";
public:
    STATICINITIALIZE;

    MenuDragMouseEvent(jobject object) : JavaObject(object) {}

    MenuSelectionManager getMenuSelectionManager() { return MenuSelectionManager(*javaClass->invokeMethod<jobject>(this->object, "getMenuSelectionManager", "()Ljavax.swing.MenuSelectionManager;", )); }

};


/**
 * Classpath: java.awt.event.MouseWheelEvent
 * Package name: java.awt.event
 */
class MouseWheelEvent : public MouseEvent {
protected:
    const inline static char *className = "java.awt.event.MouseWheelEvent";
public:
    STATICINITIALIZE;

    MouseWheelEvent(jobject object) : JavaObject(object) {}

    int getUnitsToScroll() { return int(*javaClass->invokeMethod<int>(this->object, "getUnitsToScroll", "()I", )); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    int getScrollType() { return int(*javaClass->invokeMethod<int>(this->object, "getScrollType", "()I", )); }

    int getScrollAmount() { return int(*javaClass->invokeMethod<int>(this->object, "getScrollAmount", "()I", )); }

    int getWheelRotation() { return int(*javaClass->invokeMethod<int>(this->object, "getWheelRotation", "()I", )); }

    double getPreciseWheelRotation() { return double(*javaClass->invokeMethod<double>(this->object, "getPreciseWheelRotation", "()D", )); }

};


/**
 * Classpath: java.util.LinkedHashSet
 * Package name: java.util
 */
class LinkedHashSet : public HashSet {
protected:
    const inline static char *className = "java.util.LinkedHashSet";
public:
    STATICINITIALIZE;

    LinkedHashSet(jobject object) : JavaObject(object) {}

    Spliterator spliterator() { return Spliterator(*javaClass->invokeMethod<jobject>(this->object, "spliterator", "()Ljava.util.Spliterator;", )); }

};


/**
 * Classpath: net.minecraft.client.model.ModelPlayer
 * Package name: net.minecraft.client.model
 */
class ModelPlayer : public ModelBiped {
protected:
    const inline static char *className = "net.minecraft.client.model.ModelPlayer";
public:
    STATICINITIALIZE;

    ModelPlayer(jobject object) : JavaObject(object) {}

    void setRotationAngles(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Entity arg6) { (*javaClass->invokeMethod<void>(this->object, "setRotationAngles", "(FFFFFFLnet.minecraft.entity.Entity;)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

    void renderDeadmau5Head(float arg0) { (*javaClass->invokeMethod<void>(this->object, "renderDeadmau5Head", "(F)V", arg0)); }

    void postRenderArm(float arg0) { (*javaClass->invokeMethod<void>(this->object, "postRenderArm", "(F)V", arg0)); }

    void setInvisible(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setInvisible", "(Z)V", arg0)); }

    void renderRightArm() { (*javaClass->invokeMethod<void>(this->object, "renderRightArm", "()V", )); }

    void renderLeftArm() { (*javaClass->invokeMethod<void>(this->object, "renderLeftArm", "()V", )); }

    void renderCape(float arg0) { (*javaClass->invokeMethod<void>(this->object, "renderCape", "(F)V", arg0)); }

    void render(Entity arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { (*javaClass->invokeMethod<void>(this->object, "render", "(Lnet.minecraft.entity.Entity;FFFFFF)V", arg0, arg1, arg2, arg3, arg4, arg5, arg6)); }

};


/**
 * Classpath: com.google.common.collect.ImmutableMapEntry$TerminalEntry
 * Enclosing class: com.google.common.collect.ImmutableMapEntry
 * Package name: com.google.common.collect
 */
class ImmutableMapEntry_TerminalEntry : public ImmutableMapEntry {
protected:
    const inline static char *className = "com.google.common.collect.ImmutableMapEntry$TerminalEntry";
public:
    STATICINITIALIZE;

    ImmutableMapEntry_TerminalEntry(jobject object) : JavaObject(object) {}

    ImmutableMapEntry getNextInKeyBucket() { return ImmutableMapEntry(*javaClass->invokeMethod<jobject>(this->object, "getNextInKeyBucket", "()Lcom.google.common.collect.ImmutableMapEntry;", )); }

    ImmutableMapEntry getNextInValueBucket() { return ImmutableMapEntry(*javaClass->invokeMethod<jobject>(this->object, "getNextInValueBucket", "()Lcom.google.common.collect.ImmutableMapEntry;", )); }

};


/**
 * Classpath: net.minecraft.entity.passive.EntityAnimal
 * Package name: net.minecraft.entity.passive
 */
class EntityAnimal : public EntityAgeable {
protected:
    const inline static char *className = "net.minecraft.entity.passive.EntityAnimal";
public:
    STATICINITIALIZE;

    EntityAnimal(jobject object) : JavaObject(object) {}

    bool getCanSpawnHere() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanSpawnHere", "()Z", )); }

    int getTalkInterval() { return int(*javaClass->invokeMethod<int>(this->object, "getTalkInterval", "()I", )); }

    bool isBreedingItem(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBreedingItem", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    bool canMateWith(EntityAnimal arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canMateWith", "(Lnet.minecraft.entity.passive.EntityAnimal;)Z", arg0)); }

    void updateAITasks() { (*javaClass->invokeMethod<void>(this->object, "updateAITasks", "()V", )); }

    float getBlockPathWeight(BlockPos arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getBlockPathWeight", "(Lnet.minecraft.util.BlockPos;)F", arg0)); }

    void consumeItemFromStack(EntityPlayer arg0, ItemStack arg1) { (*javaClass->invokeMethod<void>(this->object, "consumeItemFromStack", "(Lnet.minecraft.entity.player.EntityPlayer;Lnet.minecraft.item.ItemStack;)V", arg0, arg1)); }

    EntityPlayer getPlayerInLove() { return EntityPlayer(*javaClass->invokeMethod<jobject>(this->object, "getPlayerInLove", "()Lnet.minecraft.entity.player.EntityPlayer;", )); }

    void resetInLove() { (*javaClass->invokeMethod<void>(this->object, "resetInLove", "()V", )); }

    void handleStatusUpdate(byte arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }

    void onLivingUpdate() { (*javaClass->invokeMethod<void>(this->object, "onLivingUpdate", "()V", )); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    int getExperiencePoints(EntityPlayer arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getExperiencePoints", "(Lnet.minecraft.entity.player.EntityPlayer;)I", arg0)); }

    bool interact(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interact", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void setInLove(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "setInLove", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    bool isInLove() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isInLove", "()Z", )); }

    bool canDespawn() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canDespawn", "()Z", )); }

};


/**
 * Classpath: net.minecraft.network.NetworkManager
 * Package name: net.minecraft.network
 */
class NetworkManager : public SimpleChannelInboundHandler {
protected:
    const inline static char *className = "net.minecraft.network.NetworkManager";
public:
    STATICINITIALIZE;

    NetworkManager(jobject object) : JavaObject(object) {}

    bool hasNoChannel() { return bool(*javaClass->invokeMethod<boolean>(this->object, "hasNoChannel", "()Z", )); }

    void disableAutoRead() { (*javaClass->invokeMethod<void>(this->object, "disableAutoRead", "()V", )); }

    void channelActive(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelActive", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void setConnectionState(EnumConnectionState arg0) { (*javaClass->invokeMethod<void>(this->object, "setConnectionState", "(Lnet.minecraft.network.EnumConnectionState;)V", arg0)); }

    void channelInactive(ChannelHandlerContext arg0) { (*javaClass->invokeMethod<void>(this->object, "channelInactive", "(Lio.netty.channel.ChannelHandlerContext;)V", arg0)); }

    void exceptionCaught(ChannelHandlerContext arg0, Throwable arg1) { (*javaClass->invokeMethod<void>(this->object, "exceptionCaught", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Throwable;)V", arg0, arg1)); }

    void channelRead0(ChannelHandlerContext arg0, Packet arg1) { (*javaClass->invokeMethod<void>(this->object, "channelRead0", "(Lio.netty.channel.ChannelHandlerContext;Lnet.minecraft.network.Packet;)V", arg0, arg1)); }

    void channelRead0(ChannelHandlerContext arg0, Object arg1) { (*javaClass->invokeMethod<void>(this->object, "channelRead0", "(Lio.netty.channel.ChannelHandlerContext;Ljava.lang.Object;)V", arg0, arg1)); }

    void flushOutboundQueue() { (*javaClass->invokeMethod<void>(this->object, "flushOutboundQueue", "()V", )); }

    void dispatchPacket(Packet arg0, GenericFutureListener_interface arg1) { (*javaClass->invokeMethod<void>(this->object, "dispatchPacket", "(Lnet.minecraft.network.Packet;[Lio.netty.util.concurrent.GenericFutureListener;)V", arg0, arg1)); }

    static NetworkManager func_181124_a(InetAddress arg0, int arg1, bool arg2) { return NetworkManager(*javaClass->invokeStaticMethod<jobject>(this->object, "func_181124_a", "(Ljava.net.InetAddress;IZ)Lnet.minecraft.network.NetworkManager;", arg0, arg1, arg2)); }

    void enableEncryption(SecretKey arg0) { (*javaClass->invokeMethod<void>(this->object, "enableEncryption", "(Ljavax.crypto.SecretKey;)V", arg0)); }

    bool getIsencrypted() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getIsencrypted", "()Z", )); }

    IChatComponent getExitMessage() { return IChatComponent(*javaClass->invokeMethod<jobject>(this->object, "getExitMessage", "()Lnet.minecraft.util.IChatComponent;", )); }

    void closeChannel(IChatComponent arg0) { (*javaClass->invokeMethod<void>(this->object, "closeChannel", "(Lnet.minecraft.util.IChatComponent;)V", arg0)); }

    SocketAddress getRemoteAddress() { return SocketAddress(*javaClass->invokeMethod<jobject>(this->object, "getRemoteAddress", "()Ljava.net.SocketAddress;", )); }

    bool isLocalChannel() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isLocalChannel", "()Z", )); }

    void setCompressionTreshold(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setCompressionTreshold", "(I)V", arg0)); }

    bool isChannelOpen() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isChannelOpen", "()Z", )); }

    void checkDisconnected() { (*javaClass->invokeMethod<void>(this->object, "checkDisconnected", "()V", )); }

    INetHandler getNetHandler() { return INetHandler(*javaClass->invokeMethod<jobject>(this->object, "getNetHandler", "()Lnet.minecraft.network.INetHandler;", )); }

    void processReceivedPackets() { (*javaClass->invokeMethod<void>(this->object, "processReceivedPackets", "()V", )); }

    static NetworkManager provideLocalClient(SocketAddress arg0) { return NetworkManager(*javaClass->invokeStaticMethod<jobject>(this->object, "provideLocalClient", "(Ljava.net.SocketAddress;)Lnet.minecraft.network.NetworkManager;", arg0)); }

    void setNetHandler(INetHandler arg0) { (*javaClass->invokeMethod<void>(this->object, "setNetHandler", "(Lnet.minecraft.network.INetHandler;)V", arg0)); }

    void sendPacket(Packet arg0, GenericFutureListener arg1, GenericFutureListener_interface arg2) { (*javaClass->invokeMethod<void>(this->object, "sendPacket", "(Lnet.minecraft.network.Packet;Lio.netty.util.concurrent.GenericFutureListener;[Lio.netty.util.concurrent.GenericFutureListener;)V", arg0, arg1, arg2)); }

    void sendPacket(Packet arg0) { (*javaClass->invokeMethod<void>(this->object, "sendPacket", "(Lnet.minecraft.network.Packet;)V", arg0)); }

};


/**
 * Classpath: java.awt.event.KeyEvent
 * Package name: java.awt.event
 */
class KeyEvent : public InputEvent {
protected:
    const inline static char *className = "java.awt.event.KeyEvent";
public:
    STATICINITIALIZE;

    KeyEvent(jobject object) : JavaObject(object) {}

    void setKeyCode(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setKeyCode", "(I)V", arg0)); }

    int getKeyCode() { return int(*javaClass->invokeMethod<int>(this->object, "getKeyCode", "()I", )); }

    int getKeyLocation() { return int(*javaClass->invokeMethod<int>(this->object, "getKeyLocation", "()I", )); }

    int getExtendedKeyCode() { return int(*javaClass->invokeMethod<int>(this->object, "getExtendedKeyCode", "()I", )); }

    void readObject(ObjectInputStream arg0) { (*javaClass->invokeMethod<void>(this->object, "readObject", "(Ljava.io.ObjectInputStream;)V", arg0)); }

    String paramString() { return String(*javaClass->invokeMethod<jobject>(this->object, "paramString", "()Ljava.lang.String;", )); }

    static void initIDs() { (*javaClass->invokeStaticMethod<void>(this->object, "initIDs", "()V", )); }

    void setNewModifiers() { (*javaClass->invokeMethod<void>(this->object, "setNewModifiers", "()V", )); }

    void setOldModifiers() { (*javaClass->invokeMethod<void>(this->object, "setOldModifiers", "()V", )); }

    static String getKeyText(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyText", "(I)Ljava.lang.String;", arg0)); }

    static String getKeyModifiersText(int arg0) { return String(*javaClass->invokeStaticMethod<jobject>(this->object, "getKeyModifiersText", "(I)Ljava.lang.String;", arg0)); }

    static int getExtendedKeyCodeForChar(int arg0) { return int(*javaClass->invokeStaticMethod<int>(this->object, "getExtendedKeyCodeForChar", "(I)I", arg0)); }

    void setKeyChar(char arg0) { (*javaClass->invokeMethod<void>(this->object, "setKeyChar", "(C)V", arg0)); }

    void setModifiers(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setModifiers", "(I)V", arg0)); }

    char getKeyChar() { return char(*javaClass->invokeMethod<char>(this->object, "getKeyChar", "()C", )); }

    bool isActionKey() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isActionKey", "()Z", )); }

};


/**
 * Classpath: javax.swing.event.MenuKeyEvent
 * Package name: javax.swing.event
 */
class MenuKeyEvent : public KeyEvent {
protected:
    const inline static char *className = "javax.swing.event.MenuKeyEvent";
public:
    STATICINITIALIZE;

    MenuKeyEvent(jobject object) : JavaObject(object) {}

    MenuSelectionManager getMenuSelectionManager() { return MenuSelectionManager(*javaClass->invokeMethod<jobject>(this->object, "getMenuSelectionManager", "()Ljavax.swing.MenuSelectionManager;", )); }

};


/**
 * Classpath: net.minecraft.entity.passive.EntityHorse
 * Package name: net.minecraft.entity.passive
 */
class EntityHorse : public EntityAnimal {
protected:
    const inline static char *className = "net.minecraft.entity.passive.EntityHorse";
public:
    STATICINITIALIZE;

    EntityHorse(jobject object) : JavaObject(object) {}

    void setScaleForAge(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setScaleForAge", "(Z)V", arg0)); }

    bool isHorseJumping() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHorseJumping", "()Z", )); }

    void setHorseTamed(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorseTamed", "(Z)V", arg0)); }

    void setHorseJumping(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorseJumping", "(Z)V", arg0)); }

    bool allowLeashing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "allowLeashing", "()Z", )); }

    void func_142017_o(float arg0) { (*javaClass->invokeMethod<void>(this->object, "func_142017_o", "(F)V", arg0)); }

    bool isEatingHaystack() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isEatingHaystack", "()Z", )); }

    void setEatingHaystack(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEatingHaystack", "(Z)V", arg0)); }

    int getHorseArmorIndexSynced() { return int(*javaClass->invokeMethod<int>(this->object, "getHorseArmorIndexSynced", "()I", )); }

    int getHorseArmorIndex(ItemStack arg0) { return int(*javaClass->invokeMethod<int>(this->object, "getHorseArmorIndex", "(Lnet.minecraft.item.ItemStack;)I", arg0)); }

    bool getHasReproduced() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHasReproduced", "()Z", )); }

    void setHorseArmorStack(ItemStack arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorseArmorStack", "(Lnet.minecraft.item.ItemStack;)V", arg0)); }

    void setBreeding(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setBreeding", "(Z)V", arg0)); }

    void setHasReproduced(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHasReproduced", "(Z)V", arg0)); }

    void setHorseSaddled(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorseSaddled", "(Z)V", arg0)); }

    int increaseTemper(int arg0) { return int(*javaClass->invokeMethod<int>(this->object, "increaseTemper", "(I)I", arg0)); }

    int getMaxTemper() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxTemper", "()I", )); }

    bool prepareChunkForSpawn() { return bool(*javaClass->invokeMethod<boolean>(this->object, "prepareChunkForSpawn", "()Z", )); }

    void func_110266_cB() { (*javaClass->invokeMethod<void>(this->object, "func_110266_cB", "()V", )); }

    void openHorseMouth() { (*javaClass->invokeMethod<void>(this->object, "openHorseMouth", "()V", )); }

    int getChestSize() { return int(*javaClass->invokeMethod<int>(this->object, "getChestSize", "()I", )); }

    void updateHorseSlots() { (*javaClass->invokeMethod<void>(this->object, "updateHorseSlots", "()V", )); }

    bool canWearArmor() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canWearArmor", "()Z", )); }

    bool getCanSpawnHere() { return bool(*javaClass->invokeMethod<boolean>(this->object, "getCanSpawnHere", "()Z", )); }

    EntityHorse getClosestHorse(Entity arg0, double arg1) { return EntityHorse(*javaClass->invokeMethod<jobject>(this->object, "getClosestHorse", "(Lnet.minecraft.entity.Entity;D)Lnet.minecraft.entity.passive.EntityHorse;", arg0, arg1)); }

    double getHorseJumpStrength() { return double(*javaClass->invokeMethod<double>(this->object, "getHorseJumpStrength", "()D", )); }

    Item getDropItem() { return Item(*javaClass->invokeMethod<jobject>(this->object, "getDropItem", "()Lnet.minecraft.item.Item;", )); }

    void makeHorseRear() { (*javaClass->invokeMethod<void>(this->object, "makeHorseRear", "()V", )); }

    String getLivingSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getLivingSound", "()Ljava.lang.String;", )); }

    String getAngrySoundName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getAngrySoundName", "()Ljava.lang.String;", )); }

    int getMaxSpawnedInChunk() { return int(*javaClass->invokeMethod<int>(this->object, "getMaxSpawnedInChunk", "()I", )); }

    int getTalkInterval() { return int(*javaClass->invokeMethod<int>(this->object, "getTalkInterval", "()I", )); }

    bool func_110239_cn() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_110239_cn", "()Z", )); }

    bool func_175507_cI() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_175507_cI", "()Z", )); }

    void setHorseTexturePaths() { (*javaClass->invokeMethod<void>(this->object, "setHorseTexturePaths", "()V", )); }

    String getHorseTexture() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHorseTexture", "()Ljava.lang.String;", )); }

    void makeHorseRearWithSound() { (*javaClass->invokeMethod<void>(this->object, "makeHorseRearWithSound", "()V", )); }

    bool canCarryChest() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canCarryChest", "()Z", )); }

    bool isBreedingItem(ItemStack arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBreedingItem", "(Lnet.minecraft.item.ItemStack;)Z", arg0)); }

    void func_110210_cH() { (*javaClass->invokeMethod<void>(this->object, "func_110210_cH", "()V", )); }

    void dropChestItems() { (*javaClass->invokeMethod<void>(this->object, "dropChestItems", "()V", )); }

    void dropItemsInChest(Entity arg0, AnimalChest arg1) { (*javaClass->invokeMethod<void>(this->object, "dropItemsInChest", "(Lnet.minecraft.entity.Entity;Lnet.minecraft.inventory.AnimalChest;)V", arg0, arg1)); }

    static bool isArmorItem(Item arg0) { return bool(*javaClass->invokeStaticMethod<boolean>(this->object, "isArmorItem", "(Lnet.minecraft.item.Item;)Z", arg0)); }

    bool canMateWith(EntityAnimal arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "canMateWith", "(Lnet.minecraft.entity.passive.EntityAnimal;)Z", arg0)); }

    EntityAgeable createChild(EntityAgeable arg0) { return EntityAgeable(*javaClass->invokeMethod<jobject>(this->object, "createChild", "(Lnet.minecraft.entity.EntityAgeable;)Lnet.minecraft.entity.EntityAgeable;", arg0)); }

    float getModifiedMaxHealth() { return float(*javaClass->invokeMethod<float>(this->object, "getModifiedMaxHealth", "()F", )); }

    double getModifiedJumpStrength() { return double(*javaClass->invokeMethod<double>(this->object, "getModifiedJumpStrength", "()D", )); }

    double getModifiedMovementSpeed() { return double(*javaClass->invokeMethod<double>(this->object, "getModifiedMovementSpeed", "()D", )); }

    IEntityLivingData onInitialSpawn(DifficultyInstance arg0, IEntityLivingData arg1) { return IEntityLivingData(*javaClass->invokeMethod<jobject>(this->object, "onInitialSpawn", "(Lnet.minecraft.world.DifficultyInstance;Lnet.minecraft.entity.IEntityLivingData;)Lnet.minecraft.entity.IEntityLivingData;", arg0, arg1)); }

    float getGrassEatingAmount(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getGrassEatingAmount", "(F)F", arg0)); }

    float getRearingAmount(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getRearingAmount", "(F)F", arg0)); }

    float getMouthOpennessAngle(float arg0) { return float(*javaClass->invokeMethod<float>(this->object, "getMouthOpennessAngle", "(F)F", arg0)); }

    void setJumpPower(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setJumpPower", "(I)V", arg0)); }

    void spawnHorseParticles(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "spawnHorseParticles", "(Z)V", arg0)); }

    void playStepSound(BlockPos arg0, Block arg1) { (*javaClass->invokeMethod<void>(this->object, "playStepSound", "(Lnet.minecraft.util.BlockPos;Lnet.minecraft.block.Block;)V", arg0, arg1)); }

    void updateRiderPosition() { (*javaClass->invokeMethod<void>(this->object, "updateRiderPosition", "()V", )); }

    void applyEntityAttributes() { (*javaClass->invokeMethod<void>(this->object, "applyEntityAttributes", "()V", )); }

    float getEyeHeight() { return float(*javaClass->invokeMethod<float>(this->object, "getEyeHeight", "()F", )); }

    void handleStatusUpdate(byte arg0) { (*javaClass->invokeMethod<void>(this->object, "handleStatusUpdate", "(B)V", arg0)); }

    bool isMovementBlocked() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isMovementBlocked", "()Z", )); }

    void onLivingUpdate() { (*javaClass->invokeMethod<void>(this->object, "onLivingUpdate", "()V", )); }

    String getHurtSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getHurtSound", "()Ljava.lang.String;", )); }

    String getDeathSound() { return String(*javaClass->invokeMethod<jobject>(this->object, "getDeathSound", "()Ljava.lang.String;", )); }

    void readEntityFromNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "readEntityFromNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    void writeEntityToNBT(NBTTagCompound arg0) { (*javaClass->invokeMethod<void>(this->object, "writeEntityToNBT", "(Lnet.minecraft.nbt.NBTTagCompound;)V", arg0)); }

    bool attackEntityFrom(DamageSource arg0, float arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "attackEntityFrom", "(Lnet.minecraft.util.DamageSource;F)Z", arg0, arg1)); }

    int getTotalArmorValue() { return int(*javaClass->invokeMethod<int>(this->object, "getTotalArmorValue", "()I", )); }

    float getSoundVolume() { return float(*javaClass->invokeMethod<float>(this->object, "getSoundVolume", "()F", )); }

    void onInventoryChanged(InventoryBasic arg0) { (*javaClass->invokeMethod<void>(this->object, "onInventoryChanged", "(Lnet.minecraft.inventory.InventoryBasic;)V", arg0)); }

    void initHorseChest() { (*javaClass->invokeMethod<void>(this->object, "initHorseChest", "()V", )); }

    void setHorseType(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorseType", "(I)V", arg0)); }

    void resetTexturePrefix() { (*javaClass->invokeMethod<void>(this->object, "resetTexturePrefix", "()V", )); }

    int getHorseType() { return int(*javaClass->invokeMethod<int>(this->object, "getHorseType", "()I", )); }

    void setHorseVariant(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setHorseVariant", "(I)V", arg0)); }

    int getHorseVariant() { return int(*javaClass->invokeMethod<int>(this->object, "getHorseVariant", "()I", )); }

    bool getHorseWatchableBoolean(int arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "getHorseWatchableBoolean", "(I)Z", arg0)); }

    void setHorseWatchableBoolean(int arg0, bool arg1) { (*javaClass->invokeMethod<void>(this->object, "setHorseWatchableBoolean", "(IZ)V", arg0, arg1)); }

    bool isAdultHorse() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isAdultHorse", "()Z", )); }

    bool func_110253_bW() { return bool(*javaClass->invokeMethod<boolean>(this->object, "func_110253_bW", "()Z", )); }

    float getHorseSize() { return float(*javaClass->invokeMethod<float>(this->object, "getHorseSize", "()F", )); }

    bool canBePushed() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canBePushed", "()Z", )); }

    bool isHorseSaddled() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isHorseSaddled", "()Z", )); }

    void moveEntityWithHeading(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "moveEntityWithHeading", "(FF)V", arg0, arg1)); }

    bool replaceItemInInventory(int arg0, ItemStack arg1) { return bool(*javaClass->invokeMethod<boolean>(this->object, "replaceItemInInventory", "(ILnet.minecraft.item.ItemStack;)Z", arg0, arg1)); }

    void setChested(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setChested", "(Z)V", arg0)); }

    bool isTame() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isTame", "()Z", )); }

    String getOwnerId() { return String(*javaClass->invokeMethod<jobject>(this->object, "getOwnerId", "()Ljava.lang.String;", )); }

    void setOwnerId(String arg0) { (*javaClass->invokeMethod<void>(this->object, "setOwnerId", "(Ljava.lang.String;)V", arg0)); }

    bool isUndead() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isUndead", "()Z", )); }

    bool isChested() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isChested", "()Z", )); }

    bool isRearing() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isRearing", "()Z", )); }

    bool isBreeding() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isBreeding", "()Z", )); }

    int getTemper() { return int(*javaClass->invokeMethod<int>(this->object, "getTemper", "()I", )); }

    void setTemper(int arg0) { (*javaClass->invokeMethod<void>(this->object, "setTemper", "(I)V", arg0)); }

    void dropChests() { (*javaClass->invokeMethod<void>(this->object, "dropChests", "()V", )); }

    void openGUI(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "openGUI", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    bool interact(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "interact", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void mountTo(EntityPlayer arg0) { (*javaClass->invokeMethod<void>(this->object, "mountTo", "(Lnet.minecraft.entity.player.EntityPlayer;)V", arg0)); }

    void setRearing(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setRearing", "(Z)V", arg0)); }

    bool isSterile() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isSterile", "()Z", )); }

    bool canMate() { return bool(*javaClass->invokeMethod<boolean>(this->object, "canMate", "()Z", )); }

    bool setTamedBy(EntityPlayer arg0) { return bool(*javaClass->invokeMethod<boolean>(this->object, "setTamedBy", "(Lnet.minecraft.entity.player.EntityPlayer;)Z", arg0)); }

    void entityInit() { (*javaClass->invokeMethod<void>(this->object, "entityInit", "()V", )); }

    void setEating(bool arg0) { (*javaClass->invokeMethod<void>(this->object, "setEating", "(Z)V", arg0)); }

    void onUpdate() { (*javaClass->invokeMethod<void>(this->object, "onUpdate", "()V", )); }

    void onDeath(DamageSource arg0) { (*javaClass->invokeMethod<void>(this->object, "onDeath", "(Lnet.minecraft.util.DamageSource;)V", arg0)); }

    bool isOnLadder() { return bool(*javaClass->invokeMethod<boolean>(this->object, "isOnLadder", "()Z", )); }

    void fall(float arg0, float arg1) { (*javaClass->invokeMethod<void>(this->object, "fall", "(FF)V", arg0, arg1)); }

    String getName() { return String(*javaClass->invokeMethod<jobject>(this->object, "getName", "()Ljava.lang.String;", )); }

};



